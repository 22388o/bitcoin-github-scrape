[
  {
    "sha": "fa872c9af397837bb17859b5f43adec71239682a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTg3MmM5YWYzOTc4MzdiYjE3ODU5YjVmNDNhZGVjNzEyMzk2ODJh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-12T22:39:11Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-09T00:17:20Z"
      },
      "message": "depends: Fix id_string invocations\n\nWe now use a script named gen_id to generate the base build_id/host_id.\nThis solves 2 problems:\n\n1. GNU Make special-casing exit code 127 (command not found) meant that\n   warnings about missing tools would propagate to the user's terminal\n   and broke our opportunistic build_id construction.\n2. This change ensures that we don't have arbitrary characters in our\n   make variables that would be misinterpreted by Make.\n\nSee comments in depends/Makefile and depends/gen_id for more\ninformation.",
      "tree": {
        "sha": "b51ce283cbfc1262d05db67206f4590364709efd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b51ce283cbfc1262d05db67206f4590364709efd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa872c9af397837bb17859b5f43adec71239682a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa872c9af397837bb17859b5f43adec71239682a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa872c9af397837bb17859b5f43adec71239682a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa872c9af397837bb17859b5f43adec71239682a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6664211be2b664dd471d7aeea12fcf2859dba860",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6664211be2b664dd471d7aeea12fcf2859dba860",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6664211be2b664dd471d7aeea12fcf2859dba860"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 99,
      "deletions": 31
    },
    "files": [
      {
        "sha": "c3d66cf8ecb8769a3de64a4199d6e11ef34e0a09",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 24,
        "deletions": 30,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa872c9af397837bb17859b5f43adec71239682a/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa872c9af397837bb17859b5f43adec71239682a/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=fa872c9af397837bb17859b5f43adec71239682a",
        "patch": "@@ -112,37 +112,31 @@ include builders/$(build_os).mk\n include builders/default.mk\n include packages/packages.mk\n \n-full_env=$(shell printenv)\n-\n-build_id_string:=$(BUILD_ID_SALT)\n-\n-# GCC only prints COLLECT_LTO_WRAPPER when invoked with just \"-v\", but we want\n-# the information from \"-v -E -\" as well, so just include both.\n+# Previously, we directly invoked the well-known programs using $(shell ...)\n+# to contruct build_id_string. However, that was problematic because:\n #\n-# '3>&1 1>&2 2>&3 > /dev/null' is supposed to swap stdin and stdout and silence\n-# stdin, since we only want the stderr output\n-build_id_string+=$(shell $(build_CC) -v < /dev/null 3>&1 1>&2 2>&3 > /dev/null) $(shell $(build_CC) -v -E - < /dev/null 3>&1 1>&2 2>&3 > /dev/null)\n-build_id_string+=$(shell $(build_AR) --version 2>/dev/null) $(filter AR_%,$(full_env)) ZERO_AR_DATE=$(ZERO_AR_DATE)\n-build_id_string+=$(shell $(build_CXX) -v < /dev/null 3>&1 1>&2 2>&3 > /dev/null) $(shell $(build_CXX) -v -E - < /dev/null 3>&1 1>&2 2>&3 > /dev/null)\n-build_id_string+=$(shell $(build_RANLIB) --version 2>/dev/null) $(filter RANLIB_%,$(full_env))\n-build_id_string+=$(shell $(build_STRIP) --version 2>/dev/null) $(filter STRIP_%,$(full_env))\n-\n-$(host_arch)_$(host_os)_id_string:=$(HOST_ID_SALT)\n-$(host_arch)_$(host_os)_id_string+=$(shell $(host_CC) -v < /dev/null 3>&1 1>&2 2>&3 > /dev/null) $(shell $(host_CC) -v -E - < /dev/null 3>&1 1>&2 2>&3 > /dev/null)\n-$(host_arch)_$(host_os)_id_string+=$(shell $(host_AR) --version 2>/dev/null) $(filter AR_%,$(full_env)) ZERO_AR_DATE=$(ZERO_AR_DATE)\n-$(host_arch)_$(host_os)_id_string+=$(shell $(host_CXX) -v < /dev/null 3>&1 1>&2 2>&3 > /dev/null) $(shell $(host_CXX) -v -E - < /dev/null 3>&1 1>&2 2>&3 > /dev/null)\n-$(host_arch)_$(host_os)_id_string+=$(shell $(host_RANLIB) --version 2>/dev/null) $(filter RANLIB_%,$(full_env))\n-$(host_arch)_$(host_os)_id_string+=$(shell $(host_STRIP) --version 2>/dev/null) $(filter STRIP_%,$(full_env))\n-\n-ifneq ($(strip $(FORCE_USE_SYSTEM_CLANG)),)\n-# Make sure that cache is invalidated when switching between system and\n-# depends-managed, pinned clang\n-build_id_string+=system_clang\n-$(host_arch)_$(host_os)_id_string+=system_clang\n-endif\n-\n-build_id_string+=GUIX_ENVIRONMENT=$(realpath $(GUIX_ENVIRONMENT))\n-$(host_arch)_$(host_os)_id_string+=GUIX_ENVIRONMENT=$(realpath $(GUIX_ENVIRONMENT))\n+# 1. When invoking a shell, GNU Make special-cases exit code 127 (command not\n+#    found) by not capturing the output but instead passing it through. This is\n+#    not done for any other exit code.\n+#\n+# 2. Characters like '#' (from these programs' output) would end up in make\n+#    variables like build_id_string, which would be wrongly interpreted by make\n+#    when these variables were used.\n+#\n+# Therefore, we should avoid having arbitrary strings in make variables where\n+# possible. The gen_id script used here hashes the output to construct a\n+# \"make-safe\" id.\n+#\n+# Also note that these lines need to be:\n+#\n+#     1. After including {hosts,builders}/*.mk, since they rely on the tool\n+#        variables (e.g. build_CC, host_STRIP, etc.) to be set.\n+#\n+#     2. Before including packages/*.mk (excluding packages/packages.mk), since\n+#        they rely on the build_id variables\n+#\n+build_id:=$(shell env CC='$(build_CC)' CXX='$(build_CXX)' AR='$(build_AR)' RANLIB='$(build_RANLIB)' STRIP='$(build_STRIP)' SHA256SUM='$(build_SHA256SUM)' DEBUG='$(DEBUG)' ./gen_id '$(BUILD_ID_SALT)' 'GUIX_ENVIRONMENT=$(realpath $(GUIX_ENVIRONMENT))')\n+$(host_arch)_$(host_os)_id:=$(shell env CC='$(host_CC)' CXX='$(host_CXX)' AR='$(host_AR)' RANLIB='$(host_RANLIB)' STRIP='$(host_STRIP)' SHA256SUM='$(build_SHA256SUM)' DEBUG='$(DEBUG)' ./gen_id '$(HOST_ID_SALT)' 'GUIX_ENVIRONMENT=$(realpath $(GUIX_ENVIRONMENT))')\n \n qrencode_packages_$(NO_QR) = $(qrencode_packages)\n "
      },
      {
        "sha": "34a030fab7d1f3b9ba4b177bf175bbfd06b9360a",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa872c9af397837bb17859b5f43adec71239682a/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa872c9af397837bb17859b5f43adec71239682a/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=fa872c9af397837bb17859b5f43adec71239682a",
        "patch": "@@ -49,7 +49,7 @@ define int_get_build_id\n $(eval $(1)_dependencies += $($(1)_$(host_arch)_$(host_os)_dependencies) $($(1)_$(host_os)_dependencies))\n $(eval $(1)_all_dependencies:=$(call int_get_all_dependencies,$(1),$($($(1)_type)_native_toolchain) $($($(1)_type)_native_binutils) $($(1)_dependencies)))\n $(foreach dep,$($(1)_all_dependencies),$(eval $(1)_build_id_deps+=$(dep)-$($(dep)_version)-$($(dep)_recipe_hash)))\n-$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash)-$(release_type) $($(1)_build_id_deps) $($($(1)_type)_id_string))\n+$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash)-$(release_type) $($(1)_build_id_deps) $($($(1)_type)_id))\n $(eval $(1)_build_id:=$(shell echo -n \"$($(1)_build_id_long)\" | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH)))\n final_build_id_long+=$($(package)_build_id_long)\n "
      },
      {
        "sha": "ac69ca7ee1fa2c0aa19dfd01ea76201caa70203a",
        "filename": "depends/gen_id",
        "status": "added",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa872c9af397837bb17859b5f43adec71239682a/depends/gen_id",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa872c9af397837bb17859b5f43adec71239682a/depends/gen_id",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/gen_id?ref=fa872c9af397837bb17859b5f43adec71239682a",
        "patch": "@@ -0,0 +1,74 @@\n+#!/usr/bin/env bash\n+\n+# Usage: env [ CC=... ] [ CXX=... ] [ AR=... ] [ RANLIB=... ] [ STRIP=... ] \\\n+#            [ DEBUG=... ] ./build-id [ID_SALT]...\n+#\n+# Prints to stdout a SHA256 hash representing the current toolset, used by\n+# depends/Makefile as a build id for caching purposes (detecting when the\n+# toolset has changed and the cache needs to be invalidated).\n+#\n+# If the DEBUG environment variable is non-empty and the system has `tee`\n+# available in its $PATH, the pre-image to the SHA256 hash will be printed to\n+# stderr. This is to help developers debug caching issues in depends.\n+\n+# This script explicitly does not `set -e` because id determination is mostly\n+# opportunistic: it is fine that things fail, as long as they fail consistently.\n+\n+# Command variables (CC/CXX/AR) which can be blank are invoked with `bash -c`,\n+# because the \"command not found\" error message printed by shells often include\n+# the line number, like so:\n+#\n+#     ./depends/gen_id: line 43: --version: command not found\n+#\n+# By invoking with `bash -c`, we ensure that the line number is always 1\n+\n+(\n+    # Redirect stderr to stdout\n+    exec 2>&1\n+\n+    echo \"BEGIN ALL\"\n+\n+    # Include any ID salts supplied via command line\n+    echo \"BEGIN ID SALT\"\n+    echo \"$@\"\n+    echo \"END ID SALT\"\n+\n+    # GCC only prints COLLECT_LTO_WRAPPER when invoked with just \"-v\", but we want\n+    # the information from \"-v -E -\" as well, so just include both.\n+    echo \"BEGIN CC\"\n+    bash -c \"${CC} -v\"\n+    bash -c \"${CC} -v -E -xc -o /dev/null - < /dev/null\"\n+    bash -c \"${CC} -v -E -xobjective-c -o /dev/null - < /dev/null\"\n+    echo \"END CC\"\n+\n+    echo \"BEGIN CXX\"\n+    bash -c \"${CXX} -v\"\n+    bash -c \"${CXX} -v -E -xc++ -o /dev/null - < /dev/null\"\n+    bash -c \"${CXX} -v -E -xobjective-c++ -o /dev/null - < /dev/null\"\n+    echo \"END CXX\"\n+\n+    echo \"BEGIN AR\"\n+    bash -c \"${AR} --version\"\n+    env | grep '^AR_'\n+    echo \"ZERO_AR_DATE=${ZERO_AR_DATE}\"\n+    echo \"END AR\"\n+\n+    echo \"BEGIN RANLIB\"\n+    bash -c \"${RANLIB} --version\"\n+    env | grep '^RANLIB_'\n+    echo \"END RANLIB\"\n+\n+    echo \"BEGIN STRIP\"\n+    bash -c \"${STRIP} --version\"\n+    env | grep '^STRIP_'\n+    echo \"END STRIP\"\n+\n+    echo \"END ALL\"\n+) | if [ -n \"$DEBUG\" ] && command -v tee > /dev/null 2>&1; then\n+        # When debugging and `tee` is available, output the preimage to stderr\n+        # in addition to passing through stdin to stdout\n+        tee >(cat 1>&2)\n+    else\n+        # Otherwise, passthrough stdin to stdout\n+        cat\n+    fi | ${SHA256SUM} - | cut -d' ' -f1"
      }
    ]
  }
]