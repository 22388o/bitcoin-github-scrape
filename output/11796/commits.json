[
  {
    "sha": "1e10854038796f211cefd171d368f537a3d68cee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTEwODU0MDM4Nzk2ZjIxMWNlZmQxNzFkMzY4ZjUzN2EzZDY4Y2Vl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-14T15:16:20Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-10T13:12:01Z"
      },
      "message": "[tests] [docs] update README for new test naming scheme",
      "tree": {
        "sha": "50240dca41b57197cf31ff3ed2ef62970e161fb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50240dca41b57197cf31ff3ed2ef62970e161fb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e10854038796f211cefd171d368f537a3d68cee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e10854038796f211cefd171d368f537a3d68cee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e10854038796f211cefd171d368f537a3d68cee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e10854038796f211cefd171d368f537a3d68cee/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a9da37fb3f4b53f556e1d46509b94dc3c661d75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a9da37fb3f4b53f556e1d46509b94dc3c661d75"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f3528378580c0a83547272532856b56fa8915b02",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e10854038796f211cefd171d368f537a3d68cee/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e10854038796f211cefd171d368f537a3d68cee/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=1e10854038796f211cefd171d368f537a3d68cee",
        "patch": "@@ -27,6 +27,20 @@ don't have test cases for.\n   `set_test_params()`, `add_options()` and `setup_xxxx()` methods at the top of\n   the subclass, then locally-defined helper methods, then the `run_test()` method.\n \n+#### Naming guidelines\n+\n+- Name the test `<area>_test.py`, where area can be one of the following:\n+    - `feature` for tests for full features that aren't wallet/mining/mempool, eg `feature_rbf.py`\n+    - `interface` for tests for other interfaces (REST, ZMQ, etc), eg `interface_rest.py`\n+    - `mempool` for tests for mempool behaviour, eg `mempool_reorg.py`\n+    - `mining` for tests for mining features, eg `mining_prioritisetransaction.py`\n+    - `p2p` for tests that explicitly test the p2p interface, eg `p2p_disconnect_ban.py`\n+    - `rpc` for tests for individual RPC methods or features, eg `rpc_listtransactions.py`\n+    - `wallet` for tests for wallet features, eg `wallet_keypool.py`\n+- use an underscore to separate words\n+    - exception: for tests for specific RPCs or command line options which don't include underscores, name the test after the exact RPC or argument name, eg `rpc_decodescript.py`, not `rpc_decode_script.py`\n+- Don't use the redundant work `test` in the name, eg `interface_zmq.py`, not `interface_zmq_test.py`\n+\n #### General test-writing advice\n \n - Set `self.num_nodes` to the minimum number of nodes necessary for the test."
      }
    ]
  },
  {
    "sha": "82b2712a6677f489b8a9a50f9ca739418e18fcc9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmIyNzEyYTY2NzdmNDg5YjhhOWE1MGY5Y2E3Mzk0MThlMThmY2M5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-14T15:41:30Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-10T13:12:01Z"
      },
      "message": "[tests] move witness util functions to blocktools.py\n\nThis avoids importing from segwit.py to bumpfee.py",
      "tree": {
        "sha": "14fd5a84ccfbafe2373900020fb004e9b981c2eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14fd5a84ccfbafe2373900020fb004e9b981c2eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82b2712a6677f489b8a9a50f9ca739418e18fcc9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82b2712a6677f489b8a9a50f9ca739418e18fcc9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82b2712a6677f489b8a9a50f9ca739418e18fcc9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82b2712a6677f489b8a9a50f9ca739418e18fcc9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e10854038796f211cefd171d368f537a3d68cee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e10854038796f211cefd171d368f537a3d68cee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e10854038796f211cefd171d368f537a3d68cee"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 76,
      "deletions": 49
    },
    "files": [
      {
        "sha": "44fa7b0feb22a759eba436ff8eafd017be9d7f61",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82b2712a6677f489b8a9a50f9ca739418e18fcc9/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82b2712a6677f489b8a9a50f9ca739418e18fcc9/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=82b2712a6677f489b8a9a50f9ca739418e18fcc9",
        "patch": "@@ -14,7 +14,7 @@\n make assumptions about execution order.\n \"\"\"\n \n-from segwit import send_to_witness\n+from test_framework.blocktools import send_to_witness\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework import blocktools\n from test_framework.mininode import CTransaction"
      },
      {
        "sha": "f03eda5bb22f323443b1ae718adb1a8fc913a1d4",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 9,
        "deletions": 47,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82b2712a6677f489b8a9a50f9ca739418e18fcc9/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82b2712a6677f489b8a9a50f9ca739418e18fcc9/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=82b2712a6677f489b8a9a50f9ca739418e18fcc9",
        "patch": "@@ -4,10 +4,18 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the SegWit changeover logic.\"\"\"\n \n+from test_framework.address import (\n+    key_to_p2sh_p2wpkh,\n+    key_to_p2wpkh,\n+    program_to_witness,\n+    script_to_p2sh_p2wsh,\n+    script_to_p2wsh,\n+)\n+from test_framework.blocktools import witness_script, send_to_witness\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import sha256, CTransaction, CTxIn, COutPoint, CTxOut, COIN, ToHex, FromHex\n-from test_framework.address import script_to_p2sh, key_to_p2pkh, key_to_p2sh_p2wpkh, key_to_p2wpkh, script_to_p2sh_p2wsh, script_to_p2wsh, program_to_witness\n+from test_framework.address import script_to_p2sh, key_to_p2pkh\n from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE\n from io import BytesIO\n \n@@ -16,52 +24,6 @@\n WIT_V0 = 0\n WIT_V1 = 1\n \n-# Create a scriptPubKey corresponding to either a P2WPKH output for the\n-# given pubkey, or a P2WSH output of a 1-of-1 multisig for the given\n-# pubkey. Returns the hex encoding of the scriptPubKey.\n-def witness_script(use_p2wsh, pubkey):\n-    if (use_p2wsh == False):\n-        # P2WPKH instead\n-        pubkeyhash = hash160(hex_str_to_bytes(pubkey))\n-        pkscript = CScript([OP_0, pubkeyhash])\n-    else:\n-        # 1-of-1 multisig\n-        witness_program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n-        scripthash = sha256(witness_program)\n-        pkscript = CScript([OP_0, scripthash])\n-    return bytes_to_hex_str(pkscript)\n-\n-# Return a transaction (in hex) that spends the given utxo to a segwit output,\n-# optionally wrapping the segwit output using P2SH.\n-def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n-    if use_p2wsh:\n-        program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n-        addr = script_to_p2sh_p2wsh(program) if encode_p2sh else script_to_p2wsh(program)\n-    else:\n-        addr = key_to_p2sh_p2wpkh(pubkey) if encode_p2sh else key_to_p2wpkh(pubkey)\n-    if not encode_p2sh:\n-        assert_equal(node.validateaddress(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n-    return node.createrawtransaction([utxo], {addr: amount})\n-\n-# Create a transaction spending a given utxo to a segwit output corresponding\n-# to the given pubkey: use_p2wsh determines whether to use P2WPKH or P2WSH;\n-# encode_p2sh determines whether to wrap in P2SH.\n-# sign=True will have the given node sign the transaction.\n-# insert_redeem_script will be added to the scriptSig, if given.\n-def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n-    tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n-    if (sign):\n-        signed = node.signrawtransaction(tx_to_witness)\n-        assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n-        return node.sendrawtransaction(signed[\"hex\"])\n-    else:\n-        if (insert_redeem_script):\n-            tx = FromHex(CTransaction(), tx_to_witness)\n-            tx.vin[0].scriptSig += CScript([hex_str_to_bytes(insert_redeem_script)])\n-            tx_to_witness = ToHex(tx)\n-\n-    return node.sendrawtransaction(tx_to_witness)\n-\n def getutxo(txid):\n     utxo = {}\n     utxo[\"vout\"] = 0"
      },
      {
        "sha": "3b4f17bc35fa8b7efce300595760622e0331fed9",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 66,
        "deletions": 1,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82b2712a6677f489b8a9a50f9ca739418e18fcc9/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82b2712a6677f489b8a9a50f9ca739418e18fcc9/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=82b2712a6677f489b8a9a50f9ca739418e18fcc9",
        "patch": "@@ -4,8 +4,27 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Utilities for manipulating blocks and transactions.\"\"\"\n \n+from .address import (\n+    key_to_p2sh_p2wpkh,\n+    key_to_p2sh_p2wpkh,\n+    key_to_p2wpkh,\n+    script_to_p2sh_p2wsh,\n+    script_to_p2wsh,\n+)\n from .mininode import *\n-from .script import CScript, OP_TRUE, OP_CHECKSIG, OP_RETURN\n+from .script import (\n+    CScript,\n+    OP_0,\n+    OP_1,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKSIG,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_RETURN,\n+    OP_TRUE,\n+    hash160,\n+)\n+from .util import assert_equal\n \n # Create a block (with regtest difficulty)\n def create_block(hashprev, coinbase, nTime=None):\n@@ -108,3 +127,49 @@ def get_legacy_sigopcount_tx(tx, fAccurate=True):\n         # scriptSig might be of type bytes, so convert to CScript for the moment\n         count += CScript(j.scriptSig).GetSigOpCount(fAccurate)\n     return count\n+\n+# Create a scriptPubKey corresponding to either a P2WPKH output for the\n+# given pubkey, or a P2WSH output of a 1-of-1 multisig for the given\n+# pubkey. Returns the hex encoding of the scriptPubKey.\n+def witness_script(use_p2wsh, pubkey):\n+    if (use_p2wsh == False):\n+        # P2WPKH instead\n+        pubkeyhash = hash160(hex_str_to_bytes(pubkey))\n+        pkscript = CScript([OP_0, pubkeyhash])\n+    else:\n+        # 1-of-1 multisig\n+        witness_program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n+        scripthash = sha256(witness_program)\n+        pkscript = CScript([OP_0, scripthash])\n+    return bytes_to_hex_str(pkscript)\n+\n+# Return a transaction (in hex) that spends the given utxo to a segwit output,\n+# optionally wrapping the segwit output using P2SH.\n+def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n+    if use_p2wsh:\n+        program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n+        addr = script_to_p2sh_p2wsh(program) if encode_p2sh else script_to_p2wsh(program)\n+    else:\n+        addr = key_to_p2sh_p2wpkh(pubkey) if encode_p2sh else key_to_p2wpkh(pubkey)\n+    if not encode_p2sh:\n+        assert_equal(node.validateaddress(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n+    return node.createrawtransaction([utxo], {addr: amount})\n+\n+# Create a transaction spending a given utxo to a segwit output corresponding\n+# to the given pubkey: use_p2wsh determines whether to use P2WPKH or P2WSH;\n+# encode_p2sh determines whether to wrap in P2SH.\n+# sign=True will have the given node sign the transaction.\n+# insert_redeem_script will be added to the scriptSig, if given.\n+def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n+    tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n+    if (sign):\n+        signed = node.signrawtransaction(tx_to_witness)\n+        assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n+        return node.sendrawtransaction(signed[\"hex\"])\n+    else:\n+        if (insert_redeem_script):\n+            tx = FromHex(CTransaction(), tx_to_witness)\n+            tx.vin[0].scriptSig += CScript([hex_str_to_bytes(insert_redeem_script)])\n+            tx_to_witness = ToHex(tx)\n+\n+    return node.sendrawtransaction(tx_to_witness)"
      }
    ]
  },
  {
    "sha": "7250b4e5630ec6e440652855876ba83b0365a15a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjUwYjRlNTYzMGVjNmU0NDA2NTI4NTU4NzZiYTgzYjAzNjVhMTVh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-11-30T09:51:32Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-11-30T09:59:39Z"
      },
      "message": "[tests] README.md nit fixes",
      "tree": {
        "sha": "b82a094bd32bbdd68ded7047ce952e5aad1b4042",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b82a094bd32bbdd68ded7047ce952e5aad1b4042"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7250b4e5630ec6e440652855876ba83b0365a15a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7250b4e5630ec6e440652855876ba83b0365a15a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7250b4e5630ec6e440652855876ba83b0365a15a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7250b4e5630ec6e440652855876ba83b0365a15a/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82b2712a6677f489b8a9a50f9ca739418e18fcc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82b2712a6677f489b8a9a50f9ca739418e18fcc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82b2712a6677f489b8a9a50f9ca739418e18fcc9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8d2cd023454757e7b42dc24d0c2c952954a2f926",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7250b4e5630ec6e440652855876ba83b0365a15a/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7250b4e5630ec6e440652855876ba83b0365a15a/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=7250b4e5630ec6e440652855876ba83b0365a15a",
        "patch": "@@ -39,7 +39,7 @@ don't have test cases for.\n     - `wallet` for tests for wallet features, eg `wallet_keypool.py`\n - use an underscore to separate words\n     - exception: for tests for specific RPCs or command line options which don't include underscores, name the test after the exact RPC or argument name, eg `rpc_decodescript.py`, not `rpc_decode_script.py`\n-- Don't use the redundant work `test` in the name, eg `interface_zmq.py`, not `interface_zmq_test.py`\n+- Don't use the redundant word `test` in the name, eg `interface_zmq.py`, not `interface_zmq_test.py`\n \n #### General test-writing advice\n \n@@ -87,7 +87,7 @@ start the networking thread.  (Continue with the test logic in your existing\n thread.)\n \n - Can be used to write tests where specific P2P protocol behavior is tested.\n-Examples tests are `p2p-accept-block.py`, `p2p-compactblocks.py`.\n+Examples tests are `p2p-acceptblock.py`, `p2p-compactblocks.py`.\n \n #### Comptool\n "
      }
    ]
  },
  {
    "sha": "9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjIwYmI0MGZiZDU5YzhmZDI0YTdjODJlODc2MDBlYTNjNWM3MDM5",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-11-30T10:11:18Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-12-07T15:50:02Z"
      },
      "message": "[tests] Check tests conform to naming convention\n\nExtra-Author: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "7918ce6e1c0779becbef31d1df9975b99022f5e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7918ce6e1c0779becbef31d1df9975b99022f5e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7250b4e5630ec6e440652855876ba83b0365a15a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7250b4e5630ec6e440652855876ba83b0365a15a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7250b4e5630ec6e440652855876ba83b0365a15a"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e85d67209620ae27807df4ed127637e6c9c1c19b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039",
        "patch": "@@ -260,6 +260,7 @@ def main():\n         sys.exit(0)\n \n     check_script_list(config[\"environment\"][\"SRCDIR\"])\n+    check_script_prefixes()\n \n     if not args.keepcache:\n         shutil.rmtree(\"%s/test/cache\" % config[\"environment\"][\"BUILDDIR\"], ignore_errors=True)\n@@ -444,6 +445,28 @@ def was_successful(self):\n         return self.status != \"Failed\"\n \n \n+def check_script_prefixes():\n+    \"\"\"Check that no more than `EXPECTED_VIOLATION_COUNT` of the\n+       test scripts don't start with one of the allowed name prefixes.\"\"\"\n+    EXPECTED_VIOLATION_COUNT = 77\n+\n+    # LEEWAY is provided as a transition measure, so that pull-requests\n+    # that introduce new tests that don't conform with the naming\n+    # convention don't immediately cause the tests to fail.\n+    LEEWAY = 10\n+\n+    good_prefixes_re = re.compile(\"(example|feature|interface|mempool|mining|p2p|rpc|wallet)_\")\n+    bad_script_names = [script for script in ALL_SCRIPTS if good_prefixes_re.match(script) is None]\n+\n+    if len(bad_script_names) < EXPECTED_VIOLATION_COUNT:\n+        print(\"{}HURRAY!{} Number of functional tests violating naming convention reduced!\".format(BOLD[1], BOLD[0]))\n+        print(\"Consider reducing EXPECTED_VIOLATION_COUNT from %d to %d\" % (EXPECTED_VIOLATION_COUNT, len(bad_script_names)))\n+    elif len(bad_script_names) > EXPECTED_VIOLATION_COUNT:\n+        print(\"INFO: %d tests not meeting naming conventions (expected %d):\" % (len(bad_script_names), EXPECTED_VIOLATION_COUNT))\n+        print(\"  %s\" % (\"\\n  \".join(sorted(bad_script_names))))\n+        assert len(bad_script_names) <= EXPECTED_VIOLATION_COUNT + LEEWAY, \"Too many tests not following naming convention! (%d found, expected: <= %d)\" % (len(bad_script_names), EXPECTED_VIOLATION_COUNT)\n+\n+\n def check_script_list(src_dir):\n     \"\"\"Check scripts directory.\n "
      }
    ]
  },
  {
    "sha": "5fecd842a6ff3d094c21f84b81b6cef09787c3b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmVjZDg0MmE2ZmYzZDA5NGMyMWY4NGI4MWI2Y2VmMDk3ODdjM2I3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-01-03T06:16:56Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-01-03T06:16:56Z"
      },
      "message": "[tests] Remove redundant import in blocktools.py test",
      "tree": {
        "sha": "aba5a1805e28e7757e6ba6c438148ff9e505a1e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aba5a1805e28e7757e6ba6c438148ff9e505a1e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fecd842a6ff3d094c21f84b81b6cef09787c3b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fecd842a6ff3d094c21f84b81b6cef09787c3b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fecd842a6ff3d094c21f84b81b6cef09787c3b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fecd842a6ff3d094c21f84b81b6cef09787c3b7/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b20bb40fbd59c8fd24a7c82e87600ea3c5c7039"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "55f398719a99338d17b8112328abd143e793613e",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fecd842a6ff3d094c21f84b81b6cef09787c3b7/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fecd842a6ff3d094c21f84b81b6cef09787c3b7/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=5fecd842a6ff3d094c21f84b81b6cef09787c3b7",
        "patch": "@@ -5,7 +5,6 @@\n \"\"\"Utilities for manipulating blocks and transactions.\"\"\"\n \n from .address import (\n-    key_to_p2sh_p2wpkh,\n     key_to_p2sh_p2wpkh,\n     key_to_p2wpkh,\n     script_to_p2sh_p2wsh,\n@@ -18,8 +17,6 @@\n     OP_1,\n     OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n-    OP_EQUAL,\n-    OP_HASH160,\n     OP_RETURN,\n     OP_TRUE,\n     hash160,"
      }
    ]
  }
]