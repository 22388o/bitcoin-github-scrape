[
  {
    "sha": "fa359d14c09c6b139dead5da17c5a1c02f68393c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM1OWQxNGMwOWM2YjEzOWRlYWQ1ZGExN2M1YTFjMDJmNjgzOTNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-30T13:36:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-30T15:45:16Z"
      },
      "message": "test: Strip down previous releases boilerplate",
      "tree": {
        "sha": "4259dc1fcf467f8fb6bb3d2d1f25f49b613c4e7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4259dc1fcf467f8fb6bb3d2d1f25f49b613c4e7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa359d14c09c6b139dead5da17c5a1c02f68393c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiujwv+MAmwZHUKYzh+3+7PCQ+iok1aheo6bZxZgDqoWGxQQjTM0pXVahrw1EAa\n/VIDLL5DjYdzs1mrZzLCAHWBV/Majg2SHeKzRQQnczDz6Hk7ccWsvm+LZhzcManb\nmXt3OPBJdcLcurhbxve/9zQgJlJG9EUoMDoC8hVnUXLhf/DgenoiL3Qq+zbEEdb4\nG+GQcnHncv2pVcbsd+pF4sKf51O4ZdktOTZdIh8OkBfg6DHYcDXUEKc65J6cjqIH\nZ8UkqfnfUAGFGy51N33iSS8Hx2YE+rYfwMFgJ41zlfx5wa/wzwUJ+gSAGx7ba9/c\ni0993vmD0xcg7blPI2+AsDY6AMGA7N8ezk80MIVGmhIEAqzSJLHRrsbCgMISt9Z5\naKuvOJfzm2tAbUFxzGioOrQtbuX9/7h8bF1Cr9w1CdpZ/gTEzbV4q1PGiCJCC68Y\nMzT1kDpO8hIKYvXNq6Dm2MKVkmo9R7fBkS+aKXykFueunqKthJ+xdT5+9ZJdhyln\nQv/OyTh4\n=9vJv\n-----END PGP SIGNATURE-----",
        "payload": "tree 4259dc1fcf467f8fb6bb3d2d1f25f49b613c4e7d\nparent 00c1a4d9a95eaead64508ee2a7625bdc67e65fa3\nauthor MarcoFalke <falke.marco@gmail.com> 1588253814 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1588261516 -0400\n\ntest: Strip down previous releases boilerplate\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa359d14c09c6b139dead5da17c5a1c02f68393c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa359d14c09c6b139dead5da17c5a1c02f68393c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa359d14c09c6b139dead5da17c5a1c02f68393c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00c1a4d9a95eaead64508ee2a7625bdc67e65fa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00c1a4d9a95eaead64508ee2a7625bdc67e65fa3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00c1a4d9a95eaead64508ee2a7625bdc67e65fa3"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 56,
      "deletions": 50
    },
    "files": [
      {
        "sha": "e69a217fad1d002947a4973d4661e503515c0bb1",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 6,
        "deletions": 25,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa359d14c09c6b139dead5da17c5a1c02f68393c/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa359d14c09c6b139dead5da17c5a1c02f68393c/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=fa359d14c09c6b139dead5da17c5a1c02f68393c",
        "patch": "@@ -18,15 +18,16 @@\n import os\n import shutil\n \n-from test_framework.test_framework import BitcoinTestFramework, SkipTest\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.descriptors import descsum_create\n \n from test_framework.util import (\n     assert_equal,\n     sync_blocks,\n-    sync_mempools\n+    sync_mempools,\n )\n \n+\n class BackwardsCompatibilityTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -42,35 +43,15 @@ def set_test_params(self):\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n+        self.skip_if_no_previous_releases()\n \n     def setup_nodes(self):\n-        if os.getenv(\"TEST_PREVIOUS_RELEASES\") == \"false\":\n-            raise SkipTest(\"backwards compatibility tests\")\n-\n-        releases_path = os.getenv(\"PREVIOUS_RELEASES_DIR\") or os.getcwd() + \"/releases\"\n-        if not os.path.isdir(releases_path):\n-            if os.getenv(\"TEST_PREVIOUS_RELEASES\") == \"true\":\n-                raise AssertionError(\"TEST_PREVIOUS_RELEASES=1 but releases missing: \" + releases_path)\n-            raise SkipTest(\"This test requires binaries for previous releases\")\n-\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args, versions=[\n             None,\n             None,\n-            190000,\n+            190001,\n             180100,\n-            170100\n-        ], binary=[\n-            self.options.bitcoind,\n-            self.options.bitcoind,\n-            releases_path + \"/v0.19.0.1/bin/bitcoind\",\n-            releases_path + \"/v0.18.1/bin/bitcoind\",\n-            releases_path + \"/v0.17.1/bin/bitcoind\"\n-        ], binary_cli=[\n-            self.options.bitcoincli,\n-            self.options.bitcoincli,\n-            releases_path + \"/v0.19.0.1/bin/bitcoin-cli\",\n-            releases_path + \"/v0.18.1/bin/bitcoin-cli\",\n-            releases_path + \"/v0.17.1/bin/bitcoin-cli\"\n+            170100,\n         ])\n \n         self.start_nodes()"
      },
      {
        "sha": "81d0d66d66f8232cdb2693c559352dd7169b6722",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 45,
        "deletions": 5,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa359d14c09c6b139dead5da17c5a1c02f68393c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa359d14c09c6b139dead5da17c5a1c02f68393c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa359d14c09c6b139dead5da17c5a1c02f68393c",
        "patch": "@@ -6,11 +6,12 @@\n \n import configparser\n from enum import Enum\n-import logging\n import argparse\n+import logging\n import os\n import pdb\n import random\n+import re\n import shutil\n import subprocess\n import sys\n@@ -185,10 +186,11 @@ def setup(self):\n         self.options.bitcoind = os.getenv(\"BITCOIND\", default=config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"])\n         self.options.bitcoincli = os.getenv(\"BITCOINCLI\", default=config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-cli' + config[\"environment\"][\"EXEEXT\"])\n \n+        self.options.previous_releases_path = os.getenv(\"PREVIOUS_RELEASES_DIR\") or os.getcwd() + \"/releases\"\n+\n         os.environ['PATH'] = os.pathsep.join([\n             os.path.join(config['environment']['BUILDDIR'], 'src'),\n-            os.path.join(config['environment']['BUILDDIR'], 'src', 'qt'),\n-            os.environ['PATH']\n+            os.path.join(config['environment']['BUILDDIR'], 'src', 'qt'), os.environ['PATH']\n         ])\n \n         # Set up temp directory and start logging\n@@ -388,6 +390,25 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None, bi\n \n         Should only be called once after the nodes have been specified in\n         set_test_params().\"\"\"\n+        def get_bin_from_version(version, bin_name, bin_default):\n+            if not version:\n+                return bin_default\n+            return os.path.join(\n+                self.options.previous_releases_path,\n+                re.sub(\n+                    r'\\.0$',\n+                    '',  # remove trailing .0 for point releases\n+                    'v{}.{}.{}.{}'.format(\n+                        (version % 100000000) // 1000000,\n+                        (version % 1000000) // 10000,\n+                        (version % 10000) // 100,\n+                        (version % 100) // 1,\n+                    ),\n+                ),\n+                'bin',\n+                bin_name,\n+            )\n+\n         if self.bind_to_localhost_only:\n             extra_confs = [[\"bind=127.0.0.1\"]] * num_nodes\n         else:\n@@ -397,9 +418,9 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None, bi\n         if versions is None:\n             versions = [None] * num_nodes\n         if binary is None:\n-            binary = [self.options.bitcoind] * num_nodes\n+            binary = [get_bin_from_version(v, 'bitcoind', self.options.bitcoind) for v in versions]\n         if binary_cli is None:\n-            binary_cli = [self.options.bitcoincli] * num_nodes\n+            binary_cli = [get_bin_from_version(v, 'bitcoin-cli', self.options.bitcoincli) for v in versions]\n         assert_equal(len(extra_confs), num_nodes)\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(versions), num_nodes)\n@@ -640,6 +661,25 @@ def skip_if_no_cli(self):\n         if not self.is_cli_compiled():\n             raise SkipTest(\"bitcoin-cli has not been compiled.\")\n \n+    def skip_if_no_previous_releases(self):\n+        \"\"\"Skip the running test if previous releases are not available.\"\"\"\n+        if not self.has_previous_releases():\n+            raise SkipTest(\"previous releases not available or disabled\")\n+\n+    def has_previous_releases(self):\n+        \"\"\"Checks whether previous releases are present and enabled.\"\"\"\n+        if os.getenv(\"TEST_PREVIOUS_RELEASES\") == \"false\":\n+            # disabled\n+            return False\n+\n+        if not os.path.isdir(self.options.previous_releases_path):\n+            if os.getenv(\"TEST_PREVIOUS_RELEASES\") == \"true\":\n+                raise AssertionError(\"TEST_PREVIOUS_RELEASES=true but releases missing: {}\".format(\n+                    self.options.previous_releases_path))\n+            # missing\n+            return False\n+        return True\n+\n     def is_cli_compiled(self):\n         \"\"\"Checks whether bitcoin-cli was compiled.\"\"\"\n         return self.config[\"components\"].getboolean(\"ENABLE_CLI\")"
      },
      {
        "sha": "e7e71bf3f68b4c4ce19b0d39330d334baee7afa4",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 5,
        "deletions": 20,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa359d14c09c6b139dead5da17c5a1c02f68393c/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa359d14c09c6b139dead5da17c5a1c02f68393c/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=fa359d14c09c6b139dead5da17c5a1c02f68393c",
        "patch": "@@ -12,14 +12,15 @@\n import os\n import shutil\n \n-from test_framework.test_framework import BitcoinTestFramework, SkipTest\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     adjust_bitcoin_conf_for_pre_17,\n     assert_equal,\n     assert_greater_than,\n-    assert_is_hex_string\n+    assert_is_hex_string,\n )\n \n+\n class UpgradeWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -32,32 +33,16 @@ def set_test_params(self):\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n+        self.skip_if_no_previous_releases()\n \n     def setup_network(self):\n         self.setup_nodes()\n \n     def setup_nodes(self):\n-        if os.getenv(\"TEST_PREVIOUS_RELEASES\") == \"false\":\n-            raise SkipTest(\"upgradewallet RPC tests\")\n-\n-        releases_path = os.getenv(\"PREVIOUS_RELEASES_DIR\") or os.getcwd() + \"/releases\"\n-        if not os.path.isdir(releases_path):\n-            if os.getenv(\"TEST_PREVIOUS_RELEASES\") == \"true\":\n-                raise AssertionError(\"TEST_PREVIOUS_RELEASES=1 but releases missing: \" + releases_path)\n-            raise SkipTest(\"This test requires binaries for previous releases\")\n-\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args, versions=[\n             None,\n             160300,\n-            150200\n-        ], binary=[\n-            self.options.bitcoind,\n-            releases_path + \"/v0.16.3/bin/bitcoind\",\n-            releases_path + \"/v0.15.2/bin/bitcoind\",\n-        ], binary_cli=[\n-            self.options.bitcoincli,\n-            releases_path + \"/v0.16.3/bin/bitcoin-cli\",\n-            releases_path + \"/v0.15.2/bin/bitcoin-cli\",\n+            150200,\n         ])\n         # adapt bitcoin.conf, because older bitcoind's don't recognize config sections\n         adjust_bitcoin_conf_for_pre_17(self.nodes[1].bitcoinconf)"
      }
    ]
  }
]