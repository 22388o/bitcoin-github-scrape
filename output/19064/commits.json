[
  {
    "sha": "30e44482152488a78f2c495798a75e6f553dc0c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGU0NDQ4MjE1MjQ4OGE3OGYyYzQ5NTc5OGE3NWU2ZjU1M2RjMGM4",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-04-13T17:44:46Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-04-25T09:28:44Z"
      },
      "message": "refactor: Make TraceThread a non-template free function\n\nAlso it is moved into its own module.",
      "tree": {
        "sha": "3a23901c0ed8c22ebad5cf8451be272f72fd2989",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a23901c0ed8c22ebad5cf8451be272f72fd2989"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30e44482152488a78f2c495798a75e6f553dc0c8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmCFNkwACgkQQQEIES5+\nqB8G0RAAreoDor+uLgG6UtbRJyImLIs5q1C/w7j2j05u9VsABG83f6qNDGfoUIy3\navGA/YtkNEhzy1pLdrz5RJjEUZao4U6gLsSoHqZD9inSTlc2Nc6skmb3b9VQ0EfM\noVA8Ujkf1y25Q/mK4D4qLRjSLN1vJVll5TG2lRmzipZdG5rjT6W1ffKhh9pBIkb3\nmR49gnPhJ7WdXkdbBg1XBy4y3g9yTHyTOMQ0Wlym6dr4bN4Rw6y3t+TWmxHcrzYV\nUqg1fDlzDbVihdX7SxO7v+IY5FMS1fV8QF1bmiE/g/4DIfaKAdTwSIdFKBpR6CNE\nPr/hwntJsKFr6d4DNPYNeepJ7QJgWNe7PKovfpCzhaOkdIeXlO5Q+fzid2Ax1th8\nyT0PpOYy6d08cmeqyZvAKPof46SXde7cQX0IKEPILp/VEov+raF7Gg5onuyA90wY\nM8LWEnlCr0wpM1hK8XZt1tJYK3MKHN8iPEoKZugIwQ62QRGLAEC3+nHJH/q12pWi\nxymUs3yoxi+ShD0mLMSnwAhJJbm4mt9mZ4GjGfqlrAEJCfRRlU9Dl6gjDcXba15e\n6GG+4G0egG97rVX3SJ3ti2L4rmYAJlVOtTks5nNBhlVWfeayV0gLBFxYXSVEzG/n\n/j0GXu5/hdSrxY+SRXOrAAUy5D85RJ56hQ+dls5BkPBQ4fia2O4=\n=4Uza\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a23901c0ed8c22ebad5cf8451be272f72fd2989\nparent a1f0b8b62eb851c837a3618583b7c2fd4d12006c\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1618335886 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1619342924 +0300\n\nrefactor: Make TraceThread a non-template free function\n\nAlso it is moved into its own module.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30e44482152488a78f2c495798a75e6f553dc0c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30e44482152488a78f2c495798a75e6f553dc0c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30e44482152488a78f2c495798a75e6f553dc0c8/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1f0b8b62eb851c837a3618583b7c2fd4d12006c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1f0b8b62eb851c837a3618583b7c2fd4d12006c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1f0b8b62eb851c837a3618583b7c2fd4d12006c"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 67,
      "deletions": 36
    },
    "files": [
      {
        "sha": "18aaa49d08e9af8b19a56c92acd5b102659b436f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30e44482152488a78f2c495798a75e6f553dc0c8/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30e44482152488a78f2c495798a75e6f553dc0c8/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=30e44482152488a78f2c495798a75e6f553dc0c8",
        "patch": "@@ -250,6 +250,7 @@ BITCOIN_CORE_H = \\\n   util/spanparsing.h \\\n   util/string.h \\\n   util/system.h \\\n+  util/thread.h \\\n   util/threadnames.h \\\n   util/time.h \\\n   util/tokenpipe.h \\\n@@ -577,6 +578,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/rbf.cpp \\\n   util/readwritefile.cpp \\\n   util/settings.cpp \\\n+  util/thread.cpp \\\n   util/threadnames.cpp \\\n   util/spanparsing.cpp \\\n   util/strencodings.cpp \\"
      },
      {
        "sha": "88d5fbee1d205a73709634533c01de08a2db3912",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30e44482152488a78f2c495798a75e6f553dc0c8/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30e44482152488a78f2c495798a75e6f553dc0c8/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=30e44482152488a78f2c495798a75e6f553dc0c8",
        "patch": "@@ -8,7 +8,7 @@\n #include <node/ui_interface.h>\n #include <shutdown.h>\n #include <tinyformat.h>\n-#include <util/system.h>\n+#include <util/thread.h>\n #include <util/translation.h>\n #include <validation.h> // For g_chainman\n #include <warnings.h>\n@@ -349,7 +349,7 @@ void BaseIndex::Start()\n         return;\n     }\n \n-    m_thread_sync = std::thread(&TraceThread<std::function<void()>>, GetName(),\n+    m_thread_sync = std::thread(&util::TraceThread, GetName(),\n                                 std::bind(&BaseIndex::ThreadSync, this));\n }\n "
      },
      {
        "sha": "e78e97ae3584386a8630c9f82e26d3a9a0b919e7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30e44482152488a78f2c495798a75e6f553dc0c8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30e44482152488a78f2c495798a75e6f553dc0c8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=30e44482152488a78f2c495798a75e6f553dc0c8",
        "patch": "@@ -58,6 +58,7 @@\n #include <util/moneystr.h>\n #include <util/string.h>\n #include <util/system.h>\n+#include <util/thread.h>\n #include <util/threadnames.h>\n #include <util/translation.h>\n #include <validation.h>\n@@ -1266,7 +1267,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     node.scheduler = std::make_unique<CScheduler>();\n \n     // Start the lightweight task scheduler thread\n-    node.scheduler->m_service_thread = std::thread([&] { TraceThread(\"scheduler\", [&] { node.scheduler->serviceQueue(); }); });\n+    node.scheduler->m_service_thread = std::thread([&] { util::TraceThread(\"scheduler\", [&] { node.scheduler->serviceQueue(); }); });\n \n     // Gather some entropy once per minute.\n     node.scheduler->scheduleEvery([]{\n@@ -1791,7 +1792,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         vImportFiles.push_back(strFile);\n     }\n \n-    chainman.m_load_block = std::thread(&TraceThread<std::function<void()>>, \"loadblk\", [=, &chainman, &args] {\n+    chainman.m_load_block = std::thread(&util::TraceThread, \"loadblk\", [=, &chainman, &args] {\n         ThreadImport(chainman, vImportFiles, args);\n     });\n "
      },
      {
        "sha": "315c4b525f1ae32e9e5a51329e3c9094290a3aa9",
        "filename": "src/mapport.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30e44482152488a78f2c495798a75e6f553dc0c8/src/mapport.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30e44482152488a78f2c495798a75e6f553dc0c8/src/mapport.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mapport.cpp?ref=30e44482152488a78f2c495798a75e6f553dc0c8",
        "patch": "@@ -15,6 +15,7 @@\n #include <netbase.h>\n #include <threadinterrupt.h>\n #include <util/system.h>\n+#include <util/thread.h>\n \n #ifdef USE_NATPMP\n #include <compat.h>\n@@ -255,7 +256,7 @@ void StartThreadMapPort()\n {\n     if (!g_mapport_thread.joinable()) {\n         assert(!g_mapport_interrupt);\n-        g_mapport_thread = std::thread(std::bind(&TraceThread<void (*)()>, \"mapport\", &ThreadMapPort));\n+        g_mapport_thread = std::thread(std::bind(&util::TraceThread, \"mapport\", &ThreadMapPort));\n     }\n }\n "
      },
      {
        "sha": "0845aeebc07630e43ddbc491f31230591dfa1b4e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30e44482152488a78f2c495798a75e6f553dc0c8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30e44482152488a78f2c495798a75e6f553dc0c8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=30e44482152488a78f2c495798a75e6f553dc0c8",
        "patch": "@@ -23,6 +23,7 @@\n #include <scheduler.h>\n #include <util/sock.h>\n #include <util/strencodings.h>\n+#include <util/thread.h>\n #include <util/translation.h>\n \n #ifdef WIN32\n@@ -2527,15 +2528,15 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     }\n \n     // Send and receive from sockets, accept connections\n-    threadSocketHandler = std::thread(&TraceThread<std::function<void()> >, \"net\", std::function<void()>(std::bind(&CConnman::ThreadSocketHandler, this)));\n+    threadSocketHandler = std::thread(&util::TraceThread, \"net\", std::bind(&CConnman::ThreadSocketHandler, this));\n \n     if (!gArgs.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED))\n         LogPrintf(\"DNS seeding disabled\\n\");\n     else\n-        threadDNSAddressSeed = std::thread(&TraceThread<std::function<void()> >, \"dnsseed\", std::function<void()>(std::bind(&CConnman::ThreadDNSAddressSeed, this)));\n+        threadDNSAddressSeed = std::thread(&util::TraceThread, \"dnsseed\", std::bind(&CConnman::ThreadDNSAddressSeed, this));\n \n     // Initiate manual connections\n-    threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()> >, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));\n+    threadOpenAddedConnections = std::thread(&util::TraceThread, \"addcon\", std::bind(&CConnman::ThreadOpenAddedConnections, this));\n \n     if (connOptions.m_use_addrman_outgoing && !connOptions.m_specified_outgoing.empty()) {\n         if (clientInterface) {\n@@ -2546,14 +2547,14 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n         return false;\n     }\n     if (connOptions.m_use_addrman_outgoing || !connOptions.m_specified_outgoing.empty())\n-        threadOpenConnections = std::thread(&TraceThread<std::function<void()> >, \"opencon\", std::function<void()>(std::bind(&CConnman::ThreadOpenConnections, this, connOptions.m_specified_outgoing)));\n+        threadOpenConnections = std::thread(&util::TraceThread, \"opencon\", std::bind(&CConnman::ThreadOpenConnections, this, connOptions.m_specified_outgoing));\n \n     // Process messages\n-    threadMessageHandler = std::thread(&TraceThread<std::function<void()> >, \"msghand\", std::function<void()>(std::bind(&CConnman::ThreadMessageHandler, this)));\n+    threadMessageHandler = std::thread(&util::TraceThread, \"msghand\", std::bind(&CConnman::ThreadMessageHandler, this));\n \n     if (connOptions.m_i2p_accept_incoming && m_i2p_sam_session.get() != nullptr) {\n         threadI2PAcceptIncoming =\n-            std::thread(&TraceThread<std::function<void()>>, \"i2paccept\",\n+            std::thread(&util::TraceThread, \"i2paccept\",\n                         std::function<void()>(std::bind(&CConnman::ThreadI2PAcceptIncoming, this)));\n     }\n "
      },
      {
        "sha": "eb3ec3446b7829e1fb0f5ae6757bcc43193bb704",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30e44482152488a78f2c495798a75e6f553dc0c8/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30e44482152488a78f2c495798a75e6f553dc0c8/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=30e44482152488a78f2c495798a75e6f553dc0c8",
        "patch": "@@ -28,6 +28,8 @@\n #include <txdb.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n+#include <util/thread.h>\n+#include <util/threadnames.h>\n #include <util/time.h>\n #include <util/translation.h>\n #include <util/url.h>\n@@ -132,7 +134,7 @@ ChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::ve\n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n     m_node.scheduler = std::make_unique<CScheduler>();\n-    m_node.scheduler->m_service_thread = std::thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n+    m_node.scheduler->m_service_thread = std::thread([&] { util::TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n     GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));"
      },
      {
        "sha": "19d0a5da81c31508f77399b94266924e15791676",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30e44482152488a78f2c495798a75e6f553dc0c8/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30e44482152488a78f2c495798a75e6f553dc0c8/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=30e44482152488a78f2c495798a75e6f553dc0c8",
        "patch": "@@ -15,6 +15,7 @@\n #include <util/readwritefile.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n+#include <util/thread.h>\n #include <util/time.h>\n \n #include <deque>\n@@ -596,7 +597,7 @@ void StartTorControl(CService onion_service_target)\n         return;\n     }\n \n-    torControlThread = std::thread(&TraceThread<std::function<void()>>, \"torcontrol\", [onion_service_target] {\n+    torControlThread = std::thread(&util::TraceThread, \"torcontrol\", [onion_service_target] {\n         TorControlThread(onion_service_target);\n     });\n }"
      },
      {
        "sha": "5957637e810ae8bd09c8a684ef13bbf64543b55a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30e44482152488a78f2c495798a75e6f553dc0c8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30e44482152488a78f2c495798a75e6f553dc0c8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=30e44482152488a78f2c495798a75e6f553dc0c8",
        "patch": "@@ -18,6 +18,7 @@\n #include <validation.h>\n #include <validationinterface.h>\n \n+#include <cmath>\n #include <optional>\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,"
      },
      {
        "sha": "882eb27443cf552ad9a6449b622c8a4129589b38",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30e44482152488a78f2c495798a75e6f553dc0c8/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30e44482152488a78f2c495798a75e6f553dc0c8/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=30e44482152488a78f2c495798a75e6f553dc0c8",
        "patch": "@@ -22,7 +22,6 @@\n #include <sync.h>\n #include <tinyformat.h>\n #include <util/settings.h>\n-#include <util/threadnames.h>\n #include <util/time.h>\n \n #include <any>\n@@ -458,28 +457,6 @@ std::string HelpMessageOpt(const std::string& option, const std::string& message\n  */\n int GetNumCores();\n \n-/**\n- * .. and a wrapper that just calls func once\n- */\n-template <typename Callable> void TraceThread(const char* name,  Callable func)\n-{\n-    util::ThreadRename(name);\n-    try\n-    {\n-        LogPrintf(\"%s thread start\\n\", name);\n-        func();\n-        LogPrintf(\"%s thread exit\\n\", name);\n-    }\n-    catch (const std::exception& e) {\n-        PrintExceptionContinue(&e, name);\n-        throw;\n-    }\n-    catch (...) {\n-        PrintExceptionContinue(nullptr, name);\n-        throw;\n-    }\n-}\n-\n std::string CopyrightHolders(const std::string& strPrefix);\n \n /**"
      },
      {
        "sha": "14be668685973bff8a1b653427098bddffb341de",
        "filename": "src/util/thread.cpp",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30e44482152488a78f2c495798a75e6f553dc0c8/src/util/thread.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30e44482152488a78f2c495798a75e6f553dc0c8/src/util/thread.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/thread.cpp?ref=30e44482152488a78f2c495798a75e6f553dc0c8",
        "patch": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/thread.h>\n+\n+#include <logging.h>\n+#include <util/system.h>\n+#include <util/threadnames.h>\n+\n+#include <exception>\n+\n+void util::TraceThread(const char* thread_name, std::function<void()> thread_func)\n+{\n+    util::ThreadRename(thread_name);\n+    try {\n+        LogPrintf(\"%s thread start\\n\", thread_name);\n+        thread_func();\n+        LogPrintf(\"%s thread exit\\n\", thread_name);\n+    } catch (const std::exception& e) {\n+        PrintExceptionContinue(&e, thread_name);\n+        throw;\n+    } catch (...) {\n+        PrintExceptionContinue(nullptr, thread_name);\n+        throw;\n+    }\n+}"
      },
      {
        "sha": "ca2eccc0c314aecb73ac5ec1c9619093d51b2e56",
        "filename": "src/util/thread.h",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30e44482152488a78f2c495798a75e6f553dc0c8/src/util/thread.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30e44482152488a78f2c495798a75e6f553dc0c8/src/util/thread.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/thread.h?ref=30e44482152488a78f2c495798a75e6f553dc0c8",
        "patch": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_THREAD_H\n+#define BITCOIN_UTIL_THREAD_H\n+\n+#include <functional>\n+\n+namespace util {\n+/**\n+ * A wrapper for do-something-once thread functions.\n+ */\n+void TraceThread(const char* thread_name, std::function<void()> thread_func);\n+\n+} // namespace util\n+\n+#endif // BITCOIN_UTIL_THREAD_H"
      }
    ]
  },
  {
    "sha": "a508f718f3e087c96a306399582a85df2e1d53ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTA4ZjcxOGYzZTA4N2M5NmEzMDYzOTk1ODJhODVkZjJlMWQ1M2Fl",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-04-13T18:17:55Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-04-29T15:39:01Z"
      },
      "message": "refactor: Use appropriate thread constructor",
      "tree": {
        "sha": "e3bc35738c1489f5324fb08e65f8d6ec8a7902ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3bc35738c1489f5324fb08e65f8d6ec8a7902ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a508f718f3e087c96a306399582a85df2e1d53ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmCK0xUACgkQQQEIES5+\nqB895RAAnL2EsVZxeJx1tNWTf+/payyPQ7eMOHUkfngDvSynu8jqJx7lNTpdne2g\njNG/BhS+pmCiBdHdmdw9WN1YCZrkgT6XxE5+ZQBliPQBaxPhUGAB6Bumy+Vh6hCk\nGXuKKi65ndvuvo5ScY7aCN9HVMDL7w+muSfSEe4PgGvRfKyU4PVcHfgF4ryWmSY1\ns0XEugwbFpLWGVnHGCZ1Cnl0ebApuEdaTxltWKmV3qzfSRb6uJAl760feFBrrzaN\nFnP8vNi10dZ74sfqiJ1Ye/YaZmEVkKXsPPT4ZTjusFraDj/v2M06CbvlBINKpltn\np426rZUsgp/aBX6LzwrwN3nSZ84Ztl2iS9sQJ6RcMxi/S8tDr1qaCcVC2nIDZuFl\nKFCgg2IeMAHbsB+hFnBR5FCf+7ANixpl9ZyiIMnNi8W1HWWOSP9RTnSvObMoYRsK\nLEMV17eveeu/XZghWvFlES65orS/6TUZ9VPcDWA9p8idQD1OZKY04Fhh57bWe3Dq\n2i0rlkRHVPariOo3dbJA3FDGQm0nCLQd6HYaV5vdnNqqr2VSMGTcOQiKNzeeUVT8\noOYNzcAFhZ9iCQ+DfxkGkJS/f62d2ecp3Bh6x65643Sm+3I1kZN34AtFWpD68QO0\ngtlPUheA5qqG+XPWVTJlKwkQWey+ra3gKsDxo4t9nUXLiBBQvaU=\n=5SzK\n-----END PGP SIGNATURE-----",
        "payload": "tree e3bc35738c1489f5324fb08e65f8d6ec8a7902ab\nparent 30e44482152488a78f2c495798a75e6f553dc0c8\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1618337875 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1619710741 +0300\n\nrefactor: Use appropriate thread constructor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a508f718f3e087c96a306399582a85df2e1d53ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a508f718f3e087c96a306399582a85df2e1d53ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a508f718f3e087c96a306399582a85df2e1d53ae/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30e44482152488a78f2c495798a75e6f553dc0c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30e44482152488a78f2c495798a75e6f553dc0c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30e44482152488a78f2c495798a75e6f553dc0c8"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "896cb774b5b59c9f6b334716b49e630b964cd204",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a508f718f3e087c96a306399582a85df2e1d53ae/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a508f718f3e087c96a306399582a85df2e1d53ae/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a508f718f3e087c96a306399582a85df2e1d53ae",
        "patch": "@@ -1267,7 +1267,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     node.scheduler = std::make_unique<CScheduler>();\n \n     // Start the lightweight task scheduler thread\n-    node.scheduler->m_service_thread = std::thread([&] { util::TraceThread(\"scheduler\", [&] { node.scheduler->serviceQueue(); }); });\n+    node.scheduler->m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { node.scheduler->serviceQueue(); });\n \n     // Gather some entropy once per minute.\n     node.scheduler->scheduleEvery([]{"
      },
      {
        "sha": "135efb561e14c0fc1a3618b093520685b5120f90",
        "filename": "src/mapport.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a508f718f3e087c96a306399582a85df2e1d53ae/src/mapport.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a508f718f3e087c96a306399582a85df2e1d53ae/src/mapport.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mapport.cpp?ref=a508f718f3e087c96a306399582a85df2e1d53ae",
        "patch": "@@ -256,7 +256,7 @@ void StartThreadMapPort()\n {\n     if (!g_mapport_thread.joinable()) {\n         assert(!g_mapport_interrupt);\n-        g_mapport_thread = std::thread(std::bind(&util::TraceThread, \"mapport\", &ThreadMapPort));\n+        g_mapport_thread = std::thread(&util::TraceThread, \"mapport\", &ThreadMapPort);\n     }\n }\n "
      },
      {
        "sha": "c10f1eea13def36dbfb5a1370184196dc76c6b55",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a508f718f3e087c96a306399582a85df2e1d53ae/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a508f718f3e087c96a306399582a85df2e1d53ae/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=a508f718f3e087c96a306399582a85df2e1d53ae",
        "patch": "@@ -134,7 +134,7 @@ ChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::ve\n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n     m_node.scheduler = std::make_unique<CScheduler>();\n-    m_node.scheduler->m_service_thread = std::thread([&] { util::TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n+    m_node.scheduler->m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { m_node.scheduler->serviceQueue(); });\n     GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));"
      }
    ]
  },
  {
    "sha": "792be53d3e9e366b9f6aeee7a1eeb912fa28062e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTJiZTUzZDNlOWUzNjZiOWY2YWVlZTdhMWVlYjkxMmZhMjgwNjJl",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-04-13T18:22:52Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2021-04-29T15:39:31Z"
      },
      "message": "refactor: Replace std::bind with lambdas\n\nLambdas are shorter and more readable.\nChanges are limited to std::thread ctor calls only.",
      "tree": {
        "sha": "4dca4410f490dafc27f76851f2378be03ace7886",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dca4410f490dafc27f76851f2378be03ace7886"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/792be53d3e9e366b9f6aeee7a1eeb912fa28062e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAmCK0zMACgkQQQEIES5+\nqB9BPhAAvl8S648hir3VYkoqXw0jY2F8FjrSGkOlruk5c0oMiDNbOXbcPJPe5lpk\nYZ4wSFkpnVEqmAlPizWkB3dEdVkn7sMvyPSxc9QqRKhg5kKyiVvUReXaiZ7sAb/y\nCYSmn7Do7YVZdSsI6uKGVPQaVQBkjtAi+xm8hGbMe77G4f1PWbIKfDjLUMN9NGRw\n+118D3UIO60FAcyRqh9woVaZ4aqHXpha8RGF+bDLI+QvdqyTLmrI9c4SDHjUySQw\nbztLaPV+BWv2iyAgNNFBdGg1eShbqWtEPuDo7RU2Qs8siE0fZdFRPl/Mkg5m/ir0\nlX79fmpLob8LNw9xZX4bLVgqvKuqEPQt9ufgcsbK08A+GLwfokQ1jR0kv3le7hZc\nrvRYOFDaVr5Iavuw5rksl0TDccmgiR8IcEvWeGAEA/U4mbjbKOFIsdi/VSN/54YL\nIlnphH7kCEaUA5IInd5d0vdWU5wbRl9REHftI2+rRAd/NyE3YEWNqKVLiPHStFds\n151GTRHDmcHUT0P8X/JcrHhkCRX6gvAvhv0GXhRbWJilaDWOyaOGqXUyZRAQDljL\n8hVL5nzA4zmDFBV/Rmbx1g74TCcSudJV1bVQol+T4rKPS2HgSpGyG4It+ymyXFq7\n0Ml/wJ1Fd29xp1MjeIb1fTmTpm0Fp/O9uGi5odm0KYmWg87E+ww=\n=XgY4\n-----END PGP SIGNATURE-----",
        "payload": "tree 4dca4410f490dafc27f76851f2378be03ace7886\nparent a508f718f3e087c96a306399582a85df2e1d53ae\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1618338172 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1619710771 +0300\n\nrefactor: Replace std::bind with lambdas\n\nLambdas are shorter and more readable.\nChanges are limited to std::thread ctor calls only.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/792be53d3e9e366b9f6aeee7a1eeb912fa28062e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/792be53d3e9e366b9f6aeee7a1eeb912fa28062e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/792be53d3e9e366b9f6aeee7a1eeb912fa28062e/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a508f718f3e087c96a306399582a85df2e1d53ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a508f718f3e087c96a306399582a85df2e1d53ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a508f718f3e087c96a306399582a85df2e1d53ae"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "fc25514f1a064a41dc35807fe0e7de1681f536e7",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/792be53d3e9e366b9f6aeee7a1eeb912fa28062e/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/792be53d3e9e366b9f6aeee7a1eeb912fa28062e/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=792be53d3e9e366b9f6aeee7a1eeb912fa28062e",
        "patch": "@@ -349,8 +349,7 @@ void BaseIndex::Start()\n         return;\n     }\n \n-    m_thread_sync = std::thread(&util::TraceThread, GetName(),\n-                                std::bind(&BaseIndex::ThreadSync, this));\n+    m_thread_sync = std::thread(&util::TraceThread, GetName(), [this] { ThreadSync(); });\n }\n \n void BaseIndex::Stop()"
      },
      {
        "sha": "cb999fcd00f140c2888fdef65b5c5847ac7e37d5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/792be53d3e9e366b9f6aeee7a1eeb912fa28062e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/792be53d3e9e366b9f6aeee7a1eeb912fa28062e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=792be53d3e9e366b9f6aeee7a1eeb912fa28062e",
        "patch": "@@ -2528,15 +2528,15 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     }\n \n     // Send and receive from sockets, accept connections\n-    threadSocketHandler = std::thread(&util::TraceThread, \"net\", std::bind(&CConnman::ThreadSocketHandler, this));\n+    threadSocketHandler = std::thread(&util::TraceThread, \"net\", [this] { ThreadSocketHandler(); });\n \n     if (!gArgs.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED))\n         LogPrintf(\"DNS seeding disabled\\n\");\n     else\n-        threadDNSAddressSeed = std::thread(&util::TraceThread, \"dnsseed\", std::bind(&CConnman::ThreadDNSAddressSeed, this));\n+        threadDNSAddressSeed = std::thread(&util::TraceThread, \"dnsseed\", [this] { ThreadDNSAddressSeed(); });\n \n     // Initiate manual connections\n-    threadOpenAddedConnections = std::thread(&util::TraceThread, \"addcon\", std::bind(&CConnman::ThreadOpenAddedConnections, this));\n+    threadOpenAddedConnections = std::thread(&util::TraceThread, \"addcon\", [this] { ThreadOpenAddedConnections(); });\n \n     if (connOptions.m_use_addrman_outgoing && !connOptions.m_specified_outgoing.empty()) {\n         if (clientInterface) {\n@@ -2546,16 +2546,18 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n         }\n         return false;\n     }\n-    if (connOptions.m_use_addrman_outgoing || !connOptions.m_specified_outgoing.empty())\n-        threadOpenConnections = std::thread(&util::TraceThread, \"opencon\", std::bind(&CConnman::ThreadOpenConnections, this, connOptions.m_specified_outgoing));\n+    if (connOptions.m_use_addrman_outgoing || !connOptions.m_specified_outgoing.empty()) {\n+        threadOpenConnections = std::thread(\n+            &util::TraceThread, \"opencon\",\n+            [this, connect = connOptions.m_specified_outgoing] { ThreadOpenConnections(connect); });\n+    }\n \n     // Process messages\n-    threadMessageHandler = std::thread(&util::TraceThread, \"msghand\", std::bind(&CConnman::ThreadMessageHandler, this));\n+    threadMessageHandler = std::thread(&util::TraceThread, \"msghand\", [this] { ThreadMessageHandler(); });\n \n     if (connOptions.m_i2p_accept_incoming && m_i2p_sam_session.get() != nullptr) {\n         threadI2PAcceptIncoming =\n-            std::thread(&util::TraceThread, \"i2paccept\",\n-                        std::function<void()>(std::bind(&CConnman::ThreadI2PAcceptIncoming, this)));\n+            std::thread(&util::TraceThread, \"i2paccept\", [this] { ThreadI2PAcceptIncoming(); });\n     }\n \n     // Dump network addresses"
      }
    ]
  }
]