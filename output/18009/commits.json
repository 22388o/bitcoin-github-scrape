[
  {
    "sha": "6ef04912af7f216f3112e0e9919f67e36415a792",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWYwNDkxMmFmN2YyMTZmMzExMmUwZTk5MTlmNjdlMzY0MTVhNzky",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-23T17:25:29Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-27T21:31:42Z"
      },
      "message": "tests: Update FuzzedDataProvider.h from upstream (LLVM)\n\nUpstream revision: https://github.com/llvm/llvm-project/blob/a44ef027ebca1598892ea9b104d6189aeb3bc2f0/compiler-rt/include/fuzzer/FuzzedDataProvider.h",
      "tree": {
        "sha": "0b1e2e988540bbb3cdee29ac828274000afec8b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b1e2e988540bbb3cdee29ac828274000afec8b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ef04912af7f216f3112e0e9919f67e36415a792",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef04912af7f216f3112e0e9919f67e36415a792",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef04912af7f216f3112e0e9919f67e36415a792",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef04912af7f216f3112e0e9919f67e36415a792/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bcc70531ac88e29a7d59a1ab8c787c55e7f88f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bcc70531ac88e29a7d59a1ab8c787c55e7f88f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bcc70531ac88e29a7d59a1ab8c787c55e7f88f5"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 72,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3e069eba69b46229aa765d36db84197698a5b42a",
        "filename": "src/test/fuzz/FuzzedDataProvider.h",
        "status": "modified",
        "additions": 72,
        "deletions": 12,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef04912af7f216f3112e0e9919f67e36415a792/src/test/fuzz/FuzzedDataProvider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef04912af7f216f3112e0e9919f67e36415a792/src/test/fuzz/FuzzedDataProvider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/FuzzedDataProvider.h?ref=6ef04912af7f216f3112e0e9919f67e36415a792",
        "patch": "@@ -13,20 +13,21 @@\n #ifndef LLVM_FUZZER_FUZZED_DATA_PROVIDER_H_\n #define LLVM_FUZZER_FUZZED_DATA_PROVIDER_H_\n \n-#include <limits.h>\n-#include <stddef.h>\n-#include <stdint.h>\n-\n #include <algorithm>\n+#include <climits>\n+#include <cstddef>\n+#include <cstdint>\n #include <cstring>\n #include <initializer_list>\n #include <string>\n #include <type_traits>\n #include <utility>\n #include <vector>\n \n+// In addition to the comments below, the API is also briefly documented at\n+// https://github.com/google/fuzzing/blob/master/docs/split-inputs.md#fuzzed-data-provider\n class FuzzedDataProvider {\n-public:\n+ public:\n   // |data| is an array of length |size| that the FuzzedDataProvider wraps to\n   // provide more granular access. |data| must outlive the FuzzedDataProvider.\n   FuzzedDataProvider(const uint8_t *data, size_t size)\n@@ -143,9 +144,9 @@ class FuzzedDataProvider {\n     return ConsumeBytes<T>(remaining_bytes_);\n   }\n \n+  // Returns a std::string containing all remaining bytes of the input data.\n   // Prefer using |ConsumeRemainingBytes| unless you actually need a std::string\n   // object.\n-  // Returns a std::vector containing all remaining bytes of the input data.\n   std::string ConsumeRemainingBytesAsString() {\n     return ConsumeBytesAsString(remaining_bytes_);\n   }\n@@ -161,7 +162,7 @@ class FuzzedDataProvider {\n   // Reads one byte and returns a bool, or false when no data remains.\n   bool ConsumeBool() { return 1 & ConsumeIntegral<uint8_t>(); }\n \n-  // Returns a copy of a value selected from a fixed-size |array|.\n+  // Returns a copy of the value selected from the given fixed-size |array|.\n   template <typename T, size_t size>\n   T PickValueInArray(const T (&array)[size]) {\n     static_assert(size > 0, \"The array must be non empty.\");\n@@ -170,11 +171,14 @@ class FuzzedDataProvider {\n \n   template <typename T>\n   T PickValueInArray(std::initializer_list<const T> list) {\n-    // static_assert(list.size() > 0, \"The array must be non empty.\");\n+    // TODO(Dor1s): switch to static_assert once C++14 is allowed.\n+    if (!list.size())\n+      abort();\n+\n     return *(list.begin() + ConsumeIntegralInRange<size_t>(0, list.size() - 1));\n   }\n \n-  // Return an enum value. The enum must start at 0 and be contiguous. It must\n+  // Returns an enum value. The enum must start at 0 and be contiguous. It must\n   // also contain |kMaxValue| aliased to its largest (inclusive) value. Such as:\n   // enum class Foo { SomeValue, OtherValue, kMaxValue = OtherValue };\n   template <typename T> T ConsumeEnum() {\n@@ -183,10 +187,60 @@ class FuzzedDataProvider {\n         0, static_cast<uint32_t>(T::kMaxValue)));\n   }\n \n+  // Returns a floating point number in the range [0.0, 1.0]. If there's no\n+  // input data left, always returns 0.\n+  template <typename T> T ConsumeProbability() {\n+    static_assert(std::is_floating_point<T>::value,\n+                  \"A floating point type is required.\");\n+\n+    // Use different integral types for different floating point types in order\n+    // to provide better density of the resulting values.\n+    using IntegralType =\n+        typename std::conditional<(sizeof(T) <= sizeof(uint32_t)), uint32_t,\n+                                  uint64_t>::type;\n+\n+    T result = static_cast<T>(ConsumeIntegral<IntegralType>());\n+    result /= static_cast<T>(std::numeric_limits<IntegralType>::max());\n+    return result;\n+  }\n+\n+  // Returns a floating point value in the range [Type's lowest, Type's max] by\n+  // consuming bytes from the input data. If there's no input data left, always\n+  // returns approximately 0.\n+  template <typename T> T ConsumeFloatingPoint() {\n+    return ConsumeFloatingPointInRange<T>(std::numeric_limits<T>::lowest(),\n+                                          std::numeric_limits<T>::max());\n+  }\n+\n+  // Returns a floating point value in the given range by consuming bytes from\n+  // the input data. If there's no input data left, returns |min|. Note that\n+  // |min| must be less than or equal to |max|.\n+  template <typename T> T ConsumeFloatingPointInRange(T min, T max) {\n+    if (min > max)\n+      abort();\n+\n+    T range = .0;\n+    T result = min;\n+    constexpr T zero(.0);\n+    if (max > zero && min < zero && max > min + std::numeric_limits<T>::max()) {\n+      // The diff |max - min| would overflow the given floating point type. Use\n+      // the half of the diff as the range and consume a bool to decide whether\n+      // the result is in the first of the second part of the diff.\n+      range = (max / 2.0) - (min / 2.0);\n+      if (ConsumeBool()) {\n+        result += range;\n+      }\n+    } else {\n+      range = max - min;\n+    }\n+\n+    return result + range * ConsumeProbability<T>();\n+  }\n+\n   // Reports the remaining bytes available for fuzzed input.\n   size_t remaining_bytes() { return remaining_bytes_; }\n \n-private:\n+ private:\n   FuzzedDataProvider(const FuzzedDataProvider &) = delete;\n   FuzzedDataProvider &operator=(const FuzzedDataProvider &) = delete;\n \n@@ -209,6 +263,12 @@ class FuzzedDataProvider {\n     // which seems to be a natural choice for other implementations as well.\n     // To increase the odds even more, we also call |shrink_to_fit| below.\n     std::vector<T> result(size);\n+    if (size == 0) {\n+      if (num_bytes_to_consume != 0)\n+        abort();\n+      return result;\n+    }\n+\n     std::memcpy(result.data(), data_ptr_, num_bytes_to_consume);\n     Advance(num_bytes_to_consume);\n \n@@ -230,9 +290,9 @@ class FuzzedDataProvider {\n \n     // Avoid using implementation-defined unsigned to signer conversions.\n     // To learn more, see https://stackoverflow.com/questions/13150449.\n-    if (value <= std::numeric_limits<TS>::max())\n+    if (value <= std::numeric_limits<TS>::max()) {\n       return static_cast<TS>(value);\n-    else {\n+    } else {\n       constexpr auto TS_min = std::numeric_limits<TS>::min();\n       return TS_min + static_cast<char>(value - TS_min);\n     }"
      }
    ]
  },
  {
    "sha": "ccc3c76e2b5d28a2372ae5752c08256396bf43e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2MzYzc2ZTJiNWQyOGEyMzcyYWU1NzUyYzA4MjU2Mzk2YmY0M2U2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-26T22:14:53Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-27T21:31:42Z"
      },
      "message": "tests: Add fuzzer strprintf to FUZZERS_MISSING_CORPORA (temporarily)",
      "tree": {
        "sha": "4f0337ce3d892433e40580eb31d34f4bf33dc4e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f0337ce3d892433e40580eb31d34f4bf33dc4e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccc3c76e2b5d28a2372ae5752c08256396bf43e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc3c76e2b5d28a2372ae5752c08256396bf43e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc3c76e2b5d28a2372ae5752c08256396bf43e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc3c76e2b5d28a2372ae5752c08256396bf43e6/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ef04912af7f216f3112e0e9919f67e36415a792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef04912af7f216f3112e0e9919f67e36415a792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef04912af7f216f3112e0e9919f67e36415a792"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6b687060e25c01c3c43b7bb2da5dfdd7d860f44d",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc3c76e2b5d28a2372ae5752c08256396bf43e6/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc3c76e2b5d28a2372ae5752c08256396bf43e6/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=ccc3c76e2b5d28a2372ae5752c08256396bf43e6",
        "patch": "@@ -39,6 +39,7 @@\n     \"psbt_output_deserialize\",\n     \"pub_key_deserialize\",\n     \"script_deserialize\",\n+    \"strprintf\",\n     \"sub_net_deserialize\",\n     \"tx_in\",\n     \"tx_in_deserialize\","
      }
    ]
  },
  {
    "sha": "cc668d06fb71463fd406df761b0e89e25d4de968",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzY2OGQwNmZiNzE0NjNmZDQwNmRmNzYxYjBlODllMjVkNGRlOTY4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-26T22:12:11Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-27T21:31:42Z"
      },
      "message": "tests: Add fuzzing harness for strprintf(...)",
      "tree": {
        "sha": "303546c99bff8b3dbbac580521215199bd36d360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/303546c99bff8b3dbbac580521215199bd36d360"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc668d06fb71463fd406df761b0e89e25d4de968",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc668d06fb71463fd406df761b0e89e25d4de968",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc668d06fb71463fd406df761b0e89e25d4de968",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc668d06fb71463fd406df761b0e89e25d4de968/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccc3c76e2b5d28a2372ae5752c08256396bf43e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc3c76e2b5d28a2372ae5752c08256396bf43e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc3c76e2b5d28a2372ae5752c08256396bf43e6"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 155,
      "deletions": 1
    },
    "files": [
      {
        "sha": "657b857fa1c12d6da9fb43713c3f0dedc9a013e4",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc668d06fb71463fd406df761b0e89e25d4de968/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc668d06fb71463fd406df761b0e89e25d4de968/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=cc668d06fb71463fd406df761b0e89e25d4de968",
        "patch": "@@ -54,6 +54,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/script_flags \\\n   test/fuzz/service_deserialize \\\n   test/fuzz/spanparsing \\\n+  test/fuzz/strprintf \\\n   test/fuzz/sub_net_deserialize \\\n   test/fuzz/transaction \\\n   test/fuzz/tx_in \\\n@@ -535,6 +536,12 @@ test_fuzz_spanparsing_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_spanparsing_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_spanparsing_SOURCES = $(FUZZ_SUITE) test/fuzz/spanparsing.cpp\n \n+test_fuzz_strprintf_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_strprintf_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_strprintf_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_strprintf_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_strprintf_SOURCES = $(FUZZ_SUITE) test/fuzz/strprintf.cpp\n+\n test_fuzz_sub_net_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSUB_NET_DESERIALIZE=1\n test_fuzz_sub_net_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_sub_net_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "0de21f0e7c982da827c2552382c7dac000544413",
        "filename": "src/test/fuzz/strprintf.cpp",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc668d06fb71463fd406df761b0e89e25d4de968/src/test/fuzz/strprintf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc668d06fb71463fd406df761b0e89e25d4de968/src/test/fuzz/strprintf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/strprintf.cpp?ref=cc668d06fb71463fd406df761b0e89e25d4de968",
        "patch": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <tinyformat.h>\n+#include <util/strencodings.h>\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string format_string = fuzzed_data_provider.ConsumeRandomLengthString(64);\n+\n+    const int digits_in_format_specifier = std::count_if(format_string.begin(), format_string.end(), IsDigit);\n+\n+    // Avoid triggering the following crash bug:\n+    // * strprintf(\"%987654321000000:\", 1);\n+    //\n+    // Avoid triggering the following OOM bug:\n+    // * strprintf(\"%.222222200000000$\", 1.1);\n+    //\n+    // Upstream bug report: https://github.com/c42f/tinyformat/issues/70\n+    if (format_string.find(\"%\") != std::string::npos && digits_in_format_specifier >= 7) {\n+        return;\n+    }\n+\n+    // Avoid triggering the following crash bug:\n+    // * strprintf(\"%1$*1$*\", -11111111);\n+    //\n+    // Upstream bug report: https://github.com/c42f/tinyformat/issues/70\n+    if (format_string.find(\"%\") != std::string::npos && format_string.find(\"$\") != std::string::npos && format_string.find(\"*\") != std::string::npos && digits_in_format_specifier > 0) {\n+        return;\n+    }\n+\n+    // Avoid triggering the following crash bug:\n+    // * strprintf(\"%.1s\", (char*)nullptr);\n+    //\n+    // (void)strprintf(format_string, (char*)nullptr);\n+    //\n+    // Upstream bug report: https://github.com/c42f/tinyformat/issues/70\n+\n+    try {\n+        (void)strprintf(format_string, (signed char*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+    try {\n+        (void)strprintf(format_string, (unsigned char*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+    try {\n+        (void)strprintf(format_string, (void*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+    try {\n+        (void)strprintf(format_string, (bool*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+    try {\n+        (void)strprintf(format_string, (float*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+    try {\n+        (void)strprintf(format_string, (double*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+    try {\n+        (void)strprintf(format_string, (int16_t*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+    try {\n+        (void)strprintf(format_string, (uint16_t*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+    try {\n+        (void)strprintf(format_string, (int32_t*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+    try {\n+        (void)strprintf(format_string, (uint32_t*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+    try {\n+        (void)strprintf(format_string, (int64_t*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+    try {\n+        (void)strprintf(format_string, (uint64_t*)nullptr);\n+    } catch (const tinyformat::format_error&) {\n+    }\n+\n+    try {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 13)) {\n+        case 0:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeRandomLengthString(32));\n+            break;\n+        case 1:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeRandomLengthString(32).c_str());\n+            break;\n+        case 2:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<signed char>());\n+            break;\n+        case 3:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<unsigned char>());\n+            break;\n+        case 4:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<char>());\n+            break;\n+        case 5:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeBool());\n+            break;\n+        case 6:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeFloatingPoint<float>());\n+            break;\n+        case 7:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeFloatingPoint<double>());\n+            break;\n+        case 8:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<int16_t>());\n+            break;\n+        case 9:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<uint16_t>());\n+            break;\n+        case 10:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<int32_t>());\n+            break;\n+        case 11:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<uint32_t>());\n+            break;\n+        case 12:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 13:\n+            (void)strprintf(format_string, fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+            break;\n+        default:\n+            assert(false);\n+        }\n+    } catch (const tinyformat::format_error&) {\n+    }\n+}"
      },
      {
        "sha": "184c3682c845345e778846ddd43cc2dc3d354f61",
        "filename": "test/lint/lint-format-strings.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc668d06fb71463fd406df761b0e89e25d4de968/test/lint/lint-format-strings.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc668d06fb71463fd406df761b0e89e25d4de968/test/lint/lint-format-strings.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.sh?ref=cc668d06fb71463fd406df761b0e89e25d4de968",
        "patch": "@@ -34,7 +34,7 @@ if ! python3 -m doctest test/lint/lint-format-strings.py; then\n fi\n for S in \"${FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS[@]}\"; do\n     IFS=\",\" read -r FUNCTION_NAME SKIP_ARGUMENTS <<< \"${S}\"\n-    for MATCHING_FILE in $(git grep --full-name -l \"${FUNCTION_NAME}\" -- \"*.c\" \"*.cpp\" \"*.h\" | sort | grep -vE \"^src/(leveldb|secp256k1|tinyformat|univalue)\"); do\n+    for MATCHING_FILE in $(git grep --full-name -l \"${FUNCTION_NAME}\" -- \"*.c\" \"*.cpp\" \"*.h\" | sort | grep -vE \"^src/(leveldb|secp256k1|tinyformat|univalue|test/fuzz/strprintf.cpp)\"); do\n         MATCHING_FILES+=(\"${MATCHING_FILE}\")\n     done\n     if ! test/lint/lint-format-strings.py --skip-arguments \"${SKIP_ARGUMENTS}\" \"${FUNCTION_NAME}\" \"${MATCHING_FILES[@]}\"; then"
      }
    ]
  }
]