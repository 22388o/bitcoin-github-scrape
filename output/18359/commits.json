[
  {
    "sha": "e90e3e684ffa7b25f0dfb5b45e70bb0c358261fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTBlM2U2ODRmZmE3YjI1ZjBkZmI1YjQ1ZTcwYmIwYzM1ODI2MWZi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-03-16T09:20:27Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-03-19T03:36:38Z"
      },
      "message": "build: fix sysctl() detection on macOS\n\nsysctl() on *BSD takes a \"const int *name\", whereas sysctl() on macOS\nit takes an \"int *name\". So our configure check and sysctl() detection on\nmacOS currently fails:\n\n```bash\n/usr/include/sys/sysctl.h:759:9: note: candidate function not viable:\n\tno known conversion from 'const int [2]' to 'int *' for 1st argument\nint     sysctl(int *, u_int, void *, size_t *, void *, size_t);\n```\n\nThis change removes the name argument from the sysctl() detection check,\nmeaning we will detect correctly on macOS and *BSD.\n\nFor consistency we also switch to using the more generic, non-const\nversion of the name parameter in the rest of our usage.",
      "tree": {
        "sha": "eff47e78032a33a1e4807b32c771b784a34437a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eff47e78032a33a1e4807b32c771b784a34437a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e90e3e684ffa7b25f0dfb5b45e70bb0c358261fb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl5y6MYACgkQLuufXMCV\nJsFyUg/9FXyw3v9I2DyLxd/d0GPa/DBRRyoZEjyfT9JtQnwjqsL8uKiRfxK/3dV2\nXoieVjTrOFrqptk8eh4w6mkufBpOhzUlRIa0NqkiQbxpP9DBp3bnmDbe+iELYk6F\nj9KKaqSo+nz8bWanQsVCC+zBSTLOqcnbsloBw9Q3fgXCq6kt3GjD+xJZCk/9hlXF\nW0zMDYLCsVgDrNBlwJ44wDoIHaNCwV0O3KSvYUFvR5QXCMwHEUROatzKP6d4Ios9\nAXA5J1xR54+gaKwpfb5bXdAs95u5bjOi5pZfjenynNs/zxh7TDgHqOO+Xw0xlQwM\nMT/NjQ6qOHq/C728VU8FdkaLEKHl7Ul5QCJVNXJFW7h5SBterni6bN1qR03e7nEQ\nQgHQ7QJ/EqOUaYGo6DoEZ1NVO1cv9+Uk+/fMbT7cG48A7gi1ebk8s9n/56ZQfbKo\nfD8GVLtYqN8XGXPok33qDwJ9VX9gk+cr1211xMHJCUgukCkk6if9rPtGBD28uOZk\nKnykmG9/6Z9Ac0OTwtSJNRLGCqeh2Q94kmrh60ps6eVpq3jC6RWsVO1a9FILaU3X\n63VSzZsjcEPLfVLqi/W78O6UksY8RpRHgVYFJ9C6J4L5vfkJDtjXgyQiLcz1zzyd\nS56mjegAszQ/VgkCYplR9Xeq9bNeuuYNsQ/0FP6A1U7z4z2M3eM=\n=bnAb\n-----END PGP SIGNATURE-----",
        "payload": "tree eff47e78032a33a1e4807b32c771b784a34437a5\nparent a421e0a22f1230abd69b4661a019bed39b72205f\nauthor fanquake <fanquake@gmail.com> 1584350427 +0800\ncommitter fanquake <fanquake@gmail.com> 1584588998 +0800\n\nbuild: fix sysctl() detection on macOS\n\nsysctl() on *BSD takes a \"const int *name\", whereas sysctl() on macOS\nit takes an \"int *name\". So our configure check and sysctl() detection on\nmacOS currently fails:\n\n```bash\n/usr/include/sys/sysctl.h:759:9: note: candidate function not viable:\n\tno known conversion from 'const int [2]' to 'int *' for 1st argument\nint     sysctl(int *, u_int, void *, size_t *, void *, size_t);\n```\n\nThis change removes the name argument from the sysctl() detection check,\nmeaning we will detect correctly on macOS and *BSD.\n\nFor consistency we also switch to using the more generic, non-const\nversion of the name parameter in the rest of our usage.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e90e3e684ffa7b25f0dfb5b45e70bb0c358261fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e90e3e684ffa7b25f0dfb5b45e70bb0c358261fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e90e3e684ffa7b25f0dfb5b45e70bb0c358261fb/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a421e0a22f1230abd69b4661a019bed39b72205f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a421e0a22f1230abd69b4661a019bed39b72205f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a421e0a22f1230abd69b4661a019bed39b72205f"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "23a6417a1acc24e7b17a822d057bcf8eec14339a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e90e3e684ffa7b25f0dfb5b45e70bb0c358261fb/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e90e3e684ffa7b25f0dfb5b45e70bb0c358261fb/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e90e3e684ffa7b25f0dfb5b45e70bb0c358261fb",
        "patch": "@@ -935,19 +935,21 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n AC_MSG_CHECKING(for sysctl)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n   #include <sys/sysctl.h>]],\n- [[ static const int name[2] = {CTL_KERN, KERN_VERSION};\n-    #ifdef __linux__\n+ [[ #ifdef __linux__\n     #error \"Don't use sysctl on Linux, it's deprecated even when it works\"\n     #endif\n-    sysctl(name, 2, nullptr, nullptr, nullptr, 0); ]])],\n+    sysctl(nullptr, 2, nullptr, nullptr, nullptr, 0); ]])],\n  [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCTL, 1,[Define this symbol if the BSD sysctl() is available]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n AC_MSG_CHECKING(for sysctl KERN_ARND)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n   #include <sys/sysctl.h>]],\n- [[ static const int name[2] = {CTL_KERN, KERN_ARND};\n+ [[ #ifdef __linux__\n+    #error \"Don't use sysctl on Linux, it's deprecated even when it works\"\n+    #endif\n+    static int name[2] = {CTL_KERN, KERN_ARND};\n     sysctl(name, 2, nullptr, nullptr, nullptr, 0); ]])],\n  [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCTL_ARND, 1,[Define this symbol if the BSD sysctl(KERN_ARND) is available]) ],\n  [ AC_MSG_RESULT(no)]"
      },
      {
        "sha": "2a27e6ba0d345daafc09541ac06aacf9151c7fcb",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e90e3e684ffa7b25f0dfb5b45e70bb0c358261fb/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e90e3e684ffa7b25f0dfb5b45e70bb0c358261fb/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=e90e3e684ffa7b25f0dfb5b45e70bb0c358261fb",
        "patch": "@@ -321,10 +321,10 @@ void GetOSRand(unsigned char *ent32)\n         RandFailure();\n     }\n #elif defined(HAVE_SYSCTL_ARND)\n-    /* FreeBSD and similar. It is possible for the call to return less\n+    /* FreeBSD, NetBSD and similar. It is possible for the call to return less\n      * bytes than requested, so need to read in a loop.\n      */\n-    static const int name[2] = {CTL_KERN, KERN_ARND};\n+    static int name[2] = {CTL_KERN, KERN_ARND};\n     int have = 0;\n     do {\n         size_t len = NUM_OS_RANDOM_BYTES - have;"
      }
    ]
  }
]