jonasschnelli,2016-08-29T11:40:14Z,This is indeed a nice idea.\nutACK.\n,https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-243101062,243101062,
instagibbs,2016-08-29T14:38:03Z,"At the risk of it being blatantly obvious, this would especially allow nodes with default settings during IBD to sync faster, yes?\n\nconcept ACK\n",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-243143404,243143404,
sipa,2016-08-29T15:13:57Z,"> At the risk of it being blatantly obvious, this would especially allow nodes with default settings during IBD to sync faster, yes?\n\nIndeed!\n",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-243154336,243154336,
gmaxwell,2016-09-03T09:22:26Z,utACK.\n,https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-244536507,244536507,
rebroad,2016-09-15T15:02:19Z,"At the risk of appearing stupid, how does this help nodes with default settings sync faster during IBD?\n\n...coincache helps to validate blocks..?\n",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-247354294,247354294,
sipa,2016-09-15T15:07:57Z,"Because during IBD, the mempool is nearly empty. With this patch, all that\nunused mempool space (300 Mbyte by default currently) will be used for the\nchainstate cache, which is the bottleneck for block validation during IBD.\n",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-247355905,247355905,
paveljanik,2016-09-15T15:12:58Z,utACK https://github.com/bitcoin/bitcoin/pull/8610/commits/8b85edee37df75c443dd5bfe33eca44e964482d8\n,https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-247357336,247357336,
morcos,2016-09-15T16:22:51Z,"@sipa do you have any concern that this gives outside peers some control over when your coinsviewcache is flushed?  That seems not ideal to me, at least until we are smarter about flushing it.\n\nI had previously imagined doing this by setting the mempool limit low initially and then increasing it to the desired setting after IBD was finished.  But I'm not sure I succeeded in having the code archi",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-247377621,247377621,
sipa,2016-09-19T10:47:20Z,"@morcos I think that's already a concern, but I'm not sure this patch worsens it significantly. External peers can cause an increase in memory usage of the cache or the mempool, but the latter is already harder anyway.\n",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-247962089,247962089,
fanquake,2016-11-07T08:26:33Z,Seeing a roughly 30% decrease in time to reindex to 270'000 with this change.\n\n#### Master -reindex-chainstate\n\n08:04:43 Cache configuration:\n08:04:43 \* Using 2.0MiB for block index database\n08:04:43 \* Using 8.0MiB for chain state database\n08:04:43 \* Using 290.0MiB for in-memory UTXO set\n\n08:04:45 UpdateTip: height=0 cache=0.0MiB(0tx)\n08:08:09 UpdateTip: height=200000 cache=172.9MiB(5,https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-258773492,258773492,
morcos,2016-11-25T21:31:58Z,"utACK modulo suggestion about calling LimitMempoolSize in FSTD.  \nHowever if we decide there are downsides to that suggestion, I'm fine with leaving it out.\n\nEDIT: maybe 0dedace?  Though I'm not sure it's worth it..\n",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-263024449,263024449,
sipa,2016-11-26T00:22:14Z,"@morcos Looks good, I've included it.",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-263034977,263034977,
sdaftuar,2016-11-26T01:15:22Z,"@morcos Not sure I'm a fan of 0dedace.  I believe this code will work correctly for now, but only because we don't seem to call `FlushStateToDisk` anywhere the mempool might be in an inconsistent state.  I don't think it's safe to call `LimitMempoolSize()` when the mempool is in an inconsistent state, because `CTxMemPool::TrimToSize()` and `CTxMemPool::Expire` rely on `CTxMemPool::CalculateDescend",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-263037071,263037071,
sipa,2016-11-26T03:27:24Z,I removed the commit again.,https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-263041688,263041688,
laanwj,2016-11-28T05:52:37Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-263188917,263188917,
sipa,2016-11-28T06:58:21Z,Going to address @morcos's issue soon.,https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-263196976,263196976,
sipa,2016-12-22T03:23:04Z,"Rebased, and rewritten to take https://github.com/bitcoin/bitcoin/pull/8610#discussion_r89663403 into account.",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-268709078,268709078,
jtimon,2016-12-22T08:17:04Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-268744213,268744213,
morcos,2016-12-22T16:04:45Z,"Looks good @sipa , thanks\n\nSeems like an actual lock inversion, I think you fixed it previously by moving the `mempool.DynamicMemoryUsage()` to the top of `FlustStateToDisk`, which makes sense to me.\nHowever I don't understand why `CWallet::ReacceptWalletTransactions` is locking mempool.cs anyway, so maybe that should also be removed.\n\nI guess you lost the advantage of the extra space in",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-268830880,268830880,
fanquake,2017-01-04T00:05:56Z,"#8610 on top of master (2a524b8e8fe69ef487fd8ea1b4f7a03f473ed201) with -reindex-chainstate -dbcache=2048:\n```\n2017-01-03 22:39:59 Cache configuration:\n2017-01-03 22:39:59 * Using 2.0MiB for block index database\n2017-01-03 22:39:59 * Using 8.0MiB for chain state database\n2017-01-03 22:39:59 * Using 2038.0MiB for in-memory UTXO set (plus up to 286.1MiB of unused mempool space)\n2017-01-03",https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-270261225,270261225,
morcos,2017-01-05T18:57:46Z,utACK ba3cecf (for the avoidance of doubt),https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-270726683,270726683,
TheBlueMatt,2017-01-05T18:58:06Z,utACK ba3cecf5c436bf38efad045d46e0aa26210d2234,https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-270726809,270726809,
rebroad,2017-01-06T06:46:46Z,utACK - will merge and test,https://github.com/bitcoin/bitcoin/pull/8610#issuecomment-270843147,270843147,
TheBlueMatt,2016-09-21T19:37:00Z,"This is confusing to me - maybe ""Using $cache_only_size for UTXO set (+ up to $mempool_size from mempool)""\n",https://github.com/bitcoin/bitcoin/pull/8610#discussion_r79915084,79915084,src/init.cpp
sipa,2016-10-03T00:23:59Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/8610#discussion_r81481742,81481742,src/init.cpp
morcos,2016-11-25T21:30:55Z,"I wonder if it would be better to call `LimitMempoolSize` right before this?   During a reorg the mempool size isn't limited until the end, so theoretically `FlushStateToDisk` could get called and have its effective cache size reduced below the expected minimum.  @sdaftuar Is there any harm in calling an extra `LimitMempoolSize` in the middle of a reorg other than possible inefficiencies of what y",https://github.com/bitcoin/bitcoin/pull/8610#discussion_r89658164,89658164,src/main.cpp
morcos,2016-11-26T01:11:46Z,"@sipa sorry, one more issue.  this line would be pretty broken if someone sets a large maxmempool.  i was thinking maybe we should change it to 20.0/19 so it doesn't make the base case behavior a smaller effective cache size, but then realized if someone sets say a 2GB mempool and doesn't make a larger dbcache, then they could be flushing all the time.\n\nPerhaps this problem and the other one c",https://github.com/bitcoin/bitcoin/pull/8610#discussion_r89663403,89663403,src/main.cpp
