DrahtBot,2021-05-07 21:38:43,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23604](https://github.com/bitcoin/bitcoin/pull/23604) (Use Sock in CNode by vasild)\n* [#23601](https://github.com/bitco",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-834797934,834797934,
practicalswift,2021-05-08 13:04:39,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-835354757,835354757,
jonatack,2021-05-10 10:37:44,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-836534385,836534385,
vasild,2021-05-19 11:53:45,`fb10bf2ba7...0f83150f14`: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-844029203,844029203,
vasild,2021-05-20 13:35:55,`0f83150f14...9f69aa45a8`: rebase and follow the trend from https://github.com/bitcoin/bitcoin/pull/21659 and flag the newly added `Sock::Accept()` with `[[nodiscard]]`,https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-845128303,845128303,
vasild,2021-06-03 14:39:59,`9f69aa45a8...9f04449a8e`: apply [upstream changes](https://github.com/bitcoin/bitcoin/pull/21878#issuecomment-851327527).,https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-853921892,853921892,
practicalswift,2021-06-10 09:24:58,"@vasild \n\nVery nice work.\n\nNon-blocking suggestion: Would it be possible to add a fuzzing harness utilizing `FuzzedSock::Accept` as part of this PR? It would be really nice to see this in action, and it would also transition `FuzzedSock::Accept` out of ""unused code"" territory :)",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-858463480,858463480,
vasild,2021-06-10 10:33:41,"> Would the goal eventually be to not have to invoke `Sock::Release()` anywhere and instead use move semantics across the board as more code is RAII-fied?\n\nYes! https://github.com/bitcoin/bitcoin/pull/21878 removes `Sock::Release()` in a later commit, called... eh... `net: remove now unused Sock::Release()` :smile:. It uses either move semantics or passes the `Sock` objects by reference if a f",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-858509780,858509780,
vasild,2021-08-23 15:12:29,"@jamesob, thanks for looking into this!\n\nYour mod changes `ERR` from `-1` to `0` and the code looks like this:\n\n```cpp\n    const auto socket = accept(m_socket, addr, addr_len);\n    if (socket == 0) {\n        return nullptr;\n    }\n    return std::make_unique<Sock>(socket);\n```\n\nThis will change the behavior in two cases:\n\n1. If `accept()` succeeds and returns socket=0. C",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-903862974,903862974,
jamesob,2021-08-23 22:53:10,"@vasild yup, it was that second case I was curious about. Nothing wrong with this PR of course, just thought it might be interesting to note that we don't seem to have any coverage for the `accept()`-fails branches. I think this PR will make it feasible to add such coverage, if that ends up being worth doing.",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-904186911,904186911,
vasild,2021-08-24 06:21:39,Right! `CConnman::AcceptConnection()` is a candidate for fuzzing once all of #21878 is merged.,https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-904356598,904356598,
vasild,2021-08-27 14:28:03,"This PR has 2 ACKs and 2 Concept ACKs. @practicalswift, @jonatack, willing to upgrade your ""Concept ACK""s to full code review ACKs?",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-907245286,907245286,
jonatack,2021-08-27 14:30:14,"Yes, I was reviewing this a few days ago when I hit the addrman corruption issue from the asmap/addrman init order. Back to it soon!",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-907246767,907246767,
vasild,2021-09-28 07:27:01,"`9f04449a8e...78e21e511e`: rebase due to a silent windows-only ""conflict"" and address review suggestions.\n\nInvalidates ACKs from @dhruv, @jamesob, @jonatack.",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-928928790,928928790,
jonatack,2021-09-28 09:25:11,Diff-review re-ACK 78e21e511ee241900b84d763462f26972d83b600 per `git range-diff a9d0cec 9f04449 78e21e` following my previous full review (https://github.com/bitcoin/bitcoin/pull/21879#pullrequestreview-761251278),https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-929016207,929016207,
vasild,2021-09-28 13:20:43,"`78e21e511e...07d998f05f`: rebase to hopefully fix some unrelated CI failure.\n\nInvalidates ACK from @jonatack.\n\nACKs on previous versions of this PR from @dhruv, @jamesob.",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-929203985,929203985,
MarcoFalke,2021-09-28 13:28:57,"No need to invalidate ACKs for that. You can rerun the task yourself if it is a known issue (if not, report it first). If you don't have the rights you can ask for it to be rerun.",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-929210846,929210846,
jonatack,2021-09-28 14:53:13,re-ACK 07d998f05f7cc9545324203240e2bbcaaab45b6a per `git range-diff efa227f 78e21e5 07d998f`,https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-929307294,929307294,
vasild,2021-11-10 10:36:09,"`07d998f05f...0f4474d6da`: rebase due to conflicts\n\nInvalidates ACK from @jonatack \n\nPreviously invalidated ACKs from @dhruv, @jamesob \n",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-965001159,965001159,
vasild,2021-11-26 11:04:27,"`0f4474d6da...976f6e8bc9`: rebase due to conflicts; close the accepted socket if `std::make_unique()` throws.\n\nInvalidates ACK from @jonatack\n\nPreviously invalidated ACKs from @dhruv, @jamesob",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-979885909,979885909,
vasild,2021-12-01 15:37:17,"`976f6e8bc9...6bf6e9fd9d`: rebase due to conflicts\n\nPreviously invalidated ACKs from @jonatack, @dhruv, @jamesob",https://github.com/bitcoin/bitcoin/pull/21879#issuecomment-983762476,983762476,
dhruv,2021-06-07 22:29:54,"(nit): Would `inet_pton(AF_INET, ""5.5.5.5"", &addr_in->sin_addr);` be clearer?",https://github.com/bitcoin/bitcoin/pull/21879#discussion_r646982907,646982907,src/test/util/net.h
dhruv,2021-06-07 23:03:21,Would it be useful for this address and port to be available as constants to use in tests?,https://github.com/bitcoin/bitcoin/pull/21879#discussion_r646996261,646996261,src/test/util/net.h
vasild,2021-06-10 10:19:21,"Yes, that would be clearer. However, some `inet_...()` function ended up using syscalls (it created sockets internally, IIRC) on Linux. @practicalswift, what do you think?",https://github.com/bitcoin/bitcoin/pull/21879#discussion_r649051340,649051340,src/test/util/net.h
vasild,2021-06-10 10:22:22,"They are not used anywhere else. Also, a legit code should expect an incoming connection to arrive from any address, so it would be bad to expose this, so that some code starts to depend on it or checks whether the accepted connection came from `5.5.5.5`.",https://github.com/bitcoin/bitcoin/pull/21879#discussion_r649053342,649053342,src/test/util/net.h
jonatack,2021-09-22 18:10:49,"11e59842e30ab5 nit if you retouch, add this header to the .cpp file as well",https://github.com/bitcoin/bitcoin/pull/21879#discussion_r714192672,714192672,src/util/sock.h
vasild,2021-09-28 07:27:47,Added.,https://github.com/bitcoin/bitcoin/pull/21879#discussion_r717298773,717298773,src/util/sock.h
