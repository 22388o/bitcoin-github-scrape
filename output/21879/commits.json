[
  {
    "sha": "f8bd13f85ae5404adef23a52719d804a5c36b1e8",
    "node_id": "C_kwDOABII59oAKGY4YmQxM2Y4NWFlNTQwNGFkZWYyM2E1MjcxOWQ4MDRhNWMzNmIxZTg",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-23T07:43:43Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:22:08Z"
      },
      "message": "net: add new method Sock::Accept() that wraps accept()\n\nThis will help to increase `Sock` usage and make more code mockable.",
      "tree": {
        "sha": "eca0fd0670339d479384bbed2ab6d0bbdd1444b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eca0fd0670339d479384bbed2ab6d0bbdd1444b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8bd13f85ae5404adef23a52719d804a5c36b1e8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhREACgkQVN8G9ktV\ny7+cxh//QkXLE0UkI449z9eh5cW7e9X8B3uztGg+OZ4+5vwx6WnQ6nRoha5oUI8I\nA1rEfmK2n36r2xM/2XSlkylzH/ywrO79M/1Ha7AMb8qjOeWUWmy2hMNb501XDN6I\nFms/tTV41DkW/mRXykj+b/6gJdDLNlsHRiEOYDrrKmcud4sFn2iD5OOJjblnrfvE\nwyHBeTuDkDiTX8Z4LV+6M3TY1jJIbVPtJpY/sClDhwPF9ShXOsJmkfmpR6hXLeXL\nQAEUwZ+0IZPlDH9NVKKXAJRMWKgBJ9XflP8SP1vGanE95ffLClJ8GeNMVXV8mmNK\nRpiSw5FPJl04YoWAwjfbZEP19gU7GaThIfJhdKnOruZb65MSJf0mw76UeIElfCNS\nfh41Shw+nqEnjutiOh7m/1EQMlDEamxim7XHDqVSPvEBDcs+ynlhB20kQ5nxcegN\n8ZHxm89MkTjiAE2xAkU7AWDB2N0BiyTFzz/VD4k011ObJ13UMaRA5nlCOmTSA6MP\n5MCJM8nyWRV4oaPXMoEXZK63X5v/RhqmPGA91vODlXa9i9KfX8WQIGaJfVZES163\nQ9ec2s6mCgHBjeG6SAfwx7jE6P/61ifEdFXStcBl87PuwLayz+OArb+lA8Jg1cqM\n0u+VYDPRhP2RuTIGEY18swmAZCzf/AqkWExrII1Nf3fl4fi+D0qvbfNJTRJwXgOn\ndImj4Y5nwBHmLMI0+lreLdROOJwsPLb2xTFJRA+fEoGS73NKJxdFrD5kgj9FdSX0\nU2+nQtTL5redntA3ek9KVRh/fohXs0D/0+t9l+NdxlyOzVPgyIcXRHowwPDULo6b\ncB6fFWl376yoZykC7UWBuN0S1vwWji31IXc6E6rTCHhgHmRqKK6bPjaC1TQwSaD9\nKUehttVoJ9P1Q0l4WHZmF05w0/qoKkB5TeN2vYwBGO32s8sMdcEIfdnJ+74soS+v\nBdG2sLumNHk4iq0s5cQ7Vl8HVu36BzmG+NQrzpGKcikuPVAanGVQ6QPzHX/2uyPI\nxw+sC9fAPmldIdbwDtYNuLJYdp/2UnhB8doaPPB7dDVWR+PU8rRu/96yfTIVi5os\nvzva06LRa1SfPkUCCChZuTfGKaqBrfDzoLMAYcL/A/TNpHtdj9CvK4WjyeOBXboP\n4zxALd+21Wc1Q4C1cuMiD2ABxyHIMA3jmxQFuADaXhY+efe9PkrEfGhHv/24KxOy\nL7tz1XOR9hL7UAXMYv4NXBlGwYPeVJVqLnuELzZYMk/Hjt/p5vTb6ksqMZPH4IBi\nM1Cf9+ryMx1SZMEqzFlz8C8uMtsKcyvd33XeLZU72nNJLGgklbziEZVps1ZvYRFD\n6jEWmVoWIPugTEXxkDfwGgichxQvvg==\n=olLu\n-----END PGP SIGNATURE-----",
        "payload": "tree eca0fd0670339d479384bbed2ab6d0bbdd1444b9\nparent e7507f333bc93047d0baadea4fde19f770dacb56\nauthor Vasil Dimov <vd@FreeBSD.org> 1619163823 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368528 +0100\n\nnet: add new method Sock::Accept() that wraps accept()\n\nThis will help to increase `Sock` usage and make more code mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bd13f85ae5404adef23a52719d804a5c36b1e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bd13f85ae5404adef23a52719d804a5c36b1e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bd13f85ae5404adef23a52719d804a5c36b1e8/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7507f333bc93047d0baadea4fde19f770dacb56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7507f333bc93047d0baadea4fde19f770dacb56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7507f333bc93047d0baadea4fde19f770dacb56"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 72,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dae7920eff2edcefe46688f7b14c4090e1d92dd7",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "patch": "@@ -10,6 +10,8 @@\n #include <util/time.h>\n #include <version.h>\n \n+#include <memory>\n+\n FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n     : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n@@ -155,6 +157,20 @@ int FuzzedSock::Connect(const sockaddr*, socklen_t) const\n     return 0;\n }\n \n+std::unique_ptr<Sock> FuzzedSock::Accept(sockaddr* addr, socklen_t* addr_len) const\n+{\n+    constexpr std::array accept_errnos{\n+        ECONNABORTED,\n+        EINTR,\n+        ENOMEM,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, accept_errnos);\n+        return std::unique_ptr<FuzzedSock>();\n+    }\n+    return std::make_unique<FuzzedSock>(m_fuzzed_data_provider);\n+}\n+\n int FuzzedSock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n {\n     constexpr std::array getsockopt_errnos{"
      },
      {
        "sha": "fb42dcd0fc49c7b32b61b8e3ad9a52921be98fd6",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "patch": "@@ -410,6 +410,8 @@ class FuzzedSock : public Sock\n \n     int Connect(const sockaddr*, socklen_t) const override;\n \n+    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override;\n+\n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\n \n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;"
      },
      {
        "sha": "3ef184007678d567d4bdbff3212cb651ff11d7b3",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "patch": "@@ -13,6 +13,7 @@\n #include <array>\n #include <cassert>\n #include <cstring>\n+#include <memory>\n #include <string>\n \n struct ConnmanTestMsg : public CConnman {\n@@ -126,6 +127,23 @@ class StaticContentsSock : public Sock\n \n     int Connect(const sockaddr*, socklen_t) const override { return 0; }\n \n+    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override\n+    {\n+        if (addr != nullptr) {\n+            // Pretend all connections come from 5.5.5.5:6789\n+            memset(addr, 0x00, *addr_len);\n+            const socklen_t write_len = static_cast<socklen_t>(sizeof(sockaddr_in));\n+            if (*addr_len >= write_len) {\n+                *addr_len = write_len;\n+                sockaddr_in* addr_in = reinterpret_cast<sockaddr_in*>(addr);\n+                addr_in->sin_family = AF_INET;\n+                memset(&addr_in->sin_addr, 0x05, sizeof(addr_in->sin_addr));\n+                addr_in->sin_port = htons(6789);\n+            }\n+        }\n+        return std::make_unique<StaticContentsSock>(\"\");\n+    };\n+\n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n     {\n         std::memset(opt_val, 0x0, *opt_len);"
      },
      {
        "sha": "2029d70a374ddf4d9fce5f1fc55d31738408970f",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "patch": "@@ -10,6 +10,7 @@\n #include <util/system.h>\n #include <util/time.h>\n \n+#include <memory>\n #include <stdexcept>\n #include <string>\n \n@@ -73,6 +74,32 @@ int Sock::Connect(const sockaddr* addr, socklen_t addr_len) const\n     return connect(m_socket, addr, addr_len);\n }\n \n+std::unique_ptr<Sock> Sock::Accept(sockaddr* addr, socklen_t* addr_len) const\n+{\n+#ifdef WIN32\n+    static constexpr auto ERR = INVALID_SOCKET;\n+#else\n+    static constexpr auto ERR = SOCKET_ERROR;\n+#endif\n+\n+    std::unique_ptr<Sock> sock;\n+\n+    const auto socket = accept(m_socket, addr, addr_len);\n+    if (socket != ERR) {\n+        try {\n+            sock = std::make_unique<Sock>(socket);\n+        } catch (const std::exception&) {\n+#ifdef WIN32\n+            closesocket(socket);\n+#else\n+            close(socket);\n+#endif\n+        }\n+    }\n+\n+    return sock;\n+}\n+\n int Sock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n {\n     return getsockopt(m_socket, level, opt_name, static_cast<char*>(opt_val), opt_len);"
      },
      {
        "sha": "751048285784000fd677a3a6a52cf8c98e68a687",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "patch": "@@ -10,6 +10,7 @@\n #include <util/time.h>\n \n #include <chrono>\n+#include <memory>\n #include <string>\n \n /**\n@@ -96,6 +97,14 @@ class Sock\n      */\n     [[nodiscard]] virtual int Connect(const sockaddr* addr, socklen_t addr_len) const;\n \n+    /**\n+     * accept(2) wrapper. Equivalent to `std::make_unique<Sock>(accept(this->Get(), addr, addr_len))`.\n+     * Code that uses this wrapper can be unit tested if this method is overridden by a mock Sock\n+     * implementation.\n+     * The returned unique_ptr is empty if `accept()` failed in which case errno will be set.\n+     */\n+    [[nodiscard]] virtual std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const;\n+\n     /**\n      * getsockopt(2) wrapper. Equivalent to\n      * `getsockopt(this->Get(), level, opt_name, opt_val, opt_len)`. Code that uses this"
      }
    ]
  },
  {
    "sha": "9e3cbfca7c9efa620c0cce73503772805cc1fa82",
    "node_id": "C_kwDOABII59oAKDllM2NiZmNhN2M5ZWZhNjIwYzBjY2U3MzUwMzc3MjgwNWNjMWZhODI",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-23T10:15:15Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:22:57Z"
      },
      "message": "net: use Sock in CConnman::ListenSocket\n\nChange `CConnman::ListenSocket` to use a pointer to `Sock` instead of a\nbare `SOCKET` and use `Sock::Accept()` instead of bare `accept()`. This\nwill help mocking / testing / fuzzing more code.",
      "tree": {
        "sha": "d462de1d2d10e666dfce8ab3237f1e207aa31964",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d462de1d2d10e666dfce8ab3237f1e207aa31964"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e3cbfca7c9efa620c0cce73503772805cc1fa82",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhUMACgkQVN8G9ktV\ny7+Z2h//SeLdcOhqbJgoe8mLt7kYiJyyL3Mc7vJlQSJwViDiFOgS6oJcfllGaOBY\neieWwNdVlBU3MqLE7K2uNMcrRqlh3Z2+BI+lSW6zh35w2f6l9HjuL2d633SQbGgc\nIfJBbBVwUqlXtSK5viC7PtC0/3JNJG3eykN+1+LmPN+i6+b7JX3gCMqegnnhUQ7z\nNlJLSGrsmPAw19xDe7e8udgxvenD6IxYfy0Rx3w2pIx1idfXSgHF48rWbIcVVAji\n/HYhm9SXsAF4QL0BzbVXlZUp/e6M4/eIeMS2L8GY8E53ffJOPu/ddhViIS/ft6zL\ndAoQl9dboAgZ/1inK0FRkxO6VqX/GPmxnuU/DWTsnnKS/6+S6TEnsRPfEQepvntY\nojk+uth5rsoyLUrMR5twBCYKvah1N7DlYI8lf34LtqlAPqEuyOq4fbxdFvzGb4Vr\nS9dh9mDRhNNZeWnH0nZFybOC76PC+Itb68PsUKtwZuw055Z0bm0F09J6CVf8N41k\nlrvfSCIrBVGp4psMIXnYyi7afkYdskE3PQfkTpkS5EFHrYm8d/ys5Bjsa0MTkhQS\nVX3KVhd/jsbKEfIH3xNPrxbTPnJZq5ws4cdsoQtb0f4S4H7UlrKB1OA3mNJa1kX4\naJa8/0cf9QyYq9NmBjXe1etsPxeijS41XJTz7t8MwsaZmbdnRmdMqyso+oNOrxvc\nqDGfh4qBF/zXygzTJLQp1gNXFxwTbUD6Os4pf7rxPnxuJhRFKZsE2qJuK4t+gxAx\nCfbqAdr2k++q3VzF6RBQZj/ciDP7t60NVrHHQdactqyE7yWsQrSb9UK+e/AqjT0o\nRCS43YpUVgBwVwN4c3/PaiCKM5Aicyjs8bBzoT4ip1zhIfCikYF/u6UKOESo/2OT\nCA+0OA9QWODxiU1cOvPdXYLJjDbfcAR6FO91ey2g3lYVzQ0JiXxgAATdTsLelQN7\nxwODGhYukZdbIsgRlauPdRko5qW5k/XD8zbsq12xf4P56R6apnwwrBLyGCk+fES3\na7saZPV19L8RCg/pvR5tD+IzjliIJ1T3BpyHcGtovuvn5DBED3Rcya3N30zvgXx4\nhvDNUFQ4+WjAOcvvs+vUFahcIwNFNgyZvsbeqnUrmcFdIDtX5DTiU/AUHhvFJPRC\ngwMvg6taJQkdOAv7ADfV9vBNZkqLooA71enOJQlFEOELugZUvKtGRXTdUxfoZAFA\nJ3igXEkAUG56orttno66QVytoWKox7jQNktMm0hbd4W6ZlZxmCG6w/Tw/vqsiDqE\ngCuDuD3yqLsM90m7kRrhEsfZ5fkez7rqU33Biy+PWYM0HF7LL8YrwIllHNkxWvoF\nCTzXDG/PW/8mLa8rDLfia+/iGu3/pQ==\n=5J76\n-----END PGP SIGNATURE-----",
        "payload": "tree d462de1d2d10e666dfce8ab3237f1e207aa31964\nparent f8bd13f85ae5404adef23a52719d804a5c36b1e8\nauthor Vasil Dimov <vd@FreeBSD.org> 1619172915 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368577 +0100\n\nnet: use Sock in CConnman::ListenSocket\n\nChange `CConnman::ListenSocket` to use a pointer to `Sock` instead of a\nbare `SOCKET` and use `Sock::Accept()` instead of bare `accept()`. This\nwill help mocking / testing / fuzzing more code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3cbfca7c9efa620c0cce73503772805cc1fa82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e3cbfca7c9efa620c0cce73503772805cc1fa82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3cbfca7c9efa620c0cce73503772805cc1fa82/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bd13f85ae5404adef23a52719d804a5c36b1e8"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 14,
      "deletions": 18
    },
    "files": [
      {
        "sha": "2ed9d82e251b51e720dfe89316385985204a43fe",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 16,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3cbfca7c9efa620c0cce73503772805cc1fa82/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3cbfca7c9efa620c0cce73503772805cc1fa82/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9e3cbfca7c9efa620c0cce73503772805cc1fa82",
        "patch": "@@ -1098,10 +1098,10 @@ bool CConnman::AttemptToEvictConnection()\n void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n-    SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n+    auto sock = hListenSocket.sock->Accept((struct sockaddr*)&sockaddr, &len);\n     CAddress addr;\n \n-    if (hSocket == INVALID_SOCKET) {\n+    if (!sock) {\n         const int nErr = WSAGetLastError();\n         if (nErr != WSAEWOULDBLOCK) {\n             LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n@@ -1115,12 +1115,12 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         addr = CAddress{MaybeFlipIPv6toCJDNS(addr), NODE_NONE};\n     }\n \n-    const CAddress addr_bind{MaybeFlipIPv6toCJDNS(GetBindAddress(hSocket)), NODE_NONE};\n+    const CAddress addr_bind{MaybeFlipIPv6toCJDNS(GetBindAddress(sock->Get())), NODE_NONE};\n \n     NetPermissionFlags permissionFlags = NetPermissionFlags::None;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);\n \n-    CreateNodeFromAcceptedSocket(hSocket, permissionFlags, addr_bind, addr);\n+    CreateNodeFromAcceptedSocket(sock->Release(), permissionFlags, addr_bind, addr);\n }\n \n void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n@@ -1359,7 +1359,7 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n                                  std::set<SOCKET>& error_set)\n {\n     for (const ListenSocket& hListenSocket : vhListenSocket) {\n-        recv_set.insert(hListenSocket.socket);\n+        recv_set.insert(hListenSocket.sock->Get());\n     }\n \n     for (CNode* pnode : nodes) {\n@@ -1640,7 +1640,7 @@ void CConnman::SocketHandlerListening(const std::set<SOCKET>& recv_set)\n         if (interruptNet) {\n             return;\n         }\n-        if (recv_set.count(listen_socket.socket) > 0) {\n+        if (recv_set.count(listen_socket.sock->Get()) > 0) {\n             AcceptConnection(listen_socket);\n         }\n     }\n@@ -2391,7 +2391,7 @@ bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError,\n         return false;\n     }\n \n-    vhListenSocket.push_back(ListenSocket(sock->Release(), permissions));\n+    vhListenSocket.emplace_back(std::move(sock), permissions);\n     return true;\n }\n \n@@ -2700,15 +2700,6 @@ void CConnman::StopNodes()\n         DeleteNode(pnode);\n     }\n \n-    // Close listening sockets.\n-    for (ListenSocket& hListenSocket : vhListenSocket) {\n-        if (hListenSocket.socket != INVALID_SOCKET) {\n-            if (!CloseSocket(hListenSocket.socket)) {\n-                LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n-            }\n-        }\n-    }\n-\n     for (CNode* pnode : m_nodes_disconnected) {\n         DeleteNode(pnode);\n     }"
      },
      {
        "sha": "bb6e7a79ad5027238584b43bc89fd64cc3320f5e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3cbfca7c9efa620c0cce73503772805cc1fa82/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3cbfca7c9efa620c0cce73503772805cc1fa82/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9e3cbfca7c9efa620c0cce73503772805cc1fa82",
        "patch": "@@ -26,6 +26,7 @@\n #include <threadinterrupt.h>\n #include <uint256.h>\n #include <util/check.h>\n+#include <util/sock.h>\n \n #include <atomic>\n #include <condition_variable>\n@@ -947,9 +948,13 @@ class CConnman\n private:\n     struct ListenSocket {\n     public:\n-        SOCKET socket;\n+        std::shared_ptr<Sock> sock;\n         inline void AddSocketPermissionFlags(NetPermissionFlags& flags) const { NetPermissions::AddFlag(flags, m_permissions); }\n-        ListenSocket(SOCKET socket_, NetPermissionFlags permissions_) : socket(socket_), m_permissions(permissions_) {}\n+        ListenSocket(std::shared_ptr<Sock> sock_, NetPermissionFlags permissions_)\n+            : sock{sock_}, m_permissions{permissions_}\n+        {\n+        }\n+\n     private:\n         NetPermissionFlags m_permissions;\n     };"
      }
    ]
  },
  {
    "sha": "6bf6e9fd9dece67878595a5f3361851c25833c49",
    "node_id": "C_kwDOABII59oAKDZiZjZlOWZkOWRlY2U2Nzg3ODU5NWE1ZjMzNjE4NTFjMjU4MzNjNDk",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T10:14:57Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:22:59Z"
      },
      "message": "net: change CreateNodeFromAcceptedSocket() to take Sock\n\nChange `CConnman::CreateNodeFromAcceptedSocket()` to take a `Sock`\nargument instead of `SOCKET`.\n\nThis makes the method mockable and also a little bit shorter as some\n`CloseSocket()` calls are removed (the socket will be closed\nautomatically by the `Sock` destructor on early return).",
      "tree": {
        "sha": "17570439873bd595c91a140f82004124153d524f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17570439873bd595c91a140f82004124153d524f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bf6e9fd9dece67878595a5f3361851c25833c49",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhUQACgkQVN8G9ktV\ny79E4R/+MuGAEhnEleAdC1rxoR3CMI6300KrEBABfNU2JpXivzgHSK2RKGIdOsA+\natzF3F0qBKKofsgY9GRWnJ97TMyV9odXuoGlDbLYIo8Fom+4h3PYlPKXSHOLwgkN\n0pPW1SbOG2o4Zu5JVLZtwDvzul48PXK16vGFXizilpmQHBvwU2Ab7vG6wk7VT3Kb\nsgsFYNAHI4VbyAY9eL3MrrSuBj2JenNUo0yXFgif8F5bOygr3Z1bhq1CZgJNmgQ1\nwu00pZ9PkQQjSLnkNueVtkA6C+L/2+Olp0+WX3VFSVLZDrF+zkMjYXeAGdPZcLe8\nDxj+MxwT9QgjPhyijPdheUmfNGS87slCMvVwXFZjfIl028cNZQyPHCnFVRTxil6o\nxqGN2M/k9S3ukUL3q7N6Kp4zVtM5dBACeQfXDzArBcpySCwEr7y5g8CjFMJhW7lK\nIZRWDruUxv7hjqjXWDJ+Pp0ciOfPHhKlU7glH1QTLAYEVC2oi06yP2AC7P/L7ZmL\n/l+8ePSXMZlXWwlXbV2QYQ/N8HckElrHjSC2TwVhCEw3FDB2kpQtv0GAkfzoH/PC\nsjwqVL1yHyw95CLDoxhvFCdfOA881qNyb59qKbBEWPH4VN/M+sUUP4A1trZsRaKx\nW+qYH1oWWwjv0vc9EdGkg3I/zvobJI2LjllCsa4EvsPkYuNMLorTTsYxyJox/rOY\nkZYB9U9YRK3iJXEwGvh8DHw87XZ/woHLl7w13V8kjpl1OWQ7E12IZy0fTyPvFH2l\nHVGG+hOwlD56u4gqaGehc+OEjaobQd+wwK2g2Qb5EcuzcHHn0wqIHkExycRu9NVR\nxtSG4H1XumNXAoigSb4J5W8HKacY1F+SjwQSC65zppB4kcEUnQt9jc+uKxlsmPHX\ncbTdy/MXZRIA5DmojWZh6ItSvPu7UkS8pmmpiUP2n9oks+XJZVD3bZz2RLjlRmAD\nqNnyBVFST7DPUV5oo+KcfGshwm/WZE43mT/vx58I9OOKOPmFx8RAguvQBbdtkrX7\nXW9EJ7maTdxLqLD2ZrWGyrHWJnGOScy1ZohmV/iQ3QwbbPWcAHGN6pDfRMKUyrTu\nlzPd2oVZN8sMki8PugrlRPpDdKABw4tVOQc7bv8cl3un3m8NkaTN/eSANeeZAXZg\naQH5zynG7/bBD21ht4UtOWfmjHrB2jaFtMXLPtE1MJsTIUcy0DRmDJKAZjEgaWA4\n+MJU62C0XibIMqn0usHgK6Fw0b+coPfVxZCn2j89G4Q/veFxWEH9o23npJv7NYfy\ngkUqRUdeJr3njbTtJTJMg+YUX1ApGY6Asqd+dO9FY0Xc3LEXwxh9gIg6NtRJHEqs\nObpS6mvD5i9pywnTBJocao0n6MALmw==\n=Tt2W\n-----END PGP SIGNATURE-----",
        "payload": "tree 17570439873bd595c91a140f82004124153d524f\nparent 9e3cbfca7c9efa620c0cce73503772805cc1fa82\nauthor Vasil Dimov <vd@FreeBSD.org> 1618308897 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368579 +0100\n\nnet: change CreateNodeFromAcceptedSocket() to take Sock\n\nChange `CConnman::CreateNodeFromAcceptedSocket()` to take a `Sock`\nargument instead of `SOCKET`.\n\nThis makes the method mockable and also a little bit shorter as some\n`CloseSocket()` calls are removed (the socket will be closed\nautomatically by the `Sock` destructor on early return).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bf6e9fd9dece67878595a5f3361851c25833c49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bf6e9fd9dece67878595a5f3361851c25833c49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bf6e9fd9dece67878595a5f3361851c25833c49/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e3cbfca7c9efa620c0cce73503772805cc1fa82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3cbfca7c9efa620c0cce73503772805cc1fa82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e3cbfca7c9efa620c0cce73503772805cc1fa82"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 8,
      "deletions": 13
    },
    "files": [
      {
        "sha": "7f248e44d4161c115cafc1069aaa8861301f2f95",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bf6e9fd9dece67878595a5f3361851c25833c49/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bf6e9fd9dece67878595a5f3361851c25833c49/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6bf6e9fd9dece67878595a5f3361851c25833c49",
        "patch": "@@ -1120,10 +1120,10 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     NetPermissionFlags permissionFlags = NetPermissionFlags::None;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);\n \n-    CreateNodeFromAcceptedSocket(sock->Release(), permissionFlags, addr_bind, addr);\n+    CreateNodeFromAcceptedSocket(std::move(sock), permissionFlags, addr_bind, addr);\n }\n \n-void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n+void CConnman::CreateNodeFromAcceptedSocket(std::unique_ptr<Sock>&& sock,\n                                             NetPermissionFlags permissionFlags,\n                                             const CAddress& addr_bind,\n                                             const CAddress& addr)\n@@ -1149,27 +1149,24 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n \n     if (!fNetworkActive) {\n         LogPrint(BCLog::NET, \"connection from %s dropped: not accepting new connections\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n-    if (!IsSelectableSocket(hSocket))\n+    if (!IsSelectableSocket(sock->Get()))\n     {\n         LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n     // According to the internet TCP_NODELAY is not carried into accepted sockets\n     // on all platforms.  Set it again here just to be sure.\n-    SetSocketNoDelay(hSocket);\n+    SetSocketNoDelay(sock->Get());\n \n     // Don't accept connections from banned peers.\n     bool banned = m_banman && m_banman->IsBanned(addr);\n     if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::NoBan) && banned)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n@@ -1178,7 +1175,6 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::NoBan) && nInbound + 1 >= nMaxInbound && discouraged)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (discouraged)\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n@@ -1187,7 +1183,6 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n         if (!AttemptToEvictConnection()) {\n             // No connection to evict, disconnect the new connection\n             LogPrint(BCLog::NET, \"failed to find an eviction candidate - connection dropped (full)\\n\");\n-            CloseSocket(hSocket);\n             return;\n         }\n     }\n@@ -1201,7 +1196,7 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     }\n \n     const bool inbound_onion = std::find(m_onion_binds.begin(), m_onion_binds.end(), addr_bind) != m_onion_binds.end();\n-    CNode* pnode = new CNode(id, nodeServices, hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n+    CNode* pnode = new CNode(id, nodeServices, sock->Release(), addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n     pnode->AddRef();\n     pnode->m_permissionFlags = permissionFlags;\n     pnode->m_prefer_evict = discouraged;\n@@ -2329,7 +2324,7 @@ void CConnman::ThreadI2PAcceptIncoming()\n             continue;\n         }\n \n-        CreateNodeFromAcceptedSocket(conn.sock->Release(), NetPermissionFlags::None,\n+        CreateNodeFromAcceptedSocket(std::move(conn.sock), NetPermissionFlags::None,\n                                      CAddress{conn.me, NODE_NONE}, CAddress{conn.peer, NODE_NONE});\n     }\n }"
      },
      {
        "sha": "13ebb6ac3a29efc7e6bb2feb8deda4c84885bd17",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bf6e9fd9dece67878595a5f3361851c25833c49/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bf6e9fd9dece67878595a5f3361851c25833c49/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6bf6e9fd9dece67878595a5f3361851c25833c49",
        "patch": "@@ -974,12 +974,12 @@ class CConnman\n     /**\n      * Create a `CNode` object from a socket that has just been accepted and add the node to\n      * the `m_nodes` member.\n-     * @param[in] hSocket Connected socket to communicate with the peer.\n+     * @param[in] sock Connected socket to communicate with the peer.\n      * @param[in] permissionFlags The peer's permissions.\n      * @param[in] addr_bind The address and port at our side of the connection.\n      * @param[in] addr The address and port at the peer's side of the connection.\n      */\n-    void CreateNodeFromAcceptedSocket(SOCKET hSocket,\n+    void CreateNodeFromAcceptedSocket(std::unique_ptr<Sock>&& sock,\n                                       NetPermissionFlags permissionFlags,\n                                       const CAddress& addr_bind,\n                                       const CAddress& addr);"
      }
    ]
  }
]