[
  {
    "sha": "0c9b9b7d646333cb3212f1bea98e629c416cbe42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzliOWI3ZDY0NjMzM2NiMzIxMmYxYmVhOThlNjI5YzQxNmNiZTQy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-02-06T14:16:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-02-14T19:19:40Z"
      },
      "message": "[trivial] Fix recently introduced typos in comments",
      "tree": {
        "sha": "1367ac5ad5c472b827962e95046aef1cecf2f102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1367ac5ad5c472b827962e95046aef1cecf2f102"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c9b9b7d646333cb3212f1bea98e629c416cbe42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9b9b7d646333cb3212f1bea98e629c416cbe42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c9b9b7d646333cb3212f1bea98e629c416cbe42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9b9b7d646333cb3212f1bea98e629c416cbe42/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/870cd2b58aba30ecd57c624ab1f1724b3235cb4d"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cf265180ffae56b7de88410316ec736ed62a65f1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -934,7 +934,7 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n-    // incremental relay fee sets the minimimum feerate increase necessary for BIP 125 replacement in the mempool\n+    // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (IsArgSet(\"-incrementalrelayfee\"))\n     {"
      },
      {
        "sha": "29bdb376821751612aae0da7b08d56844daf9917",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -24,7 +24,7 @@ class CRPCConvertParam\n };\n \n /**\n- * Specifiy a (method, idx, name) here if the argument is a non-string RPC\n+ * Specify a (method, idx, name) here if the argument is a non-string RPC\n  * argument and needs to be converted from JSON.\n  *\n  * @note Parameter indexes start from 0."
      },
      {
        "sha": "45a5896da1b78ca44c2476cf701456b3b1755ae7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -435,7 +435,7 @@ UniValue setmocktime(const JSONRPCRequest& request)\n     // this could have an effect on mempool time-based eviction, as well as\n     // IsCurrentForFeeEstimation() and IsInitialBlockDownload().\n     // TODO: figure out the right way to synchronize around mocktime, and\n-    // ensure all callsites of GetTime() are accessing this safely.\n+    // ensure all call sites of GetTime() are accessing this safely.\n     LOCK(cs_main);\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));"
      },
      {
        "sha": "cc3290c63157097887b5c3978e7644afd08555f4",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -11,7 +11,7 @@\n \n /**\n  * GetTimeMicros() and GetTimeMillis() both return the system time, but in\n- * different units. GetTime() returns the sytem time in seconds, but also\n+ * different units. GetTime() returns the system time in seconds, but also\n  * supports mocktime, where the time can be specified by the user, eg for\n  * testing (eg with the setmocktime rpc, or -mocktime argument).\n  *"
      },
      {
        "sha": "144b5d5c0cf5daba451ed4bec0fadb453c693619",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -1429,7 +1429,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // Helps prevent CPU exhaustion attacks.\n \n         // Skip script verification when connecting blocks under the\n-        // assumedvalid block. Assuming the assumedvalid block is valid this\n+        // assumevalid block. Assuming the assumevalid block is valid this\n         // is safe because block merkle hashes are still computed and checked,\n         // Of course, if an assumed valid block is invalid due to false scriptSigs\n         // this optimization would allow an invalid chain to be accepted.\n@@ -1771,7 +1771,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n                 pindexBestHeader->nChainWork >= UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n                 // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // The equivalent time check discourages hashpower from extorting the network via DOS attack\n+                // The equivalent time check discourages hash power from extorting the network via DOS attack\n                 //  into accepting an invalid block through telling users they must manually set assumevalid.\n                 //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n                 //  it hard to hide the implication of the demand.  This also avoids having release candidates\n@@ -2486,12 +2486,12 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n-            { // TODO: Tempoarily ensure that mempool removals are notified before\n+            { // TODO: Temporarily ensure that mempool removals are notified before\n               // connected transactions.  This shouldn't matter, but the abandoned\n               // state of transactions in our wallet is currently cleared when we\n               // receive another notification and there is a race condition where\n               // notification of a connected conflict might cause an outside process\n-              // to abandon a transaction and then have it inadvertantly cleared by\n+              // to abandon a transaction and then have it inadvertently cleared by\n               // the notification that the conflicted transaction was evicted.\n             MemPoolConflictRemovalTracker mrt(mempool);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2520,7 +2520,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n             } // MemPoolConflictRemovalTracker destroyed and conflict evictions are notified\n \n-            // Transactions in the connnected block are notified\n+            // Transactions in the connected block are notified\n             for (const auto& pair : connectTrace.blocksConnected) {\n                 assert(pair.second);\n                 const CBlock& block = *(pair.second);"
      },
      {
        "sha": "a494eb6990fee9db508b77cc26b26a7504613982",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -50,7 +50,7 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    /** A posInBlock value for SyncTransaction calls for tranactions not\n+    /** A posInBlock value for SyncTransaction calls for transactions not\n      * included in connected blocks such as transactions removed from mempool,\n      * accepted to mempool or appearing in disconnected blocks.*/\n     static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;"
      },
      {
        "sha": "01005bf3380c2c9bcb27474e975e5696ce70d8c9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -2725,7 +2725,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n             \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n-            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\\n\"\n             \"   }\\n\"\n             \"\\nResult:\\n\""
      },
      {
        "sha": "49b943d87b8bf1655d6c972d46afb6700c9bd8e0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -1012,7 +1012,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n  * TODO: One exception to this is that the abandoned state is cleared under the\n  * assumption that any further notification of a transaction that was considered\n  * abandoned is an indication that it is not safe to be considered abandoned.\n- * Abandoned state should probably be more carefuly tracked via different\n+ * Abandoned state should probably be more carefully tracked via different\n  * posInBlock signals or by checking mempool presence when necessary.\n  */\n bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)"
      }
    ]
  }
]