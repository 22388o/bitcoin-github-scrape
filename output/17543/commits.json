[
  {
    "sha": "cd15809a3213225849902dfd9d49b80b93da1d51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDE1ODA5YTMyMTMyMjU4NDk5MDJkZmQ5ZDQ5YjgwYjkzZGExZDUx",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-19T20:19:35Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-20T21:10:17Z"
      },
      "message": "Remove MarkConflicted in LoadToWallet\n\nWhile wallet is shutdown, no block connection can happen and\nthe confict detection logic can't be triggered to change\nstatus of any wallet transactions. Therefore, updating\nchildrens status based on father one shouldn't produce\nany change.",
      "tree": {
        "sha": "f56224ac5b5d6ca0280a0779a93f811c02eb2f23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f56224ac5b5d6ca0280a0779a93f811c02eb2f23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd15809a3213225849902dfd9d49b80b93da1d51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd15809a3213225849902dfd9d49b80b93da1d51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd15809a3213225849902dfd9d49b80b93da1d51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd15809a3213225849902dfd9d49b80b93da1d51/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "a8d9f7dfa72395e95c9f197b47f2120e19f1b1d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8d9f7dfa72395e95c9f197b47f2120e19f1b1d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8d9f7dfa72395e95c9f197b47f2120e19f1b1d2"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5c154b3a73fdb677d6d3d003949ca30ab89744a3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd15809a3213225849902dfd9d49b80b93da1d51/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd15809a3213225849902dfd9d49b80b93da1d51/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cd15809a3213225849902dfd9d49b80b93da1d51",
        "patch": "@@ -851,15 +851,6 @@ void CWallet::LoadToWallet(CWalletTx& wtxIn)\n         wtx.m_it_wtxOrdered = wtxOrdered.insert(std::make_pair(wtx.nOrderPos, &wtx));\n     }\n     AddToSpends(hash);\n-    for (const CTxIn& txin : wtx.tx->vin) {\n-        auto it = mapWallet.find(txin.prevout.hash);\n-        if (it != mapWallet.end()) {\n-            CWalletTx& prevtx = it->second;\n-            if (prevtx.isConflicted()) {\n-                MarkConflicted(prevtx.m_confirm.hashBlock, prevtx.m_confirm.block_height, wtx.GetHash());\n-            }\n-        }\n-    }\n }\n \n bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool fUpdate)"
      }
    ]
  },
  {
    "sha": "b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGI0NTkyZDk4NWZhMzZkZDBkZGRmZDBlMmJjNmRhZjhkZjZlNzlj",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-19T20:02:38Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-20T21:10:17Z"
      },
      "message": "Refactor MarkConflicted to UpdateConflicts\n\nIn next commit, we'll be able to reuse UpdateConflicts to also\ncover the conflicted to unconfirmed status update case.\n\nRemove check on conflicting height being ahead of the last block\nprocessed as both rescan logic and connection/disconnection guarantee\nthan the block viewed is in best chain at time of processing.\n\nIn case of block disconnection, next commit will undo conflicted status\nback to unconfirmed.",
      "tree": {
        "sha": "72de294072598e4b2ddc7f04d8aad9962dfb86f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72de294072598e4b2ddc7f04d8aad9962dfb86f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "cd15809a3213225849902dfd9d49b80b93da1d51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd15809a3213225849902dfd9d49b80b93da1d51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd15809a3213225849902dfd9d49b80b93da1d51"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 24,
      "deletions": 26
    },
    "files": [
      {
        "sha": "a6fa05ea0970e857b6136580006d42e4b9bd1555",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 25,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c",
        "patch": "@@ -859,16 +859,27 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Co\n     {\n         AssertLockHeld(cs_wallet);\n \n-        if (!confirm.hashBlock.IsNull()) {\n-            for (const CTxIn& txin : tx.vin) {\n-                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-                while (range.first != range.second) {\n-                    if (range.first->second != tx.GetHash()) {\n-                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), confirm.hashBlock.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(confirm.hashBlock, confirm.block_height, range.first->second);\n+        for (const CTxIn& txin : tx.vin) {\n+            std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+            while (range.first != range.second) {\n+                if (range.first->second != tx.GetHash()) {\n+                    if (confirm.status == CWalletTx::CONFIRMED) {\n+                        WalletLogPrintf(\"Mark conflict: transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), confirm.hashBlock.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                        UpdateConflicts(range.first->second, [&confirm](CWalletTx& wtx) -> bool {\n+                            // Block is more conflicting than previous conflict or confirmation, so update.\n+                            if (confirm.block_height < wtx.m_confirm.block_height || wtx.m_confirm.block_height == 0) {\n+                                // Mark transaction as conflicted with this block.\n+                                wtx.m_confirm.nIndex = 0;\n+                                wtx.m_confirm.hashBlock = confirm.hashBlock;\n+                                wtx.m_confirm.block_height = confirm.block_height;\n+                                wtx.setConflicted();\n+                                return true;\n+                            }\n+                            return false;\n+                        });\n                     }\n-                    range.first++;\n                 }\n+                range.first++;\n             }\n         }\n \n@@ -974,19 +985,12 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n     return true;\n }\n \n-void CWallet::MarkConflicted(const uint256& hashBlock, int conflicting_height, const uint256& hashTx)\n+template <typename Fn>\n+void CWallet::UpdateConflicts(const uint256& hashTx, Fn&& change_status)\n {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n-    int conflictconfirms = (m_last_block_processed_height - conflicting_height + 1) * -1;\n-    // If number of conflict confirms cannot be determined, this means\n-    // that the block is still unknown or not yet part of the main chain,\n-    // for example when loading the wallet during a reindex. Do nothing in that\n-    // case.\n-    if (conflictconfirms >= 0)\n-        return;\n-\n     // Do not flush the wallet here for performance reasons\n     WalletBatch batch(*database, \"r+\", false);\n \n@@ -1002,14 +1006,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, int conflicting_height, c\n         auto it = mapWallet.find(now);\n         assert(it != mapWallet.end());\n         CWalletTx& wtx = it->second;\n-        int currentconfirm = wtx.GetDepthInMainChain();\n-        if (conflictconfirms < currentconfirm) {\n-            // Block is 'more conflicted' than current confirm; update.\n-            // Mark transaction as conflicted with this block.\n-            wtx.m_confirm.nIndex = 0;\n-            wtx.m_confirm.hashBlock = hashBlock;\n-            wtx.m_confirm.block_height = conflicting_height;\n-            wtx.setConflicted();\n+        if (change_status(wtx)) {\n             wtx.MarkDirty();\n             batch.WriteTx(wtx);\n             // Iterate over all its outputs, and mark transactions in the wallet that spend them conflicted too"
      },
      {
        "sha": "7aedbf7b1f0b26d3b21da3e377bfa0de88c0f347",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c",
        "patch": "@@ -653,7 +653,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\n-    void MarkConflicted(const uint256& hashBlock, int conflicting_height, const uint256& hashTx);\n+    template <typename Fn>\n+    void UpdateConflicts(const uint256& hashTx, Fn&& fn);\n \n     /* Mark a transaction's inputs dirty, thus forcing the outputs to be recomputed */\n     void MarkInputsDirty(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      }
    ]
  },
  {
    "sha": "3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzhiZDY4MTRjYTg4NzE1ZDNkNTY5OTRiMTBkYzJjNWYzZTM4ZTJk",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-19T20:11:23Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-20T21:10:17Z"
      },
      "message": "Undo conflicts if deepest conflicting tx is removed from chain\n\nExtend SyncTransaction and AddToWalletIfInvolvingMe to check\nthat disconnected conflicting tx was the deepest one and conflicted\ntx status can be safely change to unconfirmed.",
      "tree": {
        "sha": "c662c496acc8a399bddeb8c981cefff3e56cbdf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c662c496acc8a399bddeb8c981cefff3e56cbdf1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8b4592d985fa36dd0dddfd0e2bc6daf8df6e79c"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 22,
      "deletions": 9
    },
    "files": [
      {
        "sha": "eff6d80683034ef5f4d2b7b132ead19df4282db5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d",
        "patch": "@@ -853,7 +853,7 @@ void CWallet::LoadToWallet(CWalletTx& wtxIn)\n     AddToSpends(hash);\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool fUpdate, int block_height)\n {\n     const CTransaction& tx = *ptx;\n     {\n@@ -877,6 +877,19 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Co\n                             }\n                             return false;\n                         });\n+                    } else if (confirm.status == CWalletTx::UNCONFIRMED) {\n+                        WalletLogPrintf(\"Unmark conflict : transaction %s (in block %s) was conflicting with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), confirm.hashBlock.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                        UpdateConflicts(range.first->second, [&block_height](CWalletTx& wtx) -> bool {\n+                            // A tx may be conflicted by multiple txn, mark unconfirmed only when deepest conflict is removed\n+                            if (block_height == wtx.m_confirm.block_height) {\n+                                wtx.m_confirm.nIndex = 0;\n+                                wtx.m_confirm.hashBlock = uint256();\n+                                wtx.m_confirm.block_height = 0;\n+                                wtx.setUnconfirmed();\n+                                return true;\n+                            }\n+                            return false;\n+                        });\n                     }\n                 }\n                 range.first++;\n@@ -1024,9 +1037,9 @@ void CWallet::UpdateConflicts(const uint256& hashTx, Fn&& change_status)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool update_tx)\n+void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, int block_height, bool update_tx)\n {\n-    if (!AddToWalletIfInvolvingMe(ptx, confirm, update_tx))\n+    if (!AddToWalletIfInvolvingMe(ptx, confirm, update_tx, block_height))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -1039,7 +1052,7 @@ void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n     CWalletTx::Confirmation confirm(CWalletTx::Status::UNCONFIRMED, /* block_height */ 0, {}, /* nIndex */ 0);\n-    SyncTransaction(ptx, confirm);\n+    SyncTransaction(ptx, confirm, 0);\n \n     auto it = mapWallet.find(ptx->GetHash());\n     if (it != mapWallet.end()) {\n@@ -1065,7 +1078,7 @@ void CWallet::BlockConnected(const CBlock& block, const std::vector<CTransaction\n     m_last_block_processed = block_hash;\n     for (size_t index = 0; index < block.vtx.size(); index++) {\n         CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, height, block_hash, index);\n-        SyncTransaction(block.vtx[index], confirm);\n+        SyncTransaction(block.vtx[index], confirm, height);\n         TransactionRemovedFromMempool(block.vtx[index]);\n     }\n     for (const CTransactionRef& ptx : vtxConflicted) {\n@@ -1086,7 +1099,7 @@ void CWallet::BlockDisconnected(const CBlock& block, int height)\n     m_last_block_processed = block.hashPrevBlock;\n     for (const CTransactionRef& ptx : block.vtx) {\n         CWalletTx::Confirmation confirm(CWalletTx::Status::UNCONFIRMED, /* block_height */ 0, {}, /* nIndex */ 0);\n-        SyncTransaction(ptx, confirm);\n+        SyncTransaction(ptx, confirm, height);\n     }\n }\n \n@@ -1633,7 +1646,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n             }\n             for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n                 CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, *block_height, block_hash, posInBlock);\n-                SyncTransaction(block.vtx[posInBlock], confirm, fUpdate);\n+                SyncTransaction(block.vtx[posInBlock], confirm, *block_height, fUpdate);\n             }\n             // scan succeeded, record block as most recent successfully scanned\n             result.last_scanned_block = block_hash;"
      },
      {
        "sha": "5aacdc813a0905ad520db092f234c78695ede690",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d",
        "patch": "@@ -650,7 +650,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n      * Abandoned state should probably be more carefully tracked via different\n      * posInBlock signals or by checking mempool presence when necessary.\n      */\n-    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool fUpdate, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* Mark a transaction (and its in-wallet descendants) as conflicting with a particular block. */\n     template <typename Fn>\n@@ -663,7 +663,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     /* Used by TransactionAddedToMemorypool/BlockConnected/Disconnected/ScanForWalletTransactions.\n      * Should be called with non-zero block_hash and posInBlock if this is for a transaction that is included in a block. */\n-    void SyncTransaction(const CTransactionRef& tx, CWalletTx::Confirmation confirm, bool update_tx = true) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void SyncTransaction(const CTransactionRef& tx, CWalletTx::Confirmation confirm, int height, bool update_tx = true) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::atomic<uint64_t> m_wallet_flags{0};\n "
      }
    ]
  },
  {
    "sha": "ec5a89a26fa17e68b3e5928730e7d7c3e0370729",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzVhODlhMjZmYTE3ZTY4YjNlNTkyODczMGU3ZDdjM2UwMzcwNzI5",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-10-14T05:00:51Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2019-11-21T03:40:49Z"
      },
      "message": "Add wallets_conflicts\n\nTest cover the case of a tx being conflicted by multiple\ntxn with different depth. Conflicted tx is also spent by\na child tx for which confirmation status is tied to parent\none. After reorg of conflicting txn, conflicted status should be\nundo properly.",
      "tree": {
        "sha": "564ababc1c68e7d04685d3e7c1e7473e770ed22f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/564ababc1c68e7d04685d3e7c1e7473e770ed22f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec5a89a26fa17e68b3e5928730e7d7c3e0370729",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec5a89a26fa17e68b3e5928730e7d7c3e0370729",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec5a89a26fa17e68b3e5928730e7d7c3e0370729",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec5a89a26fa17e68b3e5928730e7d7c3e0370729/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c8bd6814ca88715d3d56994b10dc2c5f3e38e2d"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 111,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d409d85b14a88eae24467b0142d9e047826c52ac",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec5a89a26fa17e68b3e5928730e7d7c3e0370729/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec5a89a26fa17e68b3e5928730e7d7c3e0370729/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=ec5a89a26fa17e68b3e5928730e7d7c3e0370729",
        "patch": "@@ -132,6 +132,7 @@\n     'wallet_watchonly.py',\n     'wallet_watchonly.py --usecli',\n     'wallet_reorgsrestore.py',\n+    'wallet_conflicts.py',\n     'interface_http.py',\n     'interface_rpc.py',\n     'rpc_psbt.py',"
      },
      {
        "sha": "1bae4dc69769d9715071bc2bc1d1f8c93cb1894f",
        "filename": "test/functional/wallet_conflicts.py",
        "status": "added",
        "additions": 110,
        "deletions": 0,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec5a89a26fa17e68b3e5928730e7d7c3e0370729/test/functional/wallet_conflicts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec5a89a26fa17e68b3e5928730e7d7c3e0370729/test/functional/wallet_conflicts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_conflicts.py?ref=ec5a89a26fa17e68b3e5928730e7d7c3e0370729",
        "patch": "@@ -0,0 +1,110 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"Test conflicts tracking with multilple txn conflicting a conflicted tx.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        connect_nodes,\n+        disconnect_nodes,\n+)\n+\n+class TxConflicts(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Send tx from which to conflict outputs later\n+        txid_conflict_from_1 = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n+        txid_conflict_from_2 = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))\n+        self.nodes[0].generate(1)\n+        self.sync_blocks()\n+\n+        # Disconnect to broadcast conflicts on their respective chains\n+        disconnect_nodes(self.nodes[0], 1)\n+        disconnect_nodes(self.nodes[2], 1)\n+        disconnect_nodes(self.nodes[2], 0)\n+\n+        # Create txn, with conflicted txn spending outpoint A & B, A is going to be spent by conflicting_tx_A and B is going to be spent by conflicting_tx_B\n+        nA = next(tx_out[\"vout\"] for tx_out in self.nodes[0].gettransaction(txid_conflict_from_1)[\"details\"] if tx_out[\"amount\"] == Decimal(\"10\"))\n+        nB = next(tx_out[\"vout\"] for tx_out in self.nodes[0].gettransaction(txid_conflict_from_2)[\"details\"] if tx_out[\"amount\"] == Decimal(\"10\"))\n+        inputs_conflicted_tx = []\n+        inputs_conflicted_tx.append({\"txid\": txid_conflict_from_1, \"vout\": nA})\n+        inputs_conflicted_tx.append({\"txid\": txid_conflict_from_2, \"vout\": nB})\n+        inputs_conflicting_tx_A = []\n+        inputs_conflicting_tx_A.append({\"txid\": txid_conflict_from_1, \"vout\": nA})\n+        inputs_conflicting_tx_B = []\n+        inputs_conflicting_tx_B.append({\"txid\": txid_conflict_from_2, \"vout\": nB})\n+\n+        outputs_conflicted_tx = {}\n+        outputs_conflicted_tx[self.nodes[0].getnewaddress()] = Decimal(\"19.99998\")\n+        outputs_conflicting_tx_A = {}\n+        outputs_conflicting_tx_A[self.nodes[0].getnewaddress()] = Decimal(\"9.99998\")\n+        outputs_conflicting_tx_B = {}\n+        outputs_conflicting_tx_B[self.nodes[0].getnewaddress()] = Decimal(\"9.99998\")\n+\n+        conflicted = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs_conflicted_tx, outputs_conflicted_tx))\n+        conflicting_tx_A = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs_conflicting_tx_A, outputs_conflicting_tx_A))\n+        conflicting_tx_B = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs_conflicting_tx_B, outputs_conflicting_tx_B))\n+\n+        # Broadcast conflicted tx\n+        conflicted_txid = self.nodes[0].sendrawtransaction(conflicted[\"hex\"])\n+        self.nodes[0].generate(1)\n+\n+        # Build child conflicted tx\n+        nA = next(tx_out[\"vout\"] for tx_out in self.nodes[0].gettransaction(conflicted_txid)[\"details\"] if tx_out[\"amount\"] == Decimal(\"19.99998\"))\n+        inputs_child_conflicted = []\n+        inputs_child_conflicted.append({\"txid\": conflicted_txid, \"vout\": nA})\n+        outputs_child_conflicted = {}\n+        outputs_child_conflicted[self.nodes[0].getnewaddress()] = Decimal(\"19.99996\")\n+        child_conflicted = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs_child_conflicted, outputs_child_conflicted))\n+        child_conflicted_txid = self.nodes[0].sendrawtransaction(child_conflicted[\"hex\"])\n+        self.nodes[0].generate(1)\n+\n+        # Broadcast conflicting txn on node1 chain\n+        conflicting_txid_A = self.nodes[1].sendrawtransaction(conflicting_tx_A[\"hex\"])\n+        self.nodes[1].generate(4)\n+        self.nodes[1].sendrawtransaction(conflicting_tx_B[\"hex\"])\n+        self.nodes[1].generate(4)\n+\n+        # Reconnect node0 and node1 and check that conflicted_txid is effectively conflicted\n+        connect_nodes(self.nodes[0], 1)\n+        self.sync_blocks([self.nodes[0], self.nodes[1]])\n+        conflicted = self.nodes[0].gettransaction(conflicted_txid)\n+        child_conflicted = self.nodes[0].gettransaction(child_conflicted_txid)\n+        conflicting = self.nodes[0].gettransaction(conflicting_txid_A)\n+        # Conflicted tx should have confirmations set to the confirmations of the most conflicting tx\n+        assert_equal(conflicted[\"confirmations\"], -conflicting[\"confirmations\"])\n+        # Child should inherit conflicted state from parent\n+        assert_equal(child_conflicted[\"confirmations\"], -conflicting[\"confirmations\"])\n+\n+        # Node2 chain without conflicts\n+        self.nodes[2].generate(15)\n+\n+        # Connect node0 and node2 and wait reorg\n+        connect_nodes(self.nodes[0], 2)\n+        self.sync_blocks([self.nodes[0], self.nodes[2]])\n+        conflicted = self.nodes[0].gettransaction(conflicted_txid)\n+        child_conflicted = self.nodes[0].gettransaction(child_conflicted_txid)\n+        # Former conflicted tx should be unoncifmred as it hasn't been yet rebroadcast\n+        assert_equal(conflicted[\"confirmations\"], 0)\n+        # Former conflicted child tx should be unconfirmed as it hasn't been rebroadcast\n+        assert_equal(child_conflicted[\"confirmations\"], 0)\n+        # Rebroadcast former conflicted tx and check it confirms smoothly\n+        self.nodes[2].sendrawtransaction(conflicted[\"hex\"])\n+        self.nodes[2].generate(1)\n+        self.sync_blocks([self.nodes[0], self.nodes[2]])\n+        former_conflicted = self.nodes[0].gettransaction(conflicted_txid)\n+        assert_equal(former_conflicted[\"confirmations\"], 1)\n+        assert_equal(former_conflicted[\"blockheight\"], 217)\n+\n+if __name__ == '__main__':\n+    TxConflicts().main()"
      }
    ]
  }
]