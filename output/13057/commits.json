[
  {
    "sha": "4f0111ecd6a9521da68b7597c73ffd7aa8bef98d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjAxMTFlY2Q2YTk1MjFkYTY4Yjc1OTdjNzNmZmQ3YWE4YmVmOThk",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-04-23T01:47:14Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-07-25T14:20:39Z"
      },
      "message": "refactor pre-selected coin code, add basic unit test case",
      "tree": {
        "sha": "d41375663e59f3dfe19231cb1600d2050e8ba6e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d41375663e59f3dfe19231cb1600d2050e8ba6e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f0111ecd6a9521da68b7597c73ffd7aa8bef98d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f0111ecd6a9521da68b7597c73ffd7aa8bef98d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f0111ecd6a9521da68b7597c73ffd7aa8bef98d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f0111ecd6a9521da68b7597c73ffd7aa8bef98d/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1211b15bf6c0b2904d90b96a9b3834c5cb9e7b4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1211b15bf6c0b2904d90b96a9b3834c5cb9e7b4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1211b15bf6c0b2904d90b96a9b3834c5cb9e7b4e"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 46,
      "deletions": 28
    },
    "files": [
      {
        "sha": "e83db4d7fdcc37852844cc691da6a096d9101d4d",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f0111ecd6a9521da68b7597c73ffd7aa8bef98d/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f0111ecd6a9521da68b7597c73ffd7aa8bef98d/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=4f0111ecd6a9521da68b7597c73ffd7aa8bef98d",
        "patch": "@@ -252,6 +252,28 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     BOOST_CHECK(testWallet.SelectCoins(vCoins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb, bnb_used));\n     BOOST_CHECK(!bnb_used);\n     BOOST_CHECK(!coin_selection_params_bnb.use_bnb);\n+\n+    // Make sure preselected inputs that don't allow additional inputs\n+    // returns the right values\n+    empty_wallet();\n+    add_coin(5 * CENT);\n+    add_coin(6 * CENT);\n+    add_coin(11 * CENT);\n+    add_coin(4 * CENT); //Won't be selected\n+    CCoinControl coin_control2;\n+    coin_control2.fAllowOtherInputs = false;\n+    coin_control2.Select(COutPoint(vCoins.at(0).tx->GetHash(), vCoins.at(0).i));\n+    coin_control2.Select(COutPoint(vCoins.at(1).tx->GetHash(), vCoins.at(1).i));\n+    coin_control2.Select(COutPoint(vCoins.at(2).tx->GetHash(), vCoins.at(2).i));\n+    BOOST_CHECK(testWallet.SelectCoins(vCoins, 4 * CENT, setCoinsRet, nValueRet, coin_control2, coin_selection_params_bnb, bnb_used));\n+    BOOST_CHECK(!bnb_used);\n+    BOOST_CHECK(!coin_selection_params_bnb.use_bnb);\n+    std::vector<COutPoint> coin_list;\n+    coin_control2.ListSelected(coin_list);\n+    BOOST_CHECK_EQUAL(setCoinsRet.size(), coin_list.size());\n+    // \"over-selected\" since these were mandatory\n+    BOOST_CHECK_EQUAL(nValueRet, (5+6+11) * CENT);\n+\n }\n \n BOOST_AUTO_TEST_CASE(knapsack_solver_test)"
      },
      {
        "sha": "97b29f445ceee0189d77658491afd786107e186f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 28,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f0111ecd6a9521da68b7597c73ffd7aa8bef98d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f0111ecd6a9521da68b7597c73ffd7aa8bef98d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4f0111ecd6a9521da68b7597c73ffd7aa8bef98d",
        "patch": "@@ -2474,21 +2474,6 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     std::vector<COutput> vCoins(vAvailableCoins);\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n-    if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n-    {\n-        // We didn't use BnB here, so set it to false.\n-        bnb_used = false;\n-\n-        for (const COutput& out : vCoins)\n-        {\n-            if (!out.fSpendable)\n-                 continue;\n-            nValueRet += out.tx->tx->vout[out.i].nValue;\n-            setCoinsRet.insert(out.GetInputCoin());\n-        }\n-        return (nValueRet >= nTargetValue);\n-    }\n-\n     // calculate value from preset inputs and store them\n     std::set<CInputCoin> setPresetCoins;\n     CAmount nValueFromPresetInputs = 0;\n@@ -2497,7 +2482,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     coin_control.ListSelected(vPresetInputs);\n     for (const COutPoint& outpoint : vPresetInputs)\n     {\n-        // For now, don't use BnB if preset inputs are selected. TODO: Enable this later\n+        // For now, don't use BnB if preset inputs are selected.\n+        // TODO: Enable this later for cases where additional inputs are possible\n         bnb_used = false;\n         coin_selection_params.use_bnb = false;\n \n@@ -2515,13 +2501,23 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             return false; // TODO: Allow non-wallet inputs\n     }\n \n+    const CAmount amount_to_select = nTargetValue - nValueFromPresetInputs;\n+\n+    // Return early if no other inputs can be selected or we selected enough\n+    if ((coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n+            || amount_to_select <= 0) {\n+        nValueRet = nValueFromPresetInputs;\n+        setCoinsRet = setPresetCoins;\n+        return (amount_to_select <= 0);\n+    }\n+\n     // remove preset inputs from vCoins\n-    for (std::vector<COutput>::iterator it = vCoins.begin(); it != vCoins.end() && coin_control.HasSelected();)\n-    {\n-        if (setPresetCoins.count(it->GetInputCoin()))\n+    for (std::vector<COutput>::iterator it = vCoins.begin(); it != vCoins.end() && coin_control.HasSelected();) {\n+        if (setPresetCoins.count(it->GetInputCoin())) {\n             it = vCoins.erase(it);\n-        else\n+        } else {\n             ++it;\n+        }\n     }\n \n     // form groups from remaining coins; note that preset coins will not\n@@ -2532,14 +2528,14 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     size_t max_descendants = (size_t)std::max<int64_t>(1, gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT));\n     bool fRejectLongChains = gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n \n-    bool res = nTargetValue <= nValueFromPresetInputs ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 6, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 1, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, 2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+    bool res = SelectCoinsMinConf(amount_to_select, CoinEligibilityFilter(1, 6, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+        SelectCoinsMinConf(amount_to_select, CoinEligibilityFilter(1, 1, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+        (m_spend_zero_conf_change &&\n+            (SelectCoinsMinConf(amount_to_select, CoinEligibilityFilter(0, 1, 2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+            SelectCoinsMinConf(amount_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+            SelectCoinsMinConf(amount_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+            SelectCoinsMinConf(amount_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+            (!fRejectLongChains && SelectCoinsMinConf(amount_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used))));\n \n     // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n     util::insert(setCoinsRet, setPresetCoins);"
      }
    ]
  }
]