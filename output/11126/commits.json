[
  {
    "sha": "de9a1db2ed14e0c75ffd82dc031f7ad30c56d195",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTlhMWRiMmVkMTRlMGM3NWZmZDgyZGMwMzFmN2FkMzBjNTZkMTk1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-24T18:12:21Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-24T18:12:21Z"
      },
      "message": "Acquire cs_main lock before cs_wallet during wallet initialization\n\nCWallet::MarkConflicted may acquire the cs_main lock after\nCWalletDB::LoadWallet acquires the cs_wallet lock during wallet initialization.\n(CWalletDB::LoadWallet calls ReadKeyValue which calls CWallet::LoadToWallet\nwhich calls CWallet::MarkConflicted). This is the opposite order that cs_main\nand cs_wallet locks are acquired in the rest of the code, and so leads to\nPOTENTIAL DEADLOCK DETECTED errors if bitcoin is built with -DDEBUG_LOCKORDER.\n\nThis commit changes CWallet::LoadWallet (which calls CWalletDB::LoadWallet) to\nacquire both locks in the standard order. It also fixes some tests that were\nacquiring wallet and main locks out of order and failed with the new locking in\nCWallet::LoadWallet.\n\nError was reported by Luke Dashjr <luke-jr@utopios.org> in\nhttps://botbot.me/freenode/bitcoin-core-dev/msg/90244330/",
      "tree": {
        "sha": "a1da4e7317799469c078b5923a4aba3ae7ffc0aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1da4e7317799469c078b5923a4aba3ae7ffc0aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de9a1db2ed14e0c75ffd82dc031f7ad30c56d195",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de9a1db2ed14e0c75ffd82dc031f7ad30c56d195",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de9a1db2ed14e0c75ffd82dc031f7ad30c56d195",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de9a1db2ed14e0c75ffd82dc031f7ad30c56d195/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41496e20f36987d27bed6cb83c06a6a978bfdf42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41496e20f36987d27bed6cb83c06a6a978bfdf42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41496e20f36987d27bed6cb83c06a6a978bfdf42"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5ebacd57d3ab897f3bb8c5fe7d2fe221eaf96d0f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de9a1db2ed14e0c75ffd82dc031f7ad30c56d195/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de9a1db2ed14e0c75ffd82dc031f7ad30c56d195/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=de9a1db2ed14e0c75ffd82dc031f7ad30c56d195",
        "patch": "@@ -364,6 +364,12 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     empty_wallet();\n }\n \n+static void AddKey(CWallet& wallet, const CKey& key)\n+{\n+    LOCK(wallet.cs_wallet);\n+    wallet.AddKeyPubKey(key, key.GetPubKey());\n+}\n+\n BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n {\n     LOCK(cs_main);\n@@ -379,8 +385,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // and new block files.\n     {\n         CWallet wallet;\n-        LOCK(wallet.cs_wallet);\n-        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        AddKey(wallet, coinbaseKey);\n         BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n@@ -393,8 +398,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // file.\n     {\n         CWallet wallet;\n-        LOCK(wallet.cs_wallet);\n-        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        AddKey(wallet, coinbaseKey);\n         BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n@@ -599,8 +603,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         wallet.reset(new CWallet(std::unique_ptr<CWalletDBWrapper>(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"))));\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n-        LOCK(wallet->cs_wallet);\n-        wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        AddKey(*wallet, coinbaseKey);\n         wallet->ScanForWalletTransactions(chainActive.Genesis());\n     }\n \n@@ -635,7 +638,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n {\n     std::string coinbaseAddress = coinbaseKey.GetPubKey().GetID().ToString();\n-    LOCK(wallet->cs_wallet);\n+    LOCK2(cs_main, wallet->cs_wallet);\n \n     // Confirm ListCoins initially returns 1 coin grouped under coinbaseKey\n     // address."
      },
      {
        "sha": "ecf473a96e49fea4bba711828d335ceb3352350d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de9a1db2ed14e0c75ffd82dc031f7ad30c56d195/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de9a1db2ed14e0c75ffd82dc031f7ad30c56d195/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=de9a1db2ed14e0c75ffd82dc031f7ad30c56d195",
        "patch": "@@ -3107,13 +3107,14 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_c\n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n+    LOCK2(cs_main, cs_wallet);\n+\n     fFirstRunRet = false;\n     DBErrors nLoadWalletRet = CWalletDB(*dbw,\"cr+\").LoadWallet(this);\n     if (nLoadWalletRet == DB_NEED_REWRITE)\n     {\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n-            LOCK(cs_wallet);\n             setInternalKeyPool.clear();\n             setExternalKeyPool.clear();\n             m_pool_key_to_index.clear();"
      }
    ]
  }
]