[
  {
    "sha": "c410f415758913c933ad6c71cf50227cc85aa385",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDEwZjQxNTc1ODkxM2M5MzNhZDZjNzFjZjUwMjI3Y2M4NWFhMzg1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-07-27T21:04:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-08-27T13:34:01Z"
      },
      "message": "[tests] Remove wallet accounts test\n\nThe accounts API will be removed in the next commit. Remove all\nfunctional tests for the accounts API.",
      "tree": {
        "sha": "792361f8781164619e1464c1642dfd3383d0cba9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/792361f8781164619e1464c1642dfd3383d0cba9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c410f415758913c933ad6c71cf50227cc85aa385",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c410f415758913c933ad6c71cf50227cc85aa385",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c410f415758913c933ad6c71cf50227cc85aa385",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c410f415758913c933ad6c71cf50227cc85aa385/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51a73c98627d3beb35989dfbc779f59fd92010d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51a73c98627d3beb35989dfbc779f59fd92010d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51a73c98627d3beb35989dfbc779f59fd92010d2"
      }
    ],
    "stats": {
      "total": 263,
      "additions": 18,
      "deletions": 245
    },
    "files": [
      {
        "sha": "abfd66efade688f208f4b4b1a20c98024f5839bd",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c410f415758913c933ad6c71cf50227cc85aa385/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c410f415758913c933ad6c71cf50227cc85aa385/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=c410f415758913c933ad6c71cf50227cc85aa385",
        "patch": "@@ -96,7 +96,6 @@ BITCOIN_TESTS =\\\n \n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n-  wallet/test/accounting_tests.cpp \\\n   wallet/test/psbt_wallet_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n   wallet/test/wallet_crypto_tests.cpp \\"
      },
      {
        "sha": "79060887bed2ea738e52cf588a21114159418985",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 136,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51a73c98627d3beb35989dfbc779f59fd92010d2/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51a73c98627d3beb35989dfbc779f59fd92010d2/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=51a73c98627d3beb35989dfbc779f59fd92010d2",
        "patch": "@@ -1,136 +0,0 @@\n-// Copyright (c) 2012-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <wallet/wallet.h>\n-\n-#include <wallet/test/wallet_test_fixture.h>\n-\n-#include <stdint.h>\n-\n-#include <boost/test/unit_test.hpp>\n-\n-BOOST_FIXTURE_TEST_SUITE(accounting_tests, WalletTestingSetup)\n-\n-static void\n-GetResults(CWallet& wallet, std::map<CAmount, CAccountingEntry>& results)\n-{\n-    std::list<CAccountingEntry> aes;\n-\n-    results.clear();\n-    BOOST_CHECK(wallet.ReorderTransactions() == DBErrors::LOAD_OK);\n-    wallet.ListAccountCreditDebit(\"\", aes);\n-    for (CAccountingEntry& ae : aes)\n-    {\n-        results[ae.nOrderPos] = ae;\n-    }\n-}\n-\n-BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n-{\n-    std::vector<CWalletTx*> vpwtx;\n-    CWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n-    CAccountingEntry ae;\n-    std::map<CAmount, CAccountingEntry> results;\n-\n-    LOCK(m_wallet.cs_wallet);\n-\n-    ae.strAccount = \"\";\n-    ae.nCreditDebit = 1;\n-    ae.nTime = 1333333333;\n-    ae.strOtherAccount = \"b\";\n-    ae.strComment = \"\";\n-    m_wallet.AddAccountingEntry(ae);\n-\n-    wtx.mapValue[\"comment\"] = \"z\";\n-    m_wallet.AddToWallet(wtx);\n-    vpwtx.push_back(&m_wallet.mapWallet.at(wtx.GetHash()));\n-    vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n-    vpwtx[0]->nOrderPos = -1;\n-\n-    ae.nTime = 1333333336;\n-    ae.strOtherAccount = \"c\";\n-    m_wallet.AddAccountingEntry(ae);\n-\n-    GetResults(m_wallet, results);\n-\n-    BOOST_CHECK(m_wallet.nOrderPosNext == 3);\n-    BOOST_CHECK(2 == results.size());\n-    BOOST_CHECK(results[0].nTime == 1333333333);\n-    BOOST_CHECK(results[0].strComment.empty());\n-    BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n-    BOOST_CHECK(results[2].nTime == 1333333336);\n-    BOOST_CHECK(results[2].strOtherAccount == \"c\");\n-\n-\n-    ae.nTime = 1333333330;\n-    ae.strOtherAccount = \"d\";\n-    ae.nOrderPos = m_wallet.IncOrderPosNext();\n-    m_wallet.AddAccountingEntry(ae);\n-\n-    GetResults(m_wallet, results);\n-\n-    BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(m_wallet.nOrderPosNext == 4);\n-    BOOST_CHECK(results[0].nTime == 1333333333);\n-    BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n-    BOOST_CHECK(results[2].nTime == 1333333336);\n-    BOOST_CHECK(results[3].nTime == 1333333330);\n-    BOOST_CHECK(results[3].strComment.empty());\n-\n-\n-    wtx.mapValue[\"comment\"] = \"y\";\n-    {\n-        CMutableTransaction tx(*wtx.tx);\n-        ++tx.nLockTime;  // Just to change the hash :)\n-        wtx.SetTx(MakeTransactionRef(std::move(tx)));\n-    }\n-    m_wallet.AddToWallet(wtx);\n-    vpwtx.push_back(&m_wallet.mapWallet.at(wtx.GetHash()));\n-    vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n-\n-    wtx.mapValue[\"comment\"] = \"x\";\n-    {\n-        CMutableTransaction tx(*wtx.tx);\n-        ++tx.nLockTime;  // Just to change the hash :)\n-        wtx.SetTx(MakeTransactionRef(std::move(tx)));\n-    }\n-    m_wallet.AddToWallet(wtx);\n-    vpwtx.push_back(&m_wallet.mapWallet.at(wtx.GetHash()));\n-    vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n-    vpwtx[2]->nOrderPos = -1;\n-\n-    GetResults(m_wallet, results);\n-\n-    BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(m_wallet.nOrderPosNext == 6);\n-    BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n-    BOOST_CHECK(results[1].nTime == 1333333333);\n-    BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n-    BOOST_CHECK(results[3].nTime == 1333333336);\n-    BOOST_CHECK(results[4].nTime == 1333333330);\n-    BOOST_CHECK(results[4].strComment.empty());\n-    BOOST_CHECK(5 == vpwtx[1]->nOrderPos);\n-\n-\n-    ae.nTime = 1333333334;\n-    ae.strOtherAccount = \"e\";\n-    ae.nOrderPos = -1;\n-    m_wallet.AddAccountingEntry(ae);\n-\n-    GetResults(m_wallet, results);\n-\n-    BOOST_CHECK(results.size() == 4);\n-    BOOST_CHECK(m_wallet.nOrderPosNext == 7);\n-    BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n-    BOOST_CHECK(results[1].nTime == 1333333333);\n-    BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n-    BOOST_CHECK(results[3].nTime == 1333333336);\n-    BOOST_CHECK(results[3].strComment.empty());\n-    BOOST_CHECK(results[4].nTime == 1333333330);\n-    BOOST_CHECK(results[4].strComment.empty());\n-    BOOST_CHECK(results[5].nTime == 1333333334);\n-    BOOST_CHECK(6 == vpwtx[1]->nOrderPos);\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "01a73d9cefdf757506a502c8e216760a657d0a4d",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 18,
        "deletions": 108,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c410f415758913c933ad6c71cf50227cc85aa385/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c410f415758913c933ad6c71cf50227cc85aa385/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=c410f415758913c933ad6c71cf50227cc85aa385",
        "patch": "@@ -5,15 +5,9 @@\n \"\"\"Test label RPCs.\n \n RPCs tested are:\n-    - getaccountaddress\n-    - getaddressesbyaccount/getaddressesbylabel\n+    - getaddressesbylabel\n     - listaddressgroupings\n     - setlabel\n-    - sendfrom (with account arguments)\n-    - move (with account arguments)\n-\n-Run the test twice - once using the accounts API and once using the labels API.\n-The accounts API test can be removed in V0.18.\n \"\"\"\n from collections import defaultdict\n \n@@ -23,22 +17,11 @@\n class WalletLabelsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 2\n-        self.extra_args = [['-deprecatedrpc=accounts'], []]\n-\n-    def setup_network(self):\n-        \"\"\"Don't connect nodes.\"\"\"\n-        self.setup_nodes()\n+        self.num_nodes = 1\n \n     def run_test(self):\n-        \"\"\"Run the test twice - once using the accounts API and once using the labels API.\"\"\"\n-        self.log.info(\"Test accounts API\")\n-        self._run_subtest(True, self.nodes[0])\n-        self.log.info(\"Test labels API\")\n-        self._run_subtest(False, self.nodes[1])\n-\n-    def _run_subtest(self, accounts_api, node):\n-        # Check that there's no UTXO on any of the nodes\n+        # Check that there's no UTXO on the node\n+        node = self.nodes[0]\n         assert_equal(len(node.listunspent()), 0)\n \n         # Note each time we call generate, all generated coins go into\n@@ -61,17 +44,12 @@ def _run_subtest(self, accounts_api, node):\n             linked_addresses.add(address_group[0][0])\n \n         # send 50 from each address to a third address not in this wallet\n-        # There's some fee that will come back to us when the miner reward\n-        # matures.\n         common_address = \"msf4WtN1YQKXvNtvdFYt9JBnUD2FB41kjr\"\n-        txid = node.sendmany(\n-            fromaccount=\"\",\n+        node.sendmany(\n             amounts={common_address: 100},\n             subtractfeefrom=[common_address],\n             minconf=1,\n         )\n-        tx_details = node.gettransaction(txid)\n-        fee = -tx_details['details'][0]['fee']\n         # there should be 1 address group, with the previously\n         # unlinked addresses now linked (they both have 0 balance)\n         address_groups = node.listaddressgroupings()\n@@ -85,32 +63,22 @@ def _run_subtest(self, accounts_api, node):\n         # we want to reset so that the \"\" label has what's expected.\n         # otherwise we're off by exactly the fee amount as that's mined\n         # and matures in the next 100 blocks\n-        if accounts_api:\n-            node.sendfrom(\"\", common_address, fee)\n         amount_to_send = 1.0\n \n         # Create labels and make sure subsequent label API calls\n         # recognize the label/address associations.\n-        labels = [Label(name, accounts_api) for name in (\"a\", \"b\", \"c\", \"d\", \"e\")]\n+        labels = [Label(name) for name in (\"a\", \"b\", \"c\", \"d\", \"e\")]\n         for label in labels:\n-            if accounts_api:\n-                address = node.getaccountaddress(label.name)\n-            else:\n-                address = node.getnewaddress(label.name)\n+            address = node.getnewaddress(label.name)\n             label.add_receive_address(address)\n             label.verify(node)\n \n         # Check all labels are returned by listlabels.\n         assert_equal(node.listlabels(), [label.name for label in labels])\n \n-        # Send a transaction to each label, and make sure this forces\n-        # getaccountaddress to generate a new receiving address.\n+        # Send a transaction to each label.\n         for label in labels:\n-            if accounts_api:\n-                node.sendtoaddress(label.receive_address, amount_to_send)\n-                label.add_receive_address(node.getaccountaddress(label.name))\n-            else:\n-                node.sendtoaddress(label.addresses[0], amount_to_send)\n+            node.sendtoaddress(label.addresses[0], amount_to_send)\n             label.verify(node)\n \n         # Check the amounts received.\n@@ -120,43 +88,25 @@ def _run_subtest(self, accounts_api, node):\n                 node.getreceivedbyaddress(label.addresses[0]), amount_to_send)\n             assert_equal(node.getreceivedbylabel(label.name), amount_to_send)\n \n-        # Check that sendfrom label reduces listaccounts balances.\n         for i, label in enumerate(labels):\n             to_label = labels[(i + 1) % len(labels)]\n-            if accounts_api:\n-                node.sendfrom(label.name, to_label.receive_address, amount_to_send)\n-            else:\n-                node.sendtoaddress(to_label.addresses[0], amount_to_send)\n+            node.sendtoaddress(to_label.addresses[0], amount_to_send)\n         node.generate(1)\n         for label in labels:\n-            if accounts_api:\n-                address = node.getaccountaddress(label.name)\n-            else:\n-                address = node.getnewaddress(label.name)\n+            address = node.getnewaddress(label.name)\n             label.add_receive_address(address)\n             label.verify(node)\n             assert_equal(node.getreceivedbylabel(label.name), 2)\n-            if accounts_api:\n-                node.move(label.name, \"\", node.getbalance(label.name))\n             label.verify(node)\n         node.generate(101)\n-        expected_account_balances = {\"\": 5200}\n-        for label in labels:\n-            expected_account_balances[label.name] = 0\n-        if accounts_api:\n-            assert_equal(node.listaccounts(), expected_account_balances)\n-            assert_equal(node.getbalance(\"\"), 5200)\n \n         # Check that setlabel can assign a label to a new unused address.\n         for label in labels:\n             address = node.getnewaddress()\n             node.setlabel(address, label.name)\n             label.add_address(address)\n             label.verify(node)\n-            if accounts_api:\n-                assert address not in node.getaddressesbyaccount(\"\")\n-            else:\n-                assert_raises_rpc_error(-11, \"No addresses with label\", node.getaddressesbylabel, \"\")\n+            assert_raises_rpc_error(-11, \"No addresses with label\", node.getaddressesbylabel, \"\")\n \n         # Check that addmultisigaddress can assign labels.\n         for label in labels:\n@@ -167,35 +117,20 @@ def _run_subtest(self, accounts_api, node):\n             label.add_address(multisig_address)\n             label.purpose[multisig_address] = \"send\"\n             label.verify(node)\n-            if accounts_api:\n-                node.sendfrom(\"\", multisig_address, 50)\n         node.generate(101)\n-        if accounts_api:\n-            for label in labels:\n-                assert_equal(node.getbalance(label.name), 50)\n \n         # Check that setlabel can change the label of an address from a\n         # different label.\n-        change_label(node, labels[0].addresses[0], labels[0], labels[1], accounts_api)\n+        change_label(node, labels[0].addresses[0], labels[0], labels[1])\n \n         # Check that setlabel can set the label of an address already\n         # in the label. This is a no-op.\n-        change_label(node, labels[2].addresses[0], labels[2], labels[2], accounts_api)\n-\n-        if accounts_api:\n-            # Check that setaccount can change the label of an address which\n-            # is the receiving address of a different label.\n-            change_label(node, labels[0].receive_address, labels[0], labels[1], accounts_api)\n-\n-            # Check that setaccount can set the label of an address which is\n-            # already the receiving address of the label. This is a no-op.\n-            change_label(node, labels[2].receive_address, labels[2], labels[2], accounts_api)\n+        change_label(node, labels[2].addresses[0], labels[2], labels[2])\n \n class Label:\n-    def __init__(self, name, accounts_api):\n+    def __init__(self, name):\n         # Label name\n         self.name = name\n-        self.accounts_api = accounts_api\n         # Current receiving address associated with this label.\n         self.receive_address = None\n         # List of all addresses assigned with this label\n@@ -209,56 +144,31 @@ def add_address(self, address):\n \n     def add_receive_address(self, address):\n         self.add_address(address)\n-        if self.accounts_api:\n-            self.receive_address = address\n \n     def verify(self, node):\n         if self.receive_address is not None:\n             assert self.receive_address in self.addresses\n-            if self.accounts_api:\n-                assert_equal(node.getaccountaddress(self.name), self.receive_address)\n \n         for address in self.addresses:\n             assert_equal(\n                 node.getaddressinfo(address)['labels'][0],\n                 {\"name\": self.name,\n                  \"purpose\": self.purpose[address]})\n-            if self.accounts_api:\n-                assert_equal(node.getaccount(address), self.name)\n-            else:\n-                assert_equal(node.getaddressinfo(address)['label'], self.name)\n+            assert_equal(node.getaddressinfo(address)['label'], self.name)\n \n         assert_equal(\n             node.getaddressesbylabel(self.name),\n             {address: {\"purpose\": self.purpose[address]} for address in self.addresses})\n-        if self.accounts_api:\n-            assert_equal(set(node.getaddressesbyaccount(self.name)), set(self.addresses))\n-\n \n-def change_label(node, address, old_label, new_label, accounts_api):\n+def change_label(node, address, old_label, new_label):\n     assert_equal(address in old_label.addresses, True)\n-    if accounts_api:\n-        node.setaccount(address, new_label.name)\n-    else:\n-        node.setlabel(address, new_label.name)\n+    node.setlabel(address, new_label.name)\n \n     old_label.addresses.remove(address)\n     new_label.add_address(address)\n \n-    # Calling setaccount on an address which was previously the receiving\n-    # address of a different account should reset the receiving address of\n-    # the old account, causing getaccountaddress to return a brand new\n-    # address.\n-    if accounts_api:\n-        if old_label.name != new_label.name and address == old_label.receive_address:\n-            new_address = node.getaccountaddress(old_label.name)\n-            assert_equal(new_address not in old_label.addresses, True)\n-            assert_equal(new_address not in new_label.addresses, True)\n-            old_label.add_receive_address(new_address)\n-\n     old_label.verify(node)\n     new_label.verify(node)\n \n-\n if __name__ == '__main__':\n     WalletLabelsTest().main()"
      }
    ]
  },
  {
    "sha": "f0dc850bf698f7377797d7d68365d4fc79b0221c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGRjODUwYmY2OThmNzM3Nzc5N2Q3ZDY4MzY1ZDRmYzc5YjAyMjFj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-07-27T21:05:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-08-27T14:45:01Z"
      },
      "message": "[wallet] Remove wallet account RPCs\n\nAlso remove the RPC deprecation tests for accounts, and make one small\nchange to another wallet test that relies on account behaviour.",
      "tree": {
        "sha": "a06d60496cae97c232dfedeb20c3b82032b30b9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a06d60496cae97c232dfedeb20c3b82032b30b9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0dc850bf698f7377797d7d68365d4fc79b0221c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0dc850bf698f7377797d7d68365d4fc79b0221c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0dc850bf698f7377797d7d68365d4fc79b0221c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0dc850bf698f7377797d7d68365d4fc79b0221c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c410f415758913c933ad6c71cf50227cc85aa385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c410f415758913c933ad6c71cf50227cc85aa385",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c410f415758913c933ad6c71cf50227cc85aa385"
      }
    ],
    "stats": {
      "total": 827,
      "additions": 70,
      "deletions": 757
    },
    "files": [
      {
        "sha": "784d6416cf2f3e84f0099c720828f10d2b779e8b",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0dc850bf698f7377797d7d68365d4fc79b0221c/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0dc850bf698f7377797d7d68365d4fc79b0221c/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f0dc850bf698f7377797d7d68365d4fc79b0221c",
        "patch": "@@ -40,15 +40,11 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"settxfee\", 0, \"amount\" },\n     { \"sethdseed\", 0, \"newkeypool\" },\n     { \"getreceivedbyaddress\", 1, \"minconf\" },\n-    { \"getreceivedbyaccount\", 1, \"minconf\" },\n     { \"getreceivedbylabel\", 1, \"minconf\" },\n     { \"listreceivedbyaddress\", 0, \"minconf\" },\n     { \"listreceivedbyaddress\", 1, \"include_empty\" },\n     { \"listreceivedbyaddress\", 2, \"include_watchonly\" },\n     { \"listreceivedbyaddress\", 3, \"address_filter\" },\n-    { \"listreceivedbyaccount\", 0, \"minconf\" },\n-    { \"listreceivedbyaccount\", 1, \"include_empty\" },\n-    { \"listreceivedbyaccount\", 2, \"include_watchonly\" },\n     { \"listreceivedbylabel\", 0, \"minconf\" },\n     { \"listreceivedbylabel\", 1, \"include_empty\" },\n     { \"listreceivedbylabel\", 2, \"include_watchonly\" },\n@@ -59,15 +55,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"waitforblockheight\", 1, \"timeout\" },\n     { \"waitforblock\", 1, \"timeout\" },\n     { \"waitfornewblock\", 0, \"timeout\" },\n-    { \"move\", 2, \"amount\" },\n-    { \"move\", 3, \"minconf\" },\n-    { \"sendfrom\", 2, \"amount\" },\n-    { \"sendfrom\", 3, \"minconf\" },\n     { \"listtransactions\", 1, \"count\" },\n     { \"listtransactions\", 2, \"skip\" },\n     { \"listtransactions\", 3, \"include_watchonly\" },\n-    { \"listaccounts\", 0, \"minconf\" },\n-    { \"listaccounts\", 1, \"include_watchonly\" },\n     { \"walletpassphrase\", 1, \"timeout\" },\n     { \"getblocktemplate\", 0, \"template_request\" },\n     { \"listsinceblock\", 1, \"target_confirmations\" },"
      },
      {
        "sha": "60f14e58861e361b7dc8259c520c65140cc0dd4f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0dc850bf698f7377797d7d68365d4fc79b0221c/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0dc850bf698f7377797d7d68365d4fc79b0221c/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f0dc850bf698f7377797d7d68365d4fc79b0221c",
        "patch": "@@ -1150,7 +1150,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n             \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n-            \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n+            \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address, only allowed with internal=false\\n\"\n             \"    }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\""
      },
      {
        "sha": "e4b5ed9ad9808a05980d96722eaa8496c61ecdec",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 665,
        "changes": 731,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0dc850bf698f7377797d7d68365d4fc79b0221c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0dc850bf698f7377797d7d68365d4fc79b0221c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f0dc850bf698f7377797d7d68365d4fc79b0221c",
        "patch": "@@ -206,49 +206,6 @@ CTxDestination GetLabelDestination(CWallet* const pwallet, const std::string& la\n     return dest;\n }\n \n-static UniValue getaccountaddress(const JSONRPCRequest& request)\n-{\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n-    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n-        if (request.fHelp) {\n-            throw std::runtime_error(\"getaccountaddress (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n-        }\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"getaccountaddress is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n-    }\n-\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"getaccountaddress \\\"account\\\"\\n\"\n-            \"\\n\\nDEPRECATED. Returns the current Bitcoin address for receiving payments to this account.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"       (string, required) The account for the address. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"address\\\"          (string) The account bitcoin address\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaccountaddress\", \"\")\n-            + HelpExampleCli(\"getaccountaddress\", \"\\\"\\\"\")\n-            + HelpExampleCli(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n-            + HelpExampleRpc(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n-        );\n-\n-    LOCK2(cs_main, pwallet->cs_wallet);\n-\n-    // Parse the account first so we don't generate a key if there's an error\n-    std::string account = LabelFromValue(request.params[0]);\n-\n-    UniValue ret(UniValue::VSTR);\n-\n-    ret = EncodeDestination(GetLabelDestination(pwallet, account));\n-    return ret;\n-}\n-\n-\n static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -312,13 +269,6 @@ static UniValue setlabel(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (!IsDeprecatedRPCEnabled(\"accounts\") && request.strMethod == \"setaccount\") {\n-        if (request.fHelp) {\n-            throw std::runtime_error(\"setaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n-        }\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"setaccount is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n-    }\n-\n     if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n             \"setlabel \\\"address\\\" \\\"label\\\"\\n\"\n@@ -343,10 +293,6 @@ static UniValue setlabel(const JSONRPCRequest& request)\n \n     if (IsMine(*pwallet, dest)) {\n         pwallet->SetAddressBook(dest, label, \"receive\");\n-        if (request.strMethod == \"setaccount\" && old_label != label && dest == GetLabelDestination(pwallet, old_label)) {\n-            // for setaccount, call GetLabelDestination so a new receive address is created for the old account\n-            GetLabelDestination(pwallet, old_label, true);\n-        }\n     } else {\n         pwallet->SetAddressBook(dest, label, \"send\");\n     }\n@@ -369,100 +315,7 @@ static UniValue setlabel(const JSONRPCRequest& request)\n }\n \n \n-static UniValue getaccount(const JSONRPCRequest& request)\n-{\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n-    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n-        if (request.fHelp) {\n-            throw std::runtime_error(\"getaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n-        }\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"getaccount is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n-    }\n-\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"getaccount \\\"address\\\"\\n\"\n-            \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"         (string, required) The bitcoin address for account lookup.\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"accountname\\\"        (string) the account address\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\"\")\n-            + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\"\")\n-        );\n-\n-    LOCK2(cs_main, pwallet->cs_wallet);\n-\n-    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n-    if (!IsValidDestination(dest)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    }\n-\n-    std::string strAccount;\n-    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n-    if (mi != pwallet->mapAddressBook.end() && !(*mi).second.name.empty()) {\n-        strAccount = (*mi).second.name;\n-    }\n-    return strAccount;\n-}\n-\n-\n-static UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n-{\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n-    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n-        if (request.fHelp) {\n-            throw std::runtime_error(\"getaddressbyaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n-        }\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"getaddressesbyaccount is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n-    }\n-\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"getaddressesbyaccount \\\"account\\\"\\n\"\n-            \"\\nDEPRECATED. Returns the list of addresses for the given account.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"        (string, required) The account name.\\n\"\n-            \"\\nResult:\\n\"\n-            \"[                     (json array of string)\\n\"\n-            \"  \\\"address\\\"         (string) a bitcoin address associated with the given account\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaddressesbyaccount\", \"\\\"tabby\\\"\")\n-            + HelpExampleRpc(\"getaddressesbyaccount\", \"\\\"tabby\\\"\")\n-        );\n-\n-    LOCK2(cs_main, pwallet->cs_wallet);\n-\n-    std::string strAccount = LabelFromValue(request.params[0]);\n-\n-    // Find all addresses that have the given account\n-    UniValue ret(UniValue::VARR);\n-    for (const std::pair<const CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n-        const CTxDestination& dest = item.first;\n-        const std::string& strName = item.second.name;\n-        if (strName == strAccount) {\n-            ret.push_back(EncodeDestination(dest));\n-        }\n-    }\n-    return ret;\n-}\n-\n-static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue, std::string fromAccount)\n+static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue)\n {\n     CAmount curBalance = pwallet->GetBalance();\n \n@@ -495,7 +348,7 @@ static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, std::move(fromAccount), reservekey, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, \"\" /* account */, reservekey, g_connman.get(), state)) {\n         strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n@@ -587,7 +440,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    CTransactionRef tx = SendMoney(pwallet, dest, nAmount, fSubtractFeeFromAmount, coin_control, std::move(mapValue), {} /* fromAccount */);\n+    CTransactionRef tx = SendMoney(pwallet, dest, nAmount, fSubtractFeeFromAmount, coin_control, std::move(mapValue));\n     return tx->GetHash().GetHex();\n }\n \n@@ -789,13 +642,6 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (!IsDeprecatedRPCEnabled(\"accounts\") && request.strMethod == \"getreceivedbyaccount\") {\n-        if (request.fHelp) {\n-            throw std::runtime_error(\"getreceivedbyaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n-        }\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"getreceivedbyaccount is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n-    }\n-\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getreceivedbylabel \\\"label\\\" ( minconf )\\n\"\n@@ -863,41 +709,16 @@ static UniValue getbalance(const JSONRPCRequest& request)\n \n     if (request.fHelp || (request.params.size() > 3 ))\n         throw std::runtime_error(\n-           (IsDeprecatedRPCEnabled(\"accounts\") ? std::string(\n-            \"getbalance ( \\\"account\\\" minconf include_watchonly )\\n\"\n-            \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n-            \"The available balance is what the wallet considers currently spendable, and is\\n\"\n-            \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\"\n-            \"If account is specified (DEPRECATED), returns the balance in the account.\\n\"\n-            \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n-            \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"         (string, optional) DEPRECATED. This argument will be removed in V0.18. \\n\"\n-            \"                     To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. The account string may be given as a\\n\"\n-            \"                     specific account name to find the balance associated with wallet keys in\\n\"\n-            \"                     a named account, or as the empty string (\\\"\\\") to find the balance\\n\"\n-            \"                     associated with wallet keys not in any named account, or as \\\"*\\\" to find\\n\"\n-            \"                     the balance associated with all wallet keys regardless of account.\\n\"\n-            \"                     When this option is specified, it calculates the balance in a different\\n\"\n-            \"                     way than when it is not specified, and which can count spends twice when\\n\"\n-            \"                     there are conflicting pending transactions (such as those created by\\n\"\n-            \"                     the bumpfee command), temporarily resulting in low or even negative\\n\"\n-            \"                     balances. In general, account balance calculation is not considered\\n\"\n-            \"                     reliable and has resulted in confusing outcomes, so it is recommended to\\n\"\n-            \"                     avoid passing this argument.\\n\"\n-            \"2. minconf           (numeric, optional) Only include transactions confirmed at least this many times. \\n\"\n-            \"                     The default is 1 if an account is provided or 0 if no account is provided\\n\")\n-            : std::string(\n             \"getbalance ( \\\"(dummy)\\\" minconf include_watchonly )\\n\"\n             \"\\nReturns the total available balance.\\n\"\n             \"The available balance is what the wallet considers currently spendable, and is\\n\"\n             \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. (dummy)           (string, optional) Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\\n\"\n-            \"2. minconf           (numeric, optional, default=0) Only include transactions confirmed at least this many times.\\n\")) +\n+            \"2. minconf           (numeric, optional, default=0) Only include transactions confirmed at least this many times.\\n\"\n             \"3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n-            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n+            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nThe total amount in the wallet with 1 or more confirmations\\n\"\n             + HelpExampleCli(\"getbalance\", \"\") +\n@@ -913,13 +734,12 @@ static UniValue getbalance(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    const UniValue& account_value = request.params[0];\n+    const UniValue& dummy_value = request.params[0];\n+    if (!dummy_value.isNull() && dummy_value.get_str() != \"*\") {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"dummy first argument must be excluded or set to \\\"*\\\".\");\n+    }\n \n     int min_depth = 0;\n-    if (IsDeprecatedRPCEnabled(\"accounts\") && !account_value.isNull()) {\n-        // Default min_depth to 1 when an account is provided.\n-        min_depth = 1;\n-    }\n     if (!request.params[1].isNull()) {\n         min_depth = request.params[1].get_int();\n     }\n@@ -929,18 +749,6 @@ static UniValue getbalance(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n-    if (!account_value.isNull()) {\n-\n-        const std::string& account_param = account_value.get_str();\n-        const std::string* account = account_param != \"*\" ? &account_param : nullptr;\n-\n-        if (!IsDeprecatedRPCEnabled(\"accounts\") && account_param != \"*\") {\n-            throw JSONRPCError(RPC_METHOD_DEPRECATED, \"dummy first argument must be excluded or set to \\\"*\\\".\");\n-        } else if (IsDeprecatedRPCEnabled(\"accounts\")) {\n-            return ValueFromAmount(pwallet->GetLegacyBalance(filter, min_depth, account));\n-        }\n-    }\n-\n     return ValueFromAmount(pwallet->GetBalance(filter, min_depth));\n }\n \n@@ -968,148 +776,6 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n }\n \n \n-static UniValue movecmd(const JSONRPCRequest& request)\n-{\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n-    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n-        if (request.fHelp) {\n-            throw std::runtime_error(\"move (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n-        }\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"move is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n-    }\n-\n-    if (request.fHelp || request.params.size() < 3 || request.params.size() > 5)\n-        throw std::runtime_error(\n-            \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n-            \"\\nDEPRECATED. Move a specified amount from one account in your wallet to another.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"fromaccount\\\"   (string, required) The name of the account to move funds from. May be the default account using \\\"\\\".\\n\"\n-            \"2. \\\"toaccount\\\"     (string, required) The name of the account to move funds to. May be the default account using \\\"\\\".\\n\"\n-            \"3. amount            (numeric) Quantity of \" + CURRENCY_UNIT + \" to move between accounts.\\n\"\n-            \"4. (dummy)           (numeric, optional) Ignored. Remains for backward compatibility.\\n\"\n-            \"5. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n-            \"\\nResult:\\n\"\n-            \"true|false           (boolean) true if successful.\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nMove 0.01 \" + CURRENCY_UNIT + \" from the default account to the account named tabby\\n\"\n-            + HelpExampleCli(\"move\", \"\\\"\\\" \\\"tabby\\\" 0.01\") +\n-            \"\\nMove 0.01 \" + CURRENCY_UNIT + \" timotei to akiko with a comment and funds have 6 confirmations\\n\"\n-            + HelpExampleCli(\"move\", \"\\\"timotei\\\" \\\"akiko\\\" 0.01 6 \\\"happy birthday!\\\"\") +\n-            \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n-        );\n-\n-    LOCK2(cs_main, pwallet->cs_wallet);\n-\n-    std::string strFrom = LabelFromValue(request.params[0]);\n-    std::string strTo = LabelFromValue(request.params[1]);\n-    CAmount nAmount = AmountFromValue(request.params[2]);\n-    if (nAmount <= 0)\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-    if (!request.params[3].isNull())\n-        // unused parameter, used to be nMinDepth, keep type-checking it though\n-        (void)request.params[3].get_int();\n-    std::string strComment;\n-    if (!request.params[4].isNull())\n-        strComment = request.params[4].get_str();\n-\n-    if (!pwallet->AccountMove(strFrom, strTo, nAmount, strComment)) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n-    }\n-\n-    return true;\n-}\n-\n-\n-static UniValue sendfrom(const JSONRPCRequest& request)\n-{\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n-    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n-        if (request.fHelp) {\n-            throw std::runtime_error(\"sendfrom (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n-        }\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"sendfrom is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n-    }\n-\n-\n-    if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n-        throw std::runtime_error(\n-            \"sendfrom \\\"fromaccount\\\" \\\"toaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment_to\\\" )\\n\"\n-            \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n-            \"                       Specifying an account does not influence coin selection, but it does associate the newly created\\n\"\n-            \"                       transaction with the account, so the account's balance computation and transaction history can reflect\\n\"\n-            \"                       the spend.\\n\"\n-            \"2. \\\"toaddress\\\"         (string, required) The bitcoin address to send funds to.\\n\"\n-            \"3. amount                (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" (transaction fee is added on top).\\n\"\n-            \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n-            \"5. \\\"comment\\\"           (string, optional) A comment used to store what the transaction is for. \\n\"\n-            \"                                     This is not part of the transaction, just kept in your wallet.\\n\"\n-            \"6. \\\"comment_to\\\"        (string, optional) An optional comment to store the name of the person or organization \\n\"\n-            \"                                     to which you're sending the transaction. This is not part of the transaction, \\n\"\n-            \"                                     it is just kept in your wallet.\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\\"txid\\\"                 (string) The transaction id.\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nSend 0.01 \" + CURRENCY_UNIT + \" from the default account to the address, must have at least 1 confirmation\\n\"\n-            + HelpExampleCli(\"sendfrom\", \"\\\"\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01\") +\n-            \"\\nSend 0.01 from the tabby account to the given address, funds must have at least 6 confirmations\\n\"\n-            + HelpExampleCli(\"sendfrom\", \"\\\"tabby\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01 6 \\\"donation\\\" \\\"seans outpost\\\"\") +\n-            \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"sendfrom\", \"\\\"tabby\\\", \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.01, 6, \\\"donation\\\", \\\"seans outpost\\\"\")\n-        );\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK2(cs_main, pwallet->cs_wallet);\n-\n-    std::string strAccount = LabelFromValue(request.params[0]);\n-    CTxDestination dest = DecodeDestination(request.params[1].get_str());\n-    if (!IsValidDestination(dest)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    }\n-    CAmount nAmount = AmountFromValue(request.params[2]);\n-    if (nAmount <= 0)\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-    int nMinDepth = 1;\n-    if (!request.params[3].isNull())\n-        nMinDepth = request.params[3].get_int();\n-\n-    mapValue_t mapValue;\n-    if (!request.params[4].isNull() && !request.params[4].get_str().empty())\n-        mapValue[\"comment\"] = request.params[4].get_str();\n-    if (!request.params[5].isNull() && !request.params[5].get_str().empty())\n-        mapValue[\"to\"] = request.params[5].get_str();\n-\n-    EnsureWalletIsUnlocked(pwallet);\n-\n-    // Check funds\n-    CAmount nBalance = pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, &strAccount);\n-    if (nAmount > nBalance)\n-        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n-\n-    CCoinControl no_coin_control; // This is a deprecated API\n-    CTransactionRef tx = SendMoney(pwallet, dest, nAmount, false, no_coin_control, std::move(mapValue), std::move(strAccount));\n-    return tx->GetHash().GetHex();\n-}\n-\n-\n static UniValue sendmany(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -1119,12 +785,10 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    std::string help_text;\n-    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n-        help_text = \"sendmany \\\"\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n+        throw std::runtime_error(\n+            \"sendmany \\\"\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\\n\"\n-            \"Note that the \\\"fromaccount\\\" argument has been removed in V0.17. To use this RPC with a \\\"fromaccount\\\" argument, restart\\n\"\n-            \"bitcoind with -deprecatedrpc=accounts\\n\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"dummy\\\"               (string, required) Must be set to \\\"\\\" for backwards compatibility.\\n\"\n@@ -1160,49 +824,8 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\");\n-    } else {\n-        help_text = \"sendmany \\\"\\\" \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n-            \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n-            \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n-            \"    {\\n\"\n-            \"      \\\"address\\\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\\n\"\n-            \"      ,...\\n\"\n-            \"    }\\n\"\n-            \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n-            \"4. \\\"comment\\\"             (string, optional) A comment\\n\"\n-            \"5. subtractfeefrom         (array, optional) A json array with addresses.\\n\"\n-            \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n-            \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-            \"                           If no addresses are specified here, the sender pays the fee.\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"          (string) Subtract fee from this address\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\\n\"\n-            \"7. conf_target            (numeric, optional) Confirmation target (in blocks)\\n\"\n-            \"8. \\\"estimate_mode\\\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n-            \"       \\\"UNSET\\\"\\n\"\n-            \"       \\\"ECONOMICAL\\\"\\n\"\n-            \"       \\\"CONSERVATIVE\\\"\\n\"\n-             \"\\nResult:\\n\"\n-            \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n-            \"                                    the number of addresses.\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nSend two amounts to two different addresses:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n-            \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n-            \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n-            \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\");\n-    }\n-\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8) throw std::runtime_error(help_text);\n+            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\")\n+        );\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1214,10 +837,9 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n-    if (!IsDeprecatedRPCEnabled(\"accounts\") && !request.params[0].get_str().empty()) {\n+    if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"\\\"\");\n     }\n-    std::string strAccount = LabelFromValue(request.params[0]);\n     UniValue sendTo = request.params[1].get_obj();\n     int nMinDepth = 1;\n     if (!request.params[2].isNull())\n@@ -1282,9 +904,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     EnsureWalletIsUnlocked(pwallet);\n \n     // Check funds\n-    if (IsDeprecatedRPCEnabled(\"accounts\") && totalAmount > pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, &strAccount)) {\n-        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n-    } else if (!IsDeprecatedRPCEnabled(\"accounts\") && totalAmount > pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, nullptr)) {\n+    if (totalAmount > pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth, nullptr)) {\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Wallet has insufficient funds\");\n     }\n \n@@ -1301,7 +921,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, std::move(strAccount), keyChange, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, \"\" /* account */, keyChange, g_connman.get(), state)) {\n         strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n@@ -1635,7 +1255,6 @@ static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bo\n             if(fIsWatchonly)\n                 obj.pushKV(\"involvesWatchonly\", true);\n             obj.pushKV(\"address\",       EncodeDestination(address));\n-            obj.pushKV(\"account\",       label);\n             obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n             obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             obj.pushKV(\"label\", label);\n@@ -1661,7 +1280,6 @@ static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bo\n             UniValue obj(UniValue::VOBJ);\n             if (entry.second.fIsWatchonly)\n                 obj.pushKV(\"involvesWatchonly\", true);\n-            obj.pushKV(\"account\",       entry.first);\n             obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n             obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             obj.pushKV(\"label\",         entry.first);\n@@ -1695,7 +1313,6 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             \"  {\\n\"\n             \"    \\\"involvesWatchonly\\\" : true,        (bool) Only returned if imported addresses were involved in transaction\\n\"\n             \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n-            \"    \\\"account\\\" : \\\"accountname\\\",       (string) DEPRECATED. Backwards compatible alias for label.\\n\"\n             \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n             \"    \\\"confirmations\\\" : n,               (numeric) The number of confirmations of the most recent transaction included\\n\"\n             \"    \\\"label\\\" : \\\"label\\\",               (string) The label of the receiving address. The default label is \\\"\\\".\\n\"\n@@ -1732,13 +1349,6 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (!IsDeprecatedRPCEnabled(\"accounts\") && request.strMethod == \"listreceivedbyaccount\") {\n-        if (request.fHelp) {\n-            throw std::runtime_error(\"listreceivedbyaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n-        }\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"listreceivedbyaccount is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n-    }\n-\n     if (request.fHelp || request.params.size() > 3)\n         throw std::runtime_error(\n             \"listreceivedbylabel ( minconf include_empty include_watchonly)\\n\"\n@@ -1752,7 +1362,6 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"involvesWatchonly\\\" : true,   (bool) Only returned if imported addresses were involved in transaction\\n\"\n-            \"    \\\"account\\\" : \\\"accountname\\\",  (string) DEPRECATED. Backwards compatible alias for label.\\n\"\n             \"    \\\"amount\\\" : x.xxx,             (numeric) The total amount received by addresses with this label\\n\"\n             \"    \\\"confirmations\\\" : n,          (numeric) The number of confirmations of the most recent transaction included\\n\"\n             \"    \\\"label\\\" : \\\"label\\\"           (string) The label of the receiving address. The default label is \\\"\\\".\\n\"\n@@ -1787,34 +1396,31 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  *\n  * @param  pwallet    The wallet.\n  * @param  wtx        The wallet transaction.\n- * @param  strAccount The account, if any, or \"*\" for all.\n  * @param  nMinDepth  The minimum confirmation depth.\n  * @param  fLong      Whether to include the JSON version of the transaction.\n  * @param  ret        The UniValue into which the result is stored.\n  * @param  filter     The \"is mine\" filter bool.\n  */\n-static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CAmount nFee;\n-    std::string strSentAccount;\n+    std::string dummy_account;\n     std::list<COutputEntry> listReceived;\n     std::list<COutputEntry> listSent;\n \n-    wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, filter);\n+    wtx.GetAmounts(listReceived, listSent, nFee, dummy_account, filter);\n \n-    bool fAllAccounts = (strAccount == std::string(\"*\"));\n     bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n \n     // Sent\n-    if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n+    if ((!listSent.empty() || nFee != 0))\n     {\n         for (const COutputEntry& s : listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n             if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n                 entry.pushKV(\"involvesWatchonly\", true);\n             }\n-            if (IsDeprecatedRPCEnabled(\"accounts\")) entry.pushKV(\"account\", strSentAccount);\n             MaybePushAddress(entry, s.destination);\n             entry.pushKV(\"category\", \"send\");\n             entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n@@ -1835,61 +1441,40 @@ static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const\n     {\n         for (const COutputEntry& r : listReceived)\n         {\n-            std::string account;\n+            std::string label;\n             if (pwallet->mapAddressBook.count(r.destination)) {\n-                account = pwallet->mapAddressBook[r.destination].name;\n+                label = pwallet->mapAddressBook[r.destination].name;\n             }\n-            if (fAllAccounts || (account == strAccount))\n+            UniValue entry(UniValue::VOBJ);\n+            if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, r.destination);\n+            if (wtx.IsCoinBase())\n             {\n-                UniValue entry(UniValue::VOBJ);\n-                if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n-                    entry.pushKV(\"involvesWatchonly\", true);\n-                }\n-                if (IsDeprecatedRPCEnabled(\"accounts\")) entry.pushKV(\"account\", account);\n-                MaybePushAddress(entry, r.destination);\n-                if (wtx.IsCoinBase())\n-                {\n-                    if (wtx.GetDepthInMainChain() < 1)\n-                        entry.pushKV(\"category\", \"orphan\");\n-                    else if (wtx.IsImmatureCoinBase())\n-                        entry.pushKV(\"category\", \"immature\");\n-                    else\n-                        entry.pushKV(\"category\", \"generate\");\n-                }\n+                if (wtx.GetDepthInMainChain() < 1)\n+                    entry.pushKV(\"category\", \"orphan\");\n+                else if (wtx.IsImmatureCoinBase())\n+                    entry.pushKV(\"category\", \"immature\");\n                 else\n-                {\n-                    entry.pushKV(\"category\", \"receive\");\n-                }\n-                entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n-                if (pwallet->mapAddressBook.count(r.destination)) {\n-                    entry.pushKV(\"label\", account);\n-                }\n-                entry.pushKV(\"vout\", r.vout);\n-                if (fLong)\n-                    WalletTxToJSON(wtx, entry);\n-                ret.push_back(entry);\n+                    entry.pushKV(\"category\", \"generate\");\n+            }\n+            else\n+            {\n+                entry.pushKV(\"category\", \"receive\");\n+            }\n+            entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n+                entry.pushKV(\"label\", label);\n             }\n+            entry.pushKV(\"vout\", r.vout);\n+            if (fLong)\n+                WalletTxToJSON(wtx, entry);\n+            ret.push_back(entry);\n         }\n     }\n }\n \n-static void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccount, UniValue& ret)\n-{\n-    bool fAllAccounts = (strAccount == std::string(\"*\"));\n-\n-    if (fAllAccounts || acentry.strAccount == strAccount)\n-    {\n-        UniValue entry(UniValue::VOBJ);\n-        entry.pushKV(\"account\", acentry.strAccount);\n-        entry.pushKV(\"category\", \"move\");\n-        entry.pushKV(\"time\", acentry.nTime);\n-        entry.pushKV(\"amount\", ValueFromAmount(acentry.nCreditDebit));\n-        if (IsDeprecatedRPCEnabled(\"accounts\")) entry.pushKV(\"otheraccount\", acentry.strOtherAccount);\n-        entry.pushKV(\"comment\", acentry.strComment);\n-        ret.push_back(entry);\n-    }\n-}\n-\n UniValue listtransactions(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -1899,12 +1484,10 @@ UniValue listtransactions(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    std::string help_text {};\n-    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n-        help_text = \"listtransactions (dummy count skip include_watchonly)\\n\"\n-            \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n-            \"Note that the \\\"account\\\" argument and \\\"otheraccount\\\" return value have been removed in V0.17. To use this RPC with an \\\"account\\\" argument, restart\\n\"\n-            \"bitcoind with -deprecatedrpc=accounts\\n\"\n+    if (request.fHelp || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"listtransactions (dummy count skip include_watchonly)\\n\"\n+            \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"dummy\\\"    (string, optional) If set, should be \\\"*\\\" for backwards compatibility.\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n@@ -1944,77 +1527,15 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             \"\\nList transactions 100 to 120\\n\"\n             + HelpExampleCli(\"listtransactions\", \"\\\"*\\\" 20 100\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\");\n-    } else {\n-        help_text = \"listtransactions ( \\\"account\\\" count skip include_watchonly)\\n\"\n-            \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"    (string, optional) DEPRECATED. This argument will be removed in V0.18. The account name. Should be \\\"*\\\".\\n\"\n-            \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n-            \"3. skip           (numeric, optional, default=0) The number of transactions to skip\\n\"\n-            \"4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n-            \"\\nResult:\\n\"\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. This field will be removed in V0.18. The account name associated with the transaction. \\n\"\n-            \"                                                It will be \\\"\\\" for the default account.\\n\"\n-            \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction. Not present for \\n\"\n-            \"                                                move transactions (category = move).\\n\"\n-            \"    \\\"category\\\":\\\"send|receive|move\\\", (string) The transaction category. 'move' is a local (off blockchain)\\n\"\n-            \"                                                transaction between accounts, and not associated with an address,\\n\"\n-            \"                                                transaction id or block. 'send' and 'receive' transactions are \\n\"\n-            \"                                                associated with an address, transaction id and block details\\n\"\n-            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the\\n\"\n-            \"                                         'move' category for moves outbound. It is positive for the 'receive' category,\\n\"\n-            \"                                         and for the 'move' category for inbound funds.\\n\"\n-            \"    \\\"label\\\": \\\"label\\\",       (string) A comment for the address/transaction, if any\\n\"\n-            \"    \\\"vout\\\": n,                (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n-            \"                                         'send' category of transactions.\\n\"\n-            \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n-            \"                                         'receive' category of transactions. Negative confirmations indicate the\\n\"\n-            \"                                         transaction conflicts with the block chain\\n\"\n-            \"    \\\"trusted\\\": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.\\n\"\n-            \"    \\\"blockhash\\\": \\\"hashvalue\\\", (string) The block hash containing the transaction. Available for 'send' and 'receive'\\n\"\n-            \"                                          category of transactions.\\n\"\n-            \"    \\\"blockindex\\\": n,          (numeric) The index of the transaction in the block that includes it. Available for 'send' and 'receive'\\n\"\n-            \"                                          category of transactions.\\n\"\n-            \"    \\\"blocktime\\\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n-            \"    \\\"txid\\\": \\\"transactionid\\\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.\\n\"\n-            \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n-            \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \\n\"\n-            \"                                          for 'send' and 'receive' category of transactions.\\n\"\n-            \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n-            \"    \\\"otheraccount\\\": \\\"accountname\\\",  (string) DEPRECATED. This field will be removed in V0.18. For the 'move' category of transactions, the account the funds came \\n\"\n-            \"                                          from (for receiving funds, positive amounts), or went to (for sending funds,\\n\"\n-            \"                                          negative amounts).\\n\"\n-            \"    \\\"bip125-replaceable\\\": \\\"yes|no|unknown\\\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n-            \"                                                     may be unknown for unconfirmed transactions not in the mempool\\n\"\n-            \"    \\\"abandoned\\\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n-            \"                                         'send' category of transactions.\\n\"\n-            \"  }\\n\"\n-            \"]\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            \"\\nList the most recent 10 transactions in the systems\\n\"\n-            + HelpExampleCli(\"listtransactions\", \"\") +\n-            \"\\nList transactions 100 to 120\\n\"\n-            + HelpExampleCli(\"listtransactions\", \"\\\"*\\\" 20 100\") +\n-            \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\");\n-    }\n-    if (request.fHelp || request.params.size() > 4) throw std::runtime_error(help_text);\n+            + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n+        );\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    std::string strAccount = \"*\";\n-    if (!request.params[0].isNull()) {\n-        strAccount = request.params[0].get_str();\n-        if (!IsDeprecatedRPCEnabled(\"accounts\") && strAccount != \"*\") {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"*\\\"\");\n-        }\n+    if (!request.params[0].isNull() && request.params[0].get_str() != \"*\") {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"*\\\"\");\n     }\n     int nCount = 10;\n     if (!request.params[1].isNull())\n@@ -2043,13 +1564,9 @@ UniValue listtransactions(const JSONRPCRequest& request)\n         for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n         {\n             CWalletTx *const pwtx = (*it).second.first;\n-            if (pwtx != nullptr)\n-                ListTransactions(pwallet, *pwtx, strAccount, 0, true, ret, filter);\n-            if (IsDeprecatedRPCEnabled(\"accounts\")) {\n-                CAccountingEntry *const pacentry = (*it).second.second;\n-                if (pacentry != nullptr) AcentryToJSON(*pacentry, strAccount, ret);\n+            if (pwtx != nullptr) {\n+                ListTransactions(pwallet, *pwtx, 0, true, ret, filter);\n             }\n-\n             if ((int)ret.size() >= (nCount+nFrom)) break;\n         }\n     }\n@@ -2080,101 +1597,6 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static UniValue listaccounts(const JSONRPCRequest& request)\n-{\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n-    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n-        if (request.fHelp) {\n-            throw std::runtime_error(\"listaccounts (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n-        }\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"listaccounts is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n-    }\n-\n-    if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"listaccounts ( minconf include_watchonly)\\n\"\n-            \"\\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations\\n\"\n-            \"2. include_watchonly   (bool, optional, default=false) Include balances in watch-only addresses (see 'importaddress')\\n\"\n-            \"\\nResult:\\n\"\n-            \"{                      (json object where keys are account names, and values are numeric balances\\n\"\n-            \"  \\\"account\\\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.\\n\"\n-            \"  ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nList account balances where there at least 1 confirmation\\n\"\n-            + HelpExampleCli(\"listaccounts\", \"\") +\n-            \"\\nList account balances including zero confirmation transactions\\n\"\n-            + HelpExampleCli(\"listaccounts\", \"0\") +\n-            \"\\nList account balances for 6 or more confirmations\\n\"\n-            + HelpExampleCli(\"listaccounts\", \"6\") +\n-            \"\\nAs json rpc call\\n\"\n-            + HelpExampleRpc(\"listaccounts\", \"6\")\n-        );\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK2(cs_main, pwallet->cs_wallet);\n-\n-    int nMinDepth = 1;\n-    if (!request.params[0].isNull())\n-        nMinDepth = request.params[0].get_int();\n-    isminefilter includeWatchonly = ISMINE_SPENDABLE;\n-    if(!request.params[1].isNull())\n-        if(request.params[1].get_bool())\n-            includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n-\n-    std::map<std::string, CAmount> mapAccountBalances;\n-    for (const std::pair<const CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n-        if (IsMine(*pwallet, entry.first) & includeWatchonly) {  // This address belongs to me\n-            mapAccountBalances[entry.second.name] = 0;\n-        }\n-    }\n-\n-    for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n-        const CWalletTx& wtx = pairWtx.second;\n-        CAmount nFee;\n-        std::string strSentAccount;\n-        std::list<COutputEntry> listReceived;\n-        std::list<COutputEntry> listSent;\n-        int nDepth = wtx.GetDepthInMainChain();\n-        if (wtx.IsImmatureCoinBase() || nDepth < 0)\n-            continue;\n-        wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, includeWatchonly);\n-        mapAccountBalances[strSentAccount] -= nFee;\n-        for (const COutputEntry& s : listSent)\n-            mapAccountBalances[strSentAccount] -= s.amount;\n-        if (nDepth >= nMinDepth)\n-        {\n-            for (const COutputEntry& r : listReceived)\n-                if (pwallet->mapAddressBook.count(r.destination)) {\n-                    mapAccountBalances[pwallet->mapAddressBook[r.destination].name] += r.amount;\n-                }\n-                else\n-                    mapAccountBalances[\"\"] += r.amount;\n-        }\n-    }\n-\n-    const std::list<CAccountingEntry>& acentries = pwallet->laccentries;\n-    for (const CAccountingEntry& entry : acentries)\n-        mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n-\n-    UniValue ret(UniValue::VOBJ);\n-    for (const std::pair<const std::string, CAmount>& accountBalance : mapAccountBalances) {\n-        ret.pushKV(accountBalance.first, ValueFromAmount(accountBalance.second));\n-    }\n-    return ret;\n-}\n-\n static UniValue listsinceblock(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -2199,7 +1621,6 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n-            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n             \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n@@ -2282,7 +1703,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n         CWalletTx tx = pairWtx.second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth) {\n-            ListTransactions(pwallet, tx, \"*\", 0, true, transactions, filter);\n+            ListTransactions(pwallet, tx, 0, true, transactions, filter);\n         }\n     }\n \n@@ -2299,7 +1720,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n             if (it != pwallet->mapWallet.end()) {\n                 // We want all transactions regardless of confirmation count to appear here,\n                 // even negative confirmation ones, hence the big negative.\n-                ListTransactions(pwallet, it->second, \"*\", -100000000, true, removed, filter);\n+                ListTransactions(pwallet, it->second, -100000000, true, removed, filter);\n             }\n         }\n         paltindex = paltindex->pprev;\n@@ -2348,7 +1769,6 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n             \"                                                   may be unknown for unconfirmed transactions not in the mempool\\n\"\n             \"  \\\"details\\\" : [\\n\"\n             \"    {\\n\"\n-            \"      \\\"account\\\" : \\\"accountname\\\",      (string) DEPRECATED. This field will be removed in a V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n             \"      \\\"address\\\" : \\\"address\\\",          (string) The bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n             \"      \\\"amount\\\" : x.xxx,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n@@ -2403,7 +1823,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     WalletTxToJSON(wtx, entry);\n \n     UniValue details(UniValue::VARR);\n-    ListTransactions(pwallet, wtx, \"*\", 0, false, details, filter);\n+    ListTransactions(pwallet, wtx, 0, false, details, filter);\n     entry.pushKV(\"details\", details);\n \n     std::string strHex = EncodeHexTx(*wtx.tx, RPCSerializationFlags());\n@@ -3326,7 +2746,6 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n             \"    \\\"address\\\" : \\\"address\\\",    (string) the bitcoin address\\n\"\n             \"    \\\"label\\\" : \\\"label\\\",        (string) The associated label, or \\\"\\\" for the default label\\n\"\n-            \"    \\\"account\\\" : \\\"account\\\",    (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n@@ -3434,9 +2853,6 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             auto i = pwallet->mapAddressBook.find(address);\n             if (i != pwallet->mapAddressBook.end()) {\n                 entry.pushKV(\"label\", i->second.name);\n-                if (IsDeprecatedRPCEnabled(\"accounts\")) {\n-                    entry.pushKV(\"account\", i->second.name);\n-                }\n             }\n \n             if (scriptPubKey.IsPayToScriptHash()) {\n@@ -4175,10 +3591,9 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"    ]\\n\"\n             \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdseedid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n+            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdseedid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\").\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n-            \"  \\\"label\\\" :  \\\"label\\\"         (string) The label associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"label\\\" :  \\\"label\\\"         (string) The label associated with the address, \\\"\\\" is the default label\\n\"\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"      (string, optional) The Hash160 of the HD seed\\n\"\n@@ -4220,9 +3635,6 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     ret.pushKVs(detail);\n     if (pwallet->mapAddressBook.count(dest)) {\n         ret.pushKV(\"label\", pwallet->mapAddressBook[dest].name);\n-        if (IsDeprecatedRPCEnabled(\"accounts\")) {\n-            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n-        }\n     }\n     const CKeyMetadata* meta = nullptr;\n     CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n@@ -4775,7 +4187,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n     { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n     { \"wallet\",             \"abortrescan\",                      &abortrescan,                   {} },\n-    { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label|account\",\"address_type\"} },\n+    { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"hidden\",             \"addwitnessaddress\",                &addwitnessaddress,             {\"address\",\"p2sh\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n@@ -4784,8 +4196,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n     { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n-    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account|dummy\",\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"label|account\",\"address_type\"} },\n+    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"dummy\",\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"label\",\"address_type\"} },\n     { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n     { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n     { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\"} },\n@@ -4802,12 +4214,12 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n     { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n     { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n-    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account|dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n     { \"wallet\",             \"loadwallet\",                       &loadwallet,                    {\"filename\"} },\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n-    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount|dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n     { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n     { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n@@ -4820,17 +4232,6 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n     { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n \n-    /** Account functions (deprecated) */\n-    { \"wallet\",             \"getaccountaddress\",                &getaccountaddress,             {\"account\"} },\n-    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n-    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n-    { \"wallet\",             \"getreceivedbyaccount\",             &getreceivedbylabel,            {\"account\",\"minconf\"} },\n-    { \"wallet\",             \"listaccounts\",                     &listaccounts,                  {\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"setaccount\",                       &setlabel,                      {\"address\",\"account\"} },\n-    { \"wallet\",             \"sendfrom\",                         &sendfrom,                      {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"move\",                             &movecmd,                       {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n-\n     /** Label functions (to replace non-balance account functions) */\n     { \"wallet\",             \"getaddressesbylabel\",              &getaddressesbylabel,           {\"label\"} },\n     { \"wallet\",             \"getreceivedbylabel\",               &getreceivedbylabel,            {\"label\",\"minconf\"} },"
      },
      {
        "sha": "15062680de5f49b5fa74bd49c18a211f179ea00e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0dc850bf698f7377797d7d68365d4fc79b0221c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0dc850bf698f7377797d7d68365d4fc79b0221c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f0dc850bf698f7377797d7d68365d4fc79b0221c",
        "patch": "@@ -302,7 +302,7 @@ class CWalletTx : public CMerkleTx\n      * serialized in the wallet database:\n      *\n      *     \"comment\", \"to\"   - comment strings provided to sendtoaddress,\n-     *                         sendfrom, sendmany wallet RPCs\n+     *                         and sendmany wallet RPCs\n      *     \"replaces_txid\"   - txid (as HexStr) of transaction replaced by\n      *                         bumpfee on transaction created by bumpfee\n      *     \"replaced_by_txid\" - txid (as HexStr) of transaction created by"
      },
      {
        "sha": "32088fe3e1d1f322aaac470891d71e67677eee44",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 1,
        "deletions": 79,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0dc850bf698f7377797d7d68365d4fc79b0221c/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0dc850bf698f7377797d7d68365d4fc79b0221c/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=f0dc850bf698f7377797d7d68365d4fc79b0221c",
        "patch": "@@ -4,13 +4,12 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_raises_rpc_error\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], [\"-deprecatedrpc=validateaddress\", \"-deprecatedrpc=accounts\"]]\n+        self.extra_args = [[], [\"-deprecatedrpc=validateaddress\"]]\n \n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n@@ -27,82 +26,5 @@ def run_test(self):\n         not_dep_val = self.nodes[1].validateaddress(SOME_ADDRESS)\n         assert \"ismine\" in not_dep_val\n \n-        self.log.info(\"Test accounts deprecation\")\n-        # The following account RPC methods are deprecated:\n-        # - getaccount\n-        # - getaccountaddress\n-        # - getaddressesbyaccount\n-        # - getreceivedbyaccount\n-        # - listaccouts\n-        # - listreceivedbyaccount\n-        # - move\n-        # - setaccount\n-        #\n-        # The following 'label' RPC methods are usable both with and without the\n-        # -deprecatedrpc=accounts switch enabled.\n-        # - getaddressesbylabel\n-        # - getreceivedbylabel\n-        # - listlabels\n-        # - listreceivedbylabel\n-        # - setlabel\n-        #\n-        address0 = self.nodes[0].getnewaddress()\n-        self.nodes[0].generatetoaddress(101, address0)\n-        self.sync_all()\n-        address1 = self.nodes[1].getnewaddress()\n-        self.nodes[1].generatetoaddress(101, address1)\n-\n-        self.log.info(\"- getaccount\")\n-        assert_raises_rpc_error(-32, \"getaccount is deprecated\", self.nodes[0].getaccount, address0)\n-        self.nodes[1].getaccount(address1)\n-\n-        self.log.info(\"- setaccount\")\n-        assert_raises_rpc_error(-32, \"setaccount is deprecated\", self.nodes[0].setaccount, address0, \"label0\")\n-        self.nodes[1].setaccount(address1, \"label1\")\n-\n-        self.log.info(\"- setlabel\")\n-        self.nodes[0].setlabel(address0, \"label0\")\n-        self.nodes[1].setlabel(address1, \"label1\")\n-\n-        self.log.info(\"- getaccountaddress\")\n-        assert_raises_rpc_error(-32, \"getaccountaddress is deprecated\", self.nodes[0].getaccountaddress, \"label0\")\n-        self.nodes[1].getaccountaddress(\"label1\")\n-\n-        self.log.info(\"- getaddressesbyaccount\")\n-        assert_raises_rpc_error(-32, \"getaddressesbyaccount is deprecated\", self.nodes[0].getaddressesbyaccount, \"label0\")\n-        self.nodes[1].getaddressesbyaccount(\"label1\")\n-\n-        self.log.info(\"- getaddressesbylabel\")\n-        self.nodes[0].getaddressesbylabel(\"label0\")\n-        self.nodes[1].getaddressesbylabel(\"label1\")\n-\n-        self.log.info(\"- getreceivedbyaccount\")\n-        assert_raises_rpc_error(-32, \"getreceivedbyaccount is deprecated\", self.nodes[0].getreceivedbyaccount, \"label0\")\n-        self.nodes[1].getreceivedbyaccount(\"label1\")\n-\n-        self.log.info(\"- getreceivedbylabel\")\n-        self.nodes[0].getreceivedbylabel(\"label0\")\n-        self.nodes[1].getreceivedbylabel(\"label1\")\n-\n-        self.log.info(\"- listaccounts\")\n-        assert_raises_rpc_error(-32, \"listaccounts is deprecated\", self.nodes[0].listaccounts)\n-        self.nodes[1].listaccounts()\n-\n-        self.log.info(\"- listlabels\")\n-        self.nodes[0].listlabels()\n-        self.nodes[1].listlabels()\n-\n-        self.log.info(\"- listreceivedbyaccount\")\n-        assert_raises_rpc_error(-32, \"listreceivedbyaccount is deprecated\", self.nodes[0].listreceivedbyaccount)\n-        self.nodes[1].listreceivedbyaccount()\n-\n-        self.log.info(\"- listreceivedbylabel\")\n-        self.nodes[0].listreceivedbylabel()\n-        self.nodes[1].listreceivedbylabel()\n-\n-        self.log.info(\"- move\")\n-        assert_raises_rpc_error(-32, \"move is deprecated\", self.nodes[0].move, \"label0\", \"label0b\", 10)\n-        self.nodes[1].move(\"label1\", \"label1b\", 10)\n-\n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      },
      {
        "sha": "30851893b8be80254f01c3a0ffd3f716bdcdce49",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0dc850bf698f7377797d7d68365d4fc79b0221c/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0dc850bf698f7377797d7d68365d4fc79b0221c/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=f0dc850bf698f7377797d7d68365d4fc79b0221c",
        "patch": "@@ -143,7 +143,7 @@ def test_address(self, node, address, multisig, typ):\n             assert(False)\n \n     def test_change_output_type(self, node_sender, destinations, expected_type):\n-        txid = self.nodes[node_sender].sendmany(fromaccount=\"\", amounts=dict.fromkeys(destinations, 0.001))\n+        txid = self.nodes[node_sender].sendmany(dummy=\"\", amounts=dict.fromkeys(destinations, 0.001))\n         raw_tx = self.nodes[node_sender].getrawtransaction(txid)\n         tx = self.nodes[node_sender].decoderawtransaction(raw_tx)\n "
      }
    ]
  },
  {
    "sha": "1f4b865e57b4567270b1586bb1f348ab9106485d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjRiODY1ZTU3YjQ1NjcyNzBiMTU4NmJiMWYzNDhhYjkxMDY0ODVk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-07-27T21:06:16Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-08-27T14:45:03Z"
      },
      "message": "[wallet] Re-sort wallet RPC commands\n\nThis wasn't done in previous commit to make diff more reviewable.",
      "tree": {
        "sha": "135ee81054e276c5ff29aa30f0601c86f180d04b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/135ee81054e276c5ff29aa30f0601c86f180d04b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f4b865e57b4567270b1586bb1f348ab9106485d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f4b865e57b4567270b1586bb1f348ab9106485d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f4b865e57b4567270b1586bb1f348ab9106485d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f4b865e57b4567270b1586bb1f348ab9106485d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0dc850bf698f7377797d7d68365d4fc79b0221c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0dc850bf698f7377797d7d68365d4fc79b0221c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0dc850bf698f7377797d7d68365d4fc79b0221c"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 16,
      "deletions": 19
    },
    "files": [
      {
        "sha": "c82c914e1ecf3d8423c823b6306ead60f2d15ed5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 19,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f4b865e57b4567270b1586bb1f348ab9106485d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f4b865e57b4567270b1586bb1f348ab9106485d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1f4b865e57b4567270b1586bb1f348ab9106485d",
        "patch": "@@ -4181,65 +4181,62 @@ UniValue importmulti(const JSONRPCRequest& request);\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n     //  --------------------- ------------------------          -----------------------         ----------\n-    { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n-    { \"wallet\",             \"walletprocesspsbt\",                &walletprocesspsbt,             {\"psbt\",\"sign\",\"sighashtype\",\"bip32derivs\"} },\n-    { \"wallet\",             \"walletcreatefundedpsbt\",           &walletcreatefundedpsbt,        {\"inputs\",\"outputs\",\"locktime\",\"options\",\"bip32derivs\"} },\n+    { \"generating\",         \"generate\",                         &generate,                      {\"nblocks\",\"maxtries\"} },\n+    { \"hidden\",             \"addwitnessaddress\",                &addwitnessaddress,             {\"address\",\"p2sh\"} },\n     { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n+    { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n     { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n     { \"wallet\",             \"abortrescan\",                      &abortrescan,                   {} },\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n-    { \"hidden\",             \"addwitnessaddress\",                &addwitnessaddress,             {\"address\",\"p2sh\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n     { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n+    { \"wallet\",             \"getaddressesbylabel\",              &getaddressesbylabel,           {\"label\"} },\n     { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n     { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"dummy\",\"minconf\",\"include_watchonly\"} },\n     { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"label\",\"address_type\"} },\n     { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n     { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n+    { \"wallet\",             \"getreceivedbylabel\",               &getreceivedbylabel,            {\"label\",\"minconf\"} },\n     { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\"} },\n     { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {} },\n     { \"wallet\",             \"getwalletinfo\",                    &getwalletinfo,                 {} },\n+    { \"wallet\",             \"importaddress\",                    &importaddress,                 {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n     { \"wallet\",             \"importmulti\",                      &importmulti,                   {\"requests\",\"options\"} },\n     { \"wallet\",             \"importprivkey\",                    &importprivkey,                 {\"privkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n-    { \"wallet\",             \"importaddress\",                    &importaddress,                 {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n     { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n     { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n     { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n     { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n+    { \"wallet\",             \"listlabels\",                       &listlabels,                    {\"purpose\"} },\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n     { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n+    { \"wallet\",             \"listreceivedbylabel\",              &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n     { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n     { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n     { \"wallet\",             \"loadwallet\",                       &loadwallet,                    {\"filename\"} },\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n+    { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n+    { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n     { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n     { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n+    { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n     { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n     { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n     { \"wallet\",             \"unloadwallet\",                     &unloadwallet,                  {\"wallet_name\"} },\n+    { \"wallet\",             \"walletcreatefundedpsbt\",           &walletcreatefundedpsbt,        {\"inputs\",\"outputs\",\"locktime\",\"options\",\"bip32derivs\"} },\n     { \"wallet\",             \"walletlock\",                       &walletlock,                    {} },\n-    { \"wallet\",             \"walletpassphrasechange\",           &walletpassphrasechange,        {\"oldpassphrase\",\"newpassphrase\"} },\n     { \"wallet\",             \"walletpassphrase\",                 &walletpassphrase,              {\"passphrase\",\"timeout\"} },\n-    { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n-    { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n-    { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n-\n-    /** Label functions (to replace non-balance account functions) */\n-    { \"wallet\",             \"getaddressesbylabel\",              &getaddressesbylabel,           {\"label\"} },\n-    { \"wallet\",             \"getreceivedbylabel\",               &getreceivedbylabel,            {\"label\",\"minconf\"} },\n-    { \"wallet\",             \"listlabels\",                       &listlabels,                    {\"purpose\"} },\n-    { \"wallet\",             \"listreceivedbylabel\",              &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n-\n-    { \"generating\",         \"generate\",                         &generate,                      {\"nblocks\",\"maxtries\"} },\n+    { \"wallet\",             \"walletpassphrasechange\",           &walletpassphrasechange,        {\"oldpassphrase\",\"newpassphrase\"} },\n+    { \"wallet\",             \"walletprocesspsbt\",                &walletprocesspsbt,             {\"psbt\",\"sign\",\"sighashtype\",\"bip32derivs\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "bb08423d5ca866d4a139a3b57ff110d818d08b32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjA4NDIzZDVjYTg2NmQ0YTEzOWEzYjU3ZmYxMTBkODE4ZDA4YjMy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-08-27T13:53:17Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-08-27T14:45:03Z"
      },
      "message": "[doc] Add release notes for 'account' API removal",
      "tree": {
        "sha": "1194a8d394b2b1f2e672405444dbfa9920774d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1194a8d394b2b1f2e672405444dbfa9920774d90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb08423d5ca866d4a139a3b57ff110d818d08b32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb08423d5ca866d4a139a3b57ff110d818d08b32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb08423d5ca866d4a139a3b57ff110d818d08b32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb08423d5ca866d4a139a3b57ff110d818d08b32/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f4b865e57b4567270b1586bb1f348ab9106485d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f4b865e57b4567270b1586bb1f348ab9106485d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f4b865e57b4567270b1586bb1f348ab9106485d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b23c11268b5d2cd725d9f84b1e666058b38e8150",
        "filename": "doc/release-notes-14023.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb08423d5ca866d4a139a3b57ff110d818d08b32/doc/release-notes-14023.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb08423d5ca866d4a139a3b57ff110d818d08b32/doc/release-notes-14023.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14023.md?ref=bb08423d5ca866d4a139a3b57ff110d818d08b32",
        "patch": "@@ -0,0 +1,8 @@\n+Accout API removed\n+------------------\n+\n+The 'account' API was deprecated in v0.17 and has been fully removed in v0.18.\n+The 'label' API was introduced in v0.17 as a replacement for accounts.\n+\n+See the release notes from v0.17 for a full description of the changes from the\n+'account' API to the 'label' API."
      }
    ]
  }
]