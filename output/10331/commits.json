[
  {
    "sha": "ce58e93ec0bf4ef4a503379e98bd209dd99447eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTU4ZTkzZWMwYmY0ZWY0YTUwMzM3OWU5OGJkMjA5ZGQ5OTQ0N2Vi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-21T17:54:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-03T18:14:04Z"
      },
      "message": "Change bitcoin-util-test.py to use Python3",
      "tree": {
        "sha": "081cfaf1f786264e8a605c9a9912d49448a29b10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/081cfaf1f786264e8a605c9a9912d49448a29b10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce58e93ec0bf4ef4a503379e98bd209dd99447eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce58e93ec0bf4ef4a503379e98bd209dd99447eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce58e93ec0bf4ef4a503379e98bd209dd99447eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce58e93ec0bf4ef4a503379e98bd209dd99447eb/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22d870016eb630560c0bd6ba911b764ef46fefc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22d870016eb630560c0bd6ba911b764ef46fefc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22d870016eb630560c0bd6ba911b764ef46fefc9"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c3302f983c6d04506d66e32778fcbe16f59bcfb6",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce58e93ec0bf4ef4a503379e98bd209dd99447eb/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce58e93ec0bf4ef4a503379e98bd209dd99447eb/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=ce58e93ec0bf4ef4a503379e98bd209dd99447eb",
        "patch": "@@ -147,7 +147,7 @@ bitcoin_test_clean : FORCE\n \n check-local:\n \t@echo \"Running test/util/bitcoin-util-test.py...\"\n-\t$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py\n+\t$(top_builddir)/test/util/bitcoin-util-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n if EMBEDDED_UNIVALUE\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check"
      },
      {
        "sha": "55d89c3b927a11680a3e916c281fc8c33524158b",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce58e93ec0bf4ef4a503379e98bd209dd99447eb/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce58e93ec0bf4ef4a503379e98bd209dd99447eb/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=ce58e93ec0bf4ef4a503379e98bd209dd99447eb",
        "patch": "@@ -1,9 +1,8 @@\n-#!/usr/bin/env python\n+#!/usr/bin/env python3\n # Copyright 2014 BitPay Inc.\n # Copyright 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-from __future__ import division,print_function,unicode_literals\n import os\n import sys\n import argparse"
      }
    ]
  },
  {
    "sha": "e9265df15b04178b40ab3bacfe6a944f0fb9ad27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTI2NWRmMTViMDQxNzhiNDBhYjNiYWNmZTZhOTQ0ZjBmYjlhZDI3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-21T17:57:07Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-03T18:14:50Z"
      },
      "message": "Change help_text in bitcoin-util-test.py to a docstring.",
      "tree": {
        "sha": "27e6d1b7312d8793aecee1a0684ebcc09bc40d67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27e6d1b7312d8793aecee1a0684ebcc09bc40d67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9265df15b04178b40ab3bacfe6a944f0fb9ad27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9265df15b04178b40ab3bacfe6a944f0fb9ad27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9265df15b04178b40ab3bacfe6a944f0fb9ad27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9265df15b04178b40ab3bacfe6a944f0fb9ad27/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce58e93ec0bf4ef4a503379e98bd209dd99447eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce58e93ec0bf4ef4a503379e98bd209dd99447eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce58e93ec0bf4ef4a503379e98bd209dd99447eb"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0c67663edb4b001d115c9326af0ea8270ace96c7",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9265df15b04178b40ab3bacfe6a944f0fb9ad27/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9265df15b04178b40ab3bacfe6a944f0fb9ad27/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=e9265df15b04178b40ab3bacfe6a944f0fb9ad27",
        "patch": "@@ -3,23 +3,23 @@\n # Copyright 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test framework for bitcoin utils.\n+\n+Runs automatically during `make check`.\n+\n+Can also be run manually.\"\"\"\n+\n import os\n import sys\n import argparse\n import logging\n \n-help_text=\"\"\"Test framework for bitcoin utils.\n-\n-Runs automatically during `make check`. \n-\n-Can also be run manually.\"\"\"\n-\n if __name__ == '__main__':\n     sys.path.append(os.path.dirname(os.path.abspath(__file__)))\n     import buildenv\n     import bctest\n \n-    parser = argparse.ArgumentParser(description=help_text)\n+    parser = argparse.ArgumentParser(description=__doc__)\n     parser.add_argument('-v', '--verbose', action='store_true')\n     args = parser.parse_args()\n     verbose = args.verbose"
      }
    ]
  },
  {
    "sha": "89fcd3586c9714a923b6a3147f60e43d5de74942",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWZjZDM1ODZjOTcxNGE5MjNiNmEzMTQ3ZjYwZTQzZDVkZTc0OTQy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-21T18:38:09Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-03T18:18:14Z"
      },
      "message": "Use an .ini config file for environment vars in bitcoin-util-test.py",
      "tree": {
        "sha": "4cf324feafd10daecd38edee3860a4c62f40b334",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cf324feafd10daecd38edee3860a4c62f40b334"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89fcd3586c9714a923b6a3147f60e43d5de74942",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fcd3586c9714a923b6a3147f60e43d5de74942",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89fcd3586c9714a923b6a3147f60e43d5de74942",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fcd3586c9714a923b6a3147f60e43d5de74942/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9265df15b04178b40ab3bacfe6a944f0fb9ad27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9265df15b04178b40ab3bacfe6a944f0fb9ad27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9265df15b04178b40ab3bacfe6a944f0fb9ad27"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 20,
      "deletions": 12
    },
    "files": [
      {
        "sha": "aa37e381e23f956a81c35d8474f0ac0f73c0eafc",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fcd3586c9714a923b6a3147f60e43d5de74942/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fcd3586c9714a923b6a3147f60e43d5de74942/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=89fcd3586c9714a923b6a3147f60e43d5de74942",
        "patch": "@@ -80,7 +80,6 @@ Bitcoin-Qt.app\n # Unit-tests\n Makefile.test\n bitcoin-qt_test\n-src/test/buildenv.py\n \n # Resources cpp\n qrc_*.cpp\n@@ -102,7 +101,6 @@ linux-coverage-build\n linux-build\n win32-build\n test/functional/config.ini\n-test/util/buildenv.py\n test/cache/*\n \n !src/leveldb*/Makefile"
      },
      {
        "sha": "b0ba0c85044814d719c29df0480d8beb231f4235",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fcd3586c9714a923b6a3147f60e43d5de74942/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fcd3586c9714a923b6a3147f60e43d5de74942/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=89fcd3586c9714a923b6a3147f60e43d5de74942",
        "patch": "@@ -277,9 +277,6 @@ EXTRA_DIST += \\\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n-# This file is problematic for out-of-tree builds if it exists.\n-DISTCLEANFILES = test/util/buildenv.pyc\n-\n .INTERMEDIATE: $(COVERAGE_INFO)\n \n DISTCHECK_CONFIGURE_FLAGS = --enable-man"
      },
      {
        "sha": "26a9d082c63f45c92f7afa89d6ccc506a268e88a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fcd3586c9714a923b6a3147f60e43d5de74942/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fcd3586c9714a923b6a3147f60e43d5de74942/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=89fcd3586c9714a923b6a3147f60e43d5de74942",
        "patch": "@@ -1160,8 +1160,7 @@ AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)\n AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n-AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/functional/config.ini])\n-AC_CONFIG_FILES([test/util/buildenv.py],[chmod +x test/util/buildenv.py])\n+AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/functional/config.ini test/util/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_FILES([doc/Doxyfile])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])"
      },
      {
        "sha": "f85bd13f9325f0645ef4dd4d60e1e250e9703f96",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fcd3586c9714a923b6a3147f60e43d5de74942/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fcd3586c9714a923b6a3147f60e43d5de74942/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=89fcd3586c9714a923b6a3147f60e43d5de74942",
        "patch": "@@ -9,16 +9,23 @@\n \n Can also be run manually.\"\"\"\n \n+import configparser\n import os\n import sys\n import argparse\n import logging\n \n if __name__ == '__main__':\n     sys.path.append(os.path.dirname(os.path.abspath(__file__)))\n-    import buildenv\n     import bctest\n \n+    config = configparser.ConfigParser()\n+    config.read_file(open(os.path.dirname(__file__) + \"/config.ini\"))\n+\n+    buildenv = argparse.Namespace(exeext=config[\"environment\"][\"EXEEXT\"],\n+                                  SRCDIR=config[\"environment\"][\"SRCDIR\"],\n+                                  BUILDDIR=config[\"environment\"][\"BUILDDIR\"])\n+\n     parser = argparse.ArgumentParser(description=__doc__)\n     parser.add_argument('-v', '--verbose', action='store_true')\n     args = parser.parse_args()"
      },
      {
        "sha": "33030b0348ab881e1fe76d7d586fd99d4c743adf",
        "filename": "test/util/buildenv.py.in",
        "status": "removed",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9265df15b04178b40ab3bacfe6a944f0fb9ad27/test/util/buildenv.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9265df15b04178b40ab3bacfe6a944f0fb9ad27/test/util/buildenv.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/buildenv.py.in?ref=e9265df15b04178b40ab3bacfe6a944f0fb9ad27",
        "patch": "@@ -1,4 +0,0 @@\n-#!/usr/bin/env python\n-exeext=\"@EXEEXT@\"\n-SRCDIR=\"@abs_top_srcdir@\"\n-BUILDDIR=\"@abs_top_builddir@\""
      },
      {
        "sha": "a1f8f09cecb60ed953966dc0af580745873fbe42",
        "filename": "test/util/config.ini.in",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fcd3586c9714a923b6a3147f60e43d5de74942/test/util/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fcd3586c9714a923b6a3147f60e43d5de74942/test/util/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/config.ini.in?ref=89fcd3586c9714a923b6a3147f60e43d5de74942",
        "patch": "@@ -0,0 +1,11 @@\n+# Copyright (c) 2013-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# These environment variables are set by the build process and read by\n+# test/util/bitcoin-util-test.py\n+\n+[environment]\n+SRCDIR=@abs_top_srcdir@\n+BUILDDIR=@abs_top_builddir@\n+EXEEXT=@EXEEXT@"
      }
    ]
  },
  {
    "sha": "95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTgzNmM1ZWJhNGE2Y2RjODM1ZTcyMTg5ZTRiMGZlM2U5NDU4YzVh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-21T18:47:20Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-03T18:18:30Z"
      },
      "message": "Use shared config file for functional and util tests\n\nThe functional tests and util tests both require a config file that is\ngenerated by ./configure. This commit merges those two config\nfiles into a single configuration file that can be shared by both tests.\n\nThe config from config.ini is put into a Namespace object to maintain\nthe interface with bctest.py. A future commit could change this\ninterface to use a dictionary instead of a namespace.",
      "tree": {
        "sha": "748a546968a543fab96e326388e6bd395b484b28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/748a546968a543fab96e326388e6bd395b484b28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89fcd3586c9714a923b6a3147f60e43d5de74942",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fcd3586c9714a923b6a3147f60e43d5de74942",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89fcd3586c9714a923b6a3147f60e43d5de74942"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 7,
      "deletions": 18
    },
    "files": [
      {
        "sha": "60c26dae8b89349b88d704dd7be7320ef8684b16",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
        "patch": "@@ -100,7 +100,7 @@ coverage_percent.txt\n linux-coverage-build\n linux-build\n win32-build\n-test/functional/config.ini\n+test/config.ini\n test/cache/*\n \n !src/leveldb*/Makefile"
      },
      {
        "sha": "13de015151620fd2a7118eff461c9e72ace83403",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
        "patch": "@@ -1160,7 +1160,7 @@ AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)\n AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n-AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/functional/config.ini test/util/config.ini])\n+AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_FILES([doc/Doxyfile])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n@@ -1213,8 +1213,8 @@ esac\n dnl Replace the BUILDDIR path with the correct Windows path if compiling on Native Windows\n case ${OS} in\n    *Windows*)\n-     sed  's/BUILDDIR=\"\\/\\([[a-z]]\\)/BUILDDIR=\"\\1:/'  test/functional/config.ini > test/functional/config-2.ini\n-     mv test/functional/config-2.ini test/functional/config.ini\n+     sed  's/BUILDDIR=\"\\/\\([[a-z]]\\)/BUILDDIR=\"\\1:/'  test/config.ini > test/config-2.ini\n+     mv test/config-2.ini test/config.ini\n    ;;\n esac\n "
      },
      {
        "sha": "35ee092be4fc134b0892e7d72fb35b6004aee8f6",
        "filename": "test/config.ini.in",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/test/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/test/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/config.ini.in?ref=95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
        "patch": "@@ -3,7 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # These environment variables are set by the build process and read by\n-# test/functional/test_runner.py\n+# test/functional/test_runner.py and test/util/bitcoin-util-test.py\n \n [environment]\n SRCDIR=@abs_top_srcdir@",
        "previous_filename": "test/functional/config.ini.in"
      },
      {
        "sha": "a805f50557edb7eb989d95bb544202da18dc5bab",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
        "patch": "@@ -179,7 +179,7 @@ def main():\n \n     # Read config generated by configure.\n     config = configparser.ConfigParser()\n-    configfile = os.path.abspath(os.path.dirname(__file__)) + \"/config.ini\"\n+    configfile = os.path.abspath(os.path.dirname(__file__)) + \"/../config.ini\"\n     config.read_file(open(configfile))\n \n     passon_args.append(\"--configfile=%s\" % configfile)"
      },
      {
        "sha": "ce0b9ca93878763eef61bc486c8f126090464fbd",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
        "patch": "@@ -20,7 +20,7 @@\n     import bctest\n \n     config = configparser.ConfigParser()\n-    config.read_file(open(os.path.dirname(__file__) + \"/config.ini\"))\n+    config.read_file(open(os.path.dirname(__file__) + \"/../config.ini\"))\n \n     buildenv = argparse.Namespace(exeext=config[\"environment\"][\"EXEEXT\"],\n                                   SRCDIR=config[\"environment\"][\"SRCDIR\"],"
      },
      {
        "sha": "a1f8f09cecb60ed953966dc0af580745873fbe42",
        "filename": "test/util/config.ini.in",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fcd3586c9714a923b6a3147f60e43d5de74942/test/util/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fcd3586c9714a923b6a3147f60e43d5de74942/test/util/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/config.ini.in?ref=89fcd3586c9714a923b6a3147f60e43d5de74942",
        "patch": "@@ -1,11 +0,0 @@\n-# Copyright (c) 2013-2017 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# These environment variables are set by the build process and read by\n-# test/util/bitcoin-util-test.py\n-\n-[environment]\n-SRCDIR=@abs_top_srcdir@\n-BUILDDIR=@abs_top_builddir@\n-EXEEXT=@EXEEXT@"
      }
    ]
  },
  {
    "sha": "8ad5bdef781d9b3009030287e5c99341e6933007",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWQ1YmRlZjc4MWQ5YjMwMDkwMzAyODdlNWM5OTM0MWU2OTMzMDA3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-21T19:01:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-06T20:42:38Z"
      },
      "message": "Merge bctest.py into bitcoin-util-test.py\n\nbctest.py is only used as an import by bitcoin-util-test.py. There's no\nvalue in keeping it as a separate module, so let's merge them into a\nsingle module to keep building and packaging simpler.\n\nbitcoin-test-util is importable as a module, so if any future modules\nreally want to import the code from bctest.py, they can import\nbitcoin-test-util and call the bctest functions by name.",
      "tree": {
        "sha": "34ccda80c4a98576e8b07dcf3606030de8a4ec11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34ccda80c4a98576e8b07dcf3606030de8a4ec11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ad5bdef781d9b3009030287e5c99341e6933007",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ad5bdef781d9b3009030287e5c99341e6933007",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ad5bdef781d9b3009030287e5c99341e6933007",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ad5bdef781d9b3009030287e5c99341e6933007/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a"
      }
    ],
    "stats": {
      "total": 294,
      "additions": 140,
      "deletions": 154
    },
    "files": [
      {
        "sha": "40114a551fb87bfb64122c8b3f3bf3e6b95afc61",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ad5bdef781d9b3009030287e5c99341e6933007/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ad5bdef781d9b3009030287e5c99341e6933007/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=8ad5bdef781d9b3009030287e5c99341e6933007",
        "patch": "@@ -223,7 +223,6 @@ dist_noinst_SCRIPTS = autogen.sh\n EXTRA_DIST = $(top_srcdir)/share/genbuild.sh test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n \n EXTRA_DIST += \\\n-    test/util/bctest.py \\\n     test/util/bitcoin-util-test.py \\\n     test/util/data/bitcoin-util-test.json \\\n     test/util/data/blanktxv1.hex \\"
      },
      {
        "sha": "ebc01ed42f0a957dac4af09d3f50b99720ff4dbc",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ad5bdef781d9b3009030287e5c99341e6933007/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ad5bdef781d9b3009030287e5c99341e6933007/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=8ad5bdef781d9b3009030287e5c99341e6933007",
        "patch": "@@ -1165,7 +1165,6 @@ AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/spl\n AC_CONFIG_FILES([doc/Doxyfile])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\n-AC_CONFIG_LINKS([test/util/bctest.py:test/util/bctest.py])\n \n dnl boost's m4 checks do something really nasty: they export these vars. As a\n dnl result, they leak into secp256k1's configure and crazy things happen."
      },
      {
        "sha": "b17cf77ae312c434ca84a732d2bd8923ee03c223",
        "filename": "test/util/bctest.py",
        "status": "removed",
        "additions": 0,
        "deletions": 139,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/test/util/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95836c5eba4a6cdc835e72189e4b0fe3e9458c5a/test/util/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bctest.py?ref=95836c5eba4a6cdc835e72189e4b0fe3e9458c5a",
        "patch": "@@ -1,139 +0,0 @@\n-# Copyright 2014 BitPay Inc.\n-# Copyright 2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-from __future__ import division,print_function,unicode_literals\n-import subprocess\n-import os\n-import json\n-import sys\n-import binascii\n-import difflib\n-import logging\n-import pprint\n-\n-def parse_output(a, fmt):\n-    \"\"\"Parse the output according to specified format.\n-\n-    Raise an error if the output can't be parsed.\"\"\"\n-    if fmt == 'json': # json: compare parsed data\n-        return json.loads(a)\n-    elif fmt == 'hex': # hex: parse and compare binary data\n-        return binascii.a2b_hex(a.strip())\n-    else:\n-        raise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n-\n-def bctest(testDir, testObj, buildenv):\n-    \"\"\"Runs a single test, comparing output and RC to expected output and RC.\n-\n-    Raises an error if input can't be read, executable fails, or output/RC\n-    are not as expected. Error is caught by bctester() and reported.\n-    \"\"\"\n-    # Get the exec names and arguments\n-    execprog = buildenv.BUILDDIR + \"/src/\" + testObj['exec'] + buildenv.exeext\n-    execargs = testObj['args']\n-    execrun = [execprog] + execargs\n-\n-    # Read the input data (if there is any)\n-    stdinCfg = None\n-    inputData = None\n-    if \"input\" in testObj:\n-        filename = testDir + \"/\" + testObj['input']\n-        inputData = open(filename).read()\n-        stdinCfg = subprocess.PIPE\n-\n-    # Read the expected output data (if there is any)\n-    outputFn = None\n-    outputData = None\n-    if \"output_cmp\" in testObj:\n-        outputFn = testObj['output_cmp']\n-        outputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n-        try:\n-            outputData = open(testDir + \"/\" + outputFn).read()\n-        except:\n-            logging.error(\"Output file \" + outputFn + \" can not be opened\")\n-            raise\n-        if not outputData:\n-            logging.error(\"Output data missing for \" + outputFn)\n-            raise Exception\n-\n-    # Run the test\n-    proc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n-    try:\n-        outs = proc.communicate(input=inputData)\n-    except OSError:\n-        logging.error(\"OSError, Failed to execute \" + execprog)\n-        raise\n-\n-    if outputData:\n-        data_mismatch, formatting_mismatch = False, False\n-        # Parse command output and expected output\n-        try:\n-            a_parsed = parse_output(outs[0], outputType)\n-        except Exception as e:\n-            logging.error('Error parsing command output as %s: %s' % (outputType,e))\n-            raise\n-        try:\n-            b_parsed = parse_output(outputData, outputType)\n-        except Exception as e:\n-            logging.error('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n-            raise\n-        # Compare data\n-        if a_parsed != b_parsed:\n-            logging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n-            data_mismatch = True\n-        # Compare formatting\n-        if outs[0] != outputData:\n-            error_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n-            error_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n-                                                          outs[0].splitlines(True),\n-                                                          fromfile=outputFn,\n-                                                          tofile=\"returned\"))\n-            logging.error(error_message)\n-            formatting_mismatch = True\n-\n-        assert not data_mismatch and not formatting_mismatch\n-\n-    # Compare the return code to the expected return code\n-    wantRC = 0\n-    if \"return_code\" in testObj:\n-        wantRC = testObj['return_code']\n-    if proc.returncode != wantRC:\n-        logging.error(\"Return code mismatch for \" + outputFn)\n-        raise Exception\n-\n-    if \"error_txt\" in testObj:\n-        want_error = testObj[\"error_txt\"]\n-        # Compare error text\n-        # TODO: ideally, we'd compare the strings exactly and also assert\n-        # That stderr is empty if no errors are expected. However, bitcoin-tx\n-        # emits DISPLAY errors when running as a windows application on\n-        # linux through wine. Just assert that the expected error text appears\n-        # somewhere in stderr.\n-        if want_error not in outs[1]:\n-            logging.error(\"Error mismatch:\\n\" + \"Expected: \" + want_error + \"\\nReceived: \" + outs[1].rstrip())\n-            raise Exception\n-\n-def bctester(testDir, input_basename, buildenv):\n-    \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\"\n-    input_filename = testDir + \"/\" + input_basename\n-    raw_data = open(input_filename).read()\n-    input_data = json.loads(raw_data)\n-\n-    failed_testcases = []\n-\n-    for testObj in input_data:\n-        try:\n-            bctest(testDir, testObj, buildenv)\n-            logging.info(\"PASSED: \" + testObj[\"description\"])\n-        except:\n-            logging.info(\"FAILED: \" + testObj[\"description\"])\n-            failed_testcases.append(testObj[\"description\"])\n-\n-    if failed_testcases:\n-        error_message = \"FAILED_TESTCASES:\\n\"\n-        error_message += pprint.pformat(failed_testcases, width=400)\n-        logging.error(error_message)\n-        sys.exit(1)\n-    else:\n-        sys.exit(0)"
      },
      {
        "sha": "d15d6a6011cc651a4ddeb34edc98e8aab31e5dd8",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 140,
        "deletions": 13,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ad5bdef781d9b3009030287e5c99341e6933007/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ad5bdef781d9b3009030287e5c99341e6933007/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=8ad5bdef781d9b3009030287e5c99341e6933007",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env python3\n # Copyright 2014 BitPay Inc.\n-# Copyright 2016 The Bitcoin Core developers\n+# Copyright 2016-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test framework for bitcoin utils.\n@@ -9,23 +9,21 @@\n \n Can also be run manually.\"\"\"\n \n+import argparse\n+import binascii\n import configparser\n+import difflib\n+import json\n+import logging\n import os\n+import pprint\n+import subprocess\n import sys\n-import argparse\n-import logging\n-\n-if __name__ == '__main__':\n-    sys.path.append(os.path.dirname(os.path.abspath(__file__)))\n-    import bctest\n \n+def main():\n     config = configparser.ConfigParser()\n     config.read_file(open(os.path.dirname(__file__) + \"/../config.ini\"))\n \n-    buildenv = argparse.Namespace(exeext=config[\"environment\"][\"EXEEXT\"],\n-                                  SRCDIR=config[\"environment\"][\"SRCDIR\"],\n-                                  BUILDDIR=config[\"environment\"][\"BUILDDIR\"])\n-\n     parser = argparse.ArgumentParser(description=__doc__)\n     parser.add_argument('-v', '--verbose', action='store_true')\n     args = parser.parse_args()\n@@ -37,6 +35,135 @@\n         level = logging.ERROR\n     formatter = '%(asctime)s - %(levelname)s - %(message)s'\n     # Add the format/level to the logger\n-    logging.basicConfig(format = formatter, level=level)\n+    logging.basicConfig(format=formatter, level=level)\n+\n+    bctester(config[\"environment\"][\"SRCDIR\"] + \"/test/util/data\", \"bitcoin-util-test.json\", config[\"environment\"])\n+\n+def bctester(testDir, input_basename, buildenv):\n+    \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\"\n+    input_filename = testDir + \"/\" + input_basename\n+    raw_data = open(input_filename).read()\n+    input_data = json.loads(raw_data)\n+\n+    failed_testcases = []\n+\n+    for testObj in input_data:\n+        try:\n+            bctest(testDir, testObj, buildenv)\n+            logging.info(\"PASSED: \" + testObj[\"description\"])\n+        except:\n+            logging.info(\"FAILED: \" + testObj[\"description\"])\n+            failed_testcases.append(testObj[\"description\"])\n+\n+    if failed_testcases:\n+        error_message = \"FAILED_TESTCASES:\\n\"\n+        error_message += pprint.pformat(failed_testcases, width=400)\n+        logging.error(error_message)\n+        sys.exit(1)\n+    else:\n+        sys.exit(0)\n \n-    bctest.bctester(buildenv.SRCDIR + \"/test/util/data\", \"bitcoin-util-test.json\", buildenv)\n+def bctest(testDir, testObj, buildenv):\n+    \"\"\"Runs a single test, comparing output and RC to expected output and RC.\n+\n+    Raises an error if input can't be read, executable fails, or output/RC\n+    are not as expected. Error is caught by bctester() and reported.\n+    \"\"\"\n+    # Get the exec names and arguments\n+    execprog = buildenv[\"BUILDDIR\"] + \"/src/\" + testObj['exec'] + buildenv[\"EXEEXT\"]\n+    execargs = testObj['args']\n+    execrun = [execprog] + execargs\n+\n+    # Read the input data (if there is any)\n+    stdinCfg = None\n+    inputData = None\n+    if \"input\" in testObj:\n+        filename = testDir + \"/\" + testObj['input']\n+        inputData = open(filename).read()\n+        stdinCfg = subprocess.PIPE\n+\n+    # Read the expected output data (if there is any)\n+    outputFn = None\n+    outputData = None\n+    if \"output_cmp\" in testObj:\n+        outputFn = testObj['output_cmp']\n+        outputType = os.path.splitext(outputFn)[1][1:]  # output type from file extension (determines how to compare)\n+        try:\n+            outputData = open(testDir + \"/\" + outputFn).read()\n+        except:\n+            logging.error(\"Output file \" + outputFn + \" can not be opened\")\n+            raise\n+        if not outputData:\n+            logging.error(\"Output data missing for \" + outputFn)\n+            raise Exception\n+\n+    # Run the test\n+    proc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n+    try:\n+        outs = proc.communicate(input=inputData)\n+    except OSError:\n+        logging.error(\"OSError, Failed to execute \" + execprog)\n+        raise\n+\n+    if outputData:\n+        data_mismatch, formatting_mismatch = False, False\n+        # Parse command output and expected output\n+        try:\n+            a_parsed = parse_output(outs[0], outputType)\n+        except Exception as e:\n+            logging.error('Error parsing command output as %s: %s' % (outputType, e))\n+            raise\n+        try:\n+            b_parsed = parse_output(outputData, outputType)\n+        except Exception as e:\n+            logging.error('Error parsing expected output %s as %s: %s' % (outputFn, outputType, e))\n+            raise\n+        # Compare data\n+        if a_parsed != b_parsed:\n+            logging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+            data_mismatch = True\n+        # Compare formatting\n+        if outs[0] != outputData:\n+            error_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n+            error_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n+                                                          outs[0].splitlines(True),\n+                                                          fromfile=outputFn,\n+                                                          tofile=\"returned\"))\n+            logging.error(error_message)\n+            formatting_mismatch = True\n+\n+        assert not data_mismatch and not formatting_mismatch\n+\n+    # Compare the return code to the expected return code\n+    wantRC = 0\n+    if \"return_code\" in testObj:\n+        wantRC = testObj['return_code']\n+    if proc.returncode != wantRC:\n+        logging.error(\"Return code mismatch for \" + outputFn)\n+        raise Exception\n+\n+    if \"error_txt\" in testObj:\n+        want_error = testObj[\"error_txt\"]\n+        # Compare error text\n+        # TODO: ideally, we'd compare the strings exactly and also assert\n+        # That stderr is empty if no errors are expected. However, bitcoin-tx\n+        # emits DISPLAY errors when running as a windows application on\n+        # linux through wine. Just assert that the expected error text appears\n+        # somewhere in stderr.\n+        if want_error not in outs[1]:\n+            logging.error(\"Error mismatch:\\n\" + \"Expected: \" + want_error + \"\\nReceived: \" + outs[1].rstrip())\n+            raise Exception\n+\n+def parse_output(a, fmt):\n+    \"\"\"Parse the output according to specified format.\n+\n+    Raise an error if the output can't be parsed.\"\"\"\n+    if fmt == 'json':  # json: compare parsed data\n+        return json.loads(a)\n+    elif fmt == 'hex':  # hex: parse and compare binary data\n+        return binascii.a2b_hex(a.strip())\n+    else:\n+        raise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n+\n+if __name__ == '__main__':\n+    main()"
      }
    ]
  }
]