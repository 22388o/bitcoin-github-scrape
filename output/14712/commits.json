[
  {
    "sha": "fa76c56f3309f29e10b47290283560fa4cc6cf0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTc2YzU2ZjMzMDlmMjllMTBiNDcyOTAyODM1NjBmYTRjYzZjZjBl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-12T22:11:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-13T20:30:13Z"
      },
      "message": "wallet: Require a start block in ScanForWalletTransactions",
      "tree": {
        "sha": "ddec7e718fce3ad2b29debf73f51d040802917da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ddec7e718fce3ad2b29debf73f51d040802917da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa76c56f3309f29e10b47290283560fa4cc6cf0e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJb6zRVAAoJEM4rdWl+aaVI/J8MAKDKEW0oh00NpSlvS2j6P49S\n38vaVPs+MiCAronR5VR0iMNTKT0UMGELw/3vZHcoZfwrV5KumDcRdmJ7vaDud40h\nOR/e3ShlwmxdLpe0Kyn/OT/a9pGU7Exh/4VkUu7W2+cuXjr782poILnHlgN9Pl+e\n+zGNkcX+g8DQZ9ODxdhzvTNQMj48vjks4uv2nNgwdXSaANja6Hn49cmwC0Kj+vnM\nZHR5HfF+M3vzyvtY5q8Gfas7DfmBbVfzsRFFCFaxlD6ytT+t7XevHsBzf3BsCEpX\nIcyjdWB3KeW3sR+5lqX6haiSoF8UB1UEUfTO6ohN3C/esW4n4ptG7Pnx1z7lHFuj\n5gYwu+V9SwNvEAbAaL3aWz3hGQMfCwhvhHY45kRn0/Mh5S3n6yoD9TBHAs7dDYGK\n1tocIlqYQ/HDOL73k4jwPA19ll0szHVVLfAGv6oW9ROf6Y+FSHM5l4hs9pLraG7V\naTiX2KqO8k2zZnMYfHmuakApzwK2iFhaWRalycjwBQ==\n=cHgL\n-----END PGP SIGNATURE-----",
        "payload": "tree ddec7e718fce3ad2b29debf73f51d040802917da\nparent cbf00939b5e813937fb21466aa3e229ca81cb6ba\nauthor MarcoFalke <falke.marco@gmail.com> 1542060662 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1542141013 -0500\n\nwallet: Require a start block in ScanForWalletTransactions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa76c56f3309f29e10b47290283560fa4cc6cf0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa76c56f3309f29e10b47290283560fa4cc6cf0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa76c56f3309f29e10b47290283560fa4cc6cf0e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbf00939b5e813937fb21466aa3e229ca81cb6ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbf00939b5e813937fb21466aa3e229ca81cb6ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbf00939b5e813937fb21466aa3e229ca81cb6ba"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 24,
      "deletions": 22
    },
    "files": [
      {
        "sha": "ddf38080bb31d4848cea35e9cf21c7f51f4060c8",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa76c56f3309f29e10b47290283560fa4cc6cf0e/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa76c56f3309f29e10b47290283560fa4cc6cf0e/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=fa76c56f3309f29e10b47290283560fa4cc6cf0e",
        "patch": "@@ -146,7 +146,7 @@ void TestGUI()\n         auto locked_chain = wallet->chain().lock();\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n-        wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, true);\n+        wallet->ScanForWalletTransactions(*::chainActive.Genesis(), nullptr, reserver, true);\n     }\n     wallet->SetBroadcastTransactions(true);\n "
      },
      {
        "sha": "8d8e820f6a8769f4ba6a2e2375b9aecf62ef4c95",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa76c56f3309f29e10b47290283560fa4cc6cf0e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa76c56f3309f29e10b47290283560fa4cc6cf0e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa76c56f3309f29e10b47290283560fa4cc6cf0e",
        "patch": "@@ -3294,7 +3294,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n+    CBlockIndex* pindexStart;\n     CBlockIndex *pindexStop = nullptr;\n     CBlockIndex *pChainTip = nullptr;\n     {\n@@ -3304,17 +3304,17 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n \n         if (!request.params[0].isNull()) {\n             pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+        }\n+        if (!pindexStart) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n-            }\n         }\n \n         if (!request.params[1].isNull()) {\n             pindexStop = chainActive[request.params[1].get_int()];\n             if (!pindexStop) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            if (pindexStop->nHeight < pindexStart->nHeight) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n@@ -3332,7 +3332,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         }\n     }\n \n-    CBlockIndex *stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, true);\n+    const CBlockIndex* stopBlock = pwallet->ScanForWalletTransactions(*pindexStart, pindexStop, reserver, true);\n     if (!stopBlock) {\n         if (pwallet->IsAbortingRescan()) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");"
      },
      {
        "sha": "5b0d63ee4df5c4fc2832def19d44f06d6c6164a6",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa76c56f3309f29e10b47290283560fa4cc6cf0e/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa76c56f3309f29e10b47290283560fa4cc6cf0e/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fa76c56f3309f29e10b47290283560fa4cc6cf0e",
        "patch": "@@ -53,7 +53,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip, nullptr, reserver));\n+        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(*oldTip, nullptr, reserver));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n \n@@ -68,7 +68,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip, nullptr, reserver));\n+        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(*oldTip, nullptr, reserver));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n \n@@ -286,7 +286,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         AddKey(*wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n-        wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver);\n+        wallet->ScanForWalletTransactions(*chainActive.Genesis(), nullptr, reserver);\n     }\n \n     ~ListCoinsTestingSetup()"
      },
      {
        "sha": "c73b42053529cb9ef0a36fe0ed895f3e20e3d136",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa76c56f3309f29e10b47290283560fa4cc6cf0e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa76c56f3309f29e10b47290283560fa4cc6cf0e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa76c56f3309f29e10b47290283560fa4cc6cf0e",
        "patch": "@@ -1613,7 +1613,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     }\n \n     if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, reserver, update);\n+        const CBlockIndex* const failedBlock = ScanForWalletTransactions(*startBlock, nullptr, reserver, update);\n         if (failedBlock) {\n             return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n         }\n@@ -1622,7 +1622,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in index_start) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n@@ -1633,24 +1633,23 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * If pindexStop is not a nullptr, the scan will stop at the block-index\n  * defined by pindexStop\n  *\n- * Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * Caller needs to make sure pindexStop (and the index_start) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver &reserver, bool fUpdate)\n+const CBlockIndex* CWallet::ScanForWalletTransactions(const CBlockIndex& index_start, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n     if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n+        assert(pindexStop->nHeight >= index_start.nHeight);\n     }\n \n-    CBlockIndex* pindex = pindexStart;\n-    CBlockIndex* ret = nullptr;\n+    const CBlockIndex* ret = nullptr;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %d...\\n\", index_start.nHeight);\n \n     {\n         fAbortRescan = false;\n@@ -1660,7 +1659,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n         double progress_end;\n         {\n             auto locked_chain = chain().lock();\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n+            progress_begin = GuessVerificationProgress(chainParams.TxData(), &index_start);\n             if (pindexStop == nullptr) {\n                 tip = chainActive.Tip();\n                 progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n@@ -1669,6 +1668,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             }\n         }\n         double progress_current = progress_begin;\n+        const CBlockIndex* pindex = &index_start;\n         while (pindex && !fAbortRescan && !ShutdownRequested())\n         {\n             if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n@@ -1683,7 +1683,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n                 auto locked_chain = chain().lock();\n                 LOCK(cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+                if (!chainActive.Contains(pindex)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n                     ret = pindex;\n@@ -4164,13 +4164,15 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n \n         nStart = GetTimeMillis();\n-        {\n+        if (pindexRescan) {\n             WalletRescanReserver reserver(walletInstance.get());\n             if (!reserver.reserve()) {\n                 InitError(_(\"Failed to rescan the wallet during initialization\"));\n                 return nullptr;\n             }\n-            walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, reserver, true);\n+            walletInstance->ScanForWalletTransactions(*pindexRescan, nullptr, reserver, true);\n+        } else {\n+            walletInstance->WalletLogPrintf(\"No blocks to rescan for wallet (nTimeFirstKey=%d)\\n\", walletInstance->nTimeFirstKey);\n         }\n         walletInstance->WalletLogPrintf(\"Rescan completed in %15dms\\n\", GetTimeMillis() - nStart);\n         walletInstance->ChainStateFlushed(chainActive.GetLocator());"
      },
      {
        "sha": "f93bf9b4ed31674f0412e0885a3802dc81897694",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa76c56f3309f29e10b47290283560fa4cc6cf0e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa76c56f3309f29e10b47290283560fa4cc6cf0e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fa76c56f3309f29e10b47290283560fa4cc6cf0e",
        "patch": "@@ -896,7 +896,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n-    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n+    const CBlockIndex* ScanForWalletTransactions(const CBlockIndex& index_start, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  }
]