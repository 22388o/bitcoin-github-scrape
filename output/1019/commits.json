[
  {
    "sha": "55f69a47002a1fc5bdf4e0c345e61ec955fa664b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWY2OWE0NzAwMmExZmM1YmRmNGUwYzM0NWU2MWVjOTU1ZmE2NjRi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-03-24T15:52:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-04T06:46:12Z"
      },
      "message": "move QT_PLUGINS stuff to qt main file, where it belongs",
      "tree": {
        "sha": "3fca23cba5429a55b9d8b773ce92d0818e45e06a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fca23cba5429a55b9d8b773ce92d0818e45e06a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55f69a47002a1fc5bdf4e0c345e61ec955fa664b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55f69a47002a1fc5bdf4e0c345e61ec955fa664b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55f69a47002a1fc5bdf4e0c345e61ec955fa664b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55f69a47002a1fc5bdf4e0c345e61ec955fa664b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc8c44e3d567a5a3cd1b373bd588015296a5a6f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc8c44e3d567a5a3cd1b373bd588015296a5a6f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc8c44e3d567a5a3cd1b373bd588015296a5a6f3"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "d04c7a2dbdf74fd09f5775c883077583b7d53299",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f69a47002a1fc5bdf4e0c345e61ec955fa664b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f69a47002a1fc5bdf4e0c345e61ec955fa664b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=55f69a47002a1fc5bdf4e0c345e61ec955fa664b",
        "patch": "@@ -13,17 +13,6 @@\n #include <boost/filesystem/convenience.hpp>\n #include <boost/interprocess/sync/file_lock.hpp>\n \n-#if defined(BITCOIN_NEED_QT_PLUGINS) && !defined(_BITCOIN_QT_PLUGINS_INCLUDED)\n-#define _BITCOIN_QT_PLUGINS_INCLUDED\n-#define __INSURE__\n-#include <QtPlugin>\n-Q_IMPORT_PLUGIN(qcncodecs)\n-Q_IMPORT_PLUGIN(qjpcodecs)\n-Q_IMPORT_PLUGIN(qtwcodecs)\n-Q_IMPORT_PLUGIN(qkrcodecs)\n-Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n-#endif\n-\n #ifdef WIN32\n #define strncasecmp strnicmp\n #endif"
      },
      {
        "sha": "738464668fd6d2443debd2e2a1957b23144b502a",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f69a47002a1fc5bdf4e0c345e61ec955fa664b/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f69a47002a1fc5bdf4e0c345e61ec955fa664b/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=55f69a47002a1fc5bdf4e0c345e61ec955fa664b",
        "patch": "@@ -21,6 +21,17 @@\n \n #include <boost/interprocess/ipc/message_queue.hpp>\n \n+#if defined(BITCOIN_NEED_QT_PLUGINS) && !defined(_BITCOIN_QT_PLUGINS_INCLUDED)\n+#define _BITCOIN_QT_PLUGINS_INCLUDED\n+#define __INSURE__\n+#include <QtPlugin>\n+Q_IMPORT_PLUGIN(qcncodecs)\n+Q_IMPORT_PLUGIN(qjpcodecs)\n+Q_IMPORT_PLUGIN(qtwcodecs)\n+Q_IMPORT_PLUGIN(qkrcodecs)\n+Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n+#endif\n+\n // Need a global reference for the notifications to find the GUI\n BitcoinGUI *guiref;\n QSplashScreen *splashref;"
      }
    ]
  },
  {
    "sha": "7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTdiY2NlMmQ5OTJjNmZkNTNmZGM0ZDllYjQwZjIxYzk1MWQ1MzQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-03-24T16:07:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-04T06:46:12Z"
      },
      "message": "Code deduplication: make function in GUIUtil to get connection type to call object slot in GUI thread\nwith invokeMethod.",
      "tree": {
        "sha": "be52dbc136cd0e88a89dfe4487f8ee09d142bfa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be52dbc136cd0e88a89dfe4487f8ee09d142bfa1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55f69a47002a1fc5bdf4e0c345e61ec955fa664b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55f69a47002a1fc5bdf4e0c345e61ec955fa664b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55f69a47002a1fc5bdf4e0c345e61ec955fa664b"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 23,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0f7c96e6a80611fd9a2ffe7089f3100113a449ab",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 18,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347",
        "patch": "@@ -5,14 +5,14 @@\n #include \"clientmodel.h\"\n #include \"walletmodel.h\"\n #include \"optionsmodel.h\"\n+#include \"guiutil.h\"\n \n #include \"headers.h\"\n #include \"init.h\"\n #include \"qtipcserver.h\"\n \n #include <QApplication>\n #include <QMessageBox>\n-#include <QThread>\n #include <QTextCodec>\n #include <QLocale>\n #include <QTranslator>\n@@ -70,15 +70,7 @@ bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindo\n         return true;\n     bool payFee = false;\n \n-    // Call slot on GUI thread.\n-    // If called from another thread, use a blocking QueuedConnection.\n-    Qt::ConnectionType connectionType = Qt::DirectConnection;\n-    if(QThread::currentThread() != QCoreApplication::instance()->thread())\n-    {\n-        connectionType = Qt::BlockingQueuedConnection;\n-    }\n-\n-    QMetaObject::invokeMethod(guiref, \"askFee\", connectionType,\n+    QMetaObject::invokeMethod(guiref, \"askFee\", GUIUtil::blockingGUIThreadConnection(),\n                                Q_ARG(qint64, nFeeRequired),\n                                Q_ARG(bool*, &payFee));\n \n@@ -90,14 +82,7 @@ void ThreadSafeHandleURL(const std::string& strURL)\n     if(!guiref)\n         return;\n \n-    // Call slot on GUI thread.\n-    // If called from another thread, use a blocking QueuedConnection.\n-    Qt::ConnectionType connectionType = Qt::DirectConnection;\n-    if(QThread::currentThread() != QCoreApplication::instance()->thread())\n-    {\n-        connectionType = Qt::BlockingQueuedConnection;\n-    }\n-    QMetaObject::invokeMethod(guiref, \"handleURL\", connectionType,\n+    QMetaObject::invokeMethod(guiref, \"handleURL\", GUIUtil::blockingGUIThreadConnection(),\n                                Q_ARG(QString, QString::fromStdString(strURL)));\n }\n "
      },
      {
        "sha": "ad530a78e4a060cf510cc2773ff4216a714f11ed",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347",
        "patch": "@@ -17,6 +17,7 @@\n #include <QClipboard>\n #include <QFileDialog>\n #include <QDesktopServices>\n+#include <QThread>\n \n QString GUIUtil::dateTimeStr(qint64 nTime)\n {\n@@ -184,3 +185,14 @@ QString GUIUtil::getSaveFileName(QWidget *parent, const QString &caption,\n     return result;\n }\n \n+Qt::ConnectionType GUIUtil::blockingGUIThreadConnection()\n+{\n+    if(QThread::currentThread() != QCoreApplication::instance()->thread())\n+    {\n+        return Qt::BlockingQueuedConnection;\n+    }\n+    else\n+    {\n+        return Qt::DirectConnection;\n+    }\n+}"
      },
      {
        "sha": "06426d76bceb4eb0bdc063e4a10e45b440786260",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347",
        "patch": "@@ -60,6 +60,14 @@ class GUIUtil\n                                    const QString &dir=QString(), const QString &filter=QString(),\n                                    QString *selectedSuffixOut=0);\n \n+\n+    /** Get connection type to call object slot in GUI thread with invokeMethod. The call will be blocking.\n+\n+       @returns If called from the GUI thread, return a Qt::DirectConnection.\n+                If called from another thread, return a Qt::BlockingQueuedConnection.\n+    */\n+    static Qt::ConnectionType blockingGUIThreadConnection();\n+\n };\n \n #endif // GUIUTIL_H"
      }
    ]
  },
  {
    "sha": "98e61758744ed34e8b7f59b37edb6d09b33d5517",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGU2MTc1ODc0NGVkMzRlOGI3ZjU5YjM3ZWRiNmQwOWIzM2Q1NTE3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-03-24T17:48:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-04T07:35:01Z"
      },
      "message": "Update UI through async calls MainFrameRepaint and AddressBookRepaint instead of a timer.\n\n- Overall, this is better design\n- This fixes problems with the address book UI not updating when the address book is changed through RPC\n- Move Statusbar change detection responsibility to ClientModel",
      "tree": {
        "sha": "0eed63fc85d0dbcc851a1fbce8cdcb16b3b5b72c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0eed63fc85d0dbcc851a1fbce8cdcb16b3b5b72c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98e61758744ed34e8b7f59b37edb6d09b33d5517",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98e61758744ed34e8b7f59b37edb6d09b33d5517",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98e61758744ed34e8b7f59b37edb6d09b33d5517",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98e61758744ed34e8b7f59b37edb6d09b33d5517/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e7bcce2d992c6fd53fdc4d9eb40f21c951d5347"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 46,
      "deletions": 54
    },
    "files": [
      {
        "sha": "e4faa2ed090d45cd2febc27f57a3c59d84edffb0",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -67,6 +67,10 @@ inline void MainFrameRepaint()\n {\n }\n \n+inline void AddressBookRepaint()\n+{\n+}\n+\n inline void InitMessage(const std::string &message)\n {\n }"
      },
      {
        "sha": "88212835dee3938c0182912bb14f3870d11897ab",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -94,8 +94,6 @@ void AddressBookPage::setModel(AddressTableModel *model)\n     this->model = model;\n     if(!model)\n         return;\n-    // Refresh list from core\n-    model->updateList();\n \n     proxyModel = new QSortFilterProxyModel(this);\n     proxyModel->setSourceModel(model);"
      },
      {
        "sha": "198a857b2d704ced1b7e4a260342ab0ff23585a7",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -231,7 +231,7 @@ QModelIndex AddressTableModel::index(int row, int column, const QModelIndex & pa\n     }\n }\n \n-void AddressTableModel::updateList()\n+void AddressTableModel::update()\n {\n     // Update address book model from Bitcoin core\n     beginResetModel();\n@@ -285,10 +285,9 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     {\n         return QString();\n     }\n-    // Add entry and update list\n+    // Add entry\n     CRITICAL_BLOCK(wallet->cs_wallet)\n         wallet->SetAddressBookName(strAddress, strLabel);\n-    updateList();\n     return QString::fromStdString(strAddress);\n }\n \n@@ -306,15 +305,9 @@ bool AddressTableModel::removeRows(int row, int count, const QModelIndex & paren\n     {\n         wallet->DelAddressBookName(rec->address.toStdString());\n     }\n-    updateList();\n     return true;\n }\n \n-void AddressTableModel::update()\n-{\n-\n-}\n-\n /* Look up label for address in address book, if not found return empty string.\n  */\n QString AddressTableModel::labelForAddress(const QString &address) const"
      },
      {
        "sha": "7fd07cfb8157da2d2c69ac4d17ffc5c4484c7f4d",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -56,10 +56,6 @@ class AddressTableModel : public QAbstractTableModel\n      */\n     QString addRow(const QString &type, const QString &label, const QString &address);\n \n-    /* Update address list from core. Invalidates any indices.\n-     */\n-    void updateList();\n-\n     /* Look up label for address in address book, if not found return empty string.\n      */\n     QString labelForAddress(const QString &address) const;\n@@ -82,6 +78,8 @@ class AddressTableModel : public QAbstractTableModel\n     void defaultAddressChanged(const QString &address);\n \n public slots:\n+    /* Update address list from core. Invalidates any indices.\n+     */\n     void update();\n };\n "
      },
      {
        "sha": "f330feedbc219056450a16c8bf2be6c2dff331e0",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 4,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -33,8 +33,10 @@ Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n #endif\n \n // Need a global reference for the notifications to find the GUI\n-BitcoinGUI *guiref;\n-QSplashScreen *splashref;\n+static BitcoinGUI *guiref;\n+static QSplashScreen *splashref;\n+static WalletModel *walletmodel;\n+static ClientModel *clientmodel;\n \n int MyMessageBox(const std::string& message, const std::string& caption, int style, wxWindow* parent, int x, int y)\n {\n@@ -98,8 +100,16 @@ void UIThreadCall(boost::function0<void> fn)\n \n void MainFrameRepaint()\n {\n-    if(guiref)\n-        QMetaObject::invokeMethod(guiref, \"refreshStatusBar\", Qt::QueuedConnection);\n+    if(clientmodel)\n+        QMetaObject::invokeMethod(clientmodel, \"update\", Qt::QueuedConnection);\n+    if(walletmodel)\n+        QMetaObject::invokeMethod(walletmodel, \"update\", Qt::QueuedConnection);\n+}\n+\n+void AddressBookRepaint()\n+{\n+    if(walletmodel)\n+        QMetaObject::invokeMethod(walletmodel, \"updateAddressList\", Qt::QueuedConnection);\n }\n \n void InitMessage(const std::string &message)\n@@ -230,7 +240,9 @@ int main(int argc, char *argv[])\n                     splash.finish(&window);\n \n                 ClientModel clientModel(&optionsModel);\n+                clientmodel = &clientModel;\n                 WalletModel walletModel(pwalletMain, &optionsModel);\n+                walletmodel = &walletModel;\n \n                 guiref = &window;\n                 window.setClientModel(&clientModel);\n@@ -270,6 +282,8 @@ int main(int argc, char *argv[])\n                 app.exec();\n \n                 guiref = 0;\n+                clientmodel = 0;\n+                walletmodel = 0;\n             }\n             Shutdown(NULL);\n         }"
      },
      {
        "sha": "f2d1318517662c7091e06ffae3cd7836ffc1b040",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -538,19 +538,6 @@ void BitcoinGUI::setNumBlocks(int count)\n     progressBar->setToolTip(tooltip);\n }\n \n-void BitcoinGUI::refreshStatusBar()\n-{\n-    /* Might display multiple times in the case of multiple alerts\n-    static QString prevStatusBar;\n-    QString newStatusBar = clientModel->getStatusBarWarnings();\n-    if (prevStatusBar != newStatusBar)\n-    {\n-        prevStatusBar = newStatusBar;\n-        error(tr(\"Network Alert\"), newStatusBar);\n-    }*/\n-    setNumBlocks(clientModel->getNumBlocks());\n-}\n-\n void BitcoinGUI::error(const QString &title, const QString &message)\n {\n     // Report errors from network/worker thread"
      },
      {
        "sha": "2130babcbfe94c8b12d1fb742f23ea464b4eec8e",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -113,8 +113,6 @@ public slots:\n        @see WalletModel::EncryptionStatus\n     */\n     void setEncryptionStatus(int status);\n-    /** Set the status bar text if there are any warnings (removes sync progress bar if applicable) */\n-    void refreshStatusBar();\n \n     /** Notify the user of an error in the network or transaction handling code. */\n     void error(const QString &title, const QString &message);"
      },
      {
        "sha": "8163da0915a959260261c6694602be396a9cca0f",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -6,19 +6,12 @@\n \n #include \"headers.h\"\n \n-#include <QTimer>\n #include <QDateTime>\n \n ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), optionsModel(optionsModel),\n     cachedNumConnections(0), cachedNumBlocks(0)\n {\n-    // Until signal notifications is built into the bitcoin core,\n-    //  simply update everything after polling using a timer.\n-    QTimer *timer = new QTimer(this);\n-    connect(timer, SIGNAL(timeout()), this, SLOT(update()));\n-    timer->start(MODEL_UPDATE_DELAY);\n-\n     numBlocksAtStartup = -1;\n }\n \n@@ -47,14 +40,23 @@ void ClientModel::update()\n {\n     int newNumConnections = getNumConnections();\n     int newNumBlocks = getNumBlocks();\n+    QString newStatusBar = getStatusBarWarnings();\n \n     if(cachedNumConnections != newNumConnections)\n         emit numConnectionsChanged(newNumConnections);\n-    if(cachedNumBlocks != newNumBlocks)\n+    if(cachedNumBlocks != newNumBlocks || cachedStatusBar != newStatusBar)\n+    {\n+        // Simply emit a numBlocksChanged for now in case the status message changes,\n+        // so that the view updates the status bar.\n+        // TODO: It should send a notification.\n+        //    (However, this might generate looped notifications and needs to be thought through and tested carefully)\n+        //    error(tr(\"Network Alert\"), newStatusBar);\n         emit numBlocksChanged(newNumBlocks);\n+    }\n \n     cachedNumConnections = newNumConnections;\n     cachedNumBlocks = newNumBlocks;\n+    cachedStatusBar = newStatusBar;\n }\n \n bool ClientModel::isTestNet() const"
      },
      {
        "sha": "3dfbcecc027918e87038bd6823150403fd2cb918",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -43,6 +43,7 @@ class ClientModel : public QObject\n \n     int cachedNumConnections;\n     int cachedNumBlocks;\n+    QString cachedStatusBar;\n \n     int numBlocksAtStartup;\n "
      },
      {
        "sha": "084185492aac61adca4b727f81d968e2a86434ad",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 10,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -7,7 +7,6 @@\n #include \"headers.h\"\n #include \"db.h\" // for BackupWallet\n \n-#include <QTimer>\n #include <QSet>\n \n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n@@ -16,12 +15,6 @@ WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *p\n     cachedBalance(0), cachedUnconfirmedBalance(0), cachedNumTransactions(0),\n     cachedEncryptionStatus(Unencrypted)\n {\n-    // Until signal notifications is built into the bitcoin core,\n-    //  simply update everything after polling using a timer.\n-    QTimer *timer = new QTimer(this);\n-    connect(timer, SIGNAL(timeout()), this, SLOT(update()));\n-    timer->start(MODEL_UPDATE_DELAY);\n-\n     addressTableModel = new AddressTableModel(wallet, this);\n     transactionTableModel = new TransactionTableModel(wallet, this);\n }\n@@ -69,6 +62,11 @@ void WalletModel::update()\n     addressTableModel->update();\n }\n \n+void WalletModel::updateAddressList()\n+{\n+    addressTableModel->update();\n+}\n+\n bool WalletModel::validateAddress(const QString &address)\n {\n     CBitcoinAddress addressParsed(address.toStdString());\n@@ -164,9 +162,6 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n         }\n     }\n \n-    // Update our model of the address table\n-    addressTableModel->updateList();\n-\n     return SendCoinsReturn(OK, 0, hex);\n }\n "
      },
      {
        "sha": "6a85abd6d5bfa1aec0dc280a776ef616c28abc31",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -138,9 +138,8 @@ class WalletModel : public QObject\n     void error(const QString &title, const QString &message);\n \n public slots:\n-\n-private slots:\n     void update();\n+    void updateAddressList();\n };\n \n "
      },
      {
        "sha": "70952da70ee6c5a3ce5906b7a48b1cc5e523ee89",
        "filename": "src/qtui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qtui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/qtui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qtui.h?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -44,6 +44,7 @@ extern void ThreadSafeHandleURL(const std::string& strURL);\n extern void CalledSetStatusBar(const std::string& strText, int nField);\n extern void UIThreadCall(boost::function0<void> fn);\n extern void MainFrameRepaint();\n+extern void AddressBookRepaint();\n extern void InitMessage(const std::string &message);\n extern std::string _(const char* psz);\n "
      },
      {
        "sha": "3bdb4bb565d9598f40e80571f99b02260dd9195c",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98e61758744ed34e8b7f59b37edb6d09b33d5517/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "patch": "@@ -1279,6 +1279,7 @@ int CWallet::LoadWallet(bool& fFirstRunRet)\n bool CWallet::SetAddressBookName(const CBitcoinAddress& address, const string& strName)\n {\n     mapAddressBook[address] = strName;\n+    AddressBookRepaint();\n     if (!fFileBacked)\n         return false;\n     return CWalletDB(strWalletFile).WriteName(address.ToString(), strName);\n@@ -1287,6 +1288,7 @@ bool CWallet::SetAddressBookName(const CBitcoinAddress& address, const string& s\n bool CWallet::DelAddressBookName(const CBitcoinAddress& address)\n {\n     mapAddressBook.erase(address);\n+    AddressBookRepaint();\n     if (!fFileBacked)\n         return false;\n     return CWalletDB(strWalletFile).EraseName(address.ToString());"
      }
    ]
  },
  {
    "sha": "f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGI1ZTllMTE2YTFlYjhiMTliMzY3NmU3ZjhiMTI1ZTkxMmE3OGYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-03-24T18:11:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-04T07:35:01Z"
      },
      "message": "remove unused CalledSetStatusBar and UIThreadCall notifications",
      "tree": {
        "sha": "19299f9d2a096792a36ce53fc3b1352b67ddf348",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19299f9d2a096792a36ce53fc3b1352b67ddf348"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98e61758744ed34e8b7f59b37edb6d09b33d5517",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98e61758744ed34e8b7f59b37edb6d09b33d5517"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 0,
      "deletions": 25
    },
    "files": [
      {
        "sha": "ca589e54f4f83d9e2f19fcedb10bb799a98b3b0a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3",
        "patch": "@@ -3450,8 +3450,6 @@ void static BitcoinMiner(CWallet *pwallet)\n                         dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n                         nHPSTimerStart = GetTimeMillis();\n                         nHashCounter = 0;\n-                        string strStatus = strprintf(\"    %.0f khash/s\", dHashesPerSec/1000.0);\n-                        UIThreadCall(boost::bind(CalledSetStatusBar, strStatus, 0));\n                         static int64 nLogTime;\n                         if (GetTime() - nLogTime > 30 * 60)\n                         {\n@@ -3508,7 +3506,6 @@ void static ThreadBitcoinMiner(void* parg)\n         vnThreadsRunning[THREAD_MINER]--;\n         PrintException(NULL, \"ThreadBitcoinMiner()\");\n     }\n-    UIThreadCall(boost::bind(CalledSetStatusBar, \"\", 0));\n     nHPSTimerStart = 0;\n     if (vnThreadsRunning[THREAD_MINER] == 0)\n         dHashesPerSec = 0;"
      },
      {
        "sha": "e91cca3cfdeb3cfb58f06674760f0ad0456a01f1",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3",
        "patch": "@@ -6,7 +6,6 @@\n #define BITCOIN_NOUI_H\n \n #include <string>\n-#include <boost/function.hpp>\n #include \"wallet.h\"\n \n typedef void wxWindow;\n@@ -55,14 +54,6 @@ inline bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption,\n     return true;\n }\n \n-inline void CalledSetStatusBar(const std::string& strText, int nField)\n-{\n-}\n-\n-inline void UIThreadCall(boost::function0<void> fn)\n-{\n-}\n-\n inline void MainFrameRepaint()\n {\n }"
      },
      {
        "sha": "e91855bec4e5554ed55f0d2f3c5ed463681195d6",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3",
        "patch": "@@ -88,16 +88,6 @@ void ThreadSafeHandleURL(const std::string& strURL)\n                                Q_ARG(QString, QString::fromStdString(strURL)));\n }\n \n-void CalledSetStatusBar(const std::string& strText, int nField)\n-{\n-    // Only used for built-in mining, which is disabled, simple ignore\n-}\n-\n-void UIThreadCall(boost::function0<void> fn)\n-{\n-    // Only used for built-in mining, which is disabled, simple ignore\n-}\n-\n void MainFrameRepaint()\n {\n     if(clientmodel)"
      },
      {
        "sha": "662b231cde3da96c41f480aa9f91eba08b0c1739",
        "filename": "src/qtui.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3/src/qtui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3/src/qtui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qtui.h?ref=f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3",
        "patch": "@@ -5,7 +5,6 @@\n #define BITCOIN_EXTERNUI_H\n \n #include <string>\n-#include <boost/function/function0.hpp>\n #include \"wallet.h\"\n \n typedef void wxWindow;\n@@ -41,8 +40,6 @@ extern int MyMessageBox(const std::string& message, const std::string& caption=\"\n extern int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1);\n extern bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent);\n extern void ThreadSafeHandleURL(const std::string& strURL);\n-extern void CalledSetStatusBar(const std::string& strText, int nField);\n-extern void UIThreadCall(boost::function0<void> fn);\n extern void MainFrameRepaint();\n extern void AddressBookRepaint();\n extern void InitMessage(const std::string &message);"
      }
    ]
  },
  {
    "sha": "6cb6d623479c5dd42d91de7a4d391078d0800e54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2I2ZDYyMzQ3OWM1ZGQ0MmQ5MWRlN2E0ZDM5MTA3OGQwODAwZTU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-03-24T19:07:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-04T07:35:01Z"
      },
      "message": "remove dependency on serialize.h and util.h for SecureString",
      "tree": {
        "sha": "22cd56f5bbda2cad0ea2ef654ef6548bee99a5eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22cd56f5bbda2cad0ea2ef654ef6548bee99a5eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cb6d623479c5dd42d91de7a4d391078d0800e54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cb6d623479c5dd42d91de7a4d391078d0800e54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cb6d623479c5dd42d91de7a4d391078d0800e54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cb6d623479c5dd42d91de7a4d391078d0800e54/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0b5e9e116a1eb8b19b3676e7f8b125e912a78f3"
      }
    ],
    "stats": {
      "total": 242,
      "additions": 125,
      "deletions": 117
    },
    "files": [
      {
        "sha": "a2bf4010e5c43ea9866b3f45ca84ce0b0d0cc5ff",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cb6d623479c5dd42d91de7a4d391078d0800e54/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cb6d623479c5dd42d91de7a4d391078d0800e54/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=6cb6d623479c5dd42d91de7a4d391078d0800e54",
        "patch": "@@ -155,7 +155,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/askpassphrasedialog.h \\\n     src/protocol.h \\\n     src/qt/notificator.h \\\n-    src/qt/qtipcserver.h\n+    src/qt/qtipcserver.h \\\n+    src/allocators.h\n \n SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/transactiontablemodel.cpp \\"
      },
      {
        "sha": "85d9cfbbb8f827bb1586291faaf6df34686bc997",
        "filename": "src/allocators.h",
        "status": "added",
        "additions": 119,
        "deletions": 0,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cb6d623479c5dd42d91de7a4d391078d0800e54/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cb6d623479c5dd42d91de7a4d391078d0800e54/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=6cb6d623479c5dd42d91de7a4d391078d0800e54",
        "patch": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_ALLOCATORS_H\n+#define BITCOIN_ALLOCATORS_H\n+\n+#include <string>\n+\n+#ifdef WIN32\n+#define _WIN32_WINNT 0x0501\n+#define WIN32_LEAN_AND_MEAN 1\n+#ifndef NOMINMAX\n+#define NOMINMAX\n+#endif\n+#include <windows.h>\n+// This is used to attempt to keep keying material out of swap\n+// Note that VirtualLock does not provide this as a guarantee on Windows,\n+// but, in practice, memory that has been VirtualLock'd almost never gets written to\n+// the pagefile except in rare circumstances where memory is extremely low.\n+#define mlock(p, n) VirtualLock((p), (n));\n+#define munlock(p, n) VirtualUnlock((p), (n));\n+#else\n+#include <sys/mman.h>\n+#include <limits.h>\n+/* This comes from limits.h if it's not defined there set a sane default */\n+#ifndef PAGESIZE\n+#include <unistd.h>\n+#define PAGESIZE sysconf(_SC_PAGESIZE)\n+#endif\n+#define mlock(a,b) \\\n+  mlock(((void *)(((size_t)(a)) & (~((PAGESIZE)-1)))),\\\n+  (((((size_t)(a)) + (b) - 1) | ((PAGESIZE) - 1)) + 1) - (((size_t)(a)) & (~((PAGESIZE) - 1))))\n+#define munlock(a,b) \\\n+  munlock(((void *)(((size_t)(a)) & (~((PAGESIZE)-1)))),\\\n+  (((((size_t)(a)) + (b) - 1) | ((PAGESIZE) - 1)) + 1) - (((size_t)(a)) & (~((PAGESIZE) - 1))))\n+#endif\n+\n+//\n+// Allocator that locks its contents from being paged\n+// out of memory and clears its contents before deletion.\n+//\n+template<typename T>\n+struct secure_allocator : public std::allocator<T>\n+{\n+    // MSVC8 default copy constructor is broken\n+    typedef std::allocator<T> base;\n+    typedef typename base::size_type size_type;\n+    typedef typename base::difference_type  difference_type;\n+    typedef typename base::pointer pointer;\n+    typedef typename base::const_pointer const_pointer;\n+    typedef typename base::reference reference;\n+    typedef typename base::const_reference const_reference;\n+    typedef typename base::value_type value_type;\n+    secure_allocator() throw() {}\n+    secure_allocator(const secure_allocator& a) throw() : base(a) {}\n+    template <typename U>\n+    secure_allocator(const secure_allocator<U>& a) throw() : base(a) {}\n+    ~secure_allocator() throw() {}\n+    template<typename _Other> struct rebind\n+    { typedef secure_allocator<_Other> other; };\n+\n+    T* allocate(std::size_t n, const void *hint = 0)\n+    {\n+        T *p;\n+        p = std::allocator<T>::allocate(n, hint);\n+        if (p != NULL)\n+            mlock(p, sizeof(T) * n);\n+        return p;\n+    }\n+\n+    void deallocate(T* p, std::size_t n)\n+    {\n+        if (p != NULL)\n+        {\n+            memset(p, 0, sizeof(T) * n);\n+            munlock(p, sizeof(T) * n);\n+        }\n+        std::allocator<T>::deallocate(p, n);\n+    }\n+};\n+\n+\n+//\n+// Allocator that clears its contents before deletion.\n+//\n+template<typename T>\n+struct zero_after_free_allocator : public std::allocator<T>\n+{\n+    // MSVC8 default copy constructor is broken\n+    typedef std::allocator<T> base;\n+    typedef typename base::size_type size_type;\n+    typedef typename base::difference_type  difference_type;\n+    typedef typename base::pointer pointer;\n+    typedef typename base::const_pointer const_pointer;\n+    typedef typename base::reference reference;\n+    typedef typename base::const_reference const_reference;\n+    typedef typename base::value_type value_type;\n+    zero_after_free_allocator() throw() {}\n+    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}\n+    template <typename U>\n+    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a) {}\n+    ~zero_after_free_allocator() throw() {}\n+    template<typename _Other> struct rebind\n+    { typedef zero_after_free_allocator<_Other> other; };\n+\n+    void deallocate(T* p, std::size_t n)\n+    {\n+        if (p != NULL)\n+            memset(p, 0, sizeof(T) * n);\n+        std::allocator<T>::deallocate(p, n);\n+    }\n+};\n+\n+// This is exactly like std::string, but with a custom allocator.\n+// (secure_allocator<> is defined in serialize.h)\n+typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;\n+\n+#endif"
      },
      {
        "sha": "59a005a22018036d3bca76ea300acd7529301b61",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cb6d623479c5dd42d91de7a4d391078d0800e54/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cb6d623479c5dd42d91de7a4d391078d0800e54/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=6cb6d623479c5dd42d91de7a4d391078d0800e54",
        "patch": "@@ -4,7 +4,7 @@\n #ifndef __CRYPTER_H__\n #define __CRYPTER_H__\n \n-#include \"util.h\" /* for SecureString */\n+#include \"allocators.h\" /* for SecureString */\n #include \"key.h\"\n \n const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;"
      },
      {
        "sha": "6c62b5b4af07ef01052238dcbc3825f7be20e4f2",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cb6d623479c5dd42d91de7a4d391078d0800e54/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cb6d623479c5dd42d91de7a4d391078d0800e54/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=6cb6d623479c5dd42d91de7a4d391078d0800e54",
        "patch": "@@ -3,7 +3,7 @@\n \n #include <QObject>\n \n-#include \"util.h\"\n+#include \"allocators.h\" /* for SecureString */\n \n class OptionsModel;\n class AddressTableModel;"
      },
      {
        "sha": "2d4aaba6a9f609b11ab2598e3cc7edf902e0f4b6",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 2,
        "deletions": 104,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cb6d623479c5dd42d91de7a4d391078d0800e54/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cb6d623479c5dd42d91de7a4d391078d0800e54/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=6cb6d623479c5dd42d91de7a4d391078d0800e54",
        "patch": "@@ -19,38 +19,11 @@\n #include <boost/tuple/tuple_comparison.hpp>\n #include <boost/tuple/tuple_io.hpp>\n \n+#include \"allocators.h\"\n+\n typedef long long  int64;\n typedef unsigned long long  uint64;\n \n-#ifdef WIN32\n-#define _WIN32_WINNT 0x0501\n-#define WIN32_LEAN_AND_MEAN 1\n-#ifndef NOMINMAX\n-#define NOMINMAX\n-#endif\n-#include <windows.h>\n-// This is used to attempt to keep keying material out of swap\n-// Note that VirtualLock does not provide this as a guarantee on Windows,\n-// but, in practice, memory that has been VirtualLock'd almost never gets written to\n-// the pagefile except in rare circumstances where memory is extremely low.\n-#define mlock(p, n) VirtualLock((p), (n));\n-#define munlock(p, n) VirtualUnlock((p), (n));\n-#else\n-#include <sys/mman.h>\n-#include <limits.h>\n-/* This comes from limits.h if it's not defined there set a sane default */\n-#ifndef PAGESIZE\n-#include <unistd.h>\n-#define PAGESIZE sysconf(_SC_PAGESIZE)\n-#endif\n-#define mlock(a,b) \\\n-  mlock(((void *)(((size_t)(a)) & (~((PAGESIZE)-1)))),\\\n-  (((((size_t)(a)) + (b) - 1) | ((PAGESIZE) - 1)) + 1) - (((size_t)(a)) & (~((PAGESIZE) - 1))))\n-#define munlock(a,b) \\\n-  munlock(((void *)(((size_t)(a)) & (~((PAGESIZE)-1)))),\\\n-  (((((size_t)(a)) + (b) - 1) | ((PAGESIZE) - 1)) + 1) - (((size_t)(a)) & (~((PAGESIZE) - 1))))\n-#endif\n-\n class CScript;\n class CDataStream;\n class CAutoFile;\n@@ -779,81 +752,6 @@ struct ser_streamplaceholder\n \n \n \n-//\n-// Allocator that locks its contents from being paged\n-// out of memory and clears its contents before deletion.\n-//\n-template<typename T>\n-struct secure_allocator : public std::allocator<T>\n-{\n-    // MSVC8 default copy constructor is broken\n-    typedef std::allocator<T> base;\n-    typedef typename base::size_type size_type;\n-    typedef typename base::difference_type  difference_type;\n-    typedef typename base::pointer pointer;\n-    typedef typename base::const_pointer const_pointer;\n-    typedef typename base::reference reference;\n-    typedef typename base::const_reference const_reference;\n-    typedef typename base::value_type value_type;\n-    secure_allocator() throw() {}\n-    secure_allocator(const secure_allocator& a) throw() : base(a) {}\n-    template <typename U>\n-    secure_allocator(const secure_allocator<U>& a) throw() : base(a) {}\n-    ~secure_allocator() throw() {}\n-    template<typename _Other> struct rebind\n-    { typedef secure_allocator<_Other> other; };\n-\n-    T* allocate(std::size_t n, const void *hint = 0)\n-    {\n-        T *p;\n-        p = std::allocator<T>::allocate(n, hint);\n-        if (p != NULL)\n-            mlock(p, sizeof(T) * n);\n-        return p;\n-    }\n-\n-    void deallocate(T* p, std::size_t n)\n-    {\n-        if (p != NULL)\n-        {\n-            memset(p, 0, sizeof(T) * n);\n-            munlock(p, sizeof(T) * n);\n-        }\n-        std::allocator<T>::deallocate(p, n);\n-    }\n-};\n-\n-\n-//\n-// Allocator that clears its contents before deletion.\n-//\n-template<typename T>\n-struct zero_after_free_allocator : public std::allocator<T>\n-{\n-    // MSVC8 default copy constructor is broken\n-    typedef std::allocator<T> base;\n-    typedef typename base::size_type size_type;\n-    typedef typename base::difference_type  difference_type;\n-    typedef typename base::pointer pointer;\n-    typedef typename base::const_pointer const_pointer;\n-    typedef typename base::reference reference;\n-    typedef typename base::const_reference const_reference;\n-    typedef typename base::value_type value_type;\n-    zero_after_free_allocator() throw() {}\n-    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}\n-    template <typename U>\n-    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a) {}\n-    ~zero_after_free_allocator() throw() {}\n-    template<typename _Other> struct rebind\n-    { typedef zero_after_free_allocator<_Other> other; };\n-\n-    void deallocate(T* p, std::size_t n)\n-    {\n-        if (p != NULL)\n-            memset(p, 0, sizeof(T) * n);\n-        std::allocator<T>::deallocate(p, n);\n-    }\n-};\n \n \n "
      },
      {
        "sha": "0b73549dc7ccdfd3e4c2a7653356792219d12b47",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cb6d623479c5dd42d91de7a4d391078d0800e54/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cb6d623479c5dd42d91de7a4d391078d0800e54/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=6cb6d623479c5dd42d91de7a4d391078d0800e54",
        "patch": "@@ -267,16 +267,6 @@ class CTryCriticalBlock\n \n \n \n-\n-\n-// This is exactly like std::string, but with a custom allocator.\n-// (secure_allocator<> is defined in serialize.h)\n-typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;\n-\n-\n-\n-\n-\n inline std::string i64tostr(int64 n)\n {\n     return strprintf(\"%\"PRI64d, n);"
      }
    ]
  },
  {
    "sha": "5d7cebdadc991a23195a3519c1e9c038cb4f2290",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDdjZWJkYWRjOTkxYTIzMTk1YTM1MTljMWU5YzAzOGNiNGYyMjkw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-03-24T20:13:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-04T07:35:01Z"
      },
      "message": "move translation function _ to qtui.h/noui.h instead of util.h",
      "tree": {
        "sha": "6745cc91af29ad9a7bffc25735dee6d7d904b704",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6745cc91af29ad9a7bffc25735dee6d7d904b704"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d7cebdadc991a23195a3519c1e9c038cb4f2290",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d7cebdadc991a23195a3519c1e9c038cb4f2290",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d7cebdadc991a23195a3519c1e9c038cb4f2290",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d7cebdadc991a23195a3519c1e9c038cb4f2290/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cb6d623479c5dd42d91de7a4d391078d0800e54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cb6d623479c5dd42d91de7a4d391078d0800e54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cb6d623479c5dd42d91de7a4d391078d0800e54"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 5,
      "deletions": 7
    },
    "files": [
      {
        "sha": "4010ec3c7c2ec4caad88c3762dfe7d009bf238f3",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d7cebdadc991a23195a3519c1e9c038cb4f2290/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d7cebdadc991a23195a3519c1e9c038cb4f2290/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=5d7cebdadc991a23195a3519c1e9c038cb4f2290",
        "patch": "@@ -66,4 +66,9 @@ inline void InitMessage(const std::string &message)\n {\n }\n \n+inline const char* _(const char* psz)\n+{\n+    return psz;\n+}\n+\n #endif"
      },
      {
        "sha": "e4cf83f4337c57204c1c0e995e12a520fcf4eb4c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d7cebdadc991a23195a3519c1e9c038cb4f2290/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d7cebdadc991a23195a3519c1e9c038cb4f2290/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=5d7cebdadc991a23195a3519c1e9c038cb4f2290",
        "patch": "@@ -95,13 +95,6 @@ inline void Sleep(int64 n)\n }\n #endif\n \n-#if !defined(QT_GUI)\n-inline const char* _(const char* psz)\n-{\n-    return psz;\n-}\n-#endif\n-\n \n \n "
      }
    ]
  },
  {
    "sha": "1a3f0da9229a8e524d1010cdc8bd3b9da71fe529",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTNmMGRhOTIyOWE4ZTUyNGQxMDEwY2RjOGJkM2I5ZGE3MWZlNTI5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-03-25T18:17:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-04T07:35:01Z"
      },
      "message": "support RPC stop and encryptwallet with UI",
      "tree": {
        "sha": "ea477d499012b9bbf16402284260c95b43e2cb1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea477d499012b9bbf16402284260c95b43e2cb1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d7cebdadc991a23195a3519c1e9c038cb4f2290",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d7cebdadc991a23195a3519c1e9c038cb4f2290",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d7cebdadc991a23195a3519c1e9c038cb4f2290"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 17,
      "deletions": 15
    },
    "files": [
      {
        "sha": "e511505c1d43af24b75a5c9bec5ffd2c3912f55b",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 14,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=1a3f0da9229a8e524d1010cdc8bd3b9da71fe529",
        "patch": "@@ -221,13 +221,9 @@ Value stop(const Array& params, bool fHelp)\n         throw runtime_error(\n             \"stop\\n\"\n             \"Stop bitcoin server.\");\n-#ifndef QT_GUI\n     // Shutdown will take long enough that the response should get back\n-    CreateThread(Shutdown, NULL);\n+    QueueShutdown();\n     return \"bitcoin server stopping\";\n-#else\n-    throw runtime_error(\"NYI: cannot shut down GUI with RPC command\");\n-#endif\n }\n \n \n@@ -1676,11 +1672,6 @@ Value encryptwallet(const Array& params, bool fHelp)\n     if (pwalletMain->IsCrypted())\n         throw JSONRPCError(-15, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n \n-#ifdef QT_GUI\n-    // shutting down via RPC while the GUI is running does not work (yet):\n-    throw runtime_error(\"Not Yet Implemented: use GUI to encrypt wallet, not RPC command\");\n-#endif\n-\n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n     // Alternately, find a way to make params[0] mlock()'d to begin with.\n     SecureString strWalletPass;\n@@ -1698,7 +1689,7 @@ Value encryptwallet(const Array& params, bool fHelp)\n     // BDB seems to have a bad habit of writing old data into\n     // slack space in .dat files; that is bad if the old data is\n     // unencrypted private keys.  So:\n-    CreateThread(Shutdown, NULL);\n+    QueueShutdown();\n     return \"wallet encrypted; bitcoin server stopping, restart to run with encrypted wallet\";\n }\n \n@@ -2381,9 +2372,7 @@ void ThreadRPCServer2(void* parg)\n                 strWhatAmI.c_str(),\n                 GetConfigFile().c_str(),\n                 EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32).c_str());\n-#ifndef QT_GUI\n-        CreateThread(Shutdown, NULL);\n-#endif\n+        QueueShutdown();\n         return;\n     }\n "
      },
      {
        "sha": "19a6c08f8a751e895aaab37bc2a266741b9d09bb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1a3f0da9229a8e524d1010cdc8bd3b9da71fe529",
        "patch": "@@ -1812,7 +1812,7 @@ bool CheckDiskSpace(uint64 nAdditionalBytes)\n         strMiscWarning = strMessage;\n         printf(\"*** %s\\n\", strMessage.c_str());\n         ThreadSafeMessageBox(strMessage, \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n-        CreateThread(Shutdown, NULL);\n+        QueueShutdown();\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "0cb42ca0a4c2ef6e52f41cb77631cae5ce16130d",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=1a3f0da9229a8e524d1010cdc8bd3b9da71fe529",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <string>\n #include \"wallet.h\"\n+#include \"init.h\"\n \n typedef void wxWindow;\n #define wxYES                   0x00000002\n@@ -71,4 +72,10 @@ inline const char* _(const char* psz)\n     return psz;\n }\n \n+inline void QueueShutdown()\n+{\n+    // Without UI, Shutdown can simply be started in a new thread\n+    CreateThread(Shutdown, NULL);\n+}\n+\n #endif"
      },
      {
        "sha": "f566476e661866842f0efd39b932b04fb3fa561e",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=1a3f0da9229a8e524d1010cdc8bd3b9da71fe529",
        "patch": "@@ -111,6 +111,11 @@ void InitMessage(const std::string &message)\n     }\n }\n \n+void QueueShutdown()\n+{\n+    QMetaObject::invokeMethod(QCoreApplication::instance(), \"quit\", Qt::QueuedConnection);\n+}\n+\n /*\n    Translate string to current locale using Qt.\n  */"
      },
      {
        "sha": "07451e5f5e178ffb35d53b31da9c00dc11f29b0d",
        "filename": "src/qtui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529/src/qtui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529/src/qtui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qtui.h?ref=1a3f0da9229a8e524d1010cdc8bd3b9da71fe529",
        "patch": "@@ -42,6 +42,7 @@ extern bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption,\n extern void ThreadSafeHandleURL(const std::string& strURL);\n extern void MainFrameRepaint();\n extern void AddressBookRepaint();\n+extern void QueueShutdown();\n extern void InitMessage(const std::string &message);\n extern std::string _(const char* psz);\n "
      }
    ]
  },
  {
    "sha": "7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2ZiZTFmZWU0NjVlODJkZGJkYzhlZDE3ZGZjY2U3OTFiZDc2NWY1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-03-25T18:47:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-04T07:37:25Z"
      },
      "message": "qtui.h/noui.h interface cleanup\n\n- rename wxMessageBox, remove redundant arguments to noui/qtui calls\n- also, add flag to force blocking, modal dialog box for disk space warning etc\n- clarify function naming\n- no more special MessageBox needed from AppInit2, as window object is created before calling AppInit2",
      "tree": {
        "sha": "0888d0c52e49ffa0f683bbd927d738971f4a5dbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0888d0c52e49ffa0f683bbd927d738971f4a5dbc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a3f0da9229a8e524d1010cdc8bd3b9da71fe529",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a3f0da9229a8e524d1010cdc8bd3b9da71fe529"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 47,
      "deletions": 51
    },
    "files": [
      {
        "sha": "eecbc83edb3b1b979f654a3cc7a82e9239f44249",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -237,7 +237,7 @@ bool AppInit2(int argc, char* argv[])\n         strUsage.erase(std::remove(strUsage.begin(), strUsage.end(), '\\t'), strUsage.end());\n #if defined(QT_GUI) && defined(WIN32)\n         // On windows, show a message box, as there is no stderr\n-        wxMessageBox(strUsage, \"Usage\");\n+        ThreadSafeMessageBox(strUsage, _(\"Usage\"), wxOK | wxMODAL);\n #else\n         fprintf(stderr, \"%s\", strUsage.c_str());\n #endif\n@@ -326,7 +326,7 @@ bool AppInit2(int argc, char* argv[])\n     static boost::interprocess::file_lock lock(strLockFile.c_str());\n     if (!lock.try_lock())\n     {\n-        wxMessageBox(strprintf(_(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), GetDataDir().c_str()), \"Bitcoin\");\n+        ThreadSafeMessageBox(strprintf(_(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), GetDataDir().c_str()), _(\"Bitcoin\"), wxOK|wxMODAL);\n         return false;\n     }\n \n@@ -368,7 +368,7 @@ bool AppInit2(int argc, char* argv[])\n         {\n             strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n             printf(\"%s\", strErrors.str().c_str());\n-            wxMessageBox(strErrors.str(), \"Bitcoin\", wxOK | wxICON_ERROR);\n+            ThreadSafeMessageBox(strErrors.str(), _(\"Bitcoin\"), wxOK | wxICON_ERROR | wxMODAL);\n             return false;\n         }\n         else\n@@ -440,7 +440,7 @@ bool AppInit2(int argc, char* argv[])\n \n     if (!strErrors.str().empty())\n     {\n-        wxMessageBox(strErrors.str(), \"Bitcoin\", wxOK | wxICON_ERROR);\n+        ThreadSafeMessageBox(strErrors.str(), _(\"Bitcoin\"), wxOK | wxICON_ERROR | wxMODAL);\n         return false;\n     }\n \n@@ -496,7 +496,7 @@ bool AppInit2(int argc, char* argv[])\n         addrProxy = CService(mapArgs[\"-proxy\"], 9050);\n         if (!addrProxy.IsValid())\n         {\n-            wxMessageBox(_(\"Invalid -proxy address\"), \"Bitcoin\");\n+            ThreadSafeMessageBox(_(\"Invalid -proxy address\"), _(\"Bitcoin\"), wxOK | wxMODAL);\n             return false;\n         }\n     }\n@@ -527,7 +527,7 @@ bool AppInit2(int argc, char* argv[])\n         std::string strError;\n         if (!BindListenPort(strError))\n         {\n-            wxMessageBox(strError, \"Bitcoin\");\n+            ThreadSafeMessageBox(strError, _(\"Bitcoin\"), wxOK | wxMODAL);\n             return false;\n         }\n     }\n@@ -547,11 +547,11 @@ bool AppInit2(int argc, char* argv[])\n     {\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nTransactionFee))\n         {\n-            wxMessageBox(_(\"Invalid amount for -paytxfee=<amount>\"), \"Bitcoin\");\n+            ThreadSafeMessageBox(_(\"Invalid amount for -paytxfee=<amount>\"), _(\"Bitcoin\"), wxOK | wxMODAL);\n             return false;\n         }\n         if (nTransactionFee > 0.25 * COIN)\n-            wxMessageBox(_(\"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"), \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n+            ThreadSafeMessageBox(_(\"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"), _(\"Bitcoin\"), wxOK | wxICON_EXCLAMATION | wxMODAL);\n     }\n \n     //\n@@ -563,7 +563,7 @@ bool AppInit2(int argc, char* argv[])\n     RandAddSeedPerfmon();\n \n     if (!CreateThread(StartNode, NULL))\n-        wxMessageBox(_(\"Error: CreateThread(StartNode) failed\"), \"Bitcoin\");\n+        ThreadSafeMessageBox(_(\"Error: CreateThread(StartNode) failed\"), _(\"Bitcoin\"), wxOK | wxMODAL);\n \n     if (fServer)\n         CreateThread(ThreadRPCServer, NULL);"
      },
      {
        "sha": "7c49316b4a062de1cd4adafa5d228bfb5024bbf0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -1811,7 +1811,7 @@ bool CheckDiskSpace(uint64 nAdditionalBytes)\n         string strMessage = _(\"Warning: Disk space is low  \");\n         strMiscWarning = strMessage;\n         printf(\"*** %s\\n\", strMessage.c_str());\n-        ThreadSafeMessageBox(strMessage, \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n+        ThreadSafeMessageBox(strMessage, \"Bitcoin\", wxOK | wxICON_EXCLAMATION | wxMODAL);\n         QueueShutdown();\n         return false;\n     }"
      },
      {
        "sha": "4ae57365a6cc3bc9c82b71e5acf4dec2dfd995f9",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -9,7 +9,6 @@\n #include \"wallet.h\"\n #include \"init.h\"\n \n-typedef void wxWindow;\n #define wxYES                   0x00000002\n #define wxOK                    0x00000004\n #define wxNO                    0x00000008\n@@ -36,21 +35,17 @@ typedef void wxWindow;\n #define wxHELP                  0x00008000\n #define wxMORE                  0x00010000\n #define wxSETUP                 0x00020000\n+// Force blocking, modal message box dialog (not just notification)\n+#define wxMODAL                 0x00040000\n \n-inline int MyMessageBox(const std::string& message, const std::string& caption=\"Message\", int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1)\n+inline int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK)\n {\n     printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n     fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n     return 4;\n }\n-#define wxMessageBox  MyMessageBox\n \n-inline int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1)\n-{\n-    return MyMessageBox(message, caption, style, parent, x, y);\n-}\n-\n-inline bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent)\n+inline bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n {\n     return true;\n }"
      },
      {
        "sha": "394e4a76616b8c456c1bae28c418e6eed04b6263",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 17,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -38,23 +38,18 @@ static QSplashScreen *splashref;\n static WalletModel *walletmodel;\n static ClientModel *clientmodel;\n \n-int MyMessageBox(const std::string& message, const std::string& caption, int style, wxWindow* parent, int x, int y)\n-{\n-    // Message from AppInit2(), always in main thread before main window is constructed\n-    QMessageBox::critical(0, QString::fromStdString(caption),\n-        QString::fromStdString(message),\n-        QMessageBox::Ok, QMessageBox::Ok);\n-    return 4;\n-}\n-\n-int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style, wxWindow* parent, int x, int y)\n+int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n {\n     // Message from network thread\n     if(guiref)\n     {\n-        QMetaObject::invokeMethod(guiref, \"error\", Qt::QueuedConnection,\n+        bool modal = (style & wxMODAL);\n+        // in case of modal message, use blocking connection to wait for user to click OK\n+        QMetaObject::invokeMethod(guiref, \"error\",\n+                                   modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n                                    Q_ARG(QString, QString::fromStdString(caption)),\n-                                   Q_ARG(QString, QString::fromStdString(message)));\n+                                   Q_ARG(QString, QString::fromStdString(message)),\n+                                   Q_ARG(bool, modal));\n     }\n     else\n     {\n@@ -64,7 +59,7 @@ int ThreadSafeMessageBox(const std::string& message, const std::string& caption,\n     return 4;\n }\n \n-bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent)\n+bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n {\n     if(!guiref)\n         return false;\n@@ -222,15 +217,16 @@ int main(int argc, char *argv[])\n \n     try\n     {\n+        BitcoinGUI window;\n+        guiref = &window;\n         if(AppInit2(argc, argv))\n         {\n             {\n-                // Put this in a block, so that BitcoinGUI is cleaned up properly before\n-                // calling Shutdown() in case of exceptions.\n+                // Put this in a block, so that the Model objects are cleaned up before\n+                // calling Shutdown().\n \n                 optionsModel.Upgrade(); // Must be done after AppInit2\n \n-                BitcoinGUI window;\n                 if (splashref)\n                     splash.finish(&window);\n \n@@ -239,7 +235,6 @@ int main(int argc, char *argv[])\n                 WalletModel walletModel(pwalletMain, &optionsModel);\n                 walletmodel = &walletModel;\n \n-                guiref = &window;\n                 window.setClientModel(&clientModel);\n                 window.setWalletModel(&walletModel);\n \n@@ -276,6 +271,8 @@ int main(int argc, char *argv[])\n #endif\n                 app.exec();\n \n+                window.setClientModel(0);\n+                window.setWalletModel(0);\n                 guiref = 0;\n                 clientmodel = 0;\n                 walletmodel = 0;"
      },
      {
        "sha": "c65a26debb7be5f3763d33502ac144a80ea5599c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -336,7 +336,7 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n \n         // Report errors from network/worker thread\n-        connect(clientModel, SIGNAL(error(QString,QString)), this, SLOT(error(QString,QString)));\n+        connect(clientModel, SIGNAL(error(QString,QString, bool)), this, SLOT(error(QString,QString,bool)));\n     }\n }\n \n@@ -346,7 +346,7 @@ void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n     if(walletModel)\n     {\n         // Report errors from wallet thread\n-        connect(walletModel, SIGNAL(error(QString,QString)), this, SLOT(error(QString,QString)));\n+        connect(walletModel, SIGNAL(error(QString,QString,bool)), this, SLOT(error(QString,QString,bool)));\n \n         // Put transaction list in tabs\n         transactionView->setModel(walletModel);\n@@ -538,10 +538,15 @@ void BitcoinGUI::setNumBlocks(int count)\n     progressBar->setToolTip(tooltip);\n }\n \n-void BitcoinGUI::error(const QString &title, const QString &message)\n+void BitcoinGUI::error(const QString &title, const QString &message, bool modal)\n {\n     // Report errors from network/worker thread\n-    notificator->notify(Notificator::Critical, title, message);\n+    if(modal)\n+    {\n+        QMessageBox::critical(this, title, message, QMessageBox::Ok, QMessageBox::Ok);\n+    } else {\n+        notificator->notify(Notificator::Critical, title, message);\n+    }\n }\n \n void BitcoinGUI::changeEvent(QEvent *e)"
      },
      {
        "sha": "c684d7cc3a9c5cf7accacf3e369a1d5dc7b32af7",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -115,7 +115,7 @@ public slots:\n     void setEncryptionStatus(int status);\n \n     /** Notify the user of an error in the network or transaction handling code. */\n-    void error(const QString &title, const QString &message);\n+    void error(const QString &title, const QString &message, bool modal);\n     /** Asks the user whether to pay the transaction fee or to cancel the transaction.\n        It is currently not possible to pass a return value to another thread through\n        BlockingQueuedConnection, so an indirected pointer is used."
      },
      {
        "sha": "6366b4d617935ed51071280568ea886ba8db7e9b",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -52,7 +52,7 @@ class ClientModel : public QObject\n     void numBlocksChanged(int count);\n \n     //! Asynchronous error notification\n-    void error(const QString &title, const QString &message);\n+    void error(const QString &title, const QString &message, bool modal);\n \n public slots:\n "
      },
      {
        "sha": "6cc023792d1950629e33d1fd14a1a3bc9406141f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -140,7 +140,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n             }\n             return TransactionCreationFailed;\n         }\n-        if(!ThreadSafeAskFee(nFeeRequired, tr(\"Sending...\").toStdString(), NULL))\n+        if(!ThreadSafeAskFee(nFeeRequired, tr(\"Sending...\").toStdString()))\n         {\n             return Aborted;\n         }"
      },
      {
        "sha": "c4468171a86c161fef7ae1bedfc0870120ae83ab",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -135,7 +135,7 @@ class WalletModel : public QObject\n     void requireUnlock();\n \n     // Asynchronous error notification\n-    void error(const QString &title, const QString &message);\n+    void error(const QString &title, const QString &message, bool modal);\n \n public slots:\n     void update();"
      },
      {
        "sha": "405fc497c671cd36d0c63473bad353c0d9e65d37",
        "filename": "src/qtui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qtui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/qtui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qtui.h?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -7,7 +7,6 @@\n #include <string>\n #include \"wallet.h\"\n \n-typedef void wxWindow;\n #define wxYES                   0x00000002\n #define wxOK                    0x00000004\n #define wxNO                    0x00000008\n@@ -34,11 +33,11 @@ typedef void wxWindow;\n #define wxHELP                  0x00008000\n #define wxMORE                  0x00010000\n #define wxSETUP                 0x00020000\n+// Force blocking, modal message box dialog (not just notification)\n+#define wxMODAL                 0x00040000\n \n-extern int MyMessageBox(const std::string& message, const std::string& caption=\"Message\", int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1);\n-#define wxMessageBox  MyMessageBox\n-extern int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1);\n-extern bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent);\n+extern int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK);\n+extern bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption);\n extern void ThreadSafeHandleURL(const std::string& strURL);\n extern void MainFrameRepaint();\n extern void AddressBookRepaint();"
      },
      {
        "sha": "4f34ab6163d6210018ce8eeebd2308643b39bddb",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -1041,7 +1041,7 @@ void AddTimeData(const CNetAddr& ip, int64 nTime)\n                     string strMessage = _(\"Warning: Please check that your computer's date and time are correct.  If your clock is wrong Bitcoin will not work properly.\");\n                     strMiscWarning = strMessage;\n                     printf(\"*** %s\\n\", strMessage.c_str());\n-                    boost::thread(boost::bind(ThreadSafeMessageBox, strMessage+\" \", string(\"Bitcoin\"), wxOK | wxICON_EXCLAMATION, (wxWindow*)NULL, -1, -1));\n+                    ThreadSafeMessageBox(strMessage+\" \", string(\"Bitcoin\"), wxOK | wxICON_EXCLAMATION);\n                 }\n             }\n         }"
      },
      {
        "sha": "e444e5f69671fe28eb186dbaa068c721e2c0e1d7",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "patch": "@@ -1219,7 +1219,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n         return strError;\n     }\n \n-    if (fAskFee && !ThreadSafeAskFee(nFeeRequired, _(\"Sending...\"), NULL))\n+    if (fAskFee && !ThreadSafeAskFee(nFeeRequired, _(\"Sending...\")))\n         return \"ABORTED\";\n \n     if (!CommitTransaction(wtxNew, reservekey))"
      }
    ]
  },
  {
    "sha": "5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTYwYjY2YTlkMmE5ZTdhOWRkYTI2OWQ2ZWU0YTJmZTZkMDFhMzU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-03-31T13:08:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-04T07:37:26Z"
      },
      "message": "Use a messagebox to display the error when -server is provided without providing a rpc password",
      "tree": {
        "sha": "b13684cf912cc785335c7595eaceeb6400a190da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b13684cf912cc785335c7595eaceeb6400a190da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cfbe1fee465e82ddbdc8ed17dfcce791bd765f5"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "eb2f04f1d9ec9010edb613f28483a94441c2fe51",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354",
        "patch": "@@ -2362,16 +2362,17 @@ void ThreadRPCServer2(void* parg)\n             strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-server\\\"\");\n         else if (mapArgs.count(\"-daemon\"))\n             strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-daemon\\\"\");\n-        std::string strMessage = _(\"%s, you must set a rpcpassword in the configuration file:\\n %s\\n\"\n-                                          \"It is recommended you use the following random password:\\n\"\n-                                          \"rpcuser=bitcoinrpc\\n\"\n-                                          \"rpcpassword=%s\\n\"\n-                                          \"(you do not need to remember this password)\\n\"\n-                                          \"If the file does not exist, create it with owner-readable-only file permissions.\\n\");\n-        fprintf(stderr, strMessage.c_str(),\n+        ThreadSafeMessageBox(strprintf(\n+            _(\"%s, you must set a rpcpassword in the configuration file:\\n %s\\n\"\n+              \"It is recommended you use the following random password:\\n\"\n+              \"rpcuser=bitcoinrpc\\n\"\n+              \"rpcpassword=%s\\n\"\n+              \"(you do not need to remember this password)\\n\"\n+              \"If the file does not exist, create it with owner-readable-only file permissions.\\n\"),\n                 strWhatAmI.c_str(),\n                 GetConfigFile().c_str(),\n-                EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32).c_str());\n+                EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32).c_str()),\n+            _(\"Error\"), wxOK | wxMODAL);\n         QueueShutdown();\n         return;\n     }"
      }
    ]
  },
  {
    "sha": "5cccb13dad589b66957772ee36b3be0ef06ed0dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2NjYjEzZGFkNTg5YjY2OTU3NzcyZWUzNmIzYmUwZWYwNmVkMGRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-04T11:19:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-04-04T11:19:30Z"
      },
      "message": "Move from noui.h / ui.h to one ui_interface.h with dummy implementation for the daemon.",
      "tree": {
        "sha": "561ea8468f2121db57a7af168fa5b7ecfe726d20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/561ea8468f2121db57a7af168fa5b7ecfe726d20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cccb13dad589b66957772ee36b3be0ef06ed0dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cccb13dad589b66957772ee36b3be0ef06ed0dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cccb13dad589b66957772ee36b3be0ef06ed0dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cccb13dad589b66957772ee36b3be0ef06ed0dc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354"
      }
    ],
    "stats": {
      "total": 155,
      "additions": 63,
      "deletions": 92
    },
    "files": [
      {
        "sha": "7ad94037cf145b118507dca15010d1abd3771014",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cccb13dad589b66957772ee36b3be0ef06ed0dc/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cccb13dad589b66957772ee36b3be0ef06ed0dc/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=5cccb13dad589b66957772ee36b3be0ef06ed0dc",
        "patch": "@@ -115,7 +115,6 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/key.h \\\n     src/db.h \\\n     src/script.h \\\n-    src/noui.h \\\n     src/init.h \\\n     src/headers.h \\\n     src/irc.h \\\n@@ -135,7 +134,6 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/guiconstants.h \\\n     src/qt/optionsmodel.h \\\n     src/qt/monitoreddatamapper.h \\\n-    src/qtui.h \\\n     src/qt/transactiondesc.h \\\n     src/qt/transactiondescdialog.h \\\n     src/qt/bitcoinamountfield.h \\\n@@ -156,7 +154,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/protocol.h \\\n     src/qt/notificator.h \\\n     src/qt/qtipcserver.h \\\n-    src/allocators.h\n+    src/allocators.h \\\n+    src/ui_interface.h\n \n SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/transactiontablemodel.cpp \\"
      },
      {
        "sha": "ceee028977a3e7f2a286ce1195de0354bde7d76b",
        "filename": "src/headers.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/headers.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/headers.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/headers.h?ref=5cccb13dad589b66957772ee36b3be0ef06ed0dc",
        "patch": "@@ -87,8 +87,5 @@\n #include \"bignum.h\"\n #include \"base58.h\"\n #include \"main.h\"\n-#ifdef QT_GUI\n-#include \"qtui.h\"\n-#else\n-#include \"noui.h\"\n-#endif\n+#include \"wallet.h\"\n+#include \"ui_interface.h\""
      },
      {
        "sha": "0bbe612a06980dd4382f2493cd075e8289fa94d4",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=5cccb13dad589b66957772ee36b3be0ef06ed0dc",
        "patch": "@@ -59,7 +59,8 @@ OBJS= \\\n     obj/rpcdump.o \\\n     obj/script.o \\\n     obj/util.o \\\n-    obj/wallet.o\n+    obj/wallet.o \\\n+    obj/noui.o\n \n all: bitcoind.exe\n "
      },
      {
        "sha": "307fca783486596a9ddfd3cc88c7ec6be6a174c5",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=5cccb13dad589b66957772ee36b3be0ef06ed0dc",
        "patch": "@@ -57,7 +57,8 @@ OBJS= \\\n     obj/rpcdump.o \\\n     obj/script.o \\\n     obj/util.o \\\n-    obj/wallet.o\n+    obj/wallet.o \\\n+    obj/noui.o\n \n \n all: bitcoind.exe"
      },
      {
        "sha": "6388a71e11e4dc64fb970e0196f85fe543274c0e",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=5cccb13dad589b66957772ee36b3be0ef06ed0dc",
        "patch": "@@ -74,7 +74,8 @@ OBJS= \\\n     obj/rpcdump.o \\\n     obj/script.o \\\n     obj/util.o \\\n-    obj/wallet.o\n+    obj/wallet.o \\\n+    obj/noui.o\n \n ifdef USE_UPNP\n \tDEFS += -DUSE_UPNP=$(USE_UPNP)"
      },
      {
        "sha": "66e020bbef079620c76e1daddfb3e31aac65de06",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=5cccb13dad589b66957772ee36b3be0ef06ed0dc",
        "patch": "@@ -105,7 +105,8 @@ OBJS= \\\n     obj/rpcdump.o \\\n     obj/script.o \\\n     obj/util.o \\\n-    obj/wallet.o\n+    obj/wallet.o \\\n+    obj/noui.o\n \n \n all: bitcoind"
      },
      {
        "sha": "077e460a70651ebd1b5bbc5bdd92d9d4fff1053f",
        "filename": "src/noui.cpp",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=5cccb13dad589b66957772ee36b3be0ef06ed0dc",
        "patch": "@@ -0,0 +1,45 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#include \"ui_interface.h\"\n+\n+#include <string>\n+#include \"headers.h\"\n+#include \"init.h\"\n+\n+int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n+{\n+    printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n+    fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n+    return 4;\n+}\n+\n+bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n+{\n+    return true;\n+}\n+\n+void MainFrameRepaint()\n+{\n+}\n+\n+void AddressBookRepaint()\n+{\n+}\n+\n+void InitMessage(const std::string &message)\n+{\n+}\n+\n+std::string _(const char* psz)\n+{\n+    return psz;\n+}\n+\n+void QueueShutdown()\n+{\n+    // Without UI, Shutdown can simply be started in a new thread\n+    CreateThread(Shutdown, NULL);\n+}\n+"
      },
      {
        "sha": "4ae57365a6cc3bc9c82b71e5acf4dec2dfd995f9",
        "filename": "src/noui.h",
        "status": "removed",
        "additions": 0,
        "deletions": 76,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=5a60b66a9d2a9e7a9dda269d6ee4a2fe6d01a354",
        "patch": "@@ -1,76 +0,0 @@\n-// Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2012 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-#ifndef BITCOIN_NOUI_H\n-#define BITCOIN_NOUI_H\n-\n-#include <string>\n-#include \"wallet.h\"\n-#include \"init.h\"\n-\n-#define wxYES                   0x00000002\n-#define wxOK                    0x00000004\n-#define wxNO                    0x00000008\n-#define wxYES_NO                (wxYES|wxNO)\n-#define wxCANCEL                0x00000010\n-#define wxAPPLY                 0x00000020\n-#define wxCLOSE                 0x00000040\n-#define wxOK_DEFAULT            0x00000000\n-#define wxYES_DEFAULT           0x00000000\n-#define wxNO_DEFAULT            0x00000080\n-#define wxCANCEL_DEFAULT        0x80000000\n-#define wxICON_EXCLAMATION      0x00000100\n-#define wxICON_HAND             0x00000200\n-#define wxICON_WARNING          wxICON_EXCLAMATION\n-#define wxICON_ERROR            wxICON_HAND\n-#define wxICON_QUESTION         0x00000400\n-#define wxICON_INFORMATION      0x00000800\n-#define wxICON_STOP             wxICON_HAND\n-#define wxICON_ASTERISK         wxICON_INFORMATION\n-#define wxICON_MASK             (0x00000100|0x00000200|0x00000400|0x00000800)\n-#define wxFORWARD               0x00001000\n-#define wxBACKWARD              0x00002000\n-#define wxRESET                 0x00004000\n-#define wxHELP                  0x00008000\n-#define wxMORE                  0x00010000\n-#define wxSETUP                 0x00020000\n-// Force blocking, modal message box dialog (not just notification)\n-#define wxMODAL                 0x00040000\n-\n-inline int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK)\n-{\n-    printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n-    fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n-    return 4;\n-}\n-\n-inline bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n-{\n-    return true;\n-}\n-\n-inline void MainFrameRepaint()\n-{\n-}\n-\n-inline void AddressBookRepaint()\n-{\n-}\n-\n-inline void InitMessage(const std::string &message)\n-{\n-}\n-\n-inline const char* _(const char* psz)\n-{\n-    return psz;\n-}\n-\n-inline void QueueShutdown()\n-{\n-    // Without UI, Shutdown can simply be started in a new thread\n-    CreateThread(Shutdown, NULL);\n-}\n-\n-#endif"
      },
      {
        "sha": "c32a006f7118148189fccd938336860673099ac0",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=5cccb13dad589b66957772ee36b3be0ef06ed0dc",
        "patch": "@@ -4,7 +4,7 @@\n #include \"bitcoinunits.h\"\n \n #include \"headers.h\"\n-#include \"qtui.h\"\n+#include \"ui_interface.h\"\n \n #include <QString>\n "
      },
      {
        "sha": "2e29f2af165a6a09416761ad8349978313bf3d87",
        "filename": "src/ui_interface.h",
        "status": "renamed",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cccb13dad589b66957772ee36b3be0ef06ed0dc/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=5cccb13dad589b66957772ee36b3be0ef06ed0dc",
        "patch": "@@ -1,11 +1,11 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-#ifndef BITCOIN_EXTERNUI_H\n-#define BITCOIN_EXTERNUI_H\n+#ifndef BITCOIN_UI_INTERFACE_H\n+#define BITCOIN_UI_INTERFACE_H\n \n #include <string>\n-#include \"wallet.h\"\n+#include \"util.h\" // for int64\n \n #define wxYES                   0x00000002\n #define wxOK                    0x00000004\n@@ -36,6 +36,8 @@\n // Force blocking, modal message box dialog (not just notification)\n #define wxMODAL                 0x00040000\n \n+/* These UI communication functions are implemented in bitcoin.cpp (for ui) and noui.cpp (no ui) */\n+\n extern int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK);\n extern bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption);\n extern void ThreadSafeHandleURL(const std::string& strURL);",
        "previous_filename": "src/qtui.h"
      }
    ]
  }
]