[
  {
    "sha": "c901f091a36286fc6887fbe3dcf0cdb8159fbe36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTAxZjA5MWEzNjI4NmZjNjg4N2ZiZTNkY2YwY2RiODE1OWZiZTM2",
    "commit": {
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-01-17T17:04:25Z"
      },
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-01-26T11:24:22Z"
      },
      "message": "Add a new Variant type",
      "tree": {
        "sha": "6da95afc5fc87adb53a53e76ff56f2b179649ffa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6da95afc5fc87adb53a53e76ff56f2b179649ffa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c901f091a36286fc6887fbe3dcf0cdb8159fbe36",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAl4tducZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf6UWD/4j/4Zf+GPlepELE2jILbL8\ng4WjP2fT/P6ZTKsfcRnPojIe+0xP0NXudl2zJJIKYANTIZOUDeqYmpz4yWeefUMt\nz1o6hnwQdyBi6bHG4uylqRQg2HqMipuBL52F6P24pJg6rDRLJUq0h68MjaHTAorN\nuSIn5E8TCqT+o2hmreyubjkgM64NOlRs2s+BJSilh+j6TE1vVWs/zGCqF7LRXgn9\nFmstNRXF6372Bw2wH6AA5HL6pkX4+5a4539rEUqS+vEHxLEhbwB5yC6EGrH3yOyz\nYXxUHgRxYkrpyMcNhZ6x0P2VEcAp9GurE5/OQmDEt0jcwAgc/ZKO8Jz2puSi46zH\nPiVL4PVTbszznbTRD6dnvZcbFwzic6ZU2dF/GAP4/03esrBMePhasUoyRCsJ1ucq\npcRu35gPYkY+jwcOQ1/IZfKq5RNcgMxyXCt9dIJIO65wEGyEM2mBSTjtxwu+sur0\njrfrqZNqmMXPP/johujntS4mDbqhN8hgaUElrVEaqlvj2geAWlq7dAq/mCADQS/L\nFu+jFdd6gdfMHiwZqC+ZUC0N5DqNLKFBGnp+5BF3FOj9tUFCV1ux+rzK8ZGMpScL\n67Hc65Z4OOm/51ppqlOev81ABd/Mgwf++5urR4jKrEpnxENyRNY0bM6qFcZl1GD+\nKr4uhDu9ADCzA6p0aPc4KA==\n=vV7k\n-----END PGP SIGNATURE-----",
        "payload": "tree 6da95afc5fc87adb53a53e76ff56f2b179649ffa\nparent 0deba680646fc5c2bd4ead59933605970ae80995\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1579280665 +0200\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1580037862 +0200\n\nAdd a new Variant type\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c901f091a36286fc6887fbe3dcf0cdb8159fbe36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c901f091a36286fc6887fbe3dcf0cdb8159fbe36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c901f091a36286fc6887fbe3dcf0cdb8159fbe36/comments",
    "author": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0deba680646fc5c2bd4ead59933605970ae80995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0deba680646fc5c2bd4ead59933605970ae80995",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0deba680646fc5c2bd4ead59933605970ae80995"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 154,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3f1a2fd02edf36dbca615516efb9353b1220e34e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c901f091a36286fc6887fbe3dcf0cdb8159fbe36/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c901f091a36286fc6887fbe3dcf0cdb8159fbe36/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c901f091a36286fc6887fbe3dcf0cdb8159fbe36",
        "patch": "@@ -231,6 +231,7 @@ BITCOIN_CORE_H = \\\n   util/vector.h \\\n   validation.h \\\n   validationinterface.h \\\n+  variant.h \\\n   versionbits.h \\\n   versionbitsinfo.h \\\n   walletinitinterface.h \\"
      },
      {
        "sha": "9864ee78fd8c6db439f3b90d60d848459add108f",
        "filename": "src/variant.h",
        "status": "added",
        "additions": 153,
        "deletions": 0,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c901f091a36286fc6887fbe3dcf0cdb8159fbe36/src/variant.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c901f091a36286fc6887fbe3dcf0cdb8159fbe36/src/variant.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/variant.h?ref=c901f091a36286fc6887fbe3dcf0cdb8159fbe36",
        "patch": "@@ -0,0 +1,153 @@\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VARIANT_H\n+#define BITCOIN_VARIANT_H\n+\n+#include <utility>\n+#include <type_traits>\n+\n+#include <boost/variant.hpp>\n+\n+//! Substitute for C++17 std::variant\n+template <class... Types>\n+class Variant\n+{\n+private:\n+    boost::variant<Types...> m_var;\n+\n+public:\n+    Variant()\n+    {\n+        m_var = {};\n+    }\n+    Variant(const Variant& other)\n+    {\n+        m_var = other.m_var;\n+    }\n+    Variant(Variant&& other)\n+    {\n+        m_var = std::move(other.m_var);\n+    }\n+    // Require that typeof(T) != Variant. to prevent wrong template instantiations\n+    template <class T, typename = typename std::enable_if<!std::is_same<typename std::decay<T>::type, Variant>::value>::type>\n+    Variant(T&& value)\n+    {\n+        m_var = std::forward<T>(value);\n+    }\n+\n+    int which() const\n+    {\n+        return m_var.which();\n+    }\n+\n+    template <class T>\n+    T* get_if()\n+    {\n+        return boost::get<T>(&m_var);\n+    }\n+    template <class T>\n+    const T* get_if() const\n+    {\n+        return boost::get<T>(&m_var);\n+    }\n+    template <class T>\n+    T& get()\n+    {\n+        return boost::get<T>(m_var);\n+    }\n+    template <class T>\n+    const T& get() const\n+    {\n+        return boost::get<T>(m_var);\n+    }\n+\n+    Variant& operator=(const Variant& other)\n+    {\n+        m_var = other.m_var;\n+        return *this;\n+    }\n+    Variant& operator=(Variant&& other)\n+    {\n+        m_var = std::move(other.m_var);\n+        return *this;\n+    }\n+    // Require that typeof(T) != Variant. to prevent wrong template instantiations\n+    template <class T, typename = typename std::enable_if<!std::is_same<typename std::decay<T>::type, Variant>::value>::type>\n+    Variant& operator=(T&& value)\n+    {\n+        m_var = std::forward<T>(value);\n+        return *this;\n+    }\n+\n+    // Allow support for boost::Variant\n+    template <class Visitor>\n+    typename Visitor::result_type apply_visitor(Visitor& visitor) const\n+    {\n+        return boost::apply_visitor(visitor, m_var);\n+    }\n+    template <class Visitor>\n+    typename Visitor::result_type apply_visitor(const Visitor& visitor) const\n+    {\n+        return boost::apply_visitor(visitor, m_var);\n+    }\n+\n+    bool operator==(const Variant& other) const\n+    {\n+        return m_var == other.m_var;\n+    }\n+    bool operator!=(const Variant& other) const\n+    {\n+        return m_var != other.m_var;\n+    }\n+    bool operator<(const Variant& other) const\n+    {\n+        return m_var < other.m_var;\n+    }\n+    bool operator>(const Variant& other) const\n+    {\n+        return m_var > other.m_var;\n+    }\n+    bool operator<=(const Variant& other) const\n+    {\n+        return m_var <= other.m_var;\n+    }\n+    bool operator>=(const Variant& other) const\n+    {\n+        return m_var >= other.m_var;\n+    }\n+    // This are here to prevent implicit conversion to Variant and throw a compile time error.\n+    template <typename T>\n+    void operator==(const T&) const\n+    {\n+        static_assert(false && sizeof(T), \"Compared a Variant directly with type T. this prevented an implicit conversion\");\n+    }\n+    template <typename T>\n+    void operator!=(const T&) const\n+    {\n+        static_assert(false && sizeof(T), \"Compared a Variant directly with type T. this prevented an implicit conversion\");\n+    }\n+    template <typename T>\n+    void operator<(const T&) const\n+    {\n+        static_assert(false && sizeof(T), \"Compared a Variant directly with type T. this prevented an implicit conversion\");\n+    }\n+    template <typename T>\n+    void operator>(const T&) const\n+    {\n+        static_assert(false && sizeof(T), \"Compared a Variant directly with type T. this prevented an implicit conversion\");\n+    }\n+    template <typename T>\n+    void operator<=(const T&) const\n+    {\n+        static_assert(false && sizeof(T), \"Compared a Variant directly with type T. this prevented an implicit conversion\");\n+    }\n+    template <typename T>\n+    void operator>=(const T&) const\n+    {\n+        static_assert(false && sizeof(T), \"Compared a Variant directly with type T. this prevented an implicit conversion\");\n+    }\n+};\n+\n+#endif // BITCOIN_VARIANT_H"
      }
    ]
  },
  {
    "sha": "86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Njg3MGZmMDUzZjU4ZjlmMGEzY2E0Y2E3YmE2NDhjNmIxNTcyZjQ5",
    "commit": {
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-01-17T17:22:52Z"
      },
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-01-26T11:24:26Z"
      },
      "message": "Replace boost::variant with Variant in variant.h",
      "tree": {
        "sha": "4e0c2c53af2c29d4b9e66861f16834b9665e68fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e0c2c53af2c29d4b9e66861f16834b9665e68fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAl4tduoZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf6gZD/97O2DEwVm7lG4w26Sk12Qi\nDcDf9zmWOMf9VQClXfKhLNEase2iEVgnAV0Q1iOfcMLw2StF6HoUbSWypZj6/Vtd\n08opjakb3mztBDNfRGc6ePG7UVNtLGuTADvl5epWT+47zjTao80ZtbAWdiYd5RSA\nWvIC3do8LvuoYboWJ0x0IxgACU4MfVBa93aolDy9UjIonSBlHW2s6b5o+5+Nu6fr\n/RP0N0kYtUwoQmmCj5nC15ZqO7P4p4pe+q1Wb++PRXjdhZqrbaRqqVn331zXxmSi\nDr+4zxAYCpNkN9aTbDJpaQPCNLfasS0m1EKf63UI/draXkpeKS02Jork/LrMxrYd\nb0q5VIu8zzcoRwFhx6etpFzuz9RBB/oAafna3rKvnsTcUuQptIpDgKTTTp/ZKWnf\nVxKuIEogqBe/cT9DUOzHSVbdz75FuUwmdJgVriYZp3ohKz/+frsCr6aSusWWdTdI\np6jpN3wm4vkWK3ulhsWsAEf+vgkfPYMYT1ErdyxMNrxaX991VU70kKWUhzrvz0K4\nhSkcUS586jz39jdCt5TU1M4UMRE9He9l2uV9LIRoCgI/lBsOmTHqa9fWHCsorW7E\nmPvZrt2Cm1eMwi1RrZdwX7Ao6gxquiw+xQKzaNdvsYw9wx5oqfGGmCbA+FdjyV+w\n9hH6a2tNKJJznN6Z9YK2xA==\n=27Pw\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e0c2c53af2c29d4b9e66861f16834b9665e68fd\nparent c901f091a36286fc6887fbe3dcf0cdb8159fbe36\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1579281772 +0200\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1580037866 +0200\n\nReplace boost::variant with Variant in variant.h\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/comments",
    "author": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c901f091a36286fc6887fbe3dcf0cdb8159fbe36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c901f091a36286fc6887fbe3dcf0cdb8159fbe36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c901f091a36286fc6887fbe3dcf0cdb8159fbe36"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 45,
      "deletions": 47
    },
    "files": [
      {
        "sha": "1e87b339c15d947ed945064bf0c12fde7b82744e",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -254,7 +254,7 @@ bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value,\n         } else if(index.column() == Address) {\n             CTxDestination newAddress = DecodeDestination(value.toString().toStdString());\n             // Refuse to set invalid address, set error status and return false\n-            if(boost::get<CNoDestination>(&newAddress))\n+            if(newAddress.get_if<CNoDestination>())\n             {\n                 editStatus = INVALID_ADDRESS;\n                 return false;"
      },
      {
        "sha": "101557d2d1513d717a22296fdc7638cecafaf044",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -467,7 +467,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else if(ExtractDestination(out.txout.scriptPubKey, address))\n         {\n             CPubKey pubkey;\n-            PKHash *pkhash = boost::get<PKHash>(&address);\n+            PKHash *pkhash = address.get_if<PKHash>();\n             if (pkhash && model->wallet().getPubKey(out.txout.scriptPubKey, CKeyID(*pkhash), pubkey))\n             {\n                 nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);"
      },
      {
        "sha": "2354f6fb6f5bcdf84aae05ad990f47ebd6de6804",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -117,7 +117,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         ui->statusLabel_SM->setText(tr(\"The entered address is invalid.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n         return;\n     }\n-    const PKHash* pkhash = boost::get<PKHash>(&destination);\n+    const PKHash* pkhash = destination.get_if<PKHash>();\n     if (!pkhash) {\n         ui->addressIn_SM->setValid(false);\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n@@ -195,7 +195,7 @@ void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n         ui->statusLabel_VM->setText(tr(\"The entered address is invalid.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n         return;\n     }\n-    if (!boost::get<PKHash>(&destination)) {\n+    if (!destination.get_if<PKHash>()) {\n         ui->addressIn_VM->setValid(false);\n         ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_VM->setText(tr(\"The entered address does not refer to a key.\") + QString(\" \") + tr(\"Please check the address and try again.\"));"
      },
      {
        "sha": "01fd7b76e6280762dd4533fa907f55499e4bb13e",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -124,7 +124,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const interface\n                     continue;\n                 }\n \n-                if (!boost::get<CNoDestination>(&wtx.txout_address[nOut]))\n+                if (!wtx.txout_address[nOut].get_if<CNoDestination>())\n                 {\n                     // Sent to Bitcoin Address\n                     sub.type = TransactionRecord::SendToAddress;"
      },
      {
        "sha": "7b0e1f81659a7e55efce932490af2ba1111e19e7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -276,7 +276,7 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n     }\n \n-    const PKHash *pkhash = boost::get<PKHash>(&destination);\n+    const PKHash *pkhash = destination.get_if<PKHash>();\n     if (!pkhash) {\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n     }"
      },
      {
        "sha": "b59ba50f02186a77566e3bccb39b1f68db3d60fb",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -519,7 +519,7 @@ bool RPCArg::IsOptional() const\n     if (m_fallback.which() == 1) {\n         return true;\n     } else {\n-        return RPCArg::Optional::NO != boost::get<RPCArg::Optional>(m_fallback);\n+        return RPCArg::Optional::NO != m_fallback.get<RPCArg::Optional>();\n     }\n }\n \n@@ -566,9 +566,9 @@ std::string RPCArg::ToDescriptionString() const\n         }\n     }\n     if (m_fallback.which() == 1) {\n-        ret += \", optional, default=\" + boost::get<std::string>(m_fallback);\n+        ret += \", optional, default=\" + m_fallback.get<std::string>();\n     } else {\n-        switch (boost::get<RPCArg::Optional>(m_fallback)) {\n+        switch (m_fallback.get<RPCArg::Optional>()) {\n         case RPCArg::Optional::OMITTED: {\n             // nothing to do. Element is treated as if not present and has no default value\n             break;"
      },
      {
        "sha": "0af0e786494fd454c3d43c44a77d4bc99309df7a",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <node/transaction.h>\n #include <outputtype.h>\n+#include <variant.h>\n #include <protocol.h>\n #include <pubkey.h>\n #include <rpc/protocol.h>\n@@ -20,8 +21,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/variant.hpp>\n-\n /**\n  * String used to describe UNIX epoch time in documentation, factored out to a\n  * constant for consistency.\n@@ -124,7 +123,7 @@ struct RPCArg {\n          */\n         OMITTED,\n     };\n-    using Fallback = boost::variant<Optional, /* default value for optional args */ std::string>;\n+    using Fallback = Variant<Optional, /* default value for optional args */ std::string>;\n     const std::string m_name; //!< The name of the arg (can be empty for inner args)\n     const Type m_type;\n     const std::vector<RPCArg> m_inner; //!< Only used for arrays or dicts"
      },
      {
        "sha": "8c280bd791554e9ef73ce0fd041e228a703d75bd",
        "filename": "src/script/signingprovider.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/script/signingprovider.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/script/signingprovider.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.cpp?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -179,18 +179,18 @@ CKeyID GetKeyForDestination(const SigningProvider& store, const CTxDestination&\n {\n     // Only supports destinations which map to single public keys, i.e. P2PKH,\n     // P2WPKH, and P2SH-P2WPKH.\n-    if (auto id = boost::get<PKHash>(&dest)) {\n+    if (auto id = dest.get_if<PKHash>()) {\n         return CKeyID(*id);\n     }\n-    if (auto witness_id = boost::get<WitnessV0KeyHash>(&dest)) {\n+    if (auto witness_id = dest.get_if<WitnessV0KeyHash>()) {\n         return CKeyID(*witness_id);\n     }\n-    if (auto script_hash = boost::get<ScriptHash>(&dest)) {\n+    if (auto script_hash = dest.get_if<ScriptHash>()) {\n         CScript script;\n         CScriptID script_id(*script_hash);\n         CTxDestination inner_dest;\n         if (store.GetCScript(script_id, script) && ExtractDestination(script, inner_dest)) {\n-            if (auto inner_witness_id = boost::get<WitnessV0KeyHash>(&inner_dest)) {\n+            if (auto inner_witness_id = inner_dest.get_if<WitnessV0KeyHash>()) {\n                 return CKeyID(*inner_witness_id);\n             }\n         }"
      },
      {
        "sha": "9cdd07c3e616030a38d79dc432379ad85270820e",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -8,8 +8,7 @@\n \n #include <script/interpreter.h>\n #include <uint256.h>\n-\n-#include <boost/variant.hpp>\n+#include <variant.h>\n \n \n static const bool DEFAULT_ACCEPT_DATACARRIER = true;\n@@ -140,7 +139,7 @@ struct WitnessUnknown\n  *  * WitnessUnknown: TX_WITNESS_UNKNOWN destination (P2W???)\n  *  A CTxDestination is the internal data type encoded in a bitcoin address\n  */\n-typedef boost::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> CTxDestination;\n+typedef Variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> CTxDestination;\n \n /** Check whether a CTxDestination is a CNoDestination. */\n bool IsValidDestination(const CTxDestination& dest);"
      },
      {
        "sha": "abe74ad18cf0ee5b073bcf4eac48709a954dac24",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -177,23 +177,23 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     s.clear();\n     s << ToByteVector(pubkey) << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(boost::get<PKHash>(&address) &&\n-                *boost::get<PKHash>(&address) == PKHash(pubkey));\n+    BOOST_CHECK(address.get_if<PKHash>() &&\n+                *address.get_if<PKHash>() == PKHash(pubkey));\n \n     // TX_PUBKEYHASH\n     s.clear();\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(boost::get<PKHash>(&address) &&\n-                *boost::get<PKHash>(&address) == PKHash(pubkey));\n+    BOOST_CHECK(address.get_if<PKHash>() &&\n+                *address.get_if<PKHash>() == PKHash(pubkey));\n \n     // TX_SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n     s.clear();\n     s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(boost::get<ScriptHash>(&address) &&\n-                *boost::get<ScriptHash>(&address) == ScriptHash(redeemScript));\n+    BOOST_CHECK(address.get_if<ScriptHash>() &&\n+                *address.get_if<ScriptHash>() == ScriptHash(redeemScript));\n \n     // TX_MULTISIG\n     s.clear();\n@@ -211,15 +211,15 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     BOOST_CHECK(ExtractDestination(s, address));\n     WitnessV0KeyHash keyhash;\n     CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(keyhash.begin());\n-    BOOST_CHECK(boost::get<WitnessV0KeyHash>(&address) && *boost::get<WitnessV0KeyHash>(&address) == keyhash);\n+    BOOST_CHECK(address.get_if<WitnessV0KeyHash>() && *address.get_if<WitnessV0KeyHash>() == keyhash);\n \n     // TX_WITNESS_V0_SCRIPTHASH\n     s.clear();\n     WitnessV0ScriptHash scripthash;\n     CSHA256().Write(redeemScript.data(), redeemScript.size()).Finalize(scripthash.begin());\n     s << OP_0 << ToByteVector(scripthash);\n     BOOST_CHECK(ExtractDestination(s, address));\n-    BOOST_CHECK(boost::get<WitnessV0ScriptHash>(&address) && *boost::get<WitnessV0ScriptHash>(&address) == scripthash);\n+    BOOST_CHECK(address.get_if<WitnessV0ScriptHash>() && *address.get_if<WitnessV0ScriptHash>() == scripthash);\n \n     // TX_WITNESS with unknown version\n     s.clear();\n@@ -229,7 +229,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     unk.length = 33;\n     unk.version = 1;\n     std::copy(pubkey.begin(), pubkey.end(), unk.program);\n-    BOOST_CHECK(boost::get<WitnessUnknown>(&address) && *boost::get<WitnessUnknown>(&address) == unk);\n+    BOOST_CHECK(address.get_if<WitnessUnknown>() && *address.get_if<WitnessUnknown>() == unk);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n@@ -253,8 +253,8 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n-                *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n+    BOOST_CHECK(addresses[0].get_if<PKHash>() &&\n+                *addresses[0].get_if<PKHash>() == PKHash(pubkeys[0]));\n \n     // TX_PUBKEYHASH\n     s.clear();\n@@ -263,8 +263,8 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n-                *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n+    BOOST_CHECK(addresses[0].get_if<PKHash>() &&\n+                *addresses[0].get_if<PKHash>() == PKHash(pubkeys[0]));\n \n     // TX_SCRIPTHASH\n     CScript redeemScript(s); // initialize with leftover P2PKH script\n@@ -274,8 +274,8 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n     BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n-    BOOST_CHECK(boost::get<ScriptHash>(&addresses[0]) &&\n-                *boost::get<ScriptHash>(&addresses[0]) == ScriptHash(redeemScript));\n+    BOOST_CHECK(addresses[0].get_if<ScriptHash>() &&\n+                *addresses[0].get_if<ScriptHash>() == ScriptHash(redeemScript));\n \n     // TX_MULTISIG\n     s.clear();\n@@ -287,10 +287,10 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n     BOOST_CHECK_EQUAL(addresses.size(), 2U);\n     BOOST_CHECK_EQUAL(nRequired, 2);\n-    BOOST_CHECK(boost::get<PKHash>(&addresses[0]) &&\n-                *boost::get<PKHash>(&addresses[0]) == PKHash(pubkeys[0]));\n-    BOOST_CHECK(boost::get<PKHash>(&addresses[1]) &&\n-                *boost::get<PKHash>(&addresses[1]) == PKHash(pubkeys[1]));\n+    BOOST_CHECK(addresses[0].get_if<PKHash>() &&\n+                *addresses[0].get_if<PKHash>() == PKHash(pubkeys[0]));\n+    BOOST_CHECK(addresses[1].get_if<PKHash>() &&\n+                *addresses[1].get_if<PKHash>() == PKHash(pubkeys[1]));\n \n     // TX_NULL_DATA\n     s.clear();"
      },
      {
        "sha": "d27660a149ca53972ce23b72abc603973d2a0380",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -555,7 +555,7 @@ static UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n     }\n \n-    const PKHash *pkhash = boost::get<PKHash>(&dest);\n+    const PKHash *pkhash = dest.get_if<PKHash>();\n     if (!pkhash) {\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n     }\n@@ -2947,7 +2947,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n             if (provider) {\n                 if (scriptPubKey.IsPayToScriptHash()) {\n-                    const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n+                    const CScriptID& hash = CScriptID(address.get<ScriptHash>());\n                     CScript redeemScript;\n                     if (provider->GetCScript(hash, redeemScript)) {\n                         entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n@@ -2957,7 +2957,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                             bool extracted = ExtractDestination(redeemScript, witness_destination);\n                             CHECK_NONFATAL(extracted);\n                             // Also return the witness script\n-                            const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n+                            const WitnessV0ScriptHash& whash = witness_destination.get<WitnessV0ScriptHash>();\n                             CScriptID id;\n                             CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n                             CScript witnessScript;\n@@ -2967,7 +2967,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                         }\n                     }\n                 } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n-                    const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n+                    const WitnessV0ScriptHash& whash = address.get<WitnessV0ScriptHash>();\n                     CScriptID id;\n                     CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n                     CScript witnessScript;"
      },
      {
        "sha": "69308570f92fc82391225e5af7dc6ee314dfc0ac",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -523,7 +523,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n         list = wallet->ListCoins(*locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n-    BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(list.begin()->first.get<PKHash>().ToString(), coinbaseAddress);\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 1U);\n \n     // Check initial balance from one mature coinbase transaction.\n@@ -540,7 +540,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n         list = wallet->ListCoins(*locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n-    BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(list.begin()->first.get<PKHash>().ToString(), coinbaseAddress);\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2U);\n \n     // Lock both coins. Confirm number of available coins drops to 0.\n@@ -572,7 +572,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n         list = wallet->ListCoins(*locked_chain);\n     }\n     BOOST_CHECK_EQUAL(list.size(), 1U);\n-    BOOST_CHECK_EQUAL(boost::get<PKHash>(list.begin()->first).ToString(), coinbaseAddress);\n+    BOOST_CHECK_EQUAL(list.begin()->first.get<PKHash>().ToString(), coinbaseAddress);\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2U);\n }\n "
      },
      {
        "sha": "0634d9a64b59fd641fe3cdf6ff67ef4dd172b2b4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86870ff053f58f9f0a3ca4ca7ba648c6b1572f49/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=86870ff053f58f9f0a3ca4ca7ba648c6b1572f49",
        "patch": "@@ -2612,7 +2612,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             CScript scriptChange;\n \n             // coin control: send change to custom address\n-            if (!boost::get<CNoDestination>(&coin_control.destChange)) {\n+            if (!coin_control.destChange.get_if<CNoDestination>()) {\n                 scriptChange = GetScriptForDestination(coin_control.destChange);\n             } else { // no coin control: send change to newly generated address\n                 // Note: We use a new key here to keep it from being obvious which side is the change.\n@@ -3523,7 +3523,7 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n \n bool CWallet::AddDestData(WalletBatch& batch, const CTxDestination &dest, const std::string &key, const std::string &value)\n {\n-    if (boost::get<CNoDestination>(&dest))\n+    if (dest.get_if<CNoDestination>())\n         return false;\n \n     mapAddressBook[dest].destdata.insert(std::make_pair(key, value));"
      }
    ]
  }
]