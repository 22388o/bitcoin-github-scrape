DrahtBot,2020-01-18 00:58:42,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18202 (refactor: consolidate sendmany and sendtoaddress code by Sjors)\n* #18194 (Bugfix: GUI: Remove broken ability to e",https://github.com/bitcoin/bitcoin/pull/17953#issuecomment-575849018,575849018,
elichai,2020-01-24 13:59:28,"~Not sure what's the problem in s390x, https://travis-ci.org/bitcoin/bitcoin/jobs/641327078 seems to be linker related.~ (Not happening anymore, CI related)",https://github.com/bitcoin/bitcoin/pull/17953#issuecomment-578141105,578141105,
MarcoFalke,2020-01-31 08:55:04,"Not sure what the point of this is, but aren't we going to switch to c++17 soon anyway? In that case we could just replace it once with the std::variant instead of first wrapping it and then switching it around in the wrapper.",https://github.com/bitcoin/bitcoin/pull/17953#issuecomment-580644056,580644056,
elichai,2020-01-31 12:29:04,"> Not sure what the point of this is, but aren't we going to switch to c++17 soon anyway? In that case we could just replace it once with the std::variant instead of first wrapping it and then switching it around in the wrapper.\n\nThe point is to lay the ground by not depending directly on boost everywhere, and also making it more obvious when `get` and `get_if` is used.\nthat way the actual r",https://github.com/bitcoin/bitcoin/pull/17953#issuecomment-580714576,580714576,
DrahtBot,2020-02-25 11:18:09,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/17953#issuecomment-590817246,590817246,
adamjonas,2020-05-02 01:06:42,Checking in on the value of going forward with this since C++17 is ~5 months away and there is still some work to be done to get this merged (rebase).,https://github.com/bitcoin/bitcoin/pull/17953#issuecomment-622646496,622646496,
ryanofsky,2020-05-13 20:48:23,"> Checking in on the value of going forward with this since C++17 is ~5 months away and there is still some work to be done to get this merged (rebase).\n\nI guess other reviewers have to weight in, but I'm happy with the approach here and would re-ack if rebased. I think this PR still makes sense with even an upcoming transition to std::variant, because it brings existing variant code into alig",https://github.com/bitcoin/bitcoin/pull/17953#issuecomment-628237762,628237762,
MarcoFalke,2020-05-13 22:07:08,">  it brings existing variant code into alignment with the std::variant API\n\nIt does not. The boost::variant and std::variant APIs are not identical. The API variant that is introduced in this pull is identical to *neither* of the ""official"" ones. So if this is merged, we will end up with three APIs to keep in mind and maintain. I just don't see the value of spending time on review when the ch",https://github.com/bitcoin/bitcoin/pull/17953#issuecomment-628270829,628270829,
MarcoFalke,2020-05-13 22:13:53,"To compare the two branches:\n\n* `2005-StdVariantScriptedDiff`:  107 additions and 127 deletions (removes boost completely in one go)\n* `2020-01-variant`: Adds a file with 155 lines + other changes (is only the first step to remove boost, needs follow-ups and eternal maintenance)",https://github.com/bitcoin/bitcoin/pull/17953#issuecomment-628273356,628273356,
ryanofsky,2020-05-13 22:24:54,"That all makes sense. So it sounds like even though this PR has some merits, it conflicts with better alternatives and may not be worth effort to review and rebase now and update for future changes later.",https://github.com/bitcoin/bitcoin/pull/17953#issuecomment-628277352,628277352,
instagibbs,2020-01-17 18:11:42,"for reviewers, what's the `sizeof(T)` trick here?",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r368068122,368068122,src/variant.h
elichai,2020-01-17 18:17:33,"right forgot to mention that.\nif I just do `static_assert(false, msg)` it won't compile no matter what.\nnow because the `sizeof(T)` is here then it can't evaluate the expression without monomorphising the function so it can know what `T` is. so as long as this function is never called the compiler won't fail compilation because it will never be able to evaluate it.\n\nie without: https://god",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r368070494,368070494,src/variant.h
ryanofsky,2020-01-23 19:29:54,"In commit ""Add a new Variant type"" (85882c01d20add49f7b1f8b741e078968ec8080b)\n\nMaybe drop this overload. I don't think it's doing anything the other two overloads don't cover. Also std::variant doesn't have this: https://en.cppreference.com/w/cpp/utility/variant/variant",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370312083,370312083,src/variant.h
ryanofsky,2020-01-23 19:32:10,"In commit ""Add a new Variant type"" (85882c01d20add49f7b1f8b741e078968ec8080b)\n\nI think this overload is also not doing anything",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370313122,370313122,src/variant.h
ryanofsky,2020-01-23 19:34:45,"In commit ""Add a new Variant type"" (85882c01d20add49f7b1f8b741e078968ec8080b)\n\nMaybe want `std::forward<T>(value)` instead of `std::move(value)` because this constructor (because it's a template) can be called with lvalues where it would be surprising to move from.",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370314229,370314229,src/variant.h
ryanofsky,2020-01-23 19:41:09,"In commit ""Add a new Variant type"" (85882c01d20add49f7b1f8b741e078968ec8080b)\n\nMaybe add a template `operator=`, too. https://en.cppreference.com/w/cpp/utility/variant/operator%3D shows this as the third overload for `operator=`",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370317262,370317262,src/variant.h
elichai,2020-01-23 19:58:20,"You're right, I was sure I dropped it.\nThere's no reason for both const and non-const constructor if it doesn't mutate.",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370325171,370325171,src/variant.h
elichai,2020-01-23 20:01:13,"Hmm seems that boost::variant implements this but std::variant doesn't.\ndoesn't this act as a copy constructor for a T?",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370326487,370326487,src/variant.h
sipa,2020-01-23 20:02:24,"~If you turn this into an `std::forward` I think you can drop all other copy constructors.~\n\nNevermind, the type doesn't match of course.",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370326996,370326996,src/variant.h
elichai,2020-01-23 20:17:30,"I didn't really look into `std::forward` before, I now think I understand how and why it is useful, pretty cool. Thanks.",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370333299,370333299,src/variant.h
elichai,2020-01-23 20:23:19,seems that also here(like the constructor) boost adds both rlvaue and lvalue operators. i'll add just the rvalue like std::variant does. (although I don't quite understand why only that),https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370335803,370335803,src/variant.h
ryanofsky,2020-01-23 20:23:31,"> Hmm seems that boost::variant implements this but std::variant doesn't.\n> doesn't this act as a copy constructor for a T?\n\nI think boost variant might implement this to deal with pre-c++11 compilers that don't support rvalue references. But the overload below `template <class T> Variant(T&& value)` should make this redundant with a c++11 compiler.",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370335877,370335877,src/variant.h
ryanofsky,2020-01-23 20:30:46,"> seems that also here(like the constructor) boost adds both rlvaue and lvalue operators. i'll add just the rvalue like std::variant does. (although I don't quite understand why only that)\n\nThe reason why only a `T&&` overload is needed is that when `T` is a template type, there are template deduction rules that let `T` be deduced to be an lvalue reference, so the function can be called with b",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370339048,370339048,src/variant.h
elichai,2020-01-23 21:11:04,"I see now why I didn't drop it :)\nBecause then the following code won't compile:\n```\nVariant<int> var = 5;\nVariant<int> a = var;\n```\n\nBecause `Variant& operator=(T&& value)` signature can match it ""better"" then `Variant(const Variant& other)` so it will choose that and then it will try to handle it like a value instead of a variant  which will fail to compile (https://gcc.godbolt.org",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370356157,370356157,src/variant.h
elichai,2020-01-23 21:20:10,"argh This also introduces the same problem as in https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370356157\n",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370360138,370360138,src/variant.h
ryanofsky,2020-01-23 21:31:35,"> I see now why I didn't drop it :)\n\nMakes sense, I see why it's there now",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370365347,370365347,src/variant.h
ryanofsky,2020-01-23 21:35:50,This seems consistent since our `optional` and `span` replacements are also at the top level. But I wonder if they should all move to `src/util/` or some place to keep the top level less crowded. Probably something to deal with in a different PR,https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370367305,370367305,src/Makefile.am
MarcoFalke,2020-01-23 21:55:43,See also #15732,https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370375763,370375763,src/Makefile.am
elichai,2020-01-23 22:05:03,How would you feel about removing this and adding `enable_if` to all the templated versions that checks its not of type Variant? \n\nThe tradeoff here is more specialized constructors versus less readable templates ,https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370379615,370379615,src/variant.h
ryanofsky,2020-01-23 22:15:11,"> How would you feel about removing this and adding `enable_if` to all the templated versions that checks its not of type Variant?\n> \n> The tradeoff here is more specialized constructors versus less readable templates\n\nEither way seems good to me. You should choose which way you like best / hate least. I guess it's a choice between defining more repetitive constructors, or being more conci",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370383805,370383805,src/variant.h
elichai,2020-01-24 12:18:06,Done,https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370606016,370606016,src/variant.h
elichai,2020-01-24 12:18:15,Done,https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370606066,370606066,src/variant.h
elichai,2020-01-24 12:18:20,Done,https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370606096,370606096,src/variant.h
elichai,2020-01-24 12:18:48,Done,https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370606268,370606268,src/variant.h
ryanofsky,2020-01-24 19:54:39,"In commit ""Add a new Variant type"" (2eacf26ff61a63fce088600ced16ec2d4d5d771d)\n\nMight be a little better to replace `std::remove_reference` with `std::decay` to remove CV qualifiers as well",https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370815185,370815185,src/variant.h
elichai,2020-01-26 11:18:17,ah ha! I looked for the closest thing to C++20's `std::remove_cvref` looks like `decay` is the better option,https://github.com/bitcoin/bitcoin/pull/17953#discussion_r370990955,370990955,src/variant.h
kristapsk,2020-02-22 21:47:04,Alphabetical order of includes?,https://github.com/bitcoin/bitcoin/pull/17953#discussion_r382943902,382943902,src/rpc/util.h
kristapsk,2020-02-22 21:47:54,2020?,https://github.com/bitcoin/bitcoin/pull/17953#discussion_r382943946,382943946,src/variant.h
kristapsk,2020-02-22 21:50:59,Alphabetical order of includes?,https://github.com/bitcoin/bitcoin/pull/17953#discussion_r382944149,382944149,src/variant.h
