[
  {
    "sha": "fab9264be50955224b06868759d37547cabe48a4",
    "node_id": "C_kwDOABII59oAKGZhYjkyNjRiZTUwOTU1MjI0YjA2ODY4NzU5ZDM3NTQ3Y2FiZTQ4YTQ",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-12T11:10:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-12T10:40:39Z"
      },
      "message": "test: Remove unused CDataStream copy",
      "tree": {
        "sha": "5fe80cc6f29e355db5527c79b4ebbf0d3f792ea2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fe80cc6f29e355db5527c79b4ebbf0d3f792ea2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab9264be50955224b06868759d37547cabe48a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgw6gv/d6IAfZAWBgosRvEF9LnnAtk+b9jx/r1lMF+lbF1BX54lEq50PFEw4KiK\nWvSQvuQUBjrhBVcC+jTyixPcRsComSD6+myxecwnJHAJNs4ZjqHokK+h8heIwzJj\nO3RllPIs8A4xdMN4WKI24x38+OZywngxnHw9ca//opkRyEkw1oxXgi3JoddVF7cH\njwB2DSWmKhPeFBhoHzYz5xUGWRpGe0IiiNVRlDSYSkqUL5D+rAts/VlG4Zveg+/n\n+m+IjurDIEprYt0UkrQex+xsgUxVcj1v6REAKh5eMICbzQZ3/ik16zStWUzmDa3t\nFPuF9GSJEWnZMy3CaBDKHcArgTQjVh7Uj7WPRo5nQBtE4zXTHjZZESUYBcd+7iiA\noC7BKKniAgCcPsoBJSt1pRLJmwfan/ZTvbKX813voAuYwogEe4Frwivf9IhAUNB6\nJe6Dgz9H8rUxJbP3h49/sA5mEG4bGeZJCHH1HRU5NvyTVO8as2b599X947+FP1Bu\n1qYaZWen\n=nhOs\n-----END PGP SIGNATURE-----",
        "payload": "tree 5fe80cc6f29e355db5527c79b4ebbf0d3f792ea2\nparent 1ff265a20c36ada4c7b1c5c88d31eb92ec9e8420\nauthor MarcoFalke <falke.marco@gmail.com> 1636715410 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1636713639 +0100\n\ntest: Remove unused CDataStream copy\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab9264be50955224b06868759d37547cabe48a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab9264be50955224b06868759d37547cabe48a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab9264be50955224b06868759d37547cabe48a4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ff265a20c36ada4c7b1c5c88d31eb92ec9e8420",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ff265a20c36ada4c7b1c5c88d31eb92ec9e8420",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ff265a20c36ada4c7b1c5c88d31eb92ec9e8420"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 2,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2b9bae7963e97ff07a099b62254cdcf3acc1b4ad",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab9264be50955224b06868759d37547cabe48a4/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab9264be50955224b06868759d37547cabe48a4/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=fab9264be50955224b06868759d37547cabe48a4",
        "patch": "@@ -949,9 +949,7 @@ static CDataStream AddrmanToStream(const AddrMan& addrman)\n     CDataStream ssPeersIn(SER_DISK, CLIENT_VERSION);\n     ssPeersIn << Params().MessageStart();\n     ssPeersIn << addrman;\n-    std::string str = ssPeersIn.str();\n-    std::vector<unsigned char> vchData(str.begin(), str.end());\n-    return CDataStream(vchData, SER_DISK, CLIENT_VERSION);\n+    return ssPeersIn;\n }\n \n BOOST_AUTO_TEST_CASE(load_addrman)\n@@ -1023,9 +1021,7 @@ static CDataStream MakeCorruptPeersDat()\n     AddrInfo info = AddrInfo(addr, resolved);\n     s << info;\n \n-    std::string str = s.str();\n-    std::vector<unsigned char> vchData(str.begin(), str.end());\n-    return CDataStream(vchData, SER_DISK, CLIENT_VERSION);\n+    return s;\n }\n \n BOOST_AUTO_TEST_CASE(load_addrman_corrupted)"
      }
    ]
  },
  {
    "sha": "0000edaba306487a750f5648438f3dc8de08127c",
    "node_id": "C_kwDOABII59oAKDAwMDBlZGFiYTMwNjQ4N2E3NTBmNTY0ODQzOGYzZGM4ZGUwODEyN2M",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-12T10:58:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-12T10:41:55Z"
      },
      "message": "style: Use 4 spaces for indentation, not 5\n\nThe wrong indentation breaks editor workflows.\n\nCan be reviewed with --ignore-all-space",
      "tree": {
        "sha": "ba6e80b3ff41fb961c3a64a55088d79170cc1c11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba6e80b3ff41fb961c3a64a55088d79170cc1c11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0000edaba306487a750f5648438f3dc8de08127c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgJigv/VQ1yrX29GLQQvS62dAVEDrQpiT2nMGEwSHKnCuXddLiqxBkA+DcZwM14\nvfR9Y2gUZQEbNEQrmVu4nEc43PiVJ8+SiBCgfi3tNTA+CWJ1zAGBydvYEfO5jdAE\ne1wOvkJKMpYqU0aLHezNz4ZDNyIhxTOaZybRtsuwfyl9rkNTqGXJsPhRf+sbb6QL\nI8TEgBhRZcOdc1ueFU4pFkHJFpx/PksDx2LVZ4ZONOZCVIzguErJmfCrNI1W3Mz+\n9fl8qjgV4OnRm63i/K559Ggm9DexeiuQnfG3CD5WFSzulV7AQBW2faAe+5iIbbjm\npvis5U4ml2KKc0kAb6+SqXJ0nrD4GNMPgdHl8jrAF51IZUNVESQ+BDtsTp/DZz73\neL97ZpJ20+i2avu/40qqTLxdkOuGrmTOgmA9+fx5vJTRWa4HHvnKkWLRLcphE5ju\n6u/TS1yRknvy5EMC7S4QxpAU5t3No0RVXyleE8R/Ihef8CYZzdOKQqrOtoFWq50M\nFfogw0/o\n=cPO5\n-----END PGP SIGNATURE-----",
        "payload": "tree ba6e80b3ff41fb961c3a64a55088d79170cc1c11\nparent fab9264be50955224b06868759d37547cabe48a4\nauthor MarcoFalke <falke.marco@gmail.com> 1636714716 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1636713715 +0100\n\nstyle: Use 4 spaces for indentation, not 5\n\nThe wrong indentation breaks editor workflows.\n\nCan be reviewed with --ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0000edaba306487a750f5648438f3dc8de08127c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0000edaba306487a750f5648438f3dc8de08127c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0000edaba306487a750f5648438f3dc8de08127c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab9264be50955224b06868759d37547cabe48a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab9264be50955224b06868759d37547cabe48a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab9264be50955224b06868759d37547cabe48a4"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 21,
      "deletions": 22
    },
    "files": [
      {
        "sha": "f82864b42151fd067eb1bfa9690f901eaa4b6f3d",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 22,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0000edaba306487a750f5648438f3dc8de08127c/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0000edaba306487a750f5648438f3dc8de08127c/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=0000edaba306487a750f5648438f3dc8de08127c",
        "patch": "@@ -65,14 +65,14 @@ class AddrManTest : public AddrMan\n     // Simulates connection failure so that we can test eviction of offline nodes\n     void SimConnFail(const CService& addr)\n     {\n-         int64_t nLastSuccess = 1;\n-         // Set last good connection in the deep past.\n-         Good(addr, nLastSuccess);\n-\n-         bool count_failure = false;\n-         int64_t nLastTry = GetAdjustedTime()-61;\n-         Attempt(addr, count_failure, nLastTry);\n-     }\n+        int64_t nLastSuccess = 1;\n+        // Set last good connection in the deep past.\n+        Good(addr, nLastSuccess);\n+\n+        bool count_failure = false;\n+        int64_t nLastTry = GetAdjustedTime() - 61;\n+        Attempt(addr, count_failure, nLastTry);\n+    }\n };\n \n static CNetAddr ResolveIP(const std::string& ip)\n@@ -90,7 +90,8 @@ static CService ResolveService(const std::string& ip, uint16_t port = 0)\n }\n \n \n-static std::vector<bool> FromBytes(const unsigned char* source, int vector_size) {\n+static std::vector<bool> FromBytes(const unsigned char* source, int vector_size)\n+{\n     std::vector<bool> result(vector_size);\n     for (int byte_i = 0; byte_i < vector_size / 8; ++byte_i) {\n         unsigned char cur_byte = source[byte_i];\n@@ -246,15 +247,15 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n \n     BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n \n-    while (num_addrs < 22) {  // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n+    while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n         BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n \n-        //Test: No collision in new table yet.\n+        // Test: No collision in new table yet.\n         BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n     }\n \n-    //Test: new table collision!\n+    // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n     BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n@@ -275,16 +276,16 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n \n     BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n \n-    while (num_addrs < 64) {  // Magic number! 250.1.1.1 - 250.1.1.64 do not collide with deterministic key = 1\n+    while (num_addrs < 64) { // Magic number! 250.1.1.1 - 250.1.1.64 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n         BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n         addrman.Good(CAddress(addr, NODE_NONE));\n \n-        //Test: No collision in tried table yet.\n+        // Test: No collision in tried table yet.\n         BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n     }\n \n-    //Test: tried table collision!\n+    // Test: tried table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n     BOOST_CHECK(!addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n@@ -693,7 +694,6 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     // Test: IP addresses in the different source /16 prefixes sometimes map to NO MORE\n     // than 1 bucket.\n     BOOST_CHECK(buckets.size() == 1);\n-\n }\n \n BOOST_AUTO_TEST_CASE(addrman_serialization)\n@@ -814,7 +814,7 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n     // Add twenty two addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 23; i++) {\n-        CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n+        CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n         BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n         addrman.Good(addr);\n \n@@ -825,13 +825,12 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n \n     // Ensure Good handles duplicates well.\n     for (unsigned int i = 1; i < 23; i++) {\n-        CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n+        CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n         addrman.Good(addr);\n \n         BOOST_CHECK(addrman.size() == 22);\n         BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n     }\n-\n }\n \n BOOST_AUTO_TEST_CASE(addrman_noevict)\n@@ -841,7 +840,7 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n     // Add 35 addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n-        CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n+        CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n         BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n         addrman.Good(addr);\n \n@@ -864,7 +863,7 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n \n     // Lets create two collisions.\n     for (unsigned int i = 37; i < 59; i++) {\n-        CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n+        CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n         BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n         addrman.Good(addr);\n \n@@ -902,7 +901,7 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     // Add 35 addresses\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n-        CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n+        CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n         BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n         addrman.Good(addr);\n "
      }
    ]
  }
]