[
  {
    "sha": "b316dcb758e3dbd302fbb5941a1b5b0ef5f1f207",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzE2ZGNiNzU4ZTNkYmQzMDJmYmI1OTQxYTFiNWIwZWY1ZjFmMjA3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-08T10:40:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-14T13:23:43Z"
      },
      "message": "[net processing] Tolerate sendheaders and sendcmpct messages before verack\n\nBIP 130 (sendheaders) and BIP 152 (compact blocks) do not specify at\nwhich stage the `sendheaders` or `sendcmpct` messages should be sent.\nTherefore we should tolerate them being sent before the version-verack\nhandshake is complete.",
      "tree": {
        "sha": "a22e9c99908d7974825baaac6e753116da0eda8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a22e9c99908d7974825baaac6e753116da0eda8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b316dcb758e3dbd302fbb5941a1b5b0ef5f1f207",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b316dcb758e3dbd302fbb5941a1b5b0ef5f1f207",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b316dcb758e3dbd302fbb5941a1b5b0ef5f1f207",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b316dcb758e3dbd302fbb5941a1b5b0ef5f1f207/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b103fdcb3bf41a063752605311c80a11ef666596",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b103fdcb3bf41a063752605311c80a11ef666596",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b103fdcb3bf41a063752605311c80a11ef666596"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 33,
      "deletions": 33
    },
    "files": [
      {
        "sha": "05e5681df3b27489efb26dca6c008bfdaa513eb7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b316dcb758e3dbd302fbb5941a1b5b0ef5f1f207/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b316dcb758e3dbd302fbb5941a1b5b0ef5f1f207/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b316dcb758e3dbd302fbb5941a1b5b0ef5f1f207",
        "patch": "@@ -2503,6 +2503,39 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    if (msg_type == NetMsgType::SENDHEADERS) {\n+        LOCK(cs_main);\n+        State(pfrom.GetId())->fPreferHeaders = true;\n+        return;\n+    }\n+\n+    if (msg_type == NetMsgType::SENDCMPCT) {\n+        bool fAnnounceUsingCMPCTBLOCK = false;\n+        uint64_t nCMPCTBLOCKVersion = 0;\n+        vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n+        if (nCMPCTBLOCKVersion == 1 || ((pfrom.GetLocalServices() & NODE_WITNESS) && nCMPCTBLOCKVersion == 2)) {\n+            LOCK(cs_main);\n+            // fProvidesHeaderAndIDs is used to \"lock in\" version of compact blocks we send (fWantsCmpctWitness)\n+            if (!State(pfrom.GetId())->fProvidesHeaderAndIDs) {\n+                State(pfrom.GetId())->fProvidesHeaderAndIDs = true;\n+                State(pfrom.GetId())->fWantsCmpctWitness = nCMPCTBLOCKVersion == 2;\n+            }\n+            if (State(pfrom.GetId())->fWantsCmpctWitness == (nCMPCTBLOCKVersion == 2)) { // ignore later version announces\n+                State(pfrom.GetId())->fPreferHeaderAndIDs = fAnnounceUsingCMPCTBLOCK;\n+                // save whether peer selects us as BIP152 high-bandwidth peer\n+                // (receiving sendcmpct(1) signals high-bandwidth, sendcmpct(0) low-bandwidth)\n+                pfrom.m_bip152_highbandwidth_from = fAnnounceUsingCMPCTBLOCK;\n+            }\n+            if (!State(pfrom.GetId())->fSupportsDesiredCmpctVersion) {\n+                if (pfrom.GetLocalServices() & NODE_WITNESS)\n+                    State(pfrom.GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 2);\n+                else\n+                    State(pfrom.GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 1);\n+            }\n+        }\n+        return;\n+    }\n+\n     // Feature negotiation of wtxidrelay must happen between VERSION and VERACK\n     // to avoid relay problems from switching after a connection is up.\n     if (msg_type == NetMsgType::WTXIDRELAY) {\n@@ -2600,39 +2633,6 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n-    if (msg_type == NetMsgType::SENDHEADERS) {\n-        LOCK(cs_main);\n-        State(pfrom.GetId())->fPreferHeaders = true;\n-        return;\n-    }\n-\n-    if (msg_type == NetMsgType::SENDCMPCT) {\n-        bool fAnnounceUsingCMPCTBLOCK = false;\n-        uint64_t nCMPCTBLOCKVersion = 0;\n-        vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n-        if (nCMPCTBLOCKVersion == 1 || ((pfrom.GetLocalServices() & NODE_WITNESS) && nCMPCTBLOCKVersion == 2)) {\n-            LOCK(cs_main);\n-            // fProvidesHeaderAndIDs is used to \"lock in\" version of compact blocks we send (fWantsCmpctWitness)\n-            if (!State(pfrom.GetId())->fProvidesHeaderAndIDs) {\n-                State(pfrom.GetId())->fProvidesHeaderAndIDs = true;\n-                State(pfrom.GetId())->fWantsCmpctWitness = nCMPCTBLOCKVersion == 2;\n-            }\n-            if (State(pfrom.GetId())->fWantsCmpctWitness == (nCMPCTBLOCKVersion == 2)) { // ignore later version announces\n-                State(pfrom.GetId())->fPreferHeaderAndIDs = fAnnounceUsingCMPCTBLOCK;\n-                // save whether peer selects us as BIP152 high-bandwidth peer\n-                // (receiving sendcmpct(1) signals high-bandwidth, sendcmpct(0) low-bandwidth)\n-                pfrom.m_bip152_highbandwidth_from = fAnnounceUsingCMPCTBLOCK;\n-            }\n-            if (!State(pfrom.GetId())->fSupportsDesiredCmpctVersion) {\n-                if (pfrom.GetLocalServices() & NODE_WITNESS)\n-                    State(pfrom.GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 2);\n-                else\n-                    State(pfrom.GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 1);\n-            }\n-        }\n-        return;\n-    }\n-\n     if (msg_type == NetMsgType::INV) {\n         std::vector<CInv> vInv;\n         vRecv >> vInv;"
      }
    ]
  }
]