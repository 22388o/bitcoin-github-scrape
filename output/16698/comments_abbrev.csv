DrahtBot,2019-08-23 18:45:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17805](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17805.html) (test: Add test for rpcwhitelistdefault by e",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524422172,524422172,
amitiuttarwar,2019-08-23 22:23:04,"This code is ready for initial review.\n\nthere are still some to dos before it would be ready for merge: \n- identify expected rebroadcast traffic & worst case bandwidth usage.\n- persist `setUnbroadcastTxIDs` to `mempool.dat` \n- add functionality to run an automated job to cache min fee rate for txns to be included in block, then apply that filter to exclude txns with fee rate < min from r",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524480540,524480540,
jnewbery,2019-08-23 22:24:32,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524480853,524480853,
amitiuttarwar,2019-08-26 22:20:52,"thanks for the review @mzumsande ! \n\n> I don’t understand 1) the concept “should have been mined"" [...] do you mean the txns should have been mined in a specific block/range of blocks, but weren’t? Should no rebroadcasts happen in an ideal world where miners have an identical mempool to ours and mine rationally?\n\nbased on the local mempool, we are attempting to answer the question of what ",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-525055857,525055857,
mzumsande,2019-08-26 22:51:23,"> based on the local mempool, we are attempting to answer the question of what txns we think should have been mined.\n\nWhat confuses me is how we can answer that without actually looking into recent blocks. \nConsidering that txns are removed from the mempool once they are included in a valid block, it is possible that the previous blocks removed the respective top of our previous versions of ",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-525063430,525063430,
amitiuttarwar,2019-08-29 19:10:47,"great questions @mzumsande. I've thought about this a lot, so let me share some of my reasoning- \n \n> What confuses me is how we can answer that without actually looking into recent blocks.\n\nWe can't. And further, even if we do look at the recent blocks, we still cannot answer exactly what ""should"" have been included. The two main pieces of information we are missing are 1. what the miner'",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-526321842,526321842,
mzumsande,2019-08-31 19:04:39,"Thanks for the answer! I think that your approach makes sense and am looking forward to the traffic/bandwidth analysis. \nI am still not so sure if your approach is best described with the notion of ""should have been mined"", but to a degree that's just semantics.",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-526857552,526857552,
laanwj,2019-09-16 12:32:56,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-531756860,531756860,
MarcoFalke,2019-09-18 17:51:07,"Are you still working on this? This missed the 0.19 feature freeze, but I'd like to see it in 0.20 (hopefully early in the cycle)",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-532793902,532793902,
amitiuttarwar,2019-09-19 20:44:46,@MarcoFalke yes will resume soon,https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-533302150,533302150,
amitiuttarwar,2019-10-19 02:01:53,"an update on my current thinking for anyone interested-\n\nnext steps\n- [x] some misc small cleanup (make `PoissonNextSend` interface consistent, pull out 7f8056c50d047d12201ad5d0f75e00103f8a0bd6 into separate PR, etc.) \n- [x] cache the min fee rate for a txn to be included in a block & add as filter on rebroadcast set\n\nthen this PR would be ready for code review & I'd want to observe & ",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-544049895,544049895,
instagibbs,2019-10-24 20:01:26,is this ready for review? ,https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-546079321,546079321,
amitiuttarwar,2019-10-25 00:15:28,"@instagibbs - working on it ! building out one more piece of functionality (described https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-544049895), then will be ready for review. I'll remove the WIP from the title & leave a comment when it is :) ",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-546149954,546149954,
amitiuttarwar,2019-11-20 23:15:08,🎉 this PR is ready for review!,https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-556534669,556534669,
instagibbs,2019-11-22 19:28:59,"gave some opening suggestions while I digest the general strategy, feel free to not engage in the suggestions until enough concept/approach ACKs come in",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-557662617,557662617,
amitiuttarwar,2019-11-27 04:38:35,"thanks for the reviews @JeremyRubin & @instagibbs. I'm making my way through them, but want to leave a high level comment- the biggest concern with these changes is the bandwidth impact to the node & network. The parameters I have currently chosen are fairly arbitrary, with the intent of keeping the size of the rebroadcast set small but meaningful. I'm working on running a node with some extra log",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-558925008,558925008,
instagibbs,2019-11-27 18:16:27,"I think we should try to hold off nits until further concept acks and\ndevelopment\n\nOn Wed, Nov 27, 2019, 1:05 PM Emil Engler <notifications@github.com> wrote:\n\n> *@emilengler* commented on this pull request.\n> ------------------------------\n>\n> In src/miner.cpp\n> <https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351431222>:\n>\n> > @@ -406,6 +452,12 @@ void BlockAssembler::addPac",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-559199311,559199311,
jonatack,2019-12-03 19:16:21,"Tested 5335439a8c0cc591d717665d9dcd57d6adfb3fa8, if helpful. Same test issue:\n```\nwallet_watchonly.py                    | ✓ Passed  | 2 s\nwallet_watchonly.py --usecli           | ✓ Passed  | 3 s\nwallet_zapwallettxes.py                | ✓ Passed  | 6 s\nmempool_rebroadcast.py                 | ✖ Failed  | 338 s\n\nALL                                    | ✖ Failed  | 3064 s (accumulated)",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-561315010,561315010,
ariard,2019-12-08 04:35:13,"After talking with Amiti out-of-band, I'm concept ACK on the privacy fix. Turning relay flag of `SubmitMemoryPoolAndRelay` to false in `ResendWalletTransactions` means than wallet rebroadcast logic cascade in mempool one and so shouldn't be observable by a connected peer. Wallet tx is hidden in mempool ""anonymity set"".",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-562912194,562912194,
fjahr,2019-12-27 01:04:00,"Concept ACK on improving privacy here. I still need to put more work in going into the details of the approach but I took down some notes while looking over the code and previous discussions:\n- Implications of empty blocks were mentioned in PR Review Club and I just want to echo here that the behavior should be investigated and documented here. In addition to that, I can also see cases arise of ",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-569158954,569158954,
amitiuttarwar,2020-01-05 02:42:38,"first off, thank you all for the thoughtful reviews! here is an update: \n\nTLDR; overview of this PR & open threads [here](https://gist.github.com/amitiuttarwar/b592ee410e1f02ac0d44fcbed4621dba).\nYou can help me move this PR forward by\n1. approach ACKs or explaining unaddressed concerns\n2. running the `mempool_rebroadcast` test and sharing your results with me.\n\n--\n\nI pushed chang",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-570838774,570838774,
gmaxwell,2020-01-07 02:05:09,"> I think the best way to address would be a kill switch to disable rebroadcasting.\n\nThere is one, -walletbroadcast=0.\n\nHow should this be handling dependencies?\n\nIf you are merely filtering on feerate will you end up with a situation where you rebroadcast a child transaction that has a high feerate even when the low feerate of its parent means it has no chance of being included?\n\n",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-571399346,571399346,
gmaxwell,2020-01-07 03:02:40,"Question: Is it a goal to rebroadcast transactions to peers that have already had them sent to them?\n\nIf yes: the current PR (and wallet rebroadcasting) fails to do that (reliably) because of the per peer bloom filters on broadcasts.\n\nIf no: great that reduces bandwidth, but the current bloomfiltering approach doesn't successfully do that reliably-- because it forgets.   The existing bloom",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-571412136,571412136,
amitiuttarwar,2020-01-09 05:51:07,"thank you for your review @gmaxwell !\n\nRE: kill switch & `-walletbroadcast=0`\n- This mechanism previously disabled rebroadcasts, since that was a purely wallet focused responsibility. With these changes (in the current state), setting this flag to false will not disable the node rebroadcasting transactions. \n- Conceptually I think this makes sense. with these changes rebroadcasting transac",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-572400405,572400405,
DrahtBot,2020-01-30 06:08:27,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-580098467,580098467,
amitiuttarwar,2020-03-31 00:25:03,"closing this PR until #18038 gets merged. \n\nif you're interested in moving this project forward, #18038 is ready for review :) thanks in advance!",https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-606322844,606322844,
gmaxwell,2021-01-10 14:30:12,Is this work going to continue now that #18038 is done?,https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-757485579,757485579,
amitiuttarwar,2021-01-12 02:34:33,@gmaxwell yes! I'm currently trying to work out a couple more kinks before continuing the review process on github & seeking feedback on approach. ,https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-758354262,758354262,
amitiuttarwar,2021-02-08 17:55:15,this work is being continued in #21061 :) ,https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-775329154,775329154,
MarcoFalke,2019-08-23 21:45:00,"\n```\ntest/functional/wallet_resendwallettransactions.py:9:1: F401 'test_framework.blocktools.create_coinbase' imported but unused",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317311984,317311984,test/functional/wallet_resendwallettransactions.py
MarcoFalke,2019-08-25 15:44:13,"in commit 25a3b0ac6aea95845c48c0a345325af8ad15c3ca:\n\nThe legacy signature of this function takes as argument type and return type microseconds. Can you explain why this one is different?\nNote that you are allowed to pass in `std::chrono::seconds` when the function takes `std::chrono::microseconds`.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404017,317404017,src/net.h
MarcoFalke,2019-08-25 15:46:46,"same commit:\n\nCan you explain how the cast to seconds has an effect on the distribution? It appears that the most likely return value will be exactly `0`? Alternatively, I'd rather return microseconds just like the existing function.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404110,317404110,src/net.h
MarcoFalke,2019-08-25 15:48:22,"In commit fd92d22540f97924bd73301dc061005b401d7472:\n\nI'd prefer if new members are prefixed with `m_` and used snake case according to the dev notes. This makes it easier to guess from the variable name if something is a member, a global, or just  a symbol in the local scope. Additionally, I'd prefer to use `std::chrono::seconds` (or whatever the type is) for those reasons:\n\n* It documents",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404179,317404179,src/miner.h
MarcoFalke,2019-08-25 15:57:55,"in commit af38c70497575c9ad33901a19db01a7f104ffaeb\n\nCan you add a comment why this would ever be true, otherwise remove the dead code.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404560,317404560,src/txmempool.cpp
amitiuttarwar,2019-08-26 20:11:09,"ah my bad, will fix\n\nbased on this tip \n> Note that you are allowed to pass in std::chrono::seconds when the function takes std::chrono::microseconds.\n\nI'm thinking of updating the function signature to both take in & return microseconds. And the caller can pass through seconds when needed. I'm interested in moving all the poisson invocations to the chrono in a follow up PR. Its less of ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317776787,317776787,src/net.h
mzumsande,2019-08-26 21:20:46,"If we add wallet transactions to the rebroadcast INV that have a smaller feerate than the top of our mempool, wouldn’t there be a feerate gap to the other INVs of the message, making the wallet transactions easily identifiable as such and reducing privacy?",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317803991,317803991,src/net_processing.cpp
mzumsande,2019-08-26 21:25:09,"This goes into timeout for me, causing `wallet_resendwallettransactions` to fail when I run the entire test suite (same as in AppVeyor build here) but the test succeeds if I run it in isolation. If you can’t reproduce this I could look deeper into why it fails.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317805635,317805635,test/functional/wallet_resendwallettransactions.py
amitiuttarwar,2019-08-26 21:39:34,"I added it as a safeguard. Do you feel confident it would never happen? If so, I will take another careful look at the logic to build my own confidence & remove. ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317810628,317810628,src/txmempool.cpp
MarcoFalke,2019-08-26 21:46:17,"Even if it would, any follow-up logic that deals with the returned set needs to be robust against missing txs anyway.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317812879,317812879,src/txmempool.cpp
MarcoFalke,2019-08-26 21:47:47,Note that `::mempool.cs` is released as soon as this method returns.,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317813390,317813390,src/txmempool.cpp
amitiuttarwar,2019-08-26 21:52:14,"correct. I will add a comment to document.\n\nthis logic should only trigger when a user submits a txn locally and it doesn't get initially relayed..  an example where this would be needed.. a user submits a low fee rate txn with p2p disabled, inspects it in the local mempool, and enables p2p. currently, the txn would get initially relayed due to the wallet rebroadcast logic. with the proposed c",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317814851,317814851,src/net_processing.cpp
amitiuttarwar,2019-08-26 21:53:15,oh interesting. I haven't been able to reproduce locally. I would love some help! ,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317815144,317815144,test/functional/wallet_resendwallettransactions.py
mzumsande,2019-08-27 16:55:19,"I think that this is due to a bug with the time: `RESEND_TXS_FREQUENCY` is in microseconds. It is added to `GetTime()`  which is in seconds, so an actual resend doesn't ever happen in test. \nYet the test sometimes succeeds because there is an initial resend (`nNextResend` is initialized to 0) which in some runs happens after the mocktime is set to two weeks and the tx has been expired (test pass",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318189941,318189941,test/functional/wallet_resendwallettransactions.py
amitiuttarwar,2019-08-29 00:14:24,"thanks for digging in!! I will fix the bug and ensure the times are consistent in microseconds. \n\ncould you tell me more about how you debugged? were you able to isolate the failure, or was it always when run in the entire suite? I'm curious why this behavior wouldn't manifest as a flaky test when run in isolation. ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318842467,318842467,test/functional/wallet_resendwallettransactions.py
mzumsande,2019-08-29 22:26:22,"On my other computer it also sometimes failed in the single run, which made testing easier. I found this the bug adding some debug statements in `ResendWalletTransactions`. \n\nFixing the times might not solve this completely, because the initial rebroadcast after startup also happened for me in a few runs right before `assert txhsh not in node.getrawmempool()`, which then fails. Adding a sleep ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r319296326,319296326,test/functional/wallet_resendwallettransactions.py
MarcoFalke,2019-09-03 15:29:25,"> making the wallet transactions easily identifiable as such and reducing privacy?\n\nI don't think this is true (at least no worse than today). While it is possible to guess whether a list of INVs is a rebroadcast inv or not, it shouldn't be possible to trivially find the source of the low feerate txs in that inv. Txs broadcast for the first time from our node should be no different from txs br",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r320337577,320337577,src/net_processing.cpp
amitiuttarwar,2019-10-20 00:08:04,Fixed.,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336757949,336757949,src/net.h
amitiuttarwar,2019-10-20 00:53:34,Fixed.,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336758783,336758783,src/miner.h
amitiuttarwar,2019-10-20 17:33:49,"this is a temporary parking spot for this code. All three tests use it, so I'd like to pull it out into some shared utility, but haven't figured out where makes sense yet. Any suggestions?",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336788290,336788290,test/functional/mempool_rebroadcast.py
amitiuttarwar,2019-10-21 20:09:08,"ok my understanding is.. without the check, if the txn was no longer in the mempool, it would..\n1.  get added to setRebroadcastTxs in this function. \n2. returned to the caller [here](https://github.com/bitcoin/bitcoin/pull/16698/files#diff-eff7adeaec73a769788bb78858815c91R3799) & insert into `setInventoryTxToSend`\n3. `setInventoryTxToSend` gets copied into `vInvTx` [here](https://github.com/",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337215008,337215008,src/txmempool.cpp
MarcoFalke,2019-10-22 13:33:03,"It doesn't depend on any outside modules except `mininode`, so it could be moved there or to a new module.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337517986,337517986,test/functional/mempool_rebroadcast.py
MarcoFalke,2019-10-22 21:17:11,"in commit e768ad10fbd24929059a1ada67cefaa3bc570b0d:\n\nI don't think casting (truncating) microseconds to seconds is acceptable, as it degrades everything smaller than a second to a delay of zero.\n\nYou could just pass in `std::chrono::seconds average_interval` and then call here:\n\n```cpp\n     return std::chrono::microseconds{PoissonNextSend(now.count(), interval_seconds.count())};",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337754765,337754765,src/net.h
amitiuttarwar,2019-10-23 18:51:50,ok I get it. fixed.,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r338220615,338220615,src/net.h
amitiuttarwar,2019-11-21 00:15:45,"Not sure if one `GETDATA` is the best solution to indicate the txn has been successfully broadcast to the network. \n\nThe worst case is highlighted by the tests- a node receives the getdata back from the first peer before announcing to any other peers. so I have to disconnect the other peers to send to the new connection. (see [here](https://github.com/bitcoin/bitcoin/pull/16698/files?file-filt",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r348840194,348840194,src/net_processing.cpp
amitiuttarwar,2019-11-21 00:31:38,I removed this test because it was converging with `test_fee_rate_cache.`,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r348844259,348844259,test/functional/mempool_rebroadcast.py
instagibbs,2019-11-21 20:00:06,s/resbumit/resubmit/,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349290407,349290407,src/wallet/wallet.cpp
instagibbs,2019-11-21 20:02:51,"suggested bikeshedding of name for new readers:\n\n`SubmitMemoryPoolAndMaybeRelay` or `SubmitMemoryPool` since `relay` is an argument...",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349291579,349291579,src/wallet/wallet.cpp
JeremyRubin,2019-11-22 02:47:17,"Does it make sense to hardcode a smaller MIN_TX_REBROADCAST_INTERVAL (5 minutes?), and then a TX_REBROADCAST_INTERVAL which is either 1 hour or  a custom parameter?",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349413481,349413481,src/net_processing.cpp
JeremyRubin,2019-11-22 02:47:30,Can be addressed in a follow up PR.,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349413523,349413523,src/net_processing.cpp
JeremyRubin,2019-11-22 02:51:47,"There's no real point to using a set here -- the block is already guaranteed to be de-duplicated, so you can make this interface just use a vector (or move the vtx out of the block template, and insert directly into setRebroadcastTxs later)",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414243,349414243,src/txmempool.cpp
JeremyRubin,2019-11-22 02:52:41,Can this be re-written in terms of the consensus.h parameters?,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414400,349414400,src/txmempool.h
JeremyRubin,2019-11-22 02:54:18,Why 30 minutes?,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414729,349414729,src/txmempool.h
JeremyRubin,2019-11-22 02:55:42,"technically, for the name to be accurate should be >= (as we won't allow a tx with the max time).",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414959,349414959,src/miner.cpp
JeremyRubin,2019-11-22 02:56:20,Could either do >= or rename it tx_time_bound,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349415067,349415067,src/miner.cpp
JeremyRubin,2019-11-22 02:58:25,Isn't this a more obvious privacy leak now? Because you'd see the tx hash appear in two updates?,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349415453,349415453,src/wallet/wallet.cpp
JeremyRubin,2019-11-22 03:06:48,"Maybe this line should ""go away"", and then it should be ensured that GetBroadcastTransactions is false during reindex/import/IBD (which would block the calls below in SubmitMemoryPoolAndRelay).\n\n""Go away"" in scare quotes, so that way we're only using this line as an optimization to prevent having to lock the chain. below, but it's not required for any correctness reasons.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349416833,349416833,src/wallet/wallet.cpp
JeremyRubin,2019-11-22 03:07:01,Perhaps rename this because now we're not resending?,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349416865,349416865,src/wallet/wallet.cpp
instagibbs,2019-11-22 18:46:43,how much work is it to avoid this? ,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349741004,349741004,test/lint/lint-circular-dependencies.sh
instagibbs,2019-11-22 18:51:57,"you could re-arrange this to just check the count directly and use in below conditional, then set the new value for `pto->m_next_rebroadcast` after the conditional block. Gets rid of `fFirst`.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349743181,349743181,src/net_processing.cpp
instagibbs,2019-11-22 18:52:21,Think these brackets are off by a tab?,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349743339,349743339,src/net_processing.cpp
instagibbs,2019-11-22 18:56:19,"I don't think it needs to be a non-empty script, blank is fine for this.\n\nalso try using snake_case for new variables aka `dummy_script`.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349745040,349745040,src/txmempool.cpp
instagibbs,2019-11-22 18:59:12,very high level question: how much compute time does creating a unique block template for each peer roughly every 10 minutes take?,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349746237,349746237,src/net_processing.cpp
instagibbs,2019-11-22 19:00:42,"I'd also like a slightly stronger justification for 3/4 if there is one. What is ""noise"" in this context? Any simulations/estimations to show that 1/4 cut off is a lot of bandwidth in practice?",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349746841,349746841,src/txmempool.h
instagibbs,2019-11-22 19:03:25,probably want it a value related to the `consensus.nPowTargetSpacing` ?,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349747931,349747931,src/txmempool.h
instagibbs,2019-11-22 19:05:11,"this name is pretty ambiguous.\n\n`m_skip_inclusion_until` or something in that vicinity? \n",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349748672,349748672,src/miner.h
instagibbs,2019-11-22 19:06:07,I suggested rename eslewhere to be self-describing(something like `m_skip_inclusion_until` ?) and then you can drop the comment on this line because it's obvious what the meaning is.,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349749113,349749113,src/miner.cpp
instagibbs,2019-11-22 19:07:33,"oh I see in `38599640a1afae2bcf2aa46b0009bc0b94a46434` it's fixed anyways, not worth messing around...",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349749692,349749692,src/net_processing.cpp
instagibbs,2019-11-22 19:14:11,"this commit `38599640a1afae2bcf2aa46b0009bc0b94a46434` introduces `m_unbroadcast_txids` before it's defined anywhere.\n\nI'd also suggest a rename if it's wallet-related only. `m_unbroadcast_wallet_txids`",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349752418,349752418,src/net_processing.cpp
instagibbs,2019-11-22 19:18:35,"This also adds anything submitted via `sendrawtransaction`, at least, so it's not explicitly wallet-related.\n\nI think it's wallet-or-sendrawtransaction transactions only :)\n\nconfirmed:\n`src/node/transaction.cpp:19:    // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.`\n\nthis should get a test!",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349754289,349754289,src/node/transaction.cpp
amitiuttarwar,2019-11-25 22:14:13,"Want to clarify my expectations of the behavior- \n\nWe add transactions to `setInventoryTxToSend` when we expect to relay the transaction to a peer. This includes if we are the source node for the transaction as well as if we are relaying it. With these changes, both the transactions to rebroadcast and the ""unbroadcast"" transactions are added to `setInventoryTxToSend` on the rebroadcast poisson",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350450955,350450955,src/net_processing.cpp
MarcoFalke,2019-11-26 00:29:21,"You are creating blocks on node[0], that this node (node[1]) might not have. This will lead to a race.\n\nYou can avoid it by calling sync_blocks or sync_all after you have generated the blocks.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350490922,350490922,test/functional/mempool_wallet_transactions.py
amitiuttarwar,2019-11-26 01:05:18,"ah, got it now. thank you! ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350499480,350499480,test/functional/mempool_wallet_transactions.py
amitiuttarwar,2019-11-26 02:08:58,"are you proposing the minimum to support a user configurable frequency, or for the current case (since its possible bc of poisson distribution)? ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350513338,350513338,src/net_processing.cpp
amitiuttarwar,2019-11-26 02:17:06,would be happy to support customizable rebroadcast interval in a future PR if that's of interest. request for anyone coming across this who'd like that feature to leave a 👍response,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350514958,350514958,src/net_processing.cpp
JeremyRubin,2019-11-26 02:44:29,"I think the min can be hard-coded, and that it shouldn't happen more frequently even when drawing poisson time (e.g.,  something like: min_time + poisson(avg_time - min_time)).\n\nSo as to impose a strict cap on how frequently this is happening, because if you draw out of a poisson a large number of times eventually you'll see a run of small interval windows.\n\nYou also want something to ensu",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350520484,350520484,src/net_processing.cpp
amitiuttarwar,2019-11-26 02:45:32,"some relevant info on how an attack could potentially be carried out here: https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350450955. but relevant parts reiterated here- \n\nthe attack seems simple to execute, but rare to get the right conditions where it succeeds, and the incentive seems weak. \n- execution: attacker sends `GETDATAs` back for every transaction it receives & never pro",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350520715,350520715,src/net_processing.cpp
amitiuttarwar,2019-11-26 02:49:34,"Not sure I follow. This method would be a no-op if the transaction is in your mempool. If its not in your mempool, it would call through to `BroadcastTransaction` with relay=false, so it would go through ATMP, but not be immediately relayed. Another `INV` will only be sent if the transaction is selected for rebroadcast. \n\nI’m sure there’s some small privacy leak here based on timing of re-entr",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350521441,350521441,src/wallet/wallet.cpp
amitiuttarwar,2019-11-26 02:57:58,"Yup. Totally. I think I use the language of “local” transactions elsewhere. Do you find that clear or should I just spell it all out every time? \n\nAlso, revisiting my `mempool_wallet_transactions` test, I realized I actually end up creating the “wallet” transaction with `sendrawtransaction`. Oops. I'll add another transaction in that test that uses `sendtoaddress` then it will cover both :) \",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350523086,350523086,src/node/transaction.cpp
jnewbery,2019-11-26 03:35:18,"I don't think a customizable rebroadcast interval is a good idea:\n\n- we should avoid adding command line options that have minimal impact on user experience. Take a look at the 10s of options in `init.cpp`. I'm sure there are many of them that hardly anyone uses, and they just add unnecessary complexity/interactions to the code.\n- we should try to avoid adding unnecessary fingerprints to nod",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350530044,350530044,src/net_processing.cpp
amitiuttarwar,2019-11-26 04:52:51,"we're resending (or attempting) to the mempool. I could rename to `ResubmitWalletTransactions`, but that doesn't seem much different? ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350542949,350542949,src/wallet/wallet.cpp
amitiuttarwar,2019-11-26 05:09:18,"yeah I agree. seems unrelated to this PR though? I can easily make it as a separate PR, but not sure on the etiquette around that since it would be a pure refactor. thoughts? ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350545734,350545734,src/wallet/wallet.cpp
JeremyRubin,2019-11-26 07:18:53,"Then that's an argument against doing this *at all*, as it increases bandwidth requirements for low-resourced nodes who need to rebroadcast transactions.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350573667,350573667,src/net_processing.cpp
JeremyRubin,2019-11-26 07:20:33,"To be clear; I'm in favor of this change :)\n\nI just think if you're a low resourced node you'd want to be able to decrease the frequency at which your rebroadcasts are occurring if you have to send out an entire block worth of data.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350574103,350574103,src/net_processing.cpp
ajtowns,2019-11-26 08:15:23,"I think there's a case for reviewing the worst case resource usage, but I think in the normal case the bandwidth for rebroadcast will be very low and not really something that needs to be throttled even for low powered nodes. (Reducing your mempool size would be one way of reducing your outgoing rebroadcast traffic, but I think that's mostly just a tradeoff against incoming rebroadcast traffic)",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350590665,350590665,src/net_processing.cpp
instagibbs,2019-11-26 13:54:55,It's fine to not change it. I might do it myself since it's just bothering me :) ,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350753952,350753952,src/wallet/wallet.cpp
instagibbs,2019-11-26 13:56:11,"{node, locally}-submitted transactions is fine, just noting the comments are wrong in certain places",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350754700,350754700,src/node/transaction.cpp
mzumsande,2019-11-26 21:57:06,"I think that this commit should have more detailed documentation, both in the header and here where txes are filtered out. Since the code is intended for actual mining, most readers won't expect this kind of ""creative"" indirect use and will wonder why we would ever exclude transactions from a block for being too recent.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351000417,351000417,src/miner.cpp
adamjonas,2019-11-27 16:01:50,91eefef24 isn't compiling for me due to `no member named 'm_max_tx_time' in 'BlockAssembler::Options'`,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351371480,351371480,src/txmempool.cpp
ariard,2019-11-27 16:15:12,"nit: you could print log here instead of in net_processing to avoid iterating on the set/vector again like ""Submitting tx for rebroadcast to net processing""",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351379073,351379073,src/txmempool.cpp
jonatack,2019-11-27 17:02:37,"This assertion timed out for me (""not true after 60 seconds"") on the first run of 375 secs. Passed on a second run, then timed out in the same place again in the third run.  Passed a few more runs, then failed again.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351404225,351404225,test/functional/mempool_rebroadcast.py
adamjonas,2019-11-27 17:21:21,I am unable to get this to pass in cadd572afd8b1468aee8a0a3ba65b5e38fc021dd or ffd154d06. Getting an 'Mempool sync timed out` AssertionError.,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351412622,351412622,test/functional/mempool_rebroadcast.py
jonatack,2019-11-27 17:58:52,"Both at 42c460a24f6d9d9c2c65c30287965acbce096ecf and rebased to current master.\n\n```\n~/projects/bitcoin/bitcoin (pr/16698) $ test/functional/mempool_rebroadcast.py \n2019-11-27T17:51:11.955000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_g9hdr2e_\n2019-11-27T17:51:13.096000Z TestFramework (INFO): Test simplest rebroadcast case\n2019-11-27T17:51:14.928000Z Test",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351428700,351428700,test/functional/mempool_rebroadcast.py
adamjonas,2019-11-27 18:03:55,"This on my first run as well, but then passed six in a row so didn't report.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351430669,351430669,test/functional/mempool_rebroadcast.py
emilengler,2019-11-27 18:05:17,Nit: Wouldn't it be better to use the one line if coding style?,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351431222,351431222,src/miner.cpp
ariard,2019-11-27 18:13:10,"""could LEAK PRIVACY if tx is new and hasn't previously flooded on the network""",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351434318,351434318,src/rpc/mining.cpp
ariard,2019-11-27 18:14:36,rational of every 24h? I wondering if we shouldn't be more aggressive to have a chance of wallet rebroadcast being staggered in next mempool rebroadcast happening every 10min so resend like 1 min,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351434890,351434890,src/wallet/wallet.cpp
ariard,2019-11-27 18:21:15,need to update comment,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351437537,351437537,src/miner.cpp
ariard,2019-11-27 19:32:52,I find the mechanism a bit weird as it leaks a wallet concern in the P2P stack. If you have multiple wallets connected to your node or even accept tx from third-party through your RPC command are you going to ensure success for all of them ? ,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351465071,351465071,src/net_processing.cpp
ariard,2019-11-27 19:33:40,"IMO just set the nLocktimeCutoff to nMedianTimePast, as we care about up to date mempool all of them are far ahead BIP 113 activation.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351465381,351465381,src/miner.cpp
ariard,2019-11-27 19:36:02,Did you benchmark `CacheMinRebroadcastFee` ? Not sure if it's the best way to encumber ThreadMessageHandler with mempool computation. I think it could be scheduled by the scheduler like we are doing for DumpBanList or DumpAddresses.,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351466313,351466313,src/net_processing.cpp
JeremyRubin,2019-11-28 01:43:38,"Reducing mempool does not obviously help with resource reduction for a few reasons:\n\n1) because of compact blocks (slower to get new blocks, so if you're peak-bandwidth capped it's bad).\n2) If you're bandwidth constrained, you aren't necessarily memory constrained either (why throw away a transaction if it seems good?)\n3) It stands to reason that when fees are going up, you'll evict a lot ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351562187,351562187,src/net_processing.cpp
amitiuttarwar,2019-11-30 18:42:04,"I'm unable to reproduce this locally. Asked @jonatack for logs & looks like the failure occurs after going through the while loop >150 times, which means the `if new_conn.get_invs()` conditional is never hitting. Theoretically it would be possible for the condition to not hit, but that should be an _extreme_ edge case, vs the frequency of failures being seen. I'll try to run this test in different",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352298564,352298564,test/functional/mempool_rebroadcast.py
jonatack,2019-11-30 19:35:06,FWIW this was on a recent Debian and building with `--enable-debug --enable-bench`. Could be good to have other data points in the form of people running this test. I hope to dig into these tests soon.,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352300626,352300626,test/functional/mempool_rebroadcast.py
amitiuttarwar,2019-12-02 20:26:57,"hm, there could be a privacy leak even if the txn isn't new. Even if it has propagated the network, if you `prioritisetransaction` it could cause the rebroadcast logic to pick up the txn & rebroadcast it sooner than it would have otherwise. this would indicate to a spy node that this txn is of special interest to you, thus leaking privacy.",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352811413,352811413,src/rpc/mining.cpp
amitiuttarwar,2019-12-02 20:48:29,"if the txn is already in your mempool, this function will be a no-op, which should be the majority of the time. this is only relevant if it has gotten dropped from your mempool (expired, evicted, etc.) the rebroadcast logic will look at the contents of the mempool to decide what to rebroadcast. so, the majority of the time, this function will not be relevant to determining if a wallet txn will be ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352820701,352820701,src/wallet/wallet.cpp
amitiuttarwar,2019-12-02 21:06:27,"I agree that its not an ideal separation of concerns, but I think it's reasonable. Essentially, when you submit a txn to the mempool/node, it guarantees that it will 1. validate the txn & accept into its mempool locally & 2. propagate it out to the network (assuming validity). \n\nThe normal way this is achieved is by bundling the actions together. However, if you have p2p disabled when you init",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352835676,352835676,src/net_processing.cpp
amitiuttarwar,2019-12-02 22:20:27,"hm that's true, but then I wouldn't be able to supplement with which peer. Leaving it for now. ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352889754,352889754,src/txmempool.cpp
amitiuttarwar,2019-12-02 23:27:25,"updated to vector. I started reading up on move, but don't fully understand it and it seems like there are some gotchas? going to resolve this convo for now, but we can re-open if you think move is better. ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352914275,352914275,src/txmempool.cpp
amitiuttarwar,2019-12-02 23:34:05,updated name to `m_skip_inclusion_until` & added documentation to this function definition & in the header ,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352916240,352916240,src/miner.cpp
amitiuttarwar,2019-12-02 23:44:55,"I'd rather leave it in for legibility since the compiler should optimize it away regardless- (simple example reproduced [here](https://godbolt.org/z/ZcVdJK)). If invoked, the `fSkipRun` logic needs to overwrite the next rebroadcast time, so that logic would also need to be shuffled. Doable but makes the code more opaque. ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352919393,352919393,src/net_processing.cpp
amitiuttarwar,2019-12-02 23:46:14,whitespace strugs 🙈,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352919742,352919742,src/net_processing.cpp
amitiuttarwar,2019-12-02 23:47:02,fixed,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352919952,352919952,src/txmempool.cpp
amitiuttarwar,2019-12-02 23:47:34,fixed,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352920115,352920115,src/miner.h
amitiuttarwar,2019-12-02 23:49:34,"cleaned up my commits, they should be good now.\n\nas you've mentioned, its wallet & rpc-submitted txns, so I could rename to `m_unbroadcast_local_txids`, but I don't think that helps clarify so I left as is. lmk if you disagree. ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352920617,352920617,src/net_processing.cpp
amitiuttarwar,2019-12-02 23:50:17,fixed,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352920830,352920830,src/node/transaction.cpp
amitiuttarwar,2019-12-02 23:57:17,fixed. all commits should now build. ,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352922793,352922793,src/txmempool.cpp
amitiuttarwar,2019-12-02 23:57:40,should be fixed,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352922921,352922921,test/functional/mempool_rebroadcast.py
amitiuttarwar,2019-12-03 00:02:42,updated,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352924313,352924313,src/miner.cpp
amitiuttarwar,2019-12-03 00:42:38,"updated to be defined in terms of `consensus.h` param. \n\nRE justification for 3/4 & bandwidth implications -> agreed more data & justification is important. I'm working on running this patch live & observing bandwidth usage and will report back with that data. I'm going to resolve this comment & continue the conversation in the main thread at that time.  ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352934520,352934520,src/txmempool.h
amitiuttarwar,2019-12-03 01:21:00,is there a downside to leaving as is? I'd rather have this code mimic the normal mining path as closely as possible. ,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352943478,352943478,src/miner.cpp
ariard,2019-12-03 16:54:07,"The downside is more complex code to review in the future.\n\nGiven current value `STANDARD_LOCKTIME_VERIFY_FLAGS`, `nLockTimeCutoff` is always going to be `nMedianTimePast`. And this rule being not only a standard one but a consensus one it's not going to change. We may have future different rules to compute transaction timelock but I think linking to standardness is a confusion here. Normal mi",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r353300584,353300584,src/miner.cpp
ariard,2019-12-03 16:56:30,"Or you can also add a printer just for the peer in the ""check for rebroadcasts"" SendMessages branch :) ?",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r353302031,353302031,src/txmempool.cpp
ariard,2019-12-03 17:13:59,"> 1. validate the txn & accept into its mempool locally \n\nAssuming tx succeed fee checks.\n\n> The normal way this is achieved is by bundling the actions together. However, if you have > p2p disabled when you initially submit the txn, you no longer get # 2.\n\nAs a user if you deactivate p2p functionality at tx mempool-insertion broadcast should be then a best-effort on the timing side. I ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r353311671,353311671,src/net_processing.cpp
ariard,2019-12-03 17:17:46,"Ooops, yes 1 hour, dunno from where I drawn it, my question is you want wallet rebroadcast to have the highest change possible to be selected for mempool rebroadcast, to do so your wallet rebroadcast batch should be resubmitted in each mempool rebroadcast period, so wallet_timer < mempool_timer ?",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r353313642,353313642,src/wallet/wallet.cpp
amitiuttarwar,2019-12-03 20:39:09,ok you've convinced me :) I'll update.,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r353409565,353409565,src/miner.cpp
amitiuttarwar,2020-01-03 18:23:04,"@ariard do you still have an outstanding concern here?\n\n>I find the mechanism a bit weird as it leaks a wallet concern in the P2P stack.\nthe first comment talks about the layer separation\n>so for reliability your wallet should ensure periodic resend/rebroadcast.\nbut your second comment seems to talk more about the wallet & mempool rebroadcast timers. \n\nthe thread was started in regar",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r362910528,362910528,src/net_processing.cpp
amitiuttarwar,2020-01-04 21:16:14,fixed,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r363055591,363055591,src/miner.cpp
amitiuttarwar,2020-01-06 19:22:55,I was able to reproduce this failure on an ubuntu machine. latest push fixed it for me & jonatack. going to resolve.,https://github.com/bitcoin/bitcoin/pull/16698#discussion_r363443166,363443166,test/functional/mempool_rebroadcast.py
jonatack,2020-01-06 19:56:28,"> I was able to reproduce this failure on an ubuntu machine. latest push fixed it for me & jonatack. going to resolve.\n\nSGTM",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r363456857,363456857,test/functional/mempool_rebroadcast.py
amitiuttarwar,2020-01-06 23:22:45,"the wallet resubmission timer is only incase the txn gets dropped (expired, evicted, etc.) from the local mempool before being confirmed. thus, its unnecessary for the wallet to attempt to resubmit to the mempool every hour.\n\n@ariard based on our conversation offline, I believe you have reached this understanding & are now comfortable with this timer. can you confirm? ",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r363529533,363529533,src/wallet/wallet.cpp
amitiuttarwar,2020-01-07 01:04:42,"Seems like the customizable rebroadcast interval is a proposed solution for concerns around bandwidth usage for low resourced nodes. \n\nI agree that we should ensure these rebroadcast changes don’t impose a significant bandwidth requirement.\n\nI believe the current changes require little additional bandwidth, which my initial monitoring from running this patch supports. More info posted in t",https://github.com/bitcoin/bitcoin/pull/16698#discussion_r363552641,363552641,src/net_processing.cpp
