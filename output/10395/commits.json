[
  {
    "sha": "1b936f59264a4f4a867baece1e0ee4ec02f73cee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjkzNmY1OTI2NGE0ZjRhODY3YmFlY2UxZTBlZTRlYzAyZjczY2Vl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-13T15:52:14Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-13T15:59:09Z"
      },
      "message": "Replace boost::function with std::function (C++11)",
      "tree": {
        "sha": "bee678b62d3ab3e0cda83144f0f2a8ddf25d777d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bee678b62d3ab3e0cda83144f0f2a8ddf25d777d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b936f59264a4f4a867baece1e0ee4ec02f73cee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b936f59264a4f4a867baece1e0ee4ec02f73cee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b936f59264a4f4a867baece1e0ee4ec02f73cee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b936f59264a4f4a867baece1e0ee4ec02f73cee/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94e52273f30fc9f3f1a7b58778ed21781bb2a744",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e52273f30fc9f3f1a7b58778ed21781bb2a744",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e52273f30fc9f3f1a7b58778ed21781bb2a744"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 26,
      "deletions": 30
    },
    "files": [
      {
        "sha": "33631d2d150545196a1a559e5b40a140b8f00c9e",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=1b936f59264a4f4a867baece1e0ee4ec02f73cee",
        "patch": "@@ -5,6 +5,7 @@\n #include \"bench.h\"\n #include \"perf.h\"\n \n+#include <assert.h>\n #include <iostream>\n #include <iomanip>\n #include <sys/time.h>"
      },
      {
        "sha": "1f36f2a4bca1b07e2577aebb8392463aabe0a2b4",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=1b936f59264a4f4a867baece1e0ee4ec02f73cee",
        "patch": "@@ -5,10 +5,11 @@\n #ifndef BITCOIN_BENCH_BENCH_H\n #define BITCOIN_BENCH_BENCH_H\n \n+#include <functional>\n+#include <limits>\n #include <map>\n #include <string>\n \n-#include <boost/function.hpp>\n #include <boost/preprocessor/cat.hpp>\n #include <boost/preprocessor/stringize.hpp>\n \n@@ -59,7 +60,7 @@ namespace benchmark {\n         bool KeepRunning();\n     };\n \n-    typedef boost::function<void(State&)> BenchFunction;\n+    typedef std::function<void(State&)> BenchFunction;\n \n     class BenchRunner\n     {"
      },
      {
        "sha": "30ab2d090d842e0ebb91980ab1f1443498ff2d3f",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=1b936f59264a4f4a867baece1e0ee4ec02f73cee",
        "patch": "@@ -30,7 +30,7 @@ static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n class HTTPRPCTimer : public RPCTimerBase\n {\n public:\n-    HTTPRPCTimer(struct event_base* eventBase, boost::function<void(void)>& func, int64_t millis) :\n+    HTTPRPCTimer(struct event_base* eventBase, std::function<void(void)>& func, int64_t millis) :\n         ev(eventBase, false, func)\n     {\n         struct timeval tv;\n@@ -52,7 +52,7 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n     {\n         return \"HTTP\";\n     }\n-    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis)\n+    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis)\n     {\n         return new HTTPRPCTimer(base, func, millis);\n     }"
      },
      {
        "sha": "fff2bd2d2d00a091ff673f7e9b50a3f774c07d10",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1b936f59264a4f4a867baece1e0ee4ec02f73cee",
        "patch": "@@ -59,7 +59,6 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/bind.hpp>\n-#include <boost/function.hpp>\n #include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>"
      },
      {
        "sha": "330eab10b03c35a07ca7b1fe7359173276220714",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=1b936f59264a4f4a867baece1e0ee4ec02f73cee",
        "patch": "@@ -98,7 +98,7 @@ class QtRPCTimerBase: public QObject, public RPCTimerBase\n {\n     Q_OBJECT\n public:\n-    QtRPCTimerBase(boost::function<void(void)>& _func, int64_t millis):\n+    QtRPCTimerBase(std::function<void(void)>& _func, int64_t millis):\n         func(_func)\n     {\n         timer.setSingleShot(true);\n@@ -110,15 +110,15 @@ private Q_SLOTS:\n     void timeout() { func(); }\n private:\n     QTimer timer;\n-    boost::function<void(void)> func;\n+    std::function<void(void)> func;\n };\n \n class QtRPCTimerInterface: public RPCTimerInterface\n {\n public:\n     ~QtRPCTimerInterface() {}\n     const char *Name() { return \"Qt\"; }\n-    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis)\n+    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis)\n     {\n         return new QtRPCTimerBase(func, millis);\n     }"
      },
      {
        "sha": "0bda331e97be2c98fde175a68b1e272c73c357f9",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=1b936f59264a4f4a867baece1e0ee4ec02f73cee",
        "patch": "@@ -42,17 +42,17 @@ static struct CRPCSignals\n     boost::signals2::signal<void (const CRPCCommand&)> PreCommand;\n } g_rpcSignals;\n \n-void RPCServer::OnStarted(boost::function<void ()> slot)\n+void RPCServer::OnStarted(std::function<void ()> slot)\n {\n     g_rpcSignals.Started.connect(slot);\n }\n \n-void RPCServer::OnStopped(boost::function<void ()> slot)\n+void RPCServer::OnStopped(std::function<void ()> slot)\n {\n     g_rpcSignals.Stopped.connect(slot);\n }\n \n-void RPCServer::OnPreCommand(boost::function<void (const CRPCCommand&)> slot)\n+void RPCServer::OnPreCommand(std::function<void (const CRPCCommand&)> slot)\n {\n     g_rpcSignals.PreCommand.connect(boost::bind(slot, _1));\n }\n@@ -526,7 +526,7 @@ void RPCUnsetTimerInterface(RPCTimerInterface *iface)\n         timerInterface = NULL;\n }\n \n-void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds)\n+void RPCRunLater(const std::string& name, std::function<void(void)> func, int64_t nSeconds)\n {\n     if (!timerInterface)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"No timer handler registered for RPC\");"
      },
      {
        "sha": "1e984cbc0de22ba6fd1128b2f6d81324c333e07c",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=1b936f59264a4f4a867baece1e0ee4ec02f73cee",
        "patch": "@@ -15,8 +15,6 @@\n #include <stdint.h>\n #include <string>\n \n-#include <boost/function.hpp>\n-\n #include <univalue.h>\n \n static const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;\n@@ -25,9 +23,9 @@ class CRPCCommand;\n \n namespace RPCServer\n {\n-    void OnStarted(boost::function<void ()> slot);\n-    void OnStopped(boost::function<void ()> slot);\n-    void OnPreCommand(boost::function<void (const CRPCCommand&)> slot);\n+    void OnStarted(std::function<void ()> slot);\n+    void OnStopped(std::function<void ()> slot);\n+    void OnPreCommand(std::function<void (const CRPCCommand&)> slot);\n }\n \n class CBlockIndex;\n@@ -115,7 +113,7 @@ class RPCTimerInterface\n      * This is needed to cope with the case in which there is no HTTP server, but\n      * only GUI RPC console, and to break the dependency of pcserver on httprpc.\n      */\n-    virtual RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis) = 0;\n+    virtual RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis) = 0;\n };\n \n /** Set the factory function for timers */\n@@ -129,7 +127,7 @@ void RPCUnsetTimerInterface(RPCTimerInterface *iface);\n  * Run func nSeconds from now.\n  * Overrides previous timer <name> (if any).\n  */\n-void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds);\n+void RPCRunLater(const std::string& name, std::function<void(void)> func, int64_t nSeconds);\n \n typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);\n "
      },
      {
        "sha": "27412a15b465b1a98cbc46613fc17b11c45b40cd",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=1b936f59264a4f4a867baece1e0ee4ec02f73cee",
        "patch": "@@ -7,8 +7,8 @@\n \n //\n // NOTE:\n-// boost::thread / boost::function / boost::chrono should be ported to\n-// std::thread / std::function / std::chrono when we support C++11.\n+// boost::thread / boost::chrono should be ported to std::thread / std::chrono\n+// when we support C++11.\n //\n #include <boost/chrono/chrono.hpp>\n #include <boost/thread.hpp>"
      },
      {
        "sha": "9e615142c6c4be58d882c2cc9919d950a703d5d1",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=1b936f59264a4f4a867baece1e0ee4ec02f73cee",
        "patch": "@@ -14,7 +14,6 @@\n #include <set>\n #include <stdlib.h>\n \n-#include <boost/function.hpp>\n #include <boost/bind.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/foreach.hpp>\n@@ -73,8 +72,8 @@ class TorControlReply\n class TorControlConnection\n {\n public:\n-    typedef boost::function<void(TorControlConnection&)> ConnectionCB;\n-    typedef boost::function<void(TorControlConnection &,const TorControlReply &)> ReplyHandlerCB;\n+    typedef std::function<void(TorControlConnection&)> ConnectionCB;\n+    typedef std::function<void(TorControlConnection &,const TorControlReply &)> ReplyHandlerCB;\n \n     /** Create a new TorControlConnection.\n      */\n@@ -105,9 +104,9 @@ class TorControlConnection\n     boost::signals2::signal<void(TorControlConnection &,const TorControlReply &)> async_handler;\n private:\n     /** Callback when ready for use */\n-    boost::function<void(TorControlConnection&)> connected;\n+    std::function<void(TorControlConnection&)> connected;\n     /** Callback when connection lost */\n-    boost::function<void(TorControlConnection&)> disconnected;\n+    std::function<void(TorControlConnection&)> disconnected;\n     /** Libevent event base */\n     struct event_base *base;\n     /** Connection to control socket */"
      },
      {
        "sha": "42dc31760b9adc8ae55e0c8947407f2580c8c744",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=1b936f59264a4f4a867baece1e0ee4ec02f73cee",
        "patch": "@@ -169,7 +169,7 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n     return true;\n }\n \n-bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n+bool CBlockTreeDB::LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n {\n     std::unique_ptr<CDBIterator> pcursor(NewIterator());\n "
      },
      {
        "sha": "117e7201fb69ed707d87964c991f257b6957b403",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b936f59264a4f4a867baece1e0ee4ec02f73cee/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=1b936f59264a4f4a867baece1e0ee4ec02f73cee",
        "patch": "@@ -15,8 +15,6 @@\n #include <utility>\n #include <vector>\n \n-#include <boost/function.hpp>\n-\n class CBlockIndex;\n class CCoinsViewDBCursor;\n class uint256;\n@@ -122,7 +120,7 @@ class CBlockTreeDB : public CDBWrapper\n     bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &list);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n-    bool LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n+    bool LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n #endif // BITCOIN_TXDB_H"
      }
    ]
  }
]