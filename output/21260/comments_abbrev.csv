shesek,2021-02-23 17:03:01,"tACK ea6dcf69d4e42d5dd4636079b31151e260c4b45a. I did tx replacement using `bumpfee` and observed that `inmempool` is returned correctly for both the old and new transactions, and ran the functional tests.\n\nThat's exactly what I wanted, thank you!",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-784353016,784353016,
shesek,2021-02-25 11:26:32,"> which you can already track with `walletconflicts`\n\nYou can't tell which of the transactions is currently in the mempool and which ones were replaced based on `walletconflicts`, it'll have the list of other txids in both cases.\n\n> I'm not sure there's a valid use case for this,\n\nCoin selection is one use case, you can use your latest change output but not the previous replaced ones.",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-785825793,785825793,
jonatack,2021-02-25 11:43:24,Would need to update the listtransactions and gettransaction RPC helps (and add a release note).,https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-785834884,785834884,
danben,2021-02-25 22:17:53,"> Would need to update the listtransactions and gettransaction RPC helps (and add a release note).\n\nI wasn't sure what to do about that since as far as I can tell none of the other stuff from `WalletTxToJSON` shows up in the help text",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-786265314,786265314,
DrahtBot,2021-02-26 05:54:19,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22798](https://github.com/bitcoin/bitcoin/pull/22798) (doc: Fix RPC result documentation by MarcoFalke)\n* [#22100](http",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-786429898,786429898,
danben,2021-03-01 21:46:20,"I can't reproduce this failure locally, just wondering if any reviewers have any insights",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-788320159,788320159,
danben,2021-03-08 02:42:23,"Fixed, all tests passing now",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-792420895,792420895,
MarcoFalke,2021-04-26 06:50:43,Needs to update the doc of `gettransaction`?,https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-826556407,826556407,
danben,2021-04-26 20:08:30,"@promag @MarcoFalke re: help text, as I mentioned above I wasn't sure how to think about this because this would be the only field originating in `WalletTxToJSON` that appears in the help text for either RPC. I'm happy to just add it and not think too hard about it but I'm curious to know the rationale here if there is one.",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-827111038,827111038,
promag,2021-04-26 20:23:11,The rationale is to update the help output of each affected method. I think you have to update `TransactionDescriptionString()`?,https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-827123073,827123073,
danben,2021-04-26 20:35:52,"> The rationale is to update the help output of each affected method. I think you have to update `TransactionDescriptionString()`?\n\n@promag Thanks for the quick response. My question wasn't about why help text should be added for this field, but why it isn't there for all of the other fields (that also come from `WalletTxToJSON`). That is the only reason I was hesitant to add it in the first p",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-827130069,827130069,
promag,2021-04-26 21:15:05,If some field is missing then it should be added.,https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-827151626,827151626,
danben,2021-04-26 21:19:30,"Apologies, I was looking in the wrong place. I see they're there. Sorry for the confusion.",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-827153828,827153828,
MarcoFalke,2021-04-27 08:26:09,unsigned cr ACK 46bf0b7b5d8c44bd7032c473f9878cfb59018161,https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-827419654,827419654,
darosior,2021-05-04 13:33:42,"Some more context for my Concept ACK that may help motivating this PR.\n\nAs an application ""on top"" of `bitcoind`'s wallet, one may want to track the state of an outgoing transaction. Using `gettransaction` one is able to know if the transaction was broadcasted, and whether it's confirmed (using the `blockheight` field). If it's not, one need another RPC call (`getmempoolentry`) to make sure th",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-831945342,831945342,
ryanofsky,2021-05-04 13:44:41,"That makes sense. If you want to do something like show the transaction in green if it's in the mempool and broadcasted and gray if it was never broadcast or is stuck for some reason, you could use this field for that.\n\nI guess was just questioning how #21018 seems to want to use this field, conflating whether a transaction is in the mempool with whether the transaction is abandoned or replace",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-831953420,831953420,
promag,2021-05-04 13:50:33,I've ACK just because it's a simple field already exposed in the RPC interface. Seems fine if it saves another request or bach of requests in case of listing transactions - as always clients must be aware that these flags can change right after the RPC response is built.,https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-831957759,831957759,
shesek,2021-06-26 23:21:04,"@ryanofsky My motivation was described in a comment on this PR: https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-785825793\n\n> Coin selection is one use case, you can use your latest change output but not the previous replaced ones.\n> \n> Another one is displaying the list of transactions to the user. It makes sense to hide the replaced ones, or at least make them visually distinct",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-869073058,869073058,
jonatack,2021-07-20 19:21:20,@danben Do you plan to continue working on this?,https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-883635345,883635345,
DrahtBot,2021-09-03 09:27:53,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/21260#issuecomment-912397660,912397660,
luke-jr,2021-02-24 03:28:25,"`""in_mempool""` seems like a better name.",https://github.com/bitcoin/bitcoin/pull/21260#discussion_r581591722,581591722,src/wallet/rpcwallet.cpp
luke-jr,2021-02-24 03:29:13,Probably should be omitted entirely if `confirms != 0`,https://github.com/bitcoin/bitcoin/pull/21260#discussion_r581592035,581592035,src/wallet/rpcwallet.cpp
shesek,2021-02-25 11:30:23,I think so too.,https://github.com/bitcoin/bitcoin/pull/21260#discussion_r582758567,582758567,src/wallet/rpcwallet.cpp
jonatack,2021-02-25 11:34:32,:+1: for `in_mempool` ( we use snakecased field names now in the JSON RPC output),https://github.com/bitcoin/bitcoin/pull/21260#discussion_r582760784,582760784,src/wallet/rpcwallet.cpp
jonatack,2021-02-25 11:35:21,ISTM we use snakecased names now for new functional test files,https://github.com/bitcoin/bitcoin/pull/21260#discussion_r582761287,582761287,test/functional/test_runner.py
jonatack,2021-02-25 11:37:09,Why not add this test in the existing `test/functional/wallet_listtransactions.py` / `ListTransactionsTest` instead of creating a new file.,https://github.com/bitcoin/bitcoin/pull/21260#discussion_r582762346,582762346,test/functional/wallet_showconflictedinactivetransactions.py
jonatack,2021-02-25 11:51:24,Maybe add tests for `gettransaction()` as well.,https://github.com/bitcoin/bitcoin/pull/21260#discussion_r582771061,582771061,test/functional/wallet_showconflictedinactivetransactions.py
danben,2021-02-25 18:44:09,Do you have an opinion on where they should go?,https://github.com/bitcoin/bitcoin/pull/21260#discussion_r583078022,583078022,test/functional/wallet_showconflictedinactivetransactions.py
luke-jr,2021-02-26 00:11:13,Needs braces or on a single line,https://github.com/bitcoin/bitcoin/pull/21260#discussion_r583293757,583293757,src/wallet/rpcwallet.cpp
danben,2021-02-26 00:18:11,"Ah right, I was just trying to make it match the surrounding code but I see from the style guide that you're correct. Will fix",https://github.com/bitcoin/bitcoin/pull/21260#discussion_r583296263,583296263,src/wallet/rpcwallet.cpp
danben,2021-02-26 14:49:06,"Never mind, looks like there's precedence now for `wallet_listtransactions.py`",https://github.com/bitcoin/bitcoin/pull/21260#discussion_r583691268,583691268,test/functional/wallet_showconflictedinactivetransactions.py
promag,2021-04-22 08:35:27,"nit, could move after L163.",https://github.com/bitcoin/bitcoin/pull/21260#discussion_r618196915,618196915,src/wallet/rpcwallet.cpp
jonatack,2021-06-29 09:51:50,"Suggest saying what the field represents.\n```suggestion\n           {RPCResult::Type::BOOL, ""in_mempool"", ""Whether the transaction is in the mempool. Only present if the transaction is unconfirmed.""},\n```\n",https://github.com/bitcoin/bitcoin/pull/21260#discussion_r660460374,660460374,src/wallet/rpcwallet.cpp
jonatack,2021-06-29 09:56:28,"The `feeRate` option in BTC/kvB is expected to be deprecated; use the `fee_rate` option in sat/vB\n```suggestion\n                                                      {""replaceable"": True, ""fee_rate"": fee_rate})['psbt']\n```",https://github.com/bitcoin/bitcoin/pull/21260#discussion_r660463851,660463851,test/functional/wallet_listtransactions.py
jonatack,2021-06-29 09:56:52,"naming style nit\n```suggestion\n    def create_and_send_transaction(self, utxo, address, amount, fee_rate):\n```",https://github.com/bitcoin/bitcoin/pull/21260#discussion_r660464119,660464119,test/functional/wallet_listtransactions.py
jonatack,2021-06-29 09:57:55,"When calling RPCs with lots of arguments, consider using named keyword arguments instead of positional arguments to make the intent of the call clear to readers (see test/functional/README.md).\n```suggestion\n        tx1_id = self.create_and_send_transaction(utxo, address, amount=0.1, fee_rate=100)\n```",https://github.com/bitcoin/bitcoin/pull/21260#discussion_r660464879,660464879,test/functional/wallet_listtransactions.py
jonatack,2021-06-29 09:59:49,These two tests have nearly identical setup and could be combined into one.,https://github.com/bitcoin/bitcoin/pull/21260#discussion_r660466285,660466285,test/functional/wallet_listtransactions.py
jonatack,2021-06-29 10:01:24,"It would be good to also test for the absence of the `in_mempool` field when the transaction has more than zero confirmations, e.g. somethnig like\n\n```python\n+        node.generate(1)\n+        self.sync_all()\n+        tx2 = node.gettransaction(tx2_id)\n+        assert_equal(tx2[""confirmations""], 1)\n+        assert ""in_mempool"" not in tx2  # only present if txn is unconfirmed\n```\n",https://github.com/bitcoin/bitcoin/pull/21260#discussion_r660467514,660467514,test/functional/wallet_listtransactions.py
jonatack,2021-06-29 10:02:30,"It might be clearer to use named arguments here, e.g.:\n```python\n+        psbtx = self.nodes[0].walletcreatefundedpsbt(\n+            inputs=[{""txid"": utxo[""txid""], ""vout"": utxo[""vout""]}],\n+            outputs={address: amount},\n+            locktime=0,\n+            options={""replaceable"": True, ""fee_rate"": fee_rate},\n+        )[""psbt""]\n```\n",https://github.com/bitcoin/bitcoin/pull/21260#discussion_r660468387,660468387,test/functional/wallet_listtransactions.py
