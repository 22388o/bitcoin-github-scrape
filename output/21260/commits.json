[
  {
    "sha": "46bf0b7b5d8c44bd7032c473f9878cfb59018161",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmJmMGI3YjVkOGM0NGJkNzAzMmM0NzNmOTg3OGNmYjU5MDE4MTYx",
    "commit": {
      "author": {
        "name": "Dan Benjamin",
        "email": "danben@gmail.com",
        "date": "2021-02-21T23:01:31Z"
      },
      "committer": {
        "name": "Dan Benjamin",
        "email": "danben@gmail.com",
        "date": "2021-04-26T21:22:55Z"
      },
      "message": "Added a field to the output of gettransaction/listtransactions to indicate whether the given transaction is in the mempool.",
      "tree": {
        "sha": "0357f4c65686c3f7c1b700bb7d5ef98695e127bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0357f4c65686c3f7c1b700bb7d5ef98695e127bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46bf0b7b5d8c44bd7032c473f9878cfb59018161",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46bf0b7b5d8c44bd7032c473f9878cfb59018161",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46bf0b7b5d8c44bd7032c473f9878cfb59018161",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46bf0b7b5d8c44bd7032c473f9878cfb59018161/comments",
    "author": {
      "login": "danben",
      "id": 253639,
      "node_id": "MDQ6VXNlcjI1MzYzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/253639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danben",
      "html_url": "https://github.com/danben",
      "followers_url": "https://api.github.com/users/danben/followers",
      "following_url": "https://api.github.com/users/danben/following{/other_user}",
      "gists_url": "https://api.github.com/users/danben/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danben/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danben/subscriptions",
      "organizations_url": "https://api.github.com/users/danben/orgs",
      "repos_url": "https://api.github.com/users/danben/repos",
      "events_url": "https://api.github.com/users/danben/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danben/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "danben",
      "id": 253639,
      "node_id": "MDQ6VXNlcjI1MzYzOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/253639?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danben",
      "html_url": "https://github.com/danben",
      "followers_url": "https://api.github.com/users/danben/followers",
      "following_url": "https://api.github.com/users/danben/following{/other_user}",
      "gists_url": "https://api.github.com/users/danben/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danben/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danben/subscriptions",
      "organizations_url": "https://api.github.com/users/danben/orgs",
      "repos_url": "https://api.github.com/users/danben/repos",
      "events_url": "https://api.github.com/users/danben/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danben/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "683dda2a70e7a210996fa34be23bd0c563971ba9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/683dda2a70e7a210996fa34be23bd0c563971ba9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/683dda2a70e7a210996fa34be23bd0c563971ba9"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 57,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e82fa71298ca63f462dbdb4bf05e29034e70c430",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46bf0b7b5d8c44bd7032c473f9878cfb59018161/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46bf0b7b5d8c44bd7032c473f9878cfb59018161/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=46bf0b7b5d8c44bd7032c473f9878cfb59018161",
        "patch": "@@ -161,6 +161,7 @@ static void WalletTxToJSON(interfaces::Chain& chain, const CWalletTx& wtx, UniVa\n         entry.pushKV(\"blocktime\", block_time);\n     } else {\n         entry.pushKV(\"trusted\", wtx.IsTrusted());\n+        entry.pushKV(\"in_mempool\", wtx.fInMempool);\n     }\n     uint256 hash = wtx.GetHash();\n     entry.pushKV(\"txid\", hash.GetHex());\n@@ -181,7 +182,6 @@ static void WalletTxToJSON(interfaces::Chain& chain, const CWalletTx& wtx, UniVa\n             rbfStatus = \"yes\";\n     }\n     entry.pushKV(\"bip125-replaceable\", rbfStatus);\n-\n     for (const std::pair<const std::string, std::string>& item : wtx.mapValue)\n         entry.pushKV(item.first, item.second);\n }\n@@ -1372,6 +1372,7 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n                \"transaction conflicted that many blocks ago.\"},\n            {RPCResult::Type::BOOL, \"generated\", \"Only present if transaction only input is a coinbase one.\"},\n            {RPCResult::Type::BOOL, \"trusted\", \"Only present if we consider transaction to be trusted and so safe to spend from.\"},\n+           {RPCResult::Type::BOOL, \"in_mempool\", \"Only present on unconfirmed transactions.\"},\n            {RPCResult::Type::STR_HEX, \"blockhash\", \"The block hash containing the transaction.\"},\n            {RPCResult::Type::NUM, \"blockheight\", \"The block height containing the transaction.\"},\n            {RPCResult::Type::NUM, \"blockindex\", \"The index of the transaction in the block that includes it.\"},"
      },
      {
        "sha": "fcafe9b85b15a07e3fa19470d0591a8f73cb7d0b",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46bf0b7b5d8c44bd7032c473f9878cfb59018161/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46bf0b7b5d8c44bd7032c473f9878cfb59018161/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=46bf0b7b5d8c44bd7032c473f9878cfb59018161",
        "patch": "@@ -622,7 +622,7 @@ def run_test(self):\n                                  \"category\": baz[\"category\"],\n                                  \"vout\":     baz[\"vout\"]}\n         expected_fields = frozenset({'amount', 'bip125-replaceable', 'confirmations', 'details', 'fee',\n-                                     'hex', 'time', 'timereceived', 'trusted', 'txid', 'walletconflicts'})\n+                                     'hex', 'in_mempool', 'time', 'timereceived', 'trusted', 'txid', 'walletconflicts'})\n         verbose_field = \"decoded\"\n         expected_verbose_fields = expected_fields | {verbose_field}\n "
      },
      {
        "sha": "17cf6f90bf4bd1cd7d09e634346f1c509ef1ba44",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46bf0b7b5d8c44bd7032c473f9878cfb59018161/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46bf0b7b5d8c44bd7032c473f9878cfb59018161/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=46bf0b7b5d8c44bd7032c473f9878cfb59018161",
        "patch": "@@ -107,6 +107,8 @@ def run_test(self):\n                                 {\"txid\": txid, \"label\": \"watchonly\"})\n \n         self.run_rbf_opt_in_test()\n+        self.test_listtransactions_display_in_mempool()\n+        self.test_gettransaction_display_in_mempool()\n \n     # Check that the opt-in-rbf flag works properly, for sent and received\n     # transactions.\n@@ -210,5 +212,57 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         assert_equal(self.nodes[0].gettransaction(txid_3b)[\"bip125-replaceable\"], \"no\")\n         assert_equal(self.nodes[0].gettransaction(txid_4)[\"bip125-replaceable\"], \"unknown\")\n \n+    def create_and_send_transaction(self, utxo, address, amt, feeRate):\n+        psbtx = self.nodes[0].walletcreatefundedpsbt([{\"txid\": utxo['txid'], \"vout\": utxo['vout']}],\n+                                                      {address: amt},\n+                                                      0,\n+                                                      {\"replaceable\":True, \"feeRate\":feeRate})['psbt']\n+        signed_tx = self.nodes[0].walletprocesspsbt(psbtx)['psbt']\n+        final_tx = self.nodes[0].finalizepsbt(signed_tx)['hex']\n+        return self.nodes[0].sendrawtransaction(final_tx)\n+\n+    def test_listtransactions_display_in_mempool(self):\n+        self.log.info('Testing that listtransactions correctly displays whether a transaction is in the mempool')\n+        utxo = self.nodes[0].listunspent()[0]\n+        address = self.nodes[0].getnewaddress()\n+\n+        tx1_id = self.create_and_send_transaction(utxo, address, 0.1, 0.001)\n+\n+        new_txs = self.nodes[0].listtransactions(count=2)\n+        for tx in new_txs:\n+            assert_equal(tx['txid'], tx1_id)\n+            assert_equal(tx['in_mempool'], True)\n+\n+        tx2_id = self.create_and_send_transaction(utxo, address, 0.1, 0.002)\n+\n+        new_txs = self.nodes[0].listtransactions(count=4)\n+        for i in range(2):\n+            assert_equal(new_txs[i]['txid'], tx1_id)\n+            assert_equal(new_txs[i]['in_mempool'], False)\n+\n+        for i in range(2, 4):\n+            assert_equal(new_txs[i]['txid'], tx2_id)\n+            assert_equal(new_txs[i]['in_mempool'], True)\n+\n+    def test_gettransaction_display_in_mempool(self):\n+        self.log.info('Testing that gettransaction correctly displays whether a transaction is in the mempool')\n+        utxo = self.nodes[0].listunspent()[0]\n+        address = self.nodes[0].getnewaddress()\n+\n+        tx1_id = self.create_and_send_transaction(utxo, address, 0.1, 0.001)\n+\n+        tx1 = self.nodes[0].gettransaction(tx1_id)\n+        assert_equal(tx1['txid'], tx1_id)\n+        assert_equal(tx1['in_mempool'], True)\n+\n+        tx2_id = self.create_and_send_transaction(utxo, address, 0.1, 0.002)\n+        tx1 = self.nodes[0].gettransaction(tx1_id)\n+        tx2 = self.nodes[0].gettransaction(tx2_id)\n+        assert_equal(tx1['txid'], tx1_id)\n+        assert_equal(tx1['in_mempool'], False)\n+        assert_equal(tx2['txid'], tx2_id)\n+        assert_equal(tx2['in_mempool'], True)\n+\n+\n if __name__ == '__main__':\n     ListTransactionsTest().main()"
      }
    ]
  }
]