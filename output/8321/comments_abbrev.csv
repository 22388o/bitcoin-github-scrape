MarcoFalke,2016-07-10T09:48:12Z,"> Broke conditional chains into separate lines with leading conditionals\n\nOur code style is to use the exact opposite... I appreciate your desire to clean up the code base, but I think it touches a lot of lines and thus invalidates any patches of other pulls or patches that developers have in their local tree. Also, I think the cost of review and repository churn is not worth the benefits of thi",https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-231580253,231580253,
laanwj,2016-07-11T10:04:51Z,"Agree with @MarcoFalke. Thanks for trying to help, but in general these kinds of pulls which just massage around spaces and newlines aren't well-received. They break other people's patches for no good reason: the difficulty in reading bitcoin core code is not in how the whitespace is organized.\n",https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-231693367,231693367,
tjps,2016-07-12T19:36:13Z,"Apologies for missing the section of the codestyle guidelines where it specified trailing conditionals and/or preference for longer lines, I still can't find that part.\n\nSo the hardcoded constant to sizeof() conversions are also not seen as worthwhile?  It seems that memcpy() with a hardcoded size is asking for trouble down the line.\n",https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-232155184,232155184,
MarcoFalke,2016-07-12T20:03:42Z,"> I still can't find that part.\n\nIt is not possible to list all code style preferences. You can use the clang-format-diff.py in the contrib folder if you contribute new code and want to be ""on the safe side"". Other than that, the code style is usually just defined by the way the local code is written.\n",https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-232162623,232162623,
MarcoFalke,2016-07-16T14:07:11Z,> So the hardcoded constant to sizeof() conversions are also not seen as worthwhile? It seems that memcpy() with a hardcoded size is asking for trouble down the line.\n\nI think it is not required to use sizeof() when anything other than the hardcoded value would not make sense.\n,https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-233131984,233131984,
tjps,2016-07-17T02:55:18Z,"I understand that people are particular about code formatting, and I can even understand the trepidation about branches interfering with each other, despite diff resolution/merging being one of git's strengths.\n\nBut never in any project I've contributed to before have I seen someone claim that \n\n> memcpy(A, B, <constant>)\n\nis better, preferred, or even equivalent to\n\n> memcpy(A, B, sizeof(",https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-233162279,233162279,
MarcoFalke,2016-07-17T08:22:01Z,@tjps Generally you are correct but in this case it is _always_ 32 bytes just by definition. Going to hide this information behind `sizeof()` would make this less clear.\n\n@tjps Don't get me wrong here. Your desire to help is really appreciated but we must keep code-style-only pulls to a minimum as there was nasty bugs introduced in the past by accident.\n\nIf you want to get a feel for the proce,https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-233171030,233171030,
sipa,2016-07-17T10:54:25Z,"About the 32 -> sizeof(vch) change... I agree that sizeof(vch) is cleaner, but if a change would be made that changes vch's size, things would break in more subtle ways (because the serialization of keys would differ).\n\nOne possibility is doing the 32 -> sizeof(vch), but also adding an asset/static_assert that sizeof(vch) == 32, with a comment explaining that this can't just be changed. That way",https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-233176255,233176255,
tjps,2016-07-18T05:16:58Z,"OK, how about this as a compromise: I backed out all of the other changes except for the sizeof(), and breaking the conditional chains to one-per-line, which I still assert is a readability win. \n\nI also added a static_assert, which I think is a step better beyond switching to sizeof() - thanks @sipa.\n\nDoes this seem reasonable?\n",https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-233230026,233230026,
jtimon,2016-07-18T15:49:04Z,It sounds reasonable to me. Concept ack on the sizeof changes only.\n,https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-233370037,233370037,
MarcoFalke,2016-07-18T16:02:48Z,@tjps Can you try to squash the commits\n\n``` shell\ngit reset c96c1a9~\ngit commit --verbose -a\n```\n,https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-233374256,233374256,
tjps,2016-07-19T02:44:31Z,"@MarcoFalke of course, my mistake. Was late at night.\n",https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-233515807,233515807,
tjps,2016-07-25T19:54:59Z,"Hi all, checking in at the one week mark.  Is there anything else I can do to get this merged?  Hoping to move on to the easy-to-implement list next.\n",https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-235065143,235065143,
sipa,2016-07-25T19:58:57Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-235066232,235066232,
laanwj,2016-07-28T11:37:29Z,The changes here are much easier to review with `git diff --word-diff` than the github output.\nutACK fbc6070\n,https://github.com/bitcoin/bitcoin/pull/8321#issuecomment-235870841,235870841,
laanwj,2016-07-28T11:40:21Z,"Note: This only works because `vchFingerprint` is not, as the variable name implies, a vector of char, but instead an array char[4].\n",https://github.com/bitcoin/bitcoin/pull/8321#discussion_r72606672,72606672,src/pubkey.h
