[
  {
    "sha": "fbc60703a53c1544054fe6ba0753d23d0508f4e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmM2MDcwM2E1M2MxNTQ0MDU0ZmU2YmEwNzUzZDIzZDA1MDhmNGU5",
    "commit": {
      "author": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2016-07-19T02:39:46Z"
      },
      "committer": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2016-07-19T02:42:09Z"
      },
      "message": "[trivial] Switched constants to sizeof()",
      "tree": {
        "sha": "68fe783ea1aa9b98f781b5f09adac00db22bf0c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68fe783ea1aa9b98f781b5f09adac00db22bf0c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbc60703a53c1544054fe6ba0753d23d0508f4e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc60703a53c1544054fe6ba0753d23d0508f4e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbc60703a53c1544054fe6ba0753d23d0508f4e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc60703a53c1544054fe6ba0753d23d0508f4e9/comments",
    "author": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3557b8e36308a27dbeb528569abe638c4d01dd"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 23,
      "deletions": 16
    },
    "files": [
      {
        "sha": "0f58e24a49aeb3297decd693304ddc1eccd3c237",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc60703a53c1544054fe6ba0753d23d0508f4e9/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc60703a53c1544054fe6ba0753d23d0508f4e9/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=fbc60703a53c1544054fe6ba0753d23d0508f4e9",
        "patch": "@@ -15,7 +15,7 @@\n #include <vector>\n \n \n-/** \n+/**\n  * secp256k1:\n  * const unsigned int PRIVATE_KEY_SIZE = 279;\n  * const unsigned int PUBLIC_KEY_SIZE  = 65;\n@@ -45,6 +45,8 @@ class CKey\n     //! The actual byte data\n     unsigned char vch[32];\n \n+    static_assert(sizeof(vch) == 32, \"vch must be 32 bytes in length to not break serialization\");\n+\n     //! Check whether the 32-byte array pointed to be vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n \n@@ -70,20 +72,19 @@ class CKey\n \n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n-        return a.fCompressed == b.fCompressed && a.size() == b.size() &&\n-               memcmp(&a.vch[0], &b.vch[0], a.size()) == 0;\n+        return a.fCompressed == b.fCompressed &&\n+            a.size() == b.size() &&\n+            memcmp(&a.vch[0], &b.vch[0], a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (pend - pbegin != 32) {\n+        if (pend - pbegin != sizeof(vch)) {\n             fValid = false;\n-            return;\n-        }\n-        if (Check(&pbegin[0])) {\n-            memcpy(vch, (unsigned char*)&pbegin[0], 32);\n+        } else if (Check(&pbegin[0])) {\n+            memcpy(vch, (unsigned char*)&pbegin[0], sizeof(vch));\n             fValid = true;\n             fCompressed = fCompressedIn;\n         } else {\n@@ -92,7 +93,7 @@ class CKey\n     }\n \n     //! Simple read-only vector-like interface.\n-    unsigned int size() const { return (fValid ? 32 : 0); }\n+    unsigned int size() const { return (fValid ? sizeof(vch) : 0); }\n     const unsigned char* begin() const { return vch; }\n     const unsigned char* end() const { return vch + size(); }\n \n@@ -110,7 +111,7 @@ class CKey\n \n     /**\n      * Convert the private key to a CPrivKey (serialized OpenSSL private key data).\n-     * This is expensive. \n+     * This is expensive.\n      */\n     CPrivKey GetPrivKey() const;\n \n@@ -160,8 +161,11 @@ struct CExtKey {\n \n     friend bool operator==(const CExtKey& a, const CExtKey& b)\n     {\n-        return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               a.chaincode == b.chaincode && a.key == b.key;\n+        return a.nDepth == b.nDepth &&\n+            memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], sizeof(vchFingerprint)) == 0 &&\n+            a.nChild == b.nChild &&\n+            a.chaincode == b.chaincode &&\n+            a.key == b.key;\n     }\n \n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;"
      },
      {
        "sha": "aebfdbc82662880a21cb4ea95b874dd34dace94c",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc60703a53c1544054fe6ba0753d23d0508f4e9/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc60703a53c1544054fe6ba0753d23d0508f4e9/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=fbc60703a53c1544054fe6ba0753d23d0508f4e9",
        "patch": "@@ -13,7 +13,7 @@\n #include <stdexcept>\n #include <vector>\n \n-/** \n+/**\n  * secp256k1:\n  * const unsigned int PRIVATE_KEY_SIZE = 279;\n  * const unsigned int PUBLIC_KEY_SIZE  = 65;\n@@ -156,7 +156,7 @@ class CPubKey\n \n     /*\n      * Check syntactic correctness.\n-     * \n+     *\n      * Note that this is consensus critical as CheckSig() calls it!\n      */\n     bool IsValid() const\n@@ -203,8 +203,11 @@ struct CExtPubKey {\n \n     friend bool operator==(const CExtPubKey &a, const CExtPubKey &b)\n     {\n-        return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               a.chaincode == b.chaincode && a.pubkey == b.pubkey;\n+        return a.nDepth == b.nDepth &&\n+            memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], sizeof(vchFingerprint)) == 0 &&\n+            a.nChild == b.nChild &&\n+            a.chaincode == b.chaincode &&\n+            a.pubkey == b.pubkey;\n     }\n \n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;"
      }
    ]
  }
]