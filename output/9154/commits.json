[
  {
    "sha": "3b070bef5c234657b379ded0131f422e47a2a978",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjA3MGJlZjVjMjM0NjU3YjM3OWRlZDAxMzFmNDIyZTQ3YTJhOTc4",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-08T05:01:28Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-08T05:54:13Z"
      },
      "message": "Add getnulldatas rpc command",
      "tree": {
        "sha": "adb87f32874eb8194e95a23d6d034016c22ad6b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adb87f32874eb8194e95a23d6d034016c22ad6b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b070bef5c234657b379ded0131f422e47a2a978",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b070bef5c234657b379ded0131f422e47a2a978",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b070bef5c234657b379ded0131f422e47a2a978",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b070bef5c234657b379ded0131f422e47a2a978/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc6b9406bdfab2af8c86cb080cb3e6cf8f2385d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc6b9406bdfab2af8c86cb080cb3e6cf8f2385d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc6b9406bdfab2af8c86cb080cb3e6cf8f2385d8"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8b4dad2ab9232cf121205a627e644e767abb45d0",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b070bef5c234657b379ded0131f422e47a2a978/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b070bef5c234657b379ded0131f422e47a2a978/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=3b070bef5c234657b379ded0131f422e47a2a978",
        "patch": "@@ -197,6 +197,11 @@ class CTxOut\n         return (nValue < GetDustThreshold(minRelayTxFee));\n     }\n \n+    bool IsNulldata() const\n+    {\n+        return scriptPubKey.IsNulldata();\n+    }\n+\n     friend bool operator==(const CTxOut& a, const CTxOut& b)\n     {\n         return (a.nValue       == b.nValue &&\n@@ -426,6 +431,16 @@ class CTransaction\n         return (vin.size() == 1 && vin[0].prevout.IsNull());\n     }\n \n+    bool HasNulldata() const\n+    {\n+        for (uint i = 0; i < vout.size(); i++)\n+        {\n+            if (vout[i].IsNulldata())\n+                return true;\n+        }\n+        return false;\n+    }\n+\n     friend bool operator==(const CTransaction& a, const CTransaction& b)\n     {\n         return a.hash == b.hash;"
      },
      {
        "sha": "edeb74631699823a642b22215c0dec12509ae10c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b070bef5c234657b379ded0131f422e47a2a978/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b070bef5c234657b379ded0131f422e47a2a978/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3b070bef5c234657b379ded0131f422e47a2a978",
        "patch": "@@ -760,6 +760,66 @@ UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, pblockindex);\n }\n \n+UniValue getnulldatas(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+        throw runtime_error(\n+            \"getnulldatas \\\"hash\\\"\\n\"\n+            \"\\nReturns an Object with all nulldatas for the given block.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"txid\\\" : \\\"hash\\\",   (string) the transaction hash\\n\"\n+            \"    \\\"nulldatas\\\" : [      (array of strings) Hex encoded nulldatas\\n\"\n+            \"      \\\"00000000\\\",        (string) the hex encoded nulldata\\n\"\n+            \"      ...,\\n\"\n+            \"    ]\\n\"\n+            \"  }\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getnulldatas\", \"\\\"0000000000000000038ac7709c75b5a2416a88338e75e6026328cfc7cca64c37\\\"\")\n+            + HelpExampleRpc(\"getnulldatas\", \"\\\"0000000000000000038ac7709c75b5a2416a88338e75e6026328cfc7cca64c37\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    std::string strHash = request.params[0].get_str();\n+    uint256 hash(uint256S(strHash));\n+\n+    if (mapBlockIndex.count(hash) == 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+\n+    CBlock block;\n+    CBlockIndex* pblockindex = mapBlockIndex[hash];\n+\n+    if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");\n+\n+    if(!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+\n+    UniValue result(UniValue::VARR);\n+    BOOST_FOREACH(const CTransaction&tx, block.vtx)\n+    {\n+        if(tx.HasNulldata())\n+        {\n+            UniValue obj(UniValue::VOBJ);\n+            UniValue nds(UniValue::VARR);\n+            BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+            {\n+                if (txout.IsNulldata())\n+                    nds.push_back(HexStr(txout.scriptPubKey.begin(), txout.scriptPubKey.end()));\n+            }\n+            obj.push_back(Pair(tx.GetHash().GetHex(), nds));\n+            result.push_back(obj);\n+        }\n+    }\n+\n+    return result;\n+}\n+\n struct CCoinsStats\n {\n     int nHeight;\n@@ -1388,6 +1448,8 @@ static const CRPCCommand commands[] =\n \n     { \"blockchain\",         \"preciousblock\",          &preciousblock,          true  },\n \n+    { \"blockchain\",         \"getnulldatas\",           &getnulldatas,           true  },\n+\n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },\n     { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true  },"
      },
      {
        "sha": "28c7a6d3056e3372880fd386addd64008d6d8122",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b070bef5c234657b379ded0131f422e47a2a978/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b070bef5c234657b379ded0131f422e47a2a978/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=3b070bef5c234657b379ded0131f422e47a2a978",
        "patch": "@@ -638,6 +638,11 @@ class CScript : public CScriptBase\n         return (size() > 0 && *begin() == OP_RETURN) || (size() > MAX_SCRIPT_SIZE);\n     }\n \n+    bool IsNulldata() const\n+    {\n+        return (size() > 0 && *begin() == OP_RETURN);\n+    }\n+\n     void clear()\n     {\n         // The default std::vector::clear() does not release memory."
      }
    ]
  },
  {
    "sha": "c22591de7354ba61626c732b86947f9e5de5ed72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjI1OTFkZTczNTRiYTYxNjI2YzczMmI4Njk0N2Y5ZTVkZTVlZDcy",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-09T00:00:20Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-09T00:00:20Z"
      },
      "message": "Change output format to be a bit nicer",
      "tree": {
        "sha": "dc88b1d3bb5ed8e12ce416f4d9847e94cdd10e54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc88b1d3bb5ed8e12ce416f4d9847e94cdd10e54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c22591de7354ba61626c732b86947f9e5de5ed72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c22591de7354ba61626c732b86947f9e5de5ed72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c22591de7354ba61626c732b86947f9e5de5ed72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c22591de7354ba61626c732b86947f9e5de5ed72/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b070bef5c234657b379ded0131f422e47a2a978",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b070bef5c234657b379ded0131f422e47a2a978",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b070bef5c234657b379ded0131f422e47a2a978"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "893e0dfd7db6ce728b8a60b9b1c1baaa55a56c4e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c22591de7354ba61626c732b86947f9e5de5ed72/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c22591de7354ba61626c732b86947f9e5de5ed72/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c22591de7354ba61626c732b86947f9e5de5ed72",
        "patch": "@@ -812,7 +812,8 @@ UniValue getnulldatas(const JSONRPCRequest& request)\n                 if (txout.IsNulldata())\n                     nds.push_back(HexStr(txout.scriptPubKey.begin(), txout.scriptPubKey.end()));\n             }\n-            obj.push_back(Pair(tx.GetHash().GetHex(), nds));\n+            obj.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n+            obj.push_back(Pair(\"nulldatas\", nds));\n             result.push_back(obj);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "61d4b32956de0b9b02eb58795a84e13017a3e347",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWQ0YjMyOTU2ZGUwYjliMDJlYjU4Nzk1YTg0ZTEzMDE3YTNlMzQ3",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-09T00:56:15Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-09T00:56:15Z"
      },
      "message": "Add getmanynulldatas",
      "tree": {
        "sha": "3ffdea4c6e877b4473504a2bca73d7f7f2c33dff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ffdea4c6e877b4473504a2bca73d7f7f2c33dff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61d4b32956de0b9b02eb58795a84e13017a3e347",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61d4b32956de0b9b02eb58795a84e13017a3e347",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61d4b32956de0b9b02eb58795a84e13017a3e347",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61d4b32956de0b9b02eb58795a84e13017a3e347/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c22591de7354ba61626c732b86947f9e5de5ed72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c22591de7354ba61626c732b86947f9e5de5ed72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c22591de7354ba61626c732b86947f9e5de5ed72"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 83,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3a4349f9b02b3773b02b6b743fca593f27478625",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61d4b32956de0b9b02eb58795a84e13017a3e347/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61d4b32956de0b9b02eb58795a84e13017a3e347/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=61d4b32956de0b9b02eb58795a84e13017a3e347",
        "patch": "@@ -433,7 +433,7 @@ class CTransaction\n \n     bool HasNulldata() const\n     {\n-        for (uint i = 0; i < vout.size(); i++)\n+        for (unsigned int i = 0; i < vout.size(); i++)\n         {\n             if (vout[i].IsNulldata())\n                 return true;"
      },
      {
        "sha": "0ff542834267c1be4ba01a10351dfea0e2d7430f",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 1,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61d4b32956de0b9b02eb58795a84e13017a3e347/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61d4b32956de0b9b02eb58795a84e13017a3e347/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=61d4b32956de0b9b02eb58795a84e13017a3e347",
        "patch": "@@ -801,7 +801,7 @@ UniValue getnulldatas(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n \n     UniValue result(UniValue::VARR);\n-    BOOST_FOREACH(const CTransaction&tx, block.vtx)\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n         if(tx.HasNulldata())\n         {\n@@ -821,6 +821,86 @@ UniValue getnulldatas(const JSONRPCRequest& request)\n     return result;\n }\n \n+\n+UniValue getmanynulldatas(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"getnulldatas fromHeight toHeight\\n\"\n+            \"\\nReturns an Object with all nulldatas in the given block range.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. fromHeight          (integer, required) The starting block height\\n\"\n+            \"2. toHeight            (integer, required) The final block height (inclusive)\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"hash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n+            \"    \\\"time\\\" : 1478482199, (integer) timestamp in the block\\n\"\n+            \"    \\\"height\\\" : 0000, (integer) height of the block\\n\"\n+            \"    \\\"txid\\\" : \\\"hash\\\",   (string) the transaction hash\\n\"\n+            \"    \\\"nulldatas\\\" : [      (array of strings) Hex encoded nulldatas\\n\"\n+            \"      \\\"00000000\\\",        (string) the hex encoded nulldata\\n\"\n+            \"      ...,\\n\"\n+            \"    ]\\n\"\n+            \"  }\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getmanynulldatas\", \"200000, 250000\")\n+            + HelpExampleRpc(\"getmanynulldatas\", \"200000, 250000\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int fromHeight = request.params[0].get_int();\n+    int toHeight = request.params[1].get_int();\n+\n+\n+    if (fromHeight < 0 || toHeight > chainActive.Height() || fromHeight >= toHeight)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range or invalid range\");\n+\n+    UniValue result(UniValue::VARR);\n+    for (int nHeight = fromHeight; nHeight <= toHeight; nHeight++)\n+    {\n+        CBlock block;\n+        CBlockIndex* pblockindex = chainActive[nHeight];\n+        uint256 blockhash = pblockindex->GetBlockHash();\n+\n+        if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");\n+\n+        if(!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+\n+        UniValue blockJSON(UniValue::VOBJ);\n+        blockJSON.push_back(\"hash\", pblockindex->GetBlockHash().GetHex());\n+        blockJSON.push_back(\"height\", block.nHeight);\n+        blockJSON.push_back(\"time\", block.GetBlockTime());\n+\n+        UniValue allnds(UniValue::VARR);\n+        BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        {\n+            if(tx.HasNulldata())\n+            {\n+                UniValue obj(UniValue::VOBJ);\n+                UniValue nds(UniValue::VARR);\n+                BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+                {\n+                    if (txout.IsNulldata())\n+                        nds.push_back(HexStr(txout.scriptPubKey.begin(), txout.scriptPubKey.end()));\n+                }\n+                obj.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n+                obj.push_back(Pair(\"nulldatas\", nds));\n+                allnds.push_back(obj);\n+            }\n+        }\n+\n+        blockJSON.push_back(\"nulldatatxs\", allnds);\n+        result.push_back(blockJSON);\n+    }\n+\n+    return result;\n+}\n+\n struct CCoinsStats\n {\n     int nHeight;\n@@ -1450,6 +1530,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"preciousblock\",          &preciousblock,          true  },\n \n     { \"blockchain\",         \"getnulldatas\",           &getnulldatas,           true  },\n+    { \"blockchain\",         \"getmanynulldatas\",       &getmanynulldatas,       true  },\n \n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },"
      }
    ]
  },
  {
    "sha": "8380f8cfcde1293a9acb98f270ee0b34d984f9bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzgwZjhjZmNkZTEyOTNhOWFjYjk4ZjI3MGVlMGIzNGQ5ODRmOWJi",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-09T01:01:06Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-09T01:01:06Z"
      },
      "message": "Fix push_back to use Pair",
      "tree": {
        "sha": "bfdb4338c50c8ef3f9027a78404ec9ca0b96b984",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfdb4338c50c8ef3f9027a78404ec9ca0b96b984"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8380f8cfcde1293a9acb98f270ee0b34d984f9bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8380f8cfcde1293a9acb98f270ee0b34d984f9bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8380f8cfcde1293a9acb98f270ee0b34d984f9bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8380f8cfcde1293a9acb98f270ee0b34d984f9bb/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61d4b32956de0b9b02eb58795a84e13017a3e347",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61d4b32956de0b9b02eb58795a84e13017a3e347",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61d4b32956de0b9b02eb58795a84e13017a3e347"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "22cd5ab750770e407d8bd65f040c0774a87249b8",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8380f8cfcde1293a9acb98f270ee0b34d984f9bb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8380f8cfcde1293a9acb98f270ee0b34d984f9bb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8380f8cfcde1293a9acb98f270ee0b34d984f9bb",
        "patch": "@@ -872,9 +872,9 @@ UniValue getmanynulldatas(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n \n         UniValue blockJSON(UniValue::VOBJ);\n-        blockJSON.push_back(\"hash\", pblockindex->GetBlockHash().GetHex());\n-        blockJSON.push_back(\"height\", block.nHeight);\n-        blockJSON.push_back(\"time\", block.GetBlockTime());\n+        blockJSON.push_back(Pair(\"hash\", pblockindex->GetBlockHash().GetHex()));\n+        blockJSON.push_back(Pair(\"height\", block.nHeight));\n+        blockJSON.push_back(Pair(\"time\", block.GetBlockTime()));\n \n         UniValue allnds(UniValue::VARR);\n         BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -894,7 +894,7 @@ UniValue getmanynulldatas(const JSONRPCRequest& request)\n             }\n         }\n \n-        blockJSON.push_back(\"nulldatatxs\", allnds);\n+        blockJSON.push_back(Pair(\"nulldatatxs\", allnds));\n         result.push_back(blockJSON);\n     }\n "
      }
    ]
  },
  {
    "sha": "769cf9ee81fdf96dd2aef944bc840faaf7a8be81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjljZjllZTgxZmRmOTZkZDJhZWY5NDRiYzg0MGZhYWY3YThiZTgx",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-09T01:03:27Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-09T01:03:27Z"
      },
      "message": "get height",
      "tree": {
        "sha": "998f492f371c925865b51be64958d89e33c1ee85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/998f492f371c925865b51be64958d89e33c1ee85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/769cf9ee81fdf96dd2aef944bc840faaf7a8be81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769cf9ee81fdf96dd2aef944bc840faaf7a8be81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/769cf9ee81fdf96dd2aef944bc840faaf7a8be81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769cf9ee81fdf96dd2aef944bc840faaf7a8be81/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8380f8cfcde1293a9acb98f270ee0b34d984f9bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8380f8cfcde1293a9acb98f270ee0b34d984f9bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8380f8cfcde1293a9acb98f270ee0b34d984f9bb"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c5d308ce0e131d775f886665a55b6ea4155a0f64",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/769cf9ee81fdf96dd2aef944bc840faaf7a8be81/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/769cf9ee81fdf96dd2aef944bc840faaf7a8be81/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=769cf9ee81fdf96dd2aef944bc840faaf7a8be81",
        "patch": "@@ -863,8 +863,7 @@ UniValue getmanynulldatas(const JSONRPCRequest& request)\n     {\n         CBlock block;\n         CBlockIndex* pblockindex = chainActive[nHeight];\n-        uint256 blockhash = pblockindex->GetBlockHash();\n-\n+        \n         if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");\n \n@@ -873,7 +872,7 @@ UniValue getmanynulldatas(const JSONRPCRequest& request)\n \n         UniValue blockJSON(UniValue::VOBJ);\n         blockJSON.push_back(Pair(\"hash\", pblockindex->GetBlockHash().GetHex()));\n-        blockJSON.push_back(Pair(\"height\", block.nHeight));\n+        blockJSON.push_back(Pair(\"height\", pblockindex->nHeight));\n         blockJSON.push_back(Pair(\"time\", block.GetBlockTime()));\n \n         UniValue allnds(UniValue::VARR);"
      }
    ]
  },
  {
    "sha": "ab0c316fac34c11cd9711e0a3713a766a85f9075",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjBjMzE2ZmFjMzRjMTFjZDk3MTFlMGEzNzEzYTc2NmE4NWY5MDc1",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-09T01:17:34Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-09T01:17:34Z"
      },
      "message": "interim",
      "tree": {
        "sha": "be85a70d0646d6535bf75de58b6e7eb3a4de2e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be85a70d0646d6535bf75de58b6e7eb3a4de2e5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab0c316fac34c11cd9711e0a3713a766a85f9075",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab0c316fac34c11cd9711e0a3713a766a85f9075",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab0c316fac34c11cd9711e0a3713a766a85f9075",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab0c316fac34c11cd9711e0a3713a766a85f9075/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "769cf9ee81fdf96dd2aef944bc840faaf7a8be81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769cf9ee81fdf96dd2aef944bc840faaf7a8be81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/769cf9ee81fdf96dd2aef944bc840faaf7a8be81"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5aa95e892eb855050e03e1d2a1a6c6110e1da0e2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab0c316fac34c11cd9711e0a3713a766a85f9075/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab0c316fac34c11cd9711e0a3713a766a85f9075/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ab0c316fac34c11cd9711e0a3713a766a85f9075",
        "patch": "@@ -824,9 +824,9 @@ UniValue getnulldatas(const JSONRPCRequest& request)\n \n UniValue getmanynulldatas(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n-            \"getnulldatas fromHeight toHeight\\n\"\n+            \"getmanynulldatas fromHeight toHeight\\n\"\n             \"\\nReturns an Object with all nulldatas in the given block range.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. fromHeight          (integer, required) The starting block height\\n\"\n@@ -854,7 +854,6 @@ UniValue getmanynulldatas(const JSONRPCRequest& request)\n     int fromHeight = request.params[0].get_int();\n     int toHeight = request.params[1].get_int();\n \n-\n     if (fromHeight < 0 || toHeight > chainActive.Height() || fromHeight >= toHeight)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range or invalid range\");\n \n@@ -863,7 +862,7 @@ UniValue getmanynulldatas(const JSONRPCRequest& request)\n     {\n         CBlock block;\n         CBlockIndex* pblockindex = chainActive[nHeight];\n-        \n+\n         if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");\n \n@@ -872,7 +871,7 @@ UniValue getmanynulldatas(const JSONRPCRequest& request)\n \n         UniValue blockJSON(UniValue::VOBJ);\n         blockJSON.push_back(Pair(\"hash\", pblockindex->GetBlockHash().GetHex()));\n-        blockJSON.push_back(Pair(\"height\", pblockindex->nHeight));\n+        blockJSON.push_back(Pair(\"height\", nHeight));\n         blockJSON.push_back(Pair(\"time\", block.GetBlockTime()));\n \n         UniValue allnds(UniValue::VARR);"
      }
    ]
  },
  {
    "sha": "4099e471b4ae9f01b5406ee8fa4a8abea3ae5778",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDk5ZTQ3MWI0YWU5ZjAxYjU0MDZlZThmYTRhOGFiZWEzYWU1Nzc4",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-12T03:11:49Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-12T03:11:49Z"
      },
      "message": "Add flag to allow not including empty blocks",
      "tree": {
        "sha": "cc6574dabe68a933604321d29e509c5533dcfaef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc6574dabe68a933604321d29e509c5533dcfaef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4099e471b4ae9f01b5406ee8fa4a8abea3ae5778",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4099e471b4ae9f01b5406ee8fa4a8abea3ae5778",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4099e471b4ae9f01b5406ee8fa4a8abea3ae5778",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4099e471b4ae9f01b5406ee8fa4a8abea3ae5778/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab0c316fac34c11cd9711e0a3713a766a85f9075",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab0c316fac34c11cd9711e0a3713a766a85f9075",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab0c316fac34c11cd9711e0a3713a766a85f9075"
      }
    ],
    "stats": {
      "total": 143,
      "additions": 70,
      "deletions": 73
    },
    "files": [
      {
        "sha": "e66dadd3ca77a3f8a262026074892db20836f43e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 73,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4099e471b4ae9f01b5406ee8fa4a8abea3ae5778/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4099e471b4ae9f01b5406ee8fa4a8abea3ae5778/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=4099e471b4ae9f01b5406ee8fa4a8abea3ae5778",
        "patch": "@@ -760,47 +760,21 @@ UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, pblockindex);\n }\n \n-UniValue getnulldatas(const JSONRPCRequest& request)\n+UniValue blockIndexToNulldataJSON(const CBlockIndex* pblockindex)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n-        throw runtime_error(\n-            \"getnulldatas \\\"hash\\\"\\n\"\n-            \"\\nReturns an Object with all nulldatas for the given block.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n-            \"\\nResult:\\n\"\n-            \"[\\n\"\n-            \"  {\\n\"\n-            \"    \\\"txid\\\" : \\\"hash\\\",   (string) the transaction hash\\n\"\n-            \"    \\\"nulldatas\\\" : [      (array of strings) Hex encoded nulldatas\\n\"\n-            \"      \\\"00000000\\\",        (string) the hex encoded nulldata\\n\"\n-            \"      ...,\\n\"\n-            \"    ]\\n\"\n-            \"  }\\n\"\n-            \"]\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getnulldatas\", \"\\\"0000000000000000038ac7709c75b5a2416a88338e75e6026328cfc7cca64c37\\\"\")\n-            + HelpExampleRpc(\"getnulldatas\", \"\\\"0000000000000000038ac7709c75b5a2416a88338e75e6026328cfc7cca64c37\\\"\")\n-        );\n-\n-    LOCK(cs_main);\n-\n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n-\n-    if (mapBlockIndex.count(hash) == 0)\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-\n     CBlock block;\n-    CBlockIndex* pblockindex = mapBlockIndex[hash];\n-\n     if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");\n \n     if(!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n \n-    UniValue result(UniValue::VARR);\n+    UniValue blockJSON(UniValue::VOBJ);\n+    blockJSON.push_back(Pair(\"hash\", pblockindex->GetBlockHash().GetHex()));\n+    blockJSON.push_back(Pair(\"height\", pblockindex->nHeight));\n+    blockJSON.push_back(Pair(\"time\", block.GetBlockTime()));\n+\n+    UniValue allnds(UniValue::VARR);\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n         if(tx.HasNulldata())\n@@ -814,17 +788,58 @@ UniValue getnulldatas(const JSONRPCRequest& request)\n             }\n             obj.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n             obj.push_back(Pair(\"nulldatas\", nds));\n-            result.push_back(obj);\n+            allnds.push_back(obj);\n         }\n     }\n \n-    return result;\n+    blockJSON.push_back(Pair(\"nulldatatxs\", allnds));\n+    return blockJSON;\n }\n \n+UniValue getnulldatas(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+        throw runtime_error(\n+            \"getnulldatas \\\"hash\\\"\\n\"\n+            \"\\nReturns an Object with all nulldatas for the given block.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n+            \"  \\\"time\\\" : 1478482199, (integer) timestamp in the block\\n\"\n+            \"  \\\"height\\\" : 0000, (integer) height of the block\\n\"\n+            \"  \\\"nulldatatxs\\\" : [, \\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",   (string) the transaction hash\\n\"\n+            \"      \\\"nulldatas\\\" : [      (array of strings) Hex encoded nulldatas\\n\"\n+            \"        \\\"00000000\\\",        (string) the hex encoded nulldata\\n\"\n+            \"        ...,\\n\"\n+            \"      ]\\n\"\n+            \"    }\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getnulldatas\", \"\\\"0000000000000000038ac7709c75b5a2416a88338e75e6026328cfc7cca64c37\\\"\")\n+            + HelpExampleRpc(\"getnulldatas\", \"\\\"0000000000000000038ac7709c75b5a2416a88338e75e6026328cfc7cca64c37\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    std::string strHash = request.params[0].get_str();\n+    uint256 hash(uint256S(strHash));\n+\n+    if (mapBlockIndex.count(hash) == 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    \n+    CBlockIndex* pblockindex = mapBlockIndex[hash];\n+\n+    return blockIndexToNulldataJSON(pblockindex);\n+}\n \n UniValue getmanynulldatas(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 2)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n             \"getmanynulldatas fromHeight toHeight\\n\"\n             \"\\nReturns an Object with all nulldatas in the given block range.\\n\"\n@@ -837,10 +852,14 @@ UniValue getmanynulldatas(const JSONRPCRequest& request)\n             \"    \\\"hash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n             \"    \\\"time\\\" : 1478482199, (integer) timestamp in the block\\n\"\n             \"    \\\"height\\\" : 0000, (integer) height of the block\\n\"\n-            \"    \\\"txid\\\" : \\\"hash\\\",   (string) the transaction hash\\n\"\n-            \"    \\\"nulldatas\\\" : [      (array of strings) Hex encoded nulldatas\\n\"\n-            \"      \\\"00000000\\\",        (string) the hex encoded nulldata\\n\"\n-            \"      ...,\\n\"\n+            \"    \\\"nulldatatxs\\\" : [, \\n\"\n+            \"      {\\n\"\n+            \"        \\\"txid\\\" : \\\"hash\\\",   (string) the transaction hash\\n\"\n+            \"        \\\"nulldatas\\\" : [      (array of strings) Hex encoded nulldatas\\n\"\n+            \"          \\\"00000000\\\",        (string) the hex encoded nulldata\\n\"\n+            \"          ...,\\n\"\n+            \"        ]\\n\"\n+            \"      }\\n\"\n             \"    ]\\n\"\n             \"  }\\n\"\n             \"]\\n\"\n@@ -853,47 +872,22 @@ UniValue getmanynulldatas(const JSONRPCRequest& request)\n \n     int fromHeight = request.params[0].get_int();\n     int toHeight = request.params[1].get_int();\n+    \n+    bool fOmitEmpty = false;\n+    if (request.params.size() > 2)\n+        fOmitEmpty = request.params[2].get_bool();\n \n     if (fromHeight < 0 || toHeight > chainActive.Height() || fromHeight >= toHeight)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range or invalid range\");\n \n     UniValue result(UniValue::VARR);\n     for (int nHeight = fromHeight; nHeight <= toHeight; nHeight++)\n     {\n-        CBlock block;\n         CBlockIndex* pblockindex = chainActive[nHeight];\n-\n-        if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");\n-\n-        if(!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n-\n-        UniValue blockJSON(UniValue::VOBJ);\n-        blockJSON.push_back(Pair(\"hash\", pblockindex->GetBlockHash().GetHex()));\n-        blockJSON.push_back(Pair(\"height\", nHeight));\n-        blockJSON.push_back(Pair(\"time\", block.GetBlockTime()));\n-\n-        UniValue allnds(UniValue::VARR);\n-        BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        {\n-            if(tx.HasNulldata())\n-            {\n-                UniValue obj(UniValue::VOBJ);\n-                UniValue nds(UniValue::VARR);\n-                BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-                {\n-                    if (txout.IsNulldata())\n-                        nds.push_back(HexStr(txout.scriptPubKey.begin(), txout.scriptPubKey.end()));\n-                }\n-                obj.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n-                obj.push_back(Pair(\"nulldatas\", nds));\n-                allnds.push_back(obj);\n-            }\n-        }\n-\n-        blockJSON.push_back(Pair(\"nulldatatxs\", allnds));\n-        result.push_back(blockJSON);\n+        UniValue blockJSON = blockIndexToNulldataJSON(pblockindex);\n+        \n+        if (!(fOmitEmpty && blockJSON[\"nulldatatxs\"].size() < 1))\n+            result.push_back(blockJSON);\n     }\n \n     return result;"
      },
      {
        "sha": "ed8276fba6e4a8513ba11920d9ee67b5c4ee0920",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4099e471b4ae9f01b5406ee8fa4a8abea3ae5778/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4099e471b4ae9f01b5406ee8fa4a8abea3ae5778/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=4099e471b4ae9f01b5406ee8fa4a8abea3ae5778",
        "patch": "@@ -111,6 +111,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setban\", 3 },\n     { \"getmempoolancestors\", 1 },\n     { \"getmempooldescendants\", 1 },\n+    { \"getmanynulldatas\", 0 },\n+    { \"getmanynulldatas\", 1 },\n+    { \"getmanynulldatas\", 2 },\n };\n \n class CRPCConvertTable"
      }
    ]
  },
  {
    "sha": "91f646e68c995741d5e5d1b73d13a9fadae1f6cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWY2NDZlNjhjOTk1NzQxZDVlNWQxYjczZDEzYTlmYWRhZTFmNmNi",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-12T03:14:47Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-12T03:14:47Z"
      },
      "message": "Merge branch 'f/getmanynulldatas'",
      "tree": {
        "sha": "dee21e412c796a58c483f070625502fe4957423f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dee21e412c796a58c483f070625502fe4957423f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91f646e68c995741d5e5d1b73d13a9fadae1f6cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f646e68c995741d5e5d1b73d13a9fadae1f6cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91f646e68c995741d5e5d1b73d13a9fadae1f6cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f646e68c995741d5e5d1b73d13a9fadae1f6cb/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "924de0bd75a7f75df65d7d15f9d1587a2e794abf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/924de0bd75a7f75df65d7d15f9d1587a2e794abf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/924de0bd75a7f75df65d7d15f9d1587a2e794abf"
      },
      {
        "sha": "4099e471b4ae9f01b5406ee8fa4a8abea3ae5778",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4099e471b4ae9f01b5406ee8fa4a8abea3ae5778",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4099e471b4ae9f01b5406ee8fa4a8abea3ae5778"
      }
    ],
    "stats": {
      "total": 159,
      "additions": 159,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3a4349f9b02b3773b02b6b743fca593f27478625",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f646e68c995741d5e5d1b73d13a9fadae1f6cb/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f646e68c995741d5e5d1b73d13a9fadae1f6cb/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=91f646e68c995741d5e5d1b73d13a9fadae1f6cb",
        "patch": "@@ -197,6 +197,11 @@ class CTxOut\n         return (nValue < GetDustThreshold(minRelayTxFee));\n     }\n \n+    bool IsNulldata() const\n+    {\n+        return scriptPubKey.IsNulldata();\n+    }\n+\n     friend bool operator==(const CTxOut& a, const CTxOut& b)\n     {\n         return (a.nValue       == b.nValue &&\n@@ -426,6 +431,16 @@ class CTransaction\n         return (vin.size() == 1 && vin[0].prevout.IsNull());\n     }\n \n+    bool HasNulldata() const\n+    {\n+        for (unsigned int i = 0; i < vout.size(); i++)\n+        {\n+            if (vout[i].IsNulldata())\n+                return true;\n+        }\n+        return false;\n+    }\n+\n     friend bool operator==(const CTransaction& a, const CTransaction& b)\n     {\n         return a.hash == b.hash;"
      },
      {
        "sha": "e66dadd3ca77a3f8a262026074892db20836f43e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 136,
        "deletions": 0,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f646e68c995741d5e5d1b73d13a9fadae1f6cb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f646e68c995741d5e5d1b73d13a9fadae1f6cb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=91f646e68c995741d5e5d1b73d13a9fadae1f6cb",
        "patch": "@@ -760,6 +760,139 @@ UniValue getblock(const JSONRPCRequest& request)\n     return blockToJSON(block, pblockindex);\n }\n \n+UniValue blockIndexToNulldataJSON(const CBlockIndex* pblockindex)\n+{\n+    CBlock block;\n+    if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Block not available (pruned data)\");\n+\n+    if(!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+\n+    UniValue blockJSON(UniValue::VOBJ);\n+    blockJSON.push_back(Pair(\"hash\", pblockindex->GetBlockHash().GetHex()));\n+    blockJSON.push_back(Pair(\"height\", pblockindex->nHeight));\n+    blockJSON.push_back(Pair(\"time\", block.GetBlockTime()));\n+\n+    UniValue allnds(UniValue::VARR);\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+    {\n+        if(tx.HasNulldata())\n+        {\n+            UniValue obj(UniValue::VOBJ);\n+            UniValue nds(UniValue::VARR);\n+            BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+            {\n+                if (txout.IsNulldata())\n+                    nds.push_back(HexStr(txout.scriptPubKey.begin(), txout.scriptPubKey.end()));\n+            }\n+            obj.push_back(Pair(\"txid\", tx.GetHash().GetHex()));\n+            obj.push_back(Pair(\"nulldatas\", nds));\n+            allnds.push_back(obj);\n+        }\n+    }\n+\n+    blockJSON.push_back(Pair(\"nulldatatxs\", allnds));\n+    return blockJSON;\n+}\n+\n+UniValue getnulldatas(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+        throw runtime_error(\n+            \"getnulldatas \\\"hash\\\"\\n\"\n+            \"\\nReturns an Object with all nulldatas for the given block.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n+            \"  \\\"time\\\" : 1478482199, (integer) timestamp in the block\\n\"\n+            \"  \\\"height\\\" : 0000, (integer) height of the block\\n\"\n+            \"  \\\"nulldatatxs\\\" : [, \\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",   (string) the transaction hash\\n\"\n+            \"      \\\"nulldatas\\\" : [      (array of strings) Hex encoded nulldatas\\n\"\n+            \"        \\\"00000000\\\",        (string) the hex encoded nulldata\\n\"\n+            \"        ...,\\n\"\n+            \"      ]\\n\"\n+            \"    }\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getnulldatas\", \"\\\"0000000000000000038ac7709c75b5a2416a88338e75e6026328cfc7cca64c37\\\"\")\n+            + HelpExampleRpc(\"getnulldatas\", \"\\\"0000000000000000038ac7709c75b5a2416a88338e75e6026328cfc7cca64c37\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    std::string strHash = request.params[0].get_str();\n+    uint256 hash(uint256S(strHash));\n+\n+    if (mapBlockIndex.count(hash) == 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+    \n+    CBlockIndex* pblockindex = mapBlockIndex[hash];\n+\n+    return blockIndexToNulldataJSON(pblockindex);\n+}\n+\n+UniValue getmanynulldatas(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+            \"getmanynulldatas fromHeight toHeight\\n\"\n+            \"\\nReturns an Object with all nulldatas in the given block range.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. fromHeight          (integer, required) The starting block height\\n\"\n+            \"2. toHeight            (integer, required) The final block height (inclusive)\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"hash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n+            \"    \\\"time\\\" : 1478482199, (integer) timestamp in the block\\n\"\n+            \"    \\\"height\\\" : 0000, (integer) height of the block\\n\"\n+            \"    \\\"nulldatatxs\\\" : [, \\n\"\n+            \"      {\\n\"\n+            \"        \\\"txid\\\" : \\\"hash\\\",   (string) the transaction hash\\n\"\n+            \"        \\\"nulldatas\\\" : [      (array of strings) Hex encoded nulldatas\\n\"\n+            \"          \\\"00000000\\\",        (string) the hex encoded nulldata\\n\"\n+            \"          ...,\\n\"\n+            \"        ]\\n\"\n+            \"      }\\n\"\n+            \"    ]\\n\"\n+            \"  }\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getmanynulldatas\", \"200000, 250000\")\n+            + HelpExampleRpc(\"getmanynulldatas\", \"200000, 250000\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    int fromHeight = request.params[0].get_int();\n+    int toHeight = request.params[1].get_int();\n+    \n+    bool fOmitEmpty = false;\n+    if (request.params.size() > 2)\n+        fOmitEmpty = request.params[2].get_bool();\n+\n+    if (fromHeight < 0 || toHeight > chainActive.Height() || fromHeight >= toHeight)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range or invalid range\");\n+\n+    UniValue result(UniValue::VARR);\n+    for (int nHeight = fromHeight; nHeight <= toHeight; nHeight++)\n+    {\n+        CBlockIndex* pblockindex = chainActive[nHeight];\n+        UniValue blockJSON = blockIndexToNulldataJSON(pblockindex);\n+        \n+        if (!(fOmitEmpty && blockJSON[\"nulldatatxs\"].size() < 1))\n+            result.push_back(blockJSON);\n+    }\n+\n+    return result;\n+}\n+\n struct CCoinsStats\n {\n     int nHeight;\n@@ -1388,6 +1521,9 @@ static const CRPCCommand commands[] =\n \n     { \"blockchain\",         \"preciousblock\",          &preciousblock,          true  },\n \n+    { \"blockchain\",         \"getnulldatas\",           &getnulldatas,           true  },\n+    { \"blockchain\",         \"getmanynulldatas\",       &getmanynulldatas,       true  },\n+\n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },\n     { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true  },"
      },
      {
        "sha": "ed8276fba6e4a8513ba11920d9ee67b5c4ee0920",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f646e68c995741d5e5d1b73d13a9fadae1f6cb/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f646e68c995741d5e5d1b73d13a9fadae1f6cb/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=91f646e68c995741d5e5d1b73d13a9fadae1f6cb",
        "patch": "@@ -111,6 +111,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setban\", 3 },\n     { \"getmempoolancestors\", 1 },\n     { \"getmempooldescendants\", 1 },\n+    { \"getmanynulldatas\", 0 },\n+    { \"getmanynulldatas\", 1 },\n+    { \"getmanynulldatas\", 2 },\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "28c7a6d3056e3372880fd386addd64008d6d8122",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f646e68c995741d5e5d1b73d13a9fadae1f6cb/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f646e68c995741d5e5d1b73d13a9fadae1f6cb/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=91f646e68c995741d5e5d1b73d13a9fadae1f6cb",
        "patch": "@@ -638,6 +638,11 @@ class CScript : public CScriptBase\n         return (size() > 0 && *begin() == OP_RETURN) || (size() > MAX_SCRIPT_SIZE);\n     }\n \n+    bool IsNulldata() const\n+    {\n+        return (size() > 0 && *begin() == OP_RETURN);\n+    }\n+\n     void clear()\n     {\n         // The default std::vector::clear() does not release memory."
      }
    ]
  },
  {
    "sha": "bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2JhOTNiZWJmODg2ZjJiZGUzOWU4YTNiZTNiYWVjNTJhMmQwOWYw",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-12T03:16:00Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-12T03:16:00Z"
      },
      "message": "Merge branch 'master' of https://github.com/bitcoin/bitcoin",
      "tree": {
        "sha": "ef11a93d08bcfb0948a7e2e34d1a77edb3700bb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef11a93d08bcfb0948a7e2e34d1a77edb3700bb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91f646e68c995741d5e5d1b73d13a9fadae1f6cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f646e68c995741d5e5d1b73d13a9fadae1f6cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91f646e68c995741d5e5d1b73d13a9fadae1f6cb"
      },
      {
        "sha": "87ab49e4fe38f0d8d527090ea348081037a68cef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ab49e4fe38f0d8d527090ea348081037a68cef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87ab49e4fe38f0d8d527090ea348081037a68cef"
      }
    ],
    "stats": {
      "total": 1680,
      "additions": 991,
      "deletions": 689
    },
    "files": [
      {
        "sha": "28c18149982566b37eb29370ff5366f7d4cebd8e",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -4,6 +4,8 @@ This issue tracker is only for technical issues related to bitcoin-core.\n \n General bitcoin questions and/or support requests and are best directed to the [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n \n+For reporting security issues, please read instructions at [https://bitcoincore.org/en/contact/](https://bitcoincore.org/en/contact/).\n+\n ### Describe the issue\n \n ### Can you reliably reproduce the issue?"
      },
      {
        "sha": "0fa06f1aa9fa91e7b0275c68cb54753657abfd3c",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -47,7 +47,10 @@ Comment: Site: https://github.com/stephenhutchings/typicons.font\n \n Files: src/qt/res/icons/connect*.png\n        src/qt/res/src/connect-*.svg\n+       src/qt/res/icons/network_disabled.png\n+       src/qt/res/src/network_disabled.svg\n Copyright: Marco Falke\n+           Luke Dashjr\n License: Expat\n Comment: Inspired by Stephan Hutchings Typicons\n "
      },
      {
        "sha": "4e58bec74e395b108c965843d05dd957bf7d5f60",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -1,4 +1,4 @@\n-OSX_MIN_VERSION=10.7\n+OSX_MIN_VERSION=10.8\n OSX_SDK_VERSION=10.11\n OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n LD64_VERSION=253.9"
      },
      {
        "sha": "b0794e6d30c451a06fcbfea8f864494c04fd8835",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -331,6 +331,32 @@ Strings and formatting\n \n   - *Rationale*: Bitcoin Core uses tinyformat, which is type safe. Leave them out to avoid confusion\n \n+Variable names\n+--------------\n+\n+The shadowing warning (`-Wshadow`) is enabled by default. It prevents issues rising\n+from using a different variable with the same name.\n+\n+Please name variables so that their names do not shadow variables defined in the source code.\n+\n+E.g. in member initializers, prepend `_` to the argument name shadowing the\n+member name:\n+\n+```c++\n+class AddressBookPage\n+{\n+    Mode mode;\n+}\n+\n+AddressBookPage::AddressBookPage(Mode _mode) :\n+      mode(_mode)\n+...\n+```\n+\n+When using nested cycles, do not name the inner cycle variable the same as in\n+upper cycle etc.\n+\n+\n Threads and synchronization\n ----------------------------\n "
      },
      {
        "sha": "1b4c8d90e772209cad63874abc0d0fc1d21ebc35",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -300,8 +300,8 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n             assert(segwit_tx_generated) # check that our test is not broken\n \n         # Wait until we've seen the block announcement for the resulting tip\n-        tip = int(self.nodes[0].getbestblockhash(), 16)\n-        assert(self.test_node.wait_for_block_announcement(tip))\n+        tip = int(node.getbestblockhash(), 16)\n+        assert(test_node.wait_for_block_announcement(tip))\n \n         # Now mine a block, and look at the resulting compact block.\n         test_node.clear_block_announcement()\n@@ -589,8 +589,8 @@ def test_incorrect_blocktxn_response(self, node, test_node, version):\n         assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n \n     def test_getblocktxn_handler(self, node, test_node, version):\n-        # bitcoind won't respond for blocks whose height is more than 15 blocks\n-        # deep.\n+        # bitcoind will not send blocktxn responses for blocks whose height is\n+        # more than 10 blocks deep.\n         MAX_GETBLOCKTXN_DEPTH = 10\n         chain_height = node.getblockcount()\n         current_height = chain_height\n@@ -623,11 +623,17 @@ def test_getblocktxn_handler(self, node, test_node, version):\n                 test_node.last_blocktxn = None\n             current_height -= 1\n \n-        # Next request should be ignored, as we're past the allowed depth.\n+        # Next request should send a full block response, as we're past the\n+        # allowed depth for a blocktxn response.\n         block_hash = node.getblockhash(current_height)\n         msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [0])\n+        with mininode_lock:\n+            test_node.last_block = None\n+            test_node.last_blocktxn = None\n         test_node.send_and_ping(msg)\n         with mininode_lock:\n+            test_node.last_block.block.calc_sha256()\n+            assert_equal(test_node.last_block.block.sha256, int(block_hash, 16))\n             assert_equal(test_node.last_blocktxn, None)\n \n     def test_compactblocks_not_at_tip(self, node, test_node):\n@@ -648,6 +654,8 @@ def test_compactblocks_not_at_tip(self, node, test_node):\n         node.generate(1)\n         wait_until(test_node.received_block_announcement, timeout=30)\n         test_node.clear_block_announcement()\n+        with mininode_lock:\n+            test_node.last_block = None\n         test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n         success = wait_until(lambda: test_node.last_block is not None, timeout=30)\n         assert(success)"
      },
      {
        "sha": "3cefa51c0a7f046272042adfe13dfd98f3c2bf1b",
        "filename": "qa/rpc-tests/preciousblock.py",
        "status": "modified",
        "additions": 34,
        "deletions": 31,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/qa/rpc-tests/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/qa/rpc-tests/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/preciousblock.py?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -8,7 +8,12 @@\n #\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes_bi,\n+    sync_chain,\n+    sync_blocks,\n+)\n \n def unidirectional_node_sync_via_rpc(node_src, node_dest):\n     blocks_to_copy = []\n@@ -33,84 +38,82 @@ def node_sync_via_rpc(nodes):\n             unidirectional_node_sync_via_rpc(node_src, node_dest)\n \n class PreciousTest(BitcoinTestFramework):\n-    def setup_chain(self):\n-        print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        self.extra_args = [[\"-debug\"]] * self.num_nodes\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.is_network_split = False\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes = self.setup_nodes()\n \n     def run_test(self):\n         print(\"Ensure submitblock can in principle reorg to a competing chain\")\n         self.nodes[0].generate(1)\n-        assert(self.nodes[0].getblockcount() == 1)\n+        assert_equal(self.nodes[0].getblockcount(), 1)\n         (hashY, hashZ) = self.nodes[1].generate(2)\n-        assert(self.nodes[1].getblockcount() == 2)\n+        assert_equal(self.nodes[1].getblockcount(), 2)\n         node_sync_via_rpc(self.nodes[0:3])\n-        assert(self.nodes[0].getbestblockhash() == hashZ)\n+        assert_equal(self.nodes[0].getbestblockhash(), hashZ)\n \n         print(\"Mine blocks A-B-C on Node 0\")\n         (hashA, hashB, hashC) = self.nodes[0].generate(3)\n-        assert(self.nodes[0].getblockcount() == 5)\n+        assert_equal(self.nodes[0].getblockcount(), 5)\n         print(\"Mine competing blocks E-F-G on Node 1\")\n         (hashE, hashF, hashG) = self.nodes[1].generate(3)\n-        assert(self.nodes[1].getblockcount() == 5)\n+        assert_equal(self.nodes[1].getblockcount(), 5)\n         assert(hashC != hashG)\n         print(\"Connect nodes and check no reorg occurs\")\n         # Submit competing blocks via RPC so any reorg should occur before we proceed (no way to wait on inaction for p2p sync)\n         node_sync_via_rpc(self.nodes[0:2])\n         connect_nodes_bi(self.nodes,0,1)\n-        assert(self.nodes[0].getbestblockhash() == hashC)\n-        assert(self.nodes[1].getbestblockhash() == hashG)\n+        assert_equal(self.nodes[0].getbestblockhash(), hashC)\n+        assert_equal(self.nodes[1].getbestblockhash(), hashG)\n         print(\"Make Node0 prefer block G\")\n         self.nodes[0].preciousblock(hashG)\n-        assert(self.nodes[0].getbestblockhash() == hashG)\n+        assert_equal(self.nodes[0].getbestblockhash(), hashG)\n         print(\"Make Node0 prefer block C again\")\n         self.nodes[0].preciousblock(hashC)\n-        assert(self.nodes[0].getbestblockhash() == hashC)\n+        assert_equal(self.nodes[0].getbestblockhash(), hashC)\n         print(\"Make Node1 prefer block C\")\n         self.nodes[1].preciousblock(hashC)\n         sync_chain(self.nodes[0:2]) # wait because node 1 may not have downloaded hashC\n-        assert(self.nodes[1].getbestblockhash() == hashC)\n+        assert_equal(self.nodes[1].getbestblockhash(), hashC)\n         print(\"Make Node1 prefer block G again\")\n         self.nodes[1].preciousblock(hashG)\n-        assert(self.nodes[1].getbestblockhash() == hashG)\n+        assert_equal(self.nodes[1].getbestblockhash(), hashG)\n         print(\"Make Node0 prefer block G again\")\n         self.nodes[0].preciousblock(hashG)\n-        assert(self.nodes[0].getbestblockhash() == hashG)\n+        assert_equal(self.nodes[0].getbestblockhash(), hashG)\n         print(\"Make Node1 prefer block C again\")\n         self.nodes[1].preciousblock(hashC)\n-        assert(self.nodes[1].getbestblockhash() == hashC)\n+        assert_equal(self.nodes[1].getbestblockhash(), hashC)\n         print(\"Mine another block (E-F-G-)H on Node 0 and reorg Node 1\")\n         self.nodes[0].generate(1)\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         sync_blocks(self.nodes[0:2])\n         hashH = self.nodes[0].getbestblockhash()\n-        assert(self.nodes[1].getbestblockhash() == hashH)\n+        assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         print(\"Node1 should not be able to prefer block C anymore\")\n         self.nodes[1].preciousblock(hashC)\n-        assert(self.nodes[1].getbestblockhash() == hashH)\n+        assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         print(\"Mine competing blocks I-J-K-L on Node 2\")\n         self.nodes[2].generate(4)\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         hashL = self.nodes[2].getbestblockhash()\n         print(\"Connect nodes and check no reorg occurs\")\n         node_sync_via_rpc(self.nodes[0:3])\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        assert(self.nodes[0].getbestblockhash() == hashH)\n-        assert(self.nodes[1].getbestblockhash() == hashH)\n-        assert(self.nodes[2].getbestblockhash() == hashL)\n+        assert_equal(self.nodes[0].getbestblockhash(), hashH)\n+        assert_equal(self.nodes[1].getbestblockhash(), hashH)\n+        assert_equal(self.nodes[2].getbestblockhash(), hashL)\n         print(\"Make Node1 prefer block L\")\n         self.nodes[1].preciousblock(hashL)\n-        assert(self.nodes[1].getbestblockhash() == hashL)\n+        assert_equal(self.nodes[1].getbestblockhash(), hashL)\n         print(\"Make Node2 prefer block H\")\n         self.nodes[2].preciousblock(hashH)\n-        assert(self.nodes[2].getbestblockhash() == hashH)\n+        assert_equal(self.nodes[2].getbestblockhash(), hashH)\n \n if __name__ == '__main__':\n     PreciousTest().main()"
      },
      {
        "sha": "74a74f679a85d8ae40e9066137fe4ad900b1e435",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -225,9 +225,9 @@ def transact_and_mine(self, numblocks, mining_node):\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n                 tx_kbytes = (len(txhex) // 2) / 1000.0\n                 self.fees_per_kb.append(float(fee)/tx_kbytes)\n-            sync_mempools(self.nodes[0:3],.1)\n+            sync_mempools(self.nodes[0:3], wait=.1)\n             mined = mining_node.getblock(mining_node.generate(1)[0],True)[\"tx\"]\n-            sync_blocks(self.nodes[0:3],.1)\n+            sync_blocks(self.nodes[0:3], wait=.1)\n             # update which txouts are confirmed\n             newmem = []\n             for utx in self.memutxo:\n@@ -259,7 +259,7 @@ def run_test(self):\n         while len(self.nodes[1].getrawmempool()) > 0:\n             self.nodes[1].generate(1)\n \n-        sync_blocks(self.nodes[0:3],.1)\n+        sync_blocks(self.nodes[0:3], wait=.1)\n         print(\"Final estimates after emptying mempools\")\n         check_estimates(self.nodes[1], self.fees_per_kb, 2)\n "
      },
      {
        "sha": "495c6bdf350d00a78646ed925fa9b8a1e6462a17",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -41,6 +41,7 @@\n BIP0031_VERSION = 60000\n MY_VERSION = 70014  # past bip-31 for ping/pong\n MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n+MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)\n \n MAX_INV_SZ = 50000\n MAX_BLOCK_SIZE = 1000000\n@@ -951,6 +952,7 @@ def __init__(self):\n         self.nNonce = random.getrandbits(64)\n         self.strSubVer = MY_SUBVERSION\n         self.nStartingHeight = -1\n+        self.nRelay = MY_RELAY\n \n     def deserialize(self, f):\n         self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n@@ -960,21 +962,32 @@ def deserialize(self, f):\n         self.nTime = struct.unpack(\"<q\", f.read(8))[0]\n         self.addrTo = CAddress()\n         self.addrTo.deserialize(f)\n+\n         if self.nVersion >= 106:\n             self.addrFrom = CAddress()\n             self.addrFrom.deserialize(f)\n             self.nNonce = struct.unpack(\"<Q\", f.read(8))[0]\n             self.strSubVer = deser_string(f)\n-            if self.nVersion >= 209:\n-                self.nStartingHeight = struct.unpack(\"<i\", f.read(4))[0]\n-            else:\n-                self.nStartingHeight = None\n         else:\n             self.addrFrom = None\n             self.nNonce = None\n             self.strSubVer = None\n             self.nStartingHeight = None\n \n+        if self.nVersion >= 209:\n+            self.nStartingHeight = struct.unpack(\"<i\", f.read(4))[0]\n+        else:\n+            self.nStartingHeight = None\n+\n+        if self.nVersion >= 70001:\n+            # Relay field is optional for version 70001 onwards\n+            try:\n+                self.nRelay = struct.unpack(\"<b\", f.read(1))[0]\n+            except:\n+                self.nRelay = 0\n+        else:\n+            self.nRelay = 0\n+\n     def serialize(self):\n         r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n@@ -985,13 +998,14 @@ def serialize(self):\n         r += struct.pack(\"<Q\", self.nNonce)\n         r += ser_string(self.strSubVer)\n         r += struct.pack(\"<i\", self.nStartingHeight)\n+        r += struct.pack(\"<b\", self.nRelay)\n         return r\n \n     def __repr__(self):\n-        return 'msg_version(nVersion=%i nServices=%i nTime=%s addrTo=%s addrFrom=%s nNonce=0x%016X strSubVer=%s nStartingHeight=%i)' \\\n+        return 'msg_version(nVersion=%i nServices=%i nTime=%s addrTo=%s addrFrom=%s nNonce=0x%016X strSubVer=%s nStartingHeight=%i nRelay=%i)' \\\n             % (self.nVersion, self.nServices, time.ctime(self.nTime),\n                repr(self.addrTo), repr(self.addrFrom), self.nNonce,\n-               self.strSubVer, self.nStartingHeight)\n+               self.strSubVer, self.nStartingHeight, self.nRelay)\n \n \n class msg_verack(object):"
      },
      {
        "sha": "b5ef0689b47a16f75a6172ef0bc5a331538c46ec",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -121,33 +121,35 @@ def hex_str_to_bytes(hex_str):\n def str_to_b64str(string):\n     return b64encode(string.encode('utf-8')).decode('ascii')\n \n-def sync_blocks(rpc_connections, wait=1, timeout=60):\n+def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n     \"\"\"\n     Wait until everybody has the same tip\n     \"\"\"\n     maxheight = 0\n     while timeout > 0:\n-        tips = [ x.waitforblockheight(maxheight, int(wait * 1000)) for x in rpc_connections ]\n-        heights = [ x[\"height\"] for x in tips ]\n-        if tips == [ tips[0] ]*len(tips):\n-            return True\n-        if heights == [ heights[0] ]*len(heights): #heights are the same but hashes are not\n-            raise AssertionError(\"Block sync failed\")\n+        tips = [r.waitforblockheight(maxheight, int(wait * 1000)) for r in rpc_connections]\n+        heights = [t[\"height\"] for t in tips]\n+        if tips == [tips[0]] * len(tips):\n+            return\n+        if heights == [heights[0]] * len(heights):\n+            raise AssertionError(\"Block sync failed: (Hashes don't match)\")\n         timeout -= wait\n         maxheight = max(heights)\n-    raise AssertionError(\"Block sync failed\")\n+    raise AssertionError(\"Block sync failed with heights: {}\".format(heights))\n \n-def sync_chain(rpc_connections, wait=1):\n+def sync_chain(rpc_connections, *, wait=1, timeout=60):\n     \"\"\"\n     Wait until everybody has the same best block\n     \"\"\"\n-    while True:\n-        counts = [ x.getbestblockhash() for x in rpc_connections ]\n-        if counts == [ counts[0] ]*len(counts):\n-            break\n+    while timeout > 0:\n+        best_hash = [x.getbestblockhash() for x in rpc_connections]\n+        if best_hash == [best_hash[0]]*len(best_hash):\n+            return\n         time.sleep(wait)\n+        timeout -= wait\n+    raise AssertionError(\"Chain sync failed: Best block hashes don't match\")\n \n-def sync_mempools(rpc_connections, wait=1, timeout=60):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n     pools\n@@ -159,7 +161,7 @@ def sync_mempools(rpc_connections, wait=1, timeout=60):\n             if set(rpc_connections[i].getrawmempool()) == pool:\n                 num_match = num_match+1\n         if num_match == len(rpc_connections):\n-            return True\n+            return\n         time.sleep(wait)\n         timeout -= wait\n     raise AssertionError(\"Mempool sync failed\")"
      },
      {
        "sha": "840d33c1b5f82a0fccbfdf472156885c42281dfb",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -6,11 +6,15 @@ bin_PROGRAMS += bench/bench_bitcoin\n BENCH_SRCDIR = bench\n BENCH_BINARY = bench/bench_bitcoin$(EXEEXT)\n \n+RAW_TEST_FILES = \\\n+  bench/data/block413567.raw\n+GENERATED_TEST_FILES = $(RAW_TEST_FILES:.raw=.raw.h)\n \n bench_bench_bitcoin_SOURCES = \\\n   bench/bench_bitcoin.cpp \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n+  bench/checkblock.cpp \\\n   bench/Examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/crypto_hash.cpp \\\n@@ -20,6 +24,8 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/base58.cpp \\\n   bench/lockedpool.cpp\n \n+nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_TEST_FILES)\n+\n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n@@ -45,14 +51,23 @@ endif\n bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n-CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno\n+CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_TEST_FILES)\n \n CLEANFILES += $(CLEAN_BITCOIN_BENCH)\n \n+bench/checkblock.cpp: bench/data/block413567.raw.h\n+\n bitcoin_bench: $(BENCH_BINARY)\n \n bench: $(BENCH_BINARY) FORCE\n \t$(BENCH_BINARY)\n \n bitcoin_bench_clean : FORCE\n \trm -f $(CLEAN_BITCOIN_BENCH) $(bench_bench_bitcoin_OBJECTS) $(BENCH_BINARY)\n+\n+%.raw.h: %.raw\n+\t@$(MKDIR_P) $(@D)\n+\t@echo \"static unsigned const char $(*F)[] = {\" >> $@\n+\t@$(HEXDUMP) -v -e '8/1 \"0x%02x, \"' -e '\"\\n\"' $< | $(SED) -e 's/0x  ,//g' >> $@\n+\t@echo \"};\" >> $@\n+\t@echo \"Generated $@\""
      },
      {
        "sha": "48abb9b4a2a708798cc018f002ce1e9f1e649fad",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -271,6 +271,7 @@ RES_ICONS = \\\n   qt/res/icons/key.png \\\n   qt/res/icons/lock_closed.png \\\n   qt/res/icons/lock_open.png \\\n+  qt/res/icons/network_disabled.png \\\n   qt/res/icons/open.png \\\n   qt/res/icons/overview.png \\\n   qt/res/icons/quit.png \\"
      },
      {
        "sha": "339943ca5af31c9fb6bc22ec3e9358ff303752cd",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -46,7 +46,7 @@ class CBanEntry\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(this->nVersion);\n         READWRITE(nCreateTime);\n         READWRITE(nBanUntil);"
      },
      {
        "sha": "cabacbbea971659c31b921fbc6fe2c32b5aecc08",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -58,7 +58,7 @@ class CAddrInfo : public CAddress\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(*(CAddress*)this);\n         READWRITE(source);\n         READWRITE(nLastSuccess);\n@@ -293,7 +293,7 @@ class CAddrMan\n      * very little in common.\n      */\n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersionDummy) const\n+    void Serialize(Stream &s) const\n     {\n         LOCK(cs);\n \n@@ -343,7 +343,7 @@ class CAddrMan\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersionDummy)\n+    void Unserialize(Stream& s)\n     {\n         LOCK(cs);\n \n@@ -448,11 +448,6 @@ class CAddrMan\n         Check();\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n-    {\n-        return (CSizeComputer(nType, nVersion) << *this).size();\n-    }\n-\n     void Clear()\n     {\n         std::vector<int>().swap(vRandom);"
      },
      {
        "sha": "ba0c86040f18ca4b8ecbb491345f5bd621b6f20d",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -64,7 +64,7 @@ class CFeeRate\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(nSatoshisPerK);\n     }\n };"
      },
      {
        "sha": "4a564d3fc82549fdbe9fd280e568b7dfde0ed798",
        "filename": "src/bench/checkblock.cpp",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+#include \"consensus/validation.h\"\n+\n+namespace block_bench {\n+#include \"bench/data/block413567.raw.h\"\n+}\n+\n+// These are the two major time-sinks which happen after we have fully received\n+// a block off the wire, but before we can relay the block on to peers using\n+// compact block relay.\n+\n+static void DeserializeBlockTest(benchmark::State& state)\n+{\n+    CDataStream stream((const char*)block_bench::block413567,\n+            (const char*)&block_bench::block413567[sizeof(block_bench::block413567)],\n+            SER_NETWORK, PROTOCOL_VERSION);\n+    char a;\n+    stream.write(&a, 1); // Prevent compaction\n+\n+    while (state.KeepRunning()) {\n+        CBlock block;\n+        stream >> block;\n+        assert(stream.Rewind(sizeof(block_bench::block413567)));\n+    }\n+}\n+\n+static void DeserializeAndCheckBlockTest(benchmark::State& state)\n+{\n+    CDataStream stream((const char*)block_bench::block413567,\n+            (const char*)&block_bench::block413567[sizeof(block_bench::block413567)],\n+            SER_NETWORK, PROTOCOL_VERSION);\n+    char a;\n+    stream.write(&a, 1); // Prevent compaction\n+\n+    Consensus::Params params = Params(CBaseChainParams::MAIN).GetConsensus();\n+\n+    while (state.KeepRunning()) {\n+        CBlock block; // Note that CBlock caches its checked state, so we need to recreate it here\n+        stream >> block;\n+        assert(stream.Rewind(sizeof(block_bench::block413567)));\n+\n+        CValidationState validationState;\n+        assert(CheckBlock(block, validationState, params));\n+    }\n+}\n+\n+BENCHMARK(DeserializeBlockTest);\n+BENCHMARK(DeserializeAndCheckBlockTest);"
      },
      {
        "sha": "67d2d5d38205e6ac9b281c742717ae720b228c9a",
        "filename": "src/bench/data/block413567.raw",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/bench/data/block413567.raw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/bench/data/block413567.raw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/data/block413567.raw?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0"
      },
      {
        "sha": "6c66efcc9cb29574ff85abc7c5e051384178f00a",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -48,7 +48,7 @@ static int AppInitRawTx(int argc, char* argv[])\n         SelectParams(ChainNameFromCommandLine());\n     } catch (const std::exception& e) {\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n-        return false;\n+        return EXIT_FAILURE;\n     }\n \n     fCreateBlank = GetBoolArg(\"-create\", false);"
      },
      {
        "sha": "dbed90583d4a5b49d083de4283e667341520330e",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -131,7 +131,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n             break;\n     }\n \n-    LogPrint(\"cmpctblock\", \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), cmpctblock.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION));\n+    LogPrint(\"cmpctblock\", \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), GetSerializeSize(cmpctblock, SER_NETWORK, PROTOCOL_VERSION));\n \n     return READ_STATUS_OK;\n }"
      },
      {
        "sha": "1f9491867a0bac7632914f57c3b6b0fa7a7b5cae",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -21,7 +21,7 @@ struct TransactionCompressor {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(tx); //TODO: Compress tx encoding\n     }\n };\n@@ -35,7 +35,7 @@ class BlockTransactionsRequest {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(blockhash);\n         uint64_t indexes_size = (uint64_t)indexes.size();\n         READWRITE(COMPACTSIZE(indexes_size));\n@@ -81,7 +81,7 @@ class BlockTransactions {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(blockhash);\n         uint64_t txn_size = (uint64_t)txn.size();\n         READWRITE(COMPACTSIZE(txn_size));\n@@ -109,7 +109,7 @@ struct PrefilledTransaction {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         uint64_t idx = index;\n         READWRITE(COMPACTSIZE(idx));\n         if (idx > std::numeric_limits<uint16_t>::max())\n@@ -157,7 +157,7 @@ class CBlockHeaderAndShortTxIDs {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(header);\n         READWRITE(nonce);\n "
      },
      {
        "sha": "d3a017371f30ab58a59f30769225f405189ea079",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -73,7 +73,7 @@ class CBloomFilter\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(vData);\n         READWRITE(nHashFuncs);\n         READWRITE(nTweak);"
      },
      {
        "sha": "0aac5de5c22971afb6d3eee521acb69cc4a5ac03",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -28,7 +28,7 @@ class CBlockFileInfo\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(VARINT(nBlocks));\n         READWRITE(VARINT(nSize));\n         READWRITE(VARINT(nUndoSize));\n@@ -76,7 +76,7 @@ struct CDiskBlockPos\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(VARINT(nFile));\n         READWRITE(VARINT(nPos));\n     }\n@@ -357,8 +357,9 @@ class CDiskBlockIndex : public CBlockIndex\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(VARINT(nVersion));\n \n         READWRITE(VARINT(nHeight));"
      },
      {
        "sha": "d295b3c940d6637dceb88562433c05a4e7c412e6",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 12,
        "deletions": 35,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -153,65 +153,42 @@ class CCoins\n         return fCoinBase;\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        unsigned int nSize = 0;\n-        unsigned int nMaskSize = 0, nMaskCode = 0;\n-        CalcMaskSize(nMaskSize, nMaskCode);\n-        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n-        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n-        assert(fFirst || fSecond || nMaskCode);\n-        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n-        // version\n-        nSize += ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion);\n-        // size of header code\n-        nSize += ::GetSerializeSize(VARINT(nCode), nType, nVersion);\n-        // spentness bitmask\n-        nSize += nMaskSize;\n-        // txouts themself\n-        for (unsigned int i = 0; i < vout.size(); i++)\n-            if (!vout[i].IsNull())\n-                nSize += ::GetSerializeSize(CTxOutCompressor(REF(vout[i])), nType, nVersion);\n-        // height\n-        nSize += ::GetSerializeSize(VARINT(nHeight), nType, nVersion);\n-        return nSize;\n-    }\n-\n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n+    void Serialize(Stream &s) const {\n         unsigned int nMaskSize = 0, nMaskCode = 0;\n         CalcMaskSize(nMaskSize, nMaskCode);\n         bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n         bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n         assert(fFirst || fSecond || nMaskCode);\n         unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n         // version\n-        ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n+        ::Serialize(s, VARINT(this->nVersion));\n         // header code\n-        ::Serialize(s, VARINT(nCode), nType, nVersion);\n+        ::Serialize(s, VARINT(nCode));\n         // spentness bitmask\n         for (unsigned int b = 0; b<nMaskSize; b++) {\n             unsigned char chAvail = 0;\n             for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++)\n                 if (!vout[2+b*8+i].IsNull())\n                     chAvail |= (1 << i);\n-            ::Serialize(s, chAvail, nType, nVersion);\n+            ::Serialize(s, chAvail);\n         }\n         // txouts themself\n         for (unsigned int i = 0; i < vout.size(); i++) {\n             if (!vout[i].IsNull())\n-                ::Serialize(s, CTxOutCompressor(REF(vout[i])), nType, nVersion);\n+                ::Serialize(s, CTxOutCompressor(REF(vout[i])));\n         }\n         // coinbase height\n-        ::Serialize(s, VARINT(nHeight), nType, nVersion);\n+        ::Serialize(s, VARINT(nHeight));\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n         // version\n-        ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n+        ::Unserialize(s, VARINT(this->nVersion));\n         // header code\n-        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n+        ::Unserialize(s, VARINT(nCode));\n         fCoinBase = nCode & 1;\n         std::vector<bool> vAvail(2, false);\n         vAvail[0] = (nCode & 2) != 0;\n@@ -220,7 +197,7 @@ class CCoins\n         // spentness bitmask\n         while (nMaskCode > 0) {\n             unsigned char chAvail = 0;\n-            ::Unserialize(s, chAvail, nType, nVersion);\n+            ::Unserialize(s, chAvail);\n             for (unsigned int p = 0; p < 8; p++) {\n                 bool f = (chAvail & (1 << p)) != 0;\n                 vAvail.push_back(f);\n@@ -232,10 +209,10 @@ class CCoins\n         vout.assign(vAvail.size(), CTxOut());\n         for (unsigned int i = 0; i < vAvail.size(); i++) {\n             if (vAvail[i])\n-                ::Unserialize(s, REF(CTxOutCompressor(vout[i])), nType, nVersion);\n+                ::Unserialize(s, REF(CTxOutCompressor(vout[i])));\n         }\n         // coinbase height\n-        ::Unserialize(s, VARINT(nHeight), nType, nVersion);\n+        ::Unserialize(s, VARINT(nHeight));\n         Cleanup();\n     }\n "
      },
      {
        "sha": "961365d2618a480e8ad79198ab332f6a0799ce29",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 3,
        "deletions": 11,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -55,16 +55,8 @@ class CScriptCompressor\n public:\n     CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        std::vector<unsigned char> compr;\n-        if (Compress(compr))\n-            return compr.size();\n-        unsigned int nSize = script.size() + nSpecialScripts;\n-        return script.size() + VARINT(nSize).GetSerializeSize(nType, nVersion);\n-    }\n-\n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n+    void Serialize(Stream &s) const {\n         std::vector<unsigned char> compr;\n         if (Compress(compr)) {\n             s << CFlatData(compr);\n@@ -76,7 +68,7 @@ class CScriptCompressor\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s) {\n         unsigned int nSize = 0;\n         s >> VARINT(nSize);\n         if (nSize < nSpecialScripts) {\n@@ -112,7 +104,7 @@ class CTxOutCompressor\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         if (!ser_action.ForRead()) {\n             uint64_t nVal = CompressAmount(txout.nValue);\n             READWRITE(VARINT(nVal));"
      },
      {
        "sha": "4a79bbd17dfec56999445ee4f41005d21e93ce8d",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -17,6 +17,9 @@\n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>\n \n+static const size_t DBWRAPPER_PREALLOC_KEY_SIZE = 64;\n+static const size_t DBWRAPPER_PREALLOC_VALUE_SIZE = 1024;\n+\n class dbwrapper_error : public std::runtime_error\n {\n public:\n@@ -60,12 +63,12 @@ class CDBBatch\n     void Write(const K& key, const V& value)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-        ssValue.reserve(ssValue.GetSerializeSize(value));\n+        ssValue.reserve(DBWRAPPER_PREALLOC_VALUE_SIZE);\n         ssValue << value;\n         ssValue.Xor(dbwrapper_private::GetObfuscateKey(parent));\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n@@ -77,7 +80,7 @@ class CDBBatch\n     void Erase(const K& key)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n@@ -107,7 +110,7 @@ class CDBIterator\n \n     template<typename K> void Seek(const K& key) {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n         piter->Seek(slKey);\n@@ -200,7 +203,7 @@ class CDBWrapper\n     bool Read(const K& key, V& value) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n@@ -234,7 +237,7 @@ class CDBWrapper\n     bool Exists(const K& key) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n         leveldb::Slice slKey(&ssKey[0], ssKey.size());\n "
      },
      {
        "sha": "94e7f5ea6ccb83939efd35200159c9aefce90e88",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -132,15 +132,17 @@ class CHashWriter\n private:\n     CHash256 ctx;\n \n+    const int nType;\n+    const int nVersion;\n public:\n-    int nType;\n-    int nVersion;\n \n     CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n \n-    CHashWriter& write(const char *pch, size_t size) {\n+    int GetType() const { return nType; }\n+    int GetVersion() const { return nVersion; }\n+\n+    void write(const char *pch, size_t size) {\n         ctx.Write((const unsigned char*)pch, size);\n-        return (*this);\n     }\n \n     // invalidates the object\n@@ -153,7 +155,7 @@ class CHashWriter\n     template<typename T>\n     CHashWriter& operator<<(const T& obj) {\n         // Serialize to this stream\n-        ::Serialize(*this, obj, nType, nVersion);\n+        ::Serialize(*this, obj);\n         return (*this);\n     }\n };"
      },
      {
        "sha": "ff5252b7a0fd932e552d53100173f4a579b06f67",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -162,7 +162,7 @@ struct CExtKey {\n     CExtPubKey Neuter() const;\n     void SetMaster(const unsigned char* seed, unsigned int nSeedLen);\n     template <typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s) const\n     {\n         unsigned int len = BIP32_EXTKEY_SIZE;\n         ::WriteCompactSize(s, len);\n@@ -171,7 +171,7 @@ struct CExtKey {\n         s.write((const char *)&code[0], len);\n     }\n     template <typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n+    void Unserialize(Stream& s)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n         unsigned char code[BIP32_EXTKEY_SIZE];"
      },
      {
        "sha": "e868e3c5f9ee50eeaeeaae06049fc42b0daa5b0b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 11,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -1104,7 +1104,7 @@ int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& i\n \n \n \n-bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n+bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n@@ -1128,13 +1128,14 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n-    // Check for duplicate inputs\n-    set<COutPoint> vInOutPoints;\n-    for (const auto& txin : tx.vin)\n-    {\n-        if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        vInOutPoints.insert(txin.prevout);\n+    // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n+    if (fCheckDuplicateInputs) {\n+        set<COutPoint> vInOutPoints;\n+        for (const auto& txin : tx.vin)\n+        {\n+            if (!vInOutPoints.insert(txin.prevout).second)\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        }\n     }\n \n     if (tx.IsCoinBase())\n@@ -1712,7 +1713,7 @@ bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHea\n         return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n \n     // Write index header\n-    unsigned int nSize = fileout.GetSerializeSize(block);\n+    unsigned int nSize = GetSerializeSize(fileout, block);\n     fileout << FLATDATA(messageStart) << nSize;\n \n     // Write block\n@@ -2102,7 +2103,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n         return error(\"%s: OpenUndoFile failed\", __func__);\n \n     // Write index header\n-    unsigned int nSize = fileout.GetSerializeSize(blockundo);\n+    unsigned int nSize = GetSerializeSize(fileout, blockundo);\n     fileout << FLATDATA(messageStart) << nSize;\n \n     // Write undo data\n@@ -3461,7 +3462,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check transactions\n     for (const auto& tx : block.vtx)\n-        if (!CheckTransaction(tx, state))\n+        if (!CheckTransaction(tx, state, false))\n             return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n                                  strprintf(\"Transaction check failed (tx hash %s) %s\", tx.GetHash().ToString(), state.GetDebugMessage()));\n \n@@ -5494,7 +5495,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         if (it->second->nHeight < chainActive.Height() - MAX_BLOCKTXN_DEPTH) {\n+            // If an older block is requested (should never happen in practice,\n+            // but can happen in tests) send a block response instead of a\n+            // blocktxn response. Sending a full block response instead of a\n+            // small blocktxn response is preferable in the case where a peer\n+            // might maliciously send lots of getblocktxn requests to trigger\n+            // expensive disk reads, because it will require the peer to\n+            // actually receive all the data read from disk over the network.\n             LogPrint(\"net\", \"Peer %d sent us a getblocktxn for a block > %i deep\", pfrom->id, MAX_BLOCKTXN_DEPTH);\n+            CInv vInv;\n+            vInv.type = State(pfrom->GetId())->fWantsCmpctWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK;\n+            vInv.hash = req.blockhash;\n+            pfrom->vRecvGetData.push_back(vInv);\n+            ProcessGetData(pfrom, chainparams.GetConsensus(), connman);\n             return true;\n         }\n "
      },
      {
        "sha": "21829b6c25a380a8b49ac83a3c8515b68877e2e2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -343,7 +343,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n /** Transaction validation functions */\n \n /** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n+bool CheckTransaction(const CTransaction& tx, CValidationState& state, bool fCheckDuplicateInputs=true);\n \n namespace Consensus {\n "
      },
      {
        "sha": "17c33194a95b13577ff745b86cd7715faf1e6c50",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -85,7 +85,7 @@ class CPartialMerkleTree\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(nTransactions);\n         READWRITE(vHash);\n         std::vector<unsigned char> vBytes;\n@@ -148,7 +148,7 @@ class CMerkleBlock\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(header);\n         READWRITE(txn);\n     }"
      },
      {
        "sha": "15c4514f152ac1d5966269afa20f29a67697bd3d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -985,6 +985,12 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         return;\n     }\n \n+    if (!fNetworkActive) {\n+        LogPrintf(\"connection from %s dropped: not accepting new connections\\n\", addr.ToString());\n+        CloseSocket(hSocket);\n+        return;\n+    }\n+\n     if (!IsSelectableSocket(hSocket))\n     {\n         LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n@@ -1784,6 +1790,9 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     // Initiate outbound network connection\n     //\n     boost::this_thread::interruption_point();\n+    if (!fNetworkActive) {\n+        return false;\n+    }\n     if (!pszDest) {\n         if (IsLocal(addrConnect) ||\n             FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n@@ -2025,8 +2034,30 @@ void Discover(boost::thread_group& threadGroup)\n #endif\n }\n \n+void CConnman::SetNetworkActive(bool active)\n+{\n+    if (fDebug) {\n+        LogPrint(\"net\", \"SetNetworkActive: %s\\n\", active);\n+    }\n+\n+    if (!active) {\n+        fNetworkActive = false;\n+\n+        LOCK(cs_vNodes);\n+        // Close sockets to all nodes\n+        BOOST_FOREACH(CNode* pnode, vNodes) {\n+            pnode->CloseSocketDisconnect();\n+        }\n+    } else {\n+        fNetworkActive = true;\n+    }\n+\n+    uiInterface.NotifyNetworkActiveChanged(fNetworkActive);\n+}\n+\n CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSeed1(nSeed1In)\n {\n+    fNetworkActive = true;\n     setBannedIsDirty = false;\n     fAddressesInitialized = false;\n     nLastNodeId = 0;"
      },
      {
        "sha": "e2d88b478de64665e60a7a1b8be3e004070fd276",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -131,6 +131,8 @@ class CConnman\n     bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError, Options options);\n     void Stop();\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n+    bool GetNetworkActive() const { return fNetworkActive; };\n+    void SetNetworkActive(bool active);\n     bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n@@ -140,7 +142,7 @@ class CConnman\n     void PushMessageWithVersionAndFlag(CNode* pnode, int nVersion, int flag, const std::string& sCommand, Args&&... args)\n     {\n         auto msg(BeginMessage(pnode, nVersion, flag, sCommand));\n-        ::SerializeMany(msg, msg.nType, msg.nVersion, std::forward<Args>(args)...);\n+        ::SerializeMany(msg, std::forward<Args>(args)...);\n         EndMessage(msg);\n         PushMessage(pnode, msg, sCommand);\n     }\n@@ -401,6 +403,7 @@ class CConnman\n     unsigned int nReceiveFloodSize;\n \n     std::vector<ListenSocket> vhListenSocket;\n+    bool fNetworkActive;\n     banmap_t setBanned;\n     CCriticalSection cs_setBanned;\n     bool setBannedIsDirty;"
      },
      {
        "sha": "9dffaa57e7a6a9ea46133e5dfefb0fdced7506fe",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -85,7 +85,7 @@ class CNetAddr\n         ADD_SERIALIZE_METHODS;\n \n         template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(FLATDATA(ip));\n         }\n \n@@ -122,7 +122,7 @@ class CSubNet\n         ADD_SERIALIZE_METHODS;\n \n         template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(network);\n             READWRITE(FLATDATA(netmask));\n             READWRITE(FLATDATA(valid));\n@@ -159,7 +159,7 @@ class CService : public CNetAddr\n         ADD_SERIALIZE_METHODS;\n \n         template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(FLATDATA(ip));\n             unsigned short portN = htons(port);\n             READWRITE(FLATDATA(portN));"
      },
      {
        "sha": "ea4c70e6167afe4d6dd7c839a3933b6b8a17b830",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -174,7 +174,6 @@ static const double DEFAULT_DECAY = .998;\n \n /** Require greater than 95% of X feerate transactions to be confirmed within Y blocks for X to be big enough */\n static const double MIN_SUCCESS_PCT = .95;\n-static const double UNLIKELY_PCT = .5;\n \n /** Require an avg of 1 tx in the combined feerate bucket per block to have stat significance */\n static const double SUFFICIENT_FEETXS = 1;"
      },
      {
        "sha": "d148aec1e038972b1bc1af475f90920c811d1dc6",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -36,7 +36,7 @@ class CBlockHeader\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(this->nVersion);\n         READWRITE(hashPrevBlock);\n         READWRITE(hashMerkleRoot);\n@@ -92,7 +92,7 @@ class CBlock : public CBlockHeader\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(*(CBlockHeader*)this);\n         READWRITE(vtx);\n     }\n@@ -137,8 +137,9 @@ struct CBlockLocator\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vHave);\n     }"
      },
      {
        "sha": "784ff5c16795f653d05c1515b42222329b86cefe",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -28,7 +28,7 @@ class COutPoint\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(hash);\n         READWRITE(n);\n     }\n@@ -104,7 +104,7 @@ class CTxIn\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(prevout);\n         READWRITE(*(CScriptBase*)(&scriptSig));\n         READWRITE(nSequence);\n@@ -144,7 +144,7 @@ class CTxOut\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(nValue);\n         READWRITE(*(CScriptBase*)(&scriptPubKey));\n     }\n@@ -177,7 +177,7 @@ class CTxOut\n         if (scriptPubKey.IsUnspendable())\n             return 0;\n \n-        size_t nSize = GetSerializeSize(SER_DISK, 0);\n+        size_t nSize = GetSerializeSize(*this, SER_DISK, 0);\n         int witnessversion = 0;\n         std::vector<unsigned char> witnessprogram;\n \n@@ -224,7 +224,7 @@ class CTxInWitness\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(scriptWitness.stack);\n     }\n@@ -260,7 +260,7 @@ class CTxWitness\n     }\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         for (size_t n = 0; n < vtxinwit.size(); n++) {\n             READWRITE(vtxinwit[n]);\n@@ -292,8 +292,8 @@ struct CMutableTransaction;\n  * - uint32_t nLockTime\n  */\n template<typename Stream, typename Operation, typename TxType>\n-inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n-    const bool fAllowWitness = !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS);\n+inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action) {\n+    const bool fAllowWitness = !(s.GetVersion() & SERIALIZE_TRANSACTION_NO_WITNESS);\n \n     READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n     unsigned char flags = 0;\n@@ -390,8 +390,8 @@ class CTransaction\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        SerializeTransaction(*this, s, ser_action);\n         if (ser_action.ForRead()) {\n             UpdateHash();\n         }\n@@ -471,8 +471,8 @@ struct CMutableTransaction\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        SerializeTransaction(*this, s, ser_action);\n     }\n \n     /** Compute the hash of this CMutableTransaction. This is computed on the"
      },
      {
        "sha": "87d6e06848c1cde708b46b2e9337191e0fadb97d",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -181,7 +181,11 @@ std::string CInv::GetCommand() const\n \n std::string CInv::ToString() const\n {\n-    return strprintf(\"%s %s\", GetCommand(), hash.ToString());\n+    try {\n+        return strprintf(\"%s %s\", GetCommand(), hash.ToString());\n+    } catch(const std::out_of_range &) {\n+        return strprintf(\"0x%08x %s\", type, hash.ToString());\n+    }\n }\n \n const std::vector<std::string> &getAllNetMessageTypes()"
      },
      {
        "sha": "a52d9a67b0e4b6c167f2e2158806bd1405fd05b8",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -48,7 +48,7 @@ class CMessageHeader\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(FLATDATA(pchMessageStart));\n         READWRITE(FLATDATA(pchCommand));\n@@ -289,14 +289,15 @@ class CAddress : public CService\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         if (ser_action.ForRead())\n             Init();\n-        if (nType & SER_DISK)\n+        int nVersion = s.GetVersion();\n+        if (s.GetType() & SER_DISK)\n             READWRITE(nVersion);\n-        if ((nType & SER_DISK) ||\n-            (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n+        if ((s.GetType() & SER_DISK) ||\n+            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH)))\n             READWRITE(nTime);\n         uint64_t nServicesInt = nServices;\n         READWRITE(nServicesInt);\n@@ -343,7 +344,7 @@ class CInv\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(type);\n         READWRITE(hash);"
      },
      {
        "sha": "9499862210ae5e4402efd7dbdf745e3c56cd748a",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -116,19 +116,15 @@ class CPubKey\n     }\n \n     //! Implement serialization, as if this was a byte vector.\n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n-    {\n-        return size() + 1;\n-    }\n     template <typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s) const\n     {\n         unsigned int len = size();\n         ::WriteCompactSize(s, len);\n         s.write((char*)vch, len);\n     }\n     template <typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n+    void Unserialize(Stream& s)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n         if (len <= 65) {\n@@ -214,12 +210,13 @@ struct CExtPubKey {\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    void Serialize(CSizeComputer& s) const\n     {\n-        return BIP32_EXTKEY_SIZE+1; //add one byte for the size (compact int)\n+        // Optimized implementation for ::GetSerializeSize that avoids copying.\n+        s.seek(BIP32_EXTKEY_SIZE + 1); // add one byte for the size (compact int)\n     }\n     template <typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s) const\n     {\n         unsigned int len = BIP32_EXTKEY_SIZE;\n         ::WriteCompactSize(s, len);\n@@ -228,7 +225,7 @@ struct CExtPubKey {\n         s.write((const char *)&code[0], len);\n     }\n     template <typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n+    void Unserialize(Stream& s)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n         unsigned char code[BIP32_EXTKEY_SIZE];"
      },
      {
        "sha": "451d391237fdad09a50380cc186203128409a501",
        "filename": "src/qt/bitcoin.qrc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/bitcoin.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/bitcoin.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.qrc?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -52,6 +52,7 @@\n         <file alias=\"transaction_abandoned\">res/icons/transaction_abandoned.png</file>\n         <file alias=\"hd_enabled\">res/icons/hd_enabled.png</file>\n         <file alias=\"hd_disabled\">res/icons/hd_disabled.png</file>\n+        <file alias=\"network_disabled\">res/icons/network_disabled.png</file>\n     </qresource>\n     <qresource prefix=\"/movies\">\n         <file alias=\"spinner-000\">res/movies/spinner-000.png</file>"
      },
      {
        "sha": "b2c9a704ed30fae9acf9b2205659d83f2aaaf113",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 7,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -86,7 +86,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *\n     unitDisplayControl(0),\n     labelWalletEncryptionIcon(0),\n     labelWalletHDStatusIcon(0),\n-    labelConnectionsIcon(0),\n+    connectionsControl(0),\n     labelBlocksIcon(0),\n     progressBarLabel(0),\n     progressBar(0),\n@@ -199,7 +199,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *\n     unitDisplayControl = new UnitDisplayStatusBarControl(platformStyle);\n     labelWalletEncryptionIcon = new QLabel();\n     labelWalletHDStatusIcon = new QLabel();\n-    labelConnectionsIcon = new QLabel();\n+    connectionsControl = new NetworkToggleStatusBarControl();\n     labelBlocksIcon = new QLabel();\n     if(enableWallet)\n     {\n@@ -210,7 +210,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *\n         frameBlocksLayout->addWidget(labelWalletHDStatusIcon);\n     }\n     frameBlocksLayout->addStretch();\n-    frameBlocksLayout->addWidget(labelConnectionsIcon);\n+    frameBlocksLayout->addWidget(connectionsControl);\n     frameBlocksLayout->addStretch();\n     frameBlocksLayout->addWidget(labelBlocksIcon);\n     frameBlocksLayout->addStretch();\n@@ -469,8 +469,9 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n         createTrayIconMenu();\n \n         // Keep up to date with client\n-        setNumConnections(_clientModel->getNumConnections());\n+        updateNetworkState();\n         connect(_clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n+        connect(_clientModel, SIGNAL(networkActiveChanged(bool)), this, SLOT(setNetworkActive(bool)));\n \n         setNumBlocks(_clientModel->getNumBlocks(), _clientModel->getLastBlockDate(), _clientModel->getVerificationProgress(NULL), false);\n         connect(_clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double,bool)), this, SLOT(setNumBlocks(int,QDateTime,double,bool)));\n@@ -489,6 +490,7 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n         }\n #endif // ENABLE_WALLET\n         unitDisplayControl->setOptionsModel(_clientModel->getOptionsModel());\n+        connectionsControl->setClientModel(_clientModel);\n         \n         OptionsModel* optionsModel = _clientModel->getOptionsModel();\n         if(optionsModel)\n@@ -698,8 +700,9 @@ void BitcoinGUI::gotoVerifyMessageTab(QString addr)\n }\n #endif // ENABLE_WALLET\n \n-void BitcoinGUI::setNumConnections(int count)\n+void BitcoinGUI::updateNetworkState()\n {\n+    int count = clientModel->getNumConnections();\n     QString icon;\n     switch(count)\n     {\n@@ -709,8 +712,25 @@ void BitcoinGUI::setNumConnections(int count)\n     case 7: case 8: case 9: icon = \":/icons/connect_3\"; break;\n     default: icon = \":/icons/connect_4\"; break;\n     }\n-    labelConnectionsIcon->setPixmap(platformStyle->SingleColorIcon(icon).pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n-    labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n+\n+    if (clientModel->getNetworkActive()) {\n+        connectionsControl->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n+    } else {\n+        connectionsControl->setToolTip(tr(\"Network activity disabled\"));\n+        icon = \":/icons/network_disabled\";\n+    }\n+\n+    connectionsControl->setPixmap(platformStyle->SingleColorIcon(icon).pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+}\n+\n+void BitcoinGUI::setNumConnections(int count)\n+{\n+    updateNetworkState();\n+}\n+\n+void BitcoinGUI::setNetworkActive(bool networkActive)\n+{\n+    updateNetworkState();\n }\n \n void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool header)\n@@ -1211,3 +1231,18 @@ void UnitDisplayStatusBarControl::onMenuSelection(QAction* action)\n         optionsModel->setDisplayUnit(action->data());\n     }\n }\n+\n+void NetworkToggleStatusBarControl::mousePressEvent(QMouseEvent *event)\n+{\n+    if (clientModel) {\n+        clientModel->setNetworkActive(!clientModel->getNetworkActive());\n+    }\n+}\n+\n+/** Lets the control know about the Client Model */\n+void NetworkToggleStatusBarControl::setClientModel(ClientModel *_clientModel)\n+{\n+    if (_clientModel) {\n+        this->clientModel = _clientModel;\n+    }\n+}"
      },
      {
        "sha": "1b02e77fc4eb5810abe4e412328e77c6404548ab",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -26,6 +26,7 @@ class PlatformStyle;\n class RPCConsole;\n class SendCoinsRecipient;\n class UnitDisplayStatusBarControl;\n+class NetworkToggleStatusBarControl;\n class WalletFrame;\n class WalletModel;\n class HelpMessageDialog;\n@@ -85,7 +86,7 @@ class BitcoinGUI : public QMainWindow\n     UnitDisplayStatusBarControl *unitDisplayControl;\n     QLabel *labelWalletEncryptionIcon;\n     QLabel *labelWalletHDStatusIcon;\n-    QLabel *labelConnectionsIcon;\n+    NetworkToggleStatusBarControl *connectionsControl;\n     QLabel *labelBlocksIcon;\n     QLabel *progressBarLabel;\n     QProgressBar *progressBar;\n@@ -146,13 +147,18 @@ class BitcoinGUI : public QMainWindow\n     /** Disconnect core signals from GUI client */\n     void unsubscribeFromCoreSignals();\n \n+    /** Update UI with latest network info from model. */\n+    void updateNetworkState();\n+\n Q_SIGNALS:\n     /** Signal raised when a URI was entered or dragged to the GUI */\n     void receivedURI(const QString &uri);\n \n public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n+    /** Set network state shown in the UI */\n+    void setNetworkActive(bool networkActive);\n     /** Set number of blocks and last block date shown in the UI */\n     void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers);\n \n@@ -264,4 +270,17 @@ private Q_SLOTS:\n     void onMenuSelection(QAction* action);\n };\n \n+class NetworkToggleStatusBarControl : public QLabel\n+{\n+    Q_OBJECT\n+    \n+public:\n+    void setClientModel(ClientModel *clientModel);\n+protected:\n+    void mousePressEvent(QMouseEvent *event);\n+    \n+private:\n+    ClientModel *clientModel;\n+};\n+\n #endif // BITCOIN_QT_BITCOINGUI_H"
      },
      {
        "sha": "a4bb2f77fe024f5daa975978d84a588fa8556487",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -145,6 +145,11 @@ void ClientModel::updateNumConnections(int numConnections)\n     Q_EMIT numConnectionsChanged(numConnections);\n }\n \n+void ClientModel::updateNetworkActive(bool networkActive)\n+{\n+    Q_EMIT networkActiveChanged(networkActive);\n+}\n+\n void ClientModel::updateAlert()\n {\n     Q_EMIT alertsChanged(getStatusBarWarnings());\n@@ -167,6 +172,21 @@ enum BlockSource ClientModel::getBlockSource() const\n     return BLOCK_SOURCE_NONE;\n }\n \n+void ClientModel::setNetworkActive(bool active)\n+{\n+    if (g_connman) {\n+         g_connman->SetNetworkActive(active);\n+    }\n+}\n+\n+bool ClientModel::getNetworkActive() const\n+{\n+    if (g_connman) {\n+        return g_connman->GetNetworkActive();\n+    }\n+    return false;\n+}\n+\n QString ClientModel::getStatusBarWarnings() const\n {\n     return QString::fromStdString(GetWarnings(\"gui\"));\n@@ -233,6 +253,12 @@ static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConn\n                               Q_ARG(int, newNumConnections));\n }\n \n+static void NotifyNetworkActiveChanged(ClientModel *clientmodel, bool networkActive)\n+{\n+    QMetaObject::invokeMethod(clientmodel, \"updateNetworkActive\", Qt::QueuedConnection,\n+                              Q_ARG(bool, networkActive));\n+}\n+\n static void NotifyAlertChanged(ClientModel *clientmodel)\n {\n     qDebug() << \"NotifyAlertChanged\";\n@@ -273,6 +299,7 @@ void ClientModel::subscribeToCoreSignals()\n     // Connect signals to client\n     uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n     uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n+    uiInterface.NotifyNetworkActiveChanged.connect(boost::bind(NotifyNetworkActiveChanged, this, _1));\n     uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this));\n     uiInterface.BannedListChanged.connect(boost::bind(BannedListChanged, this));\n     uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2, false));\n@@ -284,6 +311,7 @@ void ClientModel::unsubscribeFromCoreSignals()\n     // Disconnect signals from client\n     uiInterface.ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n     uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n+    uiInterface.NotifyNetworkActiveChanged.disconnect(boost::bind(NotifyNetworkActiveChanged, this, _1));\n     uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this));\n     uiInterface.BannedListChanged.disconnect(boost::bind(BannedListChanged, this));\n     uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2, false));"
      },
      {
        "sha": "a64140142549808bfaeb550ea0eefc7613852b8a",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -68,6 +68,10 @@ class ClientModel : public QObject\n     bool inInitialBlockDownload() const;\n     //! Return true if core is importing blocks\n     enum BlockSource getBlockSource() const;\n+    //! Return true if network activity in core is enabled\n+    bool getNetworkActive() const;\n+    //! Toggle network activity state in core\n+    void setNetworkActive(bool active);\n     //! Return warnings to be displayed in status bar\n     QString getStatusBarWarnings() const;\n \n@@ -91,6 +95,7 @@ class ClientModel : public QObject\n     void numConnectionsChanged(int count);\n     void numBlocksChanged(int count, const QDateTime& blockDate, double nVerificationProgress, bool header);\n     void mempoolSizeChanged(long count, size_t mempoolSizeInBytes);\n+    void networkActiveChanged(bool networkActive);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);\n \n@@ -103,6 +108,7 @@ class ClientModel : public QObject\n public Q_SLOTS:\n     void updateTimer();\n     void updateNumConnections(int numConnections);\n+    void updateNetworkActive(bool networkActive);\n     void updateAlert();\n     void updateBanlist();\n };"
      },
      {
        "sha": "9dc75c2e1a25eb346032a6925f8ea9c90da1660a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -291,17 +291,11 @@ void copyEntryData(QAbstractItemView *view, int column, int role)\n     }\n }\n \n-QVariant getEntryData(QAbstractItemView *view, int column, int role)\n+QList<QModelIndex> getEntryData(QAbstractItemView *view, int column)\n {\n     if(!view || !view->selectionModel())\n-        return QVariant();\n-    QModelIndexList selection = view->selectionModel()->selectedRows(column);\n-\n-    if(!selection.isEmpty()) {\n-        // Return first item\n-        return (selection.at(0).data(role));\n-    }\n-    return QVariant();\n+        return QList<QModelIndex>();\n+    return view->selectionModel()->selectedRows(column);\n }\n \n QString getSaveFileName(QWidget *parent, const QString &caption, const QString &dir,"
      },
      {
        "sha": "64cbd51eb6f395a6015323044a8019a7ccb6d22c",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -67,10 +67,9 @@ namespace GUIUtil\n     /** Return a field of the currently selected entry as a QString. Does nothing if nothing\n         is selected.\n        @param[in] column  Data column to extract from the model\n-       @param[in] role    Data role to extract from the model\n        @see  TransactionView::copyLabel, TransactionView::copyAmount, TransactionView::copyAddress\n      */\n-    QVariant getEntryData(QAbstractItemView *view, int column, int role);\n+    QList<QModelIndex> getEntryData(QAbstractItemView *view, int column);\n \n     void setClipboard(const QString& str);\n "
      },
      {
        "sha": "8ee2c9cbac3092dc81145715c890df833fa3275c",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -27,7 +27,7 @@ class RecentRequestEntry\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         unsigned int nDate = date.toTime_t();\n \n         READWRITE(this->nVersion);"
      },
      {
        "sha": "49f728693d8c0fc5d63c4911b84f431961631434",
        "filename": "src/qt/res/icons/network_disabled.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/res/icons/network_disabled.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/res/icons/network_disabled.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/network_disabled.png?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0"
      },
      {
        "sha": "e95a5eb5bbd30b0ef038764bf8d961df1059e465",
        "filename": "src/qt/res/src/network_disabled.svg",
        "status": "added",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/res/src/network_disabled.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/res/src/network_disabled.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/network_disabled.svg?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -0,0 +1,68 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   id=\"svg2\"\n+   viewBox=\"0 0 24 24\"\n+   height=\"24\"\n+   width=\"24\"\n+   version=\"1.2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4142\"\n+     transform=\"matrix(0,-1,-1,0,23.96,24)\">\n+    <g\n+       id=\"g4210\"\n+       transform=\"matrix(-1,0,0,1,59.86,-106.6)\">\n+      <g\n+         id=\"g4289\"\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+        <g\n+           id=\"g4291\">\n+          <path\n+             id=\"path4293\"\n+             d=\"m -65.35,116.3 0,3 0.5,0 c 0.54,0 1,0.5 1,1 l 0,2.6 c -1.15,0.5 -2,1.6 -2,3 0,2 1.59,3.5 3.5,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-2.3 -1.81,-4 -4,-4 z m 1,1.2 c 1.39,0.3 2.5,1.3 2.5,2.8 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.5,-1.1 -2.5,-2.5 0,-1.1 0.69,-2 1.66,-2.3 l 0.34,-0.1 0,-3.2 c 0,-0.9 -0.67,-1.5 -1.5,-1.8 z\"\n+             style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+          <g\n+             style=\"fill:#969696;fill-opacity:1\"\n+             id=\"g4295\">\n+            <path\n+               id=\"path4297\"\n+               d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+            <path\n+               id=\"path4299\"\n+               d=\"m -57.35,106.1 c -1.93,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,0.5 -0.45,1 -1,1 l -4.85,0 3.17,3 1.68,0 c 2.21,0 4,-1.8 4,-4 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.56,-3.5 -3.5,-3.5 z m 0,1 c 1.38,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,1.6 -1.35,3 -3,3 l -1.81,0 -2.04,-1 3.85,0 c 1.11,0 2,-0.9 2,-2 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.13,-2.5 2.5,-2.5 z\"\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+          </g>\n+          <path\n+             id=\"path4301\"\n+             d=\"m -69.84,116.3 c -2.19,0 -4,1.7 -4,4 l 0,2.6 c -1.14,0.6 -1.99,1.6 -1.99,3 0,2 1.6,3.5 3.51,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-0.5 0.45,-1 1,-1 l 5.01,0 -3.36,-3 z m 0,1 1.84,0 2.19,1 -4.01,0 c -1.11,0 -2,0.9 -2,2 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.51,-1.1 -2.51,-2.5 0,-1.1 0.7,-2 1.66,-2.3 l 0.33,-0.1 0,-0.4 0,-2.8 c 0,-1.7 1.33,-3 3,-3 z\"\n+             style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+        </g>\n+      </g>\n+    </g>\n+    <path\n+       id=\"path4165\"\n+       d=\"m 12,8.77 c -0.84,0 -1.66,0.341 -2.254,0.937 -0.599,0.593 -0.942,1.403 -0.945,2.253 0,0.85 0.337,1.67 0.933,2.26 a 0.6001,0.6001 0 0 0 0,0 c 0.594,0.6 1.424,0.94 2.264,0.94 0.84,0 1.67,-0.34 2.26,-0.94 0.6,-0.59 0.94,-1.41 0.94,-2.26 0,-0.84 -0.34,-1.66 -0.95,-2.253 C 13.66,9.111 12.84,8.77 12,8.77 Z\"\n+       style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+  </g>\n+  <path d=\"M 3,3 l 18,18\" style=\"stroke-width: 3; stroke: #000000; stroke-linecap: round;\" />\n+  <path d=\"M 21,3 l -18,18\" style=\"stroke-width: 3; stroke: #000000; stroke-linecap: round;\" />\n+</svg>"
      },
      {
        "sha": "47af6a5724858f1240db0544e80516b0f79f0a53",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 48,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -343,7 +343,6 @@ RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n     ui(new Ui::RPCConsole),\n     clientModel(0),\n     historyPtr(0),\n-    cachedNodeid(-1),\n     platformStyle(_platformStyle),\n     peersTableContextMenu(0),\n     banTableContextMenu(0),\n@@ -459,6 +458,9 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumBlocks(model->getNumBlocks(), model->getLastBlockDate(), model->getVerificationProgress(NULL), false);\n         connect(model, SIGNAL(numBlocksChanged(int,QDateTime,double,bool)), this, SLOT(setNumBlocks(int,QDateTime,double,bool)));\n \n+        updateNetworkState();\n+        connect(model, SIGNAL(networkActiveChanged(bool)), this, SLOT(setNetworkActive(bool)));\n+\n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n \n@@ -469,19 +471,19 @@ void RPCConsole::setClientModel(ClientModel *model)\n         ui->peerWidget->verticalHeader()->hide();\n         ui->peerWidget->setEditTriggers(QAbstractItemView::NoEditTriggers);\n         ui->peerWidget->setSelectionBehavior(QAbstractItemView::SelectRows);\n-        ui->peerWidget->setSelectionMode(QAbstractItemView::SingleSelection);\n+        ui->peerWidget->setSelectionMode(QAbstractItemView::ExtendedSelection);\n         ui->peerWidget->setContextMenuPolicy(Qt::CustomContextMenu);\n         ui->peerWidget->setColumnWidth(PeerTableModel::Address, ADDRESS_COLUMN_WIDTH);\n         ui->peerWidget->setColumnWidth(PeerTableModel::Subversion, SUBVERSION_COLUMN_WIDTH);\n         ui->peerWidget->setColumnWidth(PeerTableModel::Ping, PING_COLUMN_WIDTH);\n         ui->peerWidget->horizontalHeader()->setStretchLastSection(true);\n \n         // create peer table context menu actions\n-        QAction* disconnectAction = new QAction(tr(\"&Disconnect Node\"), this);\n-        QAction* banAction1h      = new QAction(tr(\"Ban Node for\") + \" \" + tr(\"1 &hour\"), this);\n-        QAction* banAction24h     = new QAction(tr(\"Ban Node for\") + \" \" + tr(\"1 &day\"), this);\n-        QAction* banAction7d      = new QAction(tr(\"Ban Node for\") + \" \" + tr(\"1 &week\"), this);\n-        QAction* banAction365d    = new QAction(tr(\"Ban Node for\") + \" \" + tr(\"1 &year\"), this);\n+        QAction* disconnectAction = new QAction(tr(\"&Disconnect\"), this);\n+        QAction* banAction1h      = new QAction(tr(\"Ban for\") + \" \" + tr(\"1 &hour\"), this);\n+        QAction* banAction24h     = new QAction(tr(\"Ban for\") + \" \" + tr(\"1 &day\"), this);\n+        QAction* banAction7d      = new QAction(tr(\"Ban for\") + \" \" + tr(\"1 &week\"), this);\n+        QAction* banAction365d    = new QAction(tr(\"Ban for\") + \" \" + tr(\"1 &year\"), this);\n \n         // create peer table context menu\n         peersTableContextMenu = new QMenu();\n@@ -514,7 +516,9 @@ void RPCConsole::setClientModel(ClientModel *model)\n             this, SLOT(peerSelected(const QItemSelection &, const QItemSelection &)));\n         // peer table signal handling - update peer details when new nodes are added to the model\n         connect(model->getPeerTableModel(), SIGNAL(layoutChanged()), this, SLOT(peerLayoutChanged()));\n-\n+        // peer table signal handling - cache selected node ids\n+        connect(model->getPeerTableModel(), SIGNAL(layoutAboutToChange()), this, SLOT(peerLayoutAboutToChange()));\n+        \n         // set up ban table\n         ui->banlistWidget->setModel(model->getBanTableModel());\n         ui->banlistWidget->verticalHeader()->hide();\n@@ -527,7 +531,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n         ui->banlistWidget->horizontalHeader()->setStretchLastSection(true);\n \n         // create ban table context menu action\n-        QAction* unbanAction = new QAction(tr(\"&Unban Node\"), this);\n+        QAction* unbanAction = new QAction(tr(\"&Unban\"), this);\n \n         // create ban table context menu\n         banTableContextMenu = new QMenu();\n@@ -673,16 +677,30 @@ void RPCConsole::message(int category, const QString &message, bool html)\n     ui->messagesWidget->append(out);\n }\n \n+void RPCConsole::updateNetworkState()\n+{\n+    QString connections = QString::number(clientModel->getNumConnections()) + \" (\";\n+    connections += tr(\"In:\") + \" \" + QString::number(clientModel->getNumConnections(CONNECTIONS_IN)) + \" / \";\n+    connections += tr(\"Out:\") + \" \" + QString::number(clientModel->getNumConnections(CONNECTIONS_OUT)) + \")\";\n+\n+    if(!clientModel->getNetworkActive()) {\n+        connections += \" (\" + tr(\"Network activity disabled\") + \")\";\n+    }\n+\n+    ui->numberOfConnections->setText(connections);\n+}\n+\n void RPCConsole::setNumConnections(int count)\n {\n     if (!clientModel)\n         return;\n \n-    QString connections = QString::number(count) + \" (\";\n-    connections += tr(\"In:\") + \" \" + QString::number(clientModel->getNumConnections(CONNECTIONS_IN)) + \" / \";\n-    connections += tr(\"Out:\") + \" \" + QString::number(clientModel->getNumConnections(CONNECTIONS_OUT)) + \")\";\n+    updateNetworkState();\n+}\n \n-    ui->numberOfConnections->setText(connections);\n+void RPCConsole::setNetworkActive(bool networkActive)\n+{\n+    updateNetworkState();\n }\n \n void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers)\n@@ -825,6 +843,17 @@ void RPCConsole::peerSelected(const QItemSelection &selected, const QItemSelecti\n         updateNodeDetail(stats);\n }\n \n+void RPCConsole::peerLayoutAboutToChange()\n+{\n+    QModelIndexList selected = ui->peerWidget->selectionModel()->selectedIndexes();\n+    cachedNodeids.clear();\n+    for(int i = 0; i < selected.size(); i++)\n+    {\n+        const CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(selected.at(i).row());\n+        cachedNodeids.append(stats->nodeStats.nodeid);\n+    }\n+}\n+\n void RPCConsole::peerLayoutChanged()\n {\n     if (!clientModel || !clientModel->getPeerTableModel())\n@@ -834,7 +863,7 @@ void RPCConsole::peerLayoutChanged()\n     bool fUnselect = false;\n     bool fReselect = false;\n \n-    if (cachedNodeid == -1) // no node selected yet\n+    if (cachedNodeids.empty()) // no node selected yet\n         return;\n \n     // find the currently selected row\n@@ -846,7 +875,7 @@ void RPCConsole::peerLayoutChanged()\n \n     // check if our detail node has a row in the table (it may not necessarily\n     // be at selectedRow since its position can change after a layout change)\n-    int detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(cachedNodeid);\n+    int detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(cachedNodeids.first());\n \n     if (detailNodeRow < 0)\n     {\n@@ -872,7 +901,10 @@ void RPCConsole::peerLayoutChanged()\n \n     if (fReselect)\n     {\n-        ui->peerWidget->selectRow(detailNodeRow);\n+        for(int i = 0; i < cachedNodeids.size(); i++)\n+        {\n+            ui->peerWidget->selectRow(clientModel->getPeerTableModel()->getRowByNodeId(cachedNodeids.at(i)));\n+        }\n     }\n \n     if (stats)\n@@ -881,9 +913,6 @@ void RPCConsole::peerLayoutChanged()\n \n void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)\n {\n-    // Update cached nodeid\n-    cachedNodeid = stats->nodeStats.nodeid;\n-\n     // update the detail ui with latest node information\n     QString peerAddrDetails(QString::fromStdString(stats->nodeStats.addrName) + \" \");\n     peerAddrDetails += tr(\"(node id: %1)\").arg(QString::number(stats->nodeStats.nodeid));\n@@ -973,56 +1002,72 @@ void RPCConsole::disconnectSelectedNode()\n {\n     if(!g_connman)\n         return;\n-    // Get currently selected peer address\n-    NodeId id = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::NetNodeId).toInt();\n-    // Find the node, disconnect it and clear the selected node\n-    if(g_connman->DisconnectNode(id))\n-        clearSelectedNode();\n+    \n+    // Get selected peer addresses\n+    QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, 0);\n+    for(int i = 0; i < nodes.count(); i++)\n+    {\n+        // Get currently selected peer address\n+        NodeId id = nodes.at(i).data(PeerTableModel::NetNodeId).toInt();\n+        // Find the node, disconnect it and clear the selected node\n+        if(g_connman->DisconnectNode(id))\n+            clearSelectedNode();\n+    }\n }\n \n void RPCConsole::banSelectedNode(int bantime)\n {\n     if (!clientModel || !g_connman)\n         return;\n-\n-    if(cachedNodeid == -1)\n-        return;\n-\n-    // Get currently selected peer address\n-    int detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(cachedNodeid);\n-    if(detailNodeRow < 0)\n-        return;\n-\n-    // Find possible nodes, ban it and clear the selected node\n-    const CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n-    if(stats) {\n-        g_connman->Ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n-        clearSelectedNode();\n-        clientModel->getBanTableModel()->refresh();\n+    \n+    // Get selected peer addresses\n+    QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, 0);\n+    for(int i = 0; i < nodes.count(); i++)\n+    {\n+        // Get currently selected peer address\n+        NodeId id = nodes.at(i).data(PeerTableModel::NetNodeId).toInt();\n+\n+\t// Get currently selected peer address\n+\tint detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(id);\n+\tif(detailNodeRow < 0)\n+\t    return;\n+\n+\t// Find possible nodes, ban it and clear the selected node\n+\tconst CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n+\tif(stats) {\n+\t    g_connman->Ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n+\t}\n     }\n+    clearSelectedNode();\n+    clientModel->getBanTableModel()->refresh();\n }\n \n void RPCConsole::unbanSelectedNode()\n {\n     if (!clientModel)\n         return;\n \n-    // Get currently selected ban address\n-    QString strNode = GUIUtil::getEntryData(ui->banlistWidget, 0, BanTableModel::Address).toString();\n-    CSubNet possibleSubnet;\n-\n-    LookupSubNet(strNode.toStdString().c_str(), possibleSubnet);\n-    if (possibleSubnet.IsValid() && g_connman)\n+    // Get selected ban addresses\n+    QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->banlistWidget, 0);\n+    for(int i = 0; i < nodes.count(); i++)\n     {\n-        g_connman->Unban(possibleSubnet);\n-        clientModel->getBanTableModel()->refresh();\n+        // Get currently selected ban address\n+        QString strNode = nodes.at(i).data(BanTableModel::Address).toString();\n+        CSubNet possibleSubnet;\n+\n+        LookupSubNet(strNode.toStdString().c_str(), possibleSubnet);\n+        if (possibleSubnet.IsValid() && g_connman)\n+        {\n+            g_connman->Unban(possibleSubnet);\n+            clientModel->getBanTableModel()->refresh();\n+        }\n     }\n }\n \n void RPCConsole::clearSelectedNode()\n {\n     ui->peerWidget->selectionModel()->clearSelection();\n-    cachedNodeid = -1;\n+    cachedNodeids.clear();\n     ui->detailWidget->hide();\n     ui->peerHeading->setText(tr(\"Select a peer to view detailed information.\"));\n }\n@@ -1041,3 +1086,8 @@ void RPCConsole::setTabFocus(enum TabTypes tabType)\n {\n     ui->tabWidget->setCurrentIndex(tabType);\n }\n+\n+void RPCConsole::on_toggleNetworkActiveButton_clicked()\n+{\n+    clientModel->setNetworkActive(!clientModel->getNetworkActive());\n+}"
      },
      {
        "sha": "8c20379a8c02ad1c9f31f3bf4b87ef2eb6b775dc",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -61,6 +61,8 @@ class RPCConsole: public QWidget\n private Q_SLOTS:\n     void on_lineEdit_returnPressed();\n     void on_tabWidget_currentChanged(int index);\n+    /** toggle network activity */\n+    void on_toggleNetworkActiveButton_clicked();\n     /** open the debug.log from the current datadir */\n     void on_openDebugLogfileButton_clicked();\n     /** change the time range of the network traffic graph */\n@@ -88,6 +90,8 @@ public Q_SLOTS:\n     void message(int category, const QString &message, bool html = false);\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n+    /** Set network state shown in the UI */\n+    void setNetworkActive(bool networkActive);\n     /** Set number of blocks and last block date shown in the UI */\n     void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers);\n     /** Set size (number of transactions and memory usage) of the mempool in the UI */\n@@ -98,6 +102,8 @@ public Q_SLOTS:\n     void scrollToEnd();\n     /** Handle selection of peer in peers list */\n     void peerSelected(const QItemSelection &selected, const QItemSelection &deselected);\n+    /** Handle selection caching before update */\n+    void peerLayoutAboutToChange();\n     /** Handle updated peer information */\n     void peerLayoutChanged();\n     /** Disconnect a selected node on the Peers tab */\n@@ -135,13 +141,16 @@ public Q_SLOTS:\n     ClientModel *clientModel;\n     QStringList history;\n     int historyPtr;\n-    NodeId cachedNodeid;\n+    QList<NodeId> cachedNodeids;\n     const PlatformStyle *platformStyle;\n     RPCTimerInterface *rpcTimerInterface;\n     QMenu *peersTableContextMenu;\n     QMenu *banTableContextMenu;\n     int consoleFontSize;\n     QCompleter *autoCompleter;\n+\n+    /** Update UI with latest network info from model. */\n+    void updateNetworkState();\n };\n \n #endif // BITCOIN_QT_RPCCONSOLE_H"
      },
      {
        "sha": "eedf6e8cea712277f98b61d3a1f77dd9f7758ac5",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -65,7 +65,7 @@ class SendCoinsRecipient\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         std::string sAddress = address.toStdString();\n         std::string sLabel = label.toStdString();\n         std::string sMessage = message.toStdString();"
      },
      {
        "sha": "90cca6f48055d7b633ea33f1503ef853d01f2a52",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -50,7 +50,7 @@ struct CCoin {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(nTxVer);\n         READWRITE(nHeight);"
      },
      {
        "sha": "6c49f7dbdbc49177bb57c71533c37ac39dd3fad0",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -109,6 +109,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"prioritisetransaction\", 2 },\n     { \"setban\", 2 },\n     { \"setban\", 3 },\n+    { \"setnetworkactive\", 0 },\n     { \"getmempoolancestors\", 1 },\n     { \"getmempooldescendants\", 1 },\n     { \"getmanynulldatas\", 0 },"
      },
      {
        "sha": "f57ba76d3a86577a2dcce55833c1c14af86f0af1",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -331,7 +331,7 @@ UniValue getnettotals(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"totalbytesrecv\\\": n,   (numeric) Total bytes received\\n\"\n             \"  \\\"totalbytessent\\\": n,   (numeric) Total bytes sent\\n\"\n-            \"  \\\"timemillis\\\": t,       (numeric) Total cpu time\\n\"\n+            \"  \\\"timemillis\\\": t,       (numeric) Current UNIX time in milliseconds\\n\"\n             \"  \\\"uploadtarget\\\":\\n\"\n             \"  {\\n\"\n             \"    \\\"timeframe\\\": n,                         (numeric) Length of the measuring timeframe in seconds\\n\"\n@@ -401,6 +401,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n             \"  \\\"localrelay\\\": true|false,              (bool) true if transaction relay is requested from peers\\n\"\n             \"  \\\"timeoffset\\\": xxxxx,                   (numeric) the time offset\\n\"\n             \"  \\\"connections\\\": xxxxx,                  (numeric) the number of connections\\n\"\n+            \"  \\\"networkactive\\\": true|false,           (bool) whether p2p networking is enabled\\n\"\n             \"  \\\"networks\\\": [                          (array) information per network\\n\"\n             \"  {\\n\"\n             \"    \\\"name\\\": \\\"xxx\\\",                     (string) network (ipv4, ipv6 or onion)\\n\"\n@@ -435,8 +436,10 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n         obj.push_back(Pair(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices())));\n     obj.push_back(Pair(\"localrelay\",     fRelayTxes));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n-    if(g_connman)\n+    if (g_connman) {\n+        obj.push_back(Pair(\"networkactive\", g_connman->GetNetworkActive()));\n         obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n+    }\n     obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n     obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n     UniValue localAddresses(UniValue::VARR);\n@@ -571,6 +574,24 @@ UniValue clearbanned(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+UniValue setnetworkactive(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw runtime_error(\n+            \"setnetworkactive true|false\\n\"\n+            \"Disable/enable all p2p network activity.\"\n+        );\n+    }\n+\n+    if (!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    g_connman->SetNetworkActive(request.params[0].get_bool());\n+\n+    return g_connman->GetNetworkActive();\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n@@ -585,6 +606,7 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"setban\",                 &setban,                 true  },\n     { \"network\",            \"listbanned\",             &listbanned,             true  },\n     { \"network\",            \"clearbanned\",            &clearbanned,            true  },\n+    { \"network\",            \"setnetworkactive\",       &setnetworkactive,       true, },\n };\n \n void RegisterNetRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "069ac55bfba06db11f8db19543fd9636506aae8d",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -23,7 +23,7 @@ class TxInputStream\n     m_remaining(txToLen)\n     {}\n \n-    TxInputStream& read(char* pch, size_t nSize)\n+    void read(char* pch, size_t nSize)\n     {\n         if (nSize > m_remaining)\n             throw std::ios_base::failure(std::string(__func__) + \": end of data\");\n@@ -37,16 +37,17 @@ class TxInputStream\n         memcpy(pch, m_data, nSize);\n         m_remaining -= nSize;\n         m_data += nSize;\n-        return *this;\n     }\n \n     template<typename T>\n     TxInputStream& operator>>(T& obj)\n     {\n-        ::Unserialize(*this, obj, m_type, m_version);\n+        ::Unserialize(*this, obj);\n         return *this;\n     }\n \n+    int GetVersion() const { return m_version; }\n+    int GetType() const { return m_type; }\n private:\n     const int m_type;\n     const int m_version;\n@@ -88,7 +89,7 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n         stream >> tx;\n         if (nIn >= tx.vin.size())\n             return set_error(err, bitcoinconsensus_ERR_TX_INDEX);\n-        if (tx.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n+        if (GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) != txToLen)\n             return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n \n         // Regardless of the verification result, the tx did not error."
      },
      {
        "sha": "a6403f9363745e6479ab85061617a73fe07baf33",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -1069,7 +1069,7 @@ class CTransactionSignatureSerializer {\n \n     /** Serialize the passed scriptCode, skipping OP_CODESEPARATORs */\n     template<typename S>\n-    void SerializeScriptCode(S &s, int nType, int nVersion) const {\n+    void SerializeScriptCode(S &s) const {\n         CScript::const_iterator it = scriptCode.begin();\n         CScript::const_iterator itBegin = it;\n         opcodetype opcode;\n@@ -1092,53 +1092,53 @@ class CTransactionSignatureSerializer {\n \n     /** Serialize an input of txTo */\n     template<typename S>\n-    void SerializeInput(S &s, unsigned int nInput, int nType, int nVersion) const {\n+    void SerializeInput(S &s, unsigned int nInput) const {\n         // In case of SIGHASH_ANYONECANPAY, only the input being signed is serialized\n         if (fAnyoneCanPay)\n             nInput = nIn;\n         // Serialize the prevout\n-        ::Serialize(s, txTo.vin[nInput].prevout, nType, nVersion);\n+        ::Serialize(s, txTo.vin[nInput].prevout);\n         // Serialize the script\n         if (nInput != nIn)\n             // Blank out other inputs' signatures\n-            ::Serialize(s, CScriptBase(), nType, nVersion);\n+            ::Serialize(s, CScriptBase());\n         else\n-            SerializeScriptCode(s, nType, nVersion);\n+            SerializeScriptCode(s);\n         // Serialize the nSequence\n         if (nInput != nIn && (fHashSingle || fHashNone))\n             // let the others update at will\n-            ::Serialize(s, (int)0, nType, nVersion);\n+            ::Serialize(s, (int)0);\n         else\n-            ::Serialize(s, txTo.vin[nInput].nSequence, nType, nVersion);\n+            ::Serialize(s, txTo.vin[nInput].nSequence);\n     }\n \n     /** Serialize an output of txTo */\n     template<typename S>\n-    void SerializeOutput(S &s, unsigned int nOutput, int nType, int nVersion) const {\n+    void SerializeOutput(S &s, unsigned int nOutput) const {\n         if (fHashSingle && nOutput != nIn)\n             // Do not lock-in the txout payee at other indices as txin\n-            ::Serialize(s, CTxOut(), nType, nVersion);\n+            ::Serialize(s, CTxOut());\n         else\n-            ::Serialize(s, txTo.vout[nOutput], nType, nVersion);\n+            ::Serialize(s, txTo.vout[nOutput]);\n     }\n \n     /** Serialize txTo */\n     template<typename S>\n-    void Serialize(S &s, int nType, int nVersion) const {\n+    void Serialize(S &s) const {\n         // Serialize nVersion\n-        ::Serialize(s, txTo.nVersion, nType, nVersion);\n+        ::Serialize(s, txTo.nVersion);\n         // Serialize vin\n         unsigned int nInputs = fAnyoneCanPay ? 1 : txTo.vin.size();\n         ::WriteCompactSize(s, nInputs);\n         for (unsigned int nInput = 0; nInput < nInputs; nInput++)\n-             SerializeInput(s, nInput, nType, nVersion);\n+             SerializeInput(s, nInput);\n         // Serialize vout\n         unsigned int nOutputs = fHashNone ? 0 : (fHashSingle ? nIn+1 : txTo.vout.size());\n         ::WriteCompactSize(s, nOutputs);\n         for (unsigned int nOutput = 0; nOutput < nOutputs; nOutput++)\n-             SerializeOutput(s, nOutput, nType, nVersion);\n+             SerializeOutput(s, nOutput);\n         // Serialize nLockTime\n-        ::Serialize(s, txTo.nLockTime, nType, nVersion);\n+        ::Serialize(s, txTo.nLockTime);\n     }\n };\n "
      },
      {
        "sha": "91864e1b647c0b796d7ad69fdb3d966428061050",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 182,
        "deletions": 266,
        "changes": 448,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -151,6 +151,8 @@ inline float ser_uint32_to_float(uint32_t y)\n // i.e. anything that supports .read(char*, size_t) and .write(char*, size_t)\n //\n \n+class CSizeComputer;\n+\n enum\n {\n     // primary actions\n@@ -159,72 +161,51 @@ enum\n     SER_GETHASH         = (1 << 2),\n };\n \n-#define READWRITE(obj)      (::SerReadWrite(s, (obj), nType, nVersion, ser_action))\n-#define READWRITEMANY(...)      (::SerReadWriteMany(s, nType, nVersion, ser_action, __VA_ARGS__))\n+#define READWRITE(obj)      (::SerReadWrite(s, (obj), ser_action))\n+#define READWRITEMANY(...)      (::SerReadWriteMany(s, ser_action, __VA_ARGS__))\n \n /** \n  * Implement three methods for serializable objects. These are actually wrappers over\n  * \"SerializationOp\" template, which implements the body of each class' serialization\n  * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be\n  * added as members. \n  */\n-#define ADD_SERIALIZE_METHODS                                                          \\\n-    size_t GetSerializeSize(int nType, int nVersion) const {                         \\\n-        CSizeComputer s(nType, nVersion);                                            \\\n-        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);\\\n-        return s.size();                                                             \\\n-    }                                                                                \\\n-    template<typename Stream>                                                        \\\n-    void Serialize(Stream& s, int nType, int nVersion) const {                       \\\n-        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize(), nType, nVersion);\\\n-    }                                                                                \\\n-    template<typename Stream>                                                        \\\n-    void Unserialize(Stream& s, int nType, int nVersion) {                           \\\n-        SerializationOp(s, CSerActionUnserialize(), nType, nVersion);                \\\n+#define ADD_SERIALIZE_METHODS                                         \\\n+    template<typename Stream>                                         \\\n+    void Serialize(Stream& s) const {                                 \\\n+        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize());  \\\n+    }                                                                 \\\n+    template<typename Stream>                                         \\\n+    void Unserialize(Stream& s) {                                     \\\n+        SerializationOp(s, CSerActionUnserialize());                  \\\n     }\n \n-/*\n- * Basic Types\n- */\n-inline unsigned int GetSerializeSize(char a,      int, int=0) { return 1; }\n-inline unsigned int GetSerializeSize(int8_t a,    int, int=0) { return 1; }\n-inline unsigned int GetSerializeSize(uint8_t a,   int, int=0) { return 1; }\n-inline unsigned int GetSerializeSize(int16_t a,   int, int=0) { return 2; }\n-inline unsigned int GetSerializeSize(uint16_t a,  int, int=0) { return 2; }\n-inline unsigned int GetSerializeSize(int32_t a,   int, int=0) { return 4; }\n-inline unsigned int GetSerializeSize(uint32_t a,  int, int=0) { return 4; }\n-inline unsigned int GetSerializeSize(int64_t a,   int, int=0) { return 8; }\n-inline unsigned int GetSerializeSize(uint64_t a,  int, int=0) { return 8; }\n-inline unsigned int GetSerializeSize(float a,     int, int=0) { return 4; }\n-inline unsigned int GetSerializeSize(double a,    int, int=0) { return 8; }\n-\n-template<typename Stream> inline void Serialize(Stream& s, char a,         int, int=0) { ser_writedata8(s, a); } // TODO Get rid of bare char\n-template<typename Stream> inline void Serialize(Stream& s, int8_t a,       int, int=0) { ser_writedata8(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      int, int=0) { ser_writedata8(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, int16_t a,      int, int=0) { ser_writedata16(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint16_t a,     int, int=0) { ser_writedata16(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, int32_t a,      int, int=0) { ser_writedata32(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint32_t a,     int, int=0) { ser_writedata32(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, int64_t a,      int, int=0) { ser_writedata64(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint64_t a,     int, int=0) { ser_writedata64(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a,        int, int=0) { ser_writedata32(s, ser_float_to_uint32(a)); }\n-template<typename Stream> inline void Serialize(Stream& s, double a,       int, int=0) { ser_writedata64(s, ser_double_to_uint64(a)); }\n-\n-template<typename Stream> inline void Unserialize(Stream& s, char& a,      int, int=0) { a = ser_readdata8(s); } // TODO Get rid of bare char\n-template<typename Stream> inline void Unserialize(Stream& s, int8_t& a,    int, int=0) { a = ser_readdata8(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a,   int, int=0) { a = ser_readdata8(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, int16_t& a,   int, int=0) { a = ser_readdata16(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a,  int, int=0) { a = ser_readdata16(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, int32_t& a,   int, int=0) { a = ser_readdata32(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a,  int, int=0) { a = ser_readdata32(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,   int, int=0) { a = ser_readdata64(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  int, int=0) { a = ser_readdata64(s); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a,     int, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }\n-template<typename Stream> inline void Unserialize(Stream& s, double& a,    int, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }\n-\n-inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }\n-template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; ser_writedata8(s, f); }\n-template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f=ser_readdata8(s); a=f; }\n+template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } // TODO Get rid of bare char\n+template<typename Stream> inline void Serialize(Stream& s, int8_t a  ) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint8_t a ) { ser_writedata8(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int16_t a ) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint16_t a) { ser_writedata16(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int32_t a ) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint32_t a) { ser_writedata32(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, float a   ) { ser_writedata32(s, ser_float_to_uint32(a)); }\n+template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }\n+\n+template<typename Stream> inline void Unserialize(Stream& s, char& a    ) { a = ser_readdata8(s); } // TODO Get rid of bare char\n+template<typename Stream> inline void Unserialize(Stream& s, int8_t& a  ) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a ) { a = ser_readdata8(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int16_t& a ) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a) { a = ser_readdata16(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { a = ser_uint32_to_float(ser_readdata32(s)); }\n+template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }\n+\n+template<typename Stream> inline void Serialize(Stream& s, bool a)    { char f=a; ser_writedata8(s, f); }\n+template<typename Stream> inline void Unserialize(Stream& s, bool& a) { char f=ser_readdata8(s); a=f; }\n \n \n \n@@ -246,6 +227,8 @@ inline unsigned int GetSizeOfCompactSize(uint64_t nSize)\n     else                         return sizeof(unsigned char) + sizeof(uint64_t);\n }\n \n+inline void WriteCompactSize(CSizeComputer& os, uint64_t nSize);\n+\n template<typename Stream>\n void WriteCompactSize(Stream& os, uint64_t nSize)\n {\n@@ -340,6 +323,9 @@ inline unsigned int GetSizeOfVarInt(I n)\n     return nRet;\n }\n \n+template<typename I>\n+inline void WriteVarInt(CSizeComputer& os, I n);\n+\n template<typename Stream, typename I>\n void WriteVarInt(Stream& os, I n)\n {\n@@ -403,19 +389,14 @@ class CFlatData\n     char* end() { return pend; }\n     const char* end() const { return pend; }\n \n-    unsigned int GetSerializeSize(int, int=0) const\n-    {\n-        return pend - pbegin;\n-    }\n-\n     template<typename Stream>\n-    void Serialize(Stream& s, int, int=0) const\n+    void Serialize(Stream& s) const\n     {\n         s.write(pbegin, pend - pbegin);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int, int=0)\n+    void Unserialize(Stream& s)\n     {\n         s.read(pbegin, pend - pbegin);\n     }\n@@ -429,17 +410,13 @@ class CVarInt\n public:\n     CVarInt(I& nIn) : n(nIn) { }\n \n-    unsigned int GetSerializeSize(int, int) const {\n-        return GetSizeOfVarInt<I>(n);\n-    }\n-\n     template<typename Stream>\n-    void Serialize(Stream &s, int, int) const {\n+    void Serialize(Stream &s) const {\n         WriteVarInt<Stream,I>(s, n);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int, int) {\n+    void Unserialize(Stream& s) {\n         n = ReadVarInt<Stream,I>(s);\n     }\n };\n@@ -451,17 +428,13 @@ class CCompactSize\n public:\n     CCompactSize(uint64_t& nIn) : n(nIn) { }\n \n-    unsigned int GetSerializeSize(int, int) const {\n-        return GetSizeOfCompactSize(n);\n-    }\n-\n     template<typename Stream>\n-    void Serialize(Stream &s, int, int) const {\n+    void Serialize(Stream &s) const {\n         WriteCompactSize<Stream>(s, n);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int, int) {\n+    void Unserialize(Stream& s) {\n         n = ReadCompactSize<Stream>(s);\n     }\n };\n@@ -472,10 +445,10 @@ class LimitedString\n protected:\n     std::string& string;\n public:\n-    LimitedString(std::string& string) : string(string) {}\n+    LimitedString(std::string& _string) : string(_string) {}\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int, int=0)\n+    void Unserialize(Stream& s)\n     {\n         size_t size = ReadCompactSize(s);\n         if (size > Limit) {\n@@ -487,17 +460,12 @@ class LimitedString\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int, int=0) const\n+    void Serialize(Stream& s) const\n     {\n         WriteCompactSize(s, string.size());\n         if (!string.empty())\n             s.write((char*)&string[0], string.size());\n     }\n-\n-    unsigned int GetSerializeSize(int, int=0) const\n-    {\n-        return GetSizeOfCompactSize(string.size()) + string.size();\n-    }\n };\n \n template<typename I>\n@@ -510,85 +478,66 @@ CVarInt<I> WrapVarInt(I& n) { return CVarInt<I>(n); }\n /**\n  *  string\n  */\n-template<typename C> unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int=0);\n-template<typename Stream, typename C> void Serialize(Stream& os, const std::basic_string<C>& str, int, int=0);\n-template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str, int, int=0);\n+template<typename Stream, typename C> void Serialize(Stream& os, const std::basic_string<C>& str);\n+template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str);\n \n /**\n  * prevector\n  * prevectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n  */\n-template<unsigned int N, typename T> unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n-template<unsigned int N, typename T, typename V> unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const V&);\n-template<unsigned int N, typename T> inline unsigned int GetSerializeSize(const prevector<N, T>& v, int nType, int nVersion);\n-template<typename Stream, unsigned int N, typename T> void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n-template<typename Stream, unsigned int N, typename T, typename V> void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const V&);\n-template<typename Stream, unsigned int N, typename T> inline void Serialize(Stream& os, const prevector<N, T>& v, int nType, int nVersion);\n-template<typename Stream, unsigned int N, typename T> void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const unsigned char&);\n-template<typename Stream, unsigned int N, typename T, typename V> void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const V&);\n-template<typename Stream, unsigned int N, typename T> inline void Unserialize(Stream& is, prevector<N, T>& v, int nType, int nVersion);\n+template<typename Stream, unsigned int N, typename T> void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&);\n+template<typename Stream, unsigned int N, typename T, typename V> void Serialize_impl(Stream& os, const prevector<N, T>& v, const V&);\n+template<typename Stream, unsigned int N, typename T> inline void Serialize(Stream& os, const prevector<N, T>& v);\n+template<typename Stream, unsigned int N, typename T> void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&);\n+template<typename Stream, unsigned int N, typename T, typename V> void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&);\n+template<typename Stream, unsigned int N, typename T> inline void Unserialize(Stream& is, prevector<N, T>& v);\n \n /**\n  * vector\n  * vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n  */\n-template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n-template<typename T, typename A, typename V> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&);\n-template<typename T, typename A> inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion);\n-template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n-template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&);\n-template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion);\n-template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n-template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&);\n-template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion);\n+template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&);\n+template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v);\n+template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&);\n+template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v);\n \n /**\n  * pair\n  */\n-template<typename K, typename T> unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion);\n-template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion);\n-template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion);\n+template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item);\n+template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item);\n \n /**\n  * map\n  */\n-template<typename K, typename T, typename Pred, typename A> unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n-template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n-template<typename Stream, typename K, typename T, typename Pred, typename A> void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion);\n+template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m);\n+template<typename Stream, typename K, typename T, typename Pred, typename A> void Unserialize(Stream& is, std::map<K, T, Pred, A>& m);\n \n /**\n  * set\n  */\n-template<typename K, typename Pred, typename A> unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion);\n-template<typename Stream, typename K, typename Pred, typename A> void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion);\n-template<typename Stream, typename K, typename Pred, typename A> void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion);\n+template<typename Stream, typename K, typename Pred, typename A> void Serialize(Stream& os, const std::set<K, Pred, A>& m);\n+template<typename Stream, typename K, typename Pred, typename A> void Unserialize(Stream& is, std::set<K, Pred, A>& m);\n \n \n \n \n \n /**\n  * If none of the specialized versions above matched, default to calling member function.\n- * \"int nType\" is changed to \"long nType\" to keep from getting an ambiguous overload error.\n- * The compiler will only cast int to long if none of the other templates matched.\n- * Thanks to Boost serialization for this idea.\n  */\n-template<typename T>\n-inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion)\n-{\n-    return a.GetSerializeSize((int)nType, nVersion);\n-}\n-\n template<typename Stream, typename T>\n-inline void Serialize(Stream& os, const T& a, long nType, int nVersion)\n+inline void Serialize(Stream& os, const T& a)\n {\n-    a.Serialize(os, (int)nType, nVersion);\n+    a.Serialize(os);\n }\n \n template<typename Stream, typename T>\n-inline void Unserialize(Stream& is, T& a, long nType, int nVersion)\n+inline void Unserialize(Stream& is, T& a)\n {\n-    a.Unserialize(is, (int)nType, nVersion);\n+    a.Unserialize(is);\n }\n \n \n@@ -598,22 +547,16 @@ inline void Unserialize(Stream& is, T& a, long nType, int nVersion)\n /**\n  * string\n  */\n-template<typename C>\n-unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int)\n-{\n-    return GetSizeOfCompactSize(str.size()) + str.size() * sizeof(str[0]);\n-}\n-\n template<typename Stream, typename C>\n-void Serialize(Stream& os, const std::basic_string<C>& str, int, int)\n+void Serialize(Stream& os, const std::basic_string<C>& str)\n {\n     WriteCompactSize(os, str.size());\n     if (!str.empty())\n         os.write((char*)&str[0], str.size() * sizeof(str[0]));\n }\n \n template<typename Stream, typename C>\n-void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n+void Unserialize(Stream& is, std::basic_string<C>& str)\n {\n     unsigned int nSize = ReadCompactSize(is);\n     str.resize(nSize);\n@@ -626,53 +569,31 @@ void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n /**\n  * prevector\n  */\n-template<unsigned int N, typename T>\n-unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n-{\n-    return (GetSizeOfCompactSize(v.size()) + v.size() * sizeof(T));\n-}\n-\n-template<unsigned int N, typename T, typename V>\n-unsigned int GetSerializeSize_impl(const prevector<N, T>& v, int nType, int nVersion, const V&)\n-{\n-    unsigned int nSize = GetSizeOfCompactSize(v.size());\n-    for (typename prevector<N, T>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n-        nSize += GetSerializeSize((*vi), nType, nVersion);\n-    return nSize;\n-}\n-\n-template<unsigned int N, typename T>\n-inline unsigned int GetSerializeSize(const prevector<N, T>& v, int nType, int nVersion)\n-{\n-    return GetSerializeSize_impl(v, nType, nVersion, T());\n-}\n-\n-\n template<typename Stream, unsigned int N, typename T>\n-void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n+void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&)\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n         os.write((char*)&v[0], v.size() * sizeof(T));\n }\n \n template<typename Stream, unsigned int N, typename T, typename V>\n-void Serialize_impl(Stream& os, const prevector<N, T>& v, int nType, int nVersion, const V&)\n+void Serialize_impl(Stream& os, const prevector<N, T>& v, const V&)\n {\n     WriteCompactSize(os, v.size());\n     for (typename prevector<N, T>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n-        ::Serialize(os, (*vi), nType, nVersion);\n+        ::Serialize(os, (*vi));\n }\n \n template<typename Stream, unsigned int N, typename T>\n-inline void Serialize(Stream& os, const prevector<N, T>& v, int nType, int nVersion)\n+inline void Serialize(Stream& os, const prevector<N, T>& v)\n {\n-    Serialize_impl(os, v, nType, nVersion, T());\n+    Serialize_impl(os, v, T());\n }\n \n \n template<typename Stream, unsigned int N, typename T>\n-void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const unsigned char&)\n+void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)\n {\n     // Limit size per read so bogus size value won't cause out of memory\n     v.clear();\n@@ -688,7 +609,7 @@ void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, c\n }\n \n template<typename Stream, unsigned int N, typename T, typename V>\n-void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, const V&)\n+void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)\n {\n     v.clear();\n     unsigned int nSize = ReadCompactSize(is);\n@@ -701,68 +622,46 @@ void Unserialize_impl(Stream& is, prevector<N, T>& v, int nType, int nVersion, c\n             nMid = nSize;\n         v.resize(nMid);\n         for (; i < nMid; i++)\n-            Unserialize(is, v[i], nType, nVersion);\n+            Unserialize(is, v[i]);\n     }\n }\n \n template<typename Stream, unsigned int N, typename T>\n-inline void Unserialize(Stream& is, prevector<N, T>& v, int nType, int nVersion)\n+inline void Unserialize(Stream& is, prevector<N, T>& v)\n {\n-    Unserialize_impl(is, v, nType, nVersion, T());\n+    Unserialize_impl(is, v, T());\n }\n \n \n \n /**\n  * vector\n  */\n-template<typename T, typename A>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n-{\n-    return (GetSizeOfCompactSize(v.size()) + v.size() * sizeof(T));\n-}\n-\n-template<typename T, typename A, typename V>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&)\n-{\n-    unsigned int nSize = GetSizeOfCompactSize(v.size());\n-    for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n-        nSize += GetSerializeSize((*vi), nType, nVersion);\n-    return nSize;\n-}\n-\n-template<typename T, typename A>\n-inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion)\n-{\n-    return GetSerializeSize_impl(v, nType, nVersion, T());\n-}\n-\n-\n template<typename Stream, typename T, typename A>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&)\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n         os.write((char*)&v[0], v.size() * sizeof(T));\n }\n \n template<typename Stream, typename T, typename A, typename V>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&)\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&)\n {\n     WriteCompactSize(os, v.size());\n     for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n-        ::Serialize(os, (*vi), nType, nVersion);\n+        ::Serialize(os, (*vi));\n }\n \n template<typename Stream, typename T, typename A>\n-inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion)\n+inline void Serialize(Stream& os, const std::vector<T, A>& v)\n {\n-    Serialize_impl(os, v, nType, nVersion, T());\n+    Serialize_impl(os, v, T());\n }\n \n \n template<typename Stream, typename T, typename A>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&)\n {\n     // Limit size per read so bogus size value won't cause out of memory\n     v.clear();\n@@ -778,7 +677,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n }\n \n template<typename Stream, typename T, typename A, typename V>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&)\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&)\n {\n     v.clear();\n     unsigned int nSize = ReadCompactSize(is);\n@@ -791,73 +690,58 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n             nMid = nSize;\n         v.resize(nMid);\n         for (; i < nMid; i++)\n-            Unserialize(is, v[i], nType, nVersion);\n+            Unserialize(is, v[i]);\n     }\n }\n \n template<typename Stream, typename T, typename A>\n-inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion)\n+inline void Unserialize(Stream& is, std::vector<T, A>& v)\n {\n-    Unserialize_impl(is, v, nType, nVersion, T());\n+    Unserialize_impl(is, v, T());\n }\n \n \n \n /**\n  * pair\n  */\n-template<typename K, typename T>\n-unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion)\n-{\n-    return GetSerializeSize(item.first, nType, nVersion) + GetSerializeSize(item.second, nType, nVersion);\n-}\n-\n template<typename Stream, typename K, typename T>\n-void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion)\n+void Serialize(Stream& os, const std::pair<K, T>& item)\n {\n-    Serialize(os, item.first, nType, nVersion);\n-    Serialize(os, item.second, nType, nVersion);\n+    Serialize(os, item.first);\n+    Serialize(os, item.second);\n }\n \n template<typename Stream, typename K, typename T>\n-void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)\n+void Unserialize(Stream& is, std::pair<K, T>& item)\n {\n-    Unserialize(is, item.first, nType, nVersion);\n-    Unserialize(is, item.second, nType, nVersion);\n+    Unserialize(is, item.first);\n+    Unserialize(is, item.second);\n }\n \n \n \n /**\n  * map\n  */\n-template<typename K, typename T, typename Pred, typename A>\n-unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion)\n-{\n-    unsigned int nSize = GetSizeOfCompactSize(m.size());\n-    for (typename std::map<K, T, Pred, A>::const_iterator mi = m.begin(); mi != m.end(); ++mi)\n-        nSize += GetSerializeSize((*mi), nType, nVersion);\n-    return nSize;\n-}\n-\n template<typename Stream, typename K, typename T, typename Pred, typename A>\n-void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion)\n+void Serialize(Stream& os, const std::map<K, T, Pred, A>& m)\n {\n     WriteCompactSize(os, m.size());\n     for (typename std::map<K, T, Pred, A>::const_iterator mi = m.begin(); mi != m.end(); ++mi)\n-        Serialize(os, (*mi), nType, nVersion);\n+        Serialize(os, (*mi));\n }\n \n template<typename Stream, typename K, typename T, typename Pred, typename A>\n-void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion)\n+void Unserialize(Stream& is, std::map<K, T, Pred, A>& m)\n {\n     m.clear();\n     unsigned int nSize = ReadCompactSize(is);\n     typename std::map<K, T, Pred, A>::iterator mi = m.begin();\n     for (unsigned int i = 0; i < nSize; i++)\n     {\n         std::pair<K, T> item;\n-        Unserialize(is, item, nType, nVersion);\n+        Unserialize(is, item);\n         mi = m.insert(mi, item);\n     }\n }\n@@ -867,33 +751,24 @@ void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion\n /**\n  * set\n  */\n-template<typename K, typename Pred, typename A>\n-unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion)\n-{\n-    unsigned int nSize = GetSizeOfCompactSize(m.size());\n-    for (typename std::set<K, Pred, A>::const_iterator it = m.begin(); it != m.end(); ++it)\n-        nSize += GetSerializeSize((*it), nType, nVersion);\n-    return nSize;\n-}\n-\n template<typename Stream, typename K, typename Pred, typename A>\n-void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion)\n+void Serialize(Stream& os, const std::set<K, Pred, A>& m)\n {\n     WriteCompactSize(os, m.size());\n     for (typename std::set<K, Pred, A>::const_iterator it = m.begin(); it != m.end(); ++it)\n-        Serialize(os, (*it), nType, nVersion);\n+        Serialize(os, (*it));\n }\n \n template<typename Stream, typename K, typename Pred, typename A>\n-void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion)\n+void Unserialize(Stream& is, std::set<K, Pred, A>& m)\n {\n     m.clear();\n     unsigned int nSize = ReadCompactSize(is);\n     typename std::set<K, Pred, A>::iterator it = m.begin();\n     for (unsigned int i = 0; i < nSize; i++)\n     {\n         K key;\n-        Unserialize(is, key, nType, nVersion);\n+        Unserialize(is, key);\n         it = m.insert(it, key);\n     }\n }\n@@ -905,23 +780,23 @@ void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion)\n  */\n struct CSerActionSerialize\n {\n-    bool ForRead() const { return false; }\n+    constexpr bool ForRead() const { return false; }\n };\n struct CSerActionUnserialize\n {\n-    bool ForRead() const { return true; }\n+    constexpr bool ForRead() const { return true; }\n };\n \n template<typename Stream, typename T>\n-inline void SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionSerialize ser_action)\n+inline void SerReadWrite(Stream& s, const T& obj, CSerActionSerialize ser_action)\n {\n-    ::Serialize(s, obj, nType, nVersion);\n+    ::Serialize(s, obj);\n }\n \n template<typename Stream, typename T>\n-inline void SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSerActionUnserialize ser_action)\n+inline void SerReadWrite(Stream& s, T& obj, CSerActionUnserialize ser_action)\n {\n-    ::Unserialize(s, obj, nType, nVersion);\n+    ::Unserialize(s, obj);\n }\n \n \n@@ -932,81 +807,122 @@ inline void SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSerActionU\n \n \n \n+/* ::GetSerializeSize implementations\n+ *\n+ * Computing the serialized size of objects is done through a special stream\n+ * object of type CSizeComputer, which only records the number of bytes written\n+ * to it.\n+ *\n+ * If your Serialize or SerializationOp method has non-trivial overhead for\n+ * serialization, it may be worthwhile to implement a specialized version for\n+ * CSizeComputer, which uses the s.seek() method to record bytes that would\n+ * be written instead.\n+ */\n class CSizeComputer\n {\n protected:\n     size_t nSize;\n \n+    const int nType;\n+    const int nVersion;\n public:\n-    int nType;\n-    int nVersion;\n-\n     CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}\n \n-    CSizeComputer& write(const char *psz, size_t nSize)\n+    void write(const char *psz, size_t _nSize)\n+    {\n+        this->nSize += _nSize;\n+    }\n+\n+    /** Pretend _nSize bytes are written, without specifying them. */\n+    void seek(size_t _nSize)\n     {\n-        this->nSize += nSize;\n-        return *this;\n+        this->nSize += _nSize;\n     }\n \n     template<typename T>\n     CSizeComputer& operator<<(const T& obj)\n     {\n-        ::Serialize(*this, obj, nType, nVersion);\n+        ::Serialize(*this, obj);\n         return (*this);\n     }\n \n     size_t size() const {\n         return nSize;\n     }\n+\n+    int GetVersion() const { return nVersion; }\n+    int GetType() const { return nType; }\n };\n \n template<typename Stream>\n-void SerializeMany(Stream& s, int nType, int nVersion)\n+void SerializeMany(Stream& s)\n {\n }\n \n template<typename Stream, typename Arg>\n-void SerializeMany(Stream& s, int nType, int nVersion, Arg&& arg)\n+void SerializeMany(Stream& s, Arg&& arg)\n {\n-    ::Serialize(s, std::forward<Arg>(arg), nType, nVersion);\n+    ::Serialize(s, std::forward<Arg>(arg));\n }\n \n template<typename Stream, typename Arg, typename... Args>\n-void SerializeMany(Stream& s, int nType, int nVersion, Arg&& arg, Args&&... args)\n+void SerializeMany(Stream& s, Arg&& arg, Args&&... args)\n {\n-    ::Serialize(s, std::forward<Arg>(arg), nType, nVersion);\n-    ::SerializeMany(s, nType, nVersion, std::forward<Args>(args)...);\n+    ::Serialize(s, std::forward<Arg>(arg));\n+    ::SerializeMany(s, std::forward<Args>(args)...);\n }\n \n template<typename Stream>\n-inline void UnserializeMany(Stream& s, int nType, int nVersion)\n+inline void UnserializeMany(Stream& s)\n {\n }\n \n template<typename Stream, typename Arg>\n-inline void UnserializeMany(Stream& s, int nType, int nVersion, Arg& arg)\n+inline void UnserializeMany(Stream& s, Arg& arg)\n {\n-    ::Unserialize(s, arg, nType, nVersion);\n+    ::Unserialize(s, arg);\n }\n \n template<typename Stream, typename Arg, typename... Args>\n-inline void UnserializeMany(Stream& s, int nType, int nVersion, Arg& arg, Args&... args)\n+inline void UnserializeMany(Stream& s, Arg& arg, Args&... args)\n {\n-    ::Unserialize(s, arg, nType, nVersion);\n-    ::UnserializeMany(s, nType, nVersion, args...);\n+    ::Unserialize(s, arg);\n+    ::UnserializeMany(s, args...);\n }\n \n template<typename Stream, typename... Args>\n-inline void SerReadWriteMany(Stream& s, int nType, int nVersion, CSerActionSerialize ser_action, Args&&... args)\n+inline void SerReadWriteMany(Stream& s, CSerActionSerialize ser_action, Args&&... args)\n {\n-    ::SerializeMany(s, nType, nVersion, std::forward<Args>(args)...);\n+    ::SerializeMany(s, std::forward<Args>(args)...);\n }\n \n template<typename Stream, typename... Args>\n-inline void SerReadWriteMany(Stream& s, int nType, int nVersion, CSerActionUnserialize ser_action, Args&... args)\n+inline void SerReadWriteMany(Stream& s, CSerActionUnserialize ser_action, Args&... args)\n+{\n+    ::UnserializeMany(s, args...);\n+}\n+\n+template<typename I>\n+inline void WriteVarInt(CSizeComputer &s, I n)\n+{\n+    s.seek(GetSizeOfVarInt<I>(n));\n+}\n+\n+inline void WriteCompactSize(CSizeComputer &s, uint64_t nSize)\n+{\n+    s.seek(GetSizeOfCompactSize(nSize));\n+}\n+\n+template <typename T>\n+size_t GetSerializeSize(const T& t, int nType, int nVersion = 0)\n+{\n+    return (CSizeComputer(nType, nVersion) << t).size();\n+}\n+\n+template <typename S, typename T>\n+size_t GetSerializeSize(const S& s, const T& t)\n {\n-    ::UnserializeMany(s, nType, nVersion, args...);\n+    return (CSizeComputer(s.GetType(), s.GetVersion()) << t).size();\n }\n \n #endif // BITCOIN_SERIALIZE_H"
      },
      {
        "sha": "c3e7c9e9e4a49e7f5ceb9516cdb3bd3d74bf80dd",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 49,
        "deletions": 62,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -26,27 +26,41 @@ template<typename Stream>\n class OverrideStream\n {\n     Stream* stream;\n-public:\n+\n     const int nType;\n     const int nVersion;\n \n+public:\n     OverrideStream(Stream* stream_, int nType_, int nVersion_) : stream(stream_), nType(nType_), nVersion(nVersion_) {}\n \n     template<typename T>\n     OverrideStream<Stream>& operator<<(const T& obj)\n     {\n         // Serialize to this stream\n-        ::Serialize(*this->stream, obj, nType, nVersion);\n+        ::Serialize(*this, obj);\n         return (*this);\n     }\n \n     template<typename T>\n     OverrideStream<Stream>& operator>>(T& obj)\n     {\n         // Unserialize from this stream\n-        ::Unserialize(*this->stream, obj, nType, nVersion);\n+        ::Unserialize(*this, obj);\n         return (*this);\n     }\n+\n+    void write(const char* pch, size_t nSize)\n+    {\n+        stream->write(pch, nSize);\n+    }\n+\n+    void read(char* pch, size_t nSize)\n+    {\n+        stream->read(pch, nSize);\n+    }\n+\n+    int GetVersion() const { return nVersion; }\n+    int GetType() const { return nType; }\n };\n \n template<typename S>\n@@ -66,9 +80,10 @@ class CDataStream\n     typedef CSerializeData vector_type;\n     vector_type vch;\n     unsigned int nReadPos;\n-public:\n+\n     int nType;\n     int nVersion;\n+public:\n \n     typedef vector_type::allocator_type   allocator_type;\n     typedef vector_type::size_type        size_type;\n@@ -116,7 +131,7 @@ class CDataStream\n     CDataStream(int nTypeIn, int nVersionIn, Args&&... args)\n     {\n         Init(nTypeIn, nVersionIn);\n-        ::SerializeMany(*this, nType, nVersion, std::forward<Args>(args)...);\n+        ::SerializeMany(*this, std::forward<Args>(args)...);\n     }\n \n     void Init(int nTypeIn, int nVersionIn)\n@@ -251,13 +266,11 @@ class CDataStream\n     int in_avail()               { return size(); }\n \n     void SetType(int n)          { nType = n; }\n-    int GetType()                { return nType; }\n+    int GetType() const          { return nType; }\n     void SetVersion(int n)       { nVersion = n; }\n-    int GetVersion()             { return nVersion; }\n-    void ReadVersion()           { *this >> nVersion; }\n-    void WriteVersion()          { *this << nVersion; }\n+    int GetVersion() const       { return nVersion; }\n \n-    CDataStream& read(char* pch, size_t nSize)\n+    void read(char* pch, size_t nSize)\n     {\n         // Read from the beginning of the buffer\n         unsigned int nReadPosNext = nReadPos + nSize;\n@@ -270,14 +283,13 @@ class CDataStream\n             memcpy(pch, &vch[nReadPos], nSize);\n             nReadPos = 0;\n             vch.clear();\n-            return (*this);\n+            return;\n         }\n         memcpy(pch, &vch[nReadPos], nSize);\n         nReadPos = nReadPosNext;\n-        return (*this);\n     }\n \n-    CDataStream& ignore(int nSize)\n+    void ignore(int nSize)\n     {\n         // Ignore from the beginning of the buffer\n         if (nSize < 0) {\n@@ -290,47 +302,38 @@ class CDataStream\n                 throw std::ios_base::failure(\"CDataStream::ignore(): end of data\");\n             nReadPos = 0;\n             vch.clear();\n-            return (*this);\n+            return;\n         }\n         nReadPos = nReadPosNext;\n-        return (*this);\n     }\n \n-    CDataStream& write(const char* pch, size_t nSize)\n+    void write(const char* pch, size_t nSize)\n     {\n         // Write to the end of the buffer\n         vch.insert(vch.end(), pch, pch + nSize);\n-        return (*this);\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s) const\n     {\n         // Special case: stream << stream concatenates like stream += stream\n         if (!vch.empty())\n             s.write((char*)&vch[0], vch.size() * sizeof(vch[0]));\n     }\n \n-    template<typename T>\n-    unsigned int GetSerializeSize(const T& obj)\n-    {\n-        // Tells the size of the object if serialized to this stream\n-        return ::GetSerializeSize(obj, nType, nVersion);\n-    }\n-\n     template<typename T>\n     CDataStream& operator<<(const T& obj)\n     {\n         // Serialize to this stream\n-        ::Serialize(*this, obj, nType, nVersion);\n+        ::Serialize(*this, obj);\n         return (*this);\n     }\n \n     template<typename T>\n     CDataStream& operator>>(T& obj)\n     {\n         // Unserialize from this stream\n-        ::Unserialize(*this, obj, nType, nVersion);\n+        ::Unserialize(*this, obj);\n         return (*this);\n     }\n \n@@ -385,17 +388,15 @@ class CAutoFile\n     CAutoFile(const CAutoFile&);\n     CAutoFile& operator=(const CAutoFile&);\n \n-    int nType;\n-    int nVersion;\n-\t\n+    const int nType;\n+    const int nVersion;\n+\n     FILE* file;\t\n \n public:\n-    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn)\n+    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn)\n     {\n         file = filenew;\n-        nType = nTypeIn;\n-        nVersion = nVersionIn;\n     }\n \n     ~CAutoFile()\n@@ -430,23 +431,18 @@ class CAutoFile\n     //\n     // Stream subset\n     //\n-    void SetType(int n)          { nType = n; }\n-    int GetType()                { return nType; }\n-    void SetVersion(int n)       { nVersion = n; }\n-    int GetVersion()             { return nVersion; }\n-    void ReadVersion()           { *this >> nVersion; }\n-    void WriteVersion()          { *this << nVersion; }\n+    int GetType() const          { return nType; }\n+    int GetVersion() const       { return nVersion; }\n \n-    CAutoFile& read(char* pch, size_t nSize)\n+    void read(char* pch, size_t nSize)\n     {\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::read: file handle is NULL\");\n         if (fread(pch, 1, nSize, file) != nSize)\n             throw std::ios_base::failure(feof(file) ? \"CAutoFile::read: end of file\" : \"CAutoFile::read: fread failed\");\n-        return (*this);\n     }\n \n-    CAutoFile& ignore(size_t nSize)\n+    void ignore(size_t nSize)\n     {\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::ignore: file handle is NULL\");\n@@ -457,23 +453,14 @@ class CAutoFile\n                 throw std::ios_base::failure(feof(file) ? \"CAutoFile::ignore: end of file\" : \"CAutoFile::read: fread failed\");\n             nSize -= nNow;\n         }\n-        return (*this);\n     }\n \n-    CAutoFile& write(const char* pch, size_t nSize)\n+    void write(const char* pch, size_t nSize)\n     {\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::write: file handle is NULL\");\n         if (fwrite(pch, 1, nSize, file) != nSize)\n             throw std::ios_base::failure(\"CAutoFile::write: write failed\");\n-        return (*this);\n-    }\n-\n-    template<typename T>\n-    unsigned int GetSerializeSize(const T& obj)\n-    {\n-        // Tells the size of the object if serialized to this stream\n-        return ::GetSerializeSize(obj, nType, nVersion);\n     }\n \n     template<typename T>\n@@ -482,7 +469,7 @@ class CAutoFile\n         // Serialize to this stream\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::operator<<: file handle is NULL\");\n-        ::Serialize(*this, obj, nType, nVersion);\n+        ::Serialize(*this, obj);\n         return (*this);\n     }\n \n@@ -492,7 +479,7 @@ class CAutoFile\n         // Unserialize from this stream\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::operator>>: file handle is NULL\");\n-        ::Unserialize(*this, obj, nType, nVersion);\n+        ::Unserialize(*this, obj);\n         return (*this);\n     }\n };\n@@ -510,8 +497,8 @@ class CBufferedFile\n     CBufferedFile(const CBufferedFile&);\n     CBufferedFile& operator=(const CBufferedFile&);\n \n-    int nType;\n-    int nVersion;\n+    const int nType;\n+    const int nVersion;\n \n     FILE *src;            // source file\n     uint64_t nSrcPos;     // how many bytes have been read from source\n@@ -541,18 +528,19 @@ class CBufferedFile\n \n public:\n     CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :\n-        nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n+        nType(nTypeIn), nVersion(nVersionIn), nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n     {\n         src = fileIn;\n-        nType = nTypeIn;\n-        nVersion = nVersionIn;\n     }\n \n     ~CBufferedFile()\n     {\n         fclose();\n     }\n \n+    int GetVersion() const { return nVersion; }\n+    int GetType() const { return nType; }\n+\n     void fclose()\n     {\n         if (src) {\n@@ -567,7 +555,7 @@ class CBufferedFile\n     }\n \n     // read a number of bytes\n-    CBufferedFile& read(char *pch, size_t nSize) {\n+    void read(char *pch, size_t nSize) {\n         if (nSize + nReadPos > nReadLimit)\n             throw std::ios_base::failure(\"Read attempted past buffer limit\");\n         if (nSize + nRewind > vchBuf.size())\n@@ -586,7 +574,6 @@ class CBufferedFile\n             pch += nNow;\n             nSize -= nNow;\n         }\n-        return (*this);\n     }\n \n     // return the current reading position\n@@ -632,7 +619,7 @@ class CBufferedFile\n     template<typename T>\n     CBufferedFile& operator>>(T& obj) {\n         // Unserialize from this stream\n-        ::Unserialize(*this, obj, nType, nVersion);\n+        ::Unserialize(*this, obj);\n         return (*this);\n     }\n "
      },
      {
        "sha": "0ed5d62ef67e15f53607816e701ba4f739aafcdf",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -129,7 +129,7 @@ class TestHeaderAndShortIDs {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(header);\n         READWRITE(nonce);\n         size_t shorttxids_size = shorttxids.size();"
      },
      {
        "sha": "25fb9ea2b757cf6da58ada571fb7456bd1d92a15",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -41,7 +41,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n     BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\")), \"BloomFilter doesn't contain just-inserted object (3)!\");\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+    stream << filter;\n \n     vector<unsigned char> vch = ParseHex(\"03614e9b050000000000000001\");\n     vector<char> expected(vch.size());\n@@ -73,7 +73,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n     BOOST_CHECK_MESSAGE(filter.contains(ParseHex(\"b9300670b4c5366e95b2699e8b18bc75e5f729c5\")), \"BloomFilter doesn't contain just-inserted object (3)!\");\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+    stream << filter;\n \n     vector<unsigned char> vch = ParseHex(\"03ce4299050000000100008001\");\n     vector<char> expected(vch.size());\n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n     filter.insert(vector<unsigned char>(hash.begin(), hash.end()));\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n-    filter.Serialize(stream, SER_NETWORK, PROTOCOL_VERSION);\n+    stream << filter;\n \n     vector<unsigned char> vch = ParseHex(\"038fc16b080000000000000001\");\n     vector<char> expected(vch.size());"
      },
      {
        "sha": "2d791ee18d5a8e17feb33367bc13fb3034dace8a",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -254,7 +254,7 @@ struct StringContentsSerializer {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         if (ser_action.ForRead()) {\n             str.clear();\n             char c = 0;"
      },
      {
        "sha": "87cb38daac3d2766e9d285fe3fe25820bc6ea76a",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -17,7 +17,7 @@ using namespace std;\n class CAddrManSerializationMock : public CAddrMan\n {\n public:\n-    virtual void Serialize(CDataStream& s, int nType, int nVersionDummy) const = 0;\n+    virtual void Serialize(CDataStream& s) const = 0;\n \n     //! Ensure that bucket placement is always the same for testing purposes.\n     void MakeDeterministic()\n@@ -30,16 +30,16 @@ class CAddrManSerializationMock : public CAddrMan\n class CAddrManUncorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s, int nType, int nVersionDummy) const\n+    void Serialize(CDataStream& s) const\n     {\n-        CAddrMan::Serialize(s, nType, nVersionDummy);\n+        CAddrMan::Serialize(s);\n     }\n };\n \n class CAddrManCorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s, int nType, int nVersionDummy) const\n+    void Serialize(CDataStream& s) const\n     {\n         // Produces corrupt output that claims addrman has 20 addrs when it only has one addr.\n         unsigned char nVersion = 1;"
      },
      {
        "sha": "a359598ddcf0ecf4ecc9a772d85d4423332b08c9",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -84,6 +84,28 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_THROW(CallRPC(string(\"sendrawtransaction \")+rawtx+\" extra\"), runtime_error);\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_togglenetwork)\n+{\n+    UniValue r;\n+\n+    r = CallRPC(\"getnetworkinfo\");\n+    bool netState = find_value(r.get_obj(), \"networkactive\").get_bool();\n+    BOOST_CHECK_EQUAL(netState, true);\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(\"setnetworkactive false\"));\n+    r = CallRPC(\"getnetworkinfo\");\n+    int numConnection = find_value(r.get_obj(), \"connections\").get_int();\n+    BOOST_CHECK_EQUAL(numConnection, 0);\n+\n+    netState = find_value(r.get_obj(), \"networkactive\").get_bool();\n+    BOOST_CHECK_EQUAL(netState, false);\n+\n+    BOOST_CHECK_NO_THROW(CallRPC(\"setnetworkactive true\"));\n+    r = CallRPC(\"getnetworkinfo\");\n+    netState = find_value(r.get_obj(), \"networkactive\").get_bool();\n+    BOOST_CHECK_EQUAL(netState, true);\n+}\n+\n BOOST_AUTO_TEST_CASE(rpc_rawsign)\n {\n     UniValue r;"
      },
      {
        "sha": "bbadf57957c9483568342ae0ae955f630cd34cf6",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -28,7 +28,7 @@ class CSerializeMethodsTestSingle\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(intval);\n         READWRITE(boolval);\n         READWRITE(stringval);\n@@ -53,7 +53,7 @@ class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITEMANY(intval, boolval, stringval, FLATDATA(charstrval), txval);\n     }\n };"
      },
      {
        "sha": "2732948060a79f462ab1f6801927c27bc8d65f7d",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -184,25 +184,25 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(OneL.begin() + 32 == OneL.end());\n     BOOST_CHECK(MaxL.begin() + 32 == MaxL.end());\n     BOOST_CHECK(TmpL.begin() + 32 == TmpL.end());\n-    BOOST_CHECK(R1L.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n-    BOOST_CHECK(ZeroL.GetSerializeSize(0,PROTOCOL_VERSION) == 32);\n+    BOOST_CHECK(GetSerializeSize(R1L, 0, PROTOCOL_VERSION) == 32);\n+    BOOST_CHECK(GetSerializeSize(ZeroL, 0, PROTOCOL_VERSION) == 32);\n \n-    std::stringstream ss;\n-    R1L.Serialize(ss,0,PROTOCOL_VERSION);\n+    CDataStream ss(0, PROTOCOL_VERSION);\n+    ss << R1L;\n     BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpL;\n     BOOST_CHECK(R1L == TmpL);\n-    ss.str(\"\");\n-    ZeroL.Serialize(ss,0,PROTOCOL_VERSION);\n+    ss.clear();\n+    ss << ZeroL;\n     BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpL;\n     BOOST_CHECK(ZeroL == TmpL);\n-    ss.str(\"\");\n-    MaxL.Serialize(ss,0,PROTOCOL_VERSION);\n+    ss.clear();\n+    ss << MaxL;\n     BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+32));\n-    TmpL.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpL;\n     BOOST_CHECK(MaxL == TmpL);\n-    ss.str(\"\");\n+    ss.clear();\n \n     BOOST_CHECK(R1S.GetHex() == R1S.ToString());\n     BOOST_CHECK(R2S.GetHex() == R2S.ToString());\n@@ -230,24 +230,24 @@ BOOST_AUTO_TEST_CASE( methods ) // GetHex SetHex begin() end() size() GetLow64 G\n     BOOST_CHECK(OneS.begin() + 20 == OneS.end());\n     BOOST_CHECK(MaxS.begin() + 20 == MaxS.end());\n     BOOST_CHECK(TmpS.begin() + 20 == TmpS.end());\n-    BOOST_CHECK(R1S.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n-    BOOST_CHECK(ZeroS.GetSerializeSize(0,PROTOCOL_VERSION) == 20);\n+    BOOST_CHECK(GetSerializeSize(R1S, 0, PROTOCOL_VERSION) == 20);\n+    BOOST_CHECK(GetSerializeSize(ZeroS, 0, PROTOCOL_VERSION) == 20);\n \n-    R1S.Serialize(ss,0,PROTOCOL_VERSION);\n+    ss << R1S;\n     BOOST_CHECK(ss.str() == std::string(R1Array,R1Array+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpS;\n     BOOST_CHECK(R1S == TmpS);\n-    ss.str(\"\");\n-    ZeroS.Serialize(ss,0,PROTOCOL_VERSION);\n+    ss.clear();\n+    ss << ZeroS;\n     BOOST_CHECK(ss.str() == std::string(ZeroArray,ZeroArray+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpS;\n     BOOST_CHECK(ZeroS == TmpS);\n-    ss.str(\"\");\n-    MaxS.Serialize(ss,0,PROTOCOL_VERSION);\n+    ss.clear();\n+    ss << MaxS;\n     BOOST_CHECK(ss.str() == std::string(MaxArray,MaxArray+20));\n-    TmpS.Unserialize(ss,0,PROTOCOL_VERSION);\n+    ss >> TmpS;\n     BOOST_CHECK(MaxS == TmpS);\n-    ss.str(\"\");\n+    ss.clear();\n }\n \n BOOST_AUTO_TEST_CASE( conversion )"
      },
      {
        "sha": "687c686775b03d54dfa9c492b50aa43977c31ac3",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -43,7 +43,7 @@ struct CDiskTxPos : public CDiskBlockPos\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(*(CDiskBlockPos*)this);\n         READWRITE(VARINT(nTxOffset));\n     }"
      },
      {
        "sha": "15b9614f63957ce25a0f143d58cb578de94abd5e",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -85,6 +85,9 @@ class CClientUIInterface\n     /** Number of network connections changed. */\n     boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;\n \n+    /** Network activity state changed. */\n+    boost::signals2::signal<void (bool networkActive)> NotifyNetworkActiveChanged;\n+\n     /**\n      * Status bar alerts changed.\n      */"
      },
      {
        "sha": "86e7c0b6c64a7d73b291b7c7a3b4c53ca3941052",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -78,11 +78,6 @@ class base_blob\n         return sizeof(data);\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n-    {\n-        return sizeof(data);\n-    }\n-\n     uint64_t GetUint64(int pos) const\n     {\n         const uint8_t* ptr = data + pos * 8;\n@@ -97,13 +92,13 @@ class base_blob\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s) const\n     {\n         s.write((char*)data, sizeof(data));\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n+    void Unserialize(Stream& s)\n     {\n         s.read((char*)data, sizeof(data));\n     }"
      },
      {
        "sha": "a5d276e7f33ed6ee611a9a5f2c9b23d4ee8f7629",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 10,
        "deletions": 16,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -27,29 +27,23 @@ class CTxInUndo\n     CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0) {}\n     CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0, int nVersionIn = 0) : txout(txoutIn), fCoinBase(fCoinBaseIn), nHeight(nHeightIn), nVersion(nVersionIn) { }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        return ::GetSerializeSize(VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion) +\n-               (nHeight > 0 ? ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion) : 0) +\n-               ::GetSerializeSize(CTxOutCompressor(REF(txout)), nType, nVersion);\n-    }\n-\n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n-        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)), nType, nVersion);\n+    void Serialize(Stream &s) const {\n+        ::Serialize(s, VARINT(nHeight*2+(fCoinBase ? 1 : 0)));\n         if (nHeight > 0)\n-            ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n-        ::Serialize(s, CTxOutCompressor(REF(txout)), nType, nVersion);\n+            ::Serialize(s, VARINT(this->nVersion));\n+        ::Serialize(s, CTxOutCompressor(REF(txout)));\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s) {\n         unsigned int nCode = 0;\n-        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n+        ::Unserialize(s, VARINT(nCode));\n         nHeight = nCode / 2;\n         fCoinBase = nCode & 1;\n         if (nHeight > 0)\n-            ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n-        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))), nType, nVersion);\n+            ::Unserialize(s, VARINT(this->nVersion));\n+        ::Unserialize(s, REF(CTxOutCompressor(REF(txout))));\n     }\n };\n \n@@ -63,7 +57,7 @@ class CTxUndo\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(vprevout);\n     }\n };\n@@ -77,7 +71,7 @@ class CBlockUndo\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(vtxundo);\n     }\n };"
      },
      {
        "sha": "e89c15b5d4a4f72732c3918fcea39d75cfaa59c6",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -47,7 +47,7 @@ class CMasterKey\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(vchCryptedKey);\n         READWRITE(vchSalt);\n         READWRITE(nDerivationMethod);"
      },
      {
        "sha": "bb5337c4adb3a270513e94f61b9749b18ceeb198",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -1017,7 +1017,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     bool fRunScan = false;\n     const int64_t minimumTimestamp = 1;\n-    int64_t nLowestTimestamp;\n+    int64_t nLowestTimestamp = 0;\n \n     if (fRescan && chainActive.Tip()) {\n         nLowestTimestamp = chainActive.Tip()->GetBlockTime();"
      },
      {
        "sha": "a527c6d84ef1bdcae39ad9700b8e86e5f9b19897",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -100,8 +100,9 @@ class CKeyPool\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(nTime);\n         READWRITE(vchPubKey);\n@@ -195,7 +196,7 @@ class CMerkleTx : public CTransaction\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         std::vector<uint256> vMerkleBranch; // For compatibility with older versions.\n         READWRITE(*(CTransaction*)this);\n         READWRITE(hashBlock);\n@@ -315,7 +316,7 @@ class CWalletTx : public CMerkleTx\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         if (ser_action.ForRead())\n             Init(NULL);\n         char fSpent = false;\n@@ -448,8 +449,9 @@ class CWalletKey\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vchPrivKey);\n         READWRITE(nTimeCreated);\n@@ -493,8 +495,9 @@ class CAccountingEntry\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n         //! Note: strAccount is serialized as part of the key, not here.\n         READWRITE(nCreditDebit);\n@@ -507,7 +510,7 @@ class CAccountingEntry\n \n             if (!(mapValue.empty() && _ssExtra.empty()))\n             {\n-                CDataStream ss(nType, nVersion);\n+                CDataStream ss(s.GetType(), s.GetVersion());\n                 ss.insert(ss.begin(), '\\0');\n                 ss << mapValue;\n                 ss.insert(ss.end(), _ssExtra.begin(), _ssExtra.end());\n@@ -523,7 +526,7 @@ class CAccountingEntry\n             mapValue.clear();\n             if (std::string::npos != nSepPos)\n             {\n-                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), nType, nVersion);\n+                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), s.GetType(), s.GetVersion());\n                 ss >> mapValue;\n                 _ssExtra = std::vector<char>(ss.begin(), ss.end());\n             }\n@@ -986,8 +989,9 @@ class CAccount\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n         READWRITE(vchPubKey);\n     }"
      },
      {
        "sha": "eb25ac613dd33b261c9c4df5bd189886b2c96a6e",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcba93bebf886f2bde39e8a3be3baec52a2d09f0/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "patch": "@@ -54,7 +54,7 @@ class CHDChain\n     CHDChain() { SetNull(); }\n     ADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(this->nVersion);\n         READWRITE(nExternalChainCounter);\n@@ -93,7 +93,7 @@ class CKeyMetadata\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(this->nVersion);\n         READWRITE(nCreateTime);\n         if (this->nVersion >= VERSION_WITH_HDDATA)"
      }
    ]
  },
  {
    "sha": "9ef922ffda52e70e72dd462f2578d798e14a402d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWY5MjJmZmRhNTJlNzBlNzJkZDQ2MmYyNTc4ZDc5OGUxNGE0MDJk",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-14T02:31:39Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-14T02:31:39Z"
      },
      "message": "Add `sendnulldata` RPC command\nAlso update readme",
      "tree": {
        "sha": "526bc117bb48fd13b7f86d01a4e45371ed8dee5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/526bc117bb48fd13b7f86d01a4e45371ed8dee5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ef922ffda52e70e72dd462f2578d798e14a402d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ef922ffda52e70e72dd462f2578d798e14a402d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ef922ffda52e70e72dd462f2578d798e14a402d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ef922ffda52e70e72dd462f2578d798e14a402d/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcba93bebf886f2bde39e8a3be3baec52a2d09f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bcba93bebf886f2bde39e8a3be3baec52a2d09f0"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 89,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e5e359dc25a9c041b9cc69bdd2fd5cdc0c549e23",
        "filename": "README.md",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ef922ffda52e70e72dd462f2578d798e14a402d/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ef922ffda52e70e72dd462f2578d798e14a402d/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=9ef922ffda52e70e72dd462f2578d798e14a402d",
        "patch": "@@ -1,7 +1,17 @@\n-Bitcoin Core integration/staging tree\n+Bitcoin Nulldata integration/staging tree\n =====================================\n \n-[![Build Status](https://travis-ci.org/bitcoin/bitcoin.svg?branch=master)](https://travis-ci.org/bitcoin/bitcoin)\n+### Bitcoin Nulldata\n+\n+Note: this is a slightly modified version of Bitcoin Core intended to make working with nulldata easier.\n+\n+So far only RPC operations have been added:\n+\n+* getnulldatas - returns nulldatas in a block via hash\n+* getmanynulldatas - returns nulldatas in many blocks given two heights (inclusive)\n+* sendnulldata - given a hex string will encoded this as nulldata and publish a tx\n+\n+[![Build Status](https://travis-ci.org/xertrov/bitcoin-nulldata.svg?branch=master)](https://travis-ci.org/xertrov/bitcoin-nulldata)\n \n https://bitcoincore.org\n "
      },
      {
        "sha": "74365c3a7ca329862da59a9575988674a148d7b9",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ef922ffda52e70e72dd462f2578d798e14a402d/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ef922ffda52e70e72dd462f2578d798e14a402d/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=9ef922ffda52e70e72dd462f2578d798e14a402d",
        "patch": "@@ -323,3 +323,8 @@ CScript GetScriptForWitness(const CScript& redeemscript)\n     ret << OP_0 << ToByteVector(hash);\n     return ret;\n }\n+\n+CScript GetScriptForNulldata(const std::vector<unsigned char>& nulldata)\n+{\n+    return CScript() << OP_RETURN << nulldata;\n+}"
      },
      {
        "sha": "58648051aa17911f9d94ca289baeef96df347101",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ef922ffda52e70e72dd462f2578d798e14a402d/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ef922ffda52e70e72dd462f2578d798e14a402d/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=9ef922ffda52e70e72dd462f2578d798e14a402d",
        "patch": "@@ -80,5 +80,6 @@ CScript GetScriptForDestination(const CTxDestination& dest);\n CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n CScript GetScriptForWitness(const CScript& redeemscript);\n+CScript GetScriptForNulldata(const std::vector<unsigned char>& nulldata);\n \n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "61d729448970872bc54030219d5422f127d38a46",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ef922ffda52e70e72dd462f2578d798e14a402d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ef922ffda52e70e72dd462f2578d798e14a402d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9ef922ffda52e70e72dd462f2578d798e14a402d",
        "patch": "@@ -431,6 +431,76 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n     return wtx.GetHash().GetHex();\n }\n \n+static void PublishNulldata(const std::vector<unsigned char> nulldata, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+    CAmount nValue = 0;\n+    bool fSubtractFeeFromAmount = false;\n+\n+    if (nValue > curBalance || curBalance == 0)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForNulldata(nulldata);\n+\n+    // Create and send the transaction\n+    CReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get(), state)) {\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+}\n+\n+UniValue sendnulldata(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw runtime_error(\n+            \"sendnulldata \\\"nulldata-hex\\\"\\n\"\n+            \"\\nCreate a tx that just embeds some nulldata in the blockchain.\\n\"\n+            + HelpRequiringPassphrase() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"nulldata-hex\\\"  (string, required) Hex encoded nulldata (not including OP_RETURN or size.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"transactionid\\\"  (string) The transaction id.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sendnulldata\", \"\\\"000102030405060708090a0b0c0d0e0f10\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string hexNulldata = request.params[0].get_str();\n+    if (!IsHex(hexNulldata))\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Cannot decode nulldata\");\n+    std::vector<unsigned char> nulldata = ParseHex(hexNulldata);\n+\n+    // Amount\n+    CWalletTx wtx;\n+\n+    EnsureWalletIsUnlocked();\n+\n+    PublishNulldata(nulldata, wtx);\n+\n+    return wtx.GetHash().GetHex();\n+}\n+\n UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp))\n@@ -2635,6 +2705,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false },\n     { \"wallet\",             \"sendmany\",                 &sendmany,                 false },\n     { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false },\n+    { \"wallet\",             \"sendnulldata\",             &sendnulldata,             false },\n     { \"wallet\",             \"setaccount\",               &setaccount,               true  },\n     { \"wallet\",             \"settxfee\",                 &settxfee,                 true  },\n     { \"wallet\",             \"signmessage\",              &signmessage,              true  },"
      }
    ]
  },
  {
    "sha": "ef90afaa1d0fcfc3a42ee5d6740e028773779c3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjkwYWZhYTFkMGZjZmMzYTQyZWU1ZDY3NDBlMDI4NzczNzc5YzNi",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-14T02:38:21Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-14T02:48:08Z"
      },
      "message": "Add a small script to test nulldata on the fly\n\nMake the test a bit safer\n\nImprove test slightly",
      "tree": {
        "sha": "b15da9418d97a50c877975b3720efeeb80b81f53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b15da9418d97a50c877975b3720efeeb80b81f53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef90afaa1d0fcfc3a42ee5d6740e028773779c3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef90afaa1d0fcfc3a42ee5d6740e028773779c3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef90afaa1d0fcfc3a42ee5d6740e028773779c3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef90afaa1d0fcfc3a42ee5d6740e028773779c3b/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ef922ffda52e70e72dd462f2578d798e14a402d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ef922ffda52e70e72dd462f2578d798e14a402d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ef922ffda52e70e72dd462f2578d798e14a402d"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 44,
      "deletions": 0
    },
    "files": [
      {
        "sha": "adfeb8e7229f80cd81d398420eed115fee21812e",
        "filename": "run_nulldata_test.sh",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef90afaa1d0fcfc3a42ee5d6740e028773779c3b/run_nulldata_test.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef90afaa1d0fcfc3a42ee5d6740e028773779c3b/run_nulldata_test.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/run_nulldata_test.sh?ref=ef90afaa1d0fcfc3a42ee5d6740e028773779c3b",
        "patch": "@@ -0,0 +1,44 @@\n+alias bclir=\"bitcoin-cli -regtest\"\n+\n+bclir stop\n+\n+echo \"Warning, do not run bitcoind in the background\"\n+wait `pgrep bitcoind`\n+sleep 0.5\n+\n+bitcoind -daemon -regtest\n+\n+while [ 1 ]; do\n+  if [ -n \"`bitcoin-cli getinfo 2>1 | grep -i '{'`\" ]; then\n+    break;\n+  fi\n+  echo 'sleep'\n+  sleep 0.1;\n+done\n+\n+echo \"bitcoin up\"\n+\n+bclir getinfo\n+\n+if [ \"`bitcoin-cli getblockcount`\" -eq \"0\" ]; then\n+  bclir generate 200 > /dev/null\n+  bclir getinfo\n+fi\n+\n+echo \"testing nulldatas\"\n+\n+bclir getnulldatas `bclir getblockhash 0`\n+bclir getmanynulldatas 0 1 false\n+bclir getmanynulldatas 0 1 true\n+\n+echo \"testing sendnulldata\"\n+\n+txout=$(bclir getrawtransaction `bclir sendnulldata 00`)\n+\n+echo $txout\n+bclir decoderawtransaction $txout\n+\n+echo \"Confirming...\"\n+\n+bclir generate 1\n+bclir getnulldatas `bclir getbestblockhash`"
      }
    ]
  },
  {
    "sha": "c95a05f8777e21ae09402ec8161a2aa4215bb55b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTVhMDVmODc3N2UyMWFlMDk0MDJlYzgxNjFhMmFhNDIxNWJiNTVi",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-14T02:36:51Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-14T02:48:11Z"
      },
      "message": "Update README.md\n\nUpdate README.md",
      "tree": {
        "sha": "17451cbf512117387e068da403e4e78696d10b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17451cbf512117387e068da403e4e78696d10b1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c95a05f8777e21ae09402ec8161a2aa4215bb55b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95a05f8777e21ae09402ec8161a2aa4215bb55b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c95a05f8777e21ae09402ec8161a2aa4215bb55b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95a05f8777e21ae09402ec8161a2aa4215bb55b/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef90afaa1d0fcfc3a42ee5d6740e028773779c3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef90afaa1d0fcfc3a42ee5d6740e028773779c3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef90afaa1d0fcfc3a42ee5d6740e028773779c3b"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ec9ea562e03a8a886d6e4f2d60620dfba9998f7b",
        "filename": "README.md",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c95a05f8777e21ae09402ec8161a2aa4215bb55b/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c95a05f8777e21ae09402ec8161a2aa4215bb55b/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=c95a05f8777e21ae09402ec8161a2aa4215bb55b",
        "patch": "@@ -5,13 +5,17 @@ Bitcoin Nulldata integration/staging tree\n \n Note: this is a slightly modified version of Bitcoin Core intended to make working with nulldata easier.\n \n+I'll attempt to keep it up to date with Bitcoin Core's master branch.\n+\n+Intended to be used for apps anchoring to the Bitcoin blockchain via nulldata.\n+\n So far only RPC operations have been added:\n \n * getnulldatas - returns nulldatas in a block via hash\n * getmanynulldatas - returns nulldatas in many blocks given two heights (inclusive)\n * sendnulldata - given a hex string will encoded this as nulldata and publish a tx\n \n-[![Build Status](https://travis-ci.org/xertrov/bitcoin-nulldata.svg?branch=master)](https://travis-ci.org/xertrov/bitcoin-nulldata)\n+[![Build Status](https://travis-ci.org/XertroV/bitcoin-nulldata.svg?branch=master)](https://travis-ci.org/XertroV/bitcoin-nulldata)\n \n https://bitcoincore.org\n "
      }
    ]
  },
  {
    "sha": "93310585505058faf47c32080d4a8954290ae4fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzMxMDU4NTUwNTA1OGZhZjQ3YzMyMDgwZDRhODk1NDI5MGFlNGZk",
    "commit": {
      "author": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-14T04:53:51Z"
      },
      "committer": {
        "name": "Max Kaye",
        "email": "m@xk.io",
        "date": "2016-11-14T04:53:51Z"
      },
      "message": "Add much newer checkpoints",
      "tree": {
        "sha": "15903d164ad21401a6a2264a50891b8a9ed7f288",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15903d164ad21401a6a2264a50891b8a9ed7f288"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93310585505058faf47c32080d4a8954290ae4fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93310585505058faf47c32080d4a8954290ae4fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93310585505058faf47c32080d4a8954290ae4fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93310585505058faf47c32080d4a8954290ae4fd/comments",
    "author": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "XertroV",
      "id": 1046448,
      "node_id": "MDQ6VXNlcjEwNDY0NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1046448?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XertroV",
      "html_url": "https://github.com/XertroV",
      "followers_url": "https://api.github.com/users/XertroV/followers",
      "following_url": "https://api.github.com/users/XertroV/following{/other_user}",
      "gists_url": "https://api.github.com/users/XertroV/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XertroV/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XertroV/subscriptions",
      "organizations_url": "https://api.github.com/users/XertroV/orgs",
      "repos_url": "https://api.github.com/users/XertroV/repos",
      "events_url": "https://api.github.com/users/XertroV/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XertroV/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c95a05f8777e21ae09402ec8161a2aa4215bb55b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c95a05f8777e21ae09402ec8161a2aa4215bb55b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c95a05f8777e21ae09402ec8161a2aa4215bb55b"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4d3aac50ebd59bb925ee91ec83e6a13b1366e3cf",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93310585505058faf47c32080d4a8954290ae4fd/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93310585505058faf47c32080d4a8954290ae4fd/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=93310585505058faf47c32080d4a8954290ae4fd",
        "patch": "@@ -151,11 +151,19 @@ class CMainParams : public CChainParams {\n             (225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n             (250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n             (279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-            (295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\")),\n-            1397080064, // * UNIX timestamp of last checkpoint block\n-            36544669,   // * total number of transactions between genesis and last checkpoint\n+            (295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n+            (310000, uint256S(\"0x0000000000000000125a28cc9e9209ddb75718f599a8039f6c9e7d9f1fb021e0\"))\n+            (330000, uint256S(\"0x00000000000000000faabab19f17c0178c754dbed023e6c871dcaf74159c5f02\"))\n+            (350000, uint256S(\"0x0000000000000000053cf64f0400bb38e0c4b3872c38795ddde27acb40a112bb\"))\n+            (370000, uint256S(\"0x000000000000000002cad3026f68357229dd6eaa6bcef6fe5166e1e53b039b8c\"))\n+            (390000, uint256S(\"0x00000000000000000520000e60b56818523479ada2614806ba17ce0bbe6eaded\"))\n+            (410000, uint256S(\"0x0000000000000000060d7ea100ecb75c0a4dc482d05ff19ddaa8046b4b80a458\"))\n+            (430000, uint256S(\"0x000000000000000001868b2bb3a285f3cc6b33ea234eb70facf4dcdf22186b87\"))\n+            (438727, uint256S(\"0x0000000000000000021bc543833785b5765404a40e99e774a31328a5be305373\")),\n+            1479052669, // * UNIX timestamp of last checkpoint block\n+            170361100,  // * total number of transactions between genesis and last checkpoint\n                         //   (the tx=... number in the SetBestChain debug.log lines)\n-            60000.0     // * estimated number of transactions per day after checkpoint\n+            288000.0    // * estimated number of transactions per day after checkpoint\n         };\n     }\n };"
      }
    ]
  }
]