[
  {
    "sha": "53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2IyNmY1NjMyYzhiNzY2ZTAyYzBlYzBiMmMwYzU4NGRiNzNlZDdk",
    "commit": {
      "author": {
        "name": "Alin Rus",
        "email": "alin@fsck.ro",
        "date": "2018-01-12T11:22:50Z"
      },
      "committer": {
        "name": "Alin Rus",
        "email": "alin@fsck.ro",
        "date": "2018-02-13T20:00:41Z"
      },
      "message": "Avoid temporary copies in C++11 ranged-based for loops.\n\nThe ::value_type of the std::map/std::unordered_map containers is\nstd::pair<const Key, T>.\n\nCurrently a lot of loops drop the const from the iterator which forces\nthe compiler to create a copy, this should be avoided by using the auto\nkeyword.\n\nA better explanation can be found in Meyer's Effective Modern C++.\n\nhttps://books.google.de/books?id=rjhIBQAAQBAJ&lpg=PA41&ots=FmZL15vynY&pg=PA41#v=onepage&q&f=false",
      "tree": {
        "sha": "c121d889c2c555fb4179f366f2aa8695c4348772",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c121d889c2c555fb4179f366f2aa8695c4348772"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/comments",
    "author": {
      "login": "flipbitsnotburgers",
      "id": 48412190,
      "node_id": "MDQ6VXNlcjQ4NDEyMTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/48412190?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flipbitsnotburgers",
      "html_url": "https://github.com/flipbitsnotburgers",
      "followers_url": "https://api.github.com/users/flipbitsnotburgers/followers",
      "following_url": "https://api.github.com/users/flipbitsnotburgers/following{/other_user}",
      "gists_url": "https://api.github.com/users/flipbitsnotburgers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flipbitsnotburgers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flipbitsnotburgers/subscriptions",
      "organizations_url": "https://api.github.com/users/flipbitsnotburgers/orgs",
      "repos_url": "https://api.github.com/users/flipbitsnotburgers/repos",
      "events_url": "https://api.github.com/users/flipbitsnotburgers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flipbitsnotburgers/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "flipbitsnotburgers",
      "id": 48412190,
      "node_id": "MDQ6VXNlcjQ4NDEyMTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/48412190?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flipbitsnotburgers",
      "html_url": "https://github.com/flipbitsnotburgers",
      "followers_url": "https://api.github.com/users/flipbitsnotburgers/followers",
      "following_url": "https://api.github.com/users/flipbitsnotburgers/following{/other_user}",
      "gists_url": "https://api.github.com/users/flipbitsnotburgers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flipbitsnotburgers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flipbitsnotburgers/subscriptions",
      "organizations_url": "https://api.github.com/users/flipbitsnotburgers/orgs",
      "repos_url": "https://api.github.com/users/flipbitsnotburgers/repos",
      "events_url": "https://api.github.com/users/flipbitsnotburgers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flipbitsnotburgers/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "d5ca3747bcc6c4e6d086e9b822f0bd337be519db",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
        "patch": "@@ -612,7 +612,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    for (const std::pair<std::string, fs::path>& item : mapBlockFiles) {\n+    for (const auto& item : mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;"
      },
      {
        "sha": "15ecbe4a6eeababca62ae340ca85b2318b6d8c70",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
        "patch": "@@ -80,7 +80,7 @@ class AddressTablePriv\n         cachedAddressTable.clear();\n         {\n             LOCK(wallet->cs_wallet);\n-            for (const std::pair<CTxDestination, CAddressBookData>& item : wallet->mapAddressBook)\n+            for (const auto& item : wallet->mapAddressBook)\n             {\n                 const CTxDestination& address = item.first;\n                 bool fMine = IsMine(*wallet, address);"
      },
      {
        "sha": "9cfaf624aa356795a08d8660c12bb1ab134857e0",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
        "patch": "@@ -623,7 +623,7 @@ void CoinControlDialog::updateView()\n     std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    for (const std::pair<QString, std::vector<COutput>>& coins : mapCoins) {\n+    for (const auto& coins : mapCoins) {\n         CCoinControlWidgetItem *itemWalletAddress = new CCoinControlWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;"
      },
      {
        "sha": "caed9e7f2a51c17e3684896879295cb9ec5424cb",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
        "patch": "@@ -475,7 +475,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n-        for (const std::pair<CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n+        for (const auto& item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n             rec.pushKV(\"address\", item.first.ToString());"
      },
      {
        "sha": "7ac5230f2752b71fbb8cb18f4259d2c16866101e",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
        "patch": "@@ -97,7 +97,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    for (const std::pair<txnouttype, CScript>& tplate : mTemplates)\n+    for (const auto& tplate : mTemplates)\n     {\n         const CScript& script2 = tplate.second;\n         vSolutionsRet.clear();"
      },
      {
        "sha": "cb79a00221aac130e456724c307d3e9528ecc350",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
        "patch": "@@ -3681,7 +3681,7 @@ bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlo\n     // Calculate nChainWork\n     std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n-    for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n+    for (const auto& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n@@ -3748,7 +3748,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     std::set<int> setBlkDataFiles;\n-    for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n+    for (const auto& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {"
      },
      {
        "sha": "691ef97c7b394ea4c082bec846c91e286a5475c4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
        "patch": "@@ -118,7 +118,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     }\n     entry.pushKV(\"bip125-replaceable\", rbfStatus);\n \n-    for (const std::pair<std::string, std::string>& item : wtx.mapValue)\n+    for (const auto& item : wtx.mapValue)\n         entry.pushKV(item.first, item.second);\n }\n \n@@ -392,7 +392,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n \n     // Find all addresses that have the given account\n     UniValue ret(UniValue::VARR);\n-    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+    for (const auto& item : pwallet->mapAddressBook) {\n         const CTxDestination& dest = item.first;\n         const std::string& strName = item.second.name;\n         if (strName == strAccount) {\n@@ -702,7 +702,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n     // Tally\n     CAmount nAmount = 0;\n-    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const auto& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n@@ -763,7 +763,7 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n \n     // Tally\n     CAmount nAmount = 0;\n-    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const auto& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n@@ -1403,7 +1403,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n \n     // Tally\n     std::map<CTxDestination, tallyitem> mapTally;\n-    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const auto& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n \n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n@@ -1435,7 +1435,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n     // Reply\n     UniValue ret(UniValue::VARR);\n     std::map<std::string, tallyitem> mapAccountTally;\n-    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+    for (const auto& item : pwallet->mapAddressBook) {\n         const CTxDestination& dest = item.first;\n         const std::string& strAccount = item.second.name;\n         std::map<CTxDestination, tallyitem>::iterator it = mapTally.find(dest);\n@@ -1898,13 +1898,13 @@ UniValue listaccounts(const JSONRPCRequest& request)\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n     std::map<std::string, CAmount> mapAccountBalances;\n-    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+    for (const auto& entry : pwallet->mapAddressBook) {\n         if (IsMine(*pwallet, entry.first) & includeWatchonly) {  // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n         }\n     }\n \n-    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const auto& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n         CAmount nFee;\n         std::string strSentAccount;\n@@ -1933,7 +1933,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     UniValue ret(UniValue::VOBJ);\n-    for (const std::pair<std::string, CAmount>& accountBalance : mapAccountBalances) {\n+    for (const auto& accountBalance : mapAccountBalances) {\n         ret.pushKV(accountBalance.first, ValueFromAmount(accountBalance.second));\n     }\n     return ret;\n@@ -2043,7 +2043,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     UniValue transactions(UniValue::VARR);\n \n-    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const auto& pairWtx : pwallet->mapWallet) {\n         CWalletTx tx = pairWtx.second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth) {"
      },
      {
        "sha": "ac7070637c4ead507273682b8b9795c6993bacda",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b26f5632c8b766e02c0ec0b2c0c584db73ed7d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=53b26f5632c8b766e02c0ec0b2c0c584db73ed7d",
        "patch": "@@ -3235,7 +3235,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n \n         // Delete destdata tuples associated with address\n         std::string strAddress = EncodeDestination(address);\n-        for (const std::pair<std::string, std::string> &item : mapAddressBook[address].destdata)\n+        for (const auto& item : mapAddressBook[address].destdata)\n         {\n             CWalletDB(*dbw).EraseDestData(strAddress, item.first);\n         }\n@@ -3620,7 +3620,7 @@ std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAcco\n {\n     LOCK(cs_wallet);\n     std::set<CTxDestination> result;\n-    for (const std::pair<CTxDestination, CAddressBookData>& item : mapAddressBook)\n+    for (const auto& item : mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n         const std::string& strName = item.second.name;"
      }
    ]
  }
]