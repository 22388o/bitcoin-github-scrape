prusnak,2020-06-27 08:51:14,"At first sight, it seems that your patch b6b1945005a8205af6781adb8cc258f629417f25 makes more sense.",https://github.com/bitcoin/bitcoin/pull/19362#issuecomment-650525689,650525689,
luke-jr,2020-07-23 22:53:19,"Oh, @promag's solution does look better though.",https://github.com/bitcoin/bitcoin/pull/19362#issuecomment-663270344,663270344,
prusnak,2020-07-24 09:05:48,I replaced my commit with the change suggested @promag in 8c4129b4540f4f739413ed9a6fbfc78afc252f42,https://github.com/bitcoin/bitcoin/pull/19362#issuecomment-663431585,663431585,
promag,2020-07-24 09:23:28,ACK,https://github.com/bitcoin/bitcoin/pull/19362#issuecomment-663442944,663442944,
prusnak,2020-11-23 22:50:01,"Can we decide what to do with this one?\n\nShould we just drop the `CHECK_NONFATAL(g_scan_progress == 0);` line?\n\nI really want this to get into 0.21 @luke-jr @promag ",https://github.com/bitcoin/bitcoin/pull/19362#issuecomment-732471728,732471728,
promag,2020-11-23 23:03:36,"> Should we just drop the `CHECK_NONFATAL(g_scan_progress == 0);` line?\n\n@prusnak I tend to like these invariants, it makes easier to understand the code. I think @luke-jr concern could be addressed by:\n```cpp\nconst int scan_progress = g_scan_progress.exchange(0);\nCHECK_NONFATAL(scan_progress == 0);\n```\nI think @jonasschnelli, @MarcoFalke, @laanwj should take a look too for 0.21.",https://github.com/bitcoin/bitcoin/pull/19362#issuecomment-732476600,732476600,
jonatack,2020-11-24 10:17:16,"Concept ACK. In the absence of test coverage, I agree this should check and fail somewhat loudly if `g_scan_progress` isn't 0 here.",https://github.com/bitcoin/bitcoin/pull/19362#issuecomment-732800203,732800203,
achow101,2020-12-09 16:36:04,Code review ACK 8c4129b4540f4f739413ed9a6fbfc78afc252f42,https://github.com/bitcoin/bitcoin/pull/19362#issuecomment-741891843,741891843,
laanwj,2021-04-16 05:18:22,Sorry for bumping the milestone here again. It seems almost ready for merge (could use one more ACK) but we don't want to rush a backport into 0.21.1.,https://github.com/bitcoin/bitcoin/pull/19362#issuecomment-820912397,820912397,
laanwj,2021-06-24 19:31:29,This came up in the IRC meeting. Adding this to the 22.0 milestone so it can hopefully be included there.,https://github.com/bitcoin/bitcoin/pull/19362#issuecomment-867898270,867898270,
fanquake,2021-07-29 08:24:13,Backported in #22580.,https://github.com/bitcoin/bitcoin/pull/19362#issuecomment-888910711,888910711,
luke-jr,2020-08-01 07:21:53,"If this were to fail, wouldn't it likely block all future reserves?",https://github.com/bitcoin/bitcoin/pull/19362#discussion_r463934011,463934011,src/rpc/blockchain.cpp
promag,2020-08-01 09:11:55,You mean this should be fatal?,https://github.com/bitcoin/bitcoin/pull/19362#discussion_r463942645,463942645,src/rpc/blockchain.cpp
luke-jr,2020-08-01 15:37:26,"Since it should be impossible, maybe simplest solution is to just remove it.\n\nOtherwise, it might need something like:\n```suggestion\n        if (g_scan_progress) {\n            error(""ERROR: g_scan_progress was %s when it should be 0, in %s"", g_scan_progress, __func__);\n            g_scan_progress = 0;\n        }\n```\n\nOr:\n```suggestion\n        if (g_scan_progress) {\n       ",https://github.com/bitcoin/bitcoin/pull/19362#discussion_r463973456,463973456,src/rpc/blockchain.cpp
promag,2020-08-01 21:06:30,"Then this should be `assert(g_scan_progress == 0)`. I don't think all RPC code should use `CHECK_NONFATAL`, at least #17192 doesn't say it.",https://github.com/bitcoin/bitcoin/pull/19362#discussion_r464000364,464000364,src/rpc/blockchain.cpp
MarcoFalke,2021-06-25 09:18:20,"You can restart your node if this fails, but I don't think there is a need to crash the node.",https://github.com/bitcoin/bitcoin/pull/19362#discussion_r658620799,658620799,src/rpc/blockchain.cpp
