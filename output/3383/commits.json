[
  {
    "sha": "33a7f238101f0f43412f40720b2793a1ba9bfa65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2E3ZjIzODEwMWYwZjQzNDEyZjQwNzIwYjI3OTNhMWJhOWJmYTY1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-07-25T23:06:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-23T12:53:10Z"
      },
      "message": "Add support for watch-only addresses\n\nChanges:\n* Add Add/Have WatchOnly methods to CKeyStore, and implementations\n  in CBasicKeyStore.\n* Add similar methods to CWallet, and support entries for it in\n  CWalletDB.\n* Make IsMine in script/wallet return a new enum 'isminetype',\n  rather than a boolean. This allows distinguishing between\n  spendable and unspendable coins.\n* Add a field fSpendable to COutput (GetAvailableCoins' return type).\n* Mark watchonly coins in listunspent as 'watchonly': true.\n* Add 'watchonly' to validateaddress, suppressing script/pubkey/...\n  in this case.\n\nBased on a patch by Eric Lombrozo.",
      "tree": {
        "sha": "76269f667a6a835c3f0fcd084b34ba86d09d3a26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76269f667a6a835c3f0fcd084b34ba86d09d3a26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33a7f238101f0f43412f40720b2793a1ba9bfa65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33a7f238101f0f43412f40720b2793a1ba9bfa65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33a7f238101f0f43412f40720b2793a1ba9bfa65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33a7f238101f0f43412f40720b2793a1ba9bfa65/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22650b7d4051e3302bf03173bbb4b0d4f1d0bf4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22650b7d4051e3302bf03173bbb4b0d4f1d0bf4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22650b7d4051e3302bf03173bbb4b0d4f1d0bf4e"
      }
    ],
    "stats": {
      "total": 298,
      "additions": 231,
      "deletions": 67
    },
    "files": [
      {
        "sha": "dad2b48fc31deadcb53bf70b69cc30f7c5f95b43",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -56,3 +56,15 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     return false;\n }\n \n+bool CBasicKeyStore::AddWatchOnly(const CTxDestination &dest)\n+{\n+    LOCK(cs_KeyStore);\n+    setWatchOnly.insert(dest);\n+    return true;\n+}\n+\n+bool CBasicKeyStore::HaveWatchOnly(const CTxDestination &dest) const\n+{\n+    LOCK(cs_KeyStore);\n+    return setWatchOnly.count(dest) > 0;\n+}"
      },
      {
        "sha": "3d1f42bc9f53b1af6a42512c5049496c05ce6c68",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -10,9 +10,24 @@\n #include \"sync.h\"\n \n #include <boost/signals2/signal.hpp>\n+#include <boost/variant.hpp>\n \n class CScript;\n \n+class CNoDestination {\n+public:\n+    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n+    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n+};\n+\n+/** A txout script template with a specific destination. It is either:\n+ *  * CNoDestination: no destination set\n+ *  * CKeyID: TX_PUBKEYHASH destination\n+ *  * CScriptID: TX_SCRIPTHASH destination\n+ *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n+ */\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+\n /** A virtual base class for key stores */\n class CKeyStore\n {\n@@ -36,17 +51,23 @@ class CKeyStore\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n     virtual bool HaveCScript(const CScriptID &hash) const =0;\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const =0;\n+\n+    // Support for Watch-only addresses\n+    virtual bool AddWatchOnly(const CTxDestination &dest) =0;\n+    virtual bool HaveWatchOnly(const CTxDestination &dest) const =0;\n };\n \n typedef std::map<CKeyID, CKey> KeyMap;\n typedef std::map<CScriptID, CScript > ScriptMap;\n+typedef std::set<CTxDestination> WatchOnlySet;\n \n /** Basic key store, that keeps keys in an address->secret map */\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n     ScriptMap mapScripts;\n+    WatchOnlySet setWatchOnly;\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n@@ -88,6 +109,9 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool AddCScript(const CScript& redeemScript);\n     virtual bool HaveCScript(const CScriptID &hash) const;\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n+\n+    virtual bool AddWatchOnly(const CTxDestination &dest);\n+    virtual bool HaveWatchOnly(const CTxDestination &dest) const;\n };\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;"
      },
      {
        "sha": "9a29999b3684fabd63149522697e5c8270fcfe76",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -494,7 +494,7 @@ void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vect\n     BOOST_FOREACH(const COutPoint& outpoint, vOutpoints)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n-        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, wallet->mapWallet[outpoint.hash].GetDepthInMainChain());\n+        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, wallet->mapWallet[outpoint.hash].GetDepthInMainChain(), true);\n         vOutputs.push_back(out);\n     }\n }\n@@ -513,7 +513,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n     BOOST_FOREACH(const COutPoint& outpoint, vLockedCoins)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n-        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, wallet->mapWallet[outpoint.hash].GetDepthInMainChain());\n+        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, wallet->mapWallet[outpoint.hash].GetDepthInMainChain(), true);\n         vCoins.push_back(out);\n     }\n \n@@ -524,7 +524,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         while (wallet->IsChange(cout.tx->vout[cout.i]) && cout.tx->vin.size() > 0 && wallet->IsMine(cout.tx->vin[0]))\n         {\n             if (!wallet->mapWallet.count(cout.tx->vin[0].prevout.hash)) break;\n-            cout = COutput(&wallet->mapWallet[cout.tx->vin[0].prevout.hash], cout.tx->vin[0].prevout.n, 0);\n+            cout = COutput(&wallet->mapWallet[cout.tx->vin[0].prevout.hash], cout.tx->vin[0].prevout.n, 0, true);\n         }\n \n         CTxDestination address;"
      },
      {
        "sha": "42aa1aeafae0209e4a5a62684ee2b17031d14df7",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -177,6 +177,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"verifychain\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"getrawmempool\"          && n > 0) ConvertTo<bool>(params[0]);\n+    if (strMethod == \"importaddress\"          && n > 2) ConvertTo<bool>(params[2]);\n \n     return params;\n }"
      },
      {
        "sha": "7c8f57b2a13345c2c53f4762110d807b8752b107",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -133,6 +133,51 @@ Value importprivkey(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n+Value importaddress(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 3)\n+        throw runtime_error(\n+            \"importaddress <address> [label] [rescan=true]\\n\"\n+            \"Adds an address that can be watched as if it were in your wallet but cannot be used to spend.\");\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid\u00a0Bitcoin\u00a0address\");\n+    CTxDestination dest;\n+    dest = address.Get();\n+\n+    string strLabel = \"\";\n+    if (params.size() > 1)\n+        strLabel = params[1].get_str();\n+\n+    //\u00a0Whether\u00a0to\u00a0perform\u00a0rescan\u00a0after\u00a0import\n+    bool fRescan = true;\n+    if (params.size() > 2)\n+        fRescan = params[2].get_bool();\n+\n+    {\n+        LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+        // Don't throw error in case an address is already there\n+        if (pwalletMain->HaveWatchOnly(dest))\n+            return Value::null;\n+\n+        pwalletMain->MarkDirty();\n+        pwalletMain->SetAddressBook(dest, strLabel, \"receive\");\n+\n+        if (!pwalletMain->AddWatchOnly(dest))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error\u00a0adding\u00a0address\u00a0to\u00a0wallet\");\n+\n+        if (fRescan)\n+        {\n+            pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+            pwalletMain->ReacceptWalletTransactions();\n+        }\n+    }\n+\n+    return Value::null;\n+}\n+\n Value importwallet(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)"
      },
      {
        "sha": "0553ddc6a3621ffd794bc91b53d032ea3bb9c881",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 21,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -89,36 +89,45 @@ Value getinfo(const Array& params, bool fHelp)\n #ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<Object>\n {\n+private:\n+    isminetype mine;\n+\n public:\n+    DescribeAddressVisitor(isminetype mineIn) : mine(mineIn) {}\n+\n     Object operator()(const CNoDestination &dest) const { return Object(); }\n \n     Object operator()(const CKeyID &keyID) const {\n         Object obj;\n         CPubKey vchPubKey;\n-        pwalletMain->GetPubKey(keyID, vchPubKey);\n         obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-        obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        if (mine == MINE_SPENDABLE) {\n+            pwalletMain->GetPubKey(keyID, vchPubKey);\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n         return obj;\n     }\n \n     Object operator()(const CScriptID &scriptID) const {\n         Object obj;\n         obj.push_back(Pair(\"isscript\", true));\n-        CScript subscript;\n-        pwalletMain->GetCScript(scriptID, subscript);\n-        std::vector<CTxDestination> addresses;\n-        txnouttype whichType;\n-        int nRequired;\n-        ExtractDestinations(subscript, whichType, addresses, nRequired);\n-        obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-        obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-        Array a;\n-        BOOST_FOREACH(const CTxDestination& addr, addresses)\n-            a.push_back(CBitcoinAddress(addr).ToString());\n-        obj.push_back(Pair(\"addresses\", a));\n-        if (whichType == TX_MULTISIG)\n-            obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        if (mine == MINE_SPENDABLE) {\n+            CScript subscript;\n+            pwalletMain->GetCScript(scriptID, subscript);\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            Array a;\n+            BOOST_FOREACH(const CTxDestination& addr, addresses)\n+                a.push_back(CBitcoinAddress(addr).ToString());\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n         return obj;\n     }\n };\n@@ -158,10 +167,11 @@ Value validateaddress(const Array& params, bool fHelp)\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n #ifdef ENABLE_WALLET\n-        bool fMine = pwalletMain ? IsMine(*pwalletMain, dest) : false;\n-        ret.push_back(Pair(\"ismine\", fMine));\n-        if (fMine) {\n-            Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n+        isminetype mine = pwalletMain ? IsMine(*pwalletMain, dest) : MINE_NO;\n+        ret.push_back(Pair(\"ismine\", mine != MINE_NO));\n+        if (mine != MINE_NO) {\n+            ret.push_back(Pair(\"watchonly\", mine == MINE_WATCH_ONLY));\n+            Object detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);\n             ret.insert(ret.end(), detail.begin(), detail.end());\n         }\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))"
      },
      {
        "sha": "49a16cdded3fac0619471e9d80c2de1c2e57537b",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -304,6 +304,7 @@ Value listunspent(const Array& params, bool fHelp)\n         }\n         entry.push_back(Pair(\"amount\",ValueFromAmount(nValue)));\n         entry.push_back(Pair(\"confirmations\",out.nDepth));\n+        entry.push_back(Pair(\"spendable\", out.fSpendable));\n         results.push_back(entry);\n     }\n "
      },
      {
        "sha": "e46ef06681652b90e2f755bda29cc9dc175efaee",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -292,6 +292,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"dumpwallet\",             &dumpwallet,             true,      false,      true },\n     { \"importprivkey\",          &importprivkey,          false,     false,      true },\n     { \"importwallet\",           &importwallet,           false,     false,      true },\n+    { \"importaddress\",          &importaddress,          false,     false,      true },\n     { \"listunspent\",            &listunspent,            false,     false,      true },\n     { \"lockunspent\",            &lockunspent,            false,     false,      true },\n     { \"listlockunspent\",        &listlockunspent,        false,     false,      true },"
      },
      {
        "sha": "860cf530fea205f8d47608de870f8d10a24c8b20",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -118,6 +118,7 @@ extern json_spirit::Value getnettotals(const json_spirit::Array& params, bool fH\n \n extern json_spirit::Value dumpprivkey(const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value importaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value dumpwallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fHelp);\n "
      },
      {
        "sha": "7f3860bc6b6851566063624677bd0b01f678f5ff",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 13,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -1456,36 +1456,57 @@ class CKeyStoreIsMineVisitor : public boost::static_visitor<bool>\n     bool operator()(const CScriptID &scriptID) const { return keystore->HaveCScript(scriptID); }\n };\n \n-bool IsMine(const CKeyStore &keystore, const CTxDestination &dest)\n+isminetype IsMine(const CKeyStore &keystore, const CTxDestination &dest)\n {\n-    return boost::apply_visitor(CKeyStoreIsMineVisitor(&keystore), dest);\n+    if (boost::apply_visitor(CKeyStoreIsMineVisitor(&keystore), dest))\n+        return MINE_SPENDABLE;\n+    if (keystore.HaveWatchOnly(dest))\n+        return MINE_WATCH_ONLY;\n+    return MINE_NO;\n }\n \n-bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n+isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n {\n     vector<valtype> vSolutions;\n     txnouttype whichType;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n+    if (!Solver(scriptPubKey, whichType, vSolutions)) {\n+        if (keystore.HaveWatchOnly(scriptPubKey.GetID()))\n+            return MINE_WATCH_ONLY;\n+        return MINE_NO;\n+    }\n \n     CKeyID keyID;\n     switch (whichType)\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n-        return false;\n+        break;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return keystore.HaveKey(keyID);\n+        if (keystore.HaveKey(keyID))\n+            return MINE_SPENDABLE;\n+        if (keystore.HaveWatchOnly(keyID))\n+            return MINE_WATCH_ONLY;\n+        break;\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        return keystore.HaveKey(keyID);\n+        if (keystore.HaveKey(keyID))\n+            return MINE_SPENDABLE;\n+        if (keystore.HaveWatchOnly(keyID))\n+            return MINE_WATCH_ONLY;\n+        break;\n     case TX_SCRIPTHASH:\n     {\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n-        if (!keystore.GetCScript(CScriptID(uint160(vSolutions[0])), subscript))\n-            return false;\n-        return IsMine(keystore, subscript);\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            isminetype ret = IsMine(keystore, subscript);\n+            if (ret)\n+                return ret;\n+        }\n+        if (keystore.HaveWatchOnly(scriptID))\n+            return MINE_WATCH_ONLY;\n+        break;\n     }\n     case TX_MULTISIG:\n     {\n@@ -1495,10 +1516,15 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         // them) enable spend-out-from-under-you attacks, especially\n         // in shared-wallet situations.\n         vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n-        return HaveKeys(keys, keystore) == keys.size();\n+        if (HaveKeys(keys, keystore) == keys.size())\n+            return MINE_SPENDABLE;\n+        break;\n     }\n     }\n-    return false;\n+\n+    if (keystore.HaveWatchOnly(scriptPubKey.GetID()))\n+        return MINE_WATCH_ONLY;\n+    return MINE_NO;\n }\n \n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)"
      },
      {
        "sha": "d4648b598958051a5f09bce60b89a29887a5a164",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 11,
        "deletions": 17,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -9,14 +9,14 @@\n #include \"bignum.h\"\n #include \"key.h\"\n #include \"util.h\"\n+#include \"keystore.h\"\n \n #include <stdexcept>\n #include <stdint.h>\n #include <string>\n #include <vector>\n \n #include <boost/foreach.hpp>\n-#include <boost/variant.hpp>\n \n class CCoins;\n class CKeyStore;\n@@ -43,6 +43,14 @@ enum\n     SCRIPT_VERIFY_NOCACHE   = (1U << 3), // do not store results in signature cache (but do query it)\n };\n \n+/** IsMine() return codes */\n+enum isminetype\n+{\n+    MINE_NO = 0,\n+    MINE_WATCH_ONLY = 1,\n+    MINE_SPENDABLE = 2,\n+};\n+\n enum txnouttype\n {\n     TX_NONSTANDARD,\n@@ -54,20 +62,6 @@ enum txnouttype\n     TX_NULL_DATA,\n };\n \n-class CNoDestination {\n-public:\n-    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n-    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n-};\n-\n-/** A txout script template with a specific destination. It is either:\n- *  * CNoDestination: no destination set\n- *  * CKeyID: TX_PUBKEYHASH destination\n- *  * CScriptID: TX_SCRIPTHASH destination\n- *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n- */\n-typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n-\n const char* GetTxnOutputType(txnouttype t);\n \n /** Script opcodes */\n@@ -691,8 +685,8 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n-bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-bool IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);"
      },
      {
        "sha": "e0033c07db7a5186b524d0fefdaafbf88d4c93c1",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -40,7 +40,7 @@ static void add_coin(int64_t nValue, int nAge = 6*24, bool fIsFromMe = false, in\n         wtx->fDebitCached = true;\n         wtx->nDebitCached = 1;\n     }\n-    COutput output(wtx, nInput, nAge);\n+    COutput output(wtx, nInput, nAge, true);\n     vCoins.push_back(output);\n }\n "
      },
      {
        "sha": "1633449a72ca8b25b084f50ba778832cebbac0a4",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 8,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -119,6 +119,22 @@ bool CWallet::AddCScript(const CScript& redeemScript)\n     return CWalletDB(strWalletFile).WriteCScript(Hash160(redeemScript), redeemScript);\n }\n \n+bool CWallet::AddWatchOnly(const CTxDestination &dest)\n+{\n+    if (!CCryptoKeyStore::AddWatchOnly(dest))\n+        return false;\n+    nTimeFirstKey = 1; // No birthday information for watch-only keys.\n+    if (!fFileBacked)\n+        return true;\n+    return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n+}\n+\n+bool CWallet::LoadWatchOnly(const CTxDestination &dest)\n+{\n+    LogPrintf(\"Loaded %s!\\n\", CBitcoinAddress(dest).ToString().c_str());\n+    return CCryptoKeyStore::AddWatchOnly(dest);\n+}\n+\n bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n {\n     CCrypter crypter;\n@@ -555,7 +571,7 @@ void CWallet::EraseFromWallet(const uint256 &hash)\n }\n \n \n-bool CWallet::IsMine(const CTxIn &txin) const\n+isminetype CWallet::IsMine(const CTxIn &txin) const\n {\n     {\n         LOCK(cs_wallet);\n@@ -564,11 +580,10 @@ bool CWallet::IsMine(const CTxIn &txin) const\n         {\n             const CWalletTx& prev = (*mi).second;\n             if (txin.prevout.n < prev.vout.size())\n-                if (IsMine(prev.vout[txin.prevout.n]))\n-                    return true;\n+                return IsMine(prev.vout[txin.prevout.n]);\n         }\n     }\n-    return false;\n+    return MINE_NO;\n }\n \n int64_t CWallet::GetDebit(const CTxIn &txin) const\n@@ -1019,7 +1034,7 @@ int64_t CWallet::GetImmatureBalance() const\n     return nTotal;\n }\n \n-// populate vCoins with vector of spendable COutputs\n+// populate vCoins with vector of available COutputs.\n void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl) const\n {\n     vCoins.clear();\n@@ -1040,10 +1055,13 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 continue;\n \n             for (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n-                if (!(pcoin->IsSpent(i)) && IsMine(pcoin->vout[i]) &&\n+                isminetype mine = IsMine(pcoin->vout[i]);\n+                if (!(pcoin->IsSpent(i)) && mine != MINE_NO &&\n                     !IsLockedCoin((*it).first, i) && pcoin->vout[i].nValue > 0 &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected((*it).first, i)))\n-                        vCoins.push_back(COutput(pcoin, i, pcoin->GetDepthInMainChain()));\n+                {\n+                    vCoins.push_back(COutput(pcoin, i, pcoin->GetDepthInMainChain(), mine == MINE_SPENDABLE));\n+                }\n             }\n         }\n     }\n@@ -1110,8 +1128,11 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n-    BOOST_FOREACH(COutput output, vCoins)\n+    BOOST_FOREACH(const COutput &output, vCoins)\n     {\n+        if (!output.fSpendable)\n+            continue;\n+\n         const CWalletTx *pcoin = output.tx;\n \n         if (output.nDepth < (pcoin->IsFromMe() ? nConfMine : nConfTheirs))"
      },
      {
        "sha": "8586869abf70fa3d6d874fc3242c0d00afd2da8e",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -201,6 +201,11 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     /// Look up a destination data tuple in the store, return true if found false otherwise\n     bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n \n+    // Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnly(const CTxDestination &dest);\n+    // Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadWatchOnly(const CTxDestination &dest);\n+\n     bool Unlock(const SecureString& strWalletPassphrase);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n@@ -256,9 +261,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n-    bool IsMine(const CTxIn& txin) const;\n+    isminetype IsMine(const CTxIn& txin) const;\n     int64_t GetDebit(const CTxIn& txin) const;\n-    bool IsMine(const CTxOut& txout) const\n+    isminetype IsMine(const CTxOut& txout) const\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n@@ -756,10 +761,11 @@ class COutput\n     const CWalletTx *tx;\n     int i;\n     int nDepth;\n+    bool fSpendable;\n \n-    COutput(const CWalletTx *txIn, int iIn, int nDepthIn)\n+    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn;\n+        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n     }\n \n     std::string ToString() const"
      },
      {
        "sha": "1db0a69c84e307d86a65e567362d9ba762e2c7b0",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -114,6 +114,12 @@ bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n     return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n }\n \n+bool CWalletDB::WriteWatchOnly(const CTxDestination &dest)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::make_pair(std::string(\"watch\"), CBitcoinAddress(dest).ToString()), '1');\n+}\n+\n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n     nWalletDBUpdated++;\n@@ -414,6 +420,19 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                     wss.fAnyUnordered = true;\n             }\n         }\n+        else if (strType == \"watch\")\n+        {\n+            std::string strAddress;\n+            ssKey >> strAddress;\n+            char fYes;\n+            ssValue >> fYes;\n+            if (fYes == '1')\n+                pwallet->LoadWatchOnly(CBitcoinAddress(strAddress).Get());\n+\n+            // Watch-only addresses have no birthday information for now,\n+            // so set the wallet birthday to the beginning of time.\n+            pwallet->nTimeFirstKey = 1;\n+        }\n         else if (strType == \"key\" || strType == \"wkey\")\n         {\n             CPubKey vchPubKey;"
      },
      {
        "sha": "9d4970fe9f953a3b7238b45184454bd4eb6cf526",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a7f238101f0f43412f40720b2793a1ba9bfa65/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"db.h\"\n #include \"key.h\"\n+#include \"keystore.h\"\n \n #include <list>\n #include <stdint.h>\n@@ -93,6 +94,8 @@ class CWalletDB : public CDB\n \n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n+    bool WriteWatchOnly(const CTxDestination &dest);\n+\n     bool WriteBestBlock(const CBlockLocator& locator);\n     bool ReadBestBlock(CBlockLocator& locator);\n "
      }
    ]
  },
  {
    "sha": "c1e048fbe4b59ffc539eb2e7b11d3dd5ae4abff6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWUwNDhmYmU0YjU5ZmZjNTM5ZWIyZTdiMTFkM2RkNWFlNGFiZmY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-10T14:27:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-23T12:53:12Z"
      },
      "message": "qt: Hide unspendable outputs in coin control",
      "tree": {
        "sha": "fb441619170fb1df96c35218573056c96d875c83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb441619170fb1df96c35218573056c96d875c83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1e048fbe4b59ffc539eb2e7b11d3dd5ae4abff6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e048fbe4b59ffc539eb2e7b11d3dd5ae4abff6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e048fbe4b59ffc539eb2e7b11d3dd5ae4abff6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e048fbe4b59ffc539eb2e7b11d3dd5ae4abff6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33a7f238101f0f43412f40720b2793a1ba9bfa65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33a7f238101f0f43412f40720b2793a1ba9bfa65"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0d852abbb3b58419feaaf3539a7031eb8884dd82",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e048fbe4b59ffc539eb2e7b11d3dd5ae4abff6/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e048fbe4b59ffc539eb2e7b11d3dd5ae4abff6/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=c1e048fbe4b59ffc539eb2e7b11d3dd5ae4abff6",
        "patch": "@@ -58,7 +58,8 @@ qint64 WalletModel::getBalance(const CCoinControl *coinControl) const\n         std::vector<COutput> vCoins;\n         wallet->AvailableCoins(vCoins, true, coinControl);\n         BOOST_FOREACH(const COutput& out, vCoins)\n-            nBalance += out.tx->vout[out.i].nValue;\n+            if(out.fSpendable)\n+                nBalance += out.tx->vout[out.i].nValue;\n \n         return nBalance;\n     }\n@@ -528,7 +529,8 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         }\n \n         CTxDestination address;\n-        if(!ExtractDestination(cout.tx->vout[cout.i].scriptPubKey, address)) continue;\n+        if(!out.fSpendable || !ExtractDestination(cout.tx->vout[cout.i].scriptPubKey, address))\n+            continue;\n         mapCoins[CBitcoinAddress(address).ToString().c_str()].push_back(out);\n     }\n }"
      },
      {
        "sha": "e7c870235bc455189a17d53191e7063860b2c16b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e048fbe4b59ffc539eb2e7b11d3dd5ae4abff6/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e048fbe4b59ffc539eb2e7b11d3dd5ae4abff6/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=c1e048fbe4b59ffc539eb2e7b11d3dd5ae4abff6",
        "patch": "@@ -1224,6 +1224,8 @@ bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsign\n     {\n         BOOST_FOREACH(const COutput& out, vCoins)\n         {\n+            if(!out.fSpendable)\n+                continue;\n             nValueRet += out.tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n         }"
      }
    ]
  }
]