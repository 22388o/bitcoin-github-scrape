promag,2020-04-12 00:18:24,"Concept ACK\n\ninterface_bitcoin_cli.py  fails in no wallet job.",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-612541685,612541685,
fanquake,2020-04-12 02:49:35,"It seems this is in part reverting changes that were just merged in #18574 (split out of #18453), and refactoring to handle multiwallet.\n\nI understand splitting up changes, and maybe it doesn't matter so much in this instance, but it's a bit of code/review churn if we're PR'ing and merging refactors only to essentially undo the changes and do something else in a different PR a few hours later.",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-612554560,612554560,
jonatack,2020-04-12 10:01:20,"I empathise. See https://github.com/bitcoin/bitcoin/pull/18453#issuecomment-611429161.  #18574 was the only change that seemed to have consensus, so it seemed best to split it out for merge and propose client-side code in this PR to test and compare with the server-side code in #18453.\n\nEDIT: This PR no longer touches the changes merged in #18574.",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-612591094,612591094,
DrahtBot,2020-04-12 13:17:16,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #16439 (RPC: support ""@height"" in place of blockhash for getblock etc by ajtowns)\n\nIf you consider this pull request imp",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-612612881,612612881,
jonatack,2020-04-12 21:35:23,"Updated with the following:\n- ensure it works when built without the wallet\n- extract the connection try/wait/failure logic to be callable for each connection, so we can use this for calling `listwallets` and `getbalances` to be more robust\n- drop an unused arg in `JSONRPCProcessBatchReply` as requested in https://github.com/bitcoin/bitcoin/pull/18574#discussion_r406526973\n",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-612679275,612679275,
jnewbery,2020-04-13 19:27:38,Concept and approach ACK.,https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-613055178,613055178,
michaelfolkson,2020-04-18 14:09:09,"ACK ea59b18387c4b26240e1f087c568408922b3c940\n\nBuilt, ran tests, tested manually by creating new wallet, transferring funds to it and unloading. Light code review.",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-615877831,615877831,
jonatack,2020-04-20 18:01:57,"PR updated per @promag's review feedback to display wallet names and balances for all loaded wallets when more than one wallet is loaded (e.g. you are in ""multiwallet mode"") and `-rpcwallet=` is not passed; otherwise, behavior is unchanged. @fanquake, this PR no longer touches the changes in #18574.\n\n@jnewbery, @promag, @michaelfolkson, can you please re-review?",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-616719195,616719195,
jb55,2020-04-20 22:08:48,"Concept ACK, but I wonder why in 208be5a811eee4f4d4d336a9e47c2b36760621b5 this is hardcoded to `getinfo`? Couldn't this be generalized to any command with almost no extra work (return results grouped by wallet name), or am I missing something?\n\nedit: hmm after reading some of the linked issues it looks like this is trying to achieve something very specific, but my suggestion could be a future ",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-616837752,616837752,
jonatack,2020-04-20 22:20:17,"Thanks @jb55, I agree, but there isn't currently consensus on what the server-side API interface should be and if one should be done at all. I learned from the first PR that a client-side version embedded into `-getinfo` as proposed here will be easier to merge due to more clear consensus and because it isn't subject to API constraints. I see this as a solution that can be merged now, and maybe a ",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-616841992,616841992,
brakmic,2020-04-30 15:46:27,"ACK https://github.com/bitcoin/bitcoin/commit/9fa9882fbbf4324f36cbf1008642adf43436be53\n\nBuilt, run and tested on macOS Catalina 10.15.4\nManual testing with several wallets successful:\n\n```shell\n./src/bitcoin-cli -regtest -getinfo\n{\n  ""version"": 209900,\n  ""blocks"": 205,\n  ""headers"": 205,\n  ""verificationprogress"": 1,\n  ""timeoffset"": 0,\n  ""connections"": 0,\n  ""proxy"": """",\",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-621937422,621937422,
jonatack,2020-05-04 11:40:30,"Thanks everyone for the reviews and @jnewbery for the excellent suggestions -- done and also moved the `GetWalletBalances` code to its own function and added Doxygen documentation for it and `ConnectAndCallRPC`.\n\n<details>\n<summary>Changes: git diff 9fa9882 2e7d8b9</summary>\n<p>\n\n```diff\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp\nindex 86271c4271..a3302835c3 100644\n--",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-623413739,623413739,
jonatack,2020-05-20 08:33:47,"Thank you @jnewbery, I appreciate your outstanding reviewing and applied your suggestions. I also applied Clang formatting to the PR changeset. Here are the changes since the last push:\n\n<details><summary><code>git diff 2e7d8b9 0af7d3a</code></summary><p>\n\n```diff\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp\nindex a3302835c3..feea064be9 100644\n--- a/src/bitcoin-cli.cpp\n++",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-631326666,631326666,
jnewbery,2020-05-20 21:57:20,"@jonatack thanks for being so responsive to review, and well done for catching the nasty bug in my previous suggestion! (https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428327325).\n\nI have one final suggestion: switch out the c-style `char *` arguments for `Optional<std::string>`s. Using `std::string` seems better in almost all cases.",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-631749247,631749247,
jonatack,2020-05-21 08:41:49,"Thank you @jnewbery and @luke-jr for your excellent reviews and suggestions. I'll take more heed henceforth of the developer notes' warning about `c_str()`. Updated to use `Optional<std::string>` as per the following diff. Aside from a release note if merged, this PR should hopefully be ready.\n\n<details><summary><code>git diff 0af7d3a 5edad5c</code></summary><p>\n\n```diff\ndiff --git a/src",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-631964285,631964285,
promag,2020-05-21 11:08:21,"Tested ACK 5edad5ce5d3f15b694bf3fad0300c6446674b554.\n\nDoes it make sense sum up balances and always have the `balance`?",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-632026269,632026269,
jonatack,2020-05-21 13:50:58,"@promag why not (for a follow-up):\n```json\n  ""balance"": 0.00003714,\n  ""balances"": {\n    """": 0.00001000,\n    ""Encrypted"": 0.00003500,\n    ""day-to-day"": 0.00000120,\n    ""side project"": 0.00000094\n  }\n}\n```\nWhat I miss with -getinfo in single-wallet mode is showing the wallet name. At some point a common interface like the above for both modes might be good, to always see the wa",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-632097755,632097755,
jnewbery,2020-05-21 15:33:33,"utACK 5edad5ce5d3f15b694bf3fad0300c6446674b554\n\nThanks for being patient with my iterative reviews!",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-632156979,632156979,
jonatack,2020-05-22 08:31:46,"Thanks @jnewbery, @promag and @luke-jr for reviewing. I'll add a commit to the release note follow-up that tightens up the -getinfo command parsing and adds a test as per https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428790740.",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-632570115,632570115,
instagibbs,2020-05-22 19:06:16,concept ACK,https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-632863412,632863412,
jonatack,2020-05-28 12:03:34,"> Agree that a release note followup which can include a few other things would be good\n\nThanks -- done in #19089 and #19354.",https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-635296774,635296774,
jnewbery,2020-04-13 19:27:11,"After commit _cli: extract connection try/wait/failure logic_, this throw no longer gets caught.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r407669164,407669164,src/bitcoin-cli.cpp
jonatack,2020-04-13 21:24:53,"Thanks @jnewbery, good catch on the throw! Updated that commit as per:\n<details><summary>git diff e9a271b ed06899</summary>\n<p>\n\n```diff\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp\nindex 53c6f3a655..18317574ad 100644\n--- a/src/bitcoin-cli.cpp\n+++ b/src/bitcoin-cli.cpp\n@@ -419,6 +420,13 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& str",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r407730476,407730476,src/bitcoin-cli.cpp
promag,2020-04-17 00:28:22,"c2d63a8c05e14cdfdaae2ebca7a6b38907c31f1c\n\n```diff\n     const size_t num {in.size()};\n     std::vector<UniValue> batch(num);\n-    for (size_t i=0; i<num; ++i) {\n-        const UniValue &rec = in[i];\n+    for (const UniValue &rec : in.getValues()) {\n         if (!rec.isObject()) {\n             throw std::runtime_error(""Batch member must be an object"");\n```",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409924320,409924320,src/rpc/request.cpp
promag,2020-04-17 00:42:36,"Any reason to drop this (and break existing scripts)? Especially when `-rpcwallet` is set - and in this case all balances aren't even necessary. And if `-rpcwallet` is not set but `listwallets` gives just one wallet then it could still show `""balance"": ` after all, the  server is defaulting to the unique one.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409928476,409928476,src/bitcoin-cli.cpp
jonatack,2020-04-17 00:59:03,"Thanks for reviewing @promag. I don't know if API stability with `-getinfo` is an issue if it's intended for human use. ISTM it's better to display the balances consistently, whether one wallet or several?",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409932607,409932607,src/bitcoin-cli.cpp
jonatack,2020-04-17 01:09:43,That's better -- thanks! Done.,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409935493,409935493,src/rpc/request.cpp
promag,2020-04-17 01:10:42,"I mean that you could leave ""balance"" untouched and just add `balances`. Later we could drop it. Only a suggestion, but\n 1. if `-rpcwallet` is set why show all balances? Sounds conceptually wrong. Note that `getwalletinfo` uses that (or are you planning to call `getwalletinfo` for all wallets?)\n 2. this is not an API but it's a command people can use in scripts so why break it for no good reas",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409935767,409935767,src/bitcoin-cli.cpp
promag,2020-04-17 10:32:52,"Note that if multiple wallets are loaded and if `-rpcwallet` is not set then `getwalletinfo` fails, which results in not displaying `keypoolsize` and `paytxfee`.\n\nSo I think if `-rpcwallet` is set (or just one wallet is loaded), `balances` shouldn't be displayed.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r410137980,410137980,src/bitcoin-cli.cpp
jonatack,2020-04-20 17:55:59,Done,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r411577488,411577488,src/bitcoin-cli.cpp
jnewbery,2020-05-01 21:58:45,It seems a bit confusing to have two different ways to specify the wallet here (an entry in the global gArgs key-value store and a function parameter). Can you make the outer `CommandLineRPC()` function parse the command line `-rpcwallet` argument and pass it into `ConnectAndCallRPC()` function?,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418755690,418755690,src/bitcoin-cli.cpp
jnewbery,2020-05-01 22:06:53,"observation: using throw/catch for control flow is generally considered an anti-pattern. This whole function could be tidied up by changing this block to `UninterruptibleSleep(std::chrono::milliseconds{1000}); continue;`.\n\n(This PR simply moves this code to its own function, so don't feel obligated to change this. It could be done as a follow-up, or not at all!)",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418758128,418758128,src/bitcoin-cli.cpp
jnewbery,2020-05-01 22:12:03,This line is over-indented. Should be aligned with the line above.,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418759568,418759568,src/bitcoin-cli.cpp
jnewbery,2020-05-01 23:20:04,`args` is always going to be empty here (see L239). Can you change this to an empty vector? (same for `ConnectAndCallRPRC()` call below),https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418776436,418776436,src/bitcoin-cli.cpp
jnewbery,2020-05-01 23:37:50,Nice tidy up!,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418779897,418779897,src/rpc/request.cpp
jonatack,2020-05-04 11:32:23,"Thanks, John. I tried but it wasn't working out in a way that was tidier, so leaving it be for now.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419371519,419371519,src/bitcoin-cli.cpp
jonatack,2020-05-04 11:34:05,"Oops, thanks John! Fixed.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419372263,419372263,src/bitcoin-cli.cpp
jonatack,2020-05-04 11:35:41,Done.,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419373024,419373024,src/bitcoin-cli.cpp
jonatack,2020-05-04 11:36:36,Great point. Done; much better.,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419373451,419373451,src/bitcoin-cli.cpp
jnewbery,2020-05-19 17:36:01,nit: this comment line for `rpcwallet` appears one commit too early. It should be added in `cli: lift -rpcwallet logic up to CommandLineRPC()`,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427479949,427479949,src/bitcoin-cli.cpp
jnewbery,2020-05-19 18:31:17,"Calling the same function with mostly the same params in the if and else branch seems redundant. How about:\n\n```suggestion\n        const char* wallet_name = nullptr;\n        if (gArgs.IsArgSet(""-rpcwallet"")) wallet_name = gArgs.GetArg(""-rpcwallet"", """").c_str();\n\n        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, wallet_name);\n```\n\nor even:\n\n```\n       ",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427514316,427514316,src/bitcoin-cli.cpp
jnewbery,2020-05-19 18:35:28,"nit: this is an in/out parameter, since it gets appended to by the function.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427516770,427516770,src/bitcoin-cli.cpp
jnewbery,2020-05-19 18:39:56,"prefer using `MakeUnique` to construct objects owned by unique pointers:\n\n```suggestion\n    std::unique_ptr<BaseRequestHandler> rh{MakeUnique<DefaultRequestHandler>()};\n```",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427519334,427519334,src/bitcoin-cli.cpp
jnewbery,2020-05-19 18:42:57,"nit: no need to construct a local variable. Use a temporary:\n\n```suggestion\n    const UniValue listwallets = ConnectAndCallRPC(rh.get(), ""listwallets"", /* args=*/{});\n```\n\nSame in the call to `ConnectAndCallRPC()` below.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427521181,427521181,src/bitcoin-cli.cpp
jnewbery,2020-05-19 18:54:19,"nit: I prefer to exit early rather than put the mainline case inside an `if` block. That helps avoid overnesting (not an issue here), and I think it also communicates the intent a bit better:\n\n```\nif (!find_value(listwallets, ""error"").isNull() || wallets.size() <= 1) return;\nUnivalue balances(UniValue::VIBJ);\n...\n```",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427527927,427527927,src/bitcoin-cli.cpp
jonatack,2020-05-20 07:57:23,Good catch! Fixed.,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427812565,427812565,src/bitcoin-cli.cpp
jonatack,2020-05-20 07:58:15,Thanks. Replaced with just `@param`.,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427813067,427813067,src/bitcoin-cli.cpp
jonatack,2020-05-20 07:58:55,"TIL, thank you! Updated.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427813490,427813490,src/bitcoin-cli.cpp
jonatack,2020-05-20 07:59:23,Done.,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427813767,427813767,src/bitcoin-cli.cpp
jonatack,2020-05-20 08:03:56,"I agree (fan of guard clauses myself) but the conditional becomes a bit less readable to my eye going from an and to a negative or, so separated it into two guard conditionals (I'm admittedly not sure it's actually more readable that way.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427816362,427816362,src/bitcoin-cli.cpp
jonatack,2020-05-20 08:18:29,"I wanted to do this as well, but with C-style strings it causes issues (unless wrapped in the same block scope IIRC) and `test/functional/wallet_multiwallet.py --usecli` fails.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427825073,427825073,src/bitcoin-cli.cpp
jonatack,2020-05-20 08:26:33,Inlined the wallet_name logic as a ternary in one call.,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427830111,427830111,src/bitcoin-cli.cpp
jnewbery,2020-05-20 21:48:48,"My suggestion has a horrible bug, which only revealed itself when the wallet name is long enough. `c_str()` returns a `char*` that's only valid as long as the underlying `std::string` is in scope. In `gArgs.GetArg(""-rpcwallet"", """").c_str()`, the `gArgs.GetArg(""-rpcwallet"", """")` is a temporary that goes out of scope as soon as the statement ends, so `wallet_name` is pointing to freed memory. For sh",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428327325,428327325,src/bitcoin-cli.cpp
jnewbery,2020-05-20 21:50:02,"I think it's fine like that, but this is really a matter of personal taste. You should go with whichever way you prefer.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428327866,428327866,src/bitcoin-cli.cpp
luke-jr,2020-05-21 03:48:38,Why are you changing this?,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428429846,428429846,src/bitcoin-cli.cpp
luke-jr,2020-05-21 03:55:19,"Scoping issue. `wallet_name` will be an out-of-scope temporary here.\n\nSuggest just passing it as an arg, and using the UniValue in pushKV below.\n\n```C++\n    for (const UniValue& wallet : wallets.getValues()) {\n        const UniValue getbalances = ConnectAndCallRPC(rh.get(), ""getbalances"", /* args=*/{}, wallet.get_str().c_str());\n        const UniValue& balance = find_value(getbalance",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428431356,428431356,src/bitcoin-cli.cpp
jonatack,2020-05-21 07:57:36,"`IsArgSet()` seemed more appropriate than `GetBoolArg()` as we don't need the value, only to know if the arg is set (and `IsArgSet()` is used elsewhere in this file for the same purpose). Updated the commit message to say why.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428503351,428503351,src/bitcoin-cli.cpp
jonatack,2020-05-21 08:00:57,"Good catch, thanks! Switched to `std::string` after taking @jnewbery's suggestion to switch to using `Optional<std::string>` for the `rpcwallet` parameter.",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428504785,428504785,src/bitcoin-cli.cpp
jonatack,2020-05-21 08:06:39,"Thanks, John! Much better. Suggestions gratefully taken, passed as const reference (per https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-in), added the explicit `#include <optional.h>` header, and changed `GetWalletBalances` to pass `const std::string wallet_name`.\n\nEdit: since much of the time `rpcwallet` is nullptr, I'm not sure whether it's better in this case to pass by valu",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428507172,428507172,src/bitcoin-cli.cpp
jonatack,2020-05-21 08:08:01,(I had run into this `c_str()` issue 3 weeks ago and wondered what the better solution was. Thanks again!),https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428507752,428507752,src/bitcoin-cli.cpp
luke-jr,2020-05-21 14:09:03,Pretty sure this will do the wrong thing with `-nogetinfo` or `-getinfo=0` ?,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428674779,428674779,src/bitcoin-cli.cpp
jonatack,2020-05-21 14:28:07,"Thanks -- with your examples and `IsArgSet`, it runs as if `-getinfo` was passed. With `GetBoolArg`, it raises with ""error: too few parameters (need at least command)"". If that is the desired behavior, then ISTM I should not only revert this change but also use `GetBoolArg` at line 569 and update the tests to cover this. Confirm?",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428686632,428686632,src/bitcoin-cli.cpp
jonatack,2020-05-21 17:08:41,"Added a regression test since this was failing silently and will parse the `-getinfo` and `-rpcwallet` command args as before. Thanks @luke-jr for the catch! Edit: to keep the reviews, will do in the follow-up to also add a release note.\n\n```diff\n--- a/src/bitcoin-cli.cpp\n+++ b/src/bitcoin-cli.cpp\n@@ -532,7 +532,7 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n      ",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428790740,428790740,src/bitcoin-cli.cpp
jnewbery,2020-05-22 15:42:10,"Seems fine, although this is a pretty pathological case. Why would anyone ever call `bitcoin-cli -nogetinfo`?",https://github.com/bitcoin/bitcoin/pull/18594#discussion_r429321046,429321046,src/bitcoin-cli.cpp
jonatack,2020-05-28 12:02:38,Fix and test coverage added in #19089,https://github.com/bitcoin/bitcoin/pull/18594#discussion_r431783474,431783474,src/bitcoin-cli.cpp
