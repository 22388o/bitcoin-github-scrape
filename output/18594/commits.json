[
  {
    "sha": "29f2cbdeb7afdde87d108adf80cffad17d112632",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWYyY2JkZWI3YWZkZGU4N2QxMDhhZGY4MGNmZmFkMTdkMTEyNjMy",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-04-12T19:01:29Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-05-21T08:23:48Z"
      },
      "message": "cli: extract connection exception handler, -rpcwait logic\n\nto ConnectAndCallRPC() to be callable for individual connections.\n\nThis is needed for RPCs that need to be called and handled sequentially, rather\nthan alone or in a batch.\n\nFor example, when fetching the balances for each loaded wallet, -getinfo will\ncall RPC listwallets, and then, depending on the result, RPC getbalances.\n\nIt may be somewhat helpful to review this commit with `git show -w`.",
      "tree": {
        "sha": "b18b3a52603185312b0c28f01c2095abd889fbd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b18b3a52603185312b0c28f01c2095abd889fbd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29f2cbdeb7afdde87d108adf80cffad17d112632",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl7GOq4ACgkQT1chs9Dj\nkh2zrw//ZoNhymaxKkMSVOo6M5ZI/ySoNsOmY0AxStvMIFQe3LwlC6nM33dxKoMU\nLCfKiIj4hqb5EfrAVXnbVQP6ICV2g+j8Y1le3hDER23NyTTDMxfqj4DVlLi9Tjqr\ngQ5NOBQYhDrxXcM8M17DNhvEjDAgX8sjxMD08yykZAeZ+U8w+bnrQ8eUaQkFOAFz\n/4xbRELgCeecxRyeWtOSSU6WDpkJi9XsuViqmpJ4PtpByBdO2AWkaQw33mr3areI\nEsclAviSV1V+UjNTOTajpAiZvQSRdJgPb24CeXidpqrF0ScSPOdeZ2ByL8Dc+Uj2\ncfj4kTEMDHKQe98bgKWRHOKjLL6Eq+Wla6XPuKI1zfpwwqAfrGk/zAHVCNnh1JAi\n+EmraAXCi+k4dnbo6hCjEPgPD6fmUPSW4QYFMGNrOWRSNIZksxTaZimjMHwEf1nj\nMG68RlSq4vrpez2abdfNBRkKUHFm7bcnMtVB1fcSQv9DIbmM/bWbiK1vqYEZkYDE\n9m9v4VhhLfi/zLcouWkNGkrgjVt6W2xaQjgdkxsUZQ7Vk7sgxIZiozkWwm1wZ1m2\n/swsTAM5KFm5xJKjyNn2Rpg2rd0GAillIOAJQVcRLRKmFPcjMfBVky7skSO4OsS9\nns18n+V4L6S8Z85O6whmmxEOs6nQ88tRQHCZsI9z49Yi5qM7K5w=\n=oT1F\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDelcWPX/tRtm1F9zMuzPgRjnSVWLcYNHkbUvQTZ+vgOCP/wEGBdHGPW63Ix\nZtU+zbafduAI8QRexjqw8AiHxtEHKH+RMQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEK1GgpjGaaWJk5oOvAas\naysI8QRexjqw8Ag0fKI/zg0UMACD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2Fs\nZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEMBFkhKvJkSxb+yBOZE3nh8I8QRexjqx\n8AjH5u23OQtTbACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDQrphPkbZocKAf7UTC1GzYCPEEXsY6sfAIQen6\nW9FVeEIAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree b18b3a52603185312b0c28f01c2095abd889fbd6\nparent 5f19155e5bca37bf1fe14515758c6f589f6806ae\nauthor Jon Atack <jon@atack.com> 1586718089 +0200\ncommitter Jon Atack <jon@atack.com> 1590049428 +0200\n\ncli: extract connection exception handler, -rpcwait logic\n\nto ConnectAndCallRPC() to be callable for individual connections.\n\nThis is needed for RPCs that need to be called and handled sequentially, rather\nthan alone or in a batch.\n\nFor example, when fetching the balances for each loaded wallet, -getinfo will\ncall RPC listwallets, and then, depending on the result, RPC getbalances.\n\nIt may be somewhat helpful to review this commit with `git show -w`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29f2cbdeb7afdde87d108adf80cffad17d112632",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29f2cbdeb7afdde87d108adf80cffad17d112632",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29f2cbdeb7afdde87d108adf80cffad17d112632/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f19155e5bca37bf1fe14515758c6f589f6806ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f19155e5bca37bf1fe14515758c6f589f6806ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f19155e5bca37bf1fe14515758c6f589f6806ae"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 64,
      "deletions": 51
    },
    "files": [
      {
        "sha": "fd3a007dbb1b3c0c18182512c53c6998908a5de2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 51,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29f2cbdeb7afdde87d108adf80cffad17d112632/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29f2cbdeb7afdde87d108adf80cffad17d112632/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=29f2cbdeb7afdde87d108adf80cffad17d112632",
        "patch": "@@ -418,6 +418,40 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        } catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n static int CommandLineRPC(int argc, char *argv[])\n {\n     std::string strPrint;\n@@ -485,62 +519,41 @@ static int CommandLineRPC(int argc, char *argv[])\n             method = args[0];\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n-\n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n-                    }\n-                } else {\n-                    // Result\n-                    if (result.isNull())\n-                        strPrint = \"\";\n-                    else if (result.isStr())\n-                        strPrint = result.get_str();\n-                    else\n-                        strPrint = result.write(2);\n+        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args);\n+\n+        // Parse reply\n+        UniValue result = find_value(reply, \"result\");\n+        const UniValue& error = find_value(reply, \"error\");\n+        if (!error.isNull()) {\n+            // Error\n+            strPrint = \"error: \" + error.write();\n+            nRet = abs(error[\"code\"].get_int());\n+            if (error.isObject()) {\n+                const UniValue& errCode = find_value(error, \"code\");\n+                const UniValue& errMsg = find_value(error, \"message\");\n+                strPrint = errCode.isNull() ? \"\" : (\"error code: \" + errCode.getValStr() + \"\\n\");\n+\n+                if (errMsg.isStr()) {\n+                    strPrint += (\"error message:\\n\" + errMsg.get_str());\n+                }\n+                if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n+                    strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n                 }\n-                // Connection succeeded, no need to retry.\n-                break;\n             }\n-            catch (const CConnectionFailed&) {\n-                if (fWait)\n-                    UninterruptibleSleep(std::chrono::milliseconds{1000});\n-                else\n-                    throw;\n+        } else {\n+            // Result\n+            if (result.isNull()) {\n+                strPrint = \"\";\n+            } else if (result.isStr()) {\n+                strPrint = result.get_str();\n+            } else {\n+                strPrint = result.write(2);\n             }\n-        } while (fWait);\n-    }\n-    catch (const std::exception& e) {\n+        }\n+    } catch (const std::exception& e) {\n         strPrint = std::string(\"error: \") + e.what();\n         nRet = EXIT_FAILURE;\n-    }\n-    catch (...) {\n+    } catch (...) {\n         PrintExceptionContinue(nullptr, \"CommandLineRPC()\");\n         throw;\n     }"
      }
    ]
  },
  {
    "sha": "743077544b5420246ef29e0b708c90e3a8dfeeb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDMwNzc1NDRiNTQyMDI0NmVmMjllMGI3MDhjOTBlM2E4ZGZlZWI2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-04-10T20:34:43Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-05-21T08:24:17Z"
      },
      "message": "cli: lift -rpcwallet logic up to CommandLineRPC()\n\nto allow passing rpcwallet independently from the -rpcwallet user option, and to\nmove the logic to the top-level layer where most of the other option args are\nhandled.",
      "tree": {
        "sha": "c70d6d727443d725249631f30013405da424482f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c70d6d727443d725249631f30013405da424482f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/743077544b5420246ef29e0b708c90e3a8dfeeb6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl7GOrIACgkQT1chs9Dj\nkh1eAw//bbXDceBsYwJ55XFDvJbMP/K1kazgUJ8dLvboVmAvsZNPrhtzm+NacWbj\ne24G+Q8cRfMXIW/WtFqrkh33kVFXOQz30APBGnkqIK3Ke2ADoJmj9FcudYD2plkV\nmO6z9llHWK/2uH3z9F+EKu+YGv6MOjsz+wnzcSZk3PkECfHG7bSSs0F7M7kO1XBx\n7qh9IiXu/PlsoRGfTT35xYTAaCGx+gLeRG1gQC9Nh2i/sZWML9vrh2rTQcELxX1U\nuBeQV6q0/Ab5ioxZrYKwzGA9wjPmvB62vNci5Ui69jwPPhqNfXCBnDQRkBnbjwjs\nI3tmItNno6RF/RGkc2AtQ8nf2BtgsNwsjwf8enl844QoYrYwx+MLNLmN0Qtb7NDs\n6E7xjgnzi6SXh+LENfcHJwEmRg8gCtWw9YEKp7yAGi7pef0vn0YOANTceEhu0EX5\nEYBUqQwjHVmHxGNY3CPCiqhcaRmHP7525g3nE/kwoNe83b5AcqXH2Ka/hWlIwCBY\nALvz8M4a4HDK2kH8cf6eiCP/ek2MXQqZ4YcAU67lrAT/VXJu9hzzmH+AC9Orr6Ya\ng+UWajv4cIlbaSwwyARQKdD1s4KbFInI6xktsjXRgx5KWe266TlllU1Mso49uEL5\nf1uK0H/wYYK80C2NwhfwrLNW39XX2PNKwxlAy7YUlE8/AM3Xmi0=\n=WTm6\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwII9G0oPLAkmkN4MfY0i9MNLt0+sjD6f+HT355tGRpP2xCP/wEAULk+iJ72tc\n0dc5ZnzA5gMI8SDfZaxBJGJRjrvydbFs+NaN+KfMiAfcwVaiapaGTQ1aJgjxBF7G\nOrPwCKtL0OiMfokWAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQF0pUFMch2T0SJSMtjHIsyQjxBF7GOrTwCO1lLGkj\nJPaAAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmf/8BC9Le5wF0vJJOzRe3WlJxQpCPEEXsY6tPAI3pVKdvEb97wA\ng9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wEPSr\nRXm3tJD+zVRZeIHGn9AI8QRexjqz8Aj3FxRgVPh85ACD3+MNLvkMjiwraHR0cHM6\nLy9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree c70d6d727443d725249631f30013405da424482f\nparent 29f2cbdeb7afdde87d108adf80cffad17d112632\nauthor Jon Atack <jon@atack.com> 1586550883 +0200\ncommitter Jon Atack <jon@atack.com> 1590049457 +0200\n\ncli: lift -rpcwallet logic up to CommandLineRPC()\n\nto allow passing rpcwallet independently from the -rpcwallet user option, and to\nmove the logic to the top-level layer where most of the other option args are\nhandled.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/743077544b5420246ef29e0b708c90e3a8dfeeb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/743077544b5420246ef29e0b708c90e3a8dfeeb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/743077544b5420246ef29e0b708c90e3a8dfeeb6/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29f2cbdeb7afdde87d108adf80cffad17d112632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29f2cbdeb7afdde87d108adf80cffad17d112632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29f2cbdeb7afdde87d108adf80cffad17d112632"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "3a9e93f51f7a87d70a18da50b514477c8caa1d62",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/743077544b5420246ef29e0b708c90e3a8dfeeb6/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/743077544b5420246ef29e0b708c90e3a8dfeeb6/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=743077544b5420246ef29e0b708c90e3a8dfeeb6",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n+#include <optional.h>\n #include <rpc/client.h>\n #include <rpc/protocol.h>\n #include <rpc/request.h>\n@@ -304,7 +305,7 @@ class DefaultRequestHandler: public BaseRequestHandler {\n     }\n };\n \n-static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args)\n+static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\n {\n     std::string host;\n     // In preference order, we choose the following for the port:\n@@ -369,14 +370,12 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n \n     // check if we should use a special wallet endpoint\n     std::string endpoint = \"/\";\n-    if (!gArgs.GetArgs(\"-rpcwallet\").empty()) {\n-        std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n-        char *encodedURI = evhttp_uriencode(walletName.data(), walletName.size(), false);\n+    if (rpcwallet) {\n+        char* encodedURI = evhttp_uriencode(rpcwallet->data(), rpcwallet->size(), false);\n         if (encodedURI) {\n-            endpoint = \"/wallet/\"+ std::string(encodedURI);\n+            endpoint = \"/wallet/\" + std::string(encodedURI);\n             free(encodedURI);\n-        }\n-        else {\n+        } else {\n             throw CConnectionFailed(\"uri-encode failed\");\n         }\n     }\n@@ -423,17 +422,18 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n  *\n  * @param[in] rh         Pointer to RequestHandler.\n  * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Reference to const optional string wallet name to forward to CallRPC.\n  * @returns the RPC response as a UniValue object.\n  * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n  */\n-static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args)\n+static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\n {\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n     do {\n         try {\n-            response = CallRPC(rh, strMethod, args);\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n             if (fWait) {\n                 const UniValue& error = find_value(response, \"error\");\n                 if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n@@ -519,7 +519,9 @@ static int CommandLineRPC(int argc, char *argv[])\n             method = args[0];\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n-        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args);\n+        Optional<std::string> wallet_name{};\n+        if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n+        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, wallet_name);\n \n         // Parse reply\n         UniValue result = find_value(reply, \"result\");"
      }
    ]
  },
  {
    "sha": "9f01849a498a70616506bdcda8ce6897aa29e664",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjAxODQ5YTQ5OGE3MDYxNjUwNmJkY2RhOGNlNjg5N2FhMjllNjY0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-04-12T19:28:19Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-05-21T08:24:20Z"
      },
      "message": "cli: create GetWalletBalances() to fetch multiwallet balances",
      "tree": {
        "sha": "602e5eac2f64de7b5a84505c635355c778d07927",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/602e5eac2f64de7b5a84505c635355c778d07927"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f01849a498a70616506bdcda8ce6897aa29e664",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl7GOrUACgkQT1chs9Dj\nkh1MpA//YiBpEtlVjiGN0ZF5vSmOoOsCouKHxPx9TxCGbtEHwM6a72V2GU5w+kJM\n1TzGZydW2T+6Sp8wZXzShXOe7I9xulpS/5yhBaqVRYGCtXd9JA/PUwXEmJjavR65\n1T3rMpWfFulclIFebuTFJ/48JvS9/1Lx2tydSnrgwif7BL7sUCBkg/Ci2xU548ww\nHrBV+ql98VegeHlDYJgyiALzLFuTLb8voESy4sOzuFzS+T2MVFyXd4P8+4ZKAE1f\nxzNDZUSwEJX+f/NDLaaRMD4RtL0vvMVVVBO5whUicCx4XAEs/8o0lQyQgLrJn1NW\nsKzkpDd0+ceBYbti2Fw+LTY6bYal7/wv0QllFPIzLRaiSLf9aaTPFtw12wgBIrFJ\nNE4r90yebx9xRLC+LbJ1u1+tbFU4woi0sZP1dxu4vM2UwG4i6OmYptcU9+SWaJ6R\nRSGuQXuKBUw5JU+K/HOQg4r+goJOmZ0FgPaHD6qBMkJWqVRJkOuv6oCRpnuwQTgO\nfoUKgrMGBkzh+CUtT0DiPAZmbPvNL76IJYPSUT+++tfjdqrDD4Xa/8qUcDMKBdir\nCanU3d0JbkZNHuVAVwQa6nfjqSPZGf6FblVHsAlQ4UrHZyqS52ORSsU0Isyb3FiZ\nbW3u7Mvx6YS4RGzKJ/hWrdnDbDQ7YmyDEY5pjZL1N2hchI1cSgU=\n=D/nx\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILhoc+VwSMOoq1HR8LKryzdVRyJ1mjzcMtboi78lhmouCP/wEBbm38Z2EFb0\nf1er4sSLOoMI8QRexjq38AgyjF/MN3gtlQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEEQY7e57KmmcW8XNozJoj44I8SCXdf6i\nHRPhROCCFVcFktJQPTtpBnkXTLl7m/7Dv8rF1QjxBF7GOrfwCGiua4Uv6dQSAIPf\n4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BBMiCqIjxRj94zWZ3eW75LYCPEgPYgvNLkBQN1AHEjOh1vyVt+kUNzi\n1TxZhnuHTqyRga4I8QRexjq28AieUYJzfDDwMgCD3+MNLvkMjikoaHR0cHM6Ly9m\naW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQjJhnreSQOII/EINdCg/3\nDAjxICMC361MgTedmfglWv5jAt8Bv2C6RDnRB7T7WwBa72tsCPEEXsY6tvAIEhmq\nprqvHS0Ag9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 602e5eac2f64de7b5a84505c635355c778d07927\nparent 743077544b5420246ef29e0b708c90e3a8dfeeb6\nauthor Jon Atack <jon@atack.com> 1586719699 +0200\ncommitter Jon Atack <jon@atack.com> 1590049460 +0200\n\ncli: create GetWalletBalances() to fetch multiwallet balances\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f01849a498a70616506bdcda8ce6897aa29e664",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f01849a498a70616506bdcda8ce6897aa29e664",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f01849a498a70616506bdcda8ce6897aa29e664/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "743077544b5420246ef29e0b708c90e3a8dfeeb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/743077544b5420246ef29e0b708c90e3a8dfeeb6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/743077544b5420246ef29e0b708c90e3a8dfeeb6"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4d5b8f847bee6398a004c3e870dbfc7de1264d3c",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f01849a498a70616506bdcda8ce6897aa29e664/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f01849a498a70616506bdcda8ce6897aa29e664/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=9f01849a498a70616506bdcda8ce6897aa29e664",
        "patch": "@@ -452,6 +452,30 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     return response;\n }\n \n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param result  Reference to UniValue object the wallet names and balances are pushed to.\n+ */\n+static void GetWalletBalances(UniValue& result)\n+{\n+    std::unique_ptr<BaseRequestHandler> rh{MakeUnique<DefaultRequestHandler>()};\n+    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", /* args=*/{});\n+    if (!find_value(listwallets, \"error\").isNull()) return;\n+    const UniValue& wallets = find_value(listwallets, \"result\");\n+    if (wallets.size() <= 1) return;\n+\n+    UniValue balances(UniValue::VOBJ);\n+    for (const UniValue& wallet : wallets.getValues()) {\n+        const std::string wallet_name = wallet.get_str();\n+        const UniValue getbalances = ConnectAndCallRPC(rh.get(), \"getbalances\", /* args=*/{}, wallet_name);\n+        const UniValue& balance = find_value(getbalances, \"result\")[\"mine\"][\"trusted\"];\n+        balances.pushKV(wallet_name, balance);\n+    }\n+    result.pushKV(\"balances\", balances);\n+}\n+\n static int CommandLineRPC(int argc, char *argv[])\n {\n     std::string strPrint;"
      }
    ]
  },
  {
    "sha": "afce85eb994384246e455b766549c3206cb059e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmNlODVlYjk5NDM4NDI0NmU0NTViNzY2NTQ5YzMyMDZjYjA1OWUw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-05-03T09:10:24Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-05-21T08:24:23Z"
      },
      "message": "cli: use GetWalletBalances() functionality for -getinfo\n\nand replace GetBoolArg with IsArgSet as we only want\nto know if the arg is passed; we do not need the value.",
      "tree": {
        "sha": "eb1a9fe559c95699df28555eb058d004b28fcd57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb1a9fe559c95699df28555eb058d004b28fcd57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afce85eb994384246e455b766549c3206cb059e0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl7GOrgACgkQT1chs9Dj\nkh05JRAAwcexknMWHBvb6WgBWGpR1ItrrxaIxF35wVxFGKxh0BIaLKLOD9hfQ2KH\n3bDKnj7VGxX4NlJImejL5nU20ykTRnJ+N7VU1TcQeQXpnahrXdGI9u9QcM7CUzw9\nMXHaIEfC5wdVDBPmNtDhrmxoppFa45Ss+Bxm3qVNBLfJWN1xVleIdCvi2DqJ5Umn\naehuYho194NATLXdcZViI/SFPJhVmDwupw/ARUhBNl9PQvfGMfENqgkBkR2yP5BT\n7H5lO9reUyqLA4mdyacRVH1I0uEP5qkOysNLnRxQtNTHW4nkC+RBZj9z3Q+Z3uDl\nd7/YUpas9hblPuRaUyubkoPQXTBJtEOtRriwJzSXwZrGX8Mlq7Abk3gcL2zr5sOq\n+2Ey5sLxZq+7AUDTXfndKeX0S9dsJn4XslSsHadt4/oIpgaW2AxTsgvJrzS0M5Dc\nFI9dROmr+7dzh2dIV+pYV1dC6T3KTTeVyz/UZGmL5Fr/5FFb+ADUUR5x4dEVOLQA\ngm8C1M46/Is/trUSJlBaKowCg9RlBkJ4vOqTf+iNgMaz4zZG6y2QGuXWb5vMeNh3\no6CHr9MUcPYU96nyy5DD2G5N6esJHBfLJ95q2k/OLgNy7PUR/jCMykUMcCmqwKFF\nM4tNzmbKLh7ETvWjreE6hB3A3SqyYvxtBFdVSe/eDgN7Z3Ii7Tk=\n=7AvJ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHL8FKY2ierdDw1NNhbizseT1Ov75PtTE0G8cFK4i265CP/wEGMT5/t4doa/\n4idgXgNMYL8I8QRexjq58Ai0o3vJajrk+wCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEIJENVjytk6HP8GHOl0f4V0I\n8QRexjq68AgU25qTHLlpTgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQvFHwwDl09ZOU7rW4oz9QDAjxBF7G\nOrrwCP2ARmGe7zJOAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t8BDtDB0X4oXJqQQQDlhxF64dCPEEXsY6ufAIeaQ5To9tIPoAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree eb1a9fe559c95699df28555eb058d004b28fcd57\nparent 9f01849a498a70616506bdcda8ce6897aa29e664\nauthor Jon Atack <jon@atack.com> 1588497024 +0200\ncommitter Jon Atack <jon@atack.com> 1590049463 +0200\n\ncli: use GetWalletBalances() functionality for -getinfo\n\nand replace GetBoolArg with IsArgSet as we only want\nto know if the arg is passed; we do not need the value.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afce85eb994384246e455b766549c3206cb059e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afce85eb994384246e455b766549c3206cb059e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afce85eb994384246e455b766549c3206cb059e0/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f01849a498a70616506bdcda8ce6897aa29e664",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f01849a498a70616506bdcda8ce6897aa29e664",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f01849a498a70616506bdcda8ce6897aa29e664"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "045442c9ff3efdc726f51e9f340f68533f1f469a",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afce85eb994384246e455b766549c3206cb059e0/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afce85eb994384246e455b766549c3206cb059e0/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=afce85eb994384246e455b766549c3206cb059e0",
        "patch": "@@ -532,9 +532,8 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n-        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+        if (gArgs.IsArgSet(\"-getinfo\")) {\n             rh.reset(new GetinfoRequestHandler());\n-            method = \"\";\n         } else {\n             rh.reset(new DefaultRequestHandler());\n             if (args.size() < 1) {\n@@ -567,6 +566,9 @@ static int CommandLineRPC(int argc, char *argv[])\n                 }\n             }\n         } else {\n+            if (gArgs.IsArgSet(\"-getinfo\") && !gArgs.IsArgSet(\"-rpcwallet\")) {\n+                GetWalletBalances(result); // fetch multiwallet balances and append to result\n+            }\n             // Result\n             if (result.isNull()) {\n                 strPrint = \"\";"
      }
    ]
  },
  {
    "sha": "903b6c117f541ea9258d3234ffcf59427344e668",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDNiNmMxMTdmNTQxZWE5MjU4ZDMyMzRmZmNmNTk0MjczNDRlNjY4",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-04-12T19:46:16Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-05-21T08:24:26Z"
      },
      "message": "rpc: drop unused JSONRPCProcessBatchReply size arg, refactor",
      "tree": {
        "sha": "5b311e452098512acc1d413c65d9aef8516ddfbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b311e452098512acc1d413c65d9aef8516ddfbc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/903b6c117f541ea9258d3234ffcf59427344e668",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl7GOrsACgkQT1chs9Dj\nkh1MsQ//Qh/V93QetPvWsZSuzYou/HDV3owcSu/ws4Jrgz/1LrcNo5xMPKx3xX/H\n8UuQ6LjS2x2y9uejvGbaqN5pgITtzPoj02oV33Pu8M/0UgIaB1XOxm3o+bcY88HU\nLEYagYccw+SgNGgWXwGW4XMARk4bh6lr4DBwvHp9dF8saZuje8r+8ecpTB7sYYud\n+QGD+gxeaIXsuYr2W+Bmvv6TlDbPk/swb1ehTa/wei6jcpUfrzPHOr0jYTDhz/Dg\nBtnykgJt8f58xiRnd4ZiQtIR+zovluKWRgtAt93kTekoT+m6rtR/S/ECN8D2Mluy\n6WQ/NlLEtwgAL8QSO+UZkGUhL52cb+zsOjTvwUhsoWvJyFhE9/nrn1fGaKvNY9hP\n4jf55kPF0RgvZMrdf5JUM9IAmoS5KJUkA36vL706OyZYLdw2uS89lsB/Tmb2Ag+D\ns3PaV5iURT+dV3SLJzKNCgUXqyN2F2nTcxkqsXoFxZrb4QaGE5eUUgRgfyDswO/q\nl6wTq6cM/X7nMQOEhO2eN12JzvAG3IkuuF9rQOREr5a2GSDbvaI4PeZERxNFrLHw\n5D1G7QApHJbTKC3tWHCOWa8DwT/oiPuJ0ejDTJ4q4nrbhPUvofVf+sGhpiCzcm6l\nIeAbySzgl2o4zl+cmTLaWaopfCGpRY8E7a6ihavn9Fbnq7POlcw=\n=LlPG\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICHriH4i5OxSxYu36It82gxppsLUUbGIu189WBaR2ETKCP/wEBRxPgtln5Mj\nGg8kEtyR0KkI8QRexjq+8AjRWlDm9kj/DQCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQ0CgmbgYwDQzuuKrM\ns/U+0gjxBF7GOr3wCI+9wopDCl6DAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t//AQ0ebDvnkwlBxIs3Ya9sYI3QjxIEUGd2NLczcA\nqr3KqKWwSbySPvOb1+0LA/Z/7rB7hzcSCPEEXsY6vfAIbZ+PPZ48eLMAg9/jDS75\nDI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfw\nEPFXb81hW2ZvWWusQIxoW8kI8CBclth8oTTGIrgvGAMYqsJgQGwNY/WYUiEWtFAw\nzmKZzgjxBF7GOr3wCFdSxZ8RuSU2AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5b311e452098512acc1d413c65d9aef8516ddfbc\nparent afce85eb994384246e455b766549c3206cb059e0\nauthor Jon Atack <jon@atack.com> 1586720776 +0200\ncommitter Jon Atack <jon@atack.com> 1590049466 +0200\n\nrpc: drop unused JSONRPCProcessBatchReply size arg, refactor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/903b6c117f541ea9258d3234ffcf59427344e668",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/903b6c117f541ea9258d3234ffcf59427344e668",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/903b6c117f541ea9258d3234ffcf59427344e668/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afce85eb994384246e455b766549c3206cb059e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afce85eb994384246e455b766549c3206cb059e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afce85eb994384246e455b766549c3206cb059e0"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "45a586cd120129547882291ad741b3fc03c68427",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/903b6c117f541ea9258d3234ffcf59427344e668/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/903b6c117f541ea9258d3234ffcf59427344e668/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=903b6c117f541ea9258d3234ffcf59427344e668",
        "patch": "@@ -251,7 +251,7 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     UniValue ProcessReply(const UniValue &batch_in) override\n     {\n         UniValue result(UniValue::VOBJ);\n-        std::vector<UniValue> batch = JSONRPCProcessBatchReply(batch_in, batch_in.size());\n+        const std::vector<UniValue> batch = JSONRPCProcessBatchReply(batch_in);\n         // Errors in getnetworkinfo() and getblockchaininfo() are fatal, pass them on;\n         // getwalletinfo() and getbalances() are allowed to fail if there is no wallet.\n         if (!batch[ID_NETWORKINFO][\"error\"].isNull()) {"
      },
      {
        "sha": "7fef45f50ef434b701d3aec65c440ad3f46181fb",
        "filename": "src/rpc/request.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/903b6c117f541ea9258d3234ffcf59427344e668/src/rpc/request.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/903b6c117f541ea9258d3234ffcf59427344e668/src/rpc/request.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.cpp?ref=903b6c117f541ea9258d3234ffcf59427344e668",
        "patch": "@@ -130,20 +130,20 @@ void DeleteAuthCookie()\n     }\n }\n \n-std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)\n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue& in)\n {\n     if (!in.isArray()) {\n         throw std::runtime_error(\"Batch must be an array\");\n     }\n+    const size_t num {in.size()};\n     std::vector<UniValue> batch(num);\n-    for (size_t i=0; i<in.size(); ++i) {\n-        const UniValue &rec = in[i];\n+    for (const UniValue& rec : in.getValues()) {\n         if (!rec.isObject()) {\n-            throw std::runtime_error(\"Batch member must be object\");\n+            throw std::runtime_error(\"Batch member must be an object\");\n         }\n         size_t id = rec[\"id\"].get_int();\n         if (id >= num) {\n-            throw std::runtime_error(\"Batch member id larger than size\");\n+            throw std::runtime_error(\"Batch member id is larger than batch size\");\n         }\n         batch[id] = rec;\n     }"
      },
      {
        "sha": "d6080c3cf30bb2c9e8c0273d0d7085d05464c644",
        "filename": "src/rpc/request.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/903b6c117f541ea9258d3234ffcf59427344e668/src/rpc/request.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/903b6c117f541ea9258d3234ffcf59427344e668/src/rpc/request.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.h?ref=903b6c117f541ea9258d3234ffcf59427344e668",
        "patch": "@@ -22,7 +22,7 @@ bool GetAuthCookie(std::string *cookie_out);\n /** Delete RPC authentication cookie from disk */\n void DeleteAuthCookie();\n /** Parse JSON-RPC batch reply into a vector */\n-std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num);\n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue& in);\n \n class JSONRPCRequest\n {"
      }
    ]
  },
  {
    "sha": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWRhZDVjZTVkM2YxNWI2OTRiZjNmYWQwMzAwYzY0NDY2NzRiNTU0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-04-11T01:46:07Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-05-21T08:24:30Z"
      },
      "message": "test: add -getinfo multiwallet functional tests\n\nand improve the existing -getinfo -rpcwallet tests.",
      "tree": {
        "sha": "22941eaad1405a56d004d931f502f41b175fca29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22941eaad1405a56d004d931f502f41b175fca29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5edad5ce5d3f15b694bf3fad0300c6446674b554",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl7GOr8ACgkQT1chs9Dj\nkh0IwRAAxobaIW7JJnMxmWZQPtcWxkxHdZavF/1QLCkPJOGNR2GS+N9eoQuzLBIw\n6YS3LQg6rCm3iEEVbqAxEDqQ+a4jsHQrSQcNTfbg0ahx96YnsfuGYZdT06+8kluT\nCECy8SN5dRnUDhkiUN7CiZt7B5gVRgk0e+w0NY9i3ZQG+s96ffg3w++mDYPgqBvE\nv1U6Wqczy2mSRojsG//aqzEoGZsfV4jUy9100XhTLkTT1BPm831l4FE5mcf4ej0Y\nzCLCP2aj80xqtQStspPCqK2lXO61CTAjST1HAvZPv6cH3+7S4ZVkF6bYAe0vF+js\ny7QnIfVVJoJ5fg6KSsBOp/bpr5Yy1nvZD7q1A5nHyV32lVntfdzDTqxOOHdizamv\nB99n5vxS5ISb9JK8pJq+ZBlYVGQb9ERwyTmQvH/UXdagdeNvNgBxVKXBWR9U54H1\n69K9PfamzwdTvj11+hxnKOEUu+AkwsJNWVj8EEePKCqA2F0xZGh1bTPDxMDAIveG\nWCTpGZLUI1+CcHwAJ5qTwdtFaVrs2BKjldAASQc2FNJT9jxrtObzxTG3scOSGdCj\ngDV5x6lAbp/CY7gbHekhHFldaAa5wwTR5k7luGy+zDM0UcqWV5RBsxKyU0Hpxet9\nof7ixg86sR3uaVqhWAvTsqNElvmPgMj1ncuaF0IImg8k95AQ/8U=\n=aI4i\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIO8jCzuzdb2UjPFLlOn2qmd0Nu2incC+I5IyxbowDmqJCP/wEEjXM0jCZ2Fz\npaT/6tAXq+EI8QRexjrA8AiM3X3FglVR0ACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEHt5V3PXfwn7y/QmIJIHUeII8QRexjrA\n8AjE2pTW1uxMCQCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbf/wEI+IabQPwaqM+lDRDUSXKbMI8QRexjrB8Aie9dbPu7FG\n4QCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn8BCdWF/5KRtS8OJvxwy5wPGvCPEEXsY6wPAIw2qQ5cPy2bcAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 22941eaad1405a56d004d931f502f41b175fca29\nparent 903b6c117f541ea9258d3234ffcf59427344e668\nauthor Jon Atack <jon@atack.com> 1586569567 +0200\ncommitter Jon Atack <jon@atack.com> 1590049470 +0200\n\ntest: add -getinfo multiwallet functional tests\n\nand improve the existing -getinfo -rpcwallet tests.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5edad5ce5d3f15b694bf3fad0300c6446674b554/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "903b6c117f541ea9258d3234ffcf59427344e668",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/903b6c117f541ea9258d3234ffcf59427344e668",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/903b6c117f541ea9258d3234ffcf59427344e668"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 35,
      "deletions": 16
    },
    "files": [
      {
        "sha": "7530e7daf68ec9d84aebd56e343f96f3bcda4e1a",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 35,
        "deletions": 16,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5edad5ce5d3f15b694bf3fad0300c6446674b554/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5edad5ce5d3f15b694bf3fad0300c6446674b554/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=5edad5ce5d3f15b694bf3fad0300c6446674b554",
        "patch": "@@ -67,6 +67,7 @@ def run_test(self):\n         if self.is_wallet_compiled():\n             self.log.info(\"Test -getinfo and bitcoin-cli getwalletinfo return expected wallet info\")\n             assert_equal(cli_get_info['balance'], BALANCE)\n+            assert 'balances' not in cli_get_info.keys()\n             wallet_info = self.nodes[0].getwalletinfo()\n             assert_equal(cli_get_info['keypoolsize'], wallet_info['keypoolsize'])\n             assert_equal(cli_get_info['unlocked_until'], wallet_info['unlocked_until'])\n@@ -76,42 +77,60 @@ def run_test(self):\n \n             # Setup to test -getinfo and -rpcwallet= with multiple wallets.\n             wallets = ['', 'Encrypted', 'secret']\n-            amounts = [Decimal('59.999928'), Decimal(9), Decimal(31)]\n+            amounts = [BALANCE + Decimal('9.999928'), Decimal(9), Decimal(31)]\n             self.nodes[0].createwallet(wallet_name=wallets[1])\n             self.nodes[0].createwallet(wallet_name=wallets[2])\n             w1 = self.nodes[0].get_wallet_rpc(wallets[0])\n             w2 = self.nodes[0].get_wallet_rpc(wallets[1])\n             w3 = self.nodes[0].get_wallet_rpc(wallets[2])\n             w1.walletpassphrase(password, self.rpc_timeout)\n+            w2.encryptwallet(password)\n             w1.sendtoaddress(w2.getnewaddress(), amounts[1])\n             w1.sendtoaddress(w3.getnewaddress(), amounts[2])\n \n             # Mine a block to confirm; adds a block reward (50 BTC) to the default wallet.\n             self.nodes[0].generate(1)\n \n-            self.log.info(\"Test -getinfo with multiple wallets loaded returns no balance\")\n-            assert_equal(set(self.nodes[0].listwallets()), set(wallets))\n-            assert 'balance' not in self.nodes[0].cli('-getinfo').send_cli().keys()\n-\n             self.log.info(\"Test -getinfo with multiple wallets and -rpcwallet returns specified wallet balance\")\n             for i in range(len(wallets)):\n-                cli_get_info = self.nodes[0].cli('-getinfo').send_cli('-rpcwallet={}'.format(wallets[i]))\n+                cli_get_info = self.nodes[0].cli('-getinfo', '-rpcwallet={}'.format(wallets[i])).send_cli()\n+                assert 'balances' not in cli_get_info.keys()\n                 assert_equal(cli_get_info['balance'], amounts[i])\n \n-            self.log.info(\"Test -getinfo with multiple wallets and -rpcwallet=non-existing-wallet returns no balance\")\n-            assert 'balance' not in self.nodes[0].cli('-getinfo').send_cli('-rpcwallet=does-not-exist').keys()\n+            self.log.info(\"Test -getinfo with multiple wallets and -rpcwallet=non-existing-wallet returns no balances\")\n+            cli_get_info_keys = self.nodes[0].cli('-getinfo', '-rpcwallet=does-not-exist').send_cli().keys()\n+            assert 'balance' not in cli_get_info_keys\n+            assert 'balances' not in cli_get_info_keys\n \n-            self.log.info(\"Test -getinfo after unloading all wallets except a non-default one returns its balance\")\n+            self.log.info(\"Test -getinfo with multiple wallets returns all loaded wallet names and balances\")\n+            assert_equal(set(self.nodes[0].listwallets()), set(wallets))\n+            cli_get_info = self.nodes[0].cli('-getinfo').send_cli()\n+            assert 'balance' not in cli_get_info.keys()\n+            assert_equal(cli_get_info['balances'], {k: v for k, v in zip(wallets, amounts)})\n+\n+            # Unload the default wallet and re-verify.\n             self.nodes[0].unloadwallet(wallets[0])\n+            assert wallets[0] not in self.nodes[0].listwallets()\n+            cli_get_info = self.nodes[0].cli('-getinfo').send_cli()\n+            assert 'balance' not in cli_get_info.keys()\n+            assert_equal(cli_get_info['balances'], {k: v for k, v in zip(wallets[1:], amounts[1:])})\n+\n+            self.log.info(\"Test -getinfo after unloading all wallets except a non-default one returns its balance\")\n             self.nodes[0].unloadwallet(wallets[2])\n             assert_equal(self.nodes[0].listwallets(), [wallets[1]])\n-            assert_equal(self.nodes[0].cli('-getinfo').send_cli()['balance'], amounts[1])\n-\n-            self.log.info(\"Test -getinfo -rpcwallet=remaining-non-default-wallet returns its balance\")\n-            assert_equal(self.nodes[0].cli('-getinfo').send_cli('-rpcwallet={}'.format(wallets[1]))['balance'], amounts[1])\n-\n-            self.log.info(\"Test -getinfo with -rpcwallet=unloaded wallet returns no balance\")\n-            assert 'balance' not in self.nodes[0].cli('-getinfo').send_cli('-rpcwallet={}'.format(wallets[2])).keys()\n+            cli_get_info = self.nodes[0].cli('-getinfo').send_cli()\n+            assert 'balances' not in cli_get_info.keys()\n+            assert_equal(cli_get_info['balance'], amounts[1])\n+\n+            self.log.info(\"Test -getinfo with -rpcwallet=remaining-non-default-wallet returns only its balance\")\n+            cli_get_info = self.nodes[0].cli('-getinfo', '-rpcwallet={}'.format(wallets[1])).send_cli()\n+            assert 'balances' not in cli_get_info.keys()\n+            assert_equal(cli_get_info['balance'], amounts[1])\n+\n+            self.log.info(\"Test -getinfo with -rpcwallet=unloaded wallet returns no balances\")\n+            cli_get_info = self.nodes[0].cli('-getinfo', '-rpcwallet={}'.format(wallets[2])).send_cli()\n+            assert 'balance' not in cli_get_info_keys\n+            assert 'balances' not in cli_get_info_keys\n         else:\n             self.log.info(\"*** Wallet not compiled; cli getwalletinfo and -getinfo wallet tests skipped\")\n             self.nodes[0].generate(1)  # maintain block parity with the wallet_compiled conditional branch"
      }
    ]
  }
]