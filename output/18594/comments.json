[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612541685",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-612541685",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 612541685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjU0MTY4NQ==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-12T00:18:24Z",
    "updated_at": "2020-04-12T00:18:24Z",
    "author_association": "MEMBER",
    "body": "Concept ACK\r\n\r\ninterface_bitcoin_cli.py  fails in no wallet job.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612541685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612554560",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-612554560",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 612554560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjU1NDU2MA==",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-12T02:49:35Z",
    "updated_at": "2020-04-12T02:49:35Z",
    "author_association": "MEMBER",
    "body": "It seems this is in part reverting changes that were just merged in #18574 (split out of #18453), and refactoring to handle multiwallet.\r\n\r\nI understand splitting up changes, and maybe it doesn't matter so much in this instance, but it's a bit of code/review churn if we're PR'ing and merging refactors only to essentially undo the changes and do something else in a different PR a few hours later.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612554560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612591094",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-612591094",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 612591094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjU5MTA5NA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-12T10:01:20Z",
    "updated_at": "2020-05-20T09:18:04Z",
    "author_association": "MEMBER",
    "body": "I empathise. See https://github.com/bitcoin/bitcoin/pull/18453#issuecomment-611429161.  #18574 was the only change that seemed to have consensus, so it seemed best to split it out for merge and propose client-side code in this PR to test and compare with the server-side code in #18453.\r\n\r\nEDIT: This PR no longer touches the changes merged in #18574.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612591094/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612612881",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-612612881",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 612612881,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjYxMjg4MQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-12T13:17:16Z",
    "updated_at": "2020-05-11T00:13:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #16439 (RPC: support \"@height\" in place of blockhash for getblock etc by ajtowns)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612612881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612679275",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-612679275",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 612679275,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjY3OTI3NQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-12T21:35:23Z",
    "updated_at": "2020-04-12T21:35:23Z",
    "author_association": "MEMBER",
    "body": "Updated with the following:\r\n- ensure it works when built without the wallet\r\n- extract the connection try/wait/failure logic to be callable for each connection, so we can use this for calling `listwallets` and `getbalances` to be more robust\r\n- drop an unused arg in `JSONRPCProcessBatchReply` as requested in https://github.com/bitcoin/bitcoin/pull/18574#discussion_r406526973\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612679275/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613055178",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-613055178",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 613055178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzA1NTE3OA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-13T19:27:38Z",
    "updated_at": "2020-04-13T19:27:38Z",
    "author_association": "MEMBER",
    "body": "Concept and approach ACK.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613055178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/615877831",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-615877831",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 615877831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTg3NzgzMQ==",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?u=e2201a78ad660e42fd175003d02ad749b855e0a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-18T14:09:09Z",
    "updated_at": "2020-04-18T14:09:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK ea59b18387c4b26240e1f087c568408922b3c940\r\n\r\nBuilt, ran tests, tested manually by creating new wallet, transferring funds to it and unloading. Light code review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/615877831/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616719195",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-616719195",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 616719195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjcxOTE5NQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-20T18:01:57Z",
    "updated_at": "2020-04-21T13:22:54Z",
    "author_association": "MEMBER",
    "body": "PR updated per @promag's review feedback to display wallet names and balances for all loaded wallets when more than one wallet is loaded (e.g. you are in \"multiwallet mode\") and `-rpcwallet=` is not passed; otherwise, behavior is unchanged. @fanquake, this PR no longer touches the changes in #18574.\r\n\r\n@jnewbery, @promag, @michaelfolkson, can you please re-review?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616719195/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616837752",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-616837752",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 616837752,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjgzNzc1Mg==",
    "user": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?u=2ba2cccaa0fd357b363507ce5694ce3cf5e56220&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-20T22:08:48Z",
    "updated_at": "2020-04-20T22:15:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK, but I wonder why in 208be5a811eee4f4d4d336a9e47c2b36760621b5 this is hardcoded to `getinfo`? Couldn't this be generalized to any command with almost no extra work (return results grouped by wallet name), or am I missing something?\r\n\r\nedit: hmm after reading some of the linked issues it looks like this is trying to achieve something very specific, but my suggestion could be a future improvement on top of this.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616837752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616841992",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-616841992",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 616841992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjg0MTk5Mg==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-20T22:20:17Z",
    "updated_at": "2020-04-20T22:20:17Z",
    "author_association": "MEMBER",
    "body": "Thanks @jb55, I agree, but there isn't currently consensus on what the server-side API interface should be and if one should be done at all. I learned from the first PR that a client-side version embedded into `-getinfo` as proposed here will be easier to merge due to more clear consensus and because it isn't subject to API constraints. I see this as a solution that can be merged now, and maybe a server-side one might emerge (or not) later, and could be called from -getinfo as well to batch the calls to `getbalances`. Don't hesitate to ACK if you'd like to see it move forward!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616841992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/621937422",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-621937422",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 621937422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMTkzNzQyMg==",
    "user": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?u=17d35db6d21a792a73c54469705cff5da63abe5f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-30T15:46:27Z",
    "updated_at": "2020-04-30T15:46:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK https://github.com/bitcoin/bitcoin/commit/9fa9882fbbf4324f36cbf1008642adf43436be53\r\n\r\nBuilt, run and tested on macOS Catalina 10.15.4\r\nManual testing with several wallets successful:\r\n\r\n```shell\r\n./src/bitcoin-cli -regtest -getinfo\r\n{\r\n  \"version\": 209900,\r\n  \"blocks\": 205,\r\n  \"headers\": 205,\r\n  \"verificationprogress\": 1,\r\n  \"timeoffset\": 0,\r\n  \"connections\": 0,\r\n  \"proxy\": \"\",\r\n  \"difficulty\": 4.656542373906925e-10,\r\n  \"chain\": \"regtest\",\r\n  \"relayfee\": 0.00001000,\r\n  \"warnings\": \"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\",\r\n  \"balances\": {\r\n    \"\": 5000.00000000,\r\n    \"other\": 250.00000000,\r\n    \"secret_wallet\": 0.00000000\r\n  }\r\n}\r\n```\r\n\r\nExecution of `./test/functional/wallet_multiwallet.py --usecli` was successful.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/621937422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623413739",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-623413739",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 623413739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzQxMzczOQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-04T11:40:30Z",
    "updated_at": "2020-05-05T14:14:11Z",
    "author_association": "MEMBER",
    "body": "Thanks everyone for the reviews and @jnewbery for the excellent suggestions -- done and also moved the `GetWalletBalances` code to its own function and added Doxygen documentation for it and `ConnectAndCallRPC`.\r\n\r\n<details>\r\n<summary>Changes: git diff 9fa9882 2e7d8b9</summary>\r\n<p>\r\n\r\n```diff\r\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp\r\nindex 86271c4271..a3302835c3 100644\r\n--- a/src/bitcoin-cli.cpp\r\n+++ b/src/bitcoin-cli.cpp\r\n@@ -17,6 +17,7 @@\r\n #include <util/translation.h>\r\n #include <util/url.h>\r\n \r\n+#include <cstring>\r\n #include <functional>\r\n #include <memory>\r\n #include <stdio.h>\r\n@@ -304,7 +305,7 @@ public:\r\n     }\r\n };\r\n \r\n-static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char *rpcwallet = nullptr)\r\n+static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\r\n {\r\n     std::string host;\r\n     // In preference order, we choose the following for the port:\r\n@@ -369,9 +370,8 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\r\n \r\n     // check if we should use a special wallet endpoint\r\n     std::string endpoint = \"/\";\r\n-    if (rpcwallet || !gArgs.GetArgs(\"-rpcwallet\").empty()) {\r\n-        std::string walletName = rpcwallet ? rpcwallet : gArgs.GetArg(\"-rpcwallet\", \"\");\r\n-        char *encodedURI = evhttp_uriencode(walletName.data(), walletName.size(), false);\r\n+    if (rpcwallet) {\r\n+        char *encodedURI = evhttp_uriencode(rpcwallet, strlen(rpcwallet), false);\r\n         if (encodedURI) {\r\n             endpoint = \"/wallet/\"+ std::string(encodedURI);\r\n             free(encodedURI);\r\n@@ -417,7 +417,16 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\r\n     return reply;\r\n }\r\n \r\n-static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char *rpcwallet = nullptr)\r\n+/**\r\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\r\n+ *\r\n+ * @param[in] rh         Pointer to RequestHandler.\r\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\r\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\r\n+ * @returns the RPC response as a UniValue object.\r\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\r\n+ */\r\n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\r\n {\r\n     UniValue response(UniValue::VOBJ);\r\n     // Execute and handle connection failures with -rpcwait.\r\n@@ -425,7 +434,6 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& str\r\n     do {\r\n         try {\r\n             response = CallRPC(rh, strMethod, args, rpcwallet);\r\n-\r\n             if (fWait) {\r\n                 const UniValue& error = find_value(response, \"error\");\r\n                 if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\r\n@@ -442,10 +450,35 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& str\r\n             }\r\n         }\r\n     } while (fWait);\r\n-\r\n     return response;\r\n }\r\n \r\n+/**\r\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\r\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\r\n+ *\r\n+ * @param[in] result  Reference to UniValue object the wallet names and balances are pushed to.\r\n+ */\r\n+static void GetWalletBalances(UniValue& result)\r\n+{\r\n+    std::unique_ptr<BaseRequestHandler> rh;\r\n+    rh.reset(new DefaultRequestHandler());\r\n+    const std::vector<std::string> args;\r\n+    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);\r\n+    const UniValue& wallets = find_value(listwallets, \"result\");\r\n+\r\n+    if (find_value(listwallets, \"error\").isNull() && wallets.size() > 1) {\r\n+        UniValue balances(UniValue::VOBJ);\r\n+        for (const UniValue& wallet : wallets.getValues()) {\r\n+            const char * const wallet_name = wallet.get_str().c_str();\r\n+            const UniValue getbalances = ConnectAndCallRPC(rh.get(), \"getbalances\", args, wallet_name);\r\n+            const UniValue& balance = find_value(getbalances, \"result\")[\"mine\"][\"trusted\"];\r\n+            balances.pushKV(wallet_name, balance);\r\n+        }\r\n+        result.pushKV(\"balances\", balances);\r\n+    }\r\n+}\r\n+\r\n static int CommandLineRPC(int argc, char *argv[])\r\n {\r\n     std::string strPrint;\r\n@@ -502,7 +535,7 @@ static int CommandLineRPC(int argc, char *argv[])\r\n         }\r\n         std::unique_ptr<BaseRequestHandler> rh;\r\n         std::string method;\r\n-        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\r\n+        if (gArgs.IsArgSet(\"-getinfo\")) {\r\n             rh.reset(new GetinfoRequestHandler());\r\n         } else {\r\n             rh.reset(new DefaultRequestHandler());\r\n@@ -512,7 +545,13 @@ static int CommandLineRPC(int argc, char *argv[])\r\n             method = args[0];\r\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\r\n         }\r\n-        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args);\r\n+\r\n+        UniValue reply;\r\n+        if (gArgs.IsArgSet(\"-rpcwallet\")) {\r\n+            reply = ConnectAndCallRPC(rh.get(), method, args, gArgs.GetArg(\"-rpcwallet\", \"\").c_str());\r\n+        } else {\r\n+            reply = ConnectAndCallRPC(rh.get(), method, args);\r\n+        }\r\n \r\n         // Parse reply\r\n         UniValue result = find_value(reply, \"result\");\r\n@@ -534,22 +573,8 @@ static int CommandLineRPC(int argc, char *argv[])\r\n                 }\r\n             }\r\n         } else {\r\n-            // Display mine.trusted balances for all loaded wallets if -getinfo\r\n-            // was called without -rpcwallet and more than one wallet is loaded.\r\n-            if (gArgs.GetBoolArg(\"-getinfo\", false) && gArgs.GetArgs(\"-rpcwallet\").empty()) {\r\n-                rh.reset(new DefaultRequestHandler());\r\n-                const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);\r\n-                const UniValue& wallets = find_value(listwallets, \"result\");\r\n-                    if (find_value(listwallets, \"error\").isNull() && wallets.size() > 1) {\r\n-                    UniValue balances(UniValue::VOBJ);\r\n-                    for (const UniValue& wallet : wallets.getValues()) {\r\n-                        const char *wallet_name = wallet.get_str().c_str();\r\n-                        const UniValue getbalances = ConnectAndCallRPC(rh.get(), \"getbalances\", args, wallet_name);\r\n-                        const UniValue& balance = find_value(getbalances, \"result\")[\"mine\"][\"trusted\"];\r\n-                        balances.pushKV(wallet_name, balance);\r\n-                    }\r\n-                    result.pushKV(\"balances\", balances);\r\n-                }\r\n+            if (gArgs.IsArgSet(\"-getinfo\") && !gArgs.IsArgSet(\"-rpcwallet\")) {\r\n+                GetWalletBalances(result); // fetch multiwallet balances and append to result\r\n             }\r\n             // Result\r\n             if (result.isNull()) {\r\ndiff --git a/test/functional/interface_bitcoin_cli.py b/test/functional/interface_bitcoin_cli.py\r\nindex 66bbd05d0d..7530e7daf6 100755\r\n--- a/test/functional/interface_bitcoin_cli.py\r\n+++ b/test/functional/interface_bitcoin_cli.py\r\n@@ -77,7 +77,7 @@ class TestBitcoinCli(BitcoinTestFramework):\r\n \r\n             # Setup to test -getinfo and -rpcwallet= with multiple wallets.\r\n             wallets = ['', 'Encrypted', 'secret']\r\n-            amounts = [Decimal('59.999928'), Decimal(9), Decimal(31)]\r\n+            amounts = [BALANCE + Decimal('9.999928'), Decimal(9), Decimal(31)]\r\n             self.nodes[0].createwallet(wallet_name=wallets[1])\r\n             self.nodes[0].createwallet(wallet_name=wallets[2])\r\n```\r\n</p>\r\n</details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623413739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631326666",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-631326666",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 631326666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTMyNjY2Ng==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T08:33:47Z",
    "updated_at": "2020-05-20T08:33:47Z",
    "author_association": "MEMBER",
    "body": "Thank you @jnewbery, I appreciate your outstanding reviewing and applied your suggestions. I also applied Clang formatting to the PR changeset. Here are the changes since the last push:\r\n\r\n<details><summary><code>git diff 2e7d8b9 0af7d3a</code></summary><p>\r\n\r\n```diff\r\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp\r\nindex a3302835c3..feea064be9 100644\r\n--- a/src/bitcoin-cli.cpp\r\n+++ b/src/bitcoin-cli.cpp\r\n@@ -305,7 +305,7 @@ public:\r\n     }\r\n };\r\n \r\n-static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\r\n+static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const char* const rpcwallet = nullptr)\r\n {\r\n     std::string host;\r\n     // In preference order, we choose the following for the port:\r\n@@ -371,9 +371,9 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\r\n     // check if we should use a special wallet endpoint\r\n     std::string endpoint = \"/\";\r\n     if (rpcwallet) {\r\n-        char *encodedURI = evhttp_uriencode(rpcwallet, strlen(rpcwallet), false);\r\n+        char* encodedURI = evhttp_uriencode(rpcwallet, strlen(rpcwallet), false);\r\n         if (encodedURI) {\r\n-            endpoint = \"/wallet/\"+ std::string(encodedURI);\r\n+            endpoint = \"/wallet/\" + std::string(encodedURI);\r\n             free(encodedURI);\r\n         } else {\r\n             throw CConnectionFailed(\"uri-encode failed\");\r\n@@ -426,7 +426,7 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\r\n  * @returns the RPC response as a UniValue object.\r\n  * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\r\n  */\r\n-static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\r\n+static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const char* const rpcwallet = nullptr)\r\n {\r\n     UniValue response(UniValue::VOBJ);\r\n     // Execute and handle connection failures with -rpcwait.\r\n@@ -441,8 +441,7 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& str\r\n                 }\r\n             }\r\n             break; // Connection succeeded, no need to retry.\r\n-        }\r\n-        catch (const CConnectionFailed&) {\r\n+        } catch (const CConnectionFailed&) {\r\n             if (fWait) {\r\n                 UninterruptibleSleep(std::chrono::milliseconds{1000});\r\n             } else {\r\n@@ -457,26 +456,24 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& str\r\n  * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\r\n  * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\r\n  *\r\n- * @param[in] result  Reference to UniValue object the wallet names and balances are pushed to.\r\n+ * @param result  Reference to UniValue object the wallet names and balances are pushed to.\r\n  */\r\n static void GetWalletBalances(UniValue& result)\r\n {\r\n-    std::unique_ptr<BaseRequestHandler> rh;\r\n-    rh.reset(new DefaultRequestHandler());\r\n-    const std::vector<std::string> args;\r\n-    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);\r\n+    std::unique_ptr<BaseRequestHandler> rh{MakeUnique<DefaultRequestHandler>()};\r\n+    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", /* args=*/{});\r\n+    if (!find_value(listwallets, \"error\").isNull()) return;\r\n     const UniValue& wallets = find_value(listwallets, \"result\");\r\n+    if (wallets.size() <= 1) return;\r\n\r\n-    if (find_value(listwallets, \"error\").isNull() && wallets.size() > 1) {\r\n-        UniValue balances(UniValue::VOBJ);\r\n-        for (const UniValue& wallet : wallets.getValues()) {\r\n-            const char * const wallet_name = wallet.get_str().c_str();\r\n-            const UniValue getbalances = ConnectAndCallRPC(rh.get(), \"getbalances\", args, wallet_name);\r\n-            const UniValue& balance = find_value(getbalances, \"result\")[\"mine\"][\"trusted\"];\r\n-            balances.pushKV(wallet_name, balance);\r\n-        }\r\n-        result.pushKV(\"balances\", balances);\r\n\r\n+    UniValue balances(UniValue::VOBJ);\r\n+    for (const UniValue& wallet : wallets.getValues()) {\r\n+        const char* const wallet_name = wallet.get_str().c_str();\r\n+        const UniValue getbalances = ConnectAndCallRPC(rh.get(), \"getbalances\", /* args=*/{}, wallet_name);\r\n+        const UniValue& balance = find_value(getbalances, \"result\")[\"mine\"][\"trusted\"];\r\n+        balances.pushKV(wallet_name, balance);\r\n     }\r\n+    result.pushKV(\"balances\", balances);\r\n }\r\n \r\n static int CommandLineRPC(int argc, char *argv[])\r\n@@ -545,13 +542,7 @@ static int CommandLineRPC(int argc, char *argv[])\r\n             method = args[0];\r\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\r\n         }\r\n-\r\n-        UniValue reply;\r\n-        if (gArgs.IsArgSet(\"-rpcwallet\")) {\r\n-            reply = ConnectAndCallRPC(rh.get(), method, args, gArgs.GetArg(\"-rpcwallet\", \"\").c_str());\r\n-        } else {\r\n-            reply = ConnectAndCallRPC(rh.get(), method, args);\r\n-        }\r\n+        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, gArgs.IsArgSet(\"-rpcwallet\") ? gArgs.GetArg(\"-rpcwallet\", \"\").c_str() : nullptr);\r\n \r\n@@ -585,12 +576,10 @@ static int CommandLineRPC(int argc, char *argv[])\r\n                 strPrint = result.write(2);\r\n             }\r\n         }\r\n-    }\r\n-    catch (const std::exception& e) {\r\n+    } catch (const std::exception& e) {\r\n         strPrint = std::string(\"error: \") + e.what();\r\n         nRet = EXIT_FAILURE;\r\n-    }\r\n-    catch (...) {\r\n+    } catch (...) {\r\n         PrintExceptionContinue(nullptr, \"CommandLineRPC()\");\r\n         throw;\r\n     }\r\n```\r\n</p></details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631326666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631749247",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-631749247",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 631749247,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTc0OTI0Nw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-20T21:57:20Z",
    "updated_at": "2020-05-20T21:57:20Z",
    "author_association": "MEMBER",
    "body": "@jonatack thanks for being so responsive to review, and well done for catching the nasty bug in my previous suggestion! (https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428327325).\r\n\r\nI have one final suggestion: switch out the c-style `char *` arguments for `Optional<std::string>`s. Using `std::string` seems better in almost all cases.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631749247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631964285",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-631964285",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 631964285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTk2NDI4NQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-21T08:41:49Z",
    "updated_at": "2020-05-21T08:41:49Z",
    "author_association": "MEMBER",
    "body": "Thank you @jnewbery and @luke-jr for your excellent reviews and suggestions. I'll take more heed henceforth of the developer notes' warning about `c_str()`. Updated to use `Optional<std::string>` as per the following diff. Aside from a release note if merged, this PR should hopefully be ready.\r\n\r\n<details><summary><code>git diff 0af7d3a 5edad5c</code></summary><p>\r\n\r\n```diff\r\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp\r\n #include <clientversion.h>\r\n+#include <optional.h>\r\n #include <rpc/client.h>\r\n@@ -17,7 +18,6 @@\r\n #include <util/url.h>\r\n \r\n-#include <cstring>\r\n #include <functional>\r\n@@ -305,7 +305,7 @@ public:\r\n     }\r\n };\r\n \r\n-static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const char* const rpcwallet = nullptr)\r\n+static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\r\n {\r\n     std::string host;\r\n     // In preference order, we choose the following for the port:\r\n@@ -371,7 +371,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\r\n     // check if we should use a special wallet endpoint\r\n     std::string endpoint = \"/\";\r\n     if (rpcwallet) {\r\n-        char* encodedURI = evhttp_uriencode(rpcwallet, strlen(rpcwallet), false);\r\n+        char* encodedURI = evhttp_uriencode(rpcwallet->data(), rpcwallet->size(), false);\r\n         if (encodedURI) {\r\n             endpoint = \"/wallet/\" + std::string(encodedURI);\r\n             free(encodedURI);\r\n@@ -422,11 +422,11 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\r\n  *\r\n  * @param[in] rh         Pointer to RequestHandler.\r\n  * @param[in] strMethod  Reference to const string method to forward to CallRPC.\r\n- * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\r\n+ * @param[in] rpcwallet  Reference to const optional string wallet name to forward to CallRPC.\r\n  * @returns the RPC response as a UniValue object.\r\n  * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\r\n  */\r\n-static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const char* const rpcwallet = nullptr)\r\n+static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\r\n {\r\n     UniValue response(UniValue::VOBJ);\r\n     // Execute and handle connection failures with -rpcwait.\r\n@@ -468,7 +468,7 @@ static void GetWalletBalances(UniValue& result)\r\n \r\n     UniValue balances(UniValue::VOBJ);\r\n     for (const UniValue& wallet : wallets.getValues()) {\r\n-        const char* const wallet_name = wallet.get_str().c_str();\r\n+        const std::string wallet_name = wallet.get_str();\r\n         const UniValue getbalances = ConnectAndCallRPC(rh.get(), \"getbalances\", /* args=*/{}, wallet_name);\r\n         const UniValue& balance = find_value(getbalances, \"result\")[\"mine\"][\"trusted\"];\r\n         balances.pushKV(wallet_name, balance);\r\n@@ -542,7 +542,9 @@ static int CommandLineRPC(int argc, char *argv[])\r\n             method = args[0];\r\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\r\n         }\r\n-        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, gArgs.IsArgSet(\"-rpcwallet\") ? gArgs.GetArg(\"-rpcwallet\", \"\").c_str() : nullptr);\r\n+        Optional<std::string> wallet_name{};\r\n+        if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\r\n+        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, wallet_name);\r\n```\r\n</p></details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631964285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632026269",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-632026269",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 632026269,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjAyNjI2OQ==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-21T11:08:21Z",
    "updated_at": "2020-05-21T11:08:21Z",
    "author_association": "MEMBER",
    "body": "Tested ACK 5edad5ce5d3f15b694bf3fad0300c6446674b554.\r\n\r\nDoes it make sense sum up balances and always have the `balance`?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632026269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632097755",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-632097755",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 632097755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjA5Nzc1NQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-21T13:50:58Z",
    "updated_at": "2020-05-28T16:36:50Z",
    "author_association": "MEMBER",
    "body": "@promag why not (for a follow-up):\r\n```json\r\n  \"balance\": 0.00003714,\r\n  \"balances\": {\r\n    \"\": 0.00001000,\r\n    \"Encrypted\": 0.00003500,\r\n    \"day-to-day\": 0.00000120,\r\n    \"side project\": 0.00000094\r\n  }\r\n}\r\n```\r\nWhat I miss with -getinfo in single-wallet mode is showing the wallet name. At some point a common interface like the above for both modes might be good, to always see the wallet name even when there is only one wallet loaded.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632097755/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632156979",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-632156979",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 632156979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjE1Njk3OQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-21T15:33:33Z",
    "updated_at": "2020-05-21T15:33:33Z",
    "author_association": "MEMBER",
    "body": "utACK 5edad5ce5d3f15b694bf3fad0300c6446674b554\r\n\r\nThanks for being patient with my iterative reviews!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632156979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632570115",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-632570115",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 632570115,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjU3MDExNQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-22T08:31:46Z",
    "updated_at": "2020-05-22T08:31:46Z",
    "author_association": "MEMBER",
    "body": "Thanks @jnewbery, @promag and @luke-jr for reviewing. I'll add a commit to the release note follow-up that tightens up the -getinfo command parsing and adds a test as per https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428790740.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632570115/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632863412",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-632863412",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 632863412,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjg2MzQxMg==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-22T19:06:16Z",
    "updated_at": "2020-05-22T19:06:16Z",
    "author_association": "MEMBER",
    "body": "concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632863412/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635296774",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#issuecomment-635296774",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18594",
    "id": 635296774,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTI5Njc3NA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-28T12:03:34Z",
    "updated_at": "2020-06-23T04:38:50Z",
    "author_association": "MEMBER",
    "body": "> Agree that a release note followup which can include a few other things would be good\r\n\r\nThanks -- done in #19089 and #19354.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635296774/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407669164",
    "pull_request_review_id": 392376461,
    "id": 407669164,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2OTE2NA==",
    "diff_hunk": "@@ -485,56 +500,58 @@ static int CommandLineRPC(int argc, char *argv[])\n             method = args[0];\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n-\n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n+        UniValue reply = ConnectAndCallRPC(rh.get(), method, args);\n+\n+        // Parse reply\n+        UniValue result = find_value(reply, \"result\");\n+        const UniValue& error = find_value(reply, \"error\");\n+        if (!error.isNull()) {\n+            // Error\n+            int code = error[\"code\"].get_int();\n+            if (code == RPC_IN_WARMUP && gArgs.GetBoolArg(\"-rpcwait\", false)) {\n+                throw CConnectionFailed(\"server in warmup\");",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 144,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "e9a271b15875926614a0e1196e44ee729dd0ce47",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "After commit _cli: extract connection try/wait/failure logic_, this throw no longer gets caught.",
    "created_at": "2020-04-13T19:27:11Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r407669164",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407669164"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r407669164"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407669164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 512,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407730476",
    "pull_request_review_id": 392450826,
    "id": 407730476,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMDQ3Ng==",
    "diff_hunk": "@@ -485,56 +500,58 @@ static int CommandLineRPC(int argc, char *argv[])\n             method = args[0];\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n-\n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n+        UniValue reply = ConnectAndCallRPC(rh.get(), method, args);\n+\n+        // Parse reply\n+        UniValue result = find_value(reply, \"result\");\n+        const UniValue& error = find_value(reply, \"error\");\n+        if (!error.isNull()) {\n+            // Error\n+            int code = error[\"code\"].get_int();\n+            if (code == RPC_IN_WARMUP && gArgs.GetBoolArg(\"-rpcwait\", false)) {\n+                throw CConnectionFailed(\"server in warmup\");",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 144,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "e9a271b15875926614a0e1196e44ee729dd0ce47",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks @jnewbery, good catch on the throw! Updated that commit as per:\r\n<details><summary>git diff e9a271b ed06899</summary>\r\n<p>\r\n\r\n```diff\r\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp\r\nindex 53c6f3a655..18317574ad 100644\r\n--- a/src/bitcoin-cli.cpp\r\n+++ b/src/bitcoin-cli.cpp\r\n@@ -419,6 +420,13 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& str\r\n    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\r\n     do {\r\n         try {\r\n             response = CallRPC(rh, strMethod, args, rpcwallet);\r\n+\r\n+            if (fWait) {\r\n+                const UniValue& error = find_value(response, \"error\");\r\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\r\n+                    throw CConnectionFailed(\"server in warmup\");\r\n+                }\r\n+            }\r\n             break; // Connection succeeded, no need to retry.\r\n         }\r\n         catch (const CConnectionFailed&) {\r\n@@ -507,12 +514,8 @@ static int CommandLineRPC(int argc, char *argv[])\r\n         const UniValue& error = find_value(reply, \"error\");\r\n         if (!error.isNull()) {\r\n             // Error\r\n-            int code = error[\"code\"].get_int();\r\n-            if (code == RPC_IN_WARMUP && gArgs.GetBoolArg(\"-rpcwait\", false)) {\r\n-                throw CConnectionFailed(\"server in warmup\");\r\n-            }\r\n             strPrint = \"error: \" + error.write();\r\n-            nRet = abs(code);\r\n+            nRet = abs(error[\"code\"].get_int());\r\n             if (error.isObject()) {\r\n                 UniValue errCode = find_value(error, \"code\");\r\n                 UniValue errMsg  = find_value(error, \"message\");\r\n```\r\n</p>\r\n</details>\r\n",
    "created_at": "2020-04-13T21:24:53Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r407730476",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407730476"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r407730476"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407730476/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 512,
    "side": "RIGHT",
    "in_reply_to_id": 407669164
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409924320",
    "pull_request_review_id": 395086529,
    "id": 409924320,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyNDMyMA==",
    "diff_hunk": "@@ -130,20 +130,21 @@ void DeleteAuthCookie()\n     }\n }\n \n-std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)\n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue& in)\n {\n     if (!in.isArray()) {\n         throw std::runtime_error(\"Batch must be an array\");\n     }\n+    const size_t num {in.size()};\n     std::vector<UniValue> batch(num);\n-    for (size_t i=0; i<in.size(); ++i) {\n+    for (size_t i=0; i<num; ++i) {",
    "path": "src/rpc/request.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "c2d63a8c05e14cdfdaae2ebca7a6b38907c31f1c",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "c2d63a8c05e14cdfdaae2ebca7a6b38907c31f1c\r\n\r\n```diff\r\n     const size_t num {in.size()};\r\n     std::vector<UniValue> batch(num);\r\n-    for (size_t i=0; i<num; ++i) {\r\n-        const UniValue &rec = in[i];\r\n+    for (const UniValue &rec : in.getValues()) {\r\n         if (!rec.isObject()) {\r\n             throw std::runtime_error(\"Batch member must be an object\");\r\n```",
    "created_at": "2020-04-17T00:28:22Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409924320",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409924320"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409924320"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409924320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 140,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409928476",
    "pull_request_review_id": 395086529,
    "id": 409928476,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyODQ3Ng==",
    "diff_hunk": "@@ -275,9 +273,6 @@ class GetinfoRequestHandler: public BaseRequestHandler\n             }\n             result.pushKV(\"paytxfee\", batch[ID_WALLETINFO][\"result\"][\"paytxfee\"]);\n         }\n-        if (!batch[ID_BALANCES][\"result\"].isNull()) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "c2d63a8c05e14cdfdaae2ebca7a6b38907c31f1c",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Any reason to drop this (and break existing scripts)? Especially when `-rpcwallet` is set - and in this case all balances aren't even necessary. And if `-rpcwallet` is not set but `listwallets` gives just one wallet then it could still show `\"balance\": ` after all, the  server is defaulting to the unique one.",
    "created_at": "2020-04-17T00:42:36Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409928476",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409928476"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409928476"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409928476/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 278,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409932607",
    "pull_request_review_id": 395095500,
    "id": 409932607,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMjYwNw==",
    "diff_hunk": "@@ -275,9 +273,6 @@ class GetinfoRequestHandler: public BaseRequestHandler\n             }\n             result.pushKV(\"paytxfee\", batch[ID_WALLETINFO][\"result\"][\"paytxfee\"]);\n         }\n-        if (!batch[ID_BALANCES][\"result\"].isNull()) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "c2d63a8c05e14cdfdaae2ebca7a6b38907c31f1c",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for reviewing @promag. I don't know if API stability with `-getinfo` is an issue if it's intended for human use. ISTM it's better to display the balances consistently, whether one wallet or several?",
    "created_at": "2020-04-17T00:59:03Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409932607",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409932607"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409932607"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409932607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 278,
    "side": "LEFT",
    "in_reply_to_id": 409928476
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409935493",
    "pull_request_review_id": 395098674,
    "id": 409935493,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNTQ5Mw==",
    "diff_hunk": "@@ -130,20 +130,21 @@ void DeleteAuthCookie()\n     }\n }\n \n-std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)\n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue& in)\n {\n     if (!in.isArray()) {\n         throw std::runtime_error(\"Batch must be an array\");\n     }\n+    const size_t num {in.size()};\n     std::vector<UniValue> batch(num);\n-    for (size_t i=0; i<in.size(); ++i) {\n+    for (size_t i=0; i<num; ++i) {",
    "path": "src/rpc/request.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "c2d63a8c05e14cdfdaae2ebca7a6b38907c31f1c",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That's better -- thanks! Done.",
    "created_at": "2020-04-17T01:09:43Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409935493",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409935493"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409935493"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409935493/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 140,
    "side": "RIGHT",
    "in_reply_to_id": 409924320
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409935767",
    "pull_request_review_id": 395098975,
    "id": 409935767,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNTc2Nw==",
    "diff_hunk": "@@ -275,9 +273,6 @@ class GetinfoRequestHandler: public BaseRequestHandler\n             }\n             result.pushKV(\"paytxfee\", batch[ID_WALLETINFO][\"result\"][\"paytxfee\"]);\n         }\n-        if (!batch[ID_BALANCES][\"result\"].isNull()) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "c2d63a8c05e14cdfdaae2ebca7a6b38907c31f1c",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I mean that you could leave \"balance\" untouched and just add `balances`. Later we could drop it. Only a suggestion, but\r\n 1. if `-rpcwallet` is set why show all balances? Sounds conceptually wrong. Note that `getwalletinfo` uses that (or are you planning to call `getwalletinfo` for all wallets?)\r\n 2. this is not an API but it's a command people can use in scripts so why break it for no good reason?",
    "created_at": "2020-04-17T01:10:42Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409935767",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409935767"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r409935767"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409935767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 278,
    "side": "LEFT",
    "in_reply_to_id": 409928476
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/410137980",
    "pull_request_review_id": 395343537,
    "id": 410137980,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEzNzk4MA==",
    "diff_hunk": "@@ -275,9 +273,6 @@ class GetinfoRequestHandler: public BaseRequestHandler\n             }\n             result.pushKV(\"paytxfee\", batch[ID_WALLETINFO][\"result\"][\"paytxfee\"]);\n         }\n-        if (!batch[ID_BALANCES][\"result\"].isNull()) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "c2d63a8c05e14cdfdaae2ebca7a6b38907c31f1c",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Note that if multiple wallets are loaded and if `-rpcwallet` is not set then `getwalletinfo` fails, which results in not displaying `keypoolsize` and `paytxfee`.\r\n\r\nSo I think if `-rpcwallet` is set (or just one wallet is loaded), `balances` shouldn't be displayed.",
    "created_at": "2020-04-17T10:32:52Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r410137980",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/410137980"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r410137980"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/410137980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 278,
    "side": "LEFT",
    "in_reply_to_id": 409928476
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411577488",
    "pull_request_review_id": 396683583,
    "id": 411577488,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3NzQ4OA==",
    "diff_hunk": "@@ -275,9 +273,6 @@ class GetinfoRequestHandler: public BaseRequestHandler\n             }\n             result.pushKV(\"paytxfee\", batch[ID_WALLETINFO][\"result\"][\"paytxfee\"]);\n         }\n-        if (!batch[ID_BALANCES][\"result\"].isNull()) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "c2d63a8c05e14cdfdaae2ebca7a6b38907c31f1c",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-04-20T17:55:59Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r411577488",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411577488"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r411577488"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411577488/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 278,
    "side": "LEFT",
    "in_reply_to_id": 409928476
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418755690",
    "pull_request_review_id": 404421535,
    "id": 418755690,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NTY5MA==",
    "diff_hunk": "@@ -369,14 +369,13 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n \n     // check if we should use a special wallet endpoint\n     std::string endpoint = \"/\";\n-    if (!gArgs.GetArgs(\"-rpcwallet\").empty()) {\n-        std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n+    if (rpcwallet || !gArgs.GetArgs(\"-rpcwallet\").empty()) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 24,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "9fa9882fbbf4324f36cbf1008642adf43436be53",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It seems a bit confusing to have two different ways to specify the wallet here (an entry in the global gArgs key-value store and a function parameter). Can you make the outer `CommandLineRPC()` function parse the command line `-rpcwallet` argument and pass it into `ConnectAndCallRPC()` function?",
    "created_at": "2020-05-01T21:58:45Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418755690",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418755690"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418755690"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418755690/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 372,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418758128",
    "pull_request_review_id": 404421535,
    "id": 418758128,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1ODEyOA==",
    "diff_hunk": "@@ -418,6 +417,35 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char *rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");",
    "path": "src/bitcoin-cli.cpp",
    "position": 69,
    "original_position": 52,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "9fa9882fbbf4324f36cbf1008642adf43436be53",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "observation: using throw/catch for control flow is generally considered an anti-pattern. This whole function could be tidied up by changing this block to `UninterruptibleSleep(std::chrono::milliseconds{1000}); continue;`.\r\n\r\n(This PR simply moves this code to its own function, so don't feel obligated to change this. It could be done as a follow-up, or not at all!)",
    "created_at": "2020-05-01T22:06:53Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418758128",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418758128"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418758128"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418758128/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 440,
    "original_line": 440,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418759568",
    "pull_request_review_id": 404421535,
    "id": 418759568,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1OTU2OA==",
    "diff_hunk": "@@ -485,56 +512,54 @@ static int CommandLineRPC(int argc, char *argv[])\n             method = args[0];\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n-\n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n+        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args);\n+\n+        // Parse reply\n+        UniValue result = find_value(reply, \"result\");\n+        const UniValue& error = find_value(reply, \"error\");\n+        if (!error.isNull()) {\n+            // Error\n+            strPrint = \"error: \" + error.write();\n+            nRet = abs(error[\"code\"].get_int());\n+            if (error.isObject()) {\n+                const UniValue& errCode = find_value(error, \"code\");\n+                const UniValue& errMsg  = find_value(error, \"message\");\n+                strPrint = errCode.isNull() ? \"\" : (\"error code: \" + errCode.getValStr() + \"\\n\");\n+\n+                if (errMsg.isStr()) {\n+                    strPrint += (\"error message:\\n\" + errMsg.get_str());\n+                }\n+                if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n+                    strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n+                }\n+            }\n+        } else {\n+            // Display mine.trusted balances for all loaded wallets if -getinfo\n+            // was called without -rpcwallet and more than one wallet is loaded.\n+            if (gArgs.GetBoolArg(\"-getinfo\", false) && gArgs.GetArgs(\"-rpcwallet\").empty()) {\n+                rh.reset(new DefaultRequestHandler());\n+                const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);\n+                const UniValue& wallets = find_value(listwallets, \"result\");\n+                    if (find_value(listwallets, \"error\").isNull() && wallets.size() > 1) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 142,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "9fa9882fbbf4324f36cbf1008642adf43436be53",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This line is over-indented. Should be aligned with the line above.",
    "created_at": "2020-05-01T22:12:03Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418759568",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418759568"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418759568"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418759568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 543,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418776436",
    "pull_request_review_id": 404421535,
    "id": 418776436,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NjQzNg==",
    "diff_hunk": "@@ -485,56 +512,54 @@ static int CommandLineRPC(int argc, char *argv[])\n             method = args[0];\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n-\n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n+        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args);\n+\n+        // Parse reply\n+        UniValue result = find_value(reply, \"result\");\n+        const UniValue& error = find_value(reply, \"error\");\n+        if (!error.isNull()) {\n+            // Error\n+            strPrint = \"error: \" + error.write();\n+            nRet = abs(error[\"code\"].get_int());\n+            if (error.isObject()) {\n+                const UniValue& errCode = find_value(error, \"code\");\n+                const UniValue& errMsg  = find_value(error, \"message\");\n+                strPrint = errCode.isNull() ? \"\" : (\"error code: \" + errCode.getValStr() + \"\\n\");\n+\n+                if (errMsg.isStr()) {\n+                    strPrint += (\"error message:\\n\" + errMsg.get_str());\n+                }\n+                if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n+                    strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n+                }\n+            }\n+        } else {\n+            // Display mine.trusted balances for all loaded wallets if -getinfo\n+            // was called without -rpcwallet and more than one wallet is loaded.\n+            if (gArgs.GetBoolArg(\"-getinfo\", false) && gArgs.GetArgs(\"-rpcwallet\").empty()) {\n+                rh.reset(new DefaultRequestHandler());\n+                const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 140,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "9fa9882fbbf4324f36cbf1008642adf43436be53",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`args` is always going to be empty here (see L239). Can you change this to an empty vector? (same for `ConnectAndCallRPRC()` call below)",
    "created_at": "2020-05-01T23:20:04Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418776436",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418776436"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418776436"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418776436/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 541,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418779897",
    "pull_request_review_id": 404421535,
    "id": 418779897,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3OTg5Nw==",
    "diff_hunk": "@@ -130,20 +130,20 @@ void DeleteAuthCookie()\n     }\n }\n \n-std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num)\n+std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue& in)",
    "path": "src/rpc/request.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "9fa9882fbbf4324f36cbf1008642adf43436be53",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nice tidy up!",
    "created_at": "2020-05-01T23:37:50Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418779897",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418779897"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r418779897"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418779897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 133,
    "original_line": 133,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419371519",
    "pull_request_review_id": 404904914,
    "id": 419371519,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3MTUxOQ==",
    "diff_hunk": "@@ -418,6 +417,35 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char *rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");",
    "path": "src/bitcoin-cli.cpp",
    "position": 69,
    "original_position": 52,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "9fa9882fbbf4324f36cbf1008642adf43436be53",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks, John. I tried but it wasn't working out in a way that was tidier, so leaving it be for now.",
    "created_at": "2020-05-04T11:32:23Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419371519",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419371519"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419371519"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419371519/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 440,
    "original_line": 440,
    "side": "RIGHT",
    "in_reply_to_id": 418758128
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419372263",
    "pull_request_review_id": 404905855,
    "id": 419372263,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3MjI2Mw==",
    "diff_hunk": "@@ -485,56 +512,54 @@ static int CommandLineRPC(int argc, char *argv[])\n             method = args[0];\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n-\n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n+        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args);\n+\n+        // Parse reply\n+        UniValue result = find_value(reply, \"result\");\n+        const UniValue& error = find_value(reply, \"error\");\n+        if (!error.isNull()) {\n+            // Error\n+            strPrint = \"error: \" + error.write();\n+            nRet = abs(error[\"code\"].get_int());\n+            if (error.isObject()) {\n+                const UniValue& errCode = find_value(error, \"code\");\n+                const UniValue& errMsg  = find_value(error, \"message\");\n+                strPrint = errCode.isNull() ? \"\" : (\"error code: \" + errCode.getValStr() + \"\\n\");\n+\n+                if (errMsg.isStr()) {\n+                    strPrint += (\"error message:\\n\" + errMsg.get_str());\n+                }\n+                if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n+                    strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n+                }\n+            }\n+        } else {\n+            // Display mine.trusted balances for all loaded wallets if -getinfo\n+            // was called without -rpcwallet and more than one wallet is loaded.\n+            if (gArgs.GetBoolArg(\"-getinfo\", false) && gArgs.GetArgs(\"-rpcwallet\").empty()) {\n+                rh.reset(new DefaultRequestHandler());\n+                const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);\n+                const UniValue& wallets = find_value(listwallets, \"result\");\n+                    if (find_value(listwallets, \"error\").isNull() && wallets.size() > 1) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 142,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "9fa9882fbbf4324f36cbf1008642adf43436be53",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oops, thanks John! Fixed.",
    "created_at": "2020-05-04T11:34:05Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419372263",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419372263"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419372263"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419372263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 543,
    "side": "RIGHT",
    "in_reply_to_id": 418759568
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419373024",
    "pull_request_review_id": 404906781,
    "id": 419373024,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3MzAyNA==",
    "diff_hunk": "@@ -485,56 +512,54 @@ static int CommandLineRPC(int argc, char *argv[])\n             method = args[0];\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n-\n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n+        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args);\n+\n+        // Parse reply\n+        UniValue result = find_value(reply, \"result\");\n+        const UniValue& error = find_value(reply, \"error\");\n+        if (!error.isNull()) {\n+            // Error\n+            strPrint = \"error: \" + error.write();\n+            nRet = abs(error[\"code\"].get_int());\n+            if (error.isObject()) {\n+                const UniValue& errCode = find_value(error, \"code\");\n+                const UniValue& errMsg  = find_value(error, \"message\");\n+                strPrint = errCode.isNull() ? \"\" : (\"error code: \" + errCode.getValStr() + \"\\n\");\n+\n+                if (errMsg.isStr()) {\n+                    strPrint += (\"error message:\\n\" + errMsg.get_str());\n+                }\n+                if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n+                    strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n+                }\n+            }\n+        } else {\n+            // Display mine.trusted balances for all loaded wallets if -getinfo\n+            // was called without -rpcwallet and more than one wallet is loaded.\n+            if (gArgs.GetBoolArg(\"-getinfo\", false) && gArgs.GetArgs(\"-rpcwallet\").empty()) {\n+                rh.reset(new DefaultRequestHandler());\n+                const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 140,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "9fa9882fbbf4324f36cbf1008642adf43436be53",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2020-05-04T11:35:41Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419373024",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419373024"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419373024"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419373024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 541,
    "side": "RIGHT",
    "in_reply_to_id": 418776436
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419373451",
    "pull_request_review_id": 404907294,
    "id": 419373451,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3MzQ1MQ==",
    "diff_hunk": "@@ -369,14 +369,13 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n \n     // check if we should use a special wallet endpoint\n     std::string endpoint = \"/\";\n-    if (!gArgs.GetArgs(\"-rpcwallet\").empty()) {\n-        std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n+    if (rpcwallet || !gArgs.GetArgs(\"-rpcwallet\").empty()) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 24,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "9fa9882fbbf4324f36cbf1008642adf43436be53",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Great point. Done; much better.",
    "created_at": "2020-05-04T11:36:36Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419373451",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419373451"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r419373451"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419373451/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 372,
    "side": "RIGHT",
    "in_reply_to_id": 418755690
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427479949",
    "pull_request_review_id": 414674969,
    "id": 427479949,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3OTk0OQ==",
    "diff_hunk": "@@ -418,6 +417,68 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: this comment line for `rpcwallet` appears one commit too early. It should be added in `cli: lift -rpcwallet logic up to CommandLineRPC()`",
    "created_at": "2020-05-19T17:36:01Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427479949",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427479949"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427479949"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427479949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 425,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427514316",
    "pull_request_review_id": 414674969,
    "id": 427514316,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNDMxNg==",
    "diff_hunk": "@@ -486,55 +546,45 @@ static int CommandLineRPC(int argc, char *argv[])\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n \n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n-                    }\n-                } else {\n-                    // Result\n-                    if (result.isNull())\n-                        strPrint = \"\";\n-                    else if (result.isStr())\n-                        strPrint = result.get_str();\n-                    else\n-                        strPrint = result.write(2);\n+        UniValue reply;\n+        if (gArgs.IsArgSet(\"-rpcwallet\")) {\n+            reply = ConnectAndCallRPC(rh.get(), method, args, gArgs.GetArg(\"-rpcwallet\", \"\").c_str());\n+        } else {\n+            reply = ConnectAndCallRPC(rh.get(), method, args);\n+        }",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Calling the same function with mostly the same params in the if and else branch seems redundant. How about:\r\n\r\n```suggestion\r\n        const char* wallet_name = nullptr;\r\n        if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\").c_str();\r\n\r\n        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, wallet_name);\r\n```\r\n\r\nor even:\r\n\r\n```\r\n        const char * const wallet_name = gArgs.IsArgSet(\"-rpcwallet\") ?\r\n                                         gArgs.GetArg(\"-rpcwallet\", \"\").c_str() :\r\n                                         nullptr;\r\n```\r\n\r\n(but generally I prefer to be a bit more verbose and avoid ternary operators).",
    "created_at": "2020-05-19T18:31:17Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427514316",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427514316"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427514316"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427514316/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 549,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 554,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427516770",
    "pull_request_review_id": 414674969,
    "id": 427516770,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNjc3MA==",
    "diff_hunk": "@@ -418,6 +417,68 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        }\n+        catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param[in] result  Reference to UniValue object the wallet names and balances are pushed to.",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 88,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: this is an in/out parameter, since it gets appended to by the function.",
    "created_at": "2020-05-19T18:35:28Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427516770",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427516770"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427516770"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427516770/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 460,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427519334",
    "pull_request_review_id": 414674969,
    "id": 427519334,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxOTMzNA==",
    "diff_hunk": "@@ -418,6 +417,68 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        }\n+        catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param[in] result  Reference to UniValue object the wallet names and balances are pushed to.\n+ */\n+static void GetWalletBalances(UniValue& result)\n+{\n+    std::unique_ptr<BaseRequestHandler> rh;\n+    rh.reset(new DefaultRequestHandler());",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 93,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "prefer using `MakeUnique` to construct objects owned by unique pointers:\r\n\r\n```suggestion\r\n    std::unique_ptr<BaseRequestHandler> rh{MakeUnique<DefaultRequestHandler>()};\r\n```",
    "created_at": "2020-05-19T18:39:56Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427519334",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427519334"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427519334"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427519334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 464,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 465,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427521181",
    "pull_request_review_id": 414674969,
    "id": 427521181,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMTE4MQ==",
    "diff_hunk": "@@ -418,6 +417,68 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        }\n+        catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param[in] result  Reference to UniValue object the wallet names and balances are pushed to.\n+ */\n+static void GetWalletBalances(UniValue& result)\n+{\n+    std::unique_ptr<BaseRequestHandler> rh;\n+    rh.reset(new DefaultRequestHandler());\n+    const std::vector<std::string> args;\n+    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 95,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: no need to construct a local variable. Use a temporary:\r\n\r\n```suggestion\r\n    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", /* args=*/{});\r\n```\r\n\r\nSame in the call to `ConnectAndCallRPC()` below.",
    "created_at": "2020-05-19T18:42:57Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427521181",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427521181"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427521181"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427521181/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 466,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 467,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427527927",
    "pull_request_review_id": 414674969,
    "id": 427527927,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNzkyNw==",
    "diff_hunk": "@@ -418,6 +417,68 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        }\n+        catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param[in] result  Reference to UniValue object the wallet names and balances are pushed to.\n+ */\n+static void GetWalletBalances(UniValue& result)\n+{\n+    std::unique_ptr<BaseRequestHandler> rh;\n+    rh.reset(new DefaultRequestHandler());\n+    const std::vector<std::string> args;\n+    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);\n+    const UniValue& wallets = find_value(listwallets, \"result\");\n+\n+    if (find_value(listwallets, \"error\").isNull() && wallets.size() > 1) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 98,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I prefer to exit early rather than put the mainline case inside an `if` block. That helps avoid overnesting (not an issue here), and I think it also communicates the intent a bit better:\r\n\r\n```\r\nif (!find_value(listwallets, \"error\").isNull() || wallets.size() <= 1) return;\r\nUnivalue balances(UniValue::VIBJ);\r\n...\r\n```",
    "created_at": "2020-05-19T18:54:19Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427527927",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427527927"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427527927"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427527927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 470,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427812565",
    "pull_request_review_id": 415081183,
    "id": 427812565,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxMjU2NQ==",
    "diff_hunk": "@@ -418,6 +417,68 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good catch! Fixed.",
    "created_at": "2020-05-20T07:57:23Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427812565",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427812565"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427812565"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427812565/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 425,
    "side": "RIGHT",
    "in_reply_to_id": 427479949
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427813067",
    "pull_request_review_id": 415081805,
    "id": 427813067,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxMzA2Nw==",
    "diff_hunk": "@@ -418,6 +417,68 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        }\n+        catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param[in] result  Reference to UniValue object the wallet names and balances are pushed to.",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 88,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks. Replaced with just `@param`.",
    "created_at": "2020-05-20T07:58:15Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427813067",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427813067"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427813067"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427813067/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 460,
    "side": "RIGHT",
    "in_reply_to_id": 427516770
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427813490",
    "pull_request_review_id": 415082347,
    "id": 427813490,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxMzQ5MA==",
    "diff_hunk": "@@ -418,6 +417,68 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        }\n+        catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param[in] result  Reference to UniValue object the wallet names and balances are pushed to.\n+ */\n+static void GetWalletBalances(UniValue& result)\n+{\n+    std::unique_ptr<BaseRequestHandler> rh;\n+    rh.reset(new DefaultRequestHandler());",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 93,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "TIL, thank you! Updated.",
    "created_at": "2020-05-20T07:58:55Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427813490",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427813490"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427813490"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427813490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 464,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 465,
    "side": "RIGHT",
    "in_reply_to_id": 427519334
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427813767",
    "pull_request_review_id": 415082700,
    "id": 427813767,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxMzc2Nw==",
    "diff_hunk": "@@ -418,6 +417,68 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        }\n+        catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param[in] result  Reference to UniValue object the wallet names and balances are pushed to.\n+ */\n+static void GetWalletBalances(UniValue& result)\n+{\n+    std::unique_ptr<BaseRequestHandler> rh;\n+    rh.reset(new DefaultRequestHandler());\n+    const std::vector<std::string> args;\n+    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 95,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2020-05-20T07:59:23Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427813767",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427813767"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427813767"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427813767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 466,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 467,
    "side": "RIGHT",
    "in_reply_to_id": 427521181
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427816362",
    "pull_request_review_id": 415085998,
    "id": 427816362,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxNjM2Mg==",
    "diff_hunk": "@@ -418,6 +417,68 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        }\n+        catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param[in] result  Reference to UniValue object the wallet names and balances are pushed to.\n+ */\n+static void GetWalletBalances(UniValue& result)\n+{\n+    std::unique_ptr<BaseRequestHandler> rh;\n+    rh.reset(new DefaultRequestHandler());\n+    const std::vector<std::string> args;\n+    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);\n+    const UniValue& wallets = find_value(listwallets, \"result\");\n+\n+    if (find_value(listwallets, \"error\").isNull() && wallets.size() > 1) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 98,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree (fan of guard clauses myself) but the conditional becomes a bit less readable to my eye going from an and to a negative or, so separated it into two guard conditionals (I'm admittedly not sure it's actually more readable that way.",
    "created_at": "2020-05-20T08:03:56Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427816362",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427816362"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427816362"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427816362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 470,
    "side": "RIGHT",
    "in_reply_to_id": 427527927
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427825073",
    "pull_request_review_id": 415097199,
    "id": 427825073,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyNTA3Mw==",
    "diff_hunk": "@@ -486,55 +546,45 @@ static int CommandLineRPC(int argc, char *argv[])\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n \n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n-                    }\n-                } else {\n-                    // Result\n-                    if (result.isNull())\n-                        strPrint = \"\";\n-                    else if (result.isStr())\n-                        strPrint = result.get_str();\n-                    else\n-                        strPrint = result.write(2);\n+        UniValue reply;\n+        if (gArgs.IsArgSet(\"-rpcwallet\")) {\n+            reply = ConnectAndCallRPC(rh.get(), method, args, gArgs.GetArg(\"-rpcwallet\", \"\").c_str());\n+        } else {\n+            reply = ConnectAndCallRPC(rh.get(), method, args);\n+        }",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wanted to do this as well, but with C-style strings it causes issues (unless wrapped in the same block scope IIRC) and `test/functional/wallet_multiwallet.py --usecli` fails.",
    "created_at": "2020-05-20T08:18:29Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427825073",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427825073"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427825073"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427825073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 549,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 554,
    "side": "RIGHT",
    "in_reply_to_id": 427514316
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427830111",
    "pull_request_review_id": 415103596,
    "id": 427830111,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgzMDExMQ==",
    "diff_hunk": "@@ -486,55 +546,45 @@ static int CommandLineRPC(int argc, char *argv[])\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n \n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n-                    }\n-                } else {\n-                    // Result\n-                    if (result.isNull())\n-                        strPrint = \"\";\n-                    else if (result.isStr())\n-                        strPrint = result.get_str();\n-                    else\n-                        strPrint = result.write(2);\n+        UniValue reply;\n+        if (gArgs.IsArgSet(\"-rpcwallet\")) {\n+            reply = ConnectAndCallRPC(rh.get(), method, args, gArgs.GetArg(\"-rpcwallet\", \"\").c_str());\n+        } else {\n+            reply = ConnectAndCallRPC(rh.get(), method, args);\n+        }",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Inlined the wallet_name logic as a ternary in one call.",
    "created_at": "2020-05-20T08:26:33Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427830111",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427830111"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r427830111"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427830111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 549,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 554,
    "side": "RIGHT",
    "in_reply_to_id": 427514316
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428327325",
    "pull_request_review_id": 415739011,
    "id": 428327325,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyNzMyNQ==",
    "diff_hunk": "@@ -486,55 +546,45 @@ static int CommandLineRPC(int argc, char *argv[])\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n \n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n-                    }\n-                } else {\n-                    // Result\n-                    if (result.isNull())\n-                        strPrint = \"\";\n-                    else if (result.isStr())\n-                        strPrint = result.get_str();\n-                    else\n-                        strPrint = result.write(2);\n+        UniValue reply;\n+        if (gArgs.IsArgSet(\"-rpcwallet\")) {\n+            reply = ConnectAndCallRPC(rh.get(), method, args, gArgs.GetArg(\"-rpcwallet\", \"\").c_str());\n+        } else {\n+            reply = ConnectAndCallRPC(rh.get(), method, args);\n+        }",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "My suggestion has a horrible bug, which only revealed itself when the wallet name is long enough. `c_str()` returns a `char*` that's only valid as long as the underlying `std::string` is in scope. In `gArgs.GetArg(\"-rpcwallet\", \"\").c_str()`, the `gArgs.GetArg(\"-rpcwallet\", \"\")` is a temporary that goes out of scope as soon as the statement ends, so `wallet_name` is pointing to freed memory. For short wallet names, that memory might not get reused, and the code that dereferences it still works, but for longer names, it fails.\r\n\r\nI'm sorry to keep suggesting you move this around, but how about using a `Optional<std::string>` as the optional wallet name? The `ConnectAndCallRPC()` function signatures becomes:\r\n\r\n`static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, Optional<std::string> rpcwallet = {})`\r\n\r\nthe wallet parsing code becomes:\r\n\r\n```\r\n        Optional<std::string> wallet_name {};\r\n\r\n        if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\r\n```\r\n\r\nand the code in `CallRPC()` changes to:\r\n\r\n```\r\n    // check if we should use a special wallet endpoint\r\n    std::string endpoint = \"/\";\r\n    if (rpcwallet) {\r\n        char* encodedURI = evhttp_uriencode(rpcwallet->data(), rpcwallet->size(), false);\r\n...\r\n```",
    "created_at": "2020-05-20T21:48:48Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428327325",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428327325"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428327325"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428327325/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 549,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 554,
    "side": "RIGHT",
    "in_reply_to_id": 427514316
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428327866",
    "pull_request_review_id": 415739706,
    "id": 428327866,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyNzg2Ng==",
    "diff_hunk": "@@ -418,6 +417,68 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args, const char * const rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        }\n+        catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param[in] result  Reference to UniValue object the wallet names and balances are pushed to.\n+ */\n+static void GetWalletBalances(UniValue& result)\n+{\n+    std::unique_ptr<BaseRequestHandler> rh;\n+    rh.reset(new DefaultRequestHandler());\n+    const std::vector<std::string> args;\n+    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", args);\n+    const UniValue& wallets = find_value(listwallets, \"result\");\n+\n+    if (find_value(listwallets, \"error\").isNull() && wallets.size() > 1) {",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 98,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it's fine like that, but this is really a matter of personal taste. You should go with whichever way you prefer.",
    "created_at": "2020-05-20T21:50:02Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428327866",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428327866"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428327866"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428327866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 470,
    "side": "RIGHT",
    "in_reply_to_id": 427527927
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428429846",
    "pull_request_review_id": 415860451,
    "id": 428429846,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyOTg0Ng==",
    "diff_hunk": "@@ -474,9 +532,8 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n-        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+        if (gArgs.IsArgSet(\"-getinfo\")) {",
    "path": "src/bitcoin-cli.cpp",
    "position": 116,
    "original_position": 116,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "0af7d3a5c242a1b668cbf36c545a87f2810e88f3",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why are you changing this?",
    "created_at": "2020-05-21T03:48:38Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428429846",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428429846"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428429846"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428429846/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 535,
    "original_line": 535,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428431356",
    "pull_request_review_id": 415862216,
    "id": 428431356,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzMTM1Ng==",
    "diff_hunk": "@@ -418,6 +417,65 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const char* const rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        } catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param result  Reference to UniValue object the wallet names and balances are pushed to.\n+ */\n+static void GetWalletBalances(UniValue& result)\n+{\n+    std::unique_ptr<BaseRequestHandler> rh{MakeUnique<DefaultRequestHandler>()};\n+    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", /* args=*/{});\n+    if (!find_value(listwallets, \"error\").isNull()) return;\n+    const UniValue& wallets = find_value(listwallets, \"result\");\n+    if (wallets.size() <= 1) return;\n+\n+    UniValue balances(UniValue::VOBJ);\n+    for (const UniValue& wallet : wallets.getValues()) {\n+        const char* const wallet_name = wallet.get_str().c_str();",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 100,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "0af7d3a5c242a1b668cbf36c545a87f2810e88f3",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Scoping issue. `wallet_name` will be an out-of-scope temporary here.\r\n\r\nSuggest just passing it as an arg, and using the UniValue in pushKV below.\r\n\r\n```C++\r\n    for (const UniValue& wallet : wallets.getValues()) {\r\n        const UniValue getbalances = ConnectAndCallRPC(rh.get(), \"getbalances\", /* args=*/{}, wallet.get_str().c_str());\r\n        const UniValue& balance = find_value(getbalances, \"result\")[\"mine\"][\"trusted\"];\r\n        balances.pushKV(wallet, balance);\r\n    }\r\n```",
    "created_at": "2020-05-21T03:55:19Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428431356",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428431356"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428431356"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428431356/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 471,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428503351",
    "pull_request_review_id": 415950686,
    "id": 428503351,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzM1MQ==",
    "diff_hunk": "@@ -474,9 +532,8 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n-        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+        if (gArgs.IsArgSet(\"-getinfo\")) {",
    "path": "src/bitcoin-cli.cpp",
    "position": 116,
    "original_position": 116,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "0af7d3a5c242a1b668cbf36c545a87f2810e88f3",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`IsArgSet()` seemed more appropriate than `GetBoolArg()` as we don't need the value, only to know if the arg is set (and `IsArgSet()` is used elsewhere in this file for the same purpose). Updated the commit message to say why.",
    "created_at": "2020-05-21T07:57:36Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428503351",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428503351"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428503351"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428503351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 535,
    "original_line": 535,
    "side": "RIGHT",
    "in_reply_to_id": 428429846
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428504785",
    "pull_request_review_id": 415952599,
    "id": 428504785,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwNDc4NQ==",
    "diff_hunk": "@@ -418,6 +417,65 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Pointer to const c-string rpcwallet arg to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const char* const rpcwallet = nullptr)\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        } catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param result  Reference to UniValue object the wallet names and balances are pushed to.\n+ */\n+static void GetWalletBalances(UniValue& result)\n+{\n+    std::unique_ptr<BaseRequestHandler> rh{MakeUnique<DefaultRequestHandler>()};\n+    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", /* args=*/{});\n+    if (!find_value(listwallets, \"error\").isNull()) return;\n+    const UniValue& wallets = find_value(listwallets, \"result\");\n+    if (wallets.size() <= 1) return;\n+\n+    UniValue balances(UniValue::VOBJ);\n+    for (const UniValue& wallet : wallets.getValues()) {\n+        const char* const wallet_name = wallet.get_str().c_str();",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 100,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "0af7d3a5c242a1b668cbf36c545a87f2810e88f3",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good catch, thanks! Switched to `std::string` after taking @jnewbery's suggestion to switch to using `Optional<std::string>` for the `rpcwallet` parameter.",
    "created_at": "2020-05-21T08:00:57Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428504785",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428504785"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428504785"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428504785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 471,
    "side": "RIGHT",
    "in_reply_to_id": 428431356
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428507172",
    "pull_request_review_id": 415955788,
    "id": 428507172,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwNzE3Mg==",
    "diff_hunk": "@@ -486,55 +546,45 @@ static int CommandLineRPC(int argc, char *argv[])\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n \n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n-                    }\n-                } else {\n-                    // Result\n-                    if (result.isNull())\n-                        strPrint = \"\";\n-                    else if (result.isStr())\n-                        strPrint = result.get_str();\n-                    else\n-                        strPrint = result.write(2);\n+        UniValue reply;\n+        if (gArgs.IsArgSet(\"-rpcwallet\")) {\n+            reply = ConnectAndCallRPC(rh.get(), method, args, gArgs.GetArg(\"-rpcwallet\", \"\").c_str());\n+        } else {\n+            reply = ConnectAndCallRPC(rh.get(), method, args);\n+        }",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks, John! Much better. Suggestions gratefully taken, passed as const reference (per https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-in), added the explicit `#include <optional.h>` header, and changed `GetWalletBalances` to pass `const std::string wallet_name`.\r\n\r\nEdit: since much of the time `rpcwallet` is nullptr, I'm not sure whether it's better in this case to pass by value for the nullptr case or by const reference for the string case. Likely little difference and by value is simpler and more straightforward.",
    "created_at": "2020-05-21T08:06:39Z",
    "updated_at": "2020-05-21T14:00:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428507172",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428507172"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428507172"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428507172/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 549,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 554,
    "side": "RIGHT",
    "in_reply_to_id": 427514316
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428507752",
    "pull_request_review_id": 415956541,
    "id": 428507752,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwNzc1Mg==",
    "diff_hunk": "@@ -486,55 +546,45 @@ static int CommandLineRPC(int argc, char *argv[])\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n \n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n-                    }\n-                } else {\n-                    // Result\n-                    if (result.isNull())\n-                        strPrint = \"\";\n-                    else if (result.isStr())\n-                        strPrint = result.get_str();\n-                    else\n-                        strPrint = result.write(2);\n+        UniValue reply;\n+        if (gArgs.IsArgSet(\"-rpcwallet\")) {\n+            reply = ConnectAndCallRPC(rh.get(), method, args, gArgs.GetArg(\"-rpcwallet\", \"\").c_str());\n+        } else {\n+            reply = ConnectAndCallRPC(rh.get(), method, args);\n+        }",
    "path": "src/bitcoin-cli.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "2e7d8b9bf584ab61295795f0521537fc3f1057df",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(I had run into this `c_str()` issue 3 weeks ago and wondered what the better solution was. Thanks again!)",
    "created_at": "2020-05-21T08:08:01Z",
    "updated_at": "2020-05-21T08:27:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428507752",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428507752"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428507752"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428507752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 549,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 554,
    "side": "RIGHT",
    "in_reply_to_id": 427514316
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428674779",
    "pull_request_review_id": 416176269,
    "id": 428674779,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3NDc3OQ==",
    "diff_hunk": "@@ -474,9 +532,8 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n-        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+        if (gArgs.IsArgSet(\"-getinfo\")) {",
    "path": "src/bitcoin-cli.cpp",
    "position": 116,
    "original_position": 116,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "0af7d3a5c242a1b668cbf36c545a87f2810e88f3",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Pretty sure this will do the wrong thing with `-nogetinfo` or `-getinfo=0` ?",
    "created_at": "2020-05-21T14:09:03Z",
    "updated_at": "2020-05-21T14:09:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428674779",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428674779"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428674779"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428674779/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 535,
    "original_line": 535,
    "side": "RIGHT",
    "in_reply_to_id": 428429846
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428686632",
    "pull_request_review_id": 416192386,
    "id": 428686632,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4NjYzMg==",
    "diff_hunk": "@@ -474,9 +532,8 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n-        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+        if (gArgs.IsArgSet(\"-getinfo\")) {",
    "path": "src/bitcoin-cli.cpp",
    "position": 116,
    "original_position": 116,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "0af7d3a5c242a1b668cbf36c545a87f2810e88f3",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks -- with your examples and `IsArgSet`, it runs as if `-getinfo` was passed. With `GetBoolArg`, it raises with \"error: too few parameters (need at least command)\". If that is the desired behavior, then ISTM I should not only revert this change but also use `GetBoolArg` at line 569 and update the tests to cover this. Confirm?",
    "created_at": "2020-05-21T14:28:07Z",
    "updated_at": "2020-05-21T14:28:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428686632",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428686632"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428686632"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428686632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 535,
    "original_line": 535,
    "side": "RIGHT",
    "in_reply_to_id": 428429846
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428790740",
    "pull_request_review_id": 416332378,
    "id": 428790740,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5MDc0MA==",
    "diff_hunk": "@@ -474,9 +532,8 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n-        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+        if (gArgs.IsArgSet(\"-getinfo\")) {",
    "path": "src/bitcoin-cli.cpp",
    "position": 116,
    "original_position": 116,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "0af7d3a5c242a1b668cbf36c545a87f2810e88f3",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added a regression test since this was failing silently and will parse the `-getinfo` and `-rpcwallet` command args as before. Thanks @luke-jr for the catch! Edit: to keep the reviews, will do in the follow-up to also add a release note.\r\n\r\n```diff\r\n--- a/src/bitcoin-cli.cpp\r\n+++ b/src/bitcoin-cli.cpp\r\n@@ -532,7 +532,7 @@ static int CommandLineRPC(int argc, char *argv[])\r\n         }\r\n         std::unique_ptr<BaseRequestHandler> rh;\r\n         std::string method;\r\n-        if (gArgs.IsArgSet(\"-getinfo\")) {\r\n+        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\r\n             rh.reset(new GetinfoRequestHandler());\r\n@@ -543,7 +543,7 @@ static int CommandLineRPC(int argc, char *argv[])\r\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\r\n         }\r\n         Optional<std::string> wallet_name{};\r\n-        if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\r\n+        if (!gArgs.GetArgs(\"-rpcwallet\").empty()) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\r\n         const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, wallet_name);\r\n@@ -566,7 +566,7 @@ static int CommandLineRPC(int argc, char *argv[])\r\n         } else {\r\n-            if (gArgs.IsArgSet(\"-getinfo\") && !gArgs.IsArgSet(\"-rpcwallet\")) {\r\n+            if (gArgs.GetBoolArg(\"-getinfo\", false) && gArgs.GetArgs(\"-rpcwallet\").empty()) {\r\n                 GetWalletBalances(result); // fetch multiwallet balances and append to result\r\n             }\r\ndiff --git a/test/functional/interface_bitcoin_cli.py b/test/functional/interface_bitcoin_cli.py\r\nindex 7530e7daf6..10ac82b107 100755\r\n--- a/test/functional/interface_bitcoin_cli.py\r\n+++ b/test/functional/interface_bitcoin_cli.py\r\n@@ -49,6 +49,10 @@ class TestBitcoinCli(BitcoinTestFramework):\r\n         self.log.info(\"Test -getinfo with arguments fails\")\r\n         assert_raises_process_error(1, \"-getinfo takes no arguments\", self.nodes[0].cli('-getinfo').help)\r\n \r\n+        self.log.info(\"Test -getinfo=0 and -nogetinfo fail\")\r\n+        for command in ['-getinfo=0', '-nogetinfo']:\r\n+            assert_raises_process_error(1, \"error: too few parameters (need at least command)\", self.nodes[0].cli(command).send_cli)\r\n+\r\n         self.log.info(\"Test -getinfo returns expected network and blockchain info\")\r\n```",
    "created_at": "2020-05-21T17:08:41Z",
    "updated_at": "2020-05-22T08:30:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428790740",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428790740"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r428790740"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428790740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 535,
    "original_line": 535,
    "side": "RIGHT",
    "in_reply_to_id": 428429846
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429321046",
    "pull_request_review_id": 417009206,
    "id": 429321046,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyMTA0Ng==",
    "diff_hunk": "@@ -474,9 +532,8 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n-        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+        if (gArgs.IsArgSet(\"-getinfo\")) {",
    "path": "src/bitcoin-cli.cpp",
    "position": 116,
    "original_position": 116,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "0af7d3a5c242a1b668cbf36c545a87f2810e88f3",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Seems fine, although this is a pretty pathological case. Why would anyone ever call `bitcoin-cli -nogetinfo`?",
    "created_at": "2020-05-22T15:42:10Z",
    "updated_at": "2020-05-22T15:42:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r429321046",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429321046"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r429321046"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429321046/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 535,
    "original_line": 535,
    "side": "RIGHT",
    "in_reply_to_id": 428429846
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431783474",
    "pull_request_review_id": 420038313,
    "id": 431783474,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc4MzQ3NA==",
    "diff_hunk": "@@ -474,9 +532,8 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n-        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+        if (gArgs.IsArgSet(\"-getinfo\")) {",
    "path": "src/bitcoin-cli.cpp",
    "position": 116,
    "original_position": 116,
    "commit_id": "5edad5ce5d3f15b694bf3fad0300c6446674b554",
    "original_commit_id": "0af7d3a5c242a1b668cbf36c545a87f2810e88f3",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fix and test coverage added in #19089",
    "created_at": "2020-05-28T12:02:38Z",
    "updated_at": "2020-05-28T12:02:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r431783474",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431783474"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18594#discussion_r431783474"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18594"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431783474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 535,
    "original_line": 535,
    "side": "RIGHT",
    "in_reply_to_id": 428429846
  }
]