[
  {
    "sha": "9431e1b91598fc255234ede10c22208ad18685cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDMxZTFiOTE1OThmYzI1NTIzNGVkZTEwYzIyMjA4YWQxODY4NWNk",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-25T03:44:54Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-25T03:47:07Z"
      },
      "message": "Trivial: fixup a few doxygen comments\n\nThese were not declared properly, so their results are not properly\nprocessed. E.g.:\nhttps://dev.visucore.com/bitcoin/doxygen/rpcdump_8cpp.html#a994c8748aaa60fbb78009ff8a0638dea\nhttps://dev.visucore.com/bitcoin/doxygen/coins_8cpp.html#aa03af24ef3570144b045f4fca7a0d603\nhttps://dev.visucore.com/bitcoin/doxygen/wallet_2wallet_8cpp.html#a5c2a7725ff8796f03471f844ecded3d9",
      "tree": {
        "sha": "734be52ab2216d3e77b4b807ba1eb749c3a2b0ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/734be52ab2216d3e77b4b807ba1eb749c3a2b0ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9431e1b91598fc255234ede10c22208ad18685cd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlxKhr4ACgkQTYykuhgE\nCQYiXg//X72t28WJS78Ob7OTQRC+ciqLQkTXOAhj3C31HGTn9dv5JM3J0cNrVYXV\ne7NFluaRuOiGXUqRpuZRSJl9feNFoc/JkuM96cpj/JLL245r6OTVYbjq8f9Hf598\nkbbQcPkrOZrAUkGPQer0mt5OUxDpSN8qJRjH6ArTwqaRE0orThfpeQYBTWKVfXZK\nHtM5uTMo1NAiqvTcHY+RBa/Au41lWNKzy8aLh1TdziDag6RhCDa6CTlXbd4T61sX\nXDreGDHyeYFG5Vzw3Xsl/CFmS89cZtAQ8u2ZsuVeBzD1SCgwy0ZScmEDvCM1eJ2g\n5JdJ8ygZ3i/yaDY+HntCvn3fkGGeXV2ROt6sgofMo2VT363nLgVB3ZiQqUqJnQXq\nFWL6hxcSNDX8rEfjrNdLytxzUWJecoLgq8dnuCpc9oolQjKRMgnNLTjjyJfJKzkk\ntoDl+TTWI9e9LM8PRQRo/o9x9I3H2mSx695nYfrQFTS9G4korxH+lakEtpLAIRBv\nvqBzmcQJ7Ox+jpOrrXc7XRfREPdR+ak/6Cv1PAhCzavBWFBI6Cdfc0PoS1t3LKSk\n+B6BPwWIdD9cZf4jijP89K0aTx3e/Ye10LAyFjUWLSMO8/xe0MbufJYUCTDi1EJL\nA29ecg8DvWUxIfRcZzfipDDUf3fkW8AslJ/BC9FxCpsXeMm6rX0=\n=lnla\n-----END PGP SIGNATURE-----",
        "payload": "tree 734be52ab2216d3e77b4b807ba1eb749c3a2b0ca\nparent 72bd4ab867e3be0d8410403d9641c08288d343e3\nauthor Ben Woosley <ben.woosley@gmail.com> 1548387894 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1548388027 -0800\n\nTrivial: fixup a few doxygen comments\n\nThese were not declared properly, so their results are not properly\nprocessed. E.g.:\nhttps://dev.visucore.com/bitcoin/doxygen/rpcdump_8cpp.html#a994c8748aaa60fbb78009ff8a0638dea\nhttps://dev.visucore.com/bitcoin/doxygen/coins_8cpp.html#aa03af24ef3570144b045f4fca7a0d603\nhttps://dev.visucore.com/bitcoin/doxygen/wallet_2wallet_8cpp.html#a5c2a7725ff8796f03471f844ecded3d9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9431e1b91598fc255234ede10c22208ad18685cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9431e1b91598fc255234ede10c22208ad18685cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9431e1b91598fc255234ede10c22208ad18685cd/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72bd4ab867e3be0d8410403d9641c08288d343e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72bd4ab867e3be0d8410403d9641c08288d343e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72bd4ab867e3be0d8410403d9641c08288d343e3"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "d39ebf9062b355cbaa505258c5064a5b252e23fd",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9431e1b91598fc255234ede10c22208ad18685cd/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9431e1b91598fc255234ede10c22208ad18685cd/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=9431e1b91598fc255234ede10c22208ad18685cd",
        "patch": "@@ -298,17 +298,17 @@ class CCoinsViewCache : public CCoinsViewBacked\n };\n \n //! Utility function to add all of a transaction's outputs to a cache.\n-// When check is false, this assumes that overwrites are only possible for coinbase transactions.\n-// When check is true, the underlying view may be queried to determine whether an addition is\n-// an overwrite.\n+//! When check is false, this assumes that overwrites are only possible for coinbase transactions.\n+//! When check is true, the underlying view may be queried to determine whether an addition is\n+//! an overwrite.\n // TODO: pass in a boolean to limit these possible overwrites to known\n // (pre-BIP34) cases.\n void AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight, bool check = false);\n \n //! Utility function to find any unspent output with a given txid.\n-// This function can be quite expensive because in the event of a transaction\n-// which is not found in the cache, it can cause up to MAX_OUTPUTS_PER_BLOCK\n-// lookups to database, so it should be used with care.\n+//! This function can be quite expensive because in the event of a transaction\n+//! which is not found in the cache, it can cause up to MAX_OUTPUTS_PER_BLOCK\n+//! lookups to database, so it should be used with care.\n const Coin& AccessByTxid(const CCoinsViewCache& cache, const uint256& txid);\n \n #endif // BITCOIN_COINS_H"
      },
      {
        "sha": "4449a36ecdf126e5eb40ef9717d7c0df2877734c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9431e1b91598fc255234ede10c22208ad18685cd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9431e1b91598fc255234ede10c22208ad18685cd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9431e1b91598fc255234ede10c22208ad18685cd",
        "patch": "@@ -273,17 +273,17 @@ class CConnman\n     void SetMaxOutboundTimeframe(uint64_t timeframe);\n     uint64_t GetMaxOutboundTimeframe();\n \n-    //!check if the outbound target is reached\n-    // if param historicalBlockServingLimit is set true, the function will\n-    // response true if the limit for serving historical blocks has been reached\n+    //! check if the outbound target is reached\n+    //! if param historicalBlockServingLimit is set true, the function will\n+    //! response true if the limit for serving historical blocks has been reached\n     bool OutboundTargetReached(bool historicalBlockServingLimit);\n \n-    //!response the bytes left in the current max outbound cycle\n-    // in case of no limit, it will always response 0\n+    //! response the bytes left in the current max outbound cycle\n+    //! in case of no limit, it will always response 0\n     uint64_t GetOutboundTargetBytesLeft();\n \n-    //!response the time in second left in the current max outbound cycle\n-    // in case of no limit, it will always response 0\n+    //! response the time in second left in the current max outbound cycle\n+    //! in case of no limit, it will always response 0\n     uint64_t GetMaxOutboundTimeLeftInCycle();\n \n     uint64_t GetTotalBytesRecv();"
      },
      {
        "sha": "fb4d6e50a6e27a8fb43ae0d2907bd1cb0abf8aaa",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9431e1b91598fc255234ede10c22208ad18685cd/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9431e1b91598fc255234ede10c22208ad18685cd/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9431e1b91598fc255234ede10c22208ad18685cd",
        "patch": "@@ -849,9 +849,9 @@ struct ImportData\n \n enum class ScriptContext\n {\n-    TOP, //! Top-level scriptPubKey\n-    P2SH, //! P2SH redeemScript\n-    WITNESS_V0, //! P2WSH witnessScript\n+    TOP, //!< Top-level scriptPubKey\n+    P2SH, //!< P2SH redeemScript\n+    WITNESS_V0, //!< P2WSH witnessScript\n };\n \n // Analyse the provided scriptPubKey, determining which keys and which redeem scripts from the ImportData struct are needed to spend it, and mark them as used."
      },
      {
        "sha": "937b72779311c6f714ca75c32065ad8cd07ae7a9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9431e1b91598fc255234ede10c22208ad18685cd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9431e1b91598fc255234ede10c22208ad18685cd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9431e1b91598fc255234ede10c22208ad18685cd",
        "patch": "@@ -35,8 +35,8 @@\n #include <vector>\n \n //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n-//  This function will perform salvage on the wallet if requested, as long as only one wallet is\n-//  being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n+//! This function will perform salvage on the wallet if requested, as long as only one wallet is\n+//! being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n \n //! Load wallet databases.\n@@ -55,10 +55,10 @@ void StopWallets();\n void UnloadWallets();\n \n //! Explicitly unload and delete the wallet.\n-//  Blocks the current thread after signaling the unload intent so that all\n-//  wallet clients release the wallet.\n-//  Note that, when blocking is not required, the wallet is implicitly unloaded\n-//  by the shared pointer deleter.\n+//! Blocks the current thread after signaling the unload intent so that all\n+//! wallet clients release the wallet.\n+//! Note that, when blocking is not required, the wallet is implicitly unloaded\n+//! by the shared pointer deleter.\n void UnloadWallet(std::shared_ptr<CWallet>&& wallet);\n \n bool AddWallet(const std::shared_ptr<CWallet>& wallet);\n@@ -588,8 +588,8 @@ class CWalletKey\n     int64_t nTimeCreated;\n     int64_t nTimeExpires;\n     std::string strComment;\n-    //! todo: add something to note what created it (user, getnewaddress, change)\n-    //!   maybe should have a map<string, string> property map\n+    // todo: add something to note what created it (user, getnewaddress, change)\n+    //   maybe should have a map<string, string> property map\n \n     explicit CWalletKey(int64_t nExpires=0);\n "
      }
    ]
  },
  {
    "sha": "70e7cee96028889ab709fa3c479225e584fcb77f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGU3Y2VlOTYwMjg4ODlhYjcwOWZhM2M0NzkyMjVlNTg0ZmNiNzdm",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-25T20:08:00Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-25T20:32:37Z"
      },
      "message": "Trivial: Doxygenize existing CBufferedFile and VectorReader comments",
      "tree": {
        "sha": "07892d0edfe0bb1f001a3bbd0518e81723f45c02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07892d0edfe0bb1f001a3bbd0518e81723f45c02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70e7cee96028889ab709fa3c479225e584fcb77f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJcS3JpAAoJEG7l83hfeLNFJzgH/0dohdT63GhzC9uS29z2nU4s\ntYjFCtP+6wg0frsKFRCyaNMeGJLsMRV8Mxz3+ztrHh0Nl9s9JkUhoukfhiefUQ8E\n7gbmgeZwV4rPedebw2ZOihWsHVQde4OlccGaMaXSHOz94BMXxzSRXQR8tfWTOmom\nWC73imUbMQ8xMbjC5A3QE4p7sQqdHw1sbKlqTz5r/hPbpjKKrvlAkz0fZj7MkJca\nnoOoqjAX4Hr0RmYxJTkWf2F3fYJo836YAiknzFVuzf7ZOVzC2BrEUMAVHoDOPMS4\nEIY1ANZhA7s/Y2ouYVQCCy2zgfHznSUrhrHLIhfQ/MuutrvW6XTWisYQS4w4wbM=\n=YEzY\n-----END PGP SIGNATURE-----",
        "payload": "tree 07892d0edfe0bb1f001a3bbd0518e81723f45c02\nparent 9431e1b91598fc255234ede10c22208ad18685cd\nauthor Ben Woosley <ben.woosley@gmail.com> 1548446880 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1548448357 -0800\n\nTrivial: Doxygenize existing CBufferedFile and VectorReader comments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70e7cee96028889ab709fa3c479225e584fcb77f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70e7cee96028889ab709fa3c479225e584fcb77f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70e7cee96028889ab709fa3c479225e584fcb77f/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9431e1b91598fc255234ede10c22208ad18685cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9431e1b91598fc255234ede10c22208ad18685cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9431e1b91598fc255234ede10c22208ad18685cd"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "4e600f18267b9ac40e5704a284109a4af8daa18f",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70e7cee96028889ab709fa3c479225e584fcb77f/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70e7cee96028889ab709fa3c479225e584fcb77f/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=70e7cee96028889ab709fa3c479225e584fcb77f",
        "patch": "@@ -139,7 +139,7 @@ class VectorReader\n \n public:\n \n-    /*\n+    /**\n      * @param[in]  type Serialization Type\n      * @param[in]  version Serialization Version (including any flags)\n      * @param[in]  data Referenced byte vector to overwrite/append\n@@ -153,7 +153,7 @@ class VectorReader\n         }\n     }\n \n-    /*\n+    /**\n      * (other params same as above)\n      * @param[in]  args  A list of items to deserialize starting at pos.\n      */\n@@ -715,15 +715,15 @@ class CBufferedFile\n     const int nType;\n     const int nVersion;\n \n-    FILE *src;            // source file\n-    uint64_t nSrcPos;     // how many bytes have been read from source\n-    uint64_t nReadPos;    // how many bytes have been read from this\n-    uint64_t nReadLimit;  // up to which position we're allowed to read\n-    uint64_t nRewind;     // how many bytes we guarantee to rewind\n-    std::vector<char> vchBuf; // the buffer\n+    FILE *src;            //!< source file\n+    uint64_t nSrcPos;     //!< how many bytes have been read from source\n+    uint64_t nReadPos;    //!< how many bytes have been read from this\n+    uint64_t nReadLimit;  //!< up to which position we're allowed to read\n+    uint64_t nRewind;     //!< how many bytes we guarantee to rewind\n+    std::vector<char> vchBuf; //!< the buffer\n \n protected:\n-    // read data from the source to fill the buffer\n+    //! read data from the source to fill the buffer\n     bool Fill() {\n         unsigned int pos = nSrcPos % vchBuf.size();\n         unsigned int readNow = vchBuf.size() - pos;\n@@ -768,12 +768,12 @@ class CBufferedFile\n         }\n     }\n \n-    // check whether we're at the end of the source file\n+    //! check whether we're at the end of the source file\n     bool eof() const {\n         return nReadPos == nSrcPos && feof(src);\n     }\n \n-    // read a number of bytes\n+    //! read a number of bytes\n     void read(char *pch, size_t nSize) {\n         if (nSize + nReadPos > nReadLimit)\n             throw std::ios_base::failure(\"Read attempted past buffer limit\");\n@@ -795,12 +795,12 @@ class CBufferedFile\n         }\n     }\n \n-    // return the current reading position\n+    //! return the current reading position\n     uint64_t GetPos() const {\n         return nReadPos;\n     }\n \n-    // rewind to a given reading position\n+    //! rewind to a given reading position\n     bool SetPos(uint64_t nPos) {\n         nReadPos = nPos;\n         if (nReadPos + nRewind < nSrcPos) {\n@@ -826,8 +826,8 @@ class CBufferedFile\n         return true;\n     }\n \n-    // prevent reading beyond a certain position\n-    // no argument removes the limit\n+    //! prevent reading beyond a certain position\n+    //! no argument removes the limit\n     bool SetLimit(uint64_t nPos = std::numeric_limits<uint64_t>::max()) {\n         if (nPos < nReadPos)\n             return false;\n@@ -842,7 +842,7 @@ class CBufferedFile\n         return (*this);\n     }\n \n-    // search for a given byte in the stream, and remain positioned on it\n+    //! search for a given byte in the stream, and remain positioned on it\n     void FindByte(char ch) {\n         while (true) {\n             if (nReadPos == nSrcPos)"
      }
    ]
  }
]