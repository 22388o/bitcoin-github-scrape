fanquake,2021-03-05 02:49:17,"Concept ACK on removing no-longer  needed abstraction. [Currently failing to compile](https://cirrus-ci.com/task/5067477362147328?command=ci#L2464):\n```bash\n  CXX      wallet/libbitcoin_wallet_a-coincontrol.o\nIn file included from /usr/include/c++/9/bits/move.h:55,\n                 from /usr/include/c++/9/bits/nested_exception.h:40,\n                 from /usr/include/c++/9/exception:144,",https://github.com/bitcoin/bitcoin/pull/21366#issuecomment-791110639,791110639,
DrahtBot,2021-03-05 09:56:10,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20459 (rpc: Fail to return undocumented return values by MarcoFalke)\n* #19101 (refactor: remove ::vpwallets and related ",https://github.com/bitcoin/bitcoin/pull/21366#issuecomment-791310076,791310076,
theStack,2021-03-05 13:05:37,"Meh, there seems to be a problem with the (default) copy-constructor of `class JSONRPCRequest` that is invoked in `CRPCTable::help`:\n```\n... (..., const JSONRPCRequest& helpreq) {\n    ...\n    JSONRPCRequest jreq(helpreq);\n    ...\n}\n```\nNo idea why this compiles locally with clang11 and obviously also for the CI jobs for MacOS and ARM.",https://github.com/bitcoin/bitcoin/pull/21366#issuecomment-791407659,791407659,
theStack,2021-03-05 14:59:26,Force-pushed with suggestions by @ryanofsky (https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588287531): introduced a helper `AnyPtr` to access `std::any` contents and generally assigned pointers to std::any instances instead of references. Code looks much cleaner now.,https://github.com/bitcoin/bitcoin/pull/21366#issuecomment-791472457,791472457,
ryanofsky,2021-03-06 20:09:57,"Another batch of simplifications you could consider. There's no need really to require request objects to have contexts assigned.\n\n<details><summary>diff</summary>\n<p>\n\n```diff\ndiff --git a/src/bitcoind.cpp b/src/bitcoind.cpp\nindex 87c63593051..7d246325e44 100644\n--- a/src/bitcoind.cpp\n+++ b/src/bitcoind.cpp\n@@ -131,7 +131,7 @@ static bool AppInit(int argc, char* argv[])\n    ",https://github.com/bitcoin/bitcoin/pull/21366#issuecomment-792044351,792044351,
theStack,2021-03-06 23:59:42,Force-pushed with feedback from @JeremyRubin (https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588921151) and @ryanofsky (https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588923880) taken into account: `AnyPtr` uses now the variant of `std::any_cast` that doesn't use exceptions. Also updated the PR description which still referred to the changeset without the `AnyPtr` helper and ,https://github.com/bitcoin/bitcoin/pull/21366#issuecomment-792124283,792124283,
practicalswift,2021-03-07 18:31:35,"Concept ACK\n\n+89 âˆ’155 -- very nice! :)",https://github.com/bitcoin/bitcoin/pull/21366#issuecomment-792329779,792329779,
theStack,2021-03-10 20:18:16,Rebased on master.,https://github.com/bitcoin/bitcoin/pull/21366#issuecomment-796031037,796031037,
theStack,2021-03-16 00:49:58,Rebased on master again.,https://github.com/bitcoin/bitcoin/pull/21366#issuecomment-799860466,799860466,
hebasto,2021-03-28 00:38:45,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/21366#issuecomment-808823725,808823725,
theStack,2021-03-29 21:45:19,Rebased on master and took in all suggestions by @hebasto (https://github.com/bitcoin/bitcoin/pull/21366#pullrequestreview-622716405) -- thanks a lot for reviewing!,https://github.com/bitcoin/bitcoin/pull/21366#issuecomment-809735068,809735068,
ryanofsky,2021-03-05 13:15:01,"In commit ""refactor: replace util::Ref by std::any (C++17)"" (c6686a3a582670618b685e69bdfa2ba893b5ce92)\n\nThis change and other changes in this commit seems pretty obscure and verbose. It would be nice to define a helper function so these 7 lines could be just be replaced with:\n\n```c++\nconst NodeContext* node = util::AnyPtr<NodeContext>(context);\n```\n\nHelper could go in `util/system.",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588287531,588287531,src/rest.cpp
theStack,2021-03-05 14:57:45,"Both introducing a `std::any` access helper and using pointers instead of references are great ideas, thanks! Looks much cleaner now, with the clunky try/catch-construct deduplicated and hidden in util/system.h.",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588356462,588356462,src/rest.cpp
ryanofsky,2021-03-06 15:34:42,"In commit ""refactor: replace util::Ref by std::any (C++17)"" (feb55dde39e59a2709ecefff848a1d8eb9fe69ca)\n\nThere's a bug here ~and this change should be reverted~. This line is supposed to create `jreq` as a copy of `helpreq` using the `JSONRPCRequest` copy constructor. Now it creates a new `jreq` request using the `helpreq` object as an embedded request context.\n\nI'm not sure if this is a ne",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588895346,588895346,src/rpc/server.cpp
ryanofsky,2021-03-06 15:41:00,"In commit ""refactor: replace util::Ref by std::any (C++17)"" (feb55dde39e59a2709ecefff848a1d8eb9fe69ca)\n\nThis turns out to be dangerous because in some cases like `JSONRPCRequest jreq(helpreq);` this constructor will take precedence over the copy constructor.\n\n~Would suggest changing this only to accept pointer arguments so it won't be accidentally invoked trying to create a copy:~\n\n```",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588896097,588896097,src/rpc/request.h
JeremyRubin,2021-03-06 19:29:52,"Concept NACK this implementation.\n\nYou should label this function as noexcept and use the noexcept versions of any_cast which will already return you a nullptr. See variants 4 and 5 https://en.cppreference.com/w/cpp/utility/any/any_cast. These are implemented AFAIK internally without using exceptions.\n\nExceptions have a non negligible performance overhead if hitting the `catch` case we may",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588921151,588921151,src/util/system.h
ryanofsky,2021-03-06 19:55:34,"Oops, sorry. I didn't know about the noexcept casts. This can be simplified to:\n\n```c++\ntemplate<typename T>\nT* AnyPtr(const std::any& any)\n{\n    T* const* ptr = std::any_cast<T*>(&any);\n    return ptr ? *ptr : nullptr;\n}\n```\n\nI don't think this is used in any performance critical code, but no reason this needs to be slower and more complicated.",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588923880,588923880,src/util/system.h
theStack,2021-03-06 20:19:25,"Good catch, I somehow missed that there was a noexcept version of `std::any_cast`. But then I guess we can as well directly use that instead of introducing AnyPtr? This would be in effect just another name for the same purpose.",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588926343,588926343,src/util/system.h
theStack,2021-03-06 20:29:32,"Thanks, done.",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588927512,588927512,src/rpc/server.cpp
ryanofsky,2021-03-06 20:36:43,"> Good catch, I somehow missed that there was a noexcept version of `std::any_cast`. But then I guess we can as well directly use that instead of introducing AnyPtr? This would be in effect just another name for the same purpose.\n\nMy preference would be to keep AnyPtr instead of introducing NodeContext* const* temporary variables because I think the two different ways these could be null could",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588928188,588928188,src/util/system.h
JeremyRubin,2021-03-07 01:50:30,"using any_cast bare is a code smell IMO because it can arbitrarily become the non noexcept version :(, the wrapper makes the version guaranteed. If anything, you could declare it as inline so there is no overhead? (idk about template + inline...)\n\nI think that's what @ryanofsky is saying.",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r588957692,588957692,src/util/system.h
theStack,2021-03-07 22:09:50,"After having tried out using std::any_cast directly yesterday, I can confirm ryanofsky's point of the drawback, needing temporary variables, making the code clunky and potentially confusing. Also the ambiguity on which version is chosen is a strong argument against it. Kept the AnyPtr function, changed it to the [proposed implementation](https://github.com/bitcoin/bitcoin/pull/21366#discussion_r58",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r589096062,589096062,src/util/system.h
hebasto,2021-03-28 02:46:37,Add `#include <any>` ?,https://github.com/bitcoin/bitcoin/pull/21366#discussion_r602820686,602820686,src/node/interfaces.cpp
hebasto,2021-03-28 02:50:15,"nit: Could be more concise without losing much details:\n```suggestion\n    auto node_context = util::AnyPtr<NodeContext>(context);\n```\n\n(Here and in other places when `util::AnyPtr<T>` is used)",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r602821073,602821073,src/rest.cpp
hebasto,2021-03-28 02:51:21,No need to `#include <any>` here. ,https://github.com/bitcoin/bitcoin/pull/21366#discussion_r602821146,602821146,src/rpc/server.cpp
theStack,2021-03-29 21:36:55,Done.,https://github.com/bitcoin/bitcoin/pull/21366#discussion_r603630093,603630093,src/node/interfaces.cpp
theStack,2021-03-29 21:41:15,"Good idea. I agree that for the reader it is obvious enough to see that ""AnyPtr< T >(...)"" returns type ""T*"" and using ""auto"" makes sense here. Done for all instances.",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r603632492,603632492,src/rest.cpp
theStack,2021-03-29 21:42:47,"Thanks, removed.",https://github.com/bitcoin/bitcoin/pull/21366#discussion_r603633200,603633200,src/rpc/server.cpp
