[
  {
    "sha": "95cccf8a4b392959c1fd7ec0647e04eb13880865",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWNjY2Y4YTRiMzkyOTU5YzFmZDdlYzA2NDdlMDRlYjEzODgwODY1",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-03-05T13:33:41Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-03-29T20:37:59Z"
      },
      "message": "util: introduce helper AnyPtr to access std::any instances\n\nCo-authored-by: Russell Yanofsky <russ@yanofsky.org>",
      "tree": {
        "sha": "a33339687a25a3680bd2ab52ef21da4ee2c8f3b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a33339687a25a3680bd2ab52ef21da4ee2c8f3b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95cccf8a4b392959c1fd7ec0647e04eb13880865",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95cccf8a4b392959c1fd7ec0647e04eb13880865",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95cccf8a4b392959c1fd7ec0647e04eb13880865",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95cccf8a4b392959c1fd7ec0647e04eb13880865/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c7be9ab90af14d24f4668b02d9f07cec6f88a78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c7be9ab90af14d24f4668b02d9f07cec6f88a78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c7be9ab90af14d24f4668b02d9f07cec6f88a78"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "29657e56e2491466d101fe653982b61eb3b5b007",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95cccf8a4b392959c1fd7ec0647e04eb13880865/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95cccf8a4b392959c1fd7ec0647e04eb13880865/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=95cccf8a4b392959c1fd7ec0647e04eb13880865",
        "patch": "@@ -25,6 +25,7 @@\n #include <util/threadnames.h>\n #include <util/time.h>\n \n+#include <any>\n #include <exception>\n #include <map>\n #include <optional>\n@@ -500,6 +501,18 @@ inline void insert(std::set<TsetT>& dst, const Tsrc& src) {\n     dst.insert(src.begin(), src.end());\n }\n \n+/**\n+ * Helper function to access the contained object of a std::any instance.\n+ * Returns a pointer to the object if passed instance has a value and the type\n+ * matches, nullptr otherwise.\n+ */\n+template<typename T>\n+T* AnyPtr(const std::any& any) noexcept\n+{\n+    T* const* ptr = std::any_cast<T*>(&any);\n+    return ptr ? *ptr : nullptr;\n+}\n+\n #ifdef WIN32\n class WinCmdLineArgs\n {"
      }
    ]
  },
  {
    "sha": "8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGJiODdhMzkzMmY4MWUyM2JhN2FmZDg2NWI5YWVlYjUzNWYwYzIw",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-11-30T23:36:36Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-03-29T21:29:42Z"
      },
      "message": "refactor: replace util::Ref by std::any (C++17)",
      "tree": {
        "sha": "2b1376e9bb8f6792946c6fabdffdc6a5a73fd8d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b1376e9bb8f6792946c6fabdffdc6a5a73fd8d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95cccf8a4b392959c1fd7ec0647e04eb13880865",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95cccf8a4b392959c1fd7ec0647e04eb13880865",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95cccf8a4b392959c1fd7ec0647e04eb13880865"
      }
    ],
    "stats": {
      "total": 159,
      "additions": 77,
      "deletions": 82
    },
    "files": [
      {
        "sha": "80ab69c131e30690759258a518f8f6b13102e090",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -16,14 +16,15 @@\n #include <node/ui_interface.h>\n #include <noui.h>\n #include <shutdown.h>\n-#include <util/ref.h>\n+#include <util/check.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n #include <util/tokenpipe.h>\n #include <util/translation.h>\n #include <util/url.h>\n \n+#include <any>\n #include <functional>\n #include <optional>\n \n@@ -142,7 +143,7 @@ static bool AppInit(int argc, char* argv[])\n     // end, which is interpreted as failure to start.\n     TokenPipeEnd daemon_ep;\n #endif\n-    util::Ref context{node};\n+    std::any context{&node};\n     try\n     {\n         if (!CheckDataDirOption()) {"
      },
      {
        "sha": "16ab38e0b2cd6a50c161a515100b7f568a1fbb24",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -144,7 +144,7 @@ static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUserna\n     return multiUserAuthorized(strUserPass);\n }\n \n-static bool HTTPReq_JSONRPC(const util::Ref& context, HTTPRequest* req)\n+static bool HTTPReq_JSONRPC(const std::any& context, HTTPRequest* req)\n {\n     // JSONRPC handles only POST\n     if (req->GetRequestMethod() != HTTPRequest::POST) {\n@@ -288,7 +288,7 @@ static bool InitRPCAuthentication()\n     return true;\n }\n \n-bool StartHTTPRPC(const util::Ref& context)\n+bool StartHTTPRPC(const std::any& context)\n {\n     LogPrint(BCLog::RPC, \"Starting HTTP RPC server\\n\");\n     if (!InitRPCAuthentication())"
      },
      {
        "sha": "5a3b99064669af51cf20d3f97aeb4125ea809a97",
        "filename": "src/httprpc.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/httprpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/httprpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.h?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -5,14 +5,12 @@\n #ifndef BITCOIN_HTTPRPC_H\n #define BITCOIN_HTTPRPC_H\n \n-namespace util {\n-class Ref;\n-} // namespace util\n+#include <any>\n \n /** Start HTTP RPC subsystem.\n  * Precondition; HTTP and RPC has been started.\n  */\n-bool StartHTTPRPC(const util::Ref& context);\n+bool StartHTTPRPC(const std::any& context);\n /** Interrupt HTTP RPC subsystem.\n  */\n void InterruptHTTPRPC();\n@@ -24,7 +22,7 @@ void StopHTTPRPC();\n /** Start HTTP REST subsystem.\n  * Precondition; HTTP and RPC has been started.\n  */\n-void StartREST(const util::Ref& context);\n+void StartREST(const std::any& context);\n /** Interrupt RPC REST subsystem.\n  */\n void InterruptREST();"
      },
      {
        "sha": "9fb3f1294cfc3d3ddcf305eeec9097806d59f952",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -787,7 +787,7 @@ static bool InitSanityCheck()\n     return true;\n }\n \n-static bool AppInitServers(const util::Ref& context, NodeContext& node)\n+static bool AppInitServers(const std::any& context, NodeContext& node)\n {\n     const ArgsManager& args = *Assert(node.args);\n     RPCServer::OnStarted(&OnRPCStarted);\n@@ -1276,7 +1276,7 @@ bool AppInitInterfaces(NodeContext& node)\n     return true;\n }\n \n-bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n+bool AppInitMain(const std::any& context, NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n {\n     const ArgsManager& args = *Assert(node.args);\n     const CChainParams& chainparams = Params();"
      },
      {
        "sha": "5d01d4c1ac3cab2b949a0469d92d24a51f62265e",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_INIT_H\n #define BITCOIN_INIT_H\n \n+#include <any>\n #include <memory>\n #include <string>\n \n@@ -22,9 +23,6 @@ struct BlockAndHeaderTipInfo;\n namespace boost {\n class thread_group;\n } // namespace boost\n-namespace util {\n-class Ref;\n-} // namespace util\n \n /** Interrupt threads */\n void Interrupt(NodeContext& node);\n@@ -66,7 +64,7 @@ bool AppInitInterfaces(NodeContext& node);\n  * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n  */\n-bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info = nullptr);\n+bool AppInitMain(const std::any& context, NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info = nullptr);\n \n /**\n  * Register all arguments with the ArgsManager"
      },
      {
        "sha": "0f4094e14ba4eb7f524134f8ae1dd61c8cd96c8f",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -38,7 +38,6 @@\n #include <uint256.h>\n #include <univalue.h>\n #include <util/check.h>\n-#include <util/ref.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <validation.h>\n@@ -49,6 +48,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <any>\n #include <memory>\n #include <optional>\n #include <utility>\n@@ -298,13 +298,13 @@ class NodeImpl : public Node\n     {\n         m_context = context;\n         if (context) {\n-            m_context_ref.Set(*context);\n+            m_context_ref = context;\n         } else {\n-            m_context_ref.Clear();\n+            m_context_ref.reset();\n         }\n     }\n     NodeContext* m_context{nullptr};\n-    util::Ref m_context_ref;\n+    std::any m_context_ref;\n };\n \n bool FillBlock(const CBlockIndex* index, const FoundBlock& block, UniqueLock<RecursiveMutex>& lock, const CChain& active)"
      },
      {
        "sha": "aa97470ca72cb7d01463f3c478fe5aeb2c0e1f45",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 20,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -18,10 +18,12 @@\n #include <sync.h>\n #include <txmempool.h>\n #include <util/check.h>\n-#include <util/ref.h>\n+#include <util/system.h>\n #include <validation.h>\n #include <version.h>\n \n+#include <any>\n+\n #include <boost/algorithm/string.hpp>\n \n #include <univalue.h>\n@@ -73,18 +75,18 @@ static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string me\n  *                  context is not found.\n  * @returns         Pointer to the node context or nullptr if not found.\n  */\n-static NodeContext* GetNodeContext(const util::Ref& context, HTTPRequest* req)\n+static NodeContext* GetNodeContext(const std::any& context, HTTPRequest* req)\n {\n-    NodeContext* node = context.Has<NodeContext>() ? &context.Get<NodeContext>() : nullptr;\n-    if (!node) {\n+    auto node_context = util::AnyPtr<NodeContext>(context);\n+    if (!node_context) {\n         RESTERR(req, HTTP_INTERNAL_SERVER_ERROR,\n                 strprintf(\"%s:%d (%s)\\n\"\n                           \"Internal bug detected: Node context not found!\\n\"\n                           \"You may report this issue here: %s\\n\",\n                           __FILE__, __LINE__, __func__, PACKAGE_BUGREPORT));\n         return nullptr;\n     }\n-    return node;\n+    return node_context;\n }\n \n /**\n@@ -94,14 +96,14 @@ static NodeContext* GetNodeContext(const util::Ref& context, HTTPRequest* req)\n  *                 context mempool is not found.\n  * @returns        Pointer to the mempool or nullptr if no mempool found.\n  */\n-static CTxMemPool* GetMemPool(const util::Ref& context, HTTPRequest* req)\n+static CTxMemPool* GetMemPool(const std::any& context, HTTPRequest* req)\n {\n-    NodeContext* node = context.Has<NodeContext>() ? &context.Get<NodeContext>() : nullptr;\n-    if (!node || !node->mempool) {\n+    auto node_context = util::AnyPtr<NodeContext>(context);\n+    if (!node_context || !node_context->mempool) {\n         RESTERR(req, HTTP_NOT_FOUND, \"Mempool disabled or instance not found\");\n         return nullptr;\n     }\n-    return node->mempool.get();\n+    return node_context->mempool.get();\n }\n \n static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n@@ -151,7 +153,7 @@ static bool CheckWarmup(HTTPRequest* req)\n     return true;\n }\n \n-static bool rest_headers(const util::Ref& context,\n+static bool rest_headers(const std::any& context,\n                          HTTPRequest* req,\n                          const std::string& strURIPart)\n {\n@@ -293,20 +295,20 @@ static bool rest_block(HTTPRequest* req,\n     }\n }\n \n-static bool rest_block_extended(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_block_extended(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     return rest_block(req, strURIPart, true);\n }\n \n-static bool rest_block_notxdetails(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     return rest_block(req, strURIPart, false);\n }\n \n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp\n RPCHelpMan getblockchaininfo();\n \n-static bool rest_chaininfo(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_chaininfo(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -329,7 +331,7 @@ static bool rest_chaininfo(const util::Ref& context, HTTPRequest* req, const std\n     }\n }\n \n-static bool rest_mempool_info(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_mempool_info(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -353,7 +355,7 @@ static bool rest_mempool_info(const util::Ref& context, HTTPRequest* req, const\n     }\n }\n \n-static bool rest_mempool_contents(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_mempool_contents(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req)) return false;\n     const CTxMemPool* mempool = GetMemPool(context, req);\n@@ -376,7 +378,7 @@ static bool rest_mempool_contents(const util::Ref& context, HTTPRequest* req, co\n     }\n }\n \n-static bool rest_tx(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_tx(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -435,7 +437,7 @@ static bool rest_tx(const util::Ref& context, HTTPRequest* req, const std::strin\n     }\n }\n \n-static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n+static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n@@ -621,7 +623,7 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:\n     }\n }\n \n-static bool rest_blockhash_by_height(const util::Ref& context, HTTPRequest* req,\n+static bool rest_blockhash_by_height(const std::any& context, HTTPRequest* req,\n                        const std::string& str_uri_part)\n {\n     if (!CheckWarmup(req)) return false;\n@@ -669,7 +671,7 @@ static bool rest_blockhash_by_height(const util::Ref& context, HTTPRequest* req,\n \n static const struct {\n     const char* prefix;\n-    bool (*handler)(const util::Ref& context, HTTPRequest* req, const std::string& strReq);\n+    bool (*handler)(const std::any& context, HTTPRequest* req, const std::string& strReq);\n } uri_prefixes[] = {\n       {\"/rest/tx/\", rest_tx},\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n@@ -682,7 +684,7 @@ static const struct {\n       {\"/rest/blockhashbyheight/\", rest_blockhash_by_height},\n };\n \n-void StartREST(const util::Ref& context)\n+void StartREST(const std::any& context)\n {\n     for (const auto& up : uri_prefixes) {\n         auto handler = [&context, up](HTTPRequest* req, const std::string& prefix) { return up.handler(context, req, prefix); };"
      },
      {
        "sha": "961478155f50940b753f0a4acceb9d752c9b5645",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -30,7 +30,6 @@\n #include <txdb.h>\n #include <txmempool.h>\n #include <undo.h>\n-#include <util/ref.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -56,15 +55,16 @@ static Mutex cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock GUARDED_BY(cs_blockchange);\n \n-NodeContext& EnsureNodeContext(const util::Ref& context)\n+NodeContext& EnsureNodeContext(const std::any& context)\n {\n-    if (!context.Has<NodeContext>()) {\n+    auto node_context = util::AnyPtr<NodeContext>(context);\n+    if (!node_context) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node context not found\");\n     }\n-    return context.Get<NodeContext>();\n+    return *node_context;\n }\n \n-CTxMemPool& EnsureMemPool(const util::Ref& context)\n+CTxMemPool& EnsureMemPool(const std::any& context)\n {\n     const NodeContext& node = EnsureNodeContext(context);\n     if (!node.mempool) {\n@@ -73,7 +73,7 @@ CTxMemPool& EnsureMemPool(const util::Ref& context)\n     return *node.mempool;\n }\n \n-ChainstateManager& EnsureChainman(const util::Ref& context)\n+ChainstateManager& EnsureChainman(const std::any& context)\n {\n     const NodeContext& node = EnsureNodeContext(context);\n     if (!node.chainman) {\n@@ -82,7 +82,7 @@ ChainstateManager& EnsureChainman(const util::Ref& context)\n     return *node.chainman;\n }\n \n-CBlockPolicyEstimator& EnsureFeeEstimator(const util::Ref& context)\n+CBlockPolicyEstimator& EnsureFeeEstimator(const std::any& context)\n {\n     NodeContext& node = EnsureNodeContext(context);\n     if (!node.fee_estimator) {"
      },
      {
        "sha": "cd04c9a10f71c23e134a28b397ef0b00be7d5286",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -10,6 +10,7 @@\n #include <streams.h>\n #include <sync.h>\n \n+#include <any>\n #include <stdint.h>\n #include <vector>\n \n@@ -23,9 +24,6 @@ class CTxMemPool;\n class ChainstateManager;\n class UniValue;\n struct NodeContext;\n-namespace util {\n-class Ref;\n-} // namespace util\n \n static constexpr int NUM_GETBLOCKSTATS_PERCENTILES = 5;\n \n@@ -58,10 +56,10 @@ void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES],\n void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr);\n \n-NodeContext& EnsureNodeContext(const util::Ref& context);\n-CTxMemPool& EnsureMemPool(const util::Ref& context);\n-ChainstateManager& EnsureChainman(const util::Ref& context);\n-CBlockPolicyEstimator& EnsureFeeEstimator(const util::Ref& context);\n+NodeContext& EnsureNodeContext(const std::any& context);\n+CTxMemPool& EnsureMemPool(const std::any& context);\n+ChainstateManager& EnsureChainman(const std::any& context);\n+CBlockPolicyEstimator& EnsureFeeEstimator(const std::any& context);\n \n /**\n  * Helper to create UTXO snapshots given a chainstate and a file handle."
      },
      {
        "sha": "1df5c5171801bf9c019e8f592ca29fb6715b55a9",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -17,7 +17,6 @@\n #include <script/descriptor.h>\n #include <util/check.h>\n #include <util/message.h> // For MessageSign(), MessageVerify()\n-#include <util/ref.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n \n@@ -391,8 +390,9 @@ static RPCHelpMan setmocktime()\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Mocktime can not be negative: %s.\", time));\n     }\n     SetMockTime(time);\n-    if (request.context.Has<NodeContext>()) {\n-        for (const auto& chain_client : request.context.Get<NodeContext>().chain_clients) {\n+    auto node_context = util::AnyPtr<NodeContext>(request.context);\n+    if (node_context) {\n+        for (const auto& chain_client : node_context->chain_clients) {\n             chain_client->setMockTime(time);\n         }\n     }\n@@ -424,11 +424,11 @@ static RPCHelpMan mockscheduler()\n         throw std::runtime_error(\"delta_time must be between 1 and 3600 seconds (1 hr)\");\n     }\n \n+    auto node_context = util::AnyPtr<NodeContext>(request.context);\n     // protect against null pointer dereference\n-    CHECK_NONFATAL(request.context.Has<NodeContext>());\n-    NodeContext& node = request.context.Get<NodeContext>();\n-    CHECK_NONFATAL(node.scheduler);\n-    node.scheduler->MockForward(std::chrono::seconds(delta_seconds));\n+    CHECK_NONFATAL(node_context);\n+    CHECK_NONFATAL(node_context->scheduler);\n+    node_context->scheduler->MockForward(std::chrono::seconds(delta_seconds));\n \n     return NullUniValue;\n },"
      },
      {
        "sha": "e1569673f6909959bfd1bcc06c82dfc13b9fdcda",
        "filename": "src/rpc/request.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rpc/request.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rpc/request.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.h?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -6,14 +6,11 @@\n #ifndef BITCOIN_RPC_REQUEST_H\n #define BITCOIN_RPC_REQUEST_H\n \n+#include <any>\n #include <string>\n \n #include <univalue.h>\n \n-namespace util {\n-class Ref;\n-} // namespace util\n-\n UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id);\n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n@@ -38,14 +35,14 @@ class JSONRPCRequest\n     std::string URI;\n     std::string authUser;\n     std::string peerAddr;\n-    const util::Ref& context;\n+    const std::any& context;\n \n-    explicit JSONRPCRequest(const util::Ref& context) : id(NullUniValue), params(NullUniValue), context(context) {}\n+    explicit JSONRPCRequest(const std::any& context) : id(NullUniValue), params(NullUniValue), context(context) {}\n \n     //! Initializes request information from another request object and the\n     //! given context. The implementation should be updated if any members are\n     //! added or removed above.\n-    JSONRPCRequest(const JSONRPCRequest& other, const util::Ref& context)\n+    JSONRPCRequest(const JSONRPCRequest& other, const std::any& context)\n         : id(other.id), strMethod(other.strMethod), params(other.params), mode(other.mode), URI(other.URI),\n           authUser(other.authUser), peerAddr(other.peerAddr), context(context)\n     {"
      },
      {
        "sha": "2f05c8842f4166afc04a4227c36bd6f40a49f319",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -87,7 +87,7 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n         vCommands.push_back(make_pair(entry.second.front()->category + entry.first, entry.second.front()));\n     sort(vCommands.begin(), vCommands.end());\n \n-    JSONRPCRequest jreq(helpreq);\n+    JSONRPCRequest jreq = helpreq;\n     jreq.mode = JSONRPCRequest::GET_HELP;\n     jreq.params = UniValue();\n \n@@ -494,7 +494,7 @@ std::vector<std::string> CRPCTable::listCommands() const\n \n UniValue CRPCTable::dumpArgMap(const JSONRPCRequest& args_request) const\n {\n-    JSONRPCRequest request(args_request);\n+    JSONRPCRequest request = args_request;\n     request.mode = JSONRPCRequest::GET_ARGS;\n \n     UniValue ret{UniValue::VARR};"
      },
      {
        "sha": "67e70b3bc390dd4486c2d58fd69db3b43920649d",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -10,9 +10,10 @@\n #include <interfaces/chain.h>\n #include <node/context.h>\n #include <test/util/setup_common.h>\n-#include <util/ref.h>\n #include <util/time.h>\n \n+#include <any>\n+\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n@@ -32,7 +33,7 @@ UniValue RPCTestingSetup::CallRPC(std::string args)\n     boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n     std::string strMethod = vArgs[0];\n     vArgs.erase(vArgs.begin());\n-    util::Ref context{m_node};\n+    std::any context{&m_node};\n     JSONRPCRequest request(context);\n     request.strMethod = strMethod;\n     request.params = RPCConvertValues(strMethod, vArgs);"
      },
      {
        "sha": "da5b84ce838e114fe997b9dc9ce9221e69f60718",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -15,7 +15,6 @@\n #include <sync.h>\n #include <uint256.h>\n #include <util/check.h>\n-#include <util/ref.h>\n #include <util/system.h>\n #include <util/ui_change_type.h>\n #include <wallet/context.h>\n@@ -515,7 +514,7 @@ class WalletClientImpl : public WalletClient\n     {\n         for (const CRPCCommand& command : GetWalletRPCCommands()) {\n             m_rpc_commands.emplace_back(command.category, command.name, [this, &command](const JSONRPCRequest& request, UniValue& result, bool last_handler) {\n-                return command.actor({request, m_context}, result, last_handler);\n+                return command.actor({request, &m_context}, result, last_handler);\n             }, command.argNames, command.unique_id);\n             m_rpc_handlers.emplace_back(m_context.chain->handleRpc(m_rpc_commands.back()));\n         }"
      },
      {
        "sha": "ce8ce4342add7a14da5f9d8b3e1d6546cc2e038a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -22,7 +22,6 @@\n #include <util/fees.h>\n #include <util/message.h> // For MessageSign()\n #include <util/moneystr.h>\n-#include <util/ref.h>\n #include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -124,12 +123,13 @@ void EnsureWalletIsUnlocked(const CWallet& wallet)\n     }\n }\n \n-WalletContext& EnsureWalletContext(const util::Ref& context)\n+WalletContext& EnsureWalletContext(const std::any& context)\n {\n-    if (!context.Has<WalletContext>()) {\n+    auto wallet_context = util::AnyPtr<WalletContext>(context);\n+    if (!wallet_context) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wallet context not found\");\n     }\n-    return context.Get<WalletContext>();\n+    return *wallet_context;\n }\n \n // also_create should only be set to true only when the RPC is expected to add things to a blank wallet and make it no longer blank"
      },
      {
        "sha": "8b88ffe8eda4587a773f40c0bbd645f1b6c3b5f5",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <span.h>\n \n+#include <any>\n #include <memory>\n #include <string>\n #include <vector>\n@@ -31,7 +32,7 @@ Span<const CRPCCommand> GetWalletRPCCommands();\n std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n \n void EnsureWalletIsUnlocked(const CWallet&);\n-WalletContext& EnsureWalletContext(const util::Ref& context);\n+WalletContext& EnsureWalletContext(const std::any& context);\n LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create = false);\n \n RPCHelpMan getaddressinfo();"
      },
      {
        "sha": "ba2e17d62aca97eabec1814758f0c2e89829bfd0",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <wallet/wallet.h>\n \n+#include <any>\n #include <future>\n #include <memory>\n #include <stdint.h>\n@@ -15,7 +16,6 @@\n #include <rpc/server.h>\n #include <test/util/logging.h>\n #include <test/util/setup_common.h>\n-#include <util/ref.h>\n #include <util/translation.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n@@ -213,7 +213,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n         key.pushKV(\"timestamp\", newTip->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1);\n         key.pushKV(\"internal\", UniValue(true));\n         keys.push_back(key);\n-        util::Ref context;\n+        std::any context;\n         JSONRPCRequest request(context);\n         request.params.setArray();\n         request.params.push_back(keys);\n@@ -265,7 +265,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n             AddWallet(wallet);\n             wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         }\n-        util::Ref context;\n+        std::any context;\n         JSONRPCRequest request(context);\n         request.params.setArray();\n         request.params.push_back(backup_file);\n@@ -281,7 +281,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         LOCK(wallet->cs_wallet);\n         wallet->SetupLegacyScriptPubKeyMan();\n \n-        util::Ref context;\n+        std::any context;\n         JSONRPCRequest request(context);\n         request.params.setArray();\n         request.params.push_back(backup_file);"
      }
    ]
  },
  {
    "sha": "916ab0195d567fd0a9097045e73a6654c453adea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTZhYjAxOTVkNTY3ZmQwYTkwOTcwNDVlNzNhNjY1NGM0NTNhZGVh",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-03-03T00:42:24Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-03-29T21:29:47Z"
      },
      "message": "remove unused class util::Ref and its unit test",
      "tree": {
        "sha": "dc20ba5c27e9e923679288928da0e9277d258d0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc20ba5c27e9e923679288928da0e9277d258d0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/916ab0195d567fd0a9097045e73a6654c453adea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916ab0195d567fd0a9097045e73a6654c453adea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/916ab0195d567fd0a9097045e73a6654c453adea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916ab0195d567fd0a9097045e73a6654c453adea/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 0,
      "deletions": 74
    },
    "files": [
      {
        "sha": "4e09c86ebd72a730f8dc8a1725bf88bbd77639ab",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916ab0195d567fd0a9097045e73a6654c453adea/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916ab0195d567fd0a9097045e73a6654c453adea/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=916ab0195d567fd0a9097045e73a6654c453adea",
        "patch": "@@ -243,7 +243,6 @@ BITCOIN_CORE_H = \\\n   util/moneystr.h \\\n   util/rbf.h \\\n   util/readwritefile.h \\\n-  util/ref.h \\\n   util/settings.h \\\n   util/sock.h \\\n   util/spanparsing.h \\"
      },
      {
        "sha": "ef03f63579510f6f38eda78d6d0f46d4c0fd339a",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916ab0195d567fd0a9097045e73a6654c453adea/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916ab0195d567fd0a9097045e73a6654c453adea/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=916ab0195d567fd0a9097045e73a6654c453adea",
        "patch": "@@ -110,7 +110,6 @@ BITCOIN_TESTS =\\\n   test/prevector_tests.cpp \\\n   test/raii_event_tests.cpp \\\n   test/random_tests.cpp \\\n-  test/ref_tests.cpp \\\n   test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\"
      },
      {
        "sha": "0ec0799fbcbbeb05cb975ae851602ec449a45ed3",
        "filename": "src/test/ref_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/test/ref_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/test/ref_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/ref_tests.cpp?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -1,33 +0,0 @@\n-// Copyright (c) 2020 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <util/ref.h>\n-\n-#include <boost/test/unit_test.hpp>\n-\n-BOOST_AUTO_TEST_SUITE(ref_tests)\n-\n-BOOST_AUTO_TEST_CASE(ref_test)\n-{\n-    util::Ref ref;\n-    BOOST_CHECK(!ref.Has<int>());\n-    BOOST_CHECK_THROW(ref.Get<int>(), NonFatalCheckError);\n-    int value = 5;\n-    ref.Set(value);\n-    BOOST_CHECK(ref.Has<int>());\n-    BOOST_CHECK_EQUAL(ref.Get<int>(), 5);\n-    ++ref.Get<int>();\n-    BOOST_CHECK_EQUAL(ref.Get<int>(), 6);\n-    BOOST_CHECK_EQUAL(value, 6);\n-    ++value;\n-    BOOST_CHECK_EQUAL(value, 7);\n-    BOOST_CHECK_EQUAL(ref.Get<int>(), 7);\n-    BOOST_CHECK(!ref.Has<bool>());\n-    BOOST_CHECK_THROW(ref.Get<bool>(), NonFatalCheckError);\n-    ref.Clear();\n-    BOOST_CHECK(!ref.Has<int>());\n-    BOOST_CHECK_THROW(ref.Get<int>(), NonFatalCheckError);\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9685ea9fec0dbedb1030768fb7fa14bd57c770c9",
        "filename": "src/util/ref.h",
        "status": "removed",
        "additions": 0,
        "deletions": 38,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/util/ref.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbb87a3932f81e23ba7afd865b9aeeb535f0c20/src/util/ref.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/ref.h?ref=8dbb87a3932f81e23ba7afd865b9aeeb535f0c20",
        "patch": "@@ -1,38 +0,0 @@\n-// Copyright (c) 2020 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_UTIL_REF_H\n-#define BITCOIN_UTIL_REF_H\n-\n-#include <util/check.h>\n-\n-#include <typeindex>\n-\n-namespace util {\n-\n-/**\n- * Type-safe dynamic reference.\n- *\n- * This implements a small subset of the functionality in C++17's std::any\n- * class, and can be dropped when the project updates to C++17\n- * (https://github.com/bitcoin/bitcoin/issues/16684)\n- */\n-class Ref\n-{\n-public:\n-    Ref() = default;\n-    template<typename T> Ref(T& value) { Set(value); }\n-    template<typename T> T& Get() const { CHECK_NONFATAL(Has<T>()); return *static_cast<T*>(m_value); }\n-    template<typename T> void Set(T& value) { m_value = &value; m_type = std::type_index(typeid(T)); }\n-    template<typename T> bool Has() const { return m_value && m_type == std::type_index(typeid(T)); }\n-    void Clear() { m_value = nullptr; m_type = std::type_index(typeid(void)); }\n-\n-private:\n-    void* m_value = nullptr;\n-    std::type_index m_type = std::type_index(typeid(void));\n-};\n-\n-} // namespace util\n-\n-#endif // BITCOIN_UTIL_REF_H"
      },
      {
        "sha": "0ab6aad50ce5ce187207dd4473ba2b5ffcf70538",
        "filename": "test/lint/extended-lint-cppcheck.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916ab0195d567fd0a9097045e73a6654c453adea/test/lint/extended-lint-cppcheck.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916ab0195d567fd0a9097045e73a6654c453adea/test/lint/extended-lint-cppcheck.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/extended-lint-cppcheck.sh?ref=916ab0195d567fd0a9097045e73a6654c453adea",
        "patch": "@@ -57,7 +57,6 @@ IGNORED_WARNINGS=(\n     \"src/test/checkqueue_tests.cpp:.* Struct 'UniqueCheck' has a constructor with 1 argument that is not explicit.\"\n     \"src/test/fuzz/util.h:.* Class 'FuzzedFileProvider' has a constructor with 1 argument that is not explicit.\"\n     \"src/test/fuzz/util.h:.* Class 'FuzzedAutoFileProvider' has a constructor with 1 argument that is not explicit.\"\n-    \"src/util/ref.h:.* Class 'Ref' has a constructor with 1 argument that is not explicit.\"\n     \"src/wallet/db.h:.* Class 'BerkeleyEnvironment' has a constructor with 1 argument that is not explicit.\"\n )\n "
      }
    ]
  }
]