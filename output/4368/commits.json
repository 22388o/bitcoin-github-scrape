[
  {
    "sha": "14f888ca804386b111b07e8988753d67f507ba30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGY4ODhjYTgwNDM4NmIxMTFiMDdlODk4ODc1M2Q2N2Y1MDdiYTMw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-19T13:08:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-25T07:24:50Z"
      },
      "message": "Move network-time related functions to timedata.cpp/h\n\nThe network time-offset-mangement functions from util.cpp are moved to\ntimedata.(cpp|h). This breaks the dependency of util on netbase.",
      "tree": {
        "sha": "22193675a85be98cbc9030d973a388834803b80a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22193675a85be98cbc9030d973a388834803b80a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14f888ca804386b111b07e8988753d67f507ba30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f888ca804386b111b07e8988753d67f507ba30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14f888ca804386b111b07e8988753d67f507ba30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f888ca804386b111b07e8988753d67f507ba30/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "208bf5b9e0a86900bddf5722dc192c3262480e36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/208bf5b9e0a86900bddf5722dc192c3262480e36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/208bf5b9e0a86900bddf5722dc192c3262480e36"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 118,
      "deletions": 81
    },
    "files": [
      {
        "sha": "cd54b0496ac2065ef3a48f208d711a52bd90952a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -80,6 +80,7 @@ BITCOIN_CORE_H = \\\n   serialize.h \\\n   sync.h \\\n   threadsafety.h \\\n+  timedata.h \\\n   tinyformat.h \\\n   txdb.h \\\n   txmempool.h \\\n@@ -129,6 +130,7 @@ libbitcoin_server_a_SOURCES = \\\n   rpcnet.cpp \\\n   rpcrawtransaction.cpp \\\n   rpcserver.cpp \\\n+  timedata.cpp \\\n   txdb.cpp \\\n   txmempool.cpp \\\n   $(JSON_H) \\"
      },
      {
        "sha": "c4c296560eab961b301e324df7fd8a46b22d7395",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -8,6 +8,7 @@\n #include \"netbase.h\"\n #include \"protocol.h\"\n #include \"sync.h\"\n+#include \"timedata.h\"\n #include \"util.h\"\n \n #include <map>"
      },
      {
        "sha": "258a2b52c4f770a7266aad5385a6aba1db0e9514",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -8,6 +8,7 @@\n #include \"chainparams.h\"\n #include \"key.h\"\n #include \"net.h\"\n+#include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "e48dbcac9dc34596dec12034f1bc5a2caa28a655",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -12,6 +12,7 @@\n #include \"main.h\"\n #include \"paymentserver.h\"\n #include \"transactionrecord.h\"\n+#include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"wallet.h\"\n "
      },
      {
        "sha": "eec2b57e8c1a07d11ffa7dbe58d5136d56421c29",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -5,6 +5,7 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n+#include \"timedata.h\"\n #include \"wallet.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "2694e2bcf194d55fe2966657da40170e8579834d",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -9,6 +9,7 @@\n #include \"net.h\"\n #include \"netbase.h\"\n #include \"rpcserver.h\"\n+#include \"timedata.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\""
      },
      {
        "sha": "a54872ccc4705245cdfc7e7aff4e849190148bb1",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -9,6 +9,7 @@\n #include \"netbase.h\"\n #include \"protocol.h\"\n #include \"sync.h\"\n+#include \"timedata.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "4f27cef087a9c9cce6e0ff447d0c359a093bd88b",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -8,6 +8,7 @@\n #include \"init.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"timedata.h\"\n #include \"util.h\"\n #include \"wallet.h\"\n #include \"walletdb.h\""
      },
      {
        "sha": "8a095d26dcaa18f45f92c918afe5719c827c05a9",
        "filename": "src/timedata.cpp",
        "status": "added",
        "additions": 91,
        "deletions": 0,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"timedata.h\"\n+\n+#include \"netbase.h\"\n+#include \"sync.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+using namespace std;\n+\n+static CCriticalSection cs_nTimeOffset;\n+static int64_t nTimeOffset = 0;\n+\n+//\n+// \"Never go to sea with two chronometers; take one or three.\"\n+// Our three time sources are:\n+//  - System clock\n+//  - Median of other nodes clocks\n+//  - The user (asking the user to fix the system clock if the first two disagree)\n+//\n+//\n+int64_t GetTimeOffset()\n+{\n+    LOCK(cs_nTimeOffset);\n+    return nTimeOffset;\n+}\n+\n+int64_t GetAdjustedTime()\n+{\n+    return GetTime() + GetTimeOffset();\n+}\n+\n+void AddTimeData(const CNetAddr& ip, int64_t nTime)\n+{\n+    int64_t nOffsetSample = nTime - GetTime();\n+\n+    LOCK(cs_nTimeOffset);\n+    // Ignore duplicates\n+    static set<CNetAddr> setKnown;\n+    if (!setKnown.insert(ip).second)\n+        return;\n+\n+    // Add data\n+    static CMedianFilter<int64_t> vTimeOffsets(200,0);\n+    vTimeOffsets.input(nOffsetSample);\n+    LogPrintf(\"Added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n+    if (vTimeOffsets.size() >= 5 && vTimeOffsets.size() % 2 == 1)\n+    {\n+        int64_t nMedian = vTimeOffsets.median();\n+        std::vector<int64_t> vSorted = vTimeOffsets.sorted();\n+        // Only let other nodes change our time by so much\n+        if (abs64(nMedian) < 70 * 60)\n+        {\n+            nTimeOffset = nMedian;\n+        }\n+        else\n+        {\n+            nTimeOffset = 0;\n+\n+            static bool fDone;\n+            if (!fDone)\n+            {\n+                // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n+                bool fMatch = false;\n+                BOOST_FOREACH(int64_t nOffset, vSorted)\n+                    if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n+                        fMatch = true;\n+\n+                if (!fMatch)\n+                {\n+                    fDone = true;\n+                    string strMessage = _(\"Warning: Please check that your computer's date and time are correct! If your clock is wrong Bitcoin will not work properly.\");\n+                    strMiscWarning = strMessage;\n+                    LogPrintf(\"*** %s\\n\", strMessage);\n+                    uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_WARNING);\n+                }\n+            }\n+        }\n+        if (fDebug) {\n+            BOOST_FOREACH(int64_t n, vSorted)\n+                LogPrintf(\"%+d  \", n);\n+            LogPrintf(\"|  \");\n+        }\n+        LogPrintf(\"nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset/60);\n+    }\n+}"
      },
      {
        "sha": "0e7bdc2c1f0647ed6208cf0db5a1382e80f8abe4",
        "filename": "src/timedata.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/timedata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/timedata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.h?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TIMEDATA_H\n+#define BITCOIN_TIMEDATA_H\n+\n+#include <stdint.h>\n+\n+class CNetAddr;\n+\n+/* Functions to keep track of adjusted P2P time */\n+int64_t GetTimeOffset();\n+int64_t GetAdjustedTime();\n+void AddTimeData(const CNetAddr& ip, int64_t nTime);\n+\n+#endif"
      },
      {
        "sha": "a19c015da68aec9143bfd2bf839a1f0e1691a091",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 77,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -6,7 +6,6 @@\n #include \"util.h\"\n \n #include \"chainparams.h\"\n-#include \"netbase.h\"\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"uint256.h\"\n@@ -1157,13 +1156,6 @@ void ShrinkDebugFile()\n         fclose(file);\n }\n \n-//\n-// \"Never go to sea with two chronometers; take one or three.\"\n-// Our three time sources are:\n-//  - System clock\n-//  - Median of other nodes clocks\n-//  - The user (asking the user to fix the system clock if the first two disagree)\n-//\n static int64_t nMockTime = 0;  // For unit testing\n \n int64_t GetTime()\n@@ -1178,75 +1170,6 @@ void SetMockTime(int64_t nMockTimeIn)\n     nMockTime = nMockTimeIn;\n }\n \n-static CCriticalSection cs_nTimeOffset;\n-static int64_t nTimeOffset = 0;\n-\n-int64_t GetTimeOffset()\n-{\n-    LOCK(cs_nTimeOffset);\n-    return nTimeOffset;\n-}\n-\n-int64_t GetAdjustedTime()\n-{\n-    return GetTime() + GetTimeOffset();\n-}\n-\n-void AddTimeData(const CNetAddr& ip, int64_t nTime)\n-{\n-    int64_t nOffsetSample = nTime - GetTime();\n-\n-    LOCK(cs_nTimeOffset);\n-    // Ignore duplicates\n-    static set<CNetAddr> setKnown;\n-    if (!setKnown.insert(ip).second)\n-        return;\n-\n-    // Add data\n-    static CMedianFilter<int64_t> vTimeOffsets(200,0);\n-    vTimeOffsets.input(nOffsetSample);\n-    LogPrintf(\"Added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n-    if (vTimeOffsets.size() >= 5 && vTimeOffsets.size() % 2 == 1)\n-    {\n-        int64_t nMedian = vTimeOffsets.median();\n-        std::vector<int64_t> vSorted = vTimeOffsets.sorted();\n-        // Only let other nodes change our time by so much\n-        if (abs64(nMedian) < 70 * 60)\n-        {\n-            nTimeOffset = nMedian;\n-        }\n-        else\n-        {\n-            nTimeOffset = 0;\n-\n-            static bool fDone;\n-            if (!fDone)\n-            {\n-                // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n-                bool fMatch = false;\n-                BOOST_FOREACH(int64_t nOffset, vSorted)\n-                    if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n-                        fMatch = true;\n-\n-                if (!fMatch)\n-                {\n-                    fDone = true;\n-                    string strMessage = _(\"Warning: Please check that your computer's date and time are correct! If your clock is wrong Bitcoin will not work properly.\");\n-                    strMiscWarning = strMessage;\n-                    LogPrintf(\"*** %s\\n\", strMessage);\n-                    uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_WARNING);\n-                }\n-            }\n-        }\n-        if (fDebug) {\n-            BOOST_FOREACH(int64_t n, vSorted)\n-                LogPrintf(\"%+d  \", n);\n-            LogPrintf(\"|  \");\n-        }\n-        LogPrintf(\"nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset/60);\n-    }\n-}\n-\n uint32_t insecure_rand_Rz = 11;\n uint32_t insecure_rand_Rw = 11;\n void seed_insecure_rand(bool fDeterministic)"
      },
      {
        "sha": "6057c72e6691f9ef885d7ef143e26960faae50b2",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -32,7 +32,6 @@\n #include <boost/filesystem/path.hpp>\n #include <boost/thread.hpp>\n \n-class CNetAddr;\n class uint256;\n \n static const int64_t COIN = 100000000;\n@@ -191,11 +190,8 @@ uint64_t GetRand(uint64_t nMax);\n uint256 GetRandHash();\n int64_t GetTime();\n void SetMockTime(int64_t nMockTimeIn);\n-int64_t GetAdjustedTime();\n-int64_t GetTimeOffset();\n std::string FormatFullVersion();\n std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n-void AddTimeData(const CNetAddr& ip, int64_t nTime);\n void runCommand(std::string strCommand);\n \n "
      },
      {
        "sha": "f6fd6e958d3b9db4f745fcca18f6195bfbccb2df",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f888ca804386b111b07e8988753d67f507ba30/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f888ca804386b111b07e8988753d67f507ba30/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=14f888ca804386b111b07e8988753d67f507ba30",
        "patch": "@@ -9,6 +9,7 @@\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n #include \"net.h\"\n+#include \"timedata.h\"\n \n #include <boost/algorithm/string/replace.hpp>\n #include <openssl/rand.h>"
      }
    ]
  },
  {
    "sha": "84ce18ca9339901f65d77a5821eb65f771316558",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGNlMThjYTkzMzk5MDFmNjVkNzdhNTgyMWViNjVmNzcxMzE2NTU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-19T13:10:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-25T08:31:35Z"
      },
      "message": "Remove unnecessary dependencies for bitcoin-cli\n\nThis commit removes all the unnecessary dependencies (key, core,\nnetbase, sync, ...) from bitcoin-cli.\n\nTo do this it shards the chain parameters into BaseParams, which\ncontains just the RPC port and data directory (as used by utils and\nbitcoin-cli) and Params, with the rest.",
      "tree": {
        "sha": "61012d3d9743d5ce8d0e9510c36f60856752c883",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61012d3d9743d5ce8d0e9510c36f60856752c883"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84ce18ca9339901f65d77a5821eb65f771316558",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84ce18ca9339901f65d77a5821eb65f771316558",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84ce18ca9339901f65d77a5821eb65f771316558",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84ce18ca9339901f65d77a5821eb65f771316558/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14f888ca804386b111b07e8988753d67f507ba30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f888ca804386b111b07e8988753d67f507ba30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14f888ca804386b111b07e8988753d67f507ba30"
      }
    ],
    "stats": {
      "total": 321,
      "additions": 232,
      "deletions": 89
    },
    "files": [
      {
        "sha": "2d2ae2a4c1cb0bc86510094ff71f7ff223d20694",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 39,
        "deletions": 19,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -20,10 +20,19 @@ endif\n BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS)\n \n+LIBBITCOIN_SERVER=libbitcoin_server.a\n+LIBBITCOIN_WALLET=libbitcoin_wallet.a\n+LIBBITCOIN_COMMON=libbitcoin_common.a\n+LIBBITCOIN_CLI=libbitcoin_cli.a\n+LIBBITCOIN_UTIL=libbitcoin_util.a\n+LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n+LIBBITCOINQT=qt/libbitcoinqt.a\n+\n noinst_LIBRARIES = \\\n   libbitcoin_server.a \\\n   libbitcoin_common.a \\\n   libbitcoin_cli.a \\\n+  libbitcoin_util.a \\\n   crypto/libbitcoin_crypto.a\n if ENABLE_WALLET\n BITCOIN_INCLUDES += $(BDB_CPPFLAGS)\n@@ -50,6 +59,7 @@ BITCOIN_CORE_H = \\\n   base58.h \\\n   bloom.h \\\n   chainparams.h \\\n+  chainparamsbase.h \\\n   checkpoints.h \\\n   checkqueue.h \\\n   clientversion.h \\\n@@ -107,8 +117,9 @@ obj/build.h: FORCE\n \t@$(MKDIR_P) $(builddir)/obj\n \t@$(top_srcdir)/share/genbuild.sh $(abs_top_builddir)/src/obj/build.h \\\n \t  $(abs_top_srcdir)\n-libbitcoin_common_a-version.$(OBJEXT): obj/build.h\n+libbitcoin_util_a-version.$(OBJEXT): obj/build.h\n \n+# server: shared between bitcoind and bitcoin-qt\n libbitcoin_server_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n@@ -136,6 +147,8 @@ libbitcoin_server_a_SOURCES = \\\n   $(JSON_H) \\\n   $(BITCOIN_CORE_H)\n \n+# wallet: shared between bitcoind and bitcoin-qt, but only linked\n+# when wallet enabled\n libbitcoin_wallet_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_wallet_a_SOURCES = \\\n   db.cpp \\\n@@ -146,6 +159,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   walletdb.cpp \\\n   $(BITCOIN_CORE_H)\n \n+# crypto primitives library\n crypto_libbitcoin_crypto_a_CPPFLAGS = $(BITCOIN_CONFIG_INCLUDES)\n crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha1.cpp \\\n@@ -156,6 +170,7 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha1.h \\\n   crypto/ripemd160.h\n \n+# common: shared between bitcoind, and bitcoin-qt and non-server tools\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n@@ -166,8 +181,16 @@ libbitcoin_common_a_SOURCES = \\\n   key.cpp \\\n   netbase.cpp \\\n   protocol.cpp \\\n-  rpcprotocol.cpp \\\n   script.cpp \\\n+  $(BITCOIN_CORE_H)\n+\n+# util: shared between all executables.\n+# This library *must* be included to make sure that the glibc\n+# backward-compatibility objects and their sanity checks are linked.\n+libbitcoin_util_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_util_a_SOURCES = \\\n+  chainparamsbase.cpp \\\n+  rpcprotocol.cpp \\\n   sync.cpp \\\n   util.cpp \\\n   version.cpp \\\n@@ -176,22 +199,24 @@ libbitcoin_common_a_SOURCES = \\\n   $(BITCOIN_CORE_H)\n \n if GLIBC_BACK_COMPAT\n-libbitcoin_common_a_SOURCES += compat/glibc_compat.cpp\n-libbitcoin_common_a_SOURCES += compat/glibcxx_compat.cpp\n+libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n+libbitcoin_util_a_SOURCES += compat/glibcxx_compat.cpp\n endif\n \n+# cli: shared between bitcoin-cli and bitcoin-qt\n libbitcoin_cli_a_SOURCES = \\\n   rpcclient.cpp \\\n   $(BITCOIN_CORE_H)\n \n-nodist_libbitcoin_common_a_SOURCES = $(srcdir)/obj/build.h\n+nodist_libbitcoin_util_a_SOURCES = $(srcdir)/obj/build.h\n #\n \n # bitcoind binary #\n bitcoind_LDADD = \\\n-  libbitcoin_server.a \\\n-  libbitcoin_common.a \\\n-  crypto/libbitcoin_crypto.a \\\n+  $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n   $(LIBMEMENV)\n if ENABLE_WALLET\n@@ -209,11 +234,13 @@ bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n \n # bitcoin-cli binary #\n bitcoin_cli_LDADD = \\\n-  libbitcoin_cli.a \\\n-  libbitcoin_common.a \\\n-  crypto/libbitcoin_crypto.a \\\n+  $(LIBBITCOIN_CLI) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CRYPTO) \\\n   $(BOOST_LIBS)\n-bitcoin_cli_SOURCES = bitcoin-cli.cpp\n+bitcoin_cli_SOURCES = \\\n+  bitcoin-cli.cpp\n bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n #\n \n@@ -244,13 +271,6 @@ clean-local:\n \t@test -f $(PROTOC)\n \t$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(abspath $(<D) $<)\n \n-LIBBITCOIN_SERVER=libbitcoin_server.a\n-LIBBITCOIN_WALLET=libbitcoin_wallet.a\n-LIBBITCOIN_COMMON=libbitcoin_common.a\n-LIBBITCOIN_CLI=libbitcoin_cli.a\n-LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n-LIBBITCOINQT=qt/libbitcoinqt.a\n-\n if ENABLE_TESTS\n include Makefile.test.include\n endif"
      },
      {
        "sha": "9df0779ba35c261d99d2aefe9c622b2e7015b48f",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -355,7 +355,7 @@ qt_bitcoin_qt_LDADD = qt/libbitcoinqt.a $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_CRYPTO) $(LIBLEVELDB) $(LIBMEMENV) \\\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(QT_LDFLAGS)\n \n@@ -364,7 +364,7 @@ QT_QM=$(QT_TS:.ts=.qm)\n \n .SECONDARY: $(QT_QM)\n \n-qt/bitcoinstrings.cpp: $(libbitcoin_server_a_SOURCES) $(libbitcoin_common_a_SOURCES) $(libbitcoin_cli_a_SOURCES)\n+qt/bitcoinstrings.cpp: $(libbitcoin_server_a_SOURCES) $(libbitcoin_common_a_SOURCES) $(libbitcoin_cli_a_SOURCES) $(libbitcoin_util_a_SOURCES)\n \t@test -n $(XGETTEXT) || echo \"xgettext is required for updating translations\"\n \t$(AM_V_GEN) cd $(top_srcdir); XGETTEXT=$(XGETTEXT) share/qt/extract_strings_qt.py\n "
      },
      {
        "sha": "a509f237553bc33aaebdfed4ff0ae1a169972bc8",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -30,7 +30,7 @@ qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n-qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_CRYPTO) $(LIBLEVELDB) \\\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS)\n qt_test_test_bitcoin_qt_LDFLAGS = $(QT_LDFLAGS)"
      },
      {
        "sha": "4dab1773f4a8b263fb841ff36d782bd29a48541c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -63,7 +63,7 @@ endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS)\n-test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_CRYPTO) $(LIBLEVELDB) $(LIBMEMENV) \\\n+test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB)\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)"
      },
      {
        "sha": "db39df4b17d9248244aeba22ba063c2d3f22eda5",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -8,7 +8,7 @@\n #include \"rpcclient.h\"\n #include \"rpcprotocol.h\"\n #include \"ui_interface.h\" /* for _(...) */\n-#include \"chainparams.h\"\n+#include \"chainparamsbase.h\"\n \n #include <boost/filesystem/operations.hpp>\n \n@@ -60,12 +60,11 @@ static bool AppInitRPC(int argc, char* argv[])\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return false;\n     }\n-    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-    if (!SelectParamsFromCommandLine()) {\n+    // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n+    if (!SelectBaseParamsFromCommandLine()) {\n         fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n         return false;\n     }\n-\n     if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n     {\n         std::string strUsage = _(\"Bitcoin Core RPC client version\") + \" \" + FormatFullVersion() + \"\\n\";\n@@ -104,7 +103,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n \n     bool fWait = GetBoolArg(\"-rpcwait\", false); // -rpcwait means try until server has started\n     do {\n-        bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(Params().RPCPort())));\n+        bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(BaseParams().RPCPort())));\n         if (fConnected) break;\n         if (fWait)\n             MilliSleep(1000);"
      },
      {
        "sha": "63067a153d0035ca5497197db3254f15a8befb6a",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 24,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -99,7 +99,7 @@ unsigned int pnSeed[] =\n class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n-        networkID = CChainParams::MAIN;\n+        networkID = CBaseChainParams::MAIN;\n         strNetworkID = \"main\";\n         // The message start string is designed to be unlikely to occur in normal data.\n         // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -110,7 +110,6 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n         nDefaultPort = 8333;\n-        nRPCPort = 8332;\n         bnProofOfWorkLimit = ~uint256(0) >> 32;\n         nSubsidyHalvingInterval = 210000;\n         nEnforceBlockUpgradeMajority = 750;\n@@ -191,7 +190,7 @@ static CMainParams mainParams;\n class CTestNetParams : public CMainParams {\n public:\n     CTestNetParams() {\n-        networkID = CChainParams::TESTNET;\n+        networkID = CBaseChainParams::TESTNET;\n         strNetworkID = \"test\";\n         // The message start string is designed to be unlikely to occur in normal data.\n         // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -202,14 +201,12 @@ class CTestNetParams : public CMainParams {\n         pchMessageStart[3] = 0x07;\n         vAlertPubKey = ParseHex(\"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\");\n         nDefaultPort = 18333;\n-        nRPCPort = 18332;\n         nEnforceBlockUpgradeMajority = 51;\n         nRejectBlockOutdatedMajority = 75;\n         nToCheckBlockUpgradeMajority = 100;\n         nMinerThreads = 0;\n         nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         nTargetSpacing = 10 * 60;\n-        strDataDir = \"testnet3\";\n \n         // Modify the testnet genesis block so the timestamp is valid for a later start.\n         genesis.nTime = 1296688602;\n@@ -245,7 +242,7 @@ static CTestNetParams testNetParams;\n class CRegTestParams : public CTestNetParams {\n public:\n     CRegTestParams() {\n-        networkID = CChainParams::REGTEST;\n+        networkID = CBaseChainParams::REGTEST;\n         strNetworkID = \"regtest\";\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n@@ -264,7 +261,6 @@ class CRegTestParams : public CTestNetParams {\n         genesis.nNonce = 2;\n         hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n-        strDataDir = \"regtest\";\n         assert(hashGenesisBlock == uint256(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n \n         vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n@@ -279,21 +275,23 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n-static CChainParams *pCurrentParams = &mainParams;\n+static CChainParams *pCurrentParams = 0;\n \n const CChainParams &Params() {\n+    assert(pCurrentParams);\n     return *pCurrentParams;\n }\n \n-void SelectParams(CChainParams::Network network) {\n+void SelectParams(CBaseChainParams::Network network) {\n+    SelectBaseParams(network);\n     switch (network) {\n-        case CChainParams::MAIN:\n+        case CBaseChainParams::MAIN:\n             pCurrentParams = &mainParams;\n             break;\n-        case CChainParams::TESTNET:\n+        case CBaseChainParams::TESTNET:\n             pCurrentParams = &testNetParams;\n             break;\n-        case CChainParams::REGTEST:\n+        case CBaseChainParams::REGTEST:\n             pCurrentParams = &regTestParams;\n             break;\n         default:\n@@ -303,19 +301,9 @@ void SelectParams(CChainParams::Network network) {\n }\n \n bool SelectParamsFromCommandLine() {\n-    bool fRegTest = GetBoolArg(\"-regtest\", false);\n-    bool fTestNet = GetBoolArg(\"-testnet\", false);\n-\n-    if (fTestNet && fRegTest) {\n+    if (!SelectBaseParamsFromCommandLine())\n         return false;\n-    }\n \n-    if (fRegTest) {\n-        SelectParams(CChainParams::REGTEST);\n-    } else if (fTestNet) {\n-        SelectParams(CChainParams::TESTNET);\n-    } else {\n-        SelectParams(CChainParams::MAIN);\n-    }\n+    SelectParams(BaseParams().NetworkID());\n     return true;\n }"
      },
      {
        "sha": "446256ba82a7020ac822a89d2ef974a8f07f2d55",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 4,
        "deletions": 15,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_CHAIN_PARAMS_H\n \n #include \"core.h\"\n+#include \"chainparamsbase.h\"\n #include \"protocol.h\"\n #include \"uint256.h\"\n \n@@ -29,14 +30,6 @@ struct CDNSSeedData {\n class CChainParams\n {\n public:\n-    enum Network {\n-        MAIN,\n-        TESTNET,\n-        REGTEST,\n-\n-        MAX_NETWORK_TYPES\n-    };\n-\n     enum Base58Type {\n         PUBKEY_ADDRESS,\n         SCRIPT_ADDRESS,\n@@ -73,17 +66,15 @@ class CChainParams\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n     int64_t TargetSpacing() const { return nTargetSpacing; }\n     int64_t Interval() const { return nTargetTimespan / nTargetSpacing; }\n-    const std::string& DataDir() const { return strDataDir; }\n     /* Make miner stop after a block is found. In RPC, don't return\n      * until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n-    Network NetworkID() const { return networkID; }\n+    CBaseChainParams::Network NetworkID() const { return networkID; }\n     /* Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<CAddress>& FixedSeeds() const { return vFixedSeeds; }\n-    int RPCPort() const { return nRPCPort; }\n protected:\n     CChainParams() {}\n \n@@ -92,19 +83,17 @@ class CChainParams\n     // Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n-    int nRPCPort;\n     uint256 bnProofOfWorkLimit;\n     int nSubsidyHalvingInterval;\n     int nEnforceBlockUpgradeMajority;\n     int nRejectBlockOutdatedMajority;\n     int nToCheckBlockUpgradeMajority;\n     int64_t nTargetTimespan;\n     int64_t nTargetSpacing;\n-    std::string strDataDir;\n     int nMinerThreads;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n-    Network networkID;\n+    CBaseChainParams::Network networkID;\n     std::string strNetworkID;\n     CBlock genesis;\n     std::vector<CAddress> vFixedSeeds;\n@@ -123,7 +112,7 @@ class CChainParams\n const CChainParams &Params();\n \n /** Sets the params returned by Params() to those for the given network. */\n-void SelectParams(CChainParams::Network network);\n+void SelectParams(CBaseChainParams::Network network);\n \n /**\n  * Looks for -regtest or -testnet and then calls SelectParams as appropriate."
      },
      {
        "sha": "19a9e72cc965d6564d890b8d28807f44c8daca9e",
        "filename": "src/chainparamsbase.cpp",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chainparamsbase.h\"\n+\n+#include \"assert.h\"\n+#include \"util.h\"\n+\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace boost::assign;\n+\n+//\n+// Main network\n+//\n+\n+class CBaseMainParams : public CBaseChainParams {\n+public:\n+    CBaseMainParams() {\n+        networkID = CBaseChainParams::MAIN;\n+        nRPCPort = 8332;\n+    }\n+};\n+static CBaseMainParams mainParams;\n+\n+//\n+// Testnet (v3)\n+//\n+class CBaseTestNetParams : public CBaseMainParams {\n+public:\n+    CBaseTestNetParams() {\n+        networkID = CBaseChainParams::TESTNET;\n+        nRPCPort = 18332;\n+        strDataDir = \"testnet3\";\n+    }\n+};\n+static CBaseTestNetParams testNetParams;\n+\n+//\n+// Regression test\n+//\n+class CBaseRegTestParams : public CBaseTestNetParams {\n+public:\n+    CBaseRegTestParams() {\n+        networkID = CBaseChainParams::REGTEST;\n+        strDataDir = \"regtest\";\n+    }\n+};\n+static CBaseRegTestParams regTestParams;\n+\n+static CBaseChainParams *pCurrentBaseParams = 0;\n+\n+const CBaseChainParams &BaseParams() {\n+    assert(pCurrentBaseParams);\n+    return *pCurrentBaseParams;\n+}\n+\n+void SelectBaseParams(CBaseChainParams::Network network) {\n+    switch (network) {\n+        case CBaseChainParams::MAIN:\n+            pCurrentBaseParams = &mainParams;\n+            break;\n+        case CBaseChainParams::TESTNET:\n+            pCurrentBaseParams = &testNetParams;\n+            break;\n+        case CBaseChainParams::REGTEST:\n+            pCurrentBaseParams = &regTestParams;\n+            break;\n+        default:\n+            assert(false && \"Unimplemented network\");\n+            return;\n+    }\n+}\n+\n+bool SelectBaseParamsFromCommandLine() {\n+    bool fRegTest = GetBoolArg(\"-regtest\", false);\n+    bool fTestNet = GetBoolArg(\"-testnet\", false);\n+\n+    if (fTestNet && fRegTest) {\n+        return false;\n+    }\n+\n+    if (fRegTest) {\n+        SelectBaseParams(CBaseChainParams::REGTEST);\n+    } else if (fTestNet) {\n+        SelectBaseParams(CBaseChainParams::TESTNET);\n+    } else {\n+        SelectBaseParams(CBaseChainParams::MAIN);\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "4a3b26890946624869209a53c32b19df37beed87",
        "filename": "src/chainparamsbase.h",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHAIN_PARAMS_BASE_H\n+#define BITCOIN_CHAIN_PARAMS_BASE_H\n+\n+#include <vector>\n+#include <string>\n+\n+/**\n+ * CBaseChainParams defines the base parameters (shared between bitcoin-cli and bitcoind)\n+ * of a given instance of the Bitcoin system.\n+ */\n+class CBaseChainParams\n+{\n+public:\n+    enum Network {\n+        MAIN,\n+        TESTNET,\n+        REGTEST,\n+\n+        MAX_NETWORK_TYPES\n+    };\n+\n+    const std::string& DataDir() const { return strDataDir; }\n+    int RPCPort() const { return nRPCPort; }\n+    Network NetworkID() const { return networkID; }\n+protected:\n+    CBaseChainParams() {}\n+\n+    int nRPCPort;\n+    std::string strDataDir;\n+    Network networkID;\n+};\n+\n+/**\n+ * Return the currently selected parameters. This won't change after app startup\n+ * outside of the unit tests.\n+ */\n+const CBaseChainParams &BaseParams();\n+\n+/** Sets the params returned by Params() to those for the given network. */\n+void SelectBaseParams(CBaseChainParams::Network network);\n+\n+/**\n+ * Looks for -regtest or -testnet and then calls SelectParams as appropriate.\n+ * Returns false if an invalid combination is given.\n+ */\n+bool SelectBaseParamsFromCommandLine();\n+\n+#endif"
      },
      {
        "sha": "75ac418916a4b498ccbceab0f7cbbee8bdc4fb91",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -83,9 +83,9 @@ namespace Checkpoints\n     };\n \n     const CCheckpointData &Checkpoints() {\n-        if (Params().NetworkID() == CChainParams::TESTNET)\n+        if (Params().NetworkID() == CBaseChainParams::TESTNET)\n             return dataTestnet;\n-        else if (Params().NetworkID() == CChainParams::MAIN)\n+        else if (Params().NetworkID() == CBaseChainParams::MAIN)\n             return data;\n         else\n             return dataRegtest;"
      },
      {
        "sha": "89305e9f3500ee4cf486ab35a7a5b5293f6cfd34",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -546,7 +546,7 @@ int main(int argc, char *argv[])\n     if (!PaymentServer::ipcParseCommandLine(argc, argv))\n         exit(0);\n #endif\n-    bool isaTestNet = Params().NetworkID() != CChainParams::MAIN;\n+    bool isaTestNet = Params().NetworkID() != CBaseChainParams::MAIN;\n     // Allow for separate UI settings for testnets\n     if (isaTestNet)\n         QApplication::setApplicationName(QAPP_APP_NAME_TESTNET);"
      },
      {
        "sha": "fbb11617fe59cd151a725672e932703c7bfa5c90",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -199,10 +199,10 @@ bool PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             {\n                 CBitcoinAddress address(r.address.toStdString());\n \n-                SelectParams(CChainParams::MAIN);\n+                SelectParams(CBaseChainParams::MAIN);\n                 if (!address.IsValid())\n                 {\n-                    SelectParams(CChainParams::TESTNET);\n+                    SelectParams(CBaseChainParams::TESTNET);\n                 }\n             }\n         }\n@@ -214,9 +214,9 @@ bool PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             if (readPaymentRequest(arg, request))\n             {\n                 if (request.getDetails().network() == \"main\")\n-                    SelectParams(CChainParams::MAIN);\n+                    SelectParams(CBaseChainParams::MAIN);\n                 else\n-                    SelectParams(CChainParams::TESTNET);\n+                    SelectParams(CBaseChainParams::TESTNET);\n             }\n         }\n         else"
      },
      {
        "sha": "e92a7d2b1a4d06e826b43bc11bfc0dd4ef1aadc4",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -56,6 +56,7 @@ static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsig\n \n void PaymentServerTests::paymentServerTests()\n {\n+    SelectParams(CBaseChainParams::MAIN);\n     OptionsModel optionsModel;\n     PaymentServer* server = new PaymentServer(NULL, false);\n     X509_STORE* caStore = X509_STORE_new();"
      },
      {
        "sha": "0072557f876a8d7b96efad49cd81631f0e91ac24",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -237,7 +237,7 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"testnet\",          Params().NetworkID() == CChainParams::TESTNET));\n+    obj.push_back(Pair(\"testnet\",          Params().NetworkID() == CBaseChainParams::TESTNET));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n #ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));"
      },
      {
        "sha": "a300de26800d7e207d241d03467bdd4f169ae8cb",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -74,7 +74,7 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       Params().NetworkID() == CChainParams::TESTNET));\n+    obj.push_back(Pair(\"testnet\",       Params().NetworkID() == CBaseChainParams::TESTNET));\n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         obj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));"
      },
      {
        "sha": "c5d09cf577ec767889c6eb366bd0f9abd125bd49",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -600,7 +600,7 @@ void StartRPCThreads()\n \n     std::vector<ip::tcp::endpoint> vEndpoints;\n     bool bBindAny = false;\n-    int defaultPort = GetArg(\"-rpcport\", Params().RPCPort());\n+    int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n     if (!mapArgs.count(\"-rpcallowip\")) // Default to loopback if not allowing external IPs\n     {\n         vEndpoints.push_back(ip::tcp::endpoint(asio::ip::address_v6::loopback(), defaultPort));"
      },
      {
        "sha": "0ac3e9a36353c26d44fa81e4a2c18142e02bf390",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -142,9 +142,9 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n         if (isTestnet)\n-            SelectParams(CChainParams::TESTNET);\n+            SelectParams(CBaseChainParams::TESTNET);\n         else\n-            SelectParams(CChainParams::MAIN);\n+            SelectParams(CBaseChainParams::MAIN);\n         if(isPrivkey)\n         {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CChainParams::MAIN);\n+    SelectParams(CBaseChainParams::MAIN);\n }\n \n // Goal: check that generated keys match test vectors\n@@ -198,9 +198,9 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n         if (isTestnet)\n-            SelectParams(CChainParams::TESTNET);\n+            SelectParams(CBaseChainParams::TESTNET);\n         else\n-            SelectParams(CChainParams::MAIN);\n+            SelectParams(CBaseChainParams::MAIN);\n         if(isPrivkey)\n         {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CChainParams::MAIN);\n+    SelectParams(CBaseChainParams::MAIN);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "8cae0a4c34faeb364d4e3431eeeaa081bf7ff30d",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -31,6 +31,7 @@ struct TestingSetup {\n \n     TestingSetup() {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n+        SelectParams(CBaseChainParams::MAIN);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      },
      {
        "sha": "7a0e2cc8002b5a4dbb6dec337d97903b8ca3f183",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ce18ca9339901f65d77a5821eb65f771316558/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ce18ca9339901f65d77a5821eb65f771316558/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=84ce18ca9339901f65d77a5821eb65f771316558",
        "patch": "@@ -5,7 +5,7 @@\n \n #include \"util.h\"\n \n-#include \"chainparams.h\"\n+#include \"chainparamsbase.h\"\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"uint256.h\"\n@@ -918,7 +918,7 @@ boost::filesystem::path GetDefaultDataDir()\n #endif\n }\n \n-static boost::filesystem::path pathCached[CChainParams::MAX_NETWORK_TYPES+1];\n+static boost::filesystem::path pathCached[CBaseChainParams::MAX_NETWORK_TYPES+1];\n static CCriticalSection csPathCached;\n \n const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n@@ -927,8 +927,8 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n \n     LOCK(csPathCached);\n \n-    int nNet = CChainParams::MAX_NETWORK_TYPES;\n-    if (fNetSpecific) nNet = Params().NetworkID();\n+    int nNet = CBaseChainParams::MAX_NETWORK_TYPES;\n+    if (fNetSpecific) nNet = BaseParams().NetworkID();\n \n     fs::path &path = pathCached[nNet];\n \n@@ -947,7 +947,7 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n         path = GetDefaultDataDir();\n     }\n     if (fNetSpecific)\n-        path /= Params().DataDir();\n+        path /= BaseParams().DataDir();\n \n     fs::create_directories(path);\n \n@@ -956,7 +956,7 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n \n void ClearDatadirCache()\n {\n-    std::fill(&pathCached[0], &pathCached[CChainParams::MAX_NETWORK_TYPES+1],\n+    std::fill(&pathCached[0], &pathCached[CBaseChainParams::MAX_NETWORK_TYPES+1],\n         boost::filesystem::path());\n }\n "
      }
    ]
  },
  {
    "sha": "75c82d4923174a126e1b87be6a43f274d2cc4c9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWM4MmQ0OTIzMTc0YTEyNmUxYjg3YmU2YTQzZjI3NGQyY2M0Yzli",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-25T08:03:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-25T08:31:35Z"
      },
      "message": "Move coins.cpp and keystore.cpp to libbitcoin_common\n\nPrepare for introduction of `bitcoin-tx` tool.",
      "tree": {
        "sha": "f780cbfe1b73ae0765d1930595e59cf7b13b53d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f780cbfe1b73ae0765d1930595e59cf7b13b53d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75c82d4923174a126e1b87be6a43f274d2cc4c9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75c82d4923174a126e1b87be6a43f274d2cc4c9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75c82d4923174a126e1b87be6a43f274d2cc4c9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75c82d4923174a126e1b87be6a43f274d2cc4c9b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84ce18ca9339901f65d77a5821eb65f771316558",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84ce18ca9339901f65d77a5821eb65f771316558",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84ce18ca9339901f65d77a5821eb65f771316558"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3643e60201dc717fe7418d204e646215e187a682",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75c82d4923174a126e1b87be6a43f274d2cc4c9b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75c82d4923174a126e1b87be6a43f274d2cc4c9b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=75c82d4923174a126e1b87be6a43f274d2cc4c9b",
        "patch": "@@ -126,9 +126,7 @@ libbitcoin_server_a_SOURCES = \\\n   alert.cpp \\\n   bloom.cpp \\\n   checkpoints.cpp \\\n-  coins.cpp \\\n   init.cpp \\\n-  keystore.cpp \\\n   leveldbwrapper.cpp \\\n   main.cpp \\\n   miner.cpp \\\n@@ -173,12 +171,14 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n-  base58.cpp \\\n   allocators.cpp \\\n+  base58.cpp \\\n   chainparams.cpp \\\n+  coins.cpp \\\n   core.cpp \\\n   hash.cpp \\\n   key.cpp \\\n+  keystore.cpp \\\n   netbase.cpp \\\n   protocol.cpp \\\n   script.cpp \\"
      }
    ]
  }
]