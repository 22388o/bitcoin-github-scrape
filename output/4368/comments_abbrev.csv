sipa,2014-06-21T20:29:51Z,Untested ACK.\n\nI like breaking dependencies.\n,https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-46763966,46763966,
jgarzik,2014-06-21T20:36:20Z,"ACK most.\n\nNAK lib change:  it is flat out wrong to move low level, library objects from libbitcoin_common.a to libbitcoin_server.a.\n\nThat moves us in the opposite of the correct direction.  We want to move towards a generic C++ bitcoin lib.  For example, this immediately breaks #4332 \n\nGeneral rule:  fill up libbitcoin_common.a with as many objects as possible.\n",https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-46764124,46764124,
sipa,2014-06-21T20:40:40Z,"@jgarzik Right, the point I think is that we're introducing 3 levels here:\n- what is needed by everything (formerly common)\n- what is needed by bitcoind and potential future binaries that do require core code\n- what is needed only by bitcoind (formerly server)\n\nI noticed the move back, but as there exists nothing in the middle level we can always split again later. #4332 is probably a good re",https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-46764214,46764214,
jgarzik,2014-06-21T20:45:46Z,"Due to the way libraries work, I question the value of multiple libraries.  libbitcoin_core.a and libbitcoin_server.a are quite sufficient.  And even that split is unnecessary.  It's not like the entire lib is linked in; compiler picks and chooses needed objects.  Having fewer libraries becomes more valuable if a lib is ever made a shared object, too.\n\nAlso, we don't want to merge something, jus",https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-46764370,46764370,
sipa,2014-06-21T20:56:29Z,@jgarzik:\n- Having crypto/network/base58/script code in a dumb RPC client is silly.\n- Having validation/blockstorage/rpc/mining code in your bitcoin-tx utility is silly.\n\nThat implies 3 levels.\n,https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-46764572,46764572,
jgarzik,2014-06-21T21:00:17Z,@sipa That's just it.  There is no crypto/network/base58/script code going into a dumb RPC client!\n\nLook at how ar archives work.\n,https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-46764657,46764657,
sipa,2014-06-21T21:03:17Z,"@jgarzik And that's terribly fragile assurance. The minute someone accidentally places code in the wrong object and uses it, it may trigger global constructors being called, and other dependencies pulled in.\n\nI care much more about the code organization part than what ends up in the binary. Having several layers brings clear separation of each part's responsibilities and interactions, and makes ",https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-46764721,46764721,
sipa,2014-06-21T21:05:55Z,"To shift the discussion a bit: I'd love to see the code that ends up in these separate layers (whether they're actually separate libraries or not) move to separate source tree directories.\n\nThat is also a way of making the separation clear - without compiler-enforcement, but at least made obvious in the code.\n",https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-46764766,46764766,
laanwj,2014-06-22T10:08:45Z,"I agree with @sipa here. Having the split explicit is nice, it makes the linker/compiler enforce sw architecture constraints. I know about `ar` semantics but I don't want it to be possible to accidentally pull in more than necessary (believe me, that's too easy with the current code...).\n\nI expected this concern, that is why I added comments such as `# common: shared between bitcoin-cli, bitcoin",https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-46777020,46777020,
theuni,2014-06-23T16:17:08Z,"I agree with @jgarzik's analysis for the most part, but I wasn't going to complain because IMO this particular change doesn't set us back any. Breaking dependencies is crucial, but splitting internal libs is entirely arbitrary until an external api is defined and there is a logical scope for each lib. So while I'm not a fan of combining the libs, it would be no more than a lateral move really.\n\n",https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-46866720,46866720,
laanwj,2014-06-25T07:24:31Z,"The thing is, without the Makefile.am changes it's hard to verify that this pull actually does what it says to do. And breaking dependencies without having it enforced somehow means it is easy to revert to the previous state. Until there is a well-defined API for the outside world, that's what matters.\n\nAnyhow - I'm going to rename the library with just `chainparamsbase.cpp`, `rpcprotocol.cpp`, ",https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-47068341,47068341,
laanwj,2014-06-25T08:04:58Z,Done; also already moved coins.cpp and keystore.cpp to libbitcoin_common in preparation for #4332.\n,https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-47071878,47071878,
BitcoinPullTester,2014-06-25T08:52:26Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4368_75c82d4923174a126e1b87be6a43f274d2cc4c9b/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-47075813,47075813,
jgarzik,2014-06-25T14:37:30Z,"OK, ACK let's go ahead and get this merged so I can clean up the damage on my side\n",https://github.com/bitcoin/bitcoin/pull/4368#issuecomment-47109335,47109335,
