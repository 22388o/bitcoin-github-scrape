[
  {
    "sha": "01dc2d83f80d8890ccb197110bbeb328ab68c285",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWRjMmQ4M2Y4MGQ4ODkwY2NiMTk3MTEwYmJlYjMyOGFiNjhjMjg1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-11-26T15:26:02Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2014-12-01T11:52:21Z"
      },
      "message": "[REST] add REST interface tests in rpc-test section",
      "tree": {
        "sha": "3461fd0cd5d8e2b44681ba3042d471e9a2ec1124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3461fd0cd5d8e2b44681ba3042d471e9a2ec1124"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01dc2d83f80d8890ccb197110bbeb328ab68c285",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01dc2d83f80d8890ccb197110bbeb328ab68c285",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01dc2d83f80d8890ccb197110bbeb328ab68c285",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01dc2d83f80d8890ccb197110bbeb328ab68c285/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ddf4416cc8011d788494a0539ccb687cdb03f3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ddf4416cc8011d788494a0539ccb687cdb03f3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ddf4416cc8011d788494a0539ccb687cdb03f3d"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 68,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a064fb81e91136cc77003a5a190a502279e5d496",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01dc2d83f80d8890ccb197110bbeb328ab68c285/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01dc2d83f80d8890ccb197110bbeb328ab68c285/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=01dc2d83f80d8890ccb197110bbeb328ab68c285",
        "patch": "@@ -21,6 +21,7 @@ if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n   ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --mineblock --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/getchaintips.py --srcdir \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/rest.py --srcdir \"${BUILDDIR}/src\"\n   #${BUILDDIR}/qa/rpc-tests/forknotify.py --srcdir \"${BUILDDIR}/src\"\n else\n   echo \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\""
      },
      {
        "sha": "ca09a5c6d8aefa482b83c4865ec9bdaea4d50292",
        "filename": "qa/rpc-tests/rest.py",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01dc2d83f80d8890ccb197110bbeb328ab68c285/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01dc2d83f80d8890ccb197110bbeb328ab68c285/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=01dc2d83f80d8890ccb197110bbeb328ab68c285",
        "patch": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test REST interface\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+import json\n+\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+try:\n+    import urllib.parse as urlparse\n+except ImportError:\n+    import urlparse\n+\n+def http_get_call(host, port, path, response_object = 0):\n+    conn = httplib.HTTPConnection(host, port)\n+    conn.request('GET', path)\n+    \n+    if response_object:\n+        return conn.getresponse()\n+        \n+    return conn.getresponse().read()\n+\n+\n+class RESTTest (BitcoinTestFramework):\n+    FORMAT_SEPARATOR = \"/\"\n+    \n+    def run_test(self):\n+        url = urlparse.urlparse(self.nodes[0].url)\n+        bb_hash = self.nodes[0].getbestblockhash()\n+        \n+        # check binary format\n+        response = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n+        assert_equal(response.status, 200)\n+        assert_greater_than(int(response.getheader('content-length')), 10)\n+        \n+        # check json format\n+        json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(json_obj['hash'], bb_hash)\n+        \n+        # do tx test\n+        tx_hash = json_obj['tx'][0];\n+        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"json\")\n+        json_obj = json.loads(json_string)\n+        assert_equal(json_obj['txid'], tx_hash)\n+        \n+        # check hex format response\n+        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n+        assert_equal(response.status, 200)\n+        assert_greater_than(int(response.getheader('content-length')), 10)\n+\n+if __name__ == '__main__':\n+    RESTTest ().main ()\n\\ No newline at end of file"
      },
      {
        "sha": "6b66bfd8f60cf6eb7a71e6497779c5779fb92a18",
        "filename": "qa/rpc-tests/util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01dc2d83f80d8890ccb197110bbeb328ab68c285/qa/rpc-tests/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01dc2d83f80d8890ccb197110bbeb328ab68c285/qa/rpc-tests/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.py?ref=01dc2d83f80d8890ccb197110bbeb328ab68c285",
        "patch": "@@ -163,7 +163,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None):\n     Start a bitcoind and return RPC connection to it\n     \"\"\"\n     datadir = os.path.join(dirname, \"node\"+str(i))\n-    args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\"+datadir, \"-keypool=1\", \"-discover=0\" ]\n+    args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\"+datadir, \"-keypool=1\", \"-discover=0\", \"-rest\" ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n     devnull = open(\"/dev/null\", \"w+\")\n@@ -327,3 +327,7 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n def assert_equal(thing1, thing2):\n     if thing1 != thing2:\n         raise AssertionError(\"%s != %s\"%(str(thing1),str(thing2)))\n+\n+def assert_greater_than(thing1, thing2):\n+    if thing1 <= thing2:\n+        raise AssertionError(\"%s <= %s\"%(str(thing1),str(thing2)))\n\\ No newline at end of file"
      }
    ]
  }
]