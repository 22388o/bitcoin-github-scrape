[
  {
    "sha": "f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDNmMGQ2YmZmZDhiYWQ0YWYzODJiMWU4NGVkNWU1MWYwYmNiNjcz",
    "commit": {
      "author": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-07T00:07:36Z"
      },
      "committer": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-09T16:12:26Z"
      },
      "message": "New option and configuration framework\n\nPluses:\n- Command line and configuration files are fully parsed before being\n  taken into account, errors are repported (including mispelled or\n  unknown parameters).\n- A nice interface is provided to access options & configuration from\n  source code (cf. option.h).\n- Single definition of options and default values, which have been\n  moved to the top of .cpp files.\n- Checks for integer overflows in configuration values.\n- New rpc command \"reloadconfig\" to dynamically update configuration\n  parameters (Issue #309). Command line parameters will not be overriden.\n  Notice that many core parameters are used only during startup.\n- Option -conf is now enough to configure everything (Issue #140).\n- A way to force listing of hidden options (-help=allopts) and access to\n  help messages is possible even if bitcoin is already running.\n- Fix erroneous error message with respect to the path of the\n  configuration file when using -testnet (Issue #241).\n- Removed '\\n' and other data from translatable strings (Issue #313).\n- Using boost to deal with most filesystem paths.\n- Slightly faster access to configuration values (no map lookups).\n\nMinuses:\n- Access to configuration values are a bit less recognizable in source\n  code.\n- Relies a little deeper on boost (but without added dependencies).\n- Uses some hacks around boost::program_options to recover original\n  bitcoin command line style.\n\nNotes:\n- This has been tested a litle bit on unix (linux), needs to be tested\n  on other arches.",
      "tree": {
        "sha": "1ccb7dafbf9f97e6e4faa6bd9188ffe1eddcba5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ccb7dafbf9f97e6e4faa6bd9188ffe1eddcba5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/comments",
    "author": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e94010b2395694d56dd62a2cb956a40ef801a191",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e94010b2395694d56dd62a2cb956a40ef801a191",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e94010b2395694d56dd62a2cb956a40ef801a191"
      }
    ],
    "stats": {
      "total": 1128,
      "additions": 723,
      "deletions": 405
    },
    "files": [
      {
        "sha": "4f45f093ba3c9c0a50ab3f6d8269a8371c9fef82",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -11,6 +11,8 @@\n using namespace std;\n using namespace boost;\n \n+option<bool> checkblocksOpt(\"db\", \"hide\", \"checkblocks\", false, true);\n+option<bool> noflushwalletOpt(\"db\", \"hide\", \"noflushwallet\", false, true);\n \n unsigned int nWalletDBUpdated;\n uint64 nAccountingEntryNumber = 0;\n@@ -472,7 +474,7 @@ bool CTxDB::LoadBlockIndex()\n     CBlockIndex* pindexFork = NULL;\n     for (CBlockIndex* pindex = pindexBest; pindex && pindex->pprev; pindex = pindex->pprev)\n     {\n-        if (pindex->nHeight < nBestHeight-2500 && !mapArgs.count(\"-checkblocks\"))\n+        if (pindex->nHeight < nBestHeight-2500 && !checkblocksOpt())\n             break;\n         CBlock block;\n         if (!block.ReadFromDisk(pindex))\n@@ -827,17 +829,9 @@ bool CWalletDB::LoadWallet(CWallet* pwallet)\n     if (fHaveUPnP)\n         printf(\"fUseUPnP = %d\\n\", fUseUPnP);\n \n-\n     // Upgrade\n     if (nFileVersion < VERSION)\n-    {\n-        // Get rid of old debug.log file in current directory\n-        if (nFileVersion <= 105 && !pszSetDataDir[0])\n-            unlink(\"debug.log\");\n-\n         WriteVersion(VERSION);\n-    }\n-\n \n     return true;\n }\n@@ -849,7 +843,7 @@ void ThreadFlushWalletDB(void* parg)\n     if (fOneThread)\n         return;\n     fOneThread = true;\n-    if (mapArgs.count(\"-noflushwallet\"))\n+    if (noflushwalletOpt())\n         return;\n \n     unsigned int nLastSeen = nWalletDBUpdated;"
      },
      {
        "sha": "6ee429040544d7a003dbe866feb57adef3860b1b",
        "filename": "src/headers.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/headers.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/headers.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/headers.h?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -91,6 +91,7 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"option.h\"\n #include \"bignum.h\"\n #include \"base58.h\"\n #include \"main.h\""
      },
      {
        "sha": "f3ad5a6048398753c4d8dcb1ca9715a088e7d98e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 242,
        "deletions": 154,
        "changes": 396,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -10,11 +10,89 @@\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n #include <boost/interprocess/sync/file_lock.hpp>\n+#include <sstream>\n \n using namespace std;\n using namespace boost;\n+namespace fs = boost::filesystem;\n+\n+static fs::path pathDataDir;\n+static fs::path pathConfigFile;\n+static fs::path pathPidFile;\n+\n+option<string> helpOpt(\n+    \"init\", \"show\", \"help\", \"\", \"\",\n+    \"[=allopts]\", _(\"This help message or full option list\"));\n+\n+option<string> datadirOpt(\n+    \"init\", \"show\", \"datadir\", GetDefaultDataDir(),\n+    \"=<dir>\", _(\"Specify data directory\"));\n+\n+option<string> confOpt(\n+    \"init\", \"show\", \"conf\", \"bitcoin.conf\", \"=<file>\",\n+    _(\"Specify configuration file\"));\n+\n+option<bool> testnetOpt(\n+    \"init\", \"show\", \"testnet\", false, true,\n+    \"\", _(\"Use the test network\"));\n+\n+option<bool> debugOpt(\"init\", \"hide\", \"debug\", false, true);\n+\n+#ifdef GUI\n+option<bool> serverOpt(\n+    \"init\", \"show\", \"server\", false, true,\n+    \"\", _(\"Accept command line and JSON-RPC commands\"));\n+#endif\n+\n+#ifndef __WXMSW__\n+option<bool> daemonOpt(\n+    \"init\", \"show\", \"daemon\", false, true,\n+    \"\", _(\"Run in the background as a daemon and accept commands\"));\n+\n+option<string> pidfileOpt(\n+    \"init\", \"hide\", \"pid\", \"bitcoin.pid\", \"=<file>\",\n+    _(\"Specify pid file\"));\n+#endif\n+\n+option<bool> genOpt(\n+    \"init\", \"hide\", \"gen\", false, true,\n+    \"\", _(\"Generate coins\"));\n+\n+option<bool> rescanOpt(\n+    \"wallet\", \"show\", \"rescan\", false, true,\n+    \"\", _(\"Rescan the block chain for missing wallet transactions\"));\n+\n+option<money> paytxfeeOpt(\n+    \"wallet\", \"show\", \"paytxfee\", 0,\n+    \"=<amt>\", _(\"Fee per KB to add to transactions you send\"));\n+\n+#ifdef USE_UPNP\n+#if USE_UPNP\n+option<bool> upnpOpt(\n+    \"net\", \"show\", \"noupnp\", true, false,\n+    \"\", _(\"Don't attempt to use UPnP to map the listening port\"));\n+#else\n+option<bool> upnpOpt(\n+    \"net\", \"show\", \"upnp\", false, true,\n+    \"\", _(\"Attempt to use UPnP to map the listening port\"));\n+#endif\n+#endif\n+\n+option<string> proxyOpt(\n+    \"net\", \"show\", \"proxy\", \"\",\n+    \"=<ip:port>\", _(\"Connect through socks4 proxy\"));\n+\n+option<bool> nodnsseedOpt(\"net\", \"hide\", \"nodnsseed\", false, true);\n+option<bool> loadblockindextestOpt(\"init\", \"test\", \"loadblockindextest\", false, true);\n+option<string> printblockOpt(\"init\", \"hide\", \"printblock\", \"\");\n+option<bool> printblocktreeOpt(\"init\", \"hide\", \"printblocktree\", false, true);\n+option<bool> printblockindexOpt(\"init\", \"hide\", \"printblockindex\", false, true);\n+\n+option<bool> printtoconsoleOpt(\"log\", \"hide\", \"printtoconsole\", false, true);\n+option<bool> printtodebuggerOpt(\"log\", \"hide\", \"printtodebugger\", false, true);\n+option<bool> logtimestampsOpt(\"log\", \"hide\", \"logtimestamps\", false, true);\n+\n \n-CWallet* pwalletMain;\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -47,7 +125,7 @@ void Shutdown(void* parg)\n         DBFlush(false);\n         StopNode();\n         DBFlush(true);\n-        boost::filesystem::remove(GetPidFile());\n+        fs::remove(pathPidFile);\n         UnregisterWallet(pwalletMain);\n         delete pwalletMain;\n         CreateThread(ExitTimeout, NULL);\n@@ -72,6 +150,55 @@ void HandleSIGTERM(int)\n \n \n \n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// Help\n+//\n+void PrintHelp()\n+{\n+    std::ostringstream ss;\n+    if (helpOpt() == \"\")\n+    {\n+        ss << _(\"Bitcoin version\") << \" \" << FormatFullVersion() << endl;\n+        ss << endl;\n+        ss << _(\"Usage:\") << endl;\n+        ss << \"  bitcoin [options]                     \" << endl;\n+        ss << \"  bitcoin [options] <command> [params]  \" << _(\"Send command to -server or bitcoind\") << endl;\n+        ss << \"  bitcoin [options] help                \" << _(\"List commands\") << endl;\n+        ss << \"  bitcoin [options] help <command>      \" << _(\"Get help for a command\") << endl;\n+        ss << endl;\n+        ss << _(\"Options:\") << endl;\n+        ss << GetOptionsDescriptions(\"init\", \"show\");\n+        ss << _(\"Wallet options:\") << endl;\n+        ss << GetOptionsDescriptions(\"wallet\", \"show\");\n+        ss << _(\"Network options:\") << endl;\n+        ss << GetOptionsDescriptions(\"net\", \"show\");\n+        ss << _(\"Server options (see the Bitcoin Wiki for SSL setup instructions):\") << endl;\n+        ss << GetOptionsDescriptions(\"rpc\", \"show\");\n+    }\n+    else if (helpOpt() == \"allopts\")\n+    {\n+        ss << _(\"All options:\") << endl;\n+        ss << GetOptionsDescriptions(\"*\", \"show,hide\", true);\n+    }\n+    else if (helpOpt() == \"dumpopts\")\n+    {\n+        ss << _(\"All options:\") << endl;\n+        ss << GetOptionsDescriptions(\"*\", \"*\", true);\n+    }\n+    else\n+    {\n+        ss << _(\"Options:\") << endl;\n+        ss << GetOptionsDescriptions(helpOpt(), \"show,hide\", true);\n+    }\n+\n+#if defined(__WXMSW__) && defined(GUI)\n+    wxMessageBox(ss.str(), \"Bitcoin\", wxOK);\n+#else\n+    cerr << ss.str();\n+#endif\n+\n+}\n \n \n \n@@ -137,119 +264,80 @@ bool AppInit2(int argc, char* argv[])\n     //\n     // Parameters\n     //\n-    ParseParameters(argc, argv);\n \n-    if (mapArgs.count(\"-datadir\"))\n+    // Parse command line options\n+    if (!ParseCommandLine(argc, argv))\n+        return false;\n+\n+    if (+helpOpt)\n     {\n-        if (filesystem::is_directory(filesystem::system_complete(mapArgs[\"-datadir\"])))\n-        {\n-            filesystem::path pathDataDir = filesystem::system_complete(mapArgs[\"-datadir\"]);\n-            strlcpy(pszSetDataDir, pathDataDir.string().c_str(), sizeof(pszSetDataDir));\n-        }\n-        else\n-        {\n-            fprintf(stderr, \"Error: Specified directory does not exist\\n\");\n-            Shutdown(NULL);\n-        }\n+        PrintHelp();\n+        return false;\n     }\n \n+    // Compute pathDataDir and pathConfigFile from command line\n+    pathDataDir = fs::system_complete(datadirOpt());\n+    pathConfigFile = confOpt();\n+    if (!pathConfigFile.is_complete())\n+        pathConfigFile = pathDataDir / pathConfigFile;\n \n-    ReadConfigFile(mapArgs, mapMultiArgs); // Must be done after processing datadir\n+    strConfigFile = pathConfigFile.string();\n \n-    if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    if (+confOpt && !fs::exists(pathConfigFile)) {\n+        cerr << _(\"Error: Specified configuration file does not exist\") << endl;\n+        return false;\n+    }\n+\n+    // Parse configuration file\n+    if (!UpdateConfig(true))\n+        return false;\n+\n+    // Update datadir in case it was defined in config file\n+    if (+datadirOpt)\n     {\n-        string strUsage = string() +\n-          _(\"Bitcoin version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n-          _(\"Usage:\") + \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\" +\n-            \"  bitcoin [options]                   \\t  \" + \"\\n\" +\n-            \"  bitcoin [options] <command> [params]\\t  \" + _(\"Send command to -server or bitcoind\\n\") +\n-            \"  bitcoin [options] help              \\t\\t  \" + _(\"List commands\\n\") +\n-            \"  bitcoin [options] help <command>    \\t\\t  \" + _(\"Get help for a command\\n\") +\n-          _(\"Options:\\n\") +\n-            \"  -conf=<file>     \\t\\t  \" + _(\"Specify configuration file (default: bitcoin.conf)\\n\") +\n-            \"  -pid=<file>      \\t\\t  \" + _(\"Specify pid file (default: bitcoind.pid)\\n\") +\n-            \"  -gen             \\t\\t  \" + _(\"Generate coins\\n\") +\n-            \"  -gen=0           \\t\\t  \" + _(\"Don't generate coins\\n\") +\n-            \"  -min             \\t\\t  \" + _(\"Start minimized\\n\") +\n-            \"  -datadir=<dir>   \\t\\t  \" + _(\"Specify data directory\\n\") +\n-            \"  -timeout=<n>     \\t  \"   + _(\"Specify connection timeout (in milliseconds)\\n\") +\n-            \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks4 proxy\\n\") +\n-            \"  -dns             \\t  \"   + _(\"Allow DNS lookups for addnode and connect\\n\") +\n-            \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to\\n\") +\n-            \"  -connect=<ip>    \\t\\t  \" + _(\"Connect only to the specified node\\n\") +\n-            \"  -nolisten        \\t  \"   + _(\"Don't accept connections from outside\\n\") +\n-#ifdef USE_UPNP\n-#if USE_UPNP\n-            \"  -noupnp          \\t  \"   + _(\"Don't attempt to use UPnP to map the listening port\\n\") +\n-#else\n-            \"  -upnp            \\t  \"   + _(\"Attempt to use UPnP to map the listening port\\n\") +\n-#endif\n-#endif\n-            \"  -paytxfee=<amt>  \\t  \"   + _(\"Fee per KB to add to transactions you send\\n\") +\n-#ifdef GUI\n-            \"  -server          \\t\\t  \" + _(\"Accept command line and JSON-RPC commands\\n\") +\n-#endif\n-#ifndef __WXMSW__\n-            \"  -daemon          \\t\\t  \" + _(\"Run in the background as a daemon and accept commands\\n\") +\n-#endif\n-            \"  -testnet         \\t\\t  \" + _(\"Use the test network\\n\") +\n-            \"  -rpcuser=<user>  \\t  \"   + _(\"Username for JSON-RPC connections\\n\") +\n-            \"  -rpcpassword=<pw>\\t  \"   + _(\"Password for JSON-RPC connections\\n\") +\n-            \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\\n\") +\n-            \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\\n\") +\n-            \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\\n\") +\n-            \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\\n\") +\n-            \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\\n\");\n-\n-#ifdef USE_SSL\n-        strUsage += string() +\n-            _(\"\\nSSL options: (see the Bitcoin Wiki for SSL setup instructions)\\n\") +\n-            \"  -rpcssl                                \\t  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\\n\") +\n-            \"  -rpcsslcertificatechainfile=<file.cert>\\t  \" + _(\"Server certificate file (default: server.cert)\\n\") +\n-            \"  -rpcsslprivatekeyfile=<file.pem>       \\t  \" + _(\"Server private key (default: server.pem)\\n\") +\n-            \"  -rpcsslciphers=<ciphers>               \\t  \" + _(\"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\\n\");\n-#endif\n+        pathDataDir = fs::system_complete(datadirOpt());\n+        if (!fs::is_directory(pathDataDir))\n+        {\n+            cerr << _(\"Error: Specified directory does not exist\") << endl;\n+            return false;\n+        }\n+    }\n \n-        strUsage += string() +\n-            \"  -?               \\t\\t  \" + _(\"This help message\\n\");\n+    if (!fs::exists(pathDataDir))\n+        fs::create_directory(pathDataDir);\n \n-#if defined(__WXMSW__) && defined(GUI)\n-        // Tabs make the columns line up in the message box\n-        wxMessageBox(strUsage, \"Bitcoin\", wxOK);\n-#else\n-        // Remove tabs\n-        strUsage.erase(std::remove(strUsage.begin(), strUsage.end(), '\\t'), strUsage.end());\n-        fprintf(stderr, \"%s\", strUsage.c_str());\n-#endif\n-        return false;\n+    fTestNet = testnetOpt();\n+    if (fTestNet)\n+    {\n+        pathDataDir = pathDataDir / \"testnet\";\n+        if (!fs::exists(pathDataDir))\n+            fs::create_directory(pathDataDir);\n+\n+        cerr << _(\"Using testnet!\") << \" (datadir: \" << pathDataDir << \")\" << endl;\n     }\n \n-    fDebug = GetBoolArg(\"-debug\");\n-    fAllowDNS = GetBoolArg(\"-dns\");\n+    strDataDir = pathDataDir.string();\n+\n+    // Warnings\n+    if (nTransactionFee > 0.25 * COIN)\n+        wxMessageBox(_(\"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"), \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n+\n+\n+    // Configuration parameters listed below cannot be dynamicaly updated\n+    fDebug = debugOpt();\n \n #ifndef __WXMSW__\n-    fDaemon = GetBoolArg(\"-daemon\");\n+    fDaemon = daemonOpt();\n #else\n     fDaemon = false;\n #endif\n \n-    if (fDaemon)\n-        fServer = true;\n-    else\n-        fServer = GetBoolArg(\"-server\");\n-\n-    /* force fServer when running without GUI */\n #ifndef GUI\n     fServer = true;\n+#else\n+    fServer = fDaemon || serverOpt();\n #endif\n \n-    fPrintToConsole = GetBoolArg(\"-printtoconsole\");\n-    fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n-\n-    fTestNet = GetBoolArg(\"-testnet\");\n-    fNoListen = GetBoolArg(\"-nolisten\");\n-    fLogTimestamps = GetBoolArg(\"-logtimestamps\");\n-\n     for (int i = 1; i < argc; i++)\n         if (!IsSwitchChar(argv[i][0]))\n             fCommandLine = true;\n@@ -272,7 +360,12 @@ bool AppInit2(int argc, char* argv[])\n         }\n         if (pid > 0)\n         {\n-            CreatePidFile(GetPidFile(), pid);\n+            fs::path path = pidfileOpt();\n+            if (!path.is_complete())\n+                path =  pathDataDir / path;\n+            pathPidFile = path;\n+            fs::ofstream PidFile(pathPidFile);\n+            PidFile << pid << endl;;\n             return true;\n         }\n \n@@ -282,18 +375,19 @@ bool AppInit2(int argc, char* argv[])\n     }\n #endif\n \n-    if (!fDebug && !pszSetDataDir[0])\n+    if (!fDebug)\n         ShrinkDebugFile();\n-    printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n+    printf(\"\\n\\n\\n\\n\\n\");\n     printf(\"Bitcoin version %s\\n\", FormatFullVersion().c_str());\n #ifdef GUI\n     printf(\"OS version %s\\n\", ((string)wxGetOsDescription()).c_str());\n     printf(\"System default language is %d %s\\n\", g_locale.GetSystemLanguage(), ((string)g_locale.GetSysName()).c_str());\n     printf(\"Language file %s (%s)\\n\", (string(\"locale/\") + (string)g_locale.GetCanonicalName() + \"/LC_MESSAGES/bitcoin.mo\").c_str(), ((string)g_locale.GetLocale()).c_str());\n #endif\n     printf(\"Default data directory %s\\n\", GetDefaultDataDir().c_str());\n+    printf(\"Using data directory %s\\n\", strDataDir.c_str());\n \n-    if (GetBoolArg(\"-loadblockindextest\"))\n+    if (loadblockindextestOpt())\n     {\n         CTxDB txdb(\"r\");\n         txdb.LoadBlockIndex();\n@@ -354,13 +448,10 @@ bool AppInit2(int argc, char* argv[])\n \n     // Bind to the port early so we can tell if another instance is already running.\n     string strErrors;\n-    if (!fNoListen)\n+    if (!BindListenPort(strErrors))\n     {\n-        if (!BindListenPort(strErrors))\n-        {\n-            wxMessageBox(strErrors, \"Bitcoin\");\n-            return false;\n-        }\n+        wxMessageBox(strErrors, \"Bitcoin\");\n+        return false;\n     }\n \n     //\n@@ -374,27 +465,27 @@ bool AppInit2(int argc, char* argv[])\n     printf(\"Loading addresses...\\n\");\n     nStart = GetTimeMillis();\n     if (!LoadAddresses())\n-        strErrors += _(\"Error loading addr.dat      \\n\");\n+        strErrors += string() + _(\"Error loading\") + \" addr.dat\\n\";\n     printf(\" addresses   %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n     printf(\"Loading block index...\\n\");\n     nStart = GetTimeMillis();\n     if (!LoadBlockIndex())\n-        strErrors += _(\"Error loading blkindex.dat      \\n\");\n+        strErrors += string() + _(\"Error loading\") + \" blkindex.dat\\n\";\n     printf(\" block index %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n     printf(\"Loading wallet...\\n\");\n     nStart = GetTimeMillis();\n     bool fFirstRun;\n     pwalletMain = new CWallet(\"wallet.dat\");\n     if (!pwalletMain->LoadWallet(fFirstRun))\n-        strErrors += _(\"Error loading wallet.dat      \\n\");\n+        strErrors += string() + _(\"Error loading\") + \" wallet.dat\\n\";\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n     RegisterWallet(pwalletMain);\n \n     CBlockIndex *pindexRescan = pindexBest;\n-    if (GetBoolArg(\"-rescan\"))\n+    if (rescanOpt())\n         pindexRescan = pindexGenesisBlock;\n     else\n     {\n@@ -434,22 +525,15 @@ bool AppInit2(int argc, char* argv[])\n     //\n     // Parameters\n     //\n-    if (GetBoolArg(\"-printblockindex\") || GetBoolArg(\"-printblocktree\"))\n+    if (printblockindexOpt() || printblocktreeOpt())\n     {\n         PrintBlockTree();\n         return false;\n     }\n \n-    if (mapArgs.count(\"-timeout\"))\n+    if (+printblockOpt)\n     {\n-        int nNewTimeout = GetArg(\"-timeout\", 5000);\n-        if (nNewTimeout > 0 && nNewTimeout < 600000)\n-            nConnectTimeout = nNewTimeout;\n-    }\n-\n-    if (mapArgs.count(\"-printblock\"))\n-    {\n-        string strMatch = mapArgs[\"-printblock\"];\n+        string strMatch = printblockOpt();\n         int nFound = 0;\n         for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)\n         {\n@@ -470,22 +554,10 @@ bool AppInit2(int argc, char* argv[])\n         return false;\n     }\n \n-    fGenerateBitcoins = GetBoolArg(\"-gen\");\n-\n-    if (mapArgs.count(\"-proxy\"))\n-    {\n-        fUseProxy = true;\n-        addrProxy = CAddress(mapArgs[\"-proxy\"]);\n-        if (!addrProxy.IsValid())\n-        {\n-            wxMessageBox(_(\"Invalid -proxy address\"), \"Bitcoin\");\n-            return false;\n-        }\n-    }\n-\n-    if (mapArgs.count(\"-addnode\"))\n+    if (+addnodeOpt)\n     {\n-        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-addnode\"])\n+        bool fAllowDNS = dnsOpt();\n+        BOOST_FOREACH(string strAddr, addnodeOpt())\n         {\n             CAddress addr(strAddr, fAllowDNS);\n             addr.nTime = 0; // so it won't relay unless successfully connected\n@@ -494,32 +566,12 @@ bool AppInit2(int argc, char* argv[])\n         }\n     }\n \n-    if (GetBoolArg(\"-nodnsseed\"))\n+    if (nodnsseedOpt())\n         printf(\"DNS seeding disabled\\n\");\n     else\n         DNSAddressSeed();\n \n-    if (mapArgs.count(\"-paytxfee\"))\n-    {\n-        if (!ParseMoney(mapArgs[\"-paytxfee\"], nTransactionFee))\n-        {\n-            wxMessageBox(_(\"Invalid amount for -paytxfee=<amount>\"), \"Bitcoin\");\n-            return false;\n-        }\n-        if (nTransactionFee > 0.25 * COIN)\n-            wxMessageBox(_(\"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"), \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n-    }\n \n-    if (fHaveUPnP)\n-    {\n-#if USE_UPNP\n-    if (GetBoolArg(\"-noupnp\"))\n-        fUseUPnP = false;\n-#else\n-    if (GetBoolArg(\"-upnp\"))\n-        fUseUPnP = true;\n-#endif\n-    }\n \n     //\n     // Create the main window and start the node\n@@ -552,3 +604,39 @@ bool AppInit2(int argc, char* argv[])\n \n     return true;\n }\n+\n+\n+bool UpdateConfig(bool messages)\n+{\n+\n+    if (!ParseConfigFile())\n+        return false;\n+\n+    fPrintToConsole = printtoconsoleOpt();\n+    fPrintToDebugger = printtodebuggerOpt();\n+    fLogTimestamps = logtimestampsOpt();\n+\n+    nTransactionFee = paytxfeeOpt();\n+\n+    fGenerateBitcoins = genOpt();\n+\n+    fUseProxy = false;\n+    if (+proxyOpt)\n+    {\n+        fUseProxy = true;\n+        addrProxy = CAddress(proxyOpt());\n+        if (!addrProxy.IsValid() && messages)\n+        {\n+            wxMessageBox(_(\"Invalid -proxy address\"), \"Bitcoin\");\n+            return false;\n+        }\n+    }\n+\n+#ifdef USE_UPNP\n+    fUseUPnP = fHaveUPnP && upnpOpt();\n+#endif\n+\n+    return true;\n+}\n+\n+"
      },
      {
        "sha": "fc49037174579b32532c7c90e7ce7a98127468ab",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -4,10 +4,9 @@\n #ifndef BITCOIN_INIT_H\n #define BITCOIN_INIT_H\n \n-extern CWallet* pwalletMain;\n-\n void Shutdown(void* parg);\n bool AppInit(int argc, char* argv[]);\n bool AppInit2(int argc, char* argv[]);\n+bool UpdateConfig(bool messages);\n \n #endif"
      },
      {
        "sha": "7aad6c30edd7e6422c1b21ca8757e478a4e1f7ee",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -253,12 +253,6 @@ void ThreadIRCSeed(void* parg)\n \n void ThreadIRCSeed2(void* parg)\n {\n-    /* Dont advertise on IRC if we don't allow incoming connections */\n-    if (mapArgs.count(\"-connect\") || fNoListen)\n-        return;\n-\n-    if (GetBoolArg(\"-noirc\"))\n-        return;\n     printf(\"ThreadIRCSeed started\\n\");\n     int nErrorWait = 10;\n     int nRetryWait = 10;"
      },
      {
        "sha": "cf72742b74bedd756cb8689d81578fe1fd20bf65",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -5,17 +5,25 @@\n #include \"db.h\"\n #include \"net.h\"\n #include \"init.h\"\n+#include \"net.h\"\n #include \"cryptopp/sha.h\"\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n \n using namespace std;\n using namespace boost;\n \n+option<int> limitfreerelayOpt(\"main\", \"hide\", \"limitfreerelay\", 15);\n+option<bool> testsafemodeOpt(\"main\", \"test\", \"testsafemode\", false, true);\n+option<bool> allowreceivebyipOpt(\"main\", \"hide\", \"allowreceivebyip\", false, true);\n+option<bool> printpriorityOpt(\"main\", \"hide\", \"printpriority\", false, true);\n+\n //\n // Global state\n //\n \n+CWallet* pwalletMain;\n+\n CCriticalSection cs_setpwalletRegistered;\n set<CWallet*> setpwalletRegistered;\n \n@@ -432,7 +440,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n                 nLastTime = nNow;\n                 // -limitfreerelay unit is thousand-bytes-per-minute\n                 // At default rate it would take over a month to fill 1GB\n-                if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(*this))\n+                if (dFreeCount > limitfreerelayOpt()*10*1000 && !IsFromMe(*this))\n                     return error(\"AcceptToMemoryPool() : free transaction rejected by rate limiter\");\n                 if (fDebug)\n                     printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n@@ -1654,7 +1662,7 @@ string GetWarnings(string strFor)\n     int nPriority = 0;\n     string strStatusBar;\n     string strRPC;\n-    if (GetBoolArg(\"-testsafemode\"))\n+    if (testsafemodeOpt())\n         strRPC = \"test\";\n \n     // Misc warnings like out of disk space and clock is wrong\n@@ -1780,16 +1788,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     if (fDebug)\n         printf(\"%s \", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n     printf(\"received: %s (%d bytes)\\n\", strCommand.c_str(), vRecv.size());\n-    if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n+    int drop = dropmessagestestOpt();\n+    if (drop > 0 && GetRand(drop) == 0)\n     {\n         printf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n         return true;\n     }\n \n-\n-\n-\n-\n     if (strCommand == \"version\")\n     {\n         // Each connection can only send one version message\n@@ -2054,7 +2059,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             CBlock block;\n             block.ReadFromDisk(pindex, true);\n             nBytes += block.GetSerializeSize(SER_NETWORK);\n-            if (--nLimit <= 0 || nBytes >= SendBufferSize()/2)\n+            if (--nLimit <= 0 || nBytes >= maxsendbufferOpt()/2)\n             {\n                 // When this block is requested, we'll send an inv that'll make them\n                 // getblocks the next batch of inventory.\n@@ -2200,7 +2205,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         uint256 hashReply;\n         vRecv >> hashReply;\n \n-        if (!GetBoolArg(\"-allowreceivebyip\"))\n+        if (!allowreceivebyipOpt())\n         {\n             pfrom->PushMessage(\"reply\", hashReply, (int)2, string(\"\"));\n             return true;\n@@ -2740,7 +2745,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n                 dPriority += (double)nValueIn * nConf;\n \n-                if (fDebug && GetBoolArg(\"-printpriority\"))\n+                if (fDebug && printpriorityOpt())\n                     printf(\"priority     nValueIn=%-12I64d nConf=%-5d dPriority=%-20.1f\\n\", nValueIn, nConf, dPriority);\n             }\n \n@@ -2752,7 +2757,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             else\n                 mapPriority.insert(make_pair(-dPriority, &(*mi).second));\n \n-            if (fDebug && GetBoolArg(\"-printpriority\"))\n+            if (fDebug && printpriorityOpt())\n             {\n                 printf(\"priority %-20.1f %s\\n%s\", dPriority, tx.GetHash().ToString().substr(0,10).c_str(), tx.ToString().c_str());\n                 if (porphan)"
      },
      {
        "sha": "0293d31133fd186640d9fe9bd787b06ce8e4131f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -12,6 +12,8 @@\n \n #include <list>\n \n+extern CWallet* pwalletMain;\n+\n class CBlock;\n class CBlockIndex;\n class CWalletTx;"
      },
      {
        "sha": "e2693621ee69d3304cbc06e3159cee601815e194",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -33,7 +33,7 @@ LIBS= \\\n DEFS=-D_MT -DWIN32 -D__WXMSW__ -D_WINDOWS -DNOPCH -DUSE_SSL\n DEBUGFLAGS=-g -D__WXDEBUG__\n CFLAGS=-O2 -w -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n+HEADERS=headers.h strlcpy.h serialize.h uint256.h option.h util.h key.h bignum.h base58.h \\\n     script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h init.h\n \n bitcoin.exe: USE_UPNP:=1\n@@ -56,6 +56,7 @@ LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l w\n \n OBJS= \\\n     obj/util.o \\\n+    obj/option.o \\\n     obj/script.o \\\n     obj/db.o \\\n     obj/net.o \\"
      },
      {
        "sha": "e6e4387f925ab4cdfe9271fe2f0ebda516f2329b",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -32,7 +32,7 @@ LIBS= \\\n DEFS=-DWIN32 -D__WXMSW__ -D_WINDOWS -DNOPCH -DUSE_SSL\n DEBUGFLAGS=-g -D__WXDEBUG__\n CFLAGS=-mthreads -O2 -w -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n+HEADERS=headers.h strlcpy.h serialize.h uint256.h option.h util.h key.h bignum.h base58.h \\\n     script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h init.h\n \n ifdef USE_UPNP\n@@ -46,6 +46,7 @@ LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell\n \n OBJS= \\\n     obj/util.o \\\n+    obj/option.o \\\n     obj/script.o \\\n     obj/db.o \\\n     obj/net.o \\"
      },
      {
        "sha": "476c1ec313149642a3ecf07a4db176b68c1e0e69",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -32,11 +32,12 @@ DEFS=$(shell $(DEPSDIR)/bin/wx-config --cxxflags) -D__WXMAC_OSX__ -DNOPCH -DMSG_\n DEBUGFLAGS=-g -DwxDEBUG_LEVEL=0\n # ppc doesn't work because we don't support big-endian\n CFLAGS=-mmacosx-version-min=10.5 -arch i386 -arch x86_64 -O3 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n+HEADERS=headers.h strlcpy.h serialize.h uint256.h option.h util.h key.h bignum.h base58.h \\\n     script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h init.h\n \n OBJS= \\\n     obj/util.o \\\n+    obj/option.o \\\n     obj/script.o \\\n     obj/db.o \\\n     obj/net.o \\"
      },
      {
        "sha": "d788e81eedc165ee546f037bf1489d2cb53fe18c",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -38,11 +38,12 @@ LIBS+= \\\n \n DEBUGFLAGS=-g -D__WXDEBUG__\n CXXFLAGS=-O2 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n+HEADERS=headers.h strlcpy.h serialize.h uint256.h option.h util.h key.h bignum.h base58.h \\\n     script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h init.h\n \n OBJS= \\\n     obj/util.o \\\n+    obj/option.o \\\n     obj/script.o \\\n     obj/db.o \\\n     obj/net.o \\"
      },
      {
        "sha": "aa0302ff4b927a405f1d78aaebd0d4cdcf301def",
        "filename": "src/makefile.vc",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/makefile.vc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/makefile.vc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.vc?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -45,11 +45,12 @@ LIBS=$(LIBS) \\\n \n DEBUGFLAGS=/Os\n CFLAGS=/MD /c /nologo /EHsc /GR /Zm300 $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n+HEADERS=headers.h strlcpy.h serialize.h uint256.h option.h util.h key.h bignum.h base58.h \\\n     script.h db.h net.h irc.h main.h rpc.h uibase.h ui.h noui.h init.h wallet.h keystore.h\n \n OBJS= \\\n     obj\\util.obj \\\n+    obj\\option.obj \\\n     obj\\script.obj \\\n     obj\\db.obj \\\n     obj\\net.obj \\"
      },
      {
        "sha": "2e2bb6394dd47eb8ffb2d135660d4358251b4742",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 15,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -30,6 +30,34 @@ using namespace boost;\n \n static const int MAX_OUTBOUND_CONNECTIONS = 8;\n \n+option<int> timeoutOpt(\n+    \"net\", \"hide\", \"timeout\", 5000,\n+    \"=<n>\", _(\"Specify connection timeout (in milliseconds)\"));\n+\n+option<bool> nolistenOpt(\n+    \"net\", \"show\", \"nolisten\", false, true,\n+    \"\", _(\"Don't accept connections from outside\"));\n+\n+option<vector<string> > addnodeOpt(\n+    \"net\", \"show\", \"addnode\", vector<string>(),\n+    \"=<ip> ...\", _(\"Add a node to connect to\"));\n+\n+option<vector<string> > connectOpt(\n+    \"net\", \"show\", \"connect\", vector<string>(),\n+    \"=<ip> ...\", _(\"Connect only to the specified node\"));\n+\n+option<bool> dnsOpt(\n+    \"net\", \"hide\", \"dns\", false,\n+    \"\", _(\"Allow DNS lookups for addnode and connect\"));\n+\n+option<int> portOpt(\"net\", \"hide\", \"port\", 0);\n+option<bool> noircOpt(\"net\", \"hide\", \"noirc\", false, true);\n+option<int> dropmessagestestOpt(\"net\", \"test\", \"dropmessagestest\", 0);\n+option<int> maxconnectionsOpt(\"net\", \"hide\", \"maxconnections\", 125);\n+option<int> maxreceivebufferOpt(\"net\", \"hide\", \"maxreceivebuffer\", 10*1000);\n+option<int> maxsendbufferOpt(\"net\", \"hide\", \"maxsendbuffer\", 10*1000);\n+\n+\n void ThreadMessageHandler2(void* parg);\n void ThreadSocketHandler2(void* parg);\n void ThreadOpenConnections2(void* parg);\n@@ -46,7 +74,6 @@ bool OpenNetworkConnection(const CAddress& addrConnect);\n // Global state variables\n //\n bool fClient = false;\n-bool fAllowDNS = false;\n uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n CAddress addrLocalHost(\"0.0.0.0\", 0, false, nLocalServices);\n CNode* pnodeLocalHost = NULL;\n@@ -65,15 +92,14 @@ map<CInv, int64> mapAlreadyAskedFor;\n \n // Settings\n int fUseProxy = false;\n-int nConnectTimeout = 5000;\n CAddress addrProxy(\"127.0.0.1\",9050);\n \n \n \n \n unsigned short GetListenPort()\n {\n-    return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));\n+    return (unsigned short) portOpt[GetDefaultPort()];\n }\n \n void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)\n@@ -93,6 +119,13 @@ void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)\n \n bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet, int nTimeout)\n {\n+    if (nTimeout == -1)\n+    {  // check range on option parsing\n+        nTimeout = timeoutOpt();\n+        if (nTimeout <= 0 && nTimeout >= 600000)\n+            nTimeout = 5000;\n+    }\n+\n     hSocketRet = INVALID_SOCKET;\n \n     SOCKET hSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n@@ -409,7 +442,7 @@ bool GetMyExternalIP(unsigned int& ipRet)\n void ThreadGetMyExternalIP(void* parg)\n {\n     // Wait for IRC to get it first\n-    if (!GetBoolArg(\"-noirc\"))\n+    if (!noircOpt())\n     {\n         for (int i = 0; i < 2 * 60; i++)\n         {\n@@ -882,7 +915,7 @@ void ThreadSocketHandler2(void* parg)\n                 if (WSAGetLastError() != WSAEWOULDBLOCK)\n                     printf(\"socket error accept failed: %d\\n\", WSAGetLastError());\n             }\n-            else if (nInbound >= GetArg(\"-maxconnections\", 125) - MAX_OUTBOUND_CONNECTIONS)\n+            else if (nInbound >= maxconnectionsOpt() - MAX_OUTBOUND_CONNECTIONS)\n             {\n                 closesocket(hSocket);\n             }\n@@ -924,7 +957,8 @@ void ThreadSocketHandler2(void* parg)\n                     CDataStream& vRecv = pnode->vRecv;\n                     unsigned int nPos = vRecv.size();\n \n-                    if (nPos > ReceiveBufferSize()) {\n+                    if (nPos > 1000*maxreceivebufferOpt())\n+                    {\n                         if (!pnode->fDisconnect)\n                             printf(\"socket recv flood control disconnect (%d bytes)\\n\", vRecv.size());\n                         pnode->CloseSocketDisconnect();\n@@ -989,7 +1023,9 @@ void ThreadSocketHandler2(void* parg)\n                                 pnode->CloseSocketDisconnect();\n                             }\n                         }\n-                        if (vSend.size() > SendBufferSize()) {\n+\n+                        if (vSend.size() > 1000*maxsendbufferOpt())\n+                        {\n                             if (!pnode->fDisconnect)\n                                 printf(\"socket send flood control disconnect (%d bytes)\\n\", vSend.size());\n                             pnode->CloseSocketDisconnect();\n@@ -1248,14 +1284,16 @@ void ThreadOpenConnections(void* parg)\n \n void ThreadOpenConnections2(void* parg)\n {\n+    bool fAllowDNS = dnsOpt();\n+\n     printf(\"ThreadOpenConnections started\\n\");\n \n     // Connect to specific addresses\n-    if (mapArgs.count(\"-connect\"))\n+    if (+connectOpt)\n     {\n         for (int64 nLoop = 0;; nLoop++)\n         {\n-            BOOST_FOREACH(string strAddr, mapMultiArgs[\"-connect\"])\n+            BOOST_FOREACH(string strAddr, connectOpt())\n             {\n                 CAddress addr(strAddr, fAllowDNS);\n                 if (addr.IsValid())\n@@ -1271,9 +1309,9 @@ void ThreadOpenConnections2(void* parg)\n     }\n \n     // Connect to manually added nodes first\n-    if (mapArgs.count(\"-addnode\"))\n+    if (+addnodeOpt)\n     {\n-        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-addnode\"])\n+        BOOST_FOREACH(string strAddr, addnodeOpt())\n         {\n             CAddress addr(strAddr, fAllowDNS);\n             if (addr.IsValid())\n@@ -1301,7 +1339,7 @@ void ThreadOpenConnections2(void* parg)\n                     if (!pnode->fInbound)\n                         nOutbound++;\n             int nMaxOutboundConnections = MAX_OUTBOUND_CONNECTIONS;\n-            nMaxOutboundConnections = min(nMaxOutboundConnections, (int)GetArg(\"-maxconnections\", 125));\n+            nMaxOutboundConnections = min(nMaxOutboundConnections, maxconnectionsOpt());\n             if (nOutbound < nMaxOutboundConnections)\n                 break;\n             Sleep(2000);\n@@ -1541,6 +1579,9 @@ void ThreadMessageHandler2(void* parg)\n \n bool BindListenPort(string& strError)\n {\n+    if (nolistenOpt())\n+        return true;\n+\n     strError = \"\";\n     int nOne = 1;\n     addrLocalHost.port = htons(GetListenPort());\n@@ -1676,7 +1717,7 @@ void StartNode(void* parg)\n #endif\n     printf(\"addrLocalHost = %s\\n\", addrLocalHost.ToString().c_str());\n \n-    if (fUseProxy || mapArgs.count(\"-connect\") || fNoListen)\n+    if (fUseProxy || +connectOpt || nolistenOpt())\n     {\n         // Proxies can't take incoming connections\n         addrLocalHost.ip = CAddress(\"0.0.0.0\").ip;\n@@ -1696,8 +1737,9 @@ void StartNode(void* parg)\n         MapPort(fUseUPnP);\n \n     // Get addresses from IRC and advertise ours\n-    if (!CreateThread(ThreadIRCSeed, NULL))\n-        printf(\"Error: CreateThread(ThreadIRCSeed) failed\\n\");\n+    if (!noircOpt() && !+connectOpt && !nolistenOpt())\n+        if (!CreateThread(ThreadIRCSeed, NULL))\n+            printf(\"Error: CreateThread(ThreadIRCSeed) failed\\n\");\n \n     // Send and receive from sockets, accept connections\n     pthread_t hThreadSocketHandler = CreateThread(ThreadSocketHandler, NULL, true);"
      },
      {
        "sha": "7fe7071277c702dd24f8d1a5c36956150583c929",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -12,19 +12,23 @@\n #include <arpa/inet.h>\n #endif\n \n+extern option<bool> dnsOpt;\n+extern option<int> dropmessagestestOpt;\n+extern option<int> sendbuffersizeOpt;\n+extern option<std::vector<std::string> > addnodeOpt;\n+extern option<int> maxreceivebufferOpt;\n+extern option<int> maxsendbufferOpt;\n+\n class CMessageHeader;\n class CAddress;\n class CInv;\n class CRequestTracker;\n class CNode;\n class CBlockIndex;\n extern int nBestHeight;\n-extern int nConnectTimeout;\n \n \n \n-inline unsigned int ReceiveBufferSize() { return 1000*GetArg(\"-maxreceivebuffer\", 10*1000); }\n-inline unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 10*1000); }\n inline unsigned short GetDefaultPort() { return fTestNet ? 18333 : 8333; }\n static const unsigned int PUBLISH_HOPS = 5;\n enum\n@@ -35,7 +39,7 @@ enum\n \n \n \n-bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet, int nTimeout=nConnectTimeout);\n+bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet, int nTimeout=-1);\n bool Lookup(const char *pszName, std::vector<CAddress>& vaddr, int nServices, int nMaxSolutions, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n bool Lookup(const char *pszName, CAddress& addr, int nServices, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n bool GetMyExternalIP(unsigned int& ipRet);\n@@ -470,7 +474,6 @@ class CRequestTracker\n \n \n extern bool fClient;\n-extern bool fAllowDNS;\n extern uint64 nLocalServices;\n extern CAddress addrLocalHost;\n extern CNode* pnodeLocalHost;\n@@ -698,7 +701,8 @@ class CNode\n \n     void EndMessage()\n     {\n-        if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n+        int drop = dropmessagestestOpt();\n+        if (drop > 0 && GetRand(drop) == 0)\n         {\n             printf(\"dropmessages DROPPING SEND MESSAGE\\n\");\n             AbortMessage();"
      },
      {
        "sha": "ccbb3af2554343319b73a5b14591898f9925f513",
        "filename": "src/option.cpp",
        "status": "added",
        "additions": 221,
        "deletions": 0,
        "changes": 221,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/option.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/option.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/option.cpp?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -0,0 +1,221 @@\n+// Copyright (c) 2009-2011 Bitcoin Developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"headers.h\"\n+#include \"option.h\"\n+\n+#include <string.h>\n+#include <sstream>\n+#include <boost/filesystem.hpp>\n+#include <boost/filesystem/fstream.hpp>\n+#include <boost/program_options/parsers.hpp>\n+#include <boost/program_options/cmdline.hpp>\n+#include <boost/program_options/variables_map.hpp>\n+#include <boost/lambda/lambda.hpp>\n+\n+// This file is a custom Bitcoin-like binding to boost::program_options\n+\n+using namespace std;\n+using namespace boost;\n+\n+namespace po = boost::program_options;\n+namespace fs = boost::filesystem;\n+\n+\n+void validate(boost::any& v, const std::vector<std::string>& values, money* target_type, int)\n+{\n+    po::validators::check_first_occurrence(v);\n+    const string& s = po::validators::get_single_string(values);\n+    int64 value;\n+    if (!ParseMoney(s, value))\n+        throw po::validation_error(po::validation_error::invalid_option_value);\n+    else\n+        v = any(money(value));\n+}\n+\n+\n+typedef struct {\n+    const char *optGroup;\n+    const char *optClass;\n+    const char *optName;\n+    const char *argDesc;\n+    const char *optDesc;\n+} optattr;\n+\n+// these stupid accessors are necessary to avoid\n+// the infamous \"initialization disaster\"\n+static vector<optattr> &allOptionsDesc()\n+{\n+    static vector<optattr> *p = new vector<optattr>;\n+    return *p;\n+}\n+static po::options_description &allOptions()\n+{\n+    static po::options_description *p = new po::options_description();\n+    return *p;\n+}\n+\n+template <typename T>\n+void option<T>::notify(const T &val)\n+{\n+    value = val;\n+    defined = true;\n+}\n+\n+template <typename T>\n+option<T>::option(const char *optGroup, const char *optClass,\n+                  const char *optName, const T &def,\n+                  const char *argDesc, const char *optDesc)\n+{\n+    defined = false;\n+    value = def;\n+    optattr d;\n+    d.optGroup = optGroup;\n+    d.optClass = optClass;\n+    d.optName = optName;\n+    d.argDesc = argDesc;\n+    d.optDesc = optDesc;\n+    allOptionsDesc().push_back(d);\n+\n+    boost::function1<void, const T&> f = (lambda::_1 ->* &option<T>::notify)(this);\n+    allOptions().add_options()(optName, po::value<T>(&value)->notifier(f));\n+}\n+\n+template <typename T>\n+option<T>::option(const char *optGroup, const char *optClass,\n+                  const char *optName, const T &def, const T &imp,\n+                  const char *argDesc, const char *optDesc)\n+{\n+    defined = false;\n+    value = def;\n+    optattr d;\n+    d.optGroup = optGroup;\n+    d.optClass = optClass;\n+    d.optName = optName;\n+    d.argDesc = argDesc;\n+    d.optDesc = optDesc;\n+    allOptionsDesc().push_back(d);\n+\n+    boost::function1<void, const T&> f = (lambda::_1 ->* &option<T>::notify)(this);\n+    allOptions().add_options()(optName, po::value<T>(&value)->implicit_value(imp,\"\")->notifier(f));\n+}\n+\n+template class option<bool>;\n+template class option<string>;\n+template class option<int>;\n+template class option<int64>;\n+template class option<money>;\n+template class option<vector<string> >;\n+\n+static po::variables_map vmBase;\n+\n+pair<string, string> CustomOptionParser(const string& s)\n+{\n+    if (s.size() < 2 || !IsSwitchChar(s[0]) || s[1] == '-')\n+        return make_pair(string(), string());\n+\n+    string::size_type p = s.find('=');\n+    if (p != string::npos)\n+        return make_pair(s.substr(1, p - 1), s.substr(p + 1, s.size() - p - 1));\n+    else\n+        return make_pair(s.substr(1), string());\n+\n+}\n+\n+bool ParseCommandLine(int argc, char **argv)\n+{\n+    int opt_style =\n+        po::command_line_style::allow_long |\n+        po::command_line_style::long_allow_adjacent ;\n+\n+    try\n+    {\n+        po::store(po::command_line_parser(argc, argv).extra_parser(CustomOptionParser).style(opt_style).options(allOptions()).run(), vmBase);\n+    }\n+    catch (po::error &e)\n+    {\n+        cerr << _(\"Error on command line:\") << \" \" << e.what() << endl;\n+        return false;\n+    }\n+    po::notify(vmBase);\n+    return true;\n+}\n+\n+bool ParseConfigFile()\n+{\n+    fs::ifstream streamConfig(strConfigFile);\n+    po::variables_map vm = vmBase; // do not override cmd line\n+    try\n+    {\n+        po::store(po::parse_config_file(streamConfig, allOptions(), true), vm);\n+    }\n+    catch (po::error &e)\n+    {\n+        cerr << _(\"Error in configuration file:\") << \" \" << e.what() << endl;\n+        return false;\n+    }\n+    po::notify(vm);\n+    return true;\n+}\n+\n+bool optdescSortGroup(optattr d1, optattr d2)\n+{\n+    return strcmp(d1.optGroup, d2.optGroup) < 0;\n+}\n+\n+string GetOptionsDescriptions(const string &groupMasks, const string &classMasks, bool showgroups)\n+{\n+    int pad = 24;\n+\n+    vector <string> vGroupMask;\n+    ParseString(groupMasks, ',', vGroupMask);\n+    vector <string> vClassMask;\n+    ParseString(classMasks, ',', vClassMask);\n+\n+    vector<optattr> &v = allOptionsDesc();\n+    static bool sorted = false;\n+    if (!sorted)\n+    {\n+        stable_sort(v.begin(), v.end(), optdescSortGroup);\n+        sorted = true;\n+    }\n+\n+    ostringstream ss;\n+    string prevgroup = \"\";\n+    bool groupdisplayed = false;\n+\n+    BOOST_FOREACH(optattr d, v)\n+    {\n+        if (!d.optGroup || !d.optClass || !d.optName) continue;\n+        if (showgroups && prevgroup != d.optGroup)\n+        {\n+            groupdisplayed = false;\n+            prevgroup = d.optGroup;\n+        }\n+        bool group_match = false;\n+        BOOST_FOREACH(string mask, vGroupMask)\n+            if (WildcardMatch(d.optGroup, mask))\n+                group_match = true;\n+        bool class_match = false;\n+        BOOST_FOREACH(string mask, vClassMask)\n+            if (WildcardMatch(d.optClass, mask))\n+                class_match = true;\n+        if (group_match && class_match)\n+        {\n+            if (showgroups && !groupdisplayed)\n+            {\n+                ss << \"(\" << d.optGroup << \")\" << endl;\n+                groupdisplayed = true;\n+            }\n+            string optUsage = string() + \"  -\" + d.optName;\n+            if (d.argDesc) optUsage += d.argDesc;\n+            if (optUsage.size() >= pad) optUsage += \"  \\t\";\n+            else optUsage.resize(pad, ' ');\n+            if (d.optDesc) optUsage += string() + \" \" + d.optDesc;\n+            ss << optUsage << endl;\n+        }\n+    }\n+\n+    return ss.str();\n+}"
      },
      {
        "sha": "dba87f62a554500f2ac19668e47f97fc91f51b8e",
        "filename": "src/option.h",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/option.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/option.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/option.h?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2009-2011 Bitcoin Developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_OPTION_H\n+#define BITCOIN_OPTION_H\n+\n+// Possible uses of\n+//\n+//  option<T> fooOpt(\n+//      \"group\", \"class\", \"foo\", default_val, [implicit_val,]\n+//      \"=<num>\", _(\"Description of this option\"));\n+//\n+// are\n+//\n+//  T value = fooOpt();         (get the current value)\n+//  T value = fooOpt[default];  (use a special case default value)\n+//  if (+fooOpt) { ... }        (was the option explicitely defined by the user)\n+//\n+// and the help message shows:\n+//\n+//  Options:\n+//    -foo=<num>        Description of this option\n+\n+class money\n+{\n+private:\n+    int64 amount;\n+public:\n+    money() { amount = 0; }\n+    money(int64 v) { amount = v; }\n+    operator int64() const { return amount; }\n+};\n+\n+\n+template <typename T>\n+class option {\n+private:\n+    bool defined;  // Was this option explicitely defined?\n+    T value;       // Current value\n+    void notify(const T &);\n+public:\n+    option(const char *optGroup, const char *optClass,\n+           const char *optName, const T &defaultValue,\n+           const char *argDesc = NULL, const char *optDesc = NULL);\n+    option(const char *optGroup, const char *optClass,\n+           const char *optName, const T &def, const T &imp,\n+           const char *argDesc = NULL, const char *optDesc = NULL);\n+\n+    bool operator+() const { return defined; }\n+    const T operator() () { return value; }\n+    const T operator[] (const T &d) { return defined ? value : d; }\n+};\n+\n+extern template class option<bool>;\n+extern template class option<std::string>;\n+extern template class option<int>;\n+extern template class option<int64>;\n+extern template class option<money>;\n+extern template class option<std::vector<std::string> >;\n+\n+std::string GetOptionsDescriptions(const std::string &groupMasks, const std::string &classMasks, bool showgroups=false);\n+\n+bool ParseCommandLine(int argc, char **argv);\n+bool ParseConfigFile();\n+\n+#endif"
      },
      {
        "sha": "80990ddc70b0d2ee8654fcca5d7620079e6e4814",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 23,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -32,6 +32,44 @@ using namespace boost;\n using namespace boost::asio;\n using namespace json_spirit;\n \n+\n+option<string> rpcuserOpt(\"rpc\", \"show\", \"rpcuser\", \"\",\n+    \"=<user>\", _(\"Username for JSON-RPC connections\"));\n+\n+option<string> rpcpasswordOpt(\"rpc\", \"show\", \"rpcpassword\", \"\",\n+    \"=<pw>\", _(\"Password for JSON-RPC connections\"));\n+\n+option<string> rpcconnectOpt(\"rpc\", \"show\", \"rpcconnect\", \"127.0.0.1\",\n+    \"=<ip>\", _(\"Send commands to node running on <ip>\"));\n+\n+option<int> rpcportOpt(\"rpc\", \"show\", \"rpcport\", 8332,\n+    \"=<port>\", _(\"Listen for JSON-RPC connections on <port>\"));\n+\n+option<int> rpctimeoutOpt(\"rpc\", \"hide\", \"rpctimeout\", 30, \"=<time>\");\n+\n+option<vector<string> > rpcallowipOpt(\n+    \"rpc\", \"show\", \"rpcallowip\", vector<string>(),\n+    \"=<ip> ...\", _(\"Allow JSON-RPC connections from specified IP address\"));\n+\n+#ifdef USE_SSL\n+option<bool> rpcsslOpt(\"rpc\", \"show\", \"rpcssl\", false, true,\n+    \"\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n+\n+option<string> rpcsslcertificatechainfileOpt(\n+    \"rpc\", \"hide\", \"rpcsslcertificatechainfile\", \"server.cert\",\n+    \"=<file>\", _(\"Server certificate file\"));\n+\n+option<string> rpcsslprivatekeyfileOpt(\n+    \"rpc\", \"hide\", \"rpcsslprivatekeyfile\", \"server.pem\",\n+    \"=<file>\", _(\"Server private key file\"));\n+\n+option<string> rpcsslciphersOpt(\n+    \"rpc\", \"hide\", \"rpcsslciphers\", \"TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH\",\n+    \"\", _(\"Acceptable ciphers\"));\n+#endif\n+\n+option<bool> disablesafemodeOpt(\"rpc\", \"hide\", \"disablesafemode\", false, true);\n+\n void ThreadRPCServer2(void* parg);\n typedef Value(*rpcfn_type)(const Array& params, bool fHelp);\n extern map<string, rpcfn_type> mapCallTable;\n@@ -167,6 +205,18 @@ Value stop(const Array& params, bool fHelp)\n     return \"bitcoin server stopping\";\n }\n \n+Value reloadconfig(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"reloadconfig\\n\"\n+            \"Reload bitcoin server configuration files.\");\n+\n+    if (UpdateConfig(false))\n+        return \"configuration file has been reloaded\";\n+    else\n+        return \"error: configuration file has not been reloaded\";\n+}\n \n Value getblockcount(const Array& params, bool fHelp)\n {\n@@ -1434,6 +1484,7 @@ pair<string, rpcfn_type> pCallTable[] =\n {\n     make_pair(\"help\",                  &help),\n     make_pair(\"stop\",                  &stop),\n+    make_pair(\"reloadconfig\",          &reloadconfig),\n     make_pair(\"getblockcount\",         &getblockcount),\n     make_pair(\"getblocknumber\",        &getblocknumber),\n     make_pair(\"getconnectioncount\",    &getconnectioncount),\n@@ -1688,7 +1739,7 @@ bool HTTPAuthorized(map<string, string>& mapHeaders)\n         return false;\n     string strUser = strUserPass.substr(0, nColon);\n     string strPassword = strUserPass.substr(nColon+1);\n-    return (strUser == mapArgs[\"-rpcuser\"] && strPassword == mapArgs[\"-rpcpassword\"]);\n+    return (strUser == rpcuserOpt() && strPassword == rpcpasswordOpt());\n }\n \n //\n@@ -1737,7 +1788,7 @@ bool ClientAllowed(const string& strAddress)\n {\n     if (strAddress == asio::ip::address_v4::loopback().to_string())\n         return true;\n-    const vector<string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n+    const vector<string>& vAllow = rpcallowipOpt();\n     BOOST_FOREACH(string strAllow, vAllow)\n         if (WildcardMatch(strAddress, strAllow))\n             return true;\n@@ -1821,13 +1872,9 @@ void ThreadRPCServer2(void* parg)\n {\n     printf(\"ThreadRPCServer started\\n\");\n \n-    if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n+    if (rpcuserOpt() == \"\" && rpcpasswordOpt() == \"\")\n     {\n-        string strWhatAmI = \"To use bitcoind\";\n-        if (mapArgs.count(\"-server\"))\n-            strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-server\\\"\");\n-        else if (mapArgs.count(\"-daemon\"))\n-            strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-daemon\\\"\");\n+        string strWhatAmI = _(\"To send remote commands\");\n         PrintConsole(\n             _(\"Warning: %s, you must set rpcpassword=<password>\\nin the configuration file: %s\\n\"\n               \"If the file does not exist, create it with owner-readable-only file permissions.\\n\"),\n@@ -1837,11 +1884,11 @@ void ThreadRPCServer2(void* parg)\n         return;\n     }\n \n-    bool fUseSSL = GetBoolArg(\"-rpcssl\");\n-    asio::ip::address bindAddress = mapArgs.count(\"-rpcallowip\") ? asio::ip::address_v4::any() : asio::ip::address_v4::loopback();\n+    bool fUseSSL = rpcsslOpt();\n+    asio::ip::address bindAddress = +rpcallowipOpt ? asio::ip::address_v4::any() : asio::ip::address_v4::loopback();\n \n     asio::io_service io_service;\n-    ip::tcp::endpoint endpoint(bindAddress, GetArg(\"-rpcport\", 8332));\n+    ip::tcp::endpoint endpoint(bindAddress, rpcportOpt());\n     ip::tcp::acceptor acceptor(io_service, endpoint);\n \n     acceptor.set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n@@ -1851,17 +1898,16 @@ void ThreadRPCServer2(void* parg)\n     if (fUseSSL)\n     {\n         context.set_options(ssl::context::no_sslv2);\n-        filesystem::path certfile = GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\");\n+        filesystem::path certfile = rpcsslcertificatechainfileOpt();\n         if (!certfile.is_complete()) certfile = filesystem::path(GetDataDir()) / certfile;\n         if (filesystem::exists(certfile)) context.use_certificate_chain_file(certfile.string().c_str());\n         else printf(\"ThreadRPCServer ERROR: missing server certificate file %s\\n\", certfile.string().c_str());\n-        filesystem::path pkfile = GetArg(\"-rpcsslprivatekeyfile\", \"server.pem\");\n+        filesystem::path pkfile = rpcsslprivatekeyfileOpt();\n         if (!pkfile.is_complete()) pkfile = filesystem::path(GetDataDir()) / pkfile;\n         if (filesystem::exists(pkfile)) context.use_private_key_file(pkfile.string().c_str(), ssl::context::pem);\n         else printf(\"ThreadRPCServer ERROR: missing server private key file %s\\n\", pkfile.string().c_str());\n \n-        string ciphers = GetArg(\"-rpcsslciphers\",\n-                                         \"TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH\");\n+        string ciphers = rpcsslciphersOpt();\n         SSL_CTX_set_cipher_list(context.impl(), ciphers.c_str());\n     }\n #else\n@@ -1904,7 +1950,7 @@ void ThreadRPCServer2(void* parg)\n         string strRequest;\n \n         boost::thread api_caller(ReadHTTP, boost::ref(stream), boost::ref(mapHeaders), boost::ref(strRequest));\n-        if (!api_caller.timed_join(boost::posix_time::seconds(GetArg(\"-rpctimeout\", 30))))\n+        if (!api_caller.timed_join(boost::posix_time::seconds(rpctimeoutOpt())))\n         {   // Timed out:\n             acceptor.cancel();\n             printf(\"ThreadRPCServer ReadHTTP timeout\\n\");\n@@ -1920,7 +1966,7 @@ void ThreadRPCServer2(void* parg)\n         if (!HTTPAuthorized(mapHeaders))\n         {\n             // Deter brute-forcing short passwords\n-            if (mapArgs[\"-rpcpassword\"].size() < 15)\n+            if (rpcpasswordOpt().size() < 15)\n                 Sleep(50);\n \n             stream << HTTPReply(401, \"\") << std::flush;\n@@ -1967,7 +2013,7 @@ void ThreadRPCServer2(void* parg)\n \n             // Observe safe mode\n             string strWarning = GetWarnings(\"rpc\");\n-            if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\") && !setAllowInSafeMode.count(strMethod))\n+            if (strWarning != \"\" && !disablesafemodeOpt() && !setAllowInSafeMode.count(strMethod))\n                 throw JSONRPCError(-2, string(\"Safe mode: \") + strWarning);\n \n             try\n@@ -2000,35 +2046,37 @@ void ThreadRPCServer2(void* parg)\n \n Object CallRPC(const string& strMethod, const Array& params)\n {\n-    if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n+    if (rpcuserOpt() == \"\" && rpcpasswordOpt() == \"\")\n         throw runtime_error(strprintf(\n             _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n               \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n                 GetConfigFile().c_str()));\n \n     // Connect to localhost\n-    bool fUseSSL = GetBoolArg(\"-rpcssl\");\n+    bool fUseSSL = rpcsslOpt();\n+    string host = rpcconnectOpt();\n+    ostringstream out; out << rpcportOpt(); string port = out.str();\n #ifdef USE_SSL\n     asio::io_service io_service;\n     ssl::context context(io_service, ssl::context::sslv23);\n     context.set_options(ssl::context::no_sslv2);\n     SSLStream sslStream(io_service, context);\n     SSLIOStreamDevice d(sslStream, fUseSSL);\n     iostreams::stream<SSLIOStreamDevice> stream(d);\n-    if (!d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", \"8332\")))\n+    if (!d.connect(host, port))\n         throw runtime_error(\"couldn't connect to server\");\n #else\n     if (fUseSSL)\n         throw runtime_error(\"-rpcssl=1, but bitcoin compiled without full openssl libraries.\");\n \n-    ip::tcp::iostream stream(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", \"8332\"));\n+    ip::tcp::iostream stream(host, port);\n     if (stream.fail())\n         throw runtime_error(\"couldn't connect to server\");\n #endif\n \n \n     // HTTP basic authentication\n-    string strUserPass64 = EncodeBase64(mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"]);\n+    string strUserPass64 = EncodeBase64(rpcuserOpt() + \":\" + rpcpasswordOpt());\n     map<string, string> mapRequestHeaders;\n     mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + strUserPass64;\n "
      },
      {
        "sha": "f975326a03133786d138310a9f6af21c9d003a3e",
        "filename": "src/ui.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/ui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/ui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.cpp?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -15,6 +15,9 @@\n using namespace std;\n using namespace boost;\n \n+option<bool> minOpt(\"ui\", \"show\", \"min\", false, true, \"\", _(\"Start minimized\"));\n+option<bool> minimizetotrayOpt(\"ui\", \"hide\", \"minimizetotray\", false, true);\n+\n \n DEFINE_EVENT_TYPE(wxEVT_UITHREADCALL)\n \n@@ -406,7 +409,7 @@ void CMainFrame::OnIconize(wxIconizeEvent& event)\n     if (!event.Iconized())\n         fClosedToTray = false;\n #if defined(__WXGTK__) || defined(__WXMAC_OSX__)\n-    if (GetBoolArg(\"-minimizetotray\")) {\n+    if (minimizetotrayOpt()) {\n #endif\n     // The tray icon sometimes disappears on ubuntu karmic\n     // Hiding the taskbar button doesn't work cleanly on ubuntu lucid\n@@ -1655,7 +1658,7 @@ COptionsDialog::COptionsDialog(wxWindow* parent) : COptionsDialogBase(parent)\n #endif\n #if defined(__WXGTK__) || defined(__WXMAC_OSX__)\n     m_checkBoxStartOnSystemStartup->SetLabel(_(\"&Start Bitcoin on window system startup\"));\n-    if (!GetBoolArg(\"-minimizetotray\"))\n+    if (!minimizetotrayOpt())\n     {\n         // Minimize to tray is just too buggy on Linux\n         fMinimizeToTray = false;\n@@ -2752,10 +2755,10 @@ wxMenu* CMyTaskBarIcon::CreatePopupMenu()\n void CreateMainWindow()\n {\n     pframeMain = new CMainFrame(NULL);\n-    if (GetBoolArg(\"-min\"))\n+    if (minOpt())\n         pframeMain->Iconize(true);\n #if defined(__WXGTK__) || defined(__WXMAC_OSX__)\n-    if (!GetBoolArg(\"-minimizetotray\"))\n+    if (!minimizetotrayOpt())\n         fMinimizeToTray = false;\n #endif\n     pframeMain->Show(true);  // have to show first to get taskbar button to hide"
      },
      {
        "sha": "820ebbedf82f976ce084e304c0a2267c627341ff",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 122,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -3,31 +3,25 @@\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n #include \"headers.h\"\n #include \"strlcpy.h\"\n-#include <boost/program_options/detail/config_file.hpp>\n-#include <boost/program_options/parsers.hpp>\n #include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n #include <boost/interprocess/sync/interprocess_mutex.hpp>\n #include <boost/interprocess/sync/interprocess_recursive_mutex.hpp>\n-#include <boost/foreach.hpp>\n \n using namespace std;\n using namespace boost;\n \n-map<string, string> mapArgs;\n-map<string, vector<string> > mapMultiArgs;\n bool fDebug = false;\n bool fPrintToConsole = false;\n bool fPrintToDebugger = false;\n-char pszSetDataDir[MAX_PATH] = \"\";\n+string strDataDir = \"\";\n+string strConfigFile = \"\";\n bool fRequestShutdown = false;\n bool fShutdown = false;\n bool fDaemon = false;\n bool fServer = false;\n bool fCommandLine = false;\n string strMiscWarning;\n bool fTestNet = false;\n-bool fNoListen = false;\n bool fLogTimestamps = false;\n \n \n@@ -173,7 +167,7 @@ inline int OutputDebugStringF(const char* pszFormat, ...)\n         if (!fileout)\n         {\n             char pszFile[MAX_PATH+100];\n-            GetDataDir(pszFile);\n+            strlcpy(pszFile, strDataDir.c_str(), sizeof(pszFile));\n             strlcat(pszFile, \"/debug.log\", sizeof(pszFile));\n             fileout = fopen(pszFile, \"a\");\n             if (fileout) setbuf(fileout, NULL); // unbuffered\n@@ -388,7 +382,7 @@ bool ParseMoney(const char* pszIn, int64& nRet)\n     for (; *p; p++)\n         if (!isspace(*p))\n             return false;\n-    if (strWhole.size() > 14)\n+    if (strWhole.size() > 10)\n         return false;\n     if (nUnits < 0 || nUnits > COIN)\n         return false;\n@@ -445,33 +439,6 @@ vector<unsigned char> ParseHex(const string& str)\n }\n \n \n-void ParseParameters(int argc, char* argv[])\n-{\n-    mapArgs.clear();\n-    mapMultiArgs.clear();\n-    for (int i = 1; i < argc; i++)\n-    {\n-        char psz[10000];\n-        strlcpy(psz, argv[i], sizeof(psz));\n-        char* pszValue = (char*)\"\";\n-        if (strchr(psz, '='))\n-        {\n-            pszValue = strchr(psz, '=');\n-            *pszValue++ = '\\0';\n-        }\n-        #ifdef __WXMSW__\n-        _strlwr(psz);\n-        if (psz[0] == '/')\n-            psz[0] = '-';\n-        #endif\n-        if (psz[0] != '-')\n-            break;\n-        mapArgs[psz] = pszValue;\n-        mapMultiArgs[psz].push_back(pszValue);\n-    }\n-}\n-\n-\n const char* wxGetTranslation(const char* pszEnglish)\n {\n #ifdef GUI\n@@ -675,97 +642,14 @@ string GetDefaultDataDir()\n #endif\n }\n \n-void GetDataDir(char* pszDir)\n-{\n-    // pszDir must be at least MAX_PATH length.\n-    int nVariation;\n-    if (pszSetDataDir[0] != 0)\n-    {\n-        strlcpy(pszDir, pszSetDataDir, MAX_PATH);\n-        nVariation = 0;\n-    }\n-    else\n-    {\n-        // This can be called during exceptions by printf, so we cache the\n-        // value so we don't have to do memory allocations after that.\n-        static char pszCachedDir[MAX_PATH];\n-        if (pszCachedDir[0] == 0)\n-            strlcpy(pszCachedDir, GetDefaultDataDir().c_str(), sizeof(pszCachedDir));\n-        strlcpy(pszDir, pszCachedDir, MAX_PATH);\n-        nVariation = 1;\n-    }\n-    if (fTestNet)\n-    {\n-        char* p = pszDir + strlen(pszDir);\n-        if (p > pszDir && p[-1] != '/' && p[-1] != '\\\\')\n-            *p++ = '/';\n-        strcpy(p, \"testnet\");\n-        nVariation += 2;\n-    }\n-    static bool pfMkdir[4];\n-    if (!pfMkdir[nVariation])\n-    {\n-        pfMkdir[nVariation] = true;\n-        boost::filesystem::create_directory(pszDir);\n-    }\n-}\n-\n string GetDataDir()\n {\n-    char pszDir[MAX_PATH];\n-    GetDataDir(pszDir);\n-    return pszDir;\n+    return strDataDir;\n }\n \n string GetConfigFile()\n {\n-    namespace fs = boost::filesystem;\n-    fs::path pathConfig(GetArg(\"-conf\", \"bitcoin.conf\"));\n-    if (!pathConfig.is_complete())\n-        pathConfig = fs::path(GetDataDir()) / pathConfig;\n-    return pathConfig.string();\n-}\n-\n-void ReadConfigFile(map<string, string>& mapSettingsRet,\n-                    map<string, vector<string> >& mapMultiSettingsRet)\n-{\n-    namespace fs = boost::filesystem;\n-    namespace pod = boost::program_options::detail;\n-\n-    fs::ifstream streamConfig(GetConfigFile());\n-    if (!streamConfig.good())\n-        return;\n-\n-    set<string> setOptions;\n-    setOptions.insert(\"*\");\n-    \n-    for (pod::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)\n-    {\n-        // Don't overwrite existing settings so command line settings override bitcoin.conf\n-        string strKey = string(\"-\") + it->string_key;\n-        if (mapSettingsRet.count(strKey) == 0)\n-            mapSettingsRet[strKey] = it->value[0];\n-        mapMultiSettingsRet[strKey].push_back(it->value[0]);\n-    }\n-}\n-\n-string GetPidFile()\n-{\n-    namespace fs = boost::filesystem;\n-    fs::path pathConfig(GetArg(\"-pid\", \"bitcoind.pid\"));\n-    if (!pathConfig.is_complete())\n-        pathConfig = fs::path(GetDataDir()) / pathConfig;\n-    return pathConfig.string();\n-}\n-\n-void CreatePidFile(string pidFile, pid_t pid)\n-{\n-    FILE* file;\n-    if (file = fopen(pidFile.c_str(), \"w\"))\n-    {\n-        fprintf(file, \"%d\\n\", pid);\n-        fclose(file);\n-    }\n+    return strConfigFile;\n }\n \n int GetFilesize(FILE* file)"
      },
      {
        "sha": "bbcc36e52759f158674193d4edff34ce53ee6738",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 46,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -149,27 +149,18 @@ inline const char* _(const char* psz)\n \n \n \n-\n-\n-\n-\n-\n-\n-\n-extern std::map<std::string, std::string> mapArgs;\n-extern std::map<std::string, std::vector<std::string> > mapMultiArgs;\n extern bool fDebug;\n extern bool fPrintToConsole;\n extern bool fPrintToDebugger;\n-extern char pszSetDataDir[MAX_PATH];\n+extern std::string strDataDir;\n+extern std::string strConfigFile;\n extern bool fRequestShutdown;\n extern bool fShutdown;\n extern bool fDaemon;\n extern bool fServer;\n extern bool fCommandLine;\n extern std::string strMiscWarning;\n extern bool fTestNet;\n-extern bool fNoListen;\n extern bool fLogTimestamps;\n \n void RandAddSeed();\n@@ -187,21 +178,16 @@ bool ParseMoney(const std::string& str, int64& nRet);\n bool ParseMoney(const char* pszIn, int64& nRet);\n std::vector<unsigned char> ParseHex(const char* psz);\n std::vector<unsigned char> ParseHex(const std::string& str);\n-void ParseParameters(int argc, char* argv[]);\n const char* wxGetTranslation(const char* psz);\n bool WildcardMatch(const char* psz, const char* mask);\n bool WildcardMatch(const std::string& str, const std::string& mask);\n int GetFilesize(FILE* file);\n-void GetDataDir(char* pszDirRet);\n-std::string GetConfigFile();\n-std::string GetPidFile();\n-void CreatePidFile(std::string pidFile, pid_t pid);\n-void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n #ifdef __WXMSW__\n std::string MyGetSpecialFolderPath(int nFolder, bool fCreate);\n #endif\n std::string GetDefaultDataDir();\n std::string GetDataDir();\n+std::string GetConfigFile();\n void ShrinkDebugFile();\n int GetRandInt(int nMax);\n uint64 GetRand(uint64 nMax);\n@@ -431,35 +417,6 @@ inline bool IsSwitchChar(char c)\n #endif\n }\n \n-inline std::string GetArg(const std::string& strArg, const std::string& strDefault)\n-{\n-    if (mapArgs.count(strArg))\n-        return mapArgs[strArg];\n-    return strDefault;\n-}\n-\n-inline int64 GetArg(const std::string& strArg, int64 nDefault)\n-{\n-    if (mapArgs.count(strArg))\n-        return atoi64(mapArgs[strArg]);\n-    return nDefault;\n-}\n-\n-inline bool GetBoolArg(const std::string& strArg)\n-{\n-    if (mapArgs.count(strArg))\n-    {\n-        if (mapArgs[strArg].empty())\n-            return true;\n-        return (atoi(mapArgs[strArg]) != 0);\n-    }\n-    return false;\n-}\n-\n-\n-\n-\n-\n \n \n "
      },
      {
        "sha": "71c353c48af105f538544d6471a220216e485903",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "patch": "@@ -9,6 +9,10 @@\n using namespace std;\n \n \n+option<int64> keypoolOpt(\n+    \"wallet\", \"show\", \"keypool\", 100,\n+    \"=<n>\", _(\"Set key pool size to <n>\"));\n+\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -1044,7 +1048,7 @@ void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n         CWalletDB walletdb(strWalletFile);\n \n         // Top up key pool\n-        int64 nTargetSize = max(GetArg(\"-keypool\", 100), (int64)0);\n+        int64 nTargetSize = max(keypoolOpt(), (int64)0);\n         while (setKeyPool.size() < nTargetSize+1)\n         {\n             int64 nEnd = 1;"
      }
    ]
  },
  {
    "sha": "550b3f10043b8d31224d3d8c77a820ccb40c7d84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTBiM2YxMDA0M2I4ZDMxMjI0ZDNkOGM3N2E4MjBjY2I0MGM3ZDg0",
    "commit": {
      "author": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-09T18:04:33Z"
      },
      "committer": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-09T18:24:29Z"
      },
      "message": "Report configuration errors properly\n\nThese reports should not rely on stderr only.\nA non-null exit code is required, especially when the program is used\nto send rpc commands.",
      "tree": {
        "sha": "14fe8f5001ff63dc13c90ba2d16e53deff910079",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14fe8f5001ff63dc13c90ba2d16e53deff910079"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/550b3f10043b8d31224d3d8c77a820ccb40c7d84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/550b3f10043b8d31224d3d8c77a820ccb40c7d84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/550b3f10043b8d31224d3d8c77a820ccb40c7d84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/550b3f10043b8d31224d3d8c77a820ccb40c7d84/comments",
    "author": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f43f0d6bffd8bad4af382b1e84ed5e51f0bcb673"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 49,
      "deletions": 37
    },
    "files": [
      {
        "sha": "6d25412bbc7b22ce2faeacffadfb836b466dbcc7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 28,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/550b3f10043b8d31224d3d8c77a820ccb40c7d84/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/550b3f10043b8d31224d3d8c77a820ccb40c7d84/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=550b3f10043b8d31224d3d8c77a820ccb40c7d84",
        "patch": "@@ -29,8 +29,8 @@ option<string> datadirOpt(\n     \"=<dir>\", _(\"Specify data directory\"));\n \n option<string> confOpt(\n-    \"init\", \"show\", \"conf\", \"bitcoin.conf\", \"=<file>\",\n-    _(\"Specify configuration file\"));\n+    \"init\", \"show\", \"conf\", \"bitcoin.conf\",\n+    \"=<file>\", _(\"Specify configuration file\"));\n \n option<bool> testnetOpt(\n     \"init\", \"show\", \"testnet\", false, true,\n@@ -50,8 +50,8 @@ option<bool> daemonOpt(\n     \"\", _(\"Run in the background as a daemon and accept commands\"));\n \n option<string> pidfileOpt(\n-    \"init\", \"hide\", \"pid\", \"bitcoin.pid\", \"=<file>\",\n-    _(\"Specify pid file\"));\n+    \"init\", \"hide\", \"pid\", \"bitcoin.pid\",\n+    \"=<file>\", _(\"Specify pid file\"));\n #endif\n \n option<bool> genOpt(\n@@ -238,6 +238,8 @@ bool AppInit(int argc, char* argv[])\n \n bool AppInit2(int argc, char* argv[])\n {\n+    string strErrors;\n+\n #ifdef _MSC_VER\n     // Turn off microsoft heap dump noise\n     _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);\n@@ -266,13 +268,16 @@ bool AppInit2(int argc, char* argv[])\n     //\n \n     // Parse command line options\n-    if (!ParseCommandLine(argc, argv))\n-        return false;\n+    if (!ParseCommandLine(argc, argv, strErrors))\n+    {\n+        cerr << strErrors << endl;\n+        exit(1);\n+    }\n \n     if (+helpOpt)\n     {\n         PrintHelp();\n-        return false;\n+        exit(0);\n     }\n \n     // Compute pathDataDir and pathConfigFile from command line\n@@ -284,22 +289,27 @@ bool AppInit2(int argc, char* argv[])\n     strConfigFile = pathConfigFile.string();\n \n     if (+confOpt && !fs::exists(pathConfigFile)) {\n-        cerr << _(\"Error: Specified configuration file does not exist\") << endl;\n-        return false;\n+        strErrors += string() + _(\"Error: Specified configuration file does not exist\");\n+        wxMessageBox(strErrors, \"Bitcoin\");\n+        exit(1);\n     }\n \n     // Parse configuration file\n-    if (!UpdateConfig(true))\n-        return false;\n+    if (!UpdateConfig(strErrors))\n+    {\n+        wxMessageBox(strErrors, \"Bitcoin\");\n+        exit(1);\n+    }\n \n     // Update datadir in case it was defined in config file\n     if (+datadirOpt)\n     {\n         pathDataDir = fs::system_complete(datadirOpt());\n         if (!fs::is_directory(pathDataDir))\n         {\n-            cerr << _(\"Error: Specified directory does not exist\") << endl;\n-            return false;\n+            strErrors += string() + _(\"Error: Specified directory does not exist\");\n+            wxMessageBox(strErrors, \"Bitcoin\");\n+            exit(1);\n         }\n     }\n \n@@ -447,7 +457,6 @@ bool AppInit2(int argc, char* argv[])\n     }\n \n     // Bind to the port early so we can tell if another instance is already running.\n-    string strErrors;\n     if (!BindListenPort(strErrors))\n     {\n         wxMessageBox(strErrors, \"Bitcoin\");\n@@ -606,12 +615,26 @@ bool AppInit2(int argc, char* argv[])\n }\n \n \n-bool UpdateConfig(bool messages)\n+bool UpdateConfig(string &strError)\n {\n \n-    if (!ParseConfigFile())\n+    if (!ParseConfigFile(strError))\n         return false;\n \n+    if (+proxyOpt)\n+    {\n+        CAddress address(proxyOpt());\n+        if (!address.IsValid())\n+        {\n+            strError += _(\"Invalid -proxy address\");\n+            return false;\n+        }\n+        fUseProxy = true;\n+        addrProxy = address;\n+    }\n+    else\n+        fUseProxy = false;\n+\n     fPrintToConsole = printtoconsoleOpt();\n     fPrintToDebugger = printtodebuggerOpt();\n     fLogTimestamps = logtimestampsOpt();\n@@ -620,18 +643,6 @@ bool UpdateConfig(bool messages)\n \n     fGenerateBitcoins = genOpt();\n \n-    fUseProxy = false;\n-    if (+proxyOpt)\n-    {\n-        fUseProxy = true;\n-        addrProxy = CAddress(proxyOpt());\n-        if (!addrProxy.IsValid() && messages)\n-        {\n-            wxMessageBox(_(\"Invalid -proxy address\"), \"Bitcoin\");\n-            return false;\n-        }\n-    }\n-\n #ifdef USE_UPNP\n     fUseUPnP = fHaveUPnP && upnpOpt();\n #endif"
      },
      {
        "sha": "63985e4a937a9c7aba15211d662915497efed27e",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/550b3f10043b8d31224d3d8c77a820ccb40c7d84/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/550b3f10043b8d31224d3d8c77a820ccb40c7d84/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=550b3f10043b8d31224d3d8c77a820ccb40c7d84",
        "patch": "@@ -7,6 +7,6 @@\n void Shutdown(void* parg);\n bool AppInit(int argc, char* argv[]);\n bool AppInit2(int argc, char* argv[]);\n-bool UpdateConfig(bool messages);\n+bool UpdateConfig(std::string &strErrors);\n \n #endif"
      },
      {
        "sha": "803c78dfc1b9bac05d30b3ffe22229b2be69b0a8",
        "filename": "src/option.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/550b3f10043b8d31224d3d8c77a820ccb40c7d84/src/option.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/550b3f10043b8d31224d3d8c77a820ccb40c7d84/src/option.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/option.cpp?ref=550b3f10043b8d31224d3d8c77a820ccb40c7d84",
        "patch": "@@ -123,7 +123,7 @@ pair<string, string> CustomOptionParser(const string& s)\n \n }\n \n-bool ParseCommandLine(int argc, char **argv)\n+bool ParseCommandLine(int argc, char **argv, string &strErrors)\n {\n     int opt_style =\n         po::command_line_style::allow_long |\n@@ -135,14 +135,14 @@ bool ParseCommandLine(int argc, char **argv)\n     }\n     catch (po::error &e)\n     {\n-        cerr << _(\"Error on command line:\") << \" \" << e.what() << endl;\n+        strErrors += string() + _(\"Error on command line:\") + \" \" + e.what();\n         return false;\n     }\n     po::notify(vmBase);\n     return true;\n }\n \n-bool ParseConfigFile()\n+bool ParseConfigFile(string &strErrors)\n {\n     fs::ifstream streamConfig(strConfigFile);\n     po::variables_map vm = vmBase; // do not override cmd line\n@@ -152,7 +152,7 @@ bool ParseConfigFile()\n     }\n     catch (po::error &e)\n     {\n-        cerr << _(\"Error in configuration file:\") << \" \" << e.what() << endl;\n+        strErrors += string() + _(\"Error in configuration file:\") + \" \" + e.what();\n         return false;\n     }\n     po::notify(vm);"
      },
      {
        "sha": "ca045bb59d72bdbb0116d875c4f32fbfdbd0e0b8",
        "filename": "src/option.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/550b3f10043b8d31224d3d8c77a820ccb40c7d84/src/option.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/550b3f10043b8d31224d3d8c77a820ccb40c7d84/src/option.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/option.h?ref=550b3f10043b8d31224d3d8c77a820ccb40c7d84",
        "patch": "@@ -61,7 +61,7 @@ extern template class option<std::vector<std::string> >;\n \n std::string GetOptionsDescriptions(const std::string &groupMasks, const std::string &classMasks, bool showgroups=false);\n \n-bool ParseCommandLine(int argc, char **argv);\n-bool ParseConfigFile();\n+bool ParseCommandLine(int argc, char **argv, std::string &strErrors);\n+bool ParseConfigFile(std::string &strErrors);\n \n #endif"
      },
      {
        "sha": "8e6009c8e33c32757ba414810c18dc9e1e63d103",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/550b3f10043b8d31224d3d8c77a820ccb40c7d84/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/550b3f10043b8d31224d3d8c77a820ccb40c7d84/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=550b3f10043b8d31224d3d8c77a820ccb40c7d84",
        "patch": "@@ -212,10 +212,11 @@ Value reloadconfig(const Array& params, bool fHelp)\n             \"reloadconfig\\n\"\n             \"Reload bitcoin server configuration files.\");\n \n-    if (UpdateConfig(false))\n+    string strErrors;\n+    if (UpdateConfig(strErrors))\n         return \"configuration file has been reloaded\";\n     else\n-        return \"error: configuration file has not been reloaded\";\n+        return strErrors;\n }\n \n Value getblockcount(const Array& params, bool fHelp)"
      }
    ]
  },
  {
    "sha": "c24791ee1a68f978725d30384d31a2eeef854b52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjQ3OTFlZTFhNjhmOTc4NzI1ZDMwMzg0ZDMxYTJlZWVmODU0YjUy",
    "commit": {
      "author": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-11T18:33:19Z"
      },
      "committer": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-11T18:33:19Z"
      },
      "message": "Fix and clarify buffer size units",
      "tree": {
        "sha": "7247c19e69a3a08475dd0666b8194d64988ededd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7247c19e69a3a08475dd0666b8194d64988ededd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c24791ee1a68f978725d30384d31a2eeef854b52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c24791ee1a68f978725d30384d31a2eeef854b52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c24791ee1a68f978725d30384d31a2eeef854b52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c24791ee1a68f978725d30384d31a2eeef854b52/comments",
    "author": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "550b3f10043b8d31224d3d8c77a820ccb40c7d84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/550b3f10043b8d31224d3d8c77a820ccb40c7d84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/550b3f10043b8d31224d3d8c77a820ccb40c7d84"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "79043482e0198a1e9f290bba01dd6f50a6a17d30",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c24791ee1a68f978725d30384d31a2eeef854b52/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c24791ee1a68f978725d30384d31a2eeef854b52/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c24791ee1a68f978725d30384d31a2eeef854b52",
        "patch": "@@ -2059,7 +2059,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             CBlock block;\n             block.ReadFromDisk(pindex, true);\n             nBytes += block.GetSerializeSize(SER_NETWORK);\n-            if (--nLimit <= 0 || nBytes >= maxsendbufferOpt()/2)\n+            if (--nLimit <= 0 || nBytes >= 1000*maxsendbufferOpt()/2)\n             {\n                 // When this block is requested, we'll send an inv that'll make them\n                 // getblocks the next batch of inventory."
      },
      {
        "sha": "4edf86b10c16331b31fb0c0e0ca8fa6f2817f211",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c24791ee1a68f978725d30384d31a2eeef854b52/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c24791ee1a68f978725d30384d31a2eeef854b52/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c24791ee1a68f978725d30384d31a2eeef854b52",
        "patch": "@@ -54,9 +54,10 @@ option<int> portOpt(\"net\", \"hide\", \"port\", 0);\n option<bool> noircOpt(\"net\", \"hide\", \"noirc\", false, true);\n option<int> dropmessagestestOpt(\"net\", \"test\", \"dropmessagestest\", 0);\n option<int> maxconnectionsOpt(\"net\", \"hide\", \"maxconnections\", 125);\n-option<int> maxreceivebufferOpt(\"net\", \"hide\", \"maxreceivebuffer\", 10*1000);\n-option<int> maxsendbufferOpt(\"net\", \"hide\", \"maxsendbuffer\", 10*1000);\n-\n+option<int> maxreceivebufferOpt(\"net\", \"hide\", \"maxreceivebuffer\", 10*1000,\n+    \"=<n>\", \"Size in kilobytes\");\n+option<int> maxsendbufferOpt(\"net\", \"hide\", \"maxsendbuffer\", 10*1000,\n+    \"=<n>\", \"Size in kilobytes\");\n \n void ThreadMessageHandler2(void* parg);\n void ThreadSocketHandler2(void* parg);"
      }
    ]
  },
  {
    "sha": "95d38e82bf93882d17f7b77406b0d9a24bf95cb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWQzOGU4MmJmOTM4ODJkMTdmN2I3NzQwNmIwZDlhMjRiZjk1Y2I0",
    "commit": {
      "author": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-11T18:46:12Z"
      },
      "committer": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-11T18:59:03Z"
      },
      "message": "More detailed option documentation",
      "tree": {
        "sha": "923aed8549cbc6662dce8e264b750b798bbfae79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/923aed8549cbc6662dce8e264b750b798bbfae79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95d38e82bf93882d17f7b77406b0d9a24bf95cb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d38e82bf93882d17f7b77406b0d9a24bf95cb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95d38e82bf93882d17f7b77406b0d9a24bf95cb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d38e82bf93882d17f7b77406b0d9a24bf95cb4/comments",
    "author": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c24791ee1a68f978725d30384d31a2eeef854b52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c24791ee1a68f978725d30384d31a2eeef854b52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c24791ee1a68f978725d30384d31a2eeef854b52"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 30,
      "deletions": 16
    },
    "files": [
      {
        "sha": "032a5e340520947940119598eeabc283b4293a10",
        "filename": "src/option.h",
        "status": "modified",
        "additions": 30,
        "deletions": 16,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95d38e82bf93882d17f7b77406b0d9a24bf95cb4/src/option.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95d38e82bf93882d17f7b77406b0d9a24bf95cb4/src/option.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/option.h?ref=95d38e82bf93882d17f7b77406b0d9a24bf95cb4",
        "patch": "@@ -5,22 +5,36 @@\n #ifndef BITCOIN_OPTION_H\n #define BITCOIN_OPTION_H\n \n-// Possible uses of\n-//\n-//  option<T> fooOpt(\n-//      \"group\", \"class\", \"foo\", default_val, [implicit_val,]\n-//      \"=<num>\", _(\"Description of this option\"));\n-//\n-// are\n-//\n-//  T value = fooOpt();         (get the current value)\n-//  T value = fooOpt[default];  (use a special case default value)\n-//  if (+fooOpt) { ... }        (was the option explicitely defined by the user)\n-//\n-// and the help message shows:\n-//\n-//  Options:\n-//    -foo=<num>        Description of this option\n+/*\n+\n+Possible uses of\n+\n+ option<T> fooOpt(\n+     \"group\", option_class, \"foo\", default_val, [implicit_val,]\n+     \"=<num>\", _(\"Description of this option\"));\n+\n+are\n+\n+ T value = fooOpt();         (get the current value)\n+ T value = fooOpt[default];  (use a special case default value)\n+ if (+fooOpt) { ... }        (has the option been specified by the user)\n+\n+\u03a4he user can assign a value to an option through the command line\n+(-foo=value) or from the configuration file (foo=value). An option\n+can be specified without an explicit value if an implicit_val field is\n+provided in its definition.\n+\n+The help message for this option is formatted as follows:\n+\n+ Options:\n+   -foo=<num>        Description of this option\n+\n+In-use option_classes are:\n+  \"show\": may appear on main help message\n+  \"hide\": listed only using -help=allopts\n+  \"test\" or other: never listed\n+\n+*/\n \n class money\n {"
      }
    ]
  },
  {
    "sha": "43288bea72b1e6607a6bf110b95efd4443e1427f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzI4OGJlYTcyYjFlNjYwN2E2YmYxMTBiOTVlZmQ0NDQzZTE0Mjdm",
    "commit": {
      "author": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-13T14:19:06Z"
      },
      "committer": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-13T14:19:06Z"
      },
      "message": "Merge branch 'master' of git://github.com/bitcoin/bitcoin into program-options\n\nConflicts:\n\tsrc/init.cpp\n\tsrc/makefile.linux-mingw\n\tsrc/makefile.mingw\n\tsrc/makefile.osx\n\tsrc/makefile.unix\n\tsrc/rpc.cpp\n\tsrc/util.cpp\n\tsrc/wallet.cpp",
      "tree": {
        "sha": "ac0839cdb22a4dca9f4b0bbf7a9491600b0f3613",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac0839cdb22a4dca9f4b0bbf7a9491600b0f3613"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43288bea72b1e6607a6bf110b95efd4443e1427f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43288bea72b1e6607a6bf110b95efd4443e1427f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/43288bea72b1e6607a6bf110b95efd4443e1427f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43288bea72b1e6607a6bf110b95efd4443e1427f/comments",
    "author": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95d38e82bf93882d17f7b77406b0d9a24bf95cb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d38e82bf93882d17f7b77406b0d9a24bf95cb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95d38e82bf93882d17f7b77406b0d9a24bf95cb4"
      },
      {
        "sha": "225e60ce34d8756f23e7e76b545131601f60e1dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/225e60ce34d8756f23e7e76b545131601f60e1dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/225e60ce34d8756f23e7e76b545131601f60e1dc"
      }
    ],
    "stats": {
      "total": 2382,
      "additions": 1918,
      "deletions": 464
    },
    "files": [
      {
        "sha": "bfeb2f8de41474bf7daf4e5f58461e55c99017a7",
        "filename": "contrib/Bitcoin.app/Contents/Info.plist",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/contrib/Bitcoin.app/Contents/Info.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/contrib/Bitcoin.app/Contents/Info.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/Bitcoin.app/Contents/Info.plist?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -17,11 +17,11 @@\n \t<key>CFBundlePackageType</key>\n \t<string>APPL</string>\n \t<key>CFBundleShortVersionString</key>\n-\t<string>0.3.24</string>\n+\t<string>0.3.25</string>\n \t<key>CFBundleSignature</key>\n \t<string>????</string>\n \t<key>CFBundleVersion</key>\n-\t<string>324</string>\n+\t<string>325</string>\n \t<key>LSMinimumSystemVersion</key>\n \t<string>10.5</string>\n \t<key>CFBundleIconFile</key>"
      },
      {
        "sha": "f72bca01f74c92f1d6b96add41804d0d11f89eb4",
        "filename": "doc/README",
        "status": "modified",
        "additions": 44,
        "deletions": 1,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/doc/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/doc/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin 0.3.24 BETA\n+Bitcoin 0.3.25 BETA\n \n Copyright (c) 2009-2011 Bitcoin Developers\n Distributed under the MIT/X11 software license, see the accompanying\n@@ -24,6 +24,49 @@ Unpack the files into a directory and run:\n  bin/64/bitcoin (GUI, 64-bit)\n  bin/64/bitcoind (headless, 64-bit)\n \n+\n+Wallet Encryption\n+-----------------\n+Bitcoin supports native wallet encryption so that people who steal your\n+wallet file don't automatically get access to all of your Bitcoins.\n+In order to enable this feature, chose \"Encrypt Wallet\" from the\n+Options menu.  You will be prompted to enter a passphrase, which\n+will be used as the key to encrypt your wallet and will be needed\n+every time you wish to send Bitcoins.  If you lose this passphrase,\n+you will lose access to spend all of the bitcoins in your wallet,\n+no one, not even the Bitcoin developers can recover your Bitcoins.\n+This means you are responsible for your own security, store your\n+password in a secure location and do not forget it.\n+\n+Remember that the encryption built into bitcoin only encrypts the\n+actual keys which are required to send your bitcoins, not the full\n+wallet.  This means that someone who steals your wallet file will\n+be able to see all the addresses which belong to you, as well as the\n+relevant transactions, you are only protected from someone spending\n+your coins.\n+\n+It is recommended that you backup your wallet file before you\n+encrypt your wallet.  To do this, close the Bitcoin client and\n+copy the wallet.dat file from ~/.bitcoin/ on Linux, /Users/(user\n+name)/Application Support/Bitcoin/ on Mac OSX, and %APPDATA%/Bitcoin/\n+on Windows (that is /Users/(user name)/AppData/Roaming/Bitcoin on\n+Windows Vista and 7 and /Documents and Settings/(user name)/Application\n+Data/Bitcoin on Windows XP).  Once you have copied that file to a\n+safe location, reopen the Bitcoin client and Encrypt your wallet.\n+If everything goes fine, delete the backup and enjoy your encrypted\n+wallet.  Note that once you encrypt your wallet, you will never be\n+able to go back to a version of the Bitcoin client older than 0.4.\n+\n+Keep in mind that you are always responsible for you own security.\n+All it takes is a slightly more advanced wallet-stealing trojan which\n+installs a keylogger to steal your wallet passphrase as you enter it\n+in addition to your wallet file and you have lost all your Bitcoins.\n+Wallet encryption cannot keep you safe if you do not practice\n+good security, such as running up-to-date antivirus software, only\n+entering your wallet passphrase in the Bitcoin client and using the\n+same passphrase only as your wallet passphrase.\n+\n+\n See the documentation at the bitcoin wiki:\n   https://en.bitcoin.it/wiki/Main_Page\n "
      },
      {
        "sha": "e715b320685e8b4c96bdf5597688da62619be474",
        "filename": "doc/README_windows.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/doc/README_windows.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/doc/README_windows.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_windows.txt?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin 0.3.24 BETA\r\n+Bitcoin 0.3.25 BETA\r\n \r\n Copyright (c) 2009-2011 Bitcoin Developers\r\n Distributed under the MIT/X11 software license, see the accompanying\r"
      },
      {
        "sha": "b61914cb4b3824e907dfa2c58acfe16a8af0467d",
        "filename": "locale/sv/LC_MESSAGES/bitcoin.mo",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/locale/sv/LC_MESSAGES/bitcoin.mo",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/locale/sv/LC_MESSAGES/bitcoin.mo",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/locale/sv/LC_MESSAGES/bitcoin.mo?ref=43288bea72b1e6607a6bf110b95efd4443e1427f"
      },
      {
        "sha": "dc635f3139a972f3fe982672f12a4e9eed4dd1fb",
        "filename": "locale/sv/LC_MESSAGES/bitcoin.po",
        "status": "modified",
        "additions": 234,
        "deletions": 239,
        "changes": 473,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/locale/sv/LC_MESSAGES/bitcoin.po",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/locale/sv/LC_MESSAGES/bitcoin.po",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/locale/sv/LC_MESSAGES/bitcoin.po?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -2,246 +2,214 @@ msgid \"\"\n msgstr \"\"\n \"Project-Id-Version: \\n\"\n \"Report-Msgid-Bugs-To: \\n\"\n-\"POT-Creation-Date: 2011-06-11 21:58+0100\\n\"\n-\"PO-Revision-Date: 2011-06-14 09:01+0100\\n\"\n+\"POT-Creation-Date: 2011-07-03 10:40+0100\\n\"\n+\"PO-Revision-Date: 2011-07-03 15:13+0100\\n\"\n \"Last-Translator: Codler <github>\\n\"\n \"Language-Team: \\n\"\n \"MIME-Version: 1.0\\n\"\n \"Content-Type: text/plain; charset=UTF-8\\n\"\n \"Content-Transfer-Encoding: 8bit\\n\"\n \"X-Poedit-KeywordsList: _;gettext;gettext_noop\\n\"\n \"X-Poedit-Basepath: .\\n\"\n-\"X-Poedit-Bookmarks: 35,145,-1,-1,-1,-1,-1,-1,-1,-1\\n\"\n \"X-Poedit-SearchPath-0: ../../..\\n\"\n \n-#: ../../../init.cpp:141\n+#: ../../../init.cpp:162\n msgid \"Bitcoin version\"\n msgstr \"Bitcoin version\"\n \n-#: ../../../init.cpp:142\n+#: ../../../init.cpp:163\n msgid \"Usage:\"\n msgstr \"Anv\u00e4ndning:\"\n \n-#: ../../../init.cpp:144\n+#: ../../../init.cpp:165\n msgid \"Send command to -server or bitcoind\\n\"\n msgstr \"Skicka kommando till -server eller bitcoind\\n\"\n \n-#: ../../../init.cpp:145\n+#: ../../../init.cpp:166\n msgid \"List commands\\n\"\n msgstr \"Lista kommandon\\n\"\n \n-#: ../../../init.cpp:146\n+#: ../../../init.cpp:167\n msgid \"Get help for a command\\n\"\n msgstr \"F\u00e5 hj\u00e4lp om kommandon\\n\"\n \n-#: ../../../init.cpp:147\n+#: ../../../init.cpp:168\n msgid \"Options:\\n\"\n msgstr \"Val:\\n\"\n \n-#: ../../../init.cpp:148\n+#: ../../../init.cpp:169\n msgid \"Specify configuration file (default: bitcoin.conf)\\n\"\n msgstr \"Ange konfigurationsfil (standard: bitcoin.conf)\\n\"\n \n-#: ../../../init.cpp:149\n+#: ../../../init.cpp:170\n msgid \"Specify pid file (default: bitcoind.pid)\\n\"\n msgstr \"Ange pid-fil (standard: bitcoind.pid)\\n\"\n \n-#: ../../../init.cpp:150\n+#: ../../../init.cpp:171\n msgid \"Generate coins\\n\"\n msgstr \"Generera mynt\\n\"\n \n-#: ../../../init.cpp:151\n+#: ../../../init.cpp:172\n msgid \"Don't generate coins\\n\"\n msgstr \"Generera inte mynt\\n\"\n \n-#: ../../../init.cpp:152\n+#: ../../../init.cpp:173\n msgid \"Start minimized\\n\"\n msgstr \"Starta minimerad\\n\"\n \n-#: ../../../init.cpp:153\n+#: ../../../init.cpp:174\n msgid \"Specify data directory\\n\"\n msgstr \"Ange data mappen\\n\"\n \n-#: ../../../init.cpp:154\n+#: ../../../init.cpp:175\n+msgid \"Specify connection timeout (in milliseconds)\\n\"\n+msgstr \"Ange timeout f\u00f6r anslutning (i millisekunder)\\n\"\n+\n+#: ../../../init.cpp:176\n msgid \"Connect through socks4 proxy\\n\"\n msgstr \"Anslut via socks4 proxy\\n\"\n \n-#: ../../../init.cpp:155\n+#: ../../../init.cpp:177\n msgid \"Allow DNS lookups for addnode and connect\\n\"\n msgstr \"Till\u00e5t DNS uppslagningar f\u00f6r addnode och connect\\n\"\n \n-#: ../../../init.cpp:156\n+#: ../../../init.cpp:178\n msgid \"Add a node to connect to\\n\"\n msgstr \"L\u00e4gg till en nod att ansluta till\\n\"\n \n-#: ../../../init.cpp:157\n+#: ../../../init.cpp:179\n msgid \"Connect only to the specified node\\n\"\n msgstr \"Anslut endast till specifik nod\\n\"\n \n-#: ../../../init.cpp:158\n+#: ../../../init.cpp:180\n msgid \"Don't accept connections from outside\\n\"\n msgstr \"Acceptera ej anslutningar fr\u00e5n utsidan\\n\"\n \n-#: ../../../init.cpp:161\n+#: ../../../init.cpp:183\n msgid \"Don't attempt to use UPnP to map the listening port\\n\"\n msgstr \"F\u00f6rs\u00f6ker inte anv\u00e4nda UPnP till avslyssningsport\\n\"\n \n-#: ../../../init.cpp:163\n+#: ../../../init.cpp:185\n msgid \"Attempt to use UPnP to map the listening port\\n\"\n msgstr \"F\u00f6rs\u00f6ker anv\u00e4nda UPnP till avlyssningsport\\n\"\n \n-#: ../../../init.cpp:166\n+#: ../../../init.cpp:188\n msgid \"Fee per KB to add to transactions you send\\n\"\n msgstr \"Avgift per KB som l\u00e4ggs p\u00e5 transaktionen n\u00e4r du s\u00e4nder\\n\"\n \n-#: ../../../init.cpp:168\n+#: ../../../init.cpp:190\n msgid \"Accept command line and JSON-RPC commands\\n\"\n msgstr \"Accepterar kommandorad och JSON-RPC kommando\\n\"\n \n-#: ../../../init.cpp:171\n+#: ../../../init.cpp:193\n msgid \"Run in the background as a daemon and accept commands\\n\"\n msgstr \"K\u00f6r i bakgrund som daemon och accepterar kommando\\n\"\n \n-#: ../../../init.cpp:173\n+#: ../../../init.cpp:195\n msgid \"Use the test network\\n\"\n msgstr \"Anv\u00e4nd test n\u00e4tverk\\n\"\n \n-#: ../../../init.cpp:174\n+#: ../../../init.cpp:196\n msgid \"Username for JSON-RPC connections\\n\"\n msgstr \"Anv\u00e4ndarnamn till JSON-RPC anslutning\\n\"\n \n-#: ../../../init.cpp:175\n+#: ../../../init.cpp:197\n msgid \"Password for JSON-RPC connections\\n\"\n msgstr \"L\u00f6senord till JSON-RPC anslutning\\n\"\n \n-#: ../../../init.cpp:176\n+#: ../../../init.cpp:198\n msgid \"Listen for JSON-RPC connections on <port> (default: 8332)\\n\"\n msgstr \"Lyssnar p\u00e5 JSON-RPC anslutningar p\u00e5 <port> (standard: 8332)\\n\"\n \n-#: ../../../init.cpp:177\n+#: ../../../init.cpp:199\n msgid \"Allow JSON-RPC connections from specified IP address\\n\"\n msgstr \"Till\u00e5t JSON-RPC anslutningar fr\u00e5n specifik IP-adress\\n\"\n \n-#: ../../../init.cpp:178\n+#: ../../../init.cpp:200\n msgid \"Send commands to node running on <ip> (default: 127.0.0.1)\\n\"\n msgstr \"Skicka kommando till noden som k\u00f6rs p\u00e5 <ip> (standard: 127.0.0.1)\\n\"\n \n-#: ../../../init.cpp:179\n+#: ../../../init.cpp:201\n msgid \"Set key pool size to <n> (default: 100)\\n\"\n msgstr \"S\u00e4tt nyckel pool storlek till <n> (standard: 100)\\n\"\n \n-#: ../../../init.cpp:180\n+#: ../../../init.cpp:202\n msgid \"Rescan the block chain for missing wallet transactions\\n\"\n msgstr \"Scanna om block kedja efter saknade pl\u00e5nbokstransaktioner\\n\"\n \n-#: ../../../init.cpp:184\n+#: ../../../init.cpp:206\n msgid \"\"\n \"\\n\"\n \"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\\n\"\n msgstr \"\"\n \"\\n\"\n \"SSL val: (Se p\u00e5 Bitcoin Wiki f\u00f6r SSL installation instruktioner)\\n\"\n \n-#: ../../../init.cpp:185\n+#: ../../../init.cpp:207\n msgid \"Use OpenSSL (https) for JSON-RPC connections\\n\"\n msgstr \"Anv\u00e4nd OpenSSL (https) till JSON-RPC anslutningar\\n\"\n \n-#: ../../../init.cpp:186\n+#: ../../../init.cpp:208\n msgid \"Server certificate file (default: server.cert)\\n\"\n msgstr \"Server certifikatfil (standard: server.cert)\\n\"\n \n-#: ../../../init.cpp:187\n+#: ../../../init.cpp:209\n msgid \"Server private key (default: server.pem)\\n\"\n msgstr \"Server privat nyckel (standard: server.pem)\\n\"\n \n-#: ../../../init.cpp:188\n+#: ../../../init.cpp:210\n msgid \"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\\n\"\n msgstr \"Acceptabla krypteringar (standard: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\\n\"\n \n-#: ../../../init.cpp:192\n+#: ../../../init.cpp:214\n msgid \"This help message\\n\"\n msgstr \"Detta hj\u00e4lpmeddelande\\n\"\n \n-#: ../../../init.cpp:329\n+#: ../../../init.cpp:351\n #, c-format\n msgid \"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"\n msgstr \"Kan inte s\u00e4tta l\u00e5s p\u00e5 data mappen %s.  Bitcoin k\u00f6rs troligen redan.\"\n \n-#: ../../../init.cpp:355\n+#: ../../../init.cpp:377\n msgid \"Error loading addr.dat      \\n\"\n msgstr \"Fel vid laddning av addr.dat      \\n\"\n \n-#: ../../../init.cpp:361\n+#: ../../../init.cpp:383\n msgid \"Error loading blkindex.dat      \\n\"\n msgstr \"Fel vid laddning av blkindex.dat      \\n\"\n \n-#: ../../../init.cpp:368\n+#: ../../../init.cpp:391\n msgid \"Error loading wallet.dat      \\n\"\n msgstr \"Fel vid laddning av wallet.dat      \\n\"\n \n-#: ../../../init.cpp:448\n+#: ../../../init.cpp:481\n msgid \"Invalid -proxy address\"\n msgstr \"Ogiltig -proxy adress\"\n \n-#: ../../../init.cpp:471\n+#: ../../../init.cpp:506\n msgid \"Invalid amount for -paytxfee=<amount>\"\n msgstr \"Ogiltig belopp p\u00e5 -paytxfee=<belopp>\"\n \n-#: ../../../init.cpp:475\n+#: ../../../init.cpp:510\n msgid \"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"\n msgstr \"Varning: -paytxfee \u00e4r satt v\u00e4ldigt h\u00f6gt.  Denna \u00e4r transaktionsavgiften som du kommer att betala om du skickar en transaktion.\"\n \n-#: ../../../main.cpp:1866\n+#: ../../../main.cpp:1430\n msgid \"Warning: Disk space is low  \"\n msgstr \"Varning: Diskutrymme \u00e4r l\u00e5g  \"\n \n-#: ../../../main.cpp:3999\n-#, c-format\n-msgid \"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"\n-msgstr \"Fel: Denna transaktion kr\u00e4ver en transaktionsavgift minst %s f\u00f6r dess belopp, komplexitet, eller anv\u00e4ndning av nyligen mottagna pengar  \"\n-\n-#: ../../../main.cpp:4001\n-msgid \"Error: Transaction creation failed  \"\n-msgstr \"Fel: Misslyckades att skapa transaktion  \"\n-\n-#: ../../../main.cpp:4006\n-#: ../../../ui.cpp:1951\n-#: ../../../ui.cpp:1956\n-#: ../../../ui.cpp:2102\n-#: ../../../ui.cpp:2255\n-msgid \"Sending...\"\n-msgstr \"Skickar...\"\n-\n-#: ../../../main.cpp:4010\n-msgid \"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\"\n-msgstr \"Fel: Transaktionen blev nekad.  Detta kan h\u00e4nda om n\u00e5gra av dina mynt i din pl\u00e5nbok var redan spenderad. Till exempel om du anv\u00e4nde en kopia av wallet.dat och mynten var redan spenderad i kopian, men som inte var markerad som spenderad h\u00e4r.\"\n-\n-#: ../../../main.cpp:4023\n-msgid \"Invalid amount\"\n-msgstr \"Ogiltig belopp\"\n-\n-#: ../../../main.cpp:4025\n-#: ../../../ui.cpp:2169\n-#: ../../../ui.cpp:2240\n-msgid \"Insufficient funds\"\n-msgstr \"Otillr\u00e4ckligt med pengar\"\n-\n-#: ../../../main.cpp:4030\n-msgid \"Invalid bitcoin address\"\n-msgstr \"Ogiltig bitcoin adress\"\n-\n-#: ../../../net.cpp:1505\n+#: ../../../net.cpp:1598\n #, c-format\n msgid \"Unable to bind to port %d on this computer.  Bitcoin is probably already running.\"\n msgstr \"Det gick inte att binda till port %d p\u00e5 denna dator.  Bitcoin k\u00f6rs troligen redan.\"\n \n-#: ../../../rpc.cpp:1816\n-#: ../../../rpc.cpp:1818\n+#: ../../../rpc.cpp:1828\n+#: ../../../rpc.cpp:1830\n #, c-format\n msgid \"To use the %s option\"\n msgstr \"F\u00f6r att anv\u00e4nda %s val\"\n \n-#: ../../../rpc.cpp:1820\n+#: ../../../rpc.cpp:1832\n #, c-format\n msgid \"\"\n \"Warning: %s, you must set rpcpassword=<password>\\n\"\n@@ -252,7 +220,7 @@ msgstr \"\"\n \"i konfigurationsfilen: %s\\n\"\n \"Om filen inte existerar, skapa med \u00e4gare med filbeh\u00f6righeten -readable-only.\\n\"\n \n-#: ../../../rpc.cpp:1988\n+#: ../../../rpc.cpp:2005\n #, c-format\n msgid \"\"\n \"You must set rpcpassword=<password> in the configuration file:\\n\"\n@@ -263,347 +231,360 @@ msgstr \"\"\n \"%s\\n\"\n \"Om filen inte existerar, skapa med \u00e4gare med filbeh\u00f6righete -readable-only.\"\n \n-#: ../../../ui.cpp:211\n+#: ../../../ui.cpp:216\n #, c-format\n msgid \"This transaction is over the size limit.  You can still send it for a fee of %s, which goes to the nodes that process your transaction and helps to support the network.  Do you want to pay the fee?\"\n msgstr \"Denna transaktion \u00e4r \u00f6ver storleksbegr\u00e4nsningen.  Du kan fortfarande skicka mot en avgift p\u00e5 %s, som g\u00e5r till noderna som bearbetar din transaktion och hj\u00e4lper att st\u00f6dja n\u00e4tverket. Vill du fortfarande betala avgiften?\"\n \n-#: ../../../ui.cpp:311\n+#: ../../../ui.cpp:316\n msgid \"Status\"\n msgstr \"Status\"\n \n-#: ../../../ui.cpp:312\n+#: ../../../ui.cpp:317\n msgid \"Date\"\n msgstr \"Datum\"\n \n-#: ../../../ui.cpp:313\n+#: ../../../ui.cpp:318\n msgid \"Description\"\n msgstr \"Beskrivning\"\n \n-#: ../../../ui.cpp:314\n+#: ../../../ui.cpp:319\n msgid \"Debit\"\n-msgstr \"Debitera\"\n+msgstr \"Debet\"\n \n-#: ../../../ui.cpp:315\n+#: ../../../ui.cpp:320\n msgid \"Credit\"\n-msgstr \"Kreditera\"\n+msgstr \"Kredit\"\n \n-#: ../../../ui.cpp:521\n+#: ../../../ui.cpp:526\n #, c-format\n msgid \"Open for %d blocks\"\n-msgstr \"\u00d6ppna f\u00f6r %d blocks\"\n+msgstr \"\u00d6ppen f\u00f6r %d block\"\n \n-#: ../../../ui.cpp:523\n+#: ../../../ui.cpp:528\n #, c-format\n msgid \"Open until %s\"\n msgstr \"\u00d6ppen tills %s\"\n \n-#: ../../../ui.cpp:529\n+#: ../../../ui.cpp:534\n #, c-format\n msgid \"%d/offline?\"\n msgstr \"%d/offline?\"\n \n-#: ../../../ui.cpp:531\n+#: ../../../ui.cpp:536\n #, c-format\n msgid \"%d/unconfirmed\"\n msgstr \"%d/obekr\u00e4ftade\"\n \n-#: ../../../ui.cpp:533\n+#: ../../../ui.cpp:538\n #, c-format\n msgid \"%d confirmations\"\n msgstr \"%d bekr\u00e4ftelser\"\n \n-#: ../../../ui.cpp:618\n+#: ../../../ui.cpp:623\n msgid \"Generated\"\n msgstr \"Genererad\"\n \n-#: ../../../ui.cpp:626\n-#, fuzzy, c-format\n+#: ../../../ui.cpp:631\n+#, c-format\n msgid \"Generated (%s matures in %d more blocks)\"\n-msgstr \"Genererad (%s mogna i %d fler block)\"\n+msgstr \"Genererad (%s mognar om %d block)\"\n \n-#: ../../../ui.cpp:630\n+#: ../../../ui.cpp:635\n msgid \"Generated - Warning: This block was not received by any other nodes and will probably not be accepted!\"\n msgstr \"Genererad - Varning: Denna block har inte blivit mottagen av n\u00e5gon annan nod och kommer troligtvis inte bli accepterad\"\n \n-#: ../../../ui.cpp:634\n+#: ../../../ui.cpp:639\n msgid \"Generated (not accepted)\"\n msgstr \"Genererad (ej accepterad)\"\n \n-#: ../../../ui.cpp:644\n+#: ../../../ui.cpp:649\n msgid \"From: \"\n msgstr \"Fr\u00e5n: \"\n \n-#: ../../../ui.cpp:668\n+#: ../../../ui.cpp:673\n msgid \"Received with: \"\n msgstr \"Mottagen med: \"\n \n-#: ../../../ui.cpp:714\n+#: ../../../ui.cpp:719\n msgid \"Payment to yourself\"\n msgstr \"Betalning till dig sj\u00e4lv\"\n \n-#: ../../../ui.cpp:748\n+#: ../../../ui.cpp:753\n msgid \"To: \"\n msgstr \"Till: \"\n \n-#: ../../../ui.cpp:1063\n+#: ../../../ui.cpp:1068\n msgid \"    Generating\"\n msgstr \"    Generering\"\n \n-#: ../../../ui.cpp:1065\n+#: ../../../ui.cpp:1070\n msgid \"(not connected)\"\n msgstr \"(inte ansluten)\"\n \n-#: ../../../ui.cpp:1068\n+#: ../../../ui.cpp:1073\n #, c-format\n msgid \"     %d connections     %d blocks     %d transactions\"\n msgstr \"     %d anslutningar     %d block     %d transaktioner\"\n \n-#: ../../../ui.cpp:1173\n-#: ../../../ui.cpp:2566\n+#: ../../../ui.cpp:1178\n+#: ../../../ui.cpp:2577\n msgid \"New Receiving Address\"\n msgstr \"Ny Mottagningsadress\"\n \n-#: ../../../ui.cpp:1174\n-#: ../../../ui.cpp:2567\n+#: ../../../ui.cpp:1179\n+#: ../../../ui.cpp:2578\n msgid \"\"\n \"You should use a new address for each payment you receive.\\n\"\n \"\\n\"\n \"Label\"\n msgstr \"\"\n-\"Du borde anv\u00e4nda en ny adress f\u00f6r varje betalning som du mottar.\\n\"\n+\"Du borde anv\u00e4nda en ny adress f\u00f6r varje betalning som du mottagit.\\n\"\n \"\\n\"\n \"Etikett\"\n \n-#: ../../../ui.cpp:1246\n+#: ../../../ui.cpp:1252\n msgid \"<b>Status:</b> \"\n msgstr \"<b>Status:</b> \"\n \n-#: ../../../ui.cpp:1251\n+#: ../../../ui.cpp:1257\n msgid \", has not been successfully broadcast yet\"\n-msgstr \", has not been successfully broadcast yet\"\n+msgstr \", har inte lyckats broadcast \u00e4n\"\n \n-#: ../../../ui.cpp:1253\n+#: ../../../ui.cpp:1259\n #, c-format\n msgid \", broadcast through %d node\"\n msgstr \", broadcast genom %d nod\"\n \n-#: ../../../ui.cpp:1255\n+#: ../../../ui.cpp:1261\n #, c-format\n msgid \", broadcast through %d nodes\"\n msgstr \", broadcast genom %d noder\"\n \n-#: ../../../ui.cpp:1259\n+#: ../../../ui.cpp:1265\n msgid \"<b>Date:</b> \"\n msgstr \"<b>Datum:</b> \"\n \n-#: ../../../ui.cpp:1267\n+#: ../../../ui.cpp:1273\n msgid \"<b>Source:</b> Generated<br>\"\n msgstr \"<b>K\u00e4lla:</b> Genererad<br>\"\n \n-#: ../../../ui.cpp:1273\n-#: ../../../ui.cpp:1291\n+#: ../../../ui.cpp:1279\n+#: ../../../ui.cpp:1297\n msgid \"<b>From:</b> \"\n msgstr \"<b>Fr\u00e5n:</b> \"\n \n-#: ../../../ui.cpp:1291\n+#: ../../../ui.cpp:1297\n msgid \"unknown\"\n msgstr \"ok\u00e4nd\"\n \n-#: ../../../ui.cpp:1292\n-#: ../../../ui.cpp:1316\n-#: ../../../ui.cpp:1375\n+#: ../../../ui.cpp:1298\n+#: ../../../ui.cpp:1322\n+#: ../../../ui.cpp:1381\n msgid \"<b>To:</b> \"\n msgstr \"<b>Till:</b> \"\n \n-#: ../../../ui.cpp:1295\n+#: ../../../ui.cpp:1301\n msgid \" (yours, label: \"\n msgstr \" (din, etikett: \"\n \n-#: ../../../ui.cpp:1297\n+#: ../../../ui.cpp:1303\n msgid \" (yours)\"\n msgstr \" (ditt)\"\n \n-#: ../../../ui.cpp:1334\n-#: ../../../ui.cpp:1346\n-#: ../../../ui.cpp:1392\n-#: ../../../ui.cpp:1409\n+#: ../../../ui.cpp:1340\n+#: ../../../ui.cpp:1352\n+#: ../../../ui.cpp:1398\n+#: ../../../ui.cpp:1415\n msgid \"<b>Credit:</b> \"\n msgstr \"<b>Kredit:</b> \"\n \n-#: ../../../ui.cpp:1336\n-#, fuzzy, c-format\n+#: ../../../ui.cpp:1342\n+#, c-format\n msgid \"(%s matures in %d more blocks)\"\n-msgstr \"(%s matures in %d more blocks)\"\n+msgstr \"(%s mognar om %d block)\"\n \n-#: ../../../ui.cpp:1338\n+#: ../../../ui.cpp:1344\n msgid \"(not accepted)\"\n msgstr \"(ej accepterad)\"\n \n-#: ../../../ui.cpp:1383\n-#: ../../../ui.cpp:1391\n-#: ../../../ui.cpp:1406\n+#: ../../../ui.cpp:1389\n+#: ../../../ui.cpp:1397\n+#: ../../../ui.cpp:1412\n msgid \"<b>Debit:</b> \"\n-msgstr \"<b>Debit:</b> \"\n+msgstr \"<b>Debet:</b> \"\n \n-#: ../../../ui.cpp:1397\n+#: ../../../ui.cpp:1403\n msgid \"<b>Transaction fee:</b> \"\n msgstr \"<b>Transaktionsavgift:</b> \"\n \n-#: ../../../ui.cpp:1413\n-#, fuzzy\n+#: ../../../ui.cpp:1419\n msgid \"<b>Net amount:</b> \"\n msgstr \"<b>N\u00e4t belopp:</b> \"\n \n-#: ../../../ui.cpp:1420\n+#: ../../../ui.cpp:1426\n msgid \"Message:\"\n msgstr \"Meddelande:\"\n \n-#: ../../../ui.cpp:1422\n+#: ../../../ui.cpp:1428\n msgid \"Comment:\"\n msgstr \"Kommentar:\"\n \n-#: ../../../ui.cpp:1425\n+#: ../../../ui.cpp:1431\n msgid \"Generated coins must wait 120 blocks before they can be spent.  When you generated this block, it was broadcast to the network to be added to the block chain.  If it fails to get into the chain, it will change to \\\"not accepted\\\" and not be spendable.  This may occasionally happen if another node generates a block within a few seconds of yours.\"\n msgstr \"Genererad mynt m\u00e5ste v\u00e4nta 120 block innan dem kan anv\u00e4ndas.N\u00e4r du genererat denna block, skickades en broadcast till n\u00e4tet och lades till block kedjan. Om den misslyckas att l\u00e4gga till kedjan s\u00e5 kommer det \u00e4ndras till \\\"not accepted\\\" och \u00e4r icke brukbar.  Detta kan h\u00e4nda om en annan nod genererat en block n\u00e5gra sekunder efter din.\"\n \n-#: ../../../ui.cpp:1605\n+#: ../../../ui.cpp:1611\n msgid \"Cannot write autostart/bitcoin.desktop file\"\n msgstr \"Kan inte skriva autostart/bitcoin.desktop fil\"\n \n-#: ../../../ui.cpp:1641\n+#: ../../../ui.cpp:1647\n msgid \"Main\"\n-msgstr \"Huvud\"\n+msgstr \"Allm\u00e4nt\"\n \n-#: ../../../ui.cpp:1651\n+#: ../../../ui.cpp:1657\n msgid \"&Start Bitcoin on window system startup\"\n-msgstr \"&Starta Bitcoin vid uppstart i windows\"\n+msgstr \"&Starta Bitcoin vid system uppstart\"\n \n-#: ../../../ui.cpp:1658\n+#: ../../../ui.cpp:1664\n msgid \"&Minimize on close\"\n msgstr \"&Minimera vid st\u00e4ngning\"\n \n-#: ../../../ui.cpp:1800\n+#: ../../../ui.cpp:1806\n #, c-format\n msgid \"version %s\"\n msgstr \"version %s\"\n \n-#: ../../../ui.cpp:1923\n+#: ../../../ui.cpp:1929\n msgid \"Error in amount  \"\n msgstr \"Fel i belopp  \"\n \n-#: ../../../ui.cpp:1923\n-#: ../../../ui.cpp:1928\n-#: ../../../ui.cpp:1933\n-#: ../../../ui.cpp:1968\n+#: ../../../ui.cpp:1929\n+#: ../../../ui.cpp:1934\n+#: ../../../ui.cpp:1939\n+#: ../../../ui.cpp:1974\n #: ../../../uibase.cpp:55\n msgid \"Send Coins\"\n msgstr \"Skicka mynt\"\n \n-#: ../../../ui.cpp:1928\n+#: ../../../ui.cpp:1934\n msgid \"Amount exceeds your balance  \"\n msgstr \"Belopp \u00f6verskrider din balans  \"\n \n-#: ../../../ui.cpp:1933\n+#: ../../../ui.cpp:1939\n msgid \"Total exceeds your balance when the \"\n-msgstr \"Totals \u00f6verskrider din balans n\u00e4r \"\n+msgstr \"Totalt \u00f6verskrider din balans n\u00e4r \"\n \n-#: ../../../ui.cpp:1933\n+#: ../../../ui.cpp:1939\n msgid \" transaction fee is included  \"\n msgstr \" transaktionsavgift \u00e4r inkluderad  \"\n \n-#: ../../../ui.cpp:1951\n+#: ../../../ui.cpp:1957\n msgid \"Payment sent  \"\n msgstr \"Betalning skickad  \"\n \n-#: ../../../ui.cpp:1968\n+#: ../../../ui.cpp:1957\n+#: ../../../ui.cpp:1962\n+#: ../../../ui.cpp:2108\n+#: ../../../ui.cpp:2261\n+#: ../../../wallet.cpp:924\n+msgid \"Sending...\"\n+msgstr \"Skickar...\"\n+\n+#: ../../../ui.cpp:1974\n msgid \"Invalid address  \"\n msgstr \"Ogiltig adress  \"\n \n-#: ../../../ui.cpp:2023\n+#: ../../../ui.cpp:2029\n #, c-format\n msgid \"Sending %s to %s\"\n msgstr \"Skickar %s till %s\"\n \n-#: ../../../ui.cpp:2096\n-#: ../../../ui.cpp:2129\n+#: ../../../ui.cpp:2102\n+#: ../../../ui.cpp:2135\n msgid \"CANCELLED\"\n msgstr \"AVBRUTEN\"\n \n-#: ../../../ui.cpp:2100\n+#: ../../../ui.cpp:2106\n msgid \"Cancelled\"\n msgstr \"Avbruten\"\n \n-#: ../../../ui.cpp:2102\n+#: ../../../ui.cpp:2108\n msgid \"Transfer cancelled  \"\n msgstr \"\u00d6verf\u00f6ring avbruten  \"\n \n-#: ../../../ui.cpp:2155\n+#: ../../../ui.cpp:2161\n msgid \"Error: \"\n msgstr \"Fel: \"\n \n-#: ../../../ui.cpp:2174\n+#: ../../../ui.cpp:2175\n+#: ../../../ui.cpp:2246\n+#: ../../../wallet.cpp:943\n+msgid \"Insufficient funds\"\n+msgstr \"Otillr\u00e4ckligt med pengar\"\n+\n+#: ../../../ui.cpp:2180\n msgid \"Connecting...\"\n msgstr \"Ansluter...\"\n \n-#: ../../../ui.cpp:2179\n+#: ../../../ui.cpp:2185\n msgid \"Unable to connect\"\n msgstr \"Det gick inte att ansluta\"\n \n-#: ../../../ui.cpp:2184\n+#: ../../../ui.cpp:2190\n msgid \"Requesting public key...\"\n msgstr \"Efterfr\u00e5gar publik nyckel...\"\n \n-#: ../../../ui.cpp:2196\n+#: ../../../ui.cpp:2202\n msgid \"Received public key...\"\n msgstr \"Mottagen publik nyckel...\"\n \n-#: ../../../ui.cpp:2210\n+#: ../../../ui.cpp:2216\n msgid \"Recipient is not accepting transactions sent by IP address\"\n msgstr \"Mottagaren accepterar inte transaktioner skickat fr\u00e5n IP adress\"\n \n-#: ../../../ui.cpp:2212\n+#: ../../../ui.cpp:2218\n msgid \"Transfer was not accepted\"\n msgstr \"\u00d6verf\u00f6ringen var inte accepterad\"\n \n-#: ../../../ui.cpp:2221\n+#: ../../../ui.cpp:2227\n msgid \"Invalid response received\"\n msgstr \"Ogiltig respons mottagen\"\n \n-#: ../../../ui.cpp:2236\n+#: ../../../ui.cpp:2242\n msgid \"Creating transaction...\"\n msgstr \"Skapar transation...\"\n \n-#: ../../../ui.cpp:2248\n+#: ../../../ui.cpp:2254\n #, c-format\n msgid \"This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds\"\n msgstr \"Denna transaktion kr\u00e4ver en transaktionsavgift minst %s f\u00f6r dess belopp, komplexitet, eller anv\u00e4ndning av nyligen mottagna pengar\"\n \n-#: ../../../ui.cpp:2250\n+#: ../../../ui.cpp:2256\n msgid \"Transaction creation failed\"\n msgstr \"Misslyckades skapa transaktion\"\n \n-#: ../../../ui.cpp:2257\n+#: ../../../ui.cpp:2263\n msgid \"Transaction aborted\"\n msgstr \"Transaktion avbruten\"\n \n-#: ../../../ui.cpp:2265\n+#: ../../../ui.cpp:2271\n msgid \"Lost connection, transaction cancelled\"\n msgstr \"F\u00f6rlorad anslutning, transaktionen avbruten\"\n \n-#: ../../../ui.cpp:2281\n+#: ../../../ui.cpp:2287\n msgid \"Sending payment...\"\n msgstr \"Skickar betalning...\"\n \n-#: ../../../ui.cpp:2287\n+#: ../../../ui.cpp:2293\n msgid \"The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\"\n msgstr \"Transaktionen blev nekad.  Detta kan h\u00e4nda om n\u00e5gra av dina mynt i din pl\u00e5nbok var redan spenderad. Till exempel om du anv\u00e4nde en kopia av wallet.dat och mynten var redan spenderad i kopian, men som inte var markerad som spenderad h\u00e4r.\"\n \n-#: ../../../ui.cpp:2296\n+#: ../../../ui.cpp:2302\n msgid \"Waiting for confirmation...\"\n msgstr \"V\u00e4ntar p\u00e5 bekr\u00e4ftelse...\"\n \n-#: ../../../ui.cpp:2314\n+#: ../../../ui.cpp:2320\n msgid \"\"\n \"The payment was sent, but the recipient was unable to verify it.\\n\"\n \"The transaction is recorded and will credit to the recipient,\\n\"\n@@ -613,84 +594,84 @@ msgstr \"\"\n \"Transaktionen \u00e4r registrerad och kommer att kreditera mottagaren,\\n\"\n \"men kommentar informationen kommer att vara tom.\"\n \n-#: ../../../ui.cpp:2323\n+#: ../../../ui.cpp:2329\n msgid \"Payment was sent, but an invalid response was received\"\n msgstr \"Betalning var skickad, men en ogiltig respons var mottagen\"\n \n-#: ../../../ui.cpp:2329\n+#: ../../../ui.cpp:2335\n msgid \"Payment completed\"\n msgstr \"Betalning slutf\u00f6rd\"\n \n-#: ../../../ui.cpp:2371\n-#: ../../../ui.cpp:2517\n-#: ../../../ui.cpp:2554\n+#: ../../../ui.cpp:2377\n+#: ../../../ui.cpp:2525\n+#: ../../../ui.cpp:2565\n msgid \"Name\"\n msgstr \"Namn\"\n \n-#: ../../../ui.cpp:2372\n-#: ../../../ui.cpp:2517\n-#: ../../../ui.cpp:2554\n+#: ../../../ui.cpp:2378\n+#: ../../../ui.cpp:2525\n+#: ../../../ui.cpp:2565\n msgid \"Address\"\n msgstr \"Adress\"\n \n-#: ../../../ui.cpp:2374\n-#: ../../../ui.cpp:2529\n+#: ../../../ui.cpp:2380\n+#: ../../../ui.cpp:2537\n msgid \"Label\"\n msgstr \"Etikett\"\n \n-#: ../../../ui.cpp:2375\n+#: ../../../ui.cpp:2381\n #: ../../../uibase.cpp:837\n msgid \"Bitcoin Address\"\n msgstr \"Bitcoin Adress\"\n \n-#: ../../../ui.cpp:2499\n+#: ../../../ui.cpp:2507\n msgid \"This is one of your own addresses for receiving payments and cannot be entered in the address book.  \"\n msgstr \"Denna \u00e4r en av dina egna adresser f\u00f6r mottagning av betalningar och kan inte sl\u00e5s in i adressboken.  \"\n \n-#: ../../../ui.cpp:2517\n-#: ../../../ui.cpp:2523\n+#: ../../../ui.cpp:2525\n+#: ../../../ui.cpp:2531\n msgid \"Edit Address\"\n msgstr \"\u00c4ndra Adress\"\n \n-#: ../../../ui.cpp:2529\n+#: ../../../ui.cpp:2537\n msgid \"Edit Address Label\"\n msgstr \"\u00c4ndra Address Etikett\"\n \n-#: ../../../ui.cpp:2554\n-#: ../../../ui.cpp:2560\n+#: ../../../ui.cpp:2565\n+#: ../../../ui.cpp:2571\n msgid \"Add Address\"\n msgstr \"L\u00e4gg till Adress\"\n \n-#: ../../../ui.cpp:2637\n+#: ../../../ui.cpp:2649\n msgid \"Bitcoin\"\n msgstr \"Bitcoin\"\n \n-#: ../../../ui.cpp:2639\n+#: ../../../ui.cpp:2651\n msgid \"Bitcoin - Generating\"\n msgstr \"Bitcoin - Genererar\"\n \n-#: ../../../ui.cpp:2641\n+#: ../../../ui.cpp:2653\n msgid \"Bitcoin - (not connected)\"\n msgstr \"Bitcoin - (ej ansluten)\"\n \n-#: ../../../ui.cpp:2720\n+#: ../../../ui.cpp:2732\n msgid \"&Open Bitcoin\"\n msgstr \"&\u00d6ppna Bitcoin\"\n \n-#: ../../../ui.cpp:2721\n+#: ../../../ui.cpp:2733\n msgid \"&Send Bitcoins\"\n msgstr \"&Skicka Bitcoins\"\n \n-#: ../../../ui.cpp:2722\n+#: ../../../ui.cpp:2734\n msgid \"O&ptions...\"\n msgstr \"&Inst\u00e4llningar...\"\n \n-#: ../../../ui.cpp:2725\n+#: ../../../ui.cpp:2737\n #: ../../../uibase.cpp:25\n msgid \"E&xit\"\n msgstr \"&Avsluta\"\n \n-#: ../../../ui.cpp:2951\n+#: ../../../ui.cpp:2963\n msgid \"Program has crashed and will terminate.  \"\n msgstr \"Programmet har krachat och kommer att avslutas.  \"\n \n@@ -791,7 +772,6 @@ msgid \"&Minimize to the tray instead of the taskbar\"\n msgstr \"&Minimerar till systemf\u00e4ltet ist\u00e4llet f\u00f6r aktivitetsf\u00e4lt\"\n \n #: ../../../uibase.cpp:351\n-#, fuzzy\n msgid \"Map port using &UPnP\"\n msgstr \"Mapp port anv\u00e4nder &UPnP\"\n \n@@ -812,9 +792,8 @@ msgid \" &Port:\"\n msgstr \" &Port:\"\n \n #: ../../../uibase.cpp:392\n-#, fuzzy\n msgid \"Optional transaction fee per KB that helps make sure your transactions are processed quickly.  Most transactions are 1KB.  Fee 0.01 recommended.\"\n-msgstr \"Frivillig transaktionsavgift per KB som garanterar att din transaktion bearbetas snabbt. Flesta transaktioner \u00e4r 1KB.  Most transactions are 1KB.  Avgift 0.01 rekommenderas.\"\n+msgstr \"Frivillig transaktionsavgift per KB som garanterar att din transaktion bearbetas snabbt. Flesta transaktioner \u00e4r 1KB.   Avgift 0.01 rekommenderas.\"\n \n #: ../../../uibase.cpp:399\n msgid \"Pay transaction fee:\"\n@@ -850,7 +829,6 @@ msgid \"version\"\n msgstr \"version\"\n \n #: ../../../uibase.cpp:525\n-#, fuzzy\n msgid \"\"\n \"Copyright (c) 2009-2011 Bitcoin Developers\\n\"\n \"\\n\"\n@@ -865,14 +843,16 @@ msgid \"\"\n msgstr \"\"\n \"Copyright (c) 2009-2011 Bitcoin Developers\\n\"\n \"\\n\"\n-\"This is experimental software.\\n\"\n+\"Detta \u00e4r en experimentell mjukvara.\\n\"\n \"\\n\"\n-\"Distributed under the MIT/X11 software license, see the accompanying file \\n\"\n-\"license.txt or http://www.opensource.org/licenses/mit-license.php.\\n\"\n+\"Distribuerad under MIT/X11 mjukvarulicens, se medf\u00f6ljande fil \\n\"\n+\"license.txt eller http://www.opensource.org/licenses/mit-license.php.\\n\"\n \"\\n\"\n-\"This product includes software developed by the OpenSSL Project for use in the \\n\"\n-\"OpenSSL Toolkit (http://www.openssl.org/) and cryptographic software written by \\n\"\n-\"Eric Young (eay@cryptsoft.com) and UPnP software written by Thomas Bernard.\"\n+\"Denna produkt inkluderar mjukvara utvecklad av OpenSSL Project f\u00f6r anv\u00e4ndning i \\n\"\n+\"OpenSSL Toolkit (http://www.openssl.org/) och kryptografisk mjukvara skriven av \\n\"\n+\"Eric Young (eay@cryptsoft.com) och UPnP mjukvara skriven av Thomas Bernard.\\n\"\n+\"\\n\"\n+\"\u00d6versatt av Han Lin Yap.\"\n \n #: ../../../uibase.cpp:581\n msgid \"Enter a Bitcoin address (e.g. 1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L)\"\n@@ -895,9 +875,8 @@ msgid \"&Amount:\"\n msgstr \"&Belopp:\"\n \n #: ../../../uibase.cpp:630\n-#, fuzzy\n msgid \"T&ransfer:\"\n-msgstr \"T&ransfer:\"\n+msgstr \"&\u00d6verf\u00f6ring:\"\n \n #: ../../../uibase.cpp:636\n msgid \" Standard\"\n@@ -918,9 +897,8 @@ msgstr \"\"\n \"Ansluter...\"\n \n #: ../../../uibase.cpp:761\n-#, fuzzy\n msgid \"These are your Bitcoin addresses for receiving payments.  You may want to give a different one to each sender so you can keep track of who is paying you.  The highlighted address is displayed in the main window.\"\n-msgstr \"Dessa \u00e4r dina Bitcoin adresser f\u00f6r mottagning av betalningar.  Du rekommenderas att ge olika till varje avs\u00e4ndare s\u00e5 du kan ha koll p\u00e5 vem som betalar dig.  Den markerade adressen \u00e4r visar i huvudf\u00f6nstret.\"\n+msgstr \"Dessa \u00e4r dina Bitcoin adresser f\u00f6r mottagning av betalningar.  Du rekommenderas att ge olika till varje avs\u00e4ndare s\u00e5 du kan ha koll p\u00e5 vem som betalar dig.  Den markerade adressen visas i huvudf\u00f6nstret.\"\n \n #: ../../../uibase.cpp:774\n #: ../../../uibase.cpp:886\n@@ -937,9 +915,8 @@ msgid \"Sending\"\n msgstr \"Skickar\"\n \n #: ../../../uibase.cpp:857\n-#, fuzzy\n msgid \"These are your Bitcoin addresses for receiving payments.  You can give a different one to each sender to keep track of who is paying you.  The highlighted address will be displayed in the main window.\"\n-msgstr \"Dessa \u00e4r dina Bitcoin adresser f\u00f6r mottagning av betalningar.  Du kan ge olika till varje avs\u00e4ndare s\u00e5 du kan ha koll p\u00e5 vem som betalar dig.  Den markerade adressen \u00e4r visar i huvudf\u00f6nstret.\"\n+msgstr \"Dessa \u00e4r dina Bitcoin adresser f\u00f6r mottagning av betalningar.  Du kan ge olika till varje avs\u00e4ndare s\u00e5 du kan ha koll p\u00e5 vem som betalar dig.  Den markerade adressen visas i huvudf\u00f6nstret.\"\n \n #: ../../../uibase.cpp:870\n msgid \"Receiving\"\n@@ -949,15 +926,35 @@ msgstr \"Mottagning\"\n msgid \"&Delete\"\n msgstr \"&Ta bort\"\n \n-#: ../../../util.cpp:866\n-#, fuzzy\n+#: ../../../util.cpp:874\n msgid \"Warning: Please check that your computer's date and time are correct.  If your clock is wrong Bitcoin will not work properly.\"\n-msgstr \"Varning: Var god och kolla att din dator har r\u00e4tt datum och klockslag.  Om din klocka \u00e4r fel s\u00e5 kommer Bitcoin inte att fungera.\"\n+msgstr \"Varning: Var god och kolla att din dator har r\u00e4tt datum och klockslag.  Om din klocka \u00e4r fel s\u00e5 kommer Bitcoin inte att fungera ordentligt.\"\n \n-#: ../../../util.cpp:899\n+#: ../../../util.cpp:908\n msgid \"beta\"\n msgstr \"beta\"\n \n+#: ../../../wallet.cpp:917\n+#, c-format\n+msgid \"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"\n+msgstr \"Fel: Denna transaktion kr\u00e4ver en transaktionsavgift minst %s f\u00f6r dess belopp, komplexitet, eller anv\u00e4ndning av nyligen mottagna pengar  \"\n+\n+#: ../../../wallet.cpp:919\n+msgid \"Error: Transaction creation failed  \"\n+msgstr \"Fel: Misslyckades att skapa transaktion  \"\n+\n+#: ../../../wallet.cpp:928\n+msgid \"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\"\n+msgstr \"Fel: Transaktionen blev nekad.  Detta kan h\u00e4nda om n\u00e5gra av dina mynt i din pl\u00e5nbok var redan spenderad. Till exempel om du anv\u00e4nde en kopia av wallet.dat och mynten var redan spenderad i kopian, men som inte var markerad som spenderad h\u00e4r.\"\n+\n+#: ../../../wallet.cpp:941\n+msgid \"Invalid amount\"\n+msgstr \"Ogiltig belopp\"\n+\n+#: ../../../wallet.cpp:948\n+msgid \"Invalid bitcoin address\"\n+msgstr \"Ogiltig bitcoin adress\"\n+\n #: ../../../uibase.h:147\n msgid \"Transaction Details\"\n msgstr \"Transaktion detaljer\"\n@@ -974,5 +971,3 @@ msgstr \"Om Bitcoin\"\n msgid \"Your Bitcoin Addresses\"\n msgstr \"Dina Bitcoin Adresser\"\n \n-#~ msgid \" beta\"\n-#~ msgstr \" beta\""
      },
      {
        "sha": "734d21701edfa77de2e7ebcf44ba2e838f030eb3",
        "filename": "share/pixmaps/bitcoin.ico",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/share/pixmaps/bitcoin.ico",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/share/pixmaps/bitcoin.ico",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/pixmaps/bitcoin.ico?ref=43288bea72b1e6607a6bf110b95efd4443e1427f"
      },
      {
        "sha": "9ab0ce2591d21cce2408983986b7c97c2d1c476f",
        "filename": "share/pixmaps/nsis-header.bmp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/share/pixmaps/nsis-header.bmp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/share/pixmaps/nsis-header.bmp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/pixmaps/nsis-header.bmp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f"
      },
      {
        "sha": "71255c6850b00ef1efea82fefd05ff736c90f816",
        "filename": "share/pixmaps/nsis-wizard.bmp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/share/pixmaps/nsis-wizard.bmp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/share/pixmaps/nsis-wizard.bmp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/pixmaps/nsis-wizard.bmp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f"
      },
      {
        "sha": "b4bf3cff4715a02bc7a5dc252af74ec354fcfefb",
        "filename": "share/setup.nsi",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/share/setup.nsi",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/share/setup.nsi",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -1,22 +1,28 @@\n Name Bitcoin\r\n \r\n RequestExecutionLevel highest\r\n+SetCompressor /SOLID lzma\r\n \r\n # General Symbol Definitions\r\n !define REGKEY \"SOFTWARE\\$(^Name)\"\r\n-!define VERSION 0.3.24\r\n+!define VERSION 0.3.25\r\n !define COMPANY \"Bitcoin project\"\r\n !define URL http://www.bitcoin.org/\r\n \r\n # MUI Symbol Definitions\r\n !define MUI_ICON \"../share/pixmaps/bitcoin.ico\"\r\n+!define MUI_WELCOMEFINISHPAGE_BITMAP \"../share/pixmaps/nsis-wizard.bmp\"\r\n+!define MUI_HEADERIMAGE\r\n+!define MUI_HEADERIMAGE_RIGHT\r\n+!define MUI_HEADERIMAGE_BITMAP \"../share/pixmaps/nsis-header.bmp\"\r\n !define MUI_FINISHPAGE_NOAUTOCLOSE\r\n !define MUI_STARTMENUPAGE_REGISTRY_ROOT HKLM\r\n !define MUI_STARTMENUPAGE_REGISTRY_KEY ${REGKEY}\r\n !define MUI_STARTMENUPAGE_REGISTRY_VALUENAME StartMenuGroup\r\n !define MUI_STARTMENUPAGE_DEFAULTFOLDER Bitcoin\r\n !define MUI_FINISHPAGE_RUN $INSTDIR\\bitcoin.exe\r\n !define MUI_UNICON \"${NSISDIR}\\Contrib\\Graphics\\Icons\\modern-uninstall.ico\"\r\n+!define MUI_UNWELCOMEFINISHPAGE_BITMAP \"../share/pixmaps/nsis-wizard.bmp\"\r\n !define MUI_UNFINISHPAGE_NOAUTOCLOSE\r\n \r\n # Included files\r\n@@ -39,12 +45,13 @@ Var StartMenuGroup\n !insertmacro MUI_LANGUAGE English\r\n \r\n # Installer attributes\r\n-OutFile bitcoin-0.3.24-win32-setup.exe\r\n+OutFile bitcoin-0.3.25-win32-setup.exe\r\n InstallDir $PROGRAMFILES\\Bitcoin\r\n CRCCheck on\r\n XPStyle on\r\n+BrandingText \" \"\r\n ShowInstDetails show\r\n-VIProductVersion 0.3.24.0\r\n+VIProductVersion 0.3.25.0\r\n VIAddVersionKey ProductName Bitcoin\r\n VIAddVersionKey ProductVersion \"${VERSION}\"\r\n VIAddVersionKey CompanyName \"${COMPANY}\"\r"
      },
      {
        "sha": "d5e6b1e36be2cc6ff245fbba07395c918038493a",
        "filename": "share/uiproject.fbp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/share/uiproject.fbp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/share/uiproject.fbp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/uiproject.fbp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -162,6 +162,36 @@\n                         <event name=\"OnMenuSelection\">OnMenuOptionsChangeYourAddress</event>\r\n                         <event name=\"OnUpdateUI\"></event>\r\n                     </object>\r\n+                    <object class=\"wxMenuItem\" expanded=\"1\">\r\n+                        <property name=\"bitmap\"></property>\r\n+                        <property name=\"checked\">0</property>\r\n+                        <property name=\"enabled\">1</property>\r\n+                        <property name=\"help\"></property>\r\n+                        <property name=\"id\">wxID_ANY</property>\r\n+                        <property name=\"kind\">wxITEM_NORMAL</property>\r\n+                        <property name=\"label\">&amp;Encrypt Wallet...</property>\r\n+                        <property name=\"name\">m_menuOptionsEncryptWallet</property>\r\n+                        <property name=\"permission\">public</property>\r\n+                        <property name=\"shortcut\"></property>\r\n+                        <property name=\"unchecked_bitmap\"></property>\r\n+                        <event name=\"OnMenuSelection\">OnMenuOptionsEncryptWallet</event>\r\n+                        <event name=\"OnUpdateUI\"></event>\r\n+                    </object>\r\n+                    <object class=\"wxMenuItem\" expanded=\"1\">\r\n+                        <property name=\"bitmap\"></property>\r\n+                        <property name=\"checked\">0</property>\r\n+                        <property name=\"enabled\">1</property>\r\n+                        <property name=\"help\"></property>\r\n+                        <property name=\"id\">wxID_ANY</property>\r\n+                        <property name=\"kind\">wxITEM_NORMAL</property>\r\n+                        <property name=\"label\">&amp;Change Wallet Encryption Passphrase...</property>\r\n+                        <property name=\"name\">m_menuOptionsChangeWalletPassphrase</property>\r\n+                        <property name=\"permission\">public</property>\r\n+                        <property name=\"shortcut\"></property>\r\n+                        <property name=\"unchecked_bitmap\"></property>\r\n+                        <event name=\"OnMenuSelection\">OnMenuOptionsChangeWalletPassphrase</event>\r\n+                        <event name=\"OnUpdateUI\"></event>\r\n+                    </object>\r\n                     <object class=\"wxMenuItem\" expanded=\"1\">\r\n                         <property name=\"bitmap\"></property>\r\n                         <property name=\"checked\">0</property>\r"
      },
      {
        "sha": "9a8e6ca89aecd45aeb38f7bb5770aa96c26d3d14",
        "filename": "src/crypter.cpp",
        "status": "added",
        "additions": 132,
        "deletions": 0,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -0,0 +1,132 @@\n+// Copyright (c) 2011 The Bitcoin Developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <openssl/aes.h>\n+#include <openssl/evp.h>\n+#include <vector>\n+#include <string>\n+#include \"headers.h\"\n+#ifdef __WXMSW__\n+#include <windows.h>\n+#endif\n+\n+#include \"crypter.h\"\n+#include \"main.h\"\n+#include \"util.h\"\n+\n+bool CCrypter::SetKeyFromPassphrase(const std::string& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)\n+{\n+    if (nRounds < 1 || chSalt.size() != WALLET_CRYPTO_SALT_SIZE)\n+        return false;\n+\n+    // Try to keep the keydata out of swap (and be a bit over-careful to keep the IV that we don't even use out of swap)\n+    // Note that this does nothing about suspend-to-disk (which will put all our key data on disk)\n+    // Note as well that at no point in this program is any attempt made to prevent stealing of keys by reading the memory of the running process.  \n+    mlock(&chKey[0], sizeof chKey);\n+    mlock(&chIV[0], sizeof chIV);\n+\n+    int i = 0;\n+    if (nDerivationMethod == 0)\n+        i = EVP_BytesToKey(EVP_aes_256_cbc(), EVP_sha512(), &chSalt[0],\n+                          (unsigned char *)&strKeyData[0], strKeyData.size(), nRounds, chKey, chIV);\n+\n+    if (i != WALLET_CRYPTO_KEY_SIZE)\n+    {\n+        memset(&chKey, 0, sizeof chKey);\n+        memset(&chIV, 0, sizeof chIV);\n+        return false;\n+    }\n+\n+    fKeySet = true;\n+    return true;\n+}\n+\n+bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV)\n+{\n+    if (chNewKey.size() != WALLET_CRYPTO_KEY_SIZE || chNewIV.size() != WALLET_CRYPTO_KEY_SIZE)\n+        return false;\n+\n+    // Try to keep the keydata out of swap\n+    // Note that this does nothing about suspend-to-disk (which will put all our key data on disk)\n+    // Note as well that at no point in this program is any attempt made to prevent stealing of keys by reading the memory of the running process.  \n+    mlock(&chKey[0], sizeof chKey);\n+    mlock(&chIV[0], sizeof chIV);\n+\n+    memcpy(&chKey[0], &chNewKey[0], sizeof chKey);\n+    memcpy(&chIV[0], &chNewIV[0], sizeof chIV);\n+\n+    fKeySet = true;\n+    return true;\n+}\n+\n+bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext)\n+{\n+    if (!fKeySet)\n+        return false;\n+\n+    // max ciphertext len for a n bytes of plaintext is\n+    // n + AES_BLOCK_SIZE - 1 bytes\n+    int nLen = vchPlaintext.size();\n+    int nCLen = nLen + AES_BLOCK_SIZE, nFLen = 0;\n+    vchCiphertext = std::vector<unsigned char> (nCLen);\n+\n+    EVP_CIPHER_CTX ctx;\n+\n+    EVP_CIPHER_CTX_init(&ctx);\n+    EVP_EncryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV);\n+\n+    EVP_EncryptUpdate(&ctx, &vchCiphertext[0], &nCLen, &vchPlaintext[0], nLen);\n+    EVP_EncryptFinal_ex(&ctx, (&vchCiphertext[0])+nCLen, &nFLen);\n+\n+    EVP_CIPHER_CTX_cleanup(&ctx);\n+\n+    vchCiphertext.resize(nCLen + nFLen);\n+    return true;\n+}\n+\n+bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext)\n+{\n+    if (!fKeySet)\n+        return false;\n+\n+    // plaintext will always be equal to or lesser than length of ciphertext\n+    int nLen = vchCiphertext.size();\n+    int nPLen = nLen, nFLen = 0;\n+\n+    vchPlaintext = CKeyingMaterial(nPLen);\n+\n+    EVP_CIPHER_CTX ctx;\n+\n+    EVP_CIPHER_CTX_init(&ctx);\n+    EVP_DecryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV);\n+\n+    EVP_DecryptUpdate(&ctx, &vchPlaintext[0], &nPLen, &vchCiphertext[0], nLen);\n+    EVP_DecryptFinal_ex(&ctx, (&vchPlaintext[0])+nPLen, &nFLen);\n+\n+    EVP_CIPHER_CTX_cleanup(&ctx);\n+\n+    vchPlaintext.resize(nPLen + nFLen);\n+    return true;\n+}\n+\n+\n+bool EncryptSecret(CKeyingMaterial& vMasterKey, const CSecret &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\n+{\n+    CCrypter cKeyCrypter;\n+    std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);\n+    memcpy(&chIV[0], &nIV, WALLET_CRYPTO_KEY_SIZE);\n+    if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n+        return false;\n+    return cKeyCrypter.Encrypt((CKeyingMaterial)vchPlaintext, vchCiphertext);\n+}\n+\n+bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CSecret& vchPlaintext)\n+{\n+    CCrypter cKeyCrypter;\n+    std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);\n+    memcpy(&chIV[0], &nIV, WALLET_CRYPTO_KEY_SIZE);\n+    if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n+        return false;\n+    return cKeyCrypter.Decrypt(vchCiphertext, *((CKeyingMaterial*)&vchPlaintext));\n+}"
      },
      {
        "sha": "5b95ea415e0359ec45838b6cd5331f2138780f46",
        "filename": "src/crypter.h",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2011 The Bitcoin Developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef __CRYPTER_H__\n+#define __CRYPTER_H__\n+\n+#include \"key.h\"\n+\n+const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;\n+const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;\n+\n+/*\n+Private key encryption is done based on a CMasterKey,\n+which holds a salt and random encryption key.\n+\n+CMasterKeys is encrypted using AES-256-CBC using a key\n+derived using derivation method nDerivationMethod\n+(0 == EVP_sha512()) and derivation iterations nDeriveIterations.\n+vchOtherDerivationParameters is provided for alternative algorithms\n+which may require more parameters (such as scrypt).\n+\n+Wallet Private Keys are then encrypted using AES-256-CBC\n+with the double-sha256 of the private key as the IV, and the\n+master key's key as the encryption key.\n+*/\n+\n+class CMasterKey\n+{\n+public:\n+    std::vector<unsigned char> vchCryptedKey;\n+    std::vector<unsigned char> vchSalt;\n+    // 0 = EVP_sha512()\n+    // 1 = scrypt()\n+    unsigned int nDerivationMethod;\n+    unsigned int nDeriveIterations;\n+    // Use this for more parameters to key derivation,\n+    // such as the various parameters to scrypt\n+    std::vector<unsigned char> vchOtherDerivationParameters;\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(vchCryptedKey);\n+        READWRITE(vchSalt);\n+        READWRITE(nDerivationMethod);\n+        READWRITE(nDeriveIterations);\n+        READWRITE(vchOtherDerivationParameters);\n+    )\n+    CMasterKey()\n+    {\n+        // 25000 rounds is just under 0.1 seconds on a 1.86 GHz Pentium M\n+        // ie slightly lower than the lowest hardware we need bother supporting\n+        nDeriveIterations = 25000;\n+        nDerivationMethod = 0;\n+        vchOtherDerivationParameters = std::vector<unsigned char>(0);\n+    }\n+};\n+\n+typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;\n+\n+class CCrypter\n+{\n+private:\n+    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];\n+    unsigned char chIV[WALLET_CRYPTO_KEY_SIZE];\n+    bool fKeySet;\n+\n+public:\n+    bool SetKeyFromPassphrase(const std::string &strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod);\n+    bool Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext);\n+    bool Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext);\n+    bool SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV);\n+\n+    void CleanKey()\n+    {\n+        memset(&chKey, 0, sizeof chKey);\n+        memset(&chIV, 0, sizeof chIV);\n+        munlock(&chKey, sizeof chKey);\n+        munlock(&chIV, sizeof chIV);\n+        fKeySet = false;\n+    }\n+\n+    CCrypter()\n+    {\n+        fKeySet = false;\n+    }\n+\n+    ~CCrypter()\n+    {\n+        CleanKey();\n+    }\n+};\n+\n+bool EncryptSecret(CKeyingMaterial& vMasterKey, const CSecret &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext);\n+bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char> &vchCiphertext, const uint256& nIV, CSecret &vchPlaintext);\n+\n+#endif"
      },
      {
        "sha": "8789dc3176c73febbf63404df5227b3f3521ae5a",
        "filename": "src/cryptopp/cpu.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/cryptopp/cpu.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/cryptopp/cpu.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cryptopp/cpu.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -80,7 +80,7 @@ bool CpuId(word32 input, word32 *output)\n #endif\n }\n \n-#ifndef _MSC_VER\n+#if !CRYPTOPP_BOOL_X64 && !defined(_MSC_VER) && defined(__GNUC__)\n static jmp_buf s_jmpNoSSE2;\n static void SigIllHandlerSSE2(int)\n {"
      },
      {
        "sha": "cb786dcf77a54fec40505f1bdf10d613fad9cba0",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 14,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -629,8 +629,6 @@ int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n \n void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)\n {\n-    int64 nCreditDebit = 0;\n-\n     bool fAllAccounts = (strAccount == \"*\");\n \n     Dbc* pcursor = GetCursor();\n@@ -672,7 +670,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n }\n \n \n-bool CWalletDB::LoadWallet(CWallet* pwallet)\n+int CWalletDB::LoadWallet(CWallet* pwallet)\n {\n     pwallet->vchDefaultKey.clear();\n     int nFileVersion = 0;\n@@ -687,12 +685,12 @@ bool CWalletDB::LoadWallet(CWallet* pwallet)\n \n     //// todo: shouldn't we catch exceptions and try to recover and continue?\n     CRITICAL_BLOCK(pwallet->cs_mapWallet)\n-    CRITICAL_BLOCK(pwallet->cs_mapKeys)\n+    CRITICAL_BLOCK(pwallet->cs_KeyStore)\n     {\n         // Get cursor\n         Dbc* pcursor = GetCursor();\n         if (!pcursor)\n-            return false;\n+            return DB_CORRUPT;\n \n         loop\n         {\n@@ -703,7 +701,7 @@ bool CWalletDB::LoadWallet(CWallet* pwallet)\n             if (ret == DB_NOTFOUND)\n                 break;\n             else if (ret != 0)\n-                return false;\n+                return DB_CORRUPT;\n \n             // Unserialize\n             // Taking advantage of the fact that pair serialization\n@@ -767,14 +765,42 @@ bool CWalletDB::LoadWallet(CWallet* pwallet)\n             {\n                 vector<unsigned char> vchPubKey;\n                 ssKey >> vchPubKey;\n-                CWalletKey wkey;\n+                CKey key;\n                 if (strType == \"key\")\n-                    ssValue >> wkey.vchPrivKey;\n+                {\n+                    CPrivKey pkey;\n+                    ssValue >> pkey;\n+                    key.SetPrivKey(pkey);\n+                }\n                 else\n+                {\n+                    CWalletKey wkey;\n                     ssValue >> wkey;\n-\n-                pwallet->mapKeys[vchPubKey] = wkey.vchPrivKey;\n-                mapPubKeys[Hash160(vchPubKey)] = vchPubKey;\n+                    key.SetPrivKey(wkey.vchPrivKey);\n+                }\n+                if (!pwallet->LoadKey(key))\n+                    return false;\n+            }\n+            else if (strType == \"mkey\")\n+            {\n+                unsigned int nID;\n+                ssKey >> nID;\n+                CMasterKey kMasterKey;\n+                ssValue >> kMasterKey;\n+                if(pwallet->mapMasterKeys.count(nID) != 0)\n+                    return false;\n+                pwallet->mapMasterKeys[nID] = kMasterKey;\n+                if (pwallet->nMasterKeyMaxID < nID)\n+                    pwallet->nMasterKeyMaxID = nID;\n+            }\n+            else if (strType == \"ckey\")\n+            {\n+                vector<unsigned char> vchPubKey;\n+                ssKey >> vchPubKey;\n+                vector<unsigned char> vchPrivKey;\n+                ssValue >> vchPrivKey;\n+                if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n+                    return false;\n             }\n             else if (strType == \"defaultkey\")\n             {\n@@ -802,7 +828,6 @@ bool CWalletDB::LoadWallet(CWallet* pwallet)\n                 if (strKey == \"fGenerateBitcoins\")  ssValue >> fGenerateBitcoins;\n #endif\n                 if (strKey == \"nTransactionFee\")    ssValue >> nTransactionFee;\n-                if (strKey == \"addrIncoming\")       ssValue >> addrIncoming;\n                 if (strKey == \"fLimitProcessors\")   ssValue >> fLimitProcessors;\n                 if (strKey == \"nLimitProcessors\")   ssValue >> nLimitProcessors;\n                 if (strKey == \"fMinimizeToTray\")    ssValue >> fMinimizeToTray;\n@@ -811,6 +836,13 @@ bool CWalletDB::LoadWallet(CWallet* pwallet)\n                 if (strKey == \"addrProxy\")          ssValue >> addrProxy;\n                 if (fHaveUPnP && strKey == \"fUseUPnP\")           ssValue >> fUseUPnP;\n             }\n+            else if (strType == \"minversion\")\n+            {\n+                int nMinVersion = 0;\n+                ssValue >> nMinVersion;\n+                if (nMinVersion > VERSION)\n+                    return DB_TOO_NEW;\n+            }\n         }\n         pcursor->close();\n     }\n@@ -821,7 +853,6 @@ bool CWalletDB::LoadWallet(CWallet* pwallet)\n     printf(\"nFileVersion = %d\\n\", nFileVersion);\n     printf(\"fGenerateBitcoins = %d\\n\", fGenerateBitcoins);\n     printf(\"nTransactionFee = %\"PRI64d\"\\n\", nTransactionFee);\n-    printf(\"addrIncoming = %s\\n\", addrIncoming.ToString().c_str());\n     printf(\"fMinimizeToTray = %d\\n\", fMinimizeToTray);\n     printf(\"fMinimizeOnClose = %d\\n\", fMinimizeOnClose);\n     printf(\"fUseProxy = %d\\n\", fUseProxy);\n@@ -833,7 +864,7 @@ bool CWalletDB::LoadWallet(CWallet* pwallet)\n     if (nFileVersion < VERSION)\n         WriteVersion(VERSION);\n \n-    return true;\n+    return DB_LOAD_OK;\n }\n \n void ThreadFlushWalletDB(void* parg)"
      },
      {
        "sha": "049857b3ab73fa8482d809ebbb7b776f41d03c37",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -88,7 +88,7 @@ class CDB\n         if (!pdb)\n             return false;\n         if (fReadOnly)\n-            assert((\"Write called on database in read-only mode\", false));\n+            assert(!\"Write called on database in read-only mode\");\n \n         // Key\n         CDataStream ssKey(SER_DISK);\n@@ -117,7 +117,7 @@ class CDB\n         if (!pdb)\n             return false;\n         if (fReadOnly)\n-            assert((\"Erase called on database in read-only mode\", false));\n+            assert(!\"Erase called on database in read-only mode\");\n \n         // Key\n         CDataStream ssKey(SER_DISK);\n@@ -342,6 +342,14 @@ class CKeyPool\n \n \n \n+enum DBErrors\n+{\n+    DB_LOAD_OK,\n+    DB_CORRUPT,\n+    DB_TOO_NEW,\n+    DB_LOAD_FAIL,\n+};\n+\n class CWalletDB : public CDB\n {\n public:\n@@ -391,6 +399,25 @@ class CWalletDB : public CDB\n         return Write(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey, false);\n     }\n \n+    bool WriteCryptedKey(const std::vector<unsigned char>& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)\n+    {\n+        nWalletDBUpdated++;\n+        if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n+            return false;\n+        if (fEraseUnencryptedKey)\n+        {\n+            Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n+            Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n+        }\n+        return true;\n+    }\n+\n+    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n+    }\n+\n     bool WriteBestBlock(const CBlockLocator& locator)\n     {\n         nWalletDBUpdated++;\n@@ -450,7 +477,7 @@ class CWalletDB : public CDB\n     int64 GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n-    bool LoadWallet(CWallet* pwallet);\n+    int LoadWallet(CWallet* pwallet);\n };\n \n #endif"
      },
      {
        "sha": "489f3f7ba5b109d3b9c83d517fa2d76559444f72",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -487,8 +487,16 @@ bool AppInit2(int argc, char* argv[])\n     nStart = GetTimeMillis();\n     bool fFirstRun;\n     pwalletMain = new CWallet(\"wallet.dat\");\n-    if (!pwalletMain->LoadWallet(fFirstRun))\n-        strErrors += string() + _(\"Error loading\") + \" wallet.dat\\n\";\n+    int nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n+    if (nLoadWalletRet != DB_LOAD_OK)\n+    {\n+        if (nLoadWalletRet == DB_CORRUPT)\n+            strErrors += strprintf(_(\"Error loading %s, Wallet corrupted\"), \"wallet.dat\") + \"\\n\";\n+        else if (nLoadWalletRet == DB_TOO_NEW)\n+            strErrors += strprintf(_(\"Error loading %s, Wallet requires newer version of Bitcoin\"), \"wallet.dat\") + \"\\n\";\n+        else\n+            strErrors += string() + _(\"Error loading\") + \" wallet.dat\\n\";\n+    }\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n     RegisterWallet(pwalletMain);\n@@ -516,7 +524,6 @@ bool AppInit2(int argc, char* argv[])\n         //// debug print\n         printf(\"mapBlockIndex.size() = %d\\n\",   mapBlockIndex.size());\n         printf(\"nBestHeight = %d\\n\",            nBestHeight);\n-        printf(\"mapKeys.size() = %d\\n\",         pwalletMain->mapKeys.size());\n         printf(\"setKeyPool.size() = %d\\n\",      pwalletMain->setKeyPool.size());\n         printf(\"mapPubKeys.size() = %d\\n\",      mapPubKeys.size());\n         printf(\"mapWallet.size() = %d\\n\",       pwalletMain->mapWallet.size());"
      },
      {
        "sha": "c43e4ee23581e51d9f90ca8987d9cf81a4189250",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 68,
        "deletions": 18,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -31,6 +31,41 @@\n // see www.keylength.com\n // script supports up to 75 for single byte push\n \n+int static inline EC_KEY_regenerate_key(EC_KEY *eckey, BIGNUM *priv_key)\n+{\n+    int ok = 0;\n+    BN_CTX *ctx = NULL;\n+    EC_POINT *pub_key = NULL;\n+\n+    if (!eckey) return 0;\n+\n+    const EC_GROUP *group = EC_KEY_get0_group(eckey);\n+\n+    if ((ctx = BN_CTX_new()) == NULL)\n+        goto err;\n+\n+    pub_key = EC_POINT_new(group);\n+\n+    if (pub_key == NULL)\n+        goto err;\n+\n+    if (!EC_POINT_mul(group, pub_key, priv_key, NULL, NULL, ctx))\n+        goto err;\n+\n+    EC_KEY_set_private_key(eckey,priv_key);\n+    EC_KEY_set_public_key(eckey,pub_key);\n+\n+    ok = 1;\n+\n+err:\n+\n+    if (pub_key)\n+        EC_POINT_free(pub_key);\n+    if (ctx != NULL)\n+        BN_CTX_free(ctx);\n+\n+    return(ok);\n+}\n \n \n class key_error : public std::runtime_error\n@@ -42,8 +77,7 @@ class key_error : public std::runtime_error\n \n // secure_allocator is defined in serialize.h\n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n-\n-\n+typedef std::vector<unsigned char, secure_allocator<unsigned char> > CSecret;\n \n class CKey\n {\n@@ -102,6 +136,38 @@ class CKey\n         return true;\n     }\n \n+    bool SetSecret(const CSecret& vchSecret)\n+    {\n+        EC_KEY_free(pkey);\n+        pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n+        if (pkey == NULL)\n+            throw key_error(\"CKey::SetSecret() : EC_KEY_new_by_curve_name failed\");\n+        if (vchSecret.size() != 32)\n+            throw key_error(\"CKey::SetSecret() : secret must be 32 bytes\");\n+        BIGNUM *bn = BN_bin2bn(&vchSecret[0],32,BN_new());\n+        if (bn == NULL) \n+            throw key_error(\"CKey::SetSecret() : BN_bin2bn failed\");\n+        if (!EC_KEY_regenerate_key(pkey,bn))\n+            throw key_error(\"CKey::SetSecret() : EC_KEY_regenerate_key failed\");\n+        BN_clear_free(bn);\n+        fSet = true;\n+        return true;\n+    }\n+\n+    CSecret GetSecret() const\n+    {\n+        CSecret vchRet;\n+        vchRet.resize(32);\n+        const BIGNUM *bn = EC_KEY_get0_private_key(pkey);\n+        int nBytes = BN_num_bytes(bn);\n+        if (bn == NULL)\n+            throw key_error(\"CKey::GetSecret() : EC_KEY_get0_private_key failed\");\n+        int n=BN_bn2bin(bn,&vchRet[32 - nBytes]);\n+        if (n != nBytes) \n+            throw key_error(\"CKey::GetSecret(): BN_bn2bin failed\");\n+        return vchRet;\n+    }\n+\n     CPrivKey GetPrivKey() const\n     {\n         unsigned int nSize = i2d_ECPrivateKey(pkey, NULL);\n@@ -154,22 +220,6 @@ class CKey\n             return false;\n         return true;\n     }\n-\n-    static bool Sign(const CPrivKey& vchPrivKey, uint256 hash, std::vector<unsigned char>& vchSig)\n-    {\n-        CKey key;\n-        if (!key.SetPrivKey(vchPrivKey))\n-            return false;\n-        return key.Sign(hash, vchSig);\n-    }\n-\n-    static bool Verify(const std::vector<unsigned char>& vchPubKey, uint256 hash, const std::vector<unsigned char>& vchSig)\n-    {\n-        CKey key;\n-        if (!key.SetPubKey(vchPubKey))\n-            return false;\n-        return key.Verify(hash, vchSig);\n-    }\n };\n \n #endif"
      },
      {
        "sha": "de13958a8bcfb676322330f2f7edc814bb69675d",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 124,
        "deletions": 10,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -4,30 +4,144 @@\n \n #include \"headers.h\"\n #include \"db.h\"\n-\n-\n-\n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// mapKeys\n-//\n+#include \"crypter.h\"\n \n std::vector<unsigned char> CKeyStore::GenerateNewKey()\n {\n     RandAddSeedPerfmon();\n     CKey key;\n     key.MakeNewKey();\n     if (!AddKey(key))\n-        throw std::runtime_error(\"GenerateNewKey() : AddKey failed\");\n+        throw std::runtime_error(\"CKeyStore::GenerateNewKey() : AddKey failed\");\n     return key.GetPubKey();\n }\n \n-bool CKeyStore::AddKey(const CKey& key)\n+bool CBasicKeyStore::AddKey(const CKey& key)\n {\n-    CRITICAL_BLOCK(cs_mapKeys)\n+    CRITICAL_BLOCK(cs_mapPubKeys)\n+    CRITICAL_BLOCK(cs_KeyStore)\n     {\n         mapKeys[key.GetPubKey()] = key.GetPrivKey();\n         mapPubKeys[Hash160(key.GetPubKey())] = key.GetPubKey();\n     }\n+    return true;\n+}\n+\n+std::vector<unsigned char> CCryptoKeyStore::GenerateNewKey()\n+{\n+    RandAddSeedPerfmon();\n+    CKey key;\n+    key.MakeNewKey();\n+    if (!AddKey(key))\n+        throw std::runtime_error(\"CCryptoKeyStore::GenerateNewKey() : AddKey failed\");\n+    return key.GetPubKey();\n+}\n+\n+bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n+{\n+    CRITICAL_BLOCK(cs_vMasterKey)\n+    {\n+        if (!SetCrypted())\n+            return false;\n+\n+        std::map<std::vector<unsigned char>, std::vector<unsigned char> >::const_iterator mi = mapCryptedKeys.begin();\n+        for (; mi != mapCryptedKeys.end(); ++mi)\n+        {\n+            const std::vector<unsigned char> &vchPubKey = (*mi).first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second;\n+            CSecret vchSecret;\n+            if(!DecryptSecret(vMasterKeyIn, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecret))\n+                return false;\n+            CKey key;\n+            key.SetSecret(vchSecret);\n+            if (key.GetPubKey() == vchPubKey)\n+                break;\n+            return false;\n+        }\n+        vMasterKey = vMasterKeyIn;\n+    }\n+    return true;\n }\n \n+bool CCryptoKeyStore::AddKey(const CKey& key)\n+{\n+    CRITICAL_BLOCK(cs_KeyStore)\n+    CRITICAL_BLOCK(cs_vMasterKey)\n+    {\n+        if (!IsCrypted())\n+            return CBasicKeyStore::AddKey(key);\n+\n+        if (IsLocked())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret;\n+        std::vector<unsigned char> vchPubKey = key.GetPubKey();\n+        if (!EncryptSecret(vMasterKey, key.GetSecret(), Hash(vchPubKey.begin(), vchPubKey.end()), vchCryptedSecret))\n+            return false;\n+\n+        if (!AddCryptedKey(key.GetPubKey(), vchCryptedSecret))\n+            return false;\n+    }\n+    return true;\n+}\n+\n+\n+bool CCryptoKeyStore::AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    CRITICAL_BLOCK(cs_mapPubKeys)\n+    CRITICAL_BLOCK(cs_KeyStore)\n+    {\n+        if (!SetCrypted())\n+            return false;\n+\n+        mapCryptedKeys[vchPubKey] = vchCryptedSecret;\n+        mapPubKeys[Hash160(vchPubKey)] = vchPubKey;\n+    }\n+    return true;\n+}\n+\n+bool CCryptoKeyStore::GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const\n+{\n+    CRITICAL_BLOCK(cs_vMasterKey)\n+    {\n+        if (!IsCrypted())\n+            return CBasicKeyStore::GetPrivKey(vchPubKey, keyOut);\n+\n+        std::map<std::vector<unsigned char>, std::vector<unsigned char> >::const_iterator mi = mapCryptedKeys.find(vchPubKey);\n+        if (mi != mapCryptedKeys.end())\n+        {\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second;\n+            CSecret vchSecret;\n+            if (!DecryptSecret(vMasterKey, (*mi).second, Hash((*mi).first.begin(), (*mi).first.end()), vchSecret))\n+                return false;\n+            keyOut.SetSecret(vchSecret);\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n+{\n+    CRITICAL_BLOCK(cs_KeyStore)\n+    CRITICAL_BLOCK(cs_vMasterKey)\n+    {\n+        if (!mapCryptedKeys.empty() || IsCrypted())\n+            return false;\n+\n+        fUseCrypto = true;\n+        CKey key;\n+        BOOST_FOREACH(KeyMap::value_type& mKey, mapKeys)\n+        {\n+            if (!key.SetPrivKey(mKey.second))\n+                return false;\n+            std::vector<unsigned char> vchCryptedSecret;\n+            if (!EncryptSecret(vMasterKeyIn, key.GetSecret(), Hash(mKey.first.begin(), mKey.first.end()), vchCryptedSecret))\n+                return false;\n+            if (!AddCryptedKey(mKey.first, vchCryptedSecret))\n+                return false;\n+        }\n+        mapKeys.clear();\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "0dc09f05b8dd38b403aec1ac2c5de846ea030bb8",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 90,
        "deletions": 5,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -4,27 +4,112 @@\n #ifndef BITCOIN_KEYSTORE_H\n #define BITCOIN_KEYSTORE_H\n \n+#include \"crypter.h\"\n+\n class CKeyStore\n {\n public:\n-    std::map<std::vector<unsigned char>, CPrivKey> mapKeys;\n-    mutable CCriticalSection cs_mapKeys;\n-    virtual bool AddKey(const CKey& key);\n+    mutable CCriticalSection cs_KeyStore;\n+\n+    virtual bool AddKey(const CKey& key) =0;\n+    virtual bool HaveKey(const std::vector<unsigned char> &vchPubKey) const =0;\n+    virtual bool GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const =0;\n+    virtual std::vector<unsigned char> GenerateNewKey();\n+};\n+\n+typedef std::map<std::vector<unsigned char>, CPrivKey> KeyMap;\n+\n+class CBasicKeyStore : public CKeyStore\n+{\n+protected:\n+    KeyMap mapKeys;\n+\n+public:\n+    bool AddKey(const CKey& key);\n     bool HaveKey(const std::vector<unsigned char> &vchPubKey) const\n     {\n         return (mapKeys.count(vchPubKey) > 0);\n     }\n-    bool GetPrivKey(const std::vector<unsigned char> &vchPubKey, CPrivKey& keyOut) const\n+    bool GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const\n     {\n         std::map<std::vector<unsigned char>, CPrivKey>::const_iterator mi = mapKeys.find(vchPubKey);\n         if (mi != mapKeys.end())\n         {\n-            keyOut = (*mi).second;\n+            keyOut.SetPrivKey((*mi).second);\n             return true;\n         }\n         return false;\n     }\n+};\n+\n+class CCryptoKeyStore : public CBasicKeyStore\n+{\n+private:\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char> > mapCryptedKeys;\n+\n+    CKeyingMaterial vMasterKey;\n+\n+    // if fUseCrypto is true, mapKeys must be empty\n+    // if fUseCrypto is false, vMasterKey must be empty\n+    bool fUseCrypto;\n+\n+protected:\n+    bool SetCrypted()\n+    {\n+        if (fUseCrypto)\n+            return true;\n+        if (!mapKeys.empty())\n+            return false;\n+        fUseCrypto = true;\n+        return true;\n+    }\n+\n+    // will encrypt previously unencrypted keys\n+    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn);\n+\n+public:\n+    mutable CCriticalSection cs_vMasterKey; //No guarantees master key wont get locked before you can use it, so lock this first\n+\n+    CCryptoKeyStore() : fUseCrypto(false)\n+    {\n+    }\n+\n+    bool IsCrypted() const\n+    {\n+        return fUseCrypto;\n+    }\n+\n+    bool IsLocked() const\n+    {\n+        if (!IsCrypted())\n+            return false;\n+        return vMasterKey.empty();\n+    }\n+\n+    bool Lock()\n+    {\n+        CRITICAL_BLOCK(cs_vMasterKey)\n+        {\n+            if (!SetCrypted())\n+                return false;\n+\n+            vMasterKey.clear();\n+        }\n+        return true;\n+    }\n+\n+    virtual bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     std::vector<unsigned char> GenerateNewKey();\n+    bool AddKey(const CKey& key);\n+    bool HaveKey(const std::vector<unsigned char> &vchPubKey) const\n+    {\n+        if (!IsCrypted())\n+            return CBasicKeyStore::HaveKey(vchPubKey);\n+        return mapCryptedKeys.count(vchPubKey) > 0;\n+    }\n+    bool GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const;\n };\n \n #endif"
      },
      {
        "sha": "dda711d13917b2f852336e8c36d8d6c6f85e3a29",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -63,7 +63,6 @@ int64 nHPSTimerStart;\n // Settings\n int fGenerateBitcoins = false;\n int64 nTransactionFee = 0;\n-CAddress addrIncoming;\n int fLimitProcessors = false;\n int nLimitProcessors = 1;\n int fMinimizeToTray = true;\n@@ -1697,7 +1696,7 @@ string GetWarnings(string strFor)\n         return strStatusBar;\n     else if (strFor == \"rpc\")\n         return strRPC;\n-    assert((\"GetWarnings() : invalid parameter\", false));\n+    assert(!\"GetWarnings() : invalid parameter\");\n     return \"error\";\n }\n \n@@ -2218,7 +2217,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         // Keep giving the same key to the same ip until they use it\n         if (!mapReuseKey.count(pfrom->addr.ip))\n-            mapReuseKey[pfrom->addr.ip] = pwalletMain->GetKeyFromKeyPool();\n+            mapReuseKey[pfrom->addr.ip] = pwalletMain->GetOrReuseKeyFromPool();\n \n         // Send back approval of order and pubkey to use\n         CScript scriptPubKey;"
      },
      {
        "sha": "79445b0566b4d1c6fe59ab48cfb1653261a2872c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -39,6 +39,8 @@ static const int64 MIN_RELAY_TX_FEE = 10000;\n static const int64 MAX_MONEY = 21000000 * COIN;\n inline bool MoneyRange(int64 nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n static const int COINBASE_MATURITY = 100;\n+// Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp.\n+static const int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n #ifdef USE_UPNP\n static const int fHaveUPnP = true;\n #else\n@@ -70,7 +72,6 @@ extern std::set<CWallet*> setpwalletRegistered;\n // Settings\n extern int fGenerateBitcoins;\n extern int64 nTransactionFee;\n-extern CAddress addrIncoming;\n extern int fLimitProcessors;\n extern int nLimitProcessors;\n extern int fMinimizeToTray;\n@@ -443,7 +444,7 @@ class CTransaction\n             nBlockHeight = nBestHeight;\n         if (nBlockTime == 0)\n             nBlockTime = GetAdjustedTime();\n-        if ((int64)nLockTime < (nLockTime < 500000000 ? (int64)nBlockHeight : nBlockTime))\n+        if ((int64)nLockTime < (nLockTime < LOCKTIME_THRESHOLD ? (int64)nBlockHeight : nBlockTime))\n             return true;\n         BOOST_FOREACH(const CTxIn& txin, vin)\n             if (!txin.IsFinal())"
      },
      {
        "sha": "05cc10957f5a48f4d4f0baa8814e0da061ac0c91",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 13,
        "deletions": 18,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -4,6 +4,8 @@\n \n DEPSDIR:=/usr/i586-mingw32msvc\n \n+USE_UPNP:=0\n+\n INCLUDEPATHS= \\\n  -I\"$(DEPSDIR)/boost_1_43_0\" \\\n  -I\"$(DEPSDIR)/db-4.7.25.NC/build_unix\" \\\n@@ -33,24 +35,16 @@ LIBS= \\\n DEFS=-D_MT -DWIN32 -D__WXMSW__ -D_WINDOWS -DNOPCH -DUSE_SSL\n DEBUGFLAGS=-g -D__WXDEBUG__\n CFLAGS=-O2 -w -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h option.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h init.h\n-\n-bitcoin.exe: USE_UPNP:=1\n-\tifdef USE_UPNP\n-\t\tINCLUDEPATHS += -I\"$(DEPSDIR)/upnpc-exe-win32-20110215\"\n-\t\tLIBPATHS += -L\"$(DEPSDIR)/upnpc-exe-win32-20110215\"\n-\t\tLIBS += -l miniupnpc -l iphlpapi\n-\t\tDEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)\n-\tendif\n-\n-bitcoind.exe: USE_UPNP:=0\n-\tifdef USE_UPNP\n-\t\tINCLUDEPATHS += -I\"$(DEPSDIR)/upnpc-exe-win32-20110215\"\n-\t\tLIBPATHS += -L\"$(DEPSDIR)/upnpc-exe-win32-20110215\"\n-\t\tLIBS += -l miniupnpc -l iphlpapi\n-\t\tDEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)\n-\tendif\n+\n+\n+HEADERS=$(wildcard *.h)\n+\n+ifdef USE_UPNP\n+\tINCLUDEPATHS += -I\"$(DEPSDIR)/upnpc-exe-win32-20110215\"\n+\tLIBPATHS += -L\"$(DEPSDIR)/upnpc-exe-win32-20110215\"\n+\tLIBS += -l miniupnpc -l iphlpapi\n+\tDEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)\n+endif\n \n LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l shlwapi\n \n@@ -66,6 +60,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/rpc.o \\\n     obj/init.o \\\n+    obj/crypter.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o\n "
      },
      {
        "sha": "19f8a24644c4b26c6c980ac5da443cd03f0e66b7",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -32,8 +32,8 @@ LIBS= \\\n DEFS=-DWIN32 -D__WXMSW__ -D_WINDOWS -DNOPCH -DUSE_SSL\n DEBUGFLAGS=-g -D__WXDEBUG__\n CFLAGS=-mthreads -O2 -w -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h option.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h init.h\n+\n+HEADERS=$(wildcard *.h)\n \n ifdef USE_UPNP\n  INCLUDEPATHS += -I\"C:\\upnpc-exe-win32-20110215\"\n@@ -56,6 +56,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/rpc.o \\\n     obj/init.o \\\n+    obj/crypter.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o\n "
      },
      {
        "sha": "6a96725b301e40149bbe00b3c7032fbde5e0daf2",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -32,8 +32,8 @@ DEFS=$(shell $(DEPSDIR)/bin/wx-config --cxxflags) -D__WXMAC_OSX__ -DNOPCH -DMSG_\n DEBUGFLAGS=-g -DwxDEBUG_LEVEL=0\n # ppc doesn't work because we don't support big-endian\n CFLAGS=-mmacosx-version-min=10.5 -arch i386 -arch x86_64 -O3 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h option.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h init.h\n+\n+HEADERS=$(wildcard *.h)\n \n OBJS= \\\n     obj/util.o \\\n@@ -47,6 +47,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/rpc.o \\\n     obj/init.o \\\n+    obj/crypter.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o\n "
      },
      {
        "sha": "4ba1472ae5034e536e48b10f5d0f11891b06c430",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -38,8 +38,8 @@ LIBS+= \\\n \n DEBUGFLAGS=-g -D__WXDEBUG__\n CXXFLAGS=-O2 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h option.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h init.h\n+\n+HEADERS=$(wildcard *.h)\n \n OBJS= \\\n     obj/util.o \\\n@@ -53,6 +53,7 @@ OBJS= \\\n     obj/wallet.o \\\n     obj/rpc.o \\\n     obj/init.o \\\n+    obj/crypter.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o\n "
      },
      {
        "sha": "41f121dbedbd8dcbc2777c342c074ed763c83401",
        "filename": "src/makefile.vc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/makefile.vc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/makefile.vc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.vc?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -45,8 +45,8 @@ LIBS=$(LIBS) \\\n \n DEBUGFLAGS=/Os\n CFLAGS=/MD /c /nologo /EHsc /GR /Zm300 $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h option.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h main.h rpc.h uibase.h ui.h noui.h init.h wallet.h keystore.h\n+\n+HEADERS=$(wildcard *.h)\n \n OBJS= \\\n     obj\\util.obj \\"
      },
      {
        "sha": "9d7f626a8036ad1902e33fe0c9f99b0e51d33a8a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -865,7 +865,7 @@ void ThreadSocketHandler2(void* parg)\n         {\n             BOOST_FOREACH(CNode* pnode, vNodes)\n             {\n-                if (pnode->hSocket == INVALID_SOCKET || pnode->hSocket < 0)\n+                if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n                 FD_SET(pnode->hSocket, &fdsetRecv);\n                 FD_SET(pnode->hSocket, &fdsetError);\n@@ -1743,7 +1743,7 @@ void StartNode(void* parg)\n             printf(\"Error: CreateThread(ThreadIRCSeed) failed\\n\");\n \n     // Send and receive from sockets, accept connections\n-    pthread_t hThreadSocketHandler = CreateThread(ThreadSocketHandler, NULL, true);\n+    CreateThread(ThreadSocketHandler, NULL, true);\n \n     // Initiate outbound connections\n     if (!CreateThread(ThreadOpenConnections, NULL))"
      },
      {
        "sha": "66b2464eb1e7ae8a87952a8cc0286badd7183d21",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 340,
        "deletions": 68,
        "changes": 408,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -74,6 +74,9 @@ void ThreadRPCServer2(void* parg);\n typedef Value(*rpcfn_type)(const Array& params, bool fHelp);\n extern map<string, rpcfn_type> mapCallTable;\n \n+static int64 nWalletUnlockTime;\n+static CCriticalSection cs_nWalletUnlockTime;\n+\n \n Object JSONRPCError(int code, const string& message)\n {\n@@ -360,7 +363,10 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"hashespersec\",  gethashespersec(params, false)));\n     obj.push_back(Pair(\"testnet\",       fTestNet));\n     obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n+    obj.push_back(Pair(\"keypoolsize\",   pwalletMain->GetKeyPoolSize()));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n+    if (pwalletMain->IsCrypted())\n+        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     return obj;\n }\n@@ -375,13 +381,19 @@ Value getnewaddress(const Array& params, bool fHelp)\n             \"If [account] is specified (recommended), it is added to the address book \"\n             \"so payments received with the address will be credited to [account].\");\n \n+    if (!pwalletMain->IsLocked())\n+        pwalletMain->TopUpKeyPool();\n+\n+    if (pwalletMain->GetKeyPoolSize() < 1)\n+        throw JSONRPCError(-12, \"Error: Keypool ran out, please call keypoolrefill first\");\n+\n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n     if (params.size() > 0)\n         strAccount = AccountFromValue(params[0]);\n \n     // Generate a new key that is added to wallet\n-    string strAddress = PubKeyToAddress(pwalletMain->GetKeyFromKeyPool());\n+    string strAddress = PubKeyToAddress(pwalletMain->GetOrReuseKeyFromPool());\n \n     // This could be done in the same main CS as GetKeyFromKeyPool.\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n@@ -397,37 +409,48 @@ string GetAccountAddress(string strAccount, bool bForceNew=false)\n     string strAddress;\n \n     CWalletDB walletdb(pwalletMain->strWalletFile);\n-    walletdb.TxnBegin();\n \n     CAccount account;\n-    walletdb.ReadAccount(strAccount, account);\n-\n-    // Check if the current key has been used\n-    if (!account.vchPubKey.empty())\n+    CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        CScript scriptPubKey;\n-        scriptPubKey.SetBitcoinAddress(account.vchPubKey);\n-        for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n-             it != pwalletMain->mapWallet.end() && !account.vchPubKey.empty();\n-             ++it)\n+        walletdb.ReadAccount(strAccount, account);\n+\n+        bool bKeyUsed = false;\n+\n+        // Check if the current key has been used\n+        if (!account.vchPubKey.empty())\n         {\n-            const CWalletTx& wtx = (*it).second;\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-                if (txout.scriptPubKey == scriptPubKey)\n-                    account.vchPubKey.clear();\n+            CScript scriptPubKey;\n+            scriptPubKey.SetBitcoinAddress(account.vchPubKey);\n+            for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n+                 it != pwalletMain->mapWallet.end() && !account.vchPubKey.empty();\n+                 ++it)\n+            {\n+                const CWalletTx& wtx = (*it).second;\n+                BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+                    if (txout.scriptPubKey == scriptPubKey)\n+                        bKeyUsed = true;\n+            }\n         }\n-    }\n \n-    // Generate a new key\n-    if (account.vchPubKey.empty() || bForceNew)\n-    {\n-        account.vchPubKey = pwalletMain->GetKeyFromKeyPool();\n-        string strAddress = PubKeyToAddress(account.vchPubKey);\n-        pwalletMain->SetAddressBookName(strAddress, strAccount);\n-        walletdb.WriteAccount(strAccount, account);\n+        // Generate a new key\n+        if (account.vchPubKey.empty() || bForceNew || bKeyUsed)\n+        {\n+            if (pwalletMain->GetKeyPoolSize() < 1)\n+            {\n+                if (bKeyUsed || bForceNew)\n+                    throw JSONRPCError(-12, \"Error: Keypool ran out, please call topupkeypool first\");\n+            }\n+            else\n+            {\n+                account.vchPubKey = pwalletMain->GetOrReuseKeyFromPool();\n+                string strAddress = PubKeyToAddress(account.vchPubKey);\n+                pwalletMain->SetAddressBookName(strAddress, strAccount);\n+                walletdb.WriteAccount(strAccount, account);\n+            }\n+        }\n     }\n \n-    walletdb.TxnCommit();\n     strAddress = PubKeyToAddress(account.vchPubKey);\n \n     return strAddress;\n@@ -561,7 +584,12 @@ Value settxfee(const Array& params, bool fHelp)\n \n Value sendtoaddress(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 4)\n+    if (pwalletMain->IsCrypted() && (fHelp || params.size() < 2 || params.size() > 4))\n+        throw runtime_error(\n+            \"sendtoaddress <bitcoinaddress> <amount> [comment] [comment-to]\\n\"\n+            \"<amount> is a real and is rounded to the nearest 0.00000001\\n\"\n+            \"requires wallet passphrase to be set with walletpassphrase first\");\n+    if (!pwalletMain->IsCrypted() && (fHelp || params.size() < 2 || params.size() > 4))\n         throw runtime_error(\n             \"sendtoaddress <bitcoinaddress> <amount> [comment] [comment-to]\\n\"\n             \"<amount> is a real and is rounded to the nearest 0.00000001\");\n@@ -579,7 +607,11 @@ Value sendtoaddress(const Array& params, bool fHelp)\n         wtx.mapValue[\"to\"]      = params[3].get_str();\n \n     CRITICAL_BLOCK(cs_main)\n+    CRITICAL_BLOCK(pwalletMain->cs_vMasterKey)\n     {\n+        if(pwalletMain->IsLocked())\n+            throw JSONRPCError(-14, \"Error: The wallet passphrase entered was incorrect.\");\n+\n         string strError = pwalletMain->SendMoneyToBitcoinAddress(strAddress, nAmount, wtx);\n         if (strError != \"\")\n             throw JSONRPCError(-4, strError);\n@@ -725,7 +757,7 @@ int64 GetAccountBalance(const string& strAccount, int nMinDepth)\n \n Value getbalance(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 0 || params.size() > 2)\n+    if (fHelp || params.size() > 2)\n         throw runtime_error(\n             \"getbalance [account] [minconf=1]\\n\"\n             \"If [account] is not specified, returns the server's total available balance.\\n\"\n@@ -824,7 +856,12 @@ Value movecmd(const Array& params, bool fHelp)\n \n Value sendfrom(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 3 || params.size() > 6)\n+    if (pwalletMain->IsCrypted() && (fHelp || params.size() < 3 || params.size() > 6))\n+        throw runtime_error(\n+            \"sendfrom <fromaccount> <tobitcoinaddress> <amount> [minconf=1] [comment] [comment-to]\\n\"\n+            \"<amount> is a real and is rounded to the nearest 0.00000001\\n\"\n+            \"requires wallet passphrase to be set with walletpassphrase first\");\n+    if (!pwalletMain->IsCrypted() && (fHelp || params.size() < 3 || params.size() > 6))\n         throw runtime_error(\n             \"sendfrom <fromaccount> <tobitcoinaddress> <amount> [minconf=1] [comment] [comment-to]\\n\"\n             \"<amount> is a real and is rounded to the nearest 0.00000001\");\n@@ -845,7 +882,11 @@ Value sendfrom(const Array& params, bool fHelp)\n \n     CRITICAL_BLOCK(cs_main)\n     CRITICAL_BLOCK(pwalletMain->cs_mapWallet)\n+    CRITICAL_BLOCK(pwalletMain->cs_vMasterKey)\n     {\n+        if(pwalletMain->IsLocked())\n+            throw JSONRPCError(-14, \"Error: The wallet passphrase entered was incorrect.\");\n+\n         // Check funds\n         int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n         if (nAmount > nBalance)\n@@ -860,9 +901,15 @@ Value sendfrom(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n+\n Value sendmany(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 4)\n+    if (pwalletMain->IsCrypted() && (fHelp || params.size() < 2 || params.size() > 4))\n+        throw runtime_error(\n+            \"sendmany <fromaccount> {address:amount,...} [minconf=1] [comment]\\n\"\n+            \"amounts are double-precision floating point numbers\\n\"\n+            \"requires wallet passphrase to be set with walletpassphrase first\");\n+    if (!pwalletMain->IsCrypted() && (fHelp || params.size() < 2 || params.size() > 4))\n         throw runtime_error(\n             \"sendmany <fromaccount> {address:amount,...} [minconf=1] [comment]\\n\"\n             \"amounts are double-precision floating point numbers\");\n@@ -902,7 +949,11 @@ Value sendmany(const Array& params, bool fHelp)\n \n     CRITICAL_BLOCK(cs_main)\n     CRITICAL_BLOCK(pwalletMain->cs_mapWallet)\n+    CRITICAL_BLOCK(pwalletMain->cs_vMasterKey)\n     {\n+        if(pwalletMain->IsLocked())\n+            throw JSONRPCError(-14, \"Error: The wallet passphrase entered was incorrect.\");\n+\n         // Check funds\n         int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n         if (totalAmount > nBalance)\n@@ -1332,6 +1383,219 @@ Value backupwallet(const Array& params, bool fHelp)\n }\n \n \n+Value keypoolrefill(const Array& params, bool fHelp)\n+{\n+    if (pwalletMain->IsCrypted() && (fHelp || params.size() > 0))\n+        throw runtime_error(\n+            \"keypoolrefill\\n\"\n+            \"Fills the keypool, requires wallet passphrase to be set.\");\n+    if (!pwalletMain->IsCrypted() && (fHelp || params.size() > 0))\n+        throw runtime_error(\n+            \"keypoolrefill\\n\"\n+            \"Fills the keypool.\");\n+\n+    CRITICAL_BLOCK(pwalletMain->cs_vMasterKey)\n+    {\n+        if (pwalletMain->IsLocked())\n+            throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+\n+        pwalletMain->TopUpKeyPool();\n+    }\n+\n+    if (pwalletMain->GetKeyPoolSize() < keypoolOpt())\n+        throw JSONRPCError(-4, \"Error refreshing keypool.\");\n+\n+    return Value::null;\n+}\n+\n+\n+void ThreadTopUpKeyPool(void* parg)\n+{\n+    pwalletMain->TopUpKeyPool();\n+}\n+\n+void ThreadCleanWalletPassphrase(void* parg)\n+{\n+    int64 nMyWakeTime = GetTime() + *((int*)parg);\n+\n+    if (nWalletUnlockTime == 0)\n+    {\n+        CRITICAL_BLOCK(cs_nWalletUnlockTime)\n+        {\n+            nWalletUnlockTime = nMyWakeTime;\n+        }\n+\n+        while (GetTime() < nWalletUnlockTime)\n+            Sleep(GetTime() - nWalletUnlockTime);\n+\n+        CRITICAL_BLOCK(cs_nWalletUnlockTime)\n+        {\n+            nWalletUnlockTime = 0;\n+        }\n+    }\n+    else\n+    {\n+        CRITICAL_BLOCK(cs_nWalletUnlockTime)\n+        {\n+            if (nWalletUnlockTime < nMyWakeTime)\n+                nWalletUnlockTime = nMyWakeTime;\n+        }\n+        free(parg);\n+        return;\n+    }\n+\n+    pwalletMain->Lock();\n+\n+    delete (int*)parg;\n+}\n+\n+Value walletpassphrase(const Array& params, bool fHelp)\n+{\n+    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+        throw runtime_error(\n+            \"walletpassphrase <passphrase> <timeout>\\n\"\n+            \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n+    if (fHelp)\n+        return true;\n+    if (!pwalletMain->IsCrypted())\n+        throw JSONRPCError(-15, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+\n+    if (!pwalletMain->IsLocked())\n+        throw JSONRPCError(-17, \"Error: Wallet is already unlocked.\");\n+\n+    // Note that the walletpassphrase is stored in params[0] which is not mlock()ed\n+    string strWalletPass;\n+    strWalletPass.reserve(100);\n+    mlock(&strWalletPass[0], strWalletPass.capacity());\n+    strWalletPass = params[0].get_str();\n+\n+    CRITICAL_BLOCK(pwalletMain->cs_vMasterKey)\n+    {\n+        if (strWalletPass.length() > 0)\n+        {\n+            if (!pwalletMain->Unlock(strWalletPass))\n+            {\n+                fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n+                munlock(&strWalletPass[0], strWalletPass.capacity());\n+                throw JSONRPCError(-14, \"Error: The wallet passphrase entered was incorrect.\");\n+            }\n+            fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n+            munlock(&strWalletPass[0], strWalletPass.capacity());\n+        }\n+        else\n+            throw runtime_error(\n+                \"walletpassphrase <passphrase> <timeout>\\n\"\n+                \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n+    }\n+\n+    CreateThread(ThreadTopUpKeyPool, NULL);\n+    int* pnSleepTime = new int(params[1].get_int());\n+    CreateThread(ThreadCleanWalletPassphrase, pnSleepTime);\n+\n+    return Value::null;\n+}\n+\n+\n+Value walletpassphrasechange(const Array& params, bool fHelp)\n+{\n+    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+        throw runtime_error(\n+            \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n+            \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n+    if (fHelp)\n+        return true;\n+    if (!pwalletMain->IsCrypted())\n+        throw JSONRPCError(-15, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n+\n+    string strOldWalletPass;\n+    strOldWalletPass.reserve(100);\n+    mlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n+    strOldWalletPass = params[0].get_str();\n+\n+    string strNewWalletPass;\n+    strNewWalletPass.reserve(100);\n+    mlock(&strNewWalletPass[0], strNewWalletPass.capacity());\n+    strNewWalletPass = params[1].get_str();\n+\n+    if (strOldWalletPass.length() < 1 || strNewWalletPass.length() < 1)\n+        throw runtime_error(\n+            \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n+            \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n+\n+    if (!pwalletMain->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n+    {\n+        fill(strOldWalletPass.begin(), strOldWalletPass.end(), '\\0');\n+        fill(strNewWalletPass.begin(), strNewWalletPass.end(), '\\0');\n+        munlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n+        munlock(&strNewWalletPass[0], strNewWalletPass.capacity());\n+        throw JSONRPCError(-14, \"Error: The wallet passphrase entered was incorrect.\");\n+    }\n+    fill(strNewWalletPass.begin(), strNewWalletPass.end(), '\\0');\n+    fill(strOldWalletPass.begin(), strOldWalletPass.end(), '\\0');\n+    munlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n+    munlock(&strNewWalletPass[0], strNewWalletPass.capacity());\n+\n+    return Value::null;\n+}\n+\n+\n+Value walletlock(const Array& params, bool fHelp)\n+{\n+    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n+        throw runtime_error(\n+            \"walletlock\\n\"\n+            \"Removes the wallet encryption key from memory, locking the wallet.\\n\"\n+            \"After calling this method, you will need to call walletpassphrase again\\n\"\n+            \"before being able to call any methods which require the wallet to be unlocked.\");\n+    if (fHelp)\n+        return true;\n+    if (!pwalletMain->IsCrypted())\n+        throw JSONRPCError(-15, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n+\n+    pwalletMain->Lock();\n+    CRITICAL_BLOCK(cs_nWalletUnlockTime)\n+    {\n+        nWalletUnlockTime = 0;\n+    }\n+\n+    return Value::null;\n+}\n+\n+\n+Value encryptwallet(const Array& params, bool fHelp)\n+{\n+    if (!pwalletMain->IsCrypted() && (fHelp || params.size() != 1))\n+        throw runtime_error(\n+            \"encryptwallet <passphrase>\\n\"\n+            \"Encrypts the wallet with <passphrase>.\");\n+    if (fHelp)\n+        return true;\n+    if (pwalletMain->IsCrypted())\n+        throw JSONRPCError(-15, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n+\n+    string strWalletPass;\n+    strWalletPass.reserve(100);\n+    mlock(&strWalletPass[0], strWalletPass.capacity());\n+    strWalletPass = params[0].get_str();\n+\n+    if (strWalletPass.length() < 1)\n+        throw runtime_error(\n+            \"encryptwallet <passphrase>\\n\"\n+            \"Encrypts the wallet with <passphrase>.\");\n+\n+    if (!pwalletMain->EncryptWallet(strWalletPass))\n+    {\n+        fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n+        munlock(&strWalletPass[0], strWalletPass.capacity());\n+        throw JSONRPCError(-16, \"Error: Failed to encrypt the wallet.\");\n+    }\n+    fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n+    munlock(&strWalletPass[0], strWalletPass.capacity());\n+\n+    return Value::null;\n+}\n+\n+\n Value validateaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n@@ -1483,45 +1747,50 @@ Value getwork(const Array& params, bool fHelp)\n \n pair<string, rpcfn_type> pCallTable[] =\n {\n-    make_pair(\"help\",                  &help),\n-    make_pair(\"stop\",                  &stop),\n-    make_pair(\"reloadconfig\",          &reloadconfig),\n-    make_pair(\"getblockcount\",         &getblockcount),\n-    make_pair(\"getblocknumber\",        &getblocknumber),\n-    make_pair(\"getconnectioncount\",    &getconnectioncount),\n-    make_pair(\"getdifficulty\",         &getdifficulty),\n-    make_pair(\"getgenerate\",           &getgenerate),\n-    make_pair(\"setgenerate\",           &setgenerate),\n-    make_pair(\"gethashespersec\",       &gethashespersec),\n-    make_pair(\"getinfo\",               &getinfo),\n-    make_pair(\"getnewaddress\",         &getnewaddress),\n-    make_pair(\"getaccountaddress\",     &getaccountaddress),\n-    make_pair(\"setaccount\",            &setaccount),\n-    make_pair(\"setlabel\",              &setaccount), // deprecated\n-    make_pair(\"getaccount\",            &getaccount),\n-    make_pair(\"getlabel\",              &getaccount), // deprecated\n-    make_pair(\"getaddressesbyaccount\", &getaddressesbyaccount),\n-    make_pair(\"getaddressesbylabel\",   &getaddressesbyaccount), // deprecated\n-    make_pair(\"sendtoaddress\",         &sendtoaddress),\n-    make_pair(\"getamountreceived\",     &getreceivedbyaddress), // deprecated, renamed to getreceivedbyaddress\n-    make_pair(\"getallreceived\",        &listreceivedbyaddress), // deprecated, renamed to listreceivedbyaddress\n-    make_pair(\"getreceivedbyaddress\",  &getreceivedbyaddress),\n-    make_pair(\"getreceivedbyaccount\",  &getreceivedbyaccount),\n-    make_pair(\"getreceivedbylabel\",    &getreceivedbyaccount), // deprecated\n-    make_pair(\"listreceivedbyaddress\", &listreceivedbyaddress),\n-    make_pair(\"listreceivedbyaccount\", &listreceivedbyaccount),\n-    make_pair(\"listreceivedbylabel\",   &listreceivedbyaccount), // deprecated\n-    make_pair(\"backupwallet\",          &backupwallet),\n-    make_pair(\"validateaddress\",       &validateaddress),\n-    make_pair(\"getbalance\",            &getbalance),\n-    make_pair(\"move\",                  &movecmd),\n-    make_pair(\"sendfrom\",              &sendfrom),\n-    make_pair(\"sendmany\",              &sendmany),\n-    make_pair(\"gettransaction\",        &gettransaction),\n-    make_pair(\"listtransactions\",      &listtransactions),\n-    make_pair(\"getwork\",               &getwork),\n-    make_pair(\"listaccounts\",          &listaccounts),\n-    make_pair(\"settxfee\",              &settxfee),\n+    make_pair(\"help\",                   &help),\n+    make_pair(\"stop\",                   &stop),\n+    make_pair(\"reloadconfig\",           &reloadconfig),\n+    make_pair(\"getblockcount\",          &getblockcount),\n+    make_pair(\"getblocknumber\",         &getblocknumber),\n+    make_pair(\"getconnectioncount\",     &getconnectioncount),\n+    make_pair(\"getdifficulty\",          &getdifficulty),\n+    make_pair(\"getgenerate\",            &getgenerate),\n+    make_pair(\"setgenerate\",            &setgenerate),\n+    make_pair(\"gethashespersec\",        &gethashespersec),\n+    make_pair(\"getinfo\",                &getinfo),\n+    make_pair(\"getnewaddress\",          &getnewaddress),\n+    make_pair(\"getaccountaddress\",      &getaccountaddress),\n+    make_pair(\"setaccount\",             &setaccount),\n+    make_pair(\"setlabel\",               &setaccount), // deprecated\n+    make_pair(\"getaccount\",             &getaccount),\n+    make_pair(\"getlabel\",               &getaccount), // deprecated\n+    make_pair(\"getaddressesbyaccount\",  &getaddressesbyaccount),\n+    make_pair(\"getaddressesbylabel\",    &getaddressesbyaccount), // deprecated\n+    make_pair(\"sendtoaddress\",          &sendtoaddress),\n+    make_pair(\"getamountreceived\",      &getreceivedbyaddress), // deprecated, renamed to getreceivedbyaddress\n+    make_pair(\"getallreceived\",         &listreceivedbyaddress), // deprecated, renamed to listreceivedbyaddress\n+    make_pair(\"getreceivedbyaddress\",   &getreceivedbyaddress),\n+    make_pair(\"getreceivedbyaccount\",   &getreceivedbyaccount),\n+    make_pair(\"getreceivedbylabel\",     &getreceivedbyaccount), // deprecated\n+    make_pair(\"listreceivedbyaddress\",  &listreceivedbyaddress),\n+    make_pair(\"listreceivedbyaccount\",  &listreceivedbyaccount),\n+    make_pair(\"listreceivedbylabel\",    &listreceivedbyaccount), // deprecated\n+    make_pair(\"backupwallet\",           &backupwallet),\n+    make_pair(\"keypoolrefill\",          &keypoolrefill),\n+    make_pair(\"walletpassphrase\",       &walletpassphrase),\n+    make_pair(\"walletpassphrasechange\", &walletpassphrasechange),\n+    make_pair(\"walletlock\",             &walletlock),\n+    make_pair(\"encryptwallet\",          &encryptwallet),\n+    make_pair(\"validateaddress\",        &validateaddress),\n+    make_pair(\"getbalance\",             &getbalance),\n+    make_pair(\"move\",                   &movecmd),\n+    make_pair(\"sendfrom\",               &sendfrom),\n+    make_pair(\"sendmany\",               &sendmany),\n+    make_pair(\"gettransaction\",         &gettransaction),\n+    make_pair(\"listtransactions\",       &listtransactions),\n+    make_pair(\"getwork\",                &getwork),\n+    make_pair(\"listaccounts\",           &listaccounts),\n+    make_pair(\"settxfee\",               &settxfee),\n };\n map<string, rpcfn_type> mapCallTable(pCallTable, pCallTable + sizeof(pCallTable)/sizeof(pCallTable[0]));\n \n@@ -1545,6 +1814,9 @@ string pAllowInSafeMode[] =\n     \"getaddressesbyaccount\",\n     \"getaddressesbylabel\", // deprecated\n     \"backupwallet\",\n+    \"keypoolrefill\",\n+    \"walletpassphrase\",\n+    \"walletlock\",\n     \"validateaddress\",\n     \"getwork\",\n };\n@@ -2179,6 +2451,7 @@ int CommandLineRPC(int argc, char *argv[])\n         if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"listtransactions\"       && n > 2) ConvertTo<boost::int64_t>(params[2]);\n         if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+        if (strMethod == \"walletpassphrase\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"sendmany\"               && n > 1)\n         {\n             string s = params[1].get_str();\n@@ -2195,7 +2468,6 @@ int CommandLineRPC(int argc, char *argv[])\n         // Parse reply\n         const Value& result = find_value(reply, \"result\");\n         const Value& error  = find_value(reply, \"error\");\n-        const Value& id     = find_value(reply, \"id\");\n \n         if (error.type() != null_type)\n         {"
      },
      {
        "sha": "654aaa10e35aa186b03b8e2a44764e2708d2b696",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 9,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -580,6 +580,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     case OP_ABS:        if (bn < bnZero) bn = -bn; break;\n                     case OP_NOT:        bn = (bn == bnZero); break;\n                     case OP_0NOTEQUAL:  bn = (bn != bnZero); break;\n+                    default:            assert(!\"invalid opcode\"); break;\n                     }\n                     popstack(stack);\n                     stack.push_back(bn.getvch());\n@@ -659,6 +660,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     case OP_GREATERTHANOREQUAL:  bn = (bn1 >= bn2); break;\n                     case OP_MIN:                 bn = (bn1 < bn2 ? bn1 : bn2); break;\n                     case OP_MAX:                 bn = (bn1 > bn2 ? bn1 : bn2); break;\n+                    default:                     assert(!\"invalid opcode\"); break;\n                     }\n                     popstack(stack);\n                     popstack(stack);\n@@ -1030,21 +1032,21 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n         return false;\n \n     // Compile solution\n-    CRITICAL_BLOCK(keystore.cs_mapKeys)\n+    CRITICAL_BLOCK(keystore.cs_KeyStore)\n     {\n         BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n         {\n             if (item.first == OP_PUBKEY)\n             {\n                 // Sign\n                 const valtype& vchPubKey = item.second;\n-                CPrivKey privkey;\n-                if (!keystore.GetPrivKey(vchPubKey, privkey))\n+                CKey key;\n+                if (!keystore.GetPrivKey(vchPubKey, key))\n                     return false;\n                 if (hash != 0)\n                 {\n                     vector<unsigned char> vchSig;\n-                    if (!CKey::Sign(privkey, hash, vchSig))\n+                    if (!key.Sign(hash, vchSig))\n                         return false;\n                     vchSig.push_back((unsigned char)nHashType);\n                     scriptSigRet << vchSig;\n@@ -1057,13 +1059,13 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n                 if (mi == mapPubKeys.end())\n                     return false;\n                 const vector<unsigned char>& vchPubKey = (*mi).second;\n-                CPrivKey privkey;\n-                if (!keystore.GetPrivKey(vchPubKey, privkey))\n+                CKey key;\n+                if (!keystore.GetPrivKey(vchPubKey, key))\n                     return false;\n                 if (hash != 0)\n                 {\n                     vector<unsigned char> vchSig;\n-                    if (!CKey::Sign(privkey, hash, vchSig))\n+                    if (!key.Sign(hash, vchSig))\n                         return false;\n                     vchSig.push_back((unsigned char)nHashType);\n                     scriptSigRet << vchSig << vchPubKey;\n@@ -1089,8 +1091,40 @@ bool IsStandard(const CScript& scriptPubKey)\n \n bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n {\n-    CScript scriptSig;\n-    return Solver(keystore, scriptPubKey, 0, 0, scriptSig);\n+    vector<pair<opcodetype, valtype> > vSolution;\n+    if (!Solver(scriptPubKey, vSolution))\n+        return false;\n+\n+    // Compile solution\n+    CRITICAL_BLOCK(keystore.cs_KeyStore)\n+    {\n+        BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+        {\n+            if (item.first == OP_PUBKEY)\n+            {\n+                // Sign\n+                const valtype& vchPubKey = item.second;\n+                if (!keystore.HaveKey(vchPubKey))\n+                    return false;\n+            }\n+            else if (item.first == OP_PUBKEYHASH)\n+            {\n+                // Sign and give pubkey\n+                map<uint160, valtype>::iterator mi = mapPubKeys.find(uint160(item.second));\n+                if (mi == mapPubKeys.end())\n+                    return false;\n+                const vector<unsigned char>& vchPubKey = (*mi).second;\n+                if (!keystore.HaveKey(vchPubKey))\n+                    return false;\n+            }\n+            else\n+            {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n }\n \n "
      },
      {
        "sha": "2a36db2fafb33daba297a8c9474f7d4d9eb0807f",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -486,7 +486,7 @@ class CScript : public std::vector<unsigned char>\n     {\n         // I'm not sure if this should push the script or concatenate scripts.\n         // If there's ever a use for pushing a script onto a script, delete this member fn\n-        assert((\"warning: pushing a CScript onto a CScript with << is probably not intended, use + to concatenate\", false));\n+        assert(!\"warning: pushing a CScript onto a CScript with << is probably not intended, use + to concatenate\");\n         return *this;\n     }\n "
      },
      {
        "sha": "cb3a3ea03c410afbbaf77bb20954f042aa3fffa8",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 39,
        "deletions": 2,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -28,12 +28,36 @@ typedef unsigned long long  uint64;\n #if defined(_MSC_VER) && _MSC_VER < 1300\n #define for  if (false) ; else for\n #endif\n+\n+#ifdef __WXMSW__\n+// This is used to attempt to keep keying material out of swap\n+// Note that VirtualLock does not provide this as a guarantee on Windows,\n+// but, in practice, memory that has been VirtualLock'd almost never gets written to\n+// the pagefile except in rare circumstances where memory is extremely low.\n+#define mlock(p, n) VirtualLock((p), (n));\n+#define munlock(p, n) VirtualUnlock((p), (n));\n+#else\n+#include <sys/mman.h>\n+#include <limits.h>\n+/* This comes from limits.h if it's not defined there set a sane default */\n+#ifndef PAGESIZE\n+#include <unistd.h>\n+#define PAGESIZE sysconf(_SC_PAGESIZE)\n+#endif\n+#define mlock(a,b) \\\n+  mlock(((void *)(((size_t)(a)) & (~((PAGESIZE)-1)))),\\\n+  (((((size_t)(a)) + (b) - 1) | ((PAGESIZE) - 1)) + 1) - (((size_t)(a)) & (~((PAGESIZE) - 1))))\n+#define munlock(a,b) \\\n+  munlock(((void *)(((size_t)(a)) & (~((PAGESIZE)-1)))),\\\n+  (((((size_t)(a)) + (b) - 1) | ((PAGESIZE) - 1)) + 1) - (((size_t)(a)) & (~((PAGESIZE) - 1))))\n+#endif\n+\n class CScript;\n class CDataStream;\n class CAutoFile;\n static const unsigned int MAX_SIZE = 0x02000000;\n \n-static const int VERSION = 32400;\n+static const int VERSION = 32500;\n static const char* pszSubVer = \"\";\n static const bool VERSION_IS_BETA = true;\n \n@@ -755,7 +779,8 @@ struct ser_streamplaceholder\n \n \n //\n-// Allocator that clears its contents before deletion\n+// Allocator that locks its contents from being paged\n+// out of memory and clears its contents before deletion.\n //\n template<typename T>\n struct secure_allocator : public std::allocator<T>\n@@ -777,10 +802,22 @@ struct secure_allocator : public std::allocator<T>\n     template<typename _Other> struct rebind\n     { typedef secure_allocator<_Other> other; };\n \n+    T* allocate(std::size_t n, const void *hint = 0)\n+    {\n+        T *p;\n+        p = std::allocator<T>::allocate(n, hint);\n+        if (p != NULL)\n+            mlock(p, sizeof(T) * n);\n+        return p;\n+    }\n+\n     void deallocate(T* p, std::size_t n)\n     {\n         if (p != NULL)\n+        {\n             memset(p, 0, sizeof(T) * n);\n+            munlock(p, sizeof(T) * n);\n+        }\n         std::allocator<T>::deallocate(p, n);\n     }\n };"
      },
      {
        "sha": "ef6454bb5a8c213bba6da2a7110a32219b88a2de",
        "filename": "src/ui.cpp",
        "status": "modified",
        "additions": 262,
        "deletions": 13,
        "changes": 275,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/ui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/ui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -248,6 +248,41 @@ void SetDefaultReceivingAddress(const string& strAddress)\n     }\n }\n \n+bool GetWalletPassphrase()\n+{\n+    if (pwalletMain->IsLocked())\n+    {\n+        string strWalletPass;\n+        strWalletPass.reserve(100);\n+        mlock(&strWalletPass[0], strWalletPass.capacity());\n+\n+        // obtain current wallet encrypt/decrypt key, from passphrase\n+        // Note that the passphrase is not mlock()d during this entry and could potentially\n+        // be obtained from disk long after bitcoin has run.\n+        strWalletPass = wxGetPasswordFromUser(_(\"Enter the current passphrase to the wallet.\"),\n+                                              _(\"Passphrase\")).ToStdString();\n+\n+        if (!strWalletPass.size())\n+        {\n+            fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n+            munlock(&strWalletPass[0], strWalletPass.capacity());\n+            wxMessageBox(_(\"Please supply the current wallet decryption passphrase.\"), \"Bitcoin\");\n+            return false;\n+        }\n+\n+        if (!pwalletMain->Unlock(strWalletPass))\n+        {\n+            fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n+            munlock(&strWalletPass[0], strWalletPass.capacity());\n+            wxMessageBox(_(\"The passphrase entered for the wallet decryption was incorrect.\"), \"Bitcoin\");\n+            return false;\n+        }\n+        fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n+        munlock(&strWalletPass[0], strWalletPass.capacity());\n+    }\n+    return true;\n+}\n+\n \n \n \n@@ -336,6 +371,11 @@ CMainFrame::CMainFrame(wxWindow* parent) : CMainFrameBase(parent)\n     if (CWalletDB(pwalletMain->strWalletFile,\"r\").ReadDefaultKey(vchPubKey))\n         m_textCtrlAddress->SetValue(PubKeyToAddress(vchPubKey));\n \n+    if (pwalletMain->IsCrypted())\n+        m_menuOptions->Remove(m_menuOptionsEncryptWallet);\n+    else\n+        m_menuOptions->Remove(m_menuOptionsChangeWalletPassphrase);\n+\n     // Fill listctrl with wallet transactions\n     RefreshListCtrl();\n }\n@@ -525,7 +565,7 @@ string FormatTxStatus(const CWalletTx& wtx)\n     // Status\n     if (!wtx.IsFinal())\n     {\n-        if (wtx.nLockTime < 500000000)\n+        if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n             return strprintf(_(\"Open for %d blocks\"), nBestHeight - wtx.nLockTime);\n         else\n             return strprintf(_(\"Open until %s\"), DateTimeStr(wtx.nLockTime).c_str());\n@@ -1125,6 +1165,169 @@ void CMainFrame::OnMenuOptionsChangeYourAddress(wxCommandEvent& event)\n         return;\n }\n \n+void CMainFrame::OnMenuOptionsEncryptWallet(wxCommandEvent& event)\n+{\n+    // Options->Encrypt Wallet\n+    if (pwalletMain->IsCrypted())\n+    {\n+        wxMessageBox(_(\"Wallet already encrypted.\"), \"Bitcoin\", wxOK | wxICON_ERROR);\n+        return;\n+    }\n+\n+    string strWalletPass;\n+    strWalletPass.reserve(100);\n+    mlock(&strWalletPass[0], strWalletPass.capacity());\n+\n+    // obtain current wallet encrypt/decrypt key, from passphrase\n+    // Note that the passphrase is not mlock()d during this entry and could potentially\n+    // be obtained from disk long after bitcoin has run.\n+    strWalletPass = wxGetPasswordFromUser(_(\"Enter the new passphrase to the wallet.\\nPlease use a passphrase of 10 or more random characters, or eight or more words.\"),\n+                                          _(\"Passphrase\")).ToStdString();\n+\n+    if (!strWalletPass.size())\n+    {\n+        fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n+        munlock(&strWalletPass[0], strWalletPass.capacity());\n+        wxMessageBox(_(\"Error: The supplied passphrase was too short.\"), \"Bitcoin\", wxOK | wxICON_ERROR);\n+        return;\n+    }\n+\n+    if(wxMessageBox(_(\"WARNING: If you encrypt your wallet and lose your passphrase, you will LOSE ALL OF YOUR BITCOINS!\\nAre you sure you wish to encrypt your wallet?\"), \"Bitcoin\", wxYES_NO) != wxYES)\n+        return;\n+\n+    string strWalletPassTest;\n+    strWalletPassTest.reserve(100);\n+    mlock(&strWalletPassTest[0], strWalletPassTest.capacity());\n+    strWalletPassTest = wxGetPasswordFromUser(_(\"Please re-enter your new wallet passphrase.\"),\n+                                              _(\"Passphrase\")).ToStdString();\n+\n+    if (strWalletPassTest != strWalletPass)\n+    {\n+        fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n+        fill(strWalletPassTest.begin(), strWalletPassTest.end(), '\\0');\n+        munlock(&strWalletPass[0], strWalletPass.capacity());\n+        munlock(&strWalletPassTest[0], strWalletPassTest.capacity());\n+        wxMessageBox(_(\"Error: the supplied passphrases didn't match.\"), \"Bitcoin\", wxOK | wxICON_ERROR);\n+        return;\n+    }\n+\n+    if (!pwalletMain->EncryptWallet(strWalletPass))\n+    {\n+        fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n+        fill(strWalletPassTest.begin(), strWalletPassTest.end(), '\\0');\n+        munlock(&strWalletPass[0], strWalletPass.capacity());\n+        munlock(&strWalletPassTest[0], strWalletPassTest.capacity());\n+        wxMessageBox(_(\"Wallet encryption failed.\"), \"Bitcoin\", wxOK | wxICON_ERROR);\n+        return;\n+    }\n+    fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n+    fill(strWalletPassTest.begin(), strWalletPassTest.end(), '\\0');\n+    munlock(&strWalletPass[0], strWalletPass.capacity());\n+    munlock(&strWalletPassTest[0], strWalletPassTest.capacity());\n+    wxMessageBox(_(\"Wallet Encrypted.\\nRemember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.\"), \"Bitcoin\");\n+\n+    m_menuOptions->Remove(m_menuOptionsEncryptWallet);\n+    m_menuOptions->Insert(m_menuOptions->GetMenuItemCount() - 1, m_menuOptionsChangeWalletPassphrase);\n+}\n+\n+void CMainFrame::OnMenuOptionsChangeWalletPassphrase(wxCommandEvent& event)\n+{\n+    // Options->Change Wallet Encryption Passphrase\n+    if (!pwalletMain->IsCrypted())\n+    {\n+        wxMessageBox(_(\"Wallet is unencrypted, please encrypt it first.\"), \"Bitcoin\", wxOK | wxICON_ERROR);\n+        return;\n+    }\n+\n+    string strOldWalletPass;\n+    strOldWalletPass.reserve(100);\n+    mlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n+\n+    // obtain current wallet encrypt/decrypt key, from passphrase\n+    // Note that the passphrase is not mlock()d during this entry and could potentially\n+    // be obtained from disk long after bitcoin has run.\n+    strOldWalletPass = wxGetPasswordFromUser(_(\"Enter the current passphrase to the wallet.\"),\n+                                             _(\"Passphrase\")).ToStdString();\n+\n+    CRITICAL_BLOCK(pwalletMain->cs_vMasterKey)\n+    {\n+        bool fWasLocked = pwalletMain->IsLocked();\n+        pwalletMain->Lock();\n+\n+        if (!strOldWalletPass.size() || !pwalletMain->Unlock(strOldWalletPass))\n+        {\n+            fill(strOldWalletPass.begin(), strOldWalletPass.end(), '\\0');\n+            munlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n+            wxMessageBox(_(\"The passphrase entered for the wallet decryption was incorrect.\"), \"Bitcoin\", wxOK | wxICON_ERROR);\n+            return;\n+        }\n+\n+        if (fWasLocked)\n+            pwalletMain->Lock();\n+\n+        string strNewWalletPass;\n+        strNewWalletPass.reserve(100);\n+        mlock(&strNewWalletPass[0], strNewWalletPass.capacity());\n+\n+        // obtain new wallet encrypt/decrypt key, from passphrase\n+        // Note that the passphrase is not mlock()d during this entry and could potentially\n+        // be obtained from disk long after bitcoin has run.\n+        strNewWalletPass = wxGetPasswordFromUser(_(\"Enter the new passphrase for the wallet.\"),\n+                                                 _(\"Passphrase\")).ToStdString();\n+\n+        if (!strNewWalletPass.size())\n+        {\n+            fill(strOldWalletPass.begin(), strOldWalletPass.end(), '\\0');\n+            fill(strNewWalletPass.begin(), strNewWalletPass.end(), '\\0');\n+            munlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n+            munlock(&strNewWalletPass[0], strNewWalletPass.capacity());\n+            wxMessageBox(_(\"Error: The supplied passphrase was too short.\"), \"Bitcoin\", wxOK | wxICON_ERROR);\n+            return;\n+        }\n+\n+        string strNewWalletPassTest;\n+        strNewWalletPassTest.reserve(100);\n+        mlock(&strNewWalletPassTest[0], strNewWalletPassTest.capacity());\n+\n+        // obtain new wallet encrypt/decrypt key, from passphrase\n+        // Note that the passphrase is not mlock()d during this entry and could potentially\n+        // be obtained from disk long after bitcoin has run.\n+        strNewWalletPassTest = wxGetPasswordFromUser(_(\"Re-enter the new passphrase for the wallet.\"),\n+                                                     _(\"Passphrase\")).ToStdString();\n+\n+        if (strNewWalletPassTest != strNewWalletPass)\n+        {\n+            fill(strOldWalletPass.begin(), strOldWalletPass.end(), '\\0');\n+            fill(strNewWalletPass.begin(), strNewWalletPass.end(), '\\0');\n+            fill(strNewWalletPassTest.begin(), strNewWalletPassTest.end(), '\\0');\n+            munlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n+            munlock(&strNewWalletPass[0], strNewWalletPass.capacity());\n+            munlock(&strNewWalletPassTest[0], strNewWalletPassTest.capacity());\n+            wxMessageBox(_(\"Error: the supplied passphrases didn't match.\"), \"Bitcoin\", wxOK | wxICON_ERROR);\n+            return;\n+        }\n+\n+        if (!pwalletMain->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n+        {\n+            fill(strOldWalletPass.begin(), strOldWalletPass.end(), '\\0');\n+            fill(strNewWalletPass.begin(), strNewWalletPass.end(), '\\0');\n+            fill(strNewWalletPassTest.begin(), strNewWalletPassTest.end(), '\\0');\n+            munlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n+            munlock(&strNewWalletPass[0], strNewWalletPass.capacity());\n+            munlock(&strNewWalletPassTest[0], strNewWalletPassTest.capacity());\n+            wxMessageBox(_(\"The passphrase entered for the wallet decryption was incorrect.\"), \"Bitcoin\", wxOK | wxICON_ERROR);\n+            return;\n+        }\n+        fill(strOldWalletPass.begin(), strOldWalletPass.end(), '\\0');\n+        fill(strNewWalletPass.begin(), strNewWalletPass.end(), '\\0');\n+        fill(strNewWalletPassTest.begin(), strNewWalletPassTest.end(), '\\0');\n+        munlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n+        munlock(&strNewWalletPass[0], strNewWalletPass.capacity());\n+        munlock(&strNewWalletPassTest[0], strNewWalletPassTest.capacity());\n+        wxMessageBox(_(\"Wallet Passphrase Changed.\"), \"Bitcoin\");\n+    }\n+}\n+\n void CMainFrame::OnMenuOptionsOptions(wxCommandEvent& event)\n {\n     // Options->Options\n@@ -1185,8 +1388,19 @@ void CMainFrame::OnButtonNew(wxCommandEvent& event)\n         return;\n     string strName = dialog.GetValue();\n \n-    // Generate new key\n-    string strAddress = PubKeyToAddress(pwalletMain->GetKeyFromKeyPool());\n+    string strAddress;\n+    CRITICAL_BLOCK(pwalletMain->cs_vMasterKey)\n+    {\n+        bool fWasLocked = pwalletMain->IsLocked();\n+        if (!GetWalletPassphrase())\n+            return;\n+\n+        // Generate new key\n+        strAddress = PubKeyToAddress(pwalletMain->GetOrReuseKeyFromPool());\n+\n+        if (fWasLocked)\n+            pwalletMain->Lock();\n+    }\n \n     // Save\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n@@ -1950,7 +2164,12 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n         if (fBitcoinAddress)\n         {\n \t    CRITICAL_BLOCK(cs_main)\n+            CRITICAL_BLOCK(pwalletMain->cs_vMasterKey)\n \t    {\n+                bool fWasLocked = pwalletMain->IsLocked();\n+                if (!GetWalletPassphrase())\n+                    return;\n+\n                 // Send to bitcoin address\n                 CScript scriptPubKey;\n                 scriptPubKey << OP_DUP << OP_HASH160 << hash160 << OP_EQUALVERIFY << OP_CHECKSIG;\n@@ -1959,13 +2178,22 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n                 if (strError == \"\")\n                     wxMessageBox(_(\"Payment sent  \"), _(\"Sending...\"));\n                 else if (strError == \"ABORTED\")\n+                {\n+                    if (fWasLocked)\n+                        pwalletMain->Lock();\n                     return; // leave send dialog open\n+                }\n                 else\n                 {\n                     wxMessageBox(strError + \"  \", _(\"Sending...\"));\n                     EndModal(false);\n+                    if (fWasLocked)\n+                        pwalletMain->Lock();\n                     return;\n                 }\n+\n+                if (fWasLocked)\n+                    pwalletMain->Lock();\n \t    }\n         }\n         else\n@@ -2249,16 +2477,27 @@ void CSendingDialog::OnReply2(CDataStream& vRecv)\n             Error(_(\"Insufficient funds\"));\n             return;\n         }\n+\n         CReserveKey reservekey(pwalletMain);\n         int64 nFeeRequired;\n-        if (!pwalletMain->CreateTransaction(scriptPubKey, nPrice, wtx, reservekey, nFeeRequired))\n+        CRITICAL_BLOCK(pwalletMain->cs_vMasterKey)\n         {\n-            if (nPrice + nFeeRequired > pwalletMain->GetBalance())\n-                Error(strprintf(_(\"This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds\"), FormatMoney(nFeeRequired).c_str()));\n-            else\n-                Error(_(\"Transaction creation failed\"));\n-            return;\n-        }\n+            bool fWasLocked = pwalletMain->IsLocked();\n+            if (!GetWalletPassphrase())\n+                return;\n+\n+            if (!pwalletMain->CreateTransaction(scriptPubKey, nPrice, wtx, reservekey, nFeeRequired))\n+            {\n+                if (nPrice + nFeeRequired > pwalletMain->GetBalance())\n+                    Error(strprintf(_(\"This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds\"), FormatMoney(nFeeRequired).c_str()));\n+                else\n+                    Error(_(\"Transaction creation failed\"));\n+                return;\n+            }\n+\n+            if (fWasLocked)\n+                pwalletMain->Lock();\n+       }\n \n         // Transaction fee\n         if (!ThreadSafeAskFee(nFeeRequired, _(\"Sending...\"), this))\n@@ -2385,7 +2624,7 @@ CAddressBookDialog::CAddressBookDialog(wxWindow* parent, const wxString& strInit\n     m_listCtrlReceiving->SetFocus();\n \n     // Fill listctrl with address book data\n-    CRITICAL_BLOCK(pwalletMain->cs_mapKeys)\n+    CRITICAL_BLOCK(pwalletMain->cs_KeyStore)\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n         string strDefaultReceiving = (string)pframeMain->m_textCtrlAddress->GetValue();\n@@ -2584,8 +2823,18 @@ void CAddressBookDialog::OnButtonNew(wxCommandEvent& event)\n             return;\n         strName = dialog.GetValue();\n \n-        // Generate new key\n-        strAddress = PubKeyToAddress(pwalletMain->GetKeyFromKeyPool());\n+        CRITICAL_BLOCK(pwalletMain->cs_vMasterKey)\n+        {\n+            bool fWasLocked = pwalletMain->IsLocked();\n+            if (!GetWalletPassphrase())\n+                return;\n+\n+            // Generate new key\n+            strAddress = PubKeyToAddress(pwalletMain->GetOrReuseKeyFromPool());\n+\n+            if (fWasLocked)\n+                pwalletMain->Lock();\n+        }\n     }\n \n     // Add to list and select it"
      },
      {
        "sha": "3bf741534c871dcee584044bc5592196ad4f2e28",
        "filename": "src/ui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/ui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/ui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.h?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -59,6 +59,8 @@ class CMainFrame : public CMainFrameBase\n     void OnMenuFileExit(wxCommandEvent& event);\n     void OnUpdateUIOptionsGenerate(wxUpdateUIEvent& event);\n     void OnMenuOptionsChangeYourAddress(wxCommandEvent& event);\n+    void OnMenuOptionsEncryptWallet(wxCommandEvent& event);\n+    void OnMenuOptionsChangeWalletPassphrase(wxCommandEvent& event);\n     void OnMenuOptionsOptions(wxCommandEvent& event);\n     void OnMenuHelpAbout(wxCommandEvent& event);\n     void OnButtonSend(wxCommandEvent& event);"
      },
      {
        "sha": "18eec441384473fd5834cf2c0f56591e18507e20",
        "filename": "src/uibase.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/uibase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/uibase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uibase.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -32,6 +32,12 @@ CMainFrameBase::CMainFrameBase( wxWindow* parent, wxWindowID id, const wxString&\n \tm_menuOptionsChangeYourAddress = new wxMenuItem( m_menuOptions, wxID_ANY, wxString( _(\"&Your Receiving Addresses...\") ) , wxEmptyString, wxITEM_NORMAL );\n \tm_menuOptions->Append( m_menuOptionsChangeYourAddress );\n \t\n+\tm_menuOptionsEncryptWallet = new wxMenuItem( m_menuOptions, wxID_ANY, wxString( _(\"&Encrypt Wallet...\") ) , wxEmptyString, wxITEM_NORMAL );\n+\tm_menuOptions->Append( m_menuOptionsEncryptWallet );\n+\t\n+\tm_menuOptionsChangeWalletPassphrase = new wxMenuItem( m_menuOptions, wxID_ANY, wxString( _(\"&Change Wallet Encryption Passphrase...\") ) , wxEmptyString, wxITEM_NORMAL );\n+\tm_menuOptions->Append( m_menuOptionsChangeWalletPassphrase );\n+\t\n \twxMenuItem* m_menuOptionsOptions;\n \tm_menuOptionsOptions = new wxMenuItem( m_menuOptions, wxID_PREFERENCES, wxString( _(\"&Options...\") ) , wxEmptyString, wxITEM_NORMAL );\n \tm_menuOptions->Append( m_menuOptionsOptions );\n@@ -187,6 +193,8 @@ CMainFrameBase::CMainFrameBase( wxWindow* parent, wxWindowID id, const wxString&\n \tthis->Connect( wxEVT_PAINT, wxPaintEventHandler( CMainFrameBase::OnPaint ) );\n \tthis->Connect( m_menuFileExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuFileExit ) );\n \tthis->Connect( m_menuOptionsChangeYourAddress->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuOptionsChangeYourAddress ) );\n+\tthis->Connect( m_menuOptionsEncryptWallet->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuOptionsEncryptWallet ) );\n+\tthis->Connect( m_menuOptionsChangeWalletPassphrase->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuOptionsChangeWalletPassphrase ) );\n \tthis->Connect( m_menuOptionsOptions->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuOptionsOptions ) );\n \tthis->Connect( m_menuHelpAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuHelpAbout ) );\n \tthis->Connect( wxID_BUTTONSEND, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( CMainFrameBase::OnButtonSend ) );\n@@ -245,6 +253,8 @@ CMainFrameBase::~CMainFrameBase()\n \tthis->Disconnect( wxEVT_PAINT, wxPaintEventHandler( CMainFrameBase::OnPaint ) );\n \tthis->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuFileExit ) );\n \tthis->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuOptionsChangeYourAddress ) );\n+\tthis->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuOptionsEncryptWallet ) );\n+\tthis->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuOptionsChangeWalletPassphrase ) );\n \tthis->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuOptionsOptions ) );\n \tthis->Disconnect( wxID_ANY, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( CMainFrameBase::OnMenuHelpAbout ) );\n \tthis->Disconnect( wxID_BUTTONSEND, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler( CMainFrameBase::OnButtonSend ) );"
      },
      {
        "sha": "ca0730b20e52f345b30644f9c8dbfc2de5732491",
        "filename": "src/uibase.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/uibase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/uibase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uibase.h?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -98,6 +98,8 @@ class CMainFrameBase : public wxFrame\n \t\tvirtual void OnPaint( wxPaintEvent& event ) { event.Skip(); }\n \t\tvirtual void OnMenuFileExit( wxCommandEvent& event ) { event.Skip(); }\n \t\tvirtual void OnMenuOptionsChangeYourAddress( wxCommandEvent& event ) { event.Skip(); }\n+\t\tvirtual void OnMenuOptionsEncryptWallet( wxCommandEvent& event ) { event.Skip(); }\n+\t\tvirtual void OnMenuOptionsChangeWalletPassphrase( wxCommandEvent& event ) { event.Skip(); }\n \t\tvirtual void OnMenuOptionsOptions( wxCommandEvent& event ) { event.Skip(); }\n \t\tvirtual void OnMenuHelpAbout( wxCommandEvent& event ) { event.Skip(); }\n \t\tvirtual void OnButtonSend( wxCommandEvent& event ) { event.Skip(); }\n@@ -115,6 +117,8 @@ class CMainFrameBase : public wxFrame\n \t\n \tpublic:\n \t\twxMenu* m_menuOptions;\n+\t\twxMenuItem* m_menuOptionsEncryptWallet;\n+\t\twxMenuItem* m_menuOptionsChangeWalletPassphrase;\n \t\twxStatusBar* m_statusBar;\n \t\twxTextCtrl* m_textCtrlAddress;\n \t\twxListCtrl* m_listCtrlAll;"
      },
      {
        "sha": "a95b87917565e04a30791ca98faad1ca782e03d1",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -674,7 +674,9 @@ void ShrinkDebugFile()\n         fseek(file, -sizeof(pch), SEEK_END);\n         int nBytes = fread(pch, 1, sizeof(pch), file);\n         fclose(file);\n-        if (file = fopen(strFile.c_str(), \"w\"))\n+\n+        file = fopen(strFile.c_str(), \"w\");\n+        if (file)\n         {\n             fwrite(pch, 1, nBytes, file);\n             fclose(file);"
      },
      {
        "sha": "82c564ede18dc901b76dec86194bc1e71ae28c13",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -250,7 +250,7 @@ class CCriticalBlock\n // I'd rather be careful than suffer the other more error prone syntax.\n // The compiler will optimise away all this loop junk.\n #define CRITICAL_BLOCK(cs)     \\\n-    for (bool fcriticalblockonce=true; fcriticalblockonce; assert((\"break caught by CRITICAL_BLOCK!\", !fcriticalblockonce)), fcriticalblockonce=false)  \\\n+    for (bool fcriticalblockonce=true; fcriticalblockonce; assert(\"break caught by CRITICAL_BLOCK!\" && !fcriticalblockonce), fcriticalblockonce=false)  \\\n     for (CCriticalBlock criticalblock(cs); fcriticalblockonce && (cs.pszFile=__FILE__, cs.nLine=__LINE__, true); fcriticalblockonce=false, cs.pszFile=NULL, cs.nLine=0)\n \n class CTryCriticalBlock\n@@ -264,7 +264,7 @@ class CTryCriticalBlock\n };\n \n #define TRY_CRITICAL_BLOCK(cs)     \\\n-    for (bool fcriticalblockonce=true; fcriticalblockonce; assert((\"break caught by TRY_CRITICAL_BLOCK!\", !fcriticalblockonce)), fcriticalblockonce=false)  \\\n+    for (bool fcriticalblockonce=true; fcriticalblockonce; assert(\"break caught by TRY_CRITICAL_BLOCK!\" && !fcriticalblockonce), fcriticalblockonce=false)  \\\n     for (CTryCriticalBlock criticalblock(cs); fcriticalblockonce && (fcriticalblockonce = criticalblock.Entered()) && (cs.pszFile=__FILE__, cs.nLine=__LINE__, true); fcriticalblockonce=false, cs.pszFile=NULL, cs.nLine=0)\n \n \n@@ -605,7 +605,7 @@ inline bool TerminateThread(pthread_t hthread, unsigned int nExitCode)\n     return (pthread_cancel(hthread) == 0);\n }\n \n-inline void ExitThread(unsigned int nExitCode)\n+inline void ExitThread(size_t nExitCode)\n {\n     pthread_exit((void*)nExitCode);\n }"
      },
      {
        "sha": "6d6d8f9648f97460ecc17078157671d4efc40328",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 233,
        "deletions": 31,
        "changes": 264,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -5,26 +5,197 @@\n #include \"headers.h\"\n #include \"db.h\"\n #include \"cryptopp/sha.h\"\n+#include \"crypter.h\"\n \n using namespace std;\n \n-\n option<int64> keypoolOpt(\n     \"wallet\", \"show\", \"keypool\", 100,\n     \"=<n>\", _(\"Set key pool size to <n>\"));\n \n \n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // mapWallet\n //\n \n bool CWallet::AddKey(const CKey& key)\n {\n-    this->CKeyStore::AddKey(key);\n+    if (!CCryptoKeyStore::AddKey(key))\n+        return false;\n+    if (!fFileBacked)\n+        return true;\n+    if (!IsCrypted())\n+        return CWalletDB(strWalletFile).WriteKey(key.GetPubKey(), key.GetPrivKey());\n+}\n+\n+bool CWallet::AddCryptedKey(const vector<unsigned char> &vchPubKey, const vector<unsigned char> &vchCryptedSecret)\n+{\n+    if (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))\n+        return false;\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteKey(key.GetPubKey(), key.GetPrivKey());\n+    CRITICAL_BLOCK(cs_pwalletdbEncryption)\n+    {\n+        if (pwalletdbEncryption)\n+            return pwalletdbEncryption->WriteCryptedKey(vchPubKey, vchCryptedSecret);\n+        else\n+            return CWalletDB(strWalletFile).WriteCryptedKey(vchPubKey, vchCryptedSecret);\n+    }\n+}\n+\n+bool CWallet::Unlock(const string& strWalletPassphrase)\n+{\n+    CRITICAL_BLOCK(cs_vMasterKey)\n+    {\n+        if (!IsLocked())\n+            return false;\n+\n+        CCrypter crypter;\n+        CKeyingMaterial vMasterKey;\n+\n+        BOOST_FOREACH(const MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n+        {\n+            if(!crypter.SetKeyFromPassphrase(strWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n+                return false;\n+            if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey))\n+                return false;\n+            if (CCryptoKeyStore::Unlock(vMasterKey))\n+                return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CWallet::ChangeWalletPassphrase(const string& strOldWalletPassphrase, const string& strNewWalletPassphrase)\n+{\n+    CRITICAL_BLOCK(cs_vMasterKey)\n+    {\n+        bool fWasLocked = IsLocked();\n+\n+        Lock();\n+\n+        CCrypter crypter;\n+        CKeyingMaterial vMasterKey;\n+        BOOST_FOREACH(MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n+        {\n+            if(!crypter.SetKeyFromPassphrase(strOldWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n+                return false;\n+            if(!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey))\n+                return false;\n+            if (CCryptoKeyStore::Unlock(vMasterKey))\n+            {\n+                int64 nStartTime = GetTimeMillis();\n+                crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod);\n+                pMasterKey.second.nDeriveIterations = pMasterKey.second.nDeriveIterations * (100 / ((double)(GetTimeMillis() - nStartTime)));\n+\n+                nStartTime = GetTimeMillis();\n+                crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod);\n+                pMasterKey.second.nDeriveIterations = (pMasterKey.second.nDeriveIterations + pMasterKey.second.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2;\n+\n+                if (pMasterKey.second.nDeriveIterations < 25000)\n+                    pMasterKey.second.nDeriveIterations = 25000;\n+\n+                printf(\"Wallet passphrase changed to an nDeriveIterations of %i\\n\", pMasterKey.second.nDeriveIterations);\n+\n+                if (!crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n+                    return false;\n+                if (!crypter.Encrypt(vMasterKey, pMasterKey.second.vchCryptedKey))\n+                    return false;\n+                CWalletDB(strWalletFile).WriteMasterKey(pMasterKey.first, pMasterKey.second);\n+                if (fWasLocked)\n+                    Lock();\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+\n+// This class implements an addrIncoming entry that causes pre-0.4\n+// clients to crash on startup if reading a private-key-encrypted wallet.\n+class CCorruptAddress\n+{\n+public:\n+    IMPLEMENT_SERIALIZE\n+    (\n+        if (nType & SER_DISK)\n+            READWRITE(nVersion);\n+    )\n+};\n+\n+bool CWallet::EncryptWallet(const string& strWalletPassphrase)\n+{\n+    CRITICAL_BLOCK(cs_mapPubKeys)\n+    CRITICAL_BLOCK(cs_KeyStore)\n+    CRITICAL_BLOCK(cs_vMasterKey)\n+    CRITICAL_BLOCK(cs_pwalletdbEncryption)\n+    {\n+        if (IsCrypted())\n+            return false;\n+\n+        CKeyingMaterial vMasterKey;\n+        RandAddSeedPerfmon();\n+\n+        vMasterKey.resize(WALLET_CRYPTO_KEY_SIZE);\n+        RAND_bytes(&vMasterKey[0], WALLET_CRYPTO_KEY_SIZE);\n+\n+        CMasterKey kMasterKey;\n+\n+        RandAddSeedPerfmon();\n+        kMasterKey.vchSalt.resize(WALLET_CRYPTO_SALT_SIZE);\n+        RAND_bytes(&kMasterKey.vchSalt[0], WALLET_CRYPTO_SALT_SIZE);\n+\n+        CCrypter crypter;\n+        int64 nStartTime = GetTimeMillis();\n+        crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, 25000, kMasterKey.nDerivationMethod);\n+        kMasterKey.nDeriveIterations = 2500000 / ((double)(GetTimeMillis() - nStartTime));\n+\n+        nStartTime = GetTimeMillis();\n+        crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod);\n+        kMasterKey.nDeriveIterations = (kMasterKey.nDeriveIterations + kMasterKey.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2;\n+\n+        if (kMasterKey.nDeriveIterations < 25000)\n+            kMasterKey.nDeriveIterations = 25000;\n+\n+        printf(\"Encrypting Wallet with an nDeriveIterations of %i\\n\", kMasterKey.nDeriveIterations);\n+\n+        if (!crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod))\n+            return false;\n+        if (!crypter.Encrypt(vMasterKey, kMasterKey.vchCryptedKey))\n+            return false;\n+\n+        mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n+        if (fFileBacked)\n+        {\n+            pwalletdbEncryption = new CWalletDB(strWalletFile);\n+            pwalletdbEncryption->TxnBegin();\n+            pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n+        }\n+\n+        if (!EncryptKeys(vMasterKey))\n+        {\n+            if (fFileBacked)\n+                pwalletdbEncryption->TxnAbort();\n+            exit(1); //We now probably have half of our keys encrypted in memory, and half not...die and let the user reload their unencrypted wallet.\n+        }\n+\n+        if (fFileBacked)\n+        {\n+            CCorruptAddress corruptAddress;\n+            pwalletdbEncryption->WriteSetting(\"addrIncoming\", corruptAddress);\n+            if (!pwalletdbEncryption->TxnCommit())\n+                exit(1); //We now have keys encrypted in memory, but no on disk...die to avoid confusion and let the user reload their unencrypted wallet.\n+\n+            pwalletdbEncryption->Close();\n+            pwalletdbEncryption = NULL;\n+        }\n+\n+        Lock();\n+    }\n+    return true;\n }\n \n void CWallet::WalletUpdateSpent(const CTransaction &tx)\n@@ -102,7 +273,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             if (txout.scriptPubKey == scriptDefaultKey)\n-                SetDefaultKey(GetKeyFromKeyPool());\n+                SetDefaultKey(GetOrReuseKeyFromPool());\n         }\n \n         // Notify UI\n@@ -556,8 +727,6 @@ void CWallet::ResendWalletTransactions()\n \n int64 CWallet::GetBalance() const\n {\n-    int64 nStart = GetTimeMillis();\n-\n     int64 nTotal = 0;\n     CRITICAL_BLOCK(cs_mapWallet)\n     {\n@@ -570,7 +739,6 @@ int64 CWallet::GetBalance() const\n         }\n     }\n \n-    //printf(\"GetBalance() %\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n     return nTotal;\n }\n \n@@ -787,7 +955,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n \n                     // Reserve a new key pair from key pool\n                     vector<unsigned char> vchPubKey = reservekey.GetReservedKey();\n-                    assert(mapKeys.count(vchPubKey));\n+                    // assert(mapKeys.count(vchPubKey));\n \n                     // Fill a vout to ourself, using same address type as the payment\n                     CScript scriptChange;\n@@ -907,15 +1075,24 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n {\n     CReserveKey reservekey(this);\n     int64 nFeeRequired;\n-    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired))\n+    CRITICAL_BLOCK(cs_vMasterKey)\n     {\n-        string strError;\n-        if (nValue + nFeeRequired > GetBalance())\n-            strError = strprintf(_(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"), FormatMoney(nFeeRequired).c_str());\n-        else\n-            strError = _(\"Error: Transaction creation failed  \");\n-        printf(\"SendMoney() : %s\", strError.c_str());\n-        return strError;\n+        if (IsLocked())\n+        {\n+            string strError = _(\"Error: Wallet locked, unable to create transaction  \");\n+            printf(\"SendMoney() : %s\", strError.c_str());\n+            return strError;\n+        }\n+        if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired))\n+        {\n+            string strError;\n+            if (nValue + nFeeRequired > GetBalance())\n+                strError = strprintf(_(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"), FormatMoney(nFeeRequired).c_str());\n+            else\n+                strError = _(\"Error: Transaction creation failed  \");\n+            printf(\"SendMoney() : %s\", strError.c_str());\n+            return strError;\n+        }\n     }\n \n     if (fAskFee && !ThreadSafeAskFee(nFeeRequired, _(\"Sending...\"), NULL))\n@@ -950,27 +1127,28 @@ string CWallet::SendMoneyToBitcoinAddress(string strAddress, int64 nValue, CWall\n \n \n \n-bool CWallet::LoadWallet(bool& fFirstRunRet)\n+int CWallet::LoadWallet(bool& fFirstRunRet)\n {\n     if (!fFileBacked)\n         return false;\n     fFirstRunRet = false;\n-    if (!CWalletDB(strWalletFile,\"cr+\").LoadWallet(this))\n-        return false;\n+    int nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n+    if (nLoadWalletRet != DB_LOAD_OK)\n+        return nLoadWalletRet;\n     fFirstRunRet = vchDefaultKey.empty();\n \n-    if (!mapKeys.count(vchDefaultKey))\n+    if (!HaveKey(vchDefaultKey))\n     {\n-        // Create new default key\n+        // Create new keyUser and set as default key\n         RandAddSeedPerfmon();\n \n-        SetDefaultKey(GetKeyFromKeyPool());\n+        SetDefaultKey(GetOrReuseKeyFromPool());\n         if (!SetAddressBookName(PubKeyToAddress(vchDefaultKey), \"\"))\n-            return false;\n+            return DB_LOAD_FAIL;\n     }\n \n     CreateThread(ThreadFlushWalletDB, &strWalletFile);\n-    return true;\n+    return DB_LOAD_OK;\n }\n \n \n@@ -1037,14 +1215,16 @@ bool GetWalletFile(CWallet* pwallet, string &strWalletFileOut)\n     return true;\n }\n \n-void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n+bool CWallet::TopUpKeyPool()\n {\n-    nIndex = -1;\n-    keypool.vchPubKey.clear();\n     CRITICAL_BLOCK(cs_main)\n     CRITICAL_BLOCK(cs_mapWallet)\n     CRITICAL_BLOCK(cs_setKeyPool)\n+    CRITICAL_BLOCK(cs_vMasterKey)\n     {\n+        if (IsLocked())\n+            return false;\n+\n         CWalletDB walletdb(strWalletFile);\n \n         // Top up key pool\n@@ -1055,18 +1235,36 @@ void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n             if (!setKeyPool.empty())\n                 nEnd = *(--setKeyPool.end()) + 1;\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n-                throw runtime_error(\"ReserveKeyFromKeyPool() : writing generated key failed\");\n+                throw runtime_error(\"TopUpKeyPool() : writing generated key failed\");\n             setKeyPool.insert(nEnd);\n             printf(\"keypool added key %\"PRI64d\", size=%d\\n\", nEnd, setKeyPool.size());\n         }\n+    }\n+    return true;\n+}\n+\n+void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n+{\n+    nIndex = -1;\n+    keypool.vchPubKey.clear();\n+    CRITICAL_BLOCK(cs_main)\n+    CRITICAL_BLOCK(cs_mapWallet)\n+    CRITICAL_BLOCK(cs_setKeyPool)\n+    {\n+        if (!IsLocked())\n+            TopUpKeyPool();\n \n         // Get the oldest key\n-        assert(!setKeyPool.empty());\n+        if(setKeyPool.empty())\n+            return;\n+\n+        CWalletDB walletdb(strWalletFile);\n+\n         nIndex = *(setKeyPool.begin());\n         setKeyPool.erase(setKeyPool.begin());\n         if (!walletdb.ReadPool(nIndex, keypool))\n             throw runtime_error(\"ReserveKeyFromKeyPool() : read failed\");\n-        if (!mapKeys.count(keypool.vchPubKey))\n+        if (!HaveKey(keypool.vchPubKey))\n             throw runtime_error(\"ReserveKeyFromKeyPool() : unknown key in key pool\");\n         assert(!keypool.vchPubKey.empty());\n         printf(\"keypool reserve %\"PRI64d\"\\n\", nIndex);\n@@ -1095,11 +1293,13 @@ void CWallet::ReturnKey(int64 nIndex)\n     printf(\"keypool return %\"PRI64d\"\\n\", nIndex);\n }\n \n-vector<unsigned char> CWallet::GetKeyFromKeyPool()\n+vector<unsigned char> CWallet::GetOrReuseKeyFromPool()\n {\n     int64 nIndex = 0;\n     CKeyPool keypool;\n     ReserveKeyFromKeyPool(nIndex, keypool);\n+    if(nIndex == -1)\n+        return vchDefaultKey;\n     KeepKey(nIndex);\n     return keypool.vchPubKey;\n }\n@@ -1109,6 +1309,8 @@ int64 CWallet::GetOldestKeyPoolTime()\n     int64 nIndex = 0;\n     CKeyPool keypool;\n     ReserveKeyFromKeyPool(nIndex, keypool);\n+    if (nIndex == -1)\n+        return GetTime();\n     ReturnKey(nIndex);\n     return keypool.nTime;\n }"
      },
      {
        "sha": "472b877ba860d0966676327d1ca02705a310384d",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43288bea72b1e6607a6bf110b95efd4443e1427f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43288bea72b1e6607a6bf110b95efd4443e1427f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=43288bea72b1e6607a6bf110b95efd4443e1427f",
        "patch": "@@ -8,16 +8,20 @@\n #include \"key.h\"\n #include \"script.h\"\n \n+extern option<int64> keypoolOpt;\n+\n class CWalletTx;\n class CReserveKey;\n class CWalletDB;\n \n-class CWallet : public CKeyStore\n+class CWallet : public CCryptoKeyStore\n {\n private:\n     bool SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const;\n     bool SelectCoins(int64 nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const;\n \n+    CWalletDB *pwalletdbEncryption;\n+    CCriticalSection cs_pwalletdbEncryption;\n \n public:\n     bool fFileBacked;\n@@ -26,14 +30,22 @@ class CWallet : public CKeyStore\n     std::set<int64> setKeyPool;\n     CCriticalSection cs_setKeyPool;\n \n+    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n+    MasterKeyMap mapMasterKeys;\n+    unsigned int nMasterKeyMaxID;\n+\n     CWallet()\n     {\n         fFileBacked = false;\n+        nMasterKeyMaxID = 0;\n+        pwalletdbEncryption = NULL;\n     }\n     CWallet(std::string strWalletFileIn)\n     {\n         strWalletFile = strWalletFileIn;\n         fFileBacked = true;\n+        nMasterKeyMaxID = 0;\n+        pwalletdbEncryption = NULL;\n     }\n \n     mutable CCriticalSection cs_mapWallet;\n@@ -48,7 +60,16 @@ class CWallet : public CKeyStore\n \n     std::vector<unsigned char> vchDefaultKey;\n \n+    // keystore implementation\n     bool AddKey(const CKey& key);\n+    bool LoadKey(const CKey& key) { return CCryptoKeyStore::AddKey(key); }\n+    bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    bool LoadCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }\n+\n+    bool Unlock(const std::string& strWalletPassphrase);\n+    bool ChangeWalletPassphrase(const std::string& strOldWalletPassphrase, const std::string& strNewWalletPassphrase);\n+    bool EncryptWallet(const std::string& strWalletPassphrase);\n+\n     bool AddToWallet(const CWalletTx& wtxIn);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false);\n     bool EraseFromWallet(uint256 hash);\n@@ -64,10 +85,11 @@ class CWallet : public CKeyStore\n     std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n     std::string SendMoneyToBitcoinAddress(std::string strAddress, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n \n+    bool TopUpKeyPool();\n     void ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool);\n     void KeepKey(int64 nIndex);\n     void ReturnKey(int64 nIndex);\n-    std::vector<unsigned char> GetKeyFromKeyPool();\n+    std::vector<unsigned char> GetOrReuseKeyFromPool();\n     int64 GetOldestKeyPoolTime();\n \n     bool IsMine(const CTxIn& txin) const;\n@@ -147,7 +169,7 @@ class CWallet : public CKeyStore\n         walletdb.WriteBestBlock(loc);\n     }\n \n-    bool LoadWallet(bool& fFirstRunRet);\n+    int LoadWallet(bool& fFirstRunRet);\n //    bool BackupWallet(const std::string& strDest);\n \n     // requires cs_mapAddressBook lock\n@@ -174,6 +196,11 @@ class CWallet : public CKeyStore\n         }\n     }\n \n+    int GetKeyPoolSize()\n+    {\n+        return setKeyPool.size();\n+    }\n+\n     bool GetTransaction(const uint256 &hashTx, CWalletTx& wtx);\n \n     bool SetDefaultKey(const std::vector<unsigned char> &vchPubKey);"
      }
    ]
  },
  {
    "sha": "39f14de3d79d3792ef3d9e57a1790a152b7c4f11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWYxNGRlM2Q3OWQzNzkyZWYzZDllNTdhMTc5MGExNTJiN2M0ZjEx",
    "commit": {
      "author": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-16T12:32:59Z"
      },
      "committer": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-16T13:49:16Z"
      },
      "message": "Miscellaneous and cosmetics for option framework",
      "tree": {
        "sha": "afed1abd8de02adeb7a295d41b2dcc223cd33ffc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afed1abd8de02adeb7a295d41b2dcc223cd33ffc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39f14de3d79d3792ef3d9e57a1790a152b7c4f11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39f14de3d79d3792ef3d9e57a1790a152b7c4f11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39f14de3d79d3792ef3d9e57a1790a152b7c4f11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39f14de3d79d3792ef3d9e57a1790a152b7c4f11/comments",
    "author": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "43288bea72b1e6607a6bf110b95efd4443e1427f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43288bea72b1e6607a6bf110b95efd4443e1427f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43288bea72b1e6607a6bf110b95efd4443e1427f"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 75,
      "deletions": 52
    },
    "files": [
      {
        "sha": "d1439b19bcb0766340834031f7ff95a3b9d20382",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 24,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39f14de3d79d3792ef3d9e57a1790a152b7c4f11/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39f14de3d79d3792ef3d9e57a1790a152b7c4f11/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=39f14de3d79d3792ef3d9e57a1790a152b7c4f11",
        "patch": "@@ -163,9 +163,12 @@ void PrintHelp()\n         ss << endl;\n         ss << _(\"Usage:\") << endl;\n         ss << \"  bitcoin [options]                     \" << endl;\n-        ss << \"  bitcoin [options] <command> [params]  \" << _(\"Send command to -server or bitcoind\") << endl;\n-        ss << \"  bitcoin [options] help                \" << _(\"List commands\") << endl;\n-        ss << \"  bitcoin [options] help <command>      \" << _(\"Get help for a command\") << endl;\n+        ss << \"  bitcoin [options] <command> [params]  \"\n+           << _(\"Send command to -server or bitcoind\") << endl;\n+        ss << \"  bitcoin [options] help                \"\n+           << _(\"List commands\") << endl;\n+        ss << \"  bitcoin [options] help <command>      \"\n+           << _(\"Get help for a command\") << endl;\n         ss << endl;\n         ss << _(\"Options:\") << endl;\n         ss << GetOptionsDescriptions(\"init\", \"show\");\n@@ -289,7 +292,7 @@ bool AppInit2(int argc, char* argv[])\n     strConfigFile = pathConfigFile.string();\n \n     if (+confOpt && !fs::exists(pathConfigFile)) {\n-        strErrors += string() + _(\"Error: Specified configuration file does not exist\");\n+        strErrors += _(\"Error: Specified configuration file does not exist\");\n         wxMessageBox(strErrors, \"Bitcoin\");\n         exit(1);\n     }\n@@ -307,7 +310,7 @@ bool AppInit2(int argc, char* argv[])\n         pathDataDir = fs::system_complete(datadirOpt());\n         if (!fs::is_directory(pathDataDir))\n         {\n-            strErrors += string() + _(\"Error: Specified directory does not exist\");\n+            strErrors += _(\"Error: Specified directory does not exist\");\n             wxMessageBox(strErrors, \"Bitcoin\");\n             exit(1);\n         }\n@@ -322,8 +325,6 @@ bool AppInit2(int argc, char* argv[])\n         pathDataDir = pathDataDir / \"testnet\";\n         if (!fs::exists(pathDataDir))\n             fs::create_directory(pathDataDir);\n-\n-        cerr << _(\"Using testnet!\") << \" (datadir: \" << pathDataDir << \")\" << endl;\n     }\n \n     strDataDir = pathDataDir.string();\n@@ -365,7 +366,7 @@ bool AppInit2(int argc, char* argv[])\n         pid_t pid = fork();\n         if (pid < 0)\n         {\n-            fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);\n+            fprintf(stderr, \"Error: fork() errno %d\\n\", errno);\n             return false;\n         }\n         if (pid > 0)\n@@ -374,14 +375,13 @@ bool AppInit2(int argc, char* argv[])\n             if (!path.is_complete())\n                 path =  pathDataDir / path;\n             pathPidFile = path;\n-            fs::ofstream PidFile(pathPidFile);\n-            PidFile << pid << endl;;\n+            fs::ofstream(pathPidFile) << pid << endl;;\n             return true;\n         }\n \n         pid_t sid = setsid();\n         if (sid < 0)\n-            fprintf(stderr, \"Error: setsid() returned %d errno %d\\n\", sid, errno);\n+            fprintf(stderr, \"Error: setsid() errno %d\\n\", errno);\n     }\n #endif\n \n@@ -391,8 +391,13 @@ bool AppInit2(int argc, char* argv[])\n     printf(\"Bitcoin version %s\\n\", FormatFullVersion().c_str());\n #ifdef GUI\n     printf(\"OS version %s\\n\", ((string)wxGetOsDescription()).c_str());\n-    printf(\"System default language is %d %s\\n\", g_locale.GetSystemLanguage(), ((string)g_locale.GetSysName()).c_str());\n-    printf(\"Language file %s (%s)\\n\", (string(\"locale/\") + (string)g_locale.GetCanonicalName() + \"/LC_MESSAGES/bitcoin.mo\").c_str(), ((string)g_locale.GetLocale()).c_str());\n+    printf(\"System default language is %d %s\\n\",\n+           g_locale.GetSystemLanguage(),\n+           ((string)g_locale.GetSysName()).c_str());\n+    printf(\"Language file %s (%s)\\n\",\n+           (string(\"locale/\") + (string)g_locale.GetCanonicalName() +\n+            \"/LC_MESSAGES/bitcoin.mo\").c_str(),\n+           ((string)g_locale.GetLocale()).c_str());\n #endif\n     printf(\"Default data directory %s\\n\", GetDefaultDataDir().c_str());\n     printf(\"Using data directory %s\\n\", strDataDir.c_str());\n@@ -445,18 +450,21 @@ bool AppInit2(int argc, char* argv[])\n     }\n #endif\n \n+    //\n     // Make sure only a single bitcoin process is using the data directory.\n-    string strLockFile = GetDataDir() + \"/.lock\";\n-    FILE* file = fopen(strLockFile.c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n-    if (file) fclose(file);\n-    static boost::interprocess::file_lock lock(strLockFile.c_str());\n+    //\n+    fs::path pathLockFile = pathDataDir / \".lock\";\n+    if (!fs::exists(pathLockFile))  // create empty .lock if it doesn't exist\n+        fs::ofstream(pathLockFile).close();\n+    static boost::interprocess::file_lock lock(pathLockFile.string().c_str());\n     if (!lock.try_lock())\n     {\n         wxMessageBox(strprintf(_(\"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"), GetDataDir().c_str()), \"Bitcoin\");\n         return false;\n     }\n \n-    // Bind to the port early so we can tell if another instance is already running.\n+    // Bind to the port early so we can tell if another instance is\n+    // already running.\n     if (!BindListenPort(strErrors))\n     {\n         wxMessageBox(strErrors, \"Bitcoin\");\n@@ -474,13 +482,13 @@ bool AppInit2(int argc, char* argv[])\n     printf(\"Loading addresses...\\n\");\n     nStart = GetTimeMillis();\n     if (!LoadAddresses())\n-        strErrors += string() + _(\"Error loading\") + \" addr.dat\\n\";\n+        strErrors += string(_(\"Error loading\")) + \" addr.dat\\n\";\n     printf(\" addresses   %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n     printf(\"Loading block index...\\n\");\n     nStart = GetTimeMillis();\n     if (!LoadBlockIndex())\n-        strErrors += string() + _(\"Error loading\") + \" blkindex.dat\\n\";\n+        strErrors += string(_(\"Error loading\")) + \" blkindex.dat\\n\";\n     printf(\" block index %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n     printf(\"Loading wallet...\\n\");\n@@ -491,11 +499,13 @@ bool AppInit2(int argc, char* argv[])\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {\n         if (nLoadWalletRet == DB_CORRUPT)\n-            strErrors += strprintf(_(\"Error loading %s, Wallet corrupted\"), \"wallet.dat\") + \"\\n\";\n+            strErrors += string(_(\"Error loading\")) + \"wallet.dat\" + \", \" +\n+                _(\"Wallet corrupted\") + \"\\n\";\n         else if (nLoadWalletRet == DB_TOO_NEW)\n-            strErrors += strprintf(_(\"Error loading %s, Wallet requires newer version of Bitcoin\"), \"wallet.dat\") + \"\\n\";\n+            strErrors += string(_(\"Error loading\")) + \"wallet.dat\" + \", \" +\n+                _(\"Wallet requires newer version of Bitcoin\") + \"\\n\";\n         else\n-            strErrors += string() + _(\"Error loading\") + \" wallet.dat\\n\";\n+            strErrors += string(_(\"Error loading\")) + \" wallet.dat\\n\";\n     }\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n@@ -513,7 +523,9 @@ bool AppInit2(int argc, char* argv[])\n     }\n     if (pindexBest != pindexRescan)\n     {\n-        printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n+        printf(\"Rescanning last %i blocks (from block %i)...\\n\",\n+               pindexBest->nHeight - pindexRescan->nHeight,\n+               pindexRescan->nHeight);\n         nStart = GetTimeMillis();\n         pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n         printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);"
      },
      {
        "sha": "0276f6918328ff79217dcda899db4ee646de3701",
        "filename": "src/option.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 23,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39f14de3d79d3792ef3d9e57a1790a152b7c4f11/src/option.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39f14de3d79d3792ef3d9e57a1790a152b7c4f11/src/option.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/option.cpp?ref=39f14de3d79d3792ef3d9e57a1790a152b7c4f11",
        "patch": "@@ -17,21 +17,21 @@\n // This file is a custom Bitcoin-like binding to boost::program_options\n \n using namespace std;\n-using namespace boost;\n-\n namespace po = boost::program_options;\n namespace fs = boost::filesystem;\n \n \n-void validate(boost::any& v, const std::vector<std::string>& values, money* target_type, int)\n+static void validate(\n+    boost::any& v, const std::vector<std::string>& values,\n+    money* target_type, int)\n {\n     po::validators::check_first_occurrence(v);\n     const string& s = po::validators::get_single_string(values);\n     int64 value;\n     if (!ParseMoney(s, value))\n         throw po::validation_error(po::validation_error::invalid_option_value);\n     else\n-        v = any(money(value));\n+        v = boost::any(money(value));\n }\n \n \n@@ -64,9 +64,10 @@ void option<T>::notify(const T &val)\n }\n \n template <typename T>\n-option<T>::option(const char *optGroup, const char *optClass,\n-                  const char *optName, const T &def,\n-                  const char *argDesc, const char *optDesc)\n+option<T>::option(\n+    const char *optGroup, const char *optClass,\n+    const char *optName, const T &def,\n+    const char *argDesc, const char *optDesc)\n {\n     defined = false;\n     value = def;\n@@ -78,14 +79,16 @@ option<T>::option(const char *optGroup, const char *optClass,\n     d.optDesc = optDesc;\n     allOptionsDesc().push_back(d);\n \n-    boost::function1<void, const T&> f = (lambda::_1 ->* &option<T>::notify)(this);\n+    boost::function1<void, const T&> f =\n+        (boost::lambda::_1 ->* &option<T>::notify)(this);\n     allOptions().add_options()(optName, po::value<T>(&value)->notifier(f));\n }\n \n template <typename T>\n-option<T>::option(const char *optGroup, const char *optClass,\n-                  const char *optName, const T &def, const T &imp,\n-                  const char *argDesc, const char *optDesc)\n+option<T>::option(\n+    const char *optGroup, const char *optClass,\n+    const char *optName, const T &def, const T &imp,\n+    const char *argDesc, const char *optDesc)\n {\n     defined = false;\n     value = def;\n@@ -97,8 +100,10 @@ option<T>::option(const char *optGroup, const char *optClass,\n     d.optDesc = optDesc;\n     allOptionsDesc().push_back(d);\n \n-    boost::function1<void, const T&> f = (lambda::_1 ->* &option<T>::notify)(this);\n-    allOptions().add_options()(optName, po::value<T>(&value)->implicit_value(imp,\"\")->notifier(f));\n+    boost::function1<void, const T&> f =\n+        (boost::lambda::_1 ->* &option<T>::notify)(this);\n+    allOptions().add_options()\n+        (optName, po::value<T>(&value)->implicit_value(imp,\"\")->notifier(f));\n }\n \n template class option<bool>;\n@@ -110,7 +115,7 @@ template class option<vector<string> >;\n \n static po::variables_map vmBase;\n \n-pair<string, string> CustomOptionParser(const string& s)\n+static pair<string, string> CustomOptionParser(const string& s)\n {\n     if (s.size() < 2 || !IsSwitchChar(s[0]) || s[1] == '-')\n         return make_pair(string(), string());\n@@ -125,17 +130,22 @@ pair<string, string> CustomOptionParser(const string& s)\n \n bool ParseCommandLine(int argc, char **argv, string &strErrors)\n {\n-    int opt_style =\n+    int optStyle =\n         po::command_line_style::allow_long |\n-        po::command_line_style::long_allow_adjacent ;\n+        po::command_line_style::long_allow_adjacent;\n+\n+    po::command_line_parser parser(argc, argv);\n+    parser.extra_parser(CustomOptionParser);\n+    parser.style(optStyle);\n+    parser.options(allOptions());\n \n     try\n     {\n-        po::store(po::command_line_parser(argc, argv).extra_parser(CustomOptionParser).style(opt_style).options(allOptions()).run(), vmBase);\n+        po::store(parser.run(), vmBase);\n     }\n     catch (po::error &e)\n     {\n-        strErrors += string() + _(\"Error on command line:\") + \" \" + e.what();\n+        strErrors += string(_(\"Error on command line:\")) + \" \" + e.what();\n         return false;\n     }\n     po::notify(vmBase);\n@@ -152,19 +162,20 @@ bool ParseConfigFile(string &strErrors)\n     }\n     catch (po::error &e)\n     {\n-        strErrors += string() + _(\"Error in configuration file:\") + \" \" + e.what();\n+        strErrors += string(_(\"Error in configuration file:\")) + \" \" + e.what();\n         return false;\n     }\n     po::notify(vm);\n     return true;\n }\n \n-bool optdescSortGroup(optattr d1, optattr d2)\n+static bool optdescSortGroup(optattr d1, optattr d2)\n {\n     return strcmp(d1.optGroup, d2.optGroup) < 0;\n }\n \n-string GetOptionsDescriptions(const string &groupMasks, const string &classMasks, bool showgroups)\n+string GetOptionsDescriptions(\n+    const string &groupMasks, const string &classMasks, bool showgroups)\n {\n     int pad = 24;\n \n@@ -208,11 +219,11 @@ string GetOptionsDescriptions(const string &groupMasks, const string &classMasks\n                 ss << \"(\" << d.optGroup << \")\" << endl;\n                 groupdisplayed = true;\n             }\n-            string optUsage = string() + \"  -\" + d.optName;\n+            string optUsage = string(\"  -\") + d.optName;\n             if (d.argDesc) optUsage += d.argDesc;\n             if (optUsage.size() >= pad) optUsage += \"  \\t\";\n             else optUsage.resize(pad, ' ');\n-            if (d.optDesc) optUsage += string() + \" \" + d.optDesc;\n+            if (d.optDesc) optUsage += string(\" \") + d.optDesc;\n             ss << optUsage << endl;\n         }\n     }"
      },
      {
        "sha": "03fabc6ff233b5ee8f424d31199468313b9572fb",
        "filename": "src/option.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39f14de3d79d3792ef3d9e57a1790a152b7c4f11/src/option.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39f14de3d79d3792ef3d9e57a1790a152b7c4f11/src/option.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/option.h?ref=39f14de3d79d3792ef3d9e57a1790a152b7c4f11",
        "patch": "@@ -73,7 +73,9 @@ extern template class option<int64>;\n extern template class option<money>;\n extern template class option<std::vector<std::string> >;\n \n-std::string GetOptionsDescriptions(const std::string &groupMasks, const std::string &classMasks, bool showgroups=false);\n+std::string GetOptionsDescriptions(\n+    const std::string &groupMasks, const std::string &classMasks,\n+    bool showgroups=false);\n \n bool ParseCommandLine(int argc, char **argv, std::string &strErrors);\n bool ParseConfigFile(std::string &strErrors);"
      },
      {
        "sha": "0af36c7e1f12ef6f394dcc148b2226d2d3df730d",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39f14de3d79d3792ef3d9e57a1790a152b7c4f11/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39f14de3d79d3792ef3d9e57a1790a152b7c4f11/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=39f14de3d79d3792ef3d9e57a1790a152b7c4f11",
        "patch": "@@ -166,10 +166,8 @@ inline int OutputDebugStringF(const char* pszFormat, ...)\n \n         if (!fileout)\n         {\n-            char pszFile[MAX_PATH+100];\n-            strlcpy(pszFile, strDataDir.c_str(), sizeof(pszFile));\n-            strlcat(pszFile, \"/debug.log\", sizeof(pszFile));\n-            fileout = fopen(pszFile, \"a\");\n+            string strFile = strDataDir + \"/debug.log\";\n+            fileout = fopen(strFile.c_str(), \"a\");\n             if (fileout) setbuf(fileout, NULL); // unbuffered\n         }\n         if (fileout)"
      }
    ]
  },
  {
    "sha": "bb6412b1eac75bf127769f5eb36378748e78d13f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjY0MTJiMWVhYzc1YmYxMjc3NjlmNWViMzYzNzg3NDhlNzhkMTNm",
    "commit": {
      "author": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-16T13:57:22Z"
      },
      "committer": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-07-18T02:39:18Z"
      },
      "message": "Removing obsolete single instance check",
      "tree": {
        "sha": "db9dbeb69a10d407d90e1237e3d7dfd09115c5d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db9dbeb69a10d407d90e1237e3d7dfd09115c5d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb6412b1eac75bf127769f5eb36378748e78d13f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb6412b1eac75bf127769f5eb36378748e78d13f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb6412b1eac75bf127769f5eb36378748e78d13f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb6412b1eac75bf127769f5eb36378748e78d13f/comments",
    "author": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39f14de3d79d3792ef3d9e57a1790a152b7c4f11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39f14de3d79d3792ef3d9e57a1790a152b7c4f11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39f14de3d79d3792ef3d9e57a1790a152b7c4f11"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 0,
      "deletions": 41
    },
    "files": [
      {
        "sha": "0bebc5e74489673ecd761e999476f6c0a622e8b1",
        "filename": "src/headers.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb6412b1eac75bf127769f5eb36378748e78d13f/src/headers.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb6412b1eac75bf127769f5eb36378748e78d13f/src/headers.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/headers.h?ref=bb6412b1eac75bf127769f5eb36378748e78d13f",
        "patch": "@@ -29,7 +29,6 @@\n #ifdef GUI\n #include <wx/wx.h>\n #include <wx/stdpaths.h>\n-#include <wx/snglinst.h>\n #include <wx/utils.h>\n #include <wx/clipbrd.h>\n #include <wx/taskbar.h>"
      },
      {
        "sha": "bcb909564a67f9fad3f78c2e8cccc9a0f6a1f587",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 40,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb6412b1eac75bf127769f5eb36378748e78d13f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb6412b1eac75bf127769f5eb36378748e78d13f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bb6412b1eac75bf127769f5eb36378748e78d13f",
        "patch": "@@ -410,46 +410,6 @@ bool AppInit2(int argc, char* argv[])\n         return false;\n     }\n \n-    //\n-    // Limit to single instance per user\n-    // Required to protect the database files if we're going to keep deleting log.*\n-    //\n-#if defined(__WXMSW__) && defined(GUI)\n-    // wxSingleInstanceChecker doesn't work on Linux\n-    wxString strMutexName = wxString(\"bitcoin_running.\") + getenv(\"HOMEPATH\");\n-    for (int i = 0; i < strMutexName.size(); i++)\n-        if (!isalnum(strMutexName[i]))\n-            strMutexName[i] = '.';\n-    wxSingleInstanceChecker* psingleinstancechecker = new wxSingleInstanceChecker(strMutexName);\n-    if (psingleinstancechecker->IsAnotherRunning())\n-    {\n-        printf(\"Existing instance found\\n\");\n-        unsigned int nStart = GetTime();\n-        loop\n-        {\n-            // Show the previous instance and exit\n-            HWND hwndPrev = FindWindowA(\"wxWindowClassNR\", \"Bitcoin\");\n-            if (hwndPrev)\n-            {\n-                if (IsIconic(hwndPrev))\n-                    ShowWindow(hwndPrev, SW_RESTORE);\n-                SetForegroundWindow(hwndPrev);\n-                return false;\n-            }\n-\n-            if (GetTime() > nStart + 60)\n-                return false;\n-\n-            // Resume this instance if the other exits\n-            delete psingleinstancechecker;\n-            Sleep(1000);\n-            psingleinstancechecker = new wxSingleInstanceChecker(strMutexName);\n-            if (!psingleinstancechecker->IsAnotherRunning())\n-                break;\n-        }\n-    }\n-#endif\n-\n     //\n     // Make sure only a single bitcoin process is using the data directory.\n     //"
      }
    ]
  },
  {
    "sha": "04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDY3NmU2OTZhZTYwNmExNmE2NmI2MGQwZDdkNmNjMDRmMjhmMWIw",
    "commit": {
      "author": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-08-10T12:08:03Z"
      },
      "committer": {
        "name": "St\u00e9phane Gimenez",
        "email": "dev@gim.name",
        "date": "2011-08-10T12:08:03Z"
      },
      "message": "Merge commit 'bb6412b1eac75bf127769f5eb36378748e78d13f'; commit '4e5d88ce26b7829856e2' into program-options\n\nConflicts:\n\tsrc/init.cpp\n\tsrc/makefile.vc",
      "tree": {
        "sha": "87506c96de14b0dca32a7530b318071c8c81cec7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87506c96de14b0dca32a7530b318071c8c81cec7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/comments",
    "author": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sgimenez",
      "id": 858993,
      "node_id": "MDQ6VXNlcjg1ODk5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sgimenez",
      "html_url": "https://github.com/sgimenez",
      "followers_url": "https://api.github.com/users/sgimenez/followers",
      "following_url": "https://api.github.com/users/sgimenez/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgimenez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgimenez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgimenez/subscriptions",
      "organizations_url": "https://api.github.com/users/sgimenez/orgs",
      "repos_url": "https://api.github.com/users/sgimenez/repos",
      "events_url": "https://api.github.com/users/sgimenez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgimenez/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb6412b1eac75bf127769f5eb36378748e78d13f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb6412b1eac75bf127769f5eb36378748e78d13f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb6412b1eac75bf127769f5eb36378748e78d13f"
      },
      {
        "sha": "4e5d88ce26b7829856e206107fd82e99d58b4211",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e5d88ce26b7829856e206107fd82e99d58b4211",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e5d88ce26b7829856e206107fd82e99d58b4211"
      }
    ],
    "stats": {
      "total": 2340,
      "additions": 1330,
      "deletions": 1010
    },
    "files": [
      {
        "sha": "622661faf787d77d705ad1be0f1c8898864be26f",
        "filename": "locale/de/LC_MESSAGES/bitcoin.mo",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/de/LC_MESSAGES/bitcoin.mo",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/de/LC_MESSAGES/bitcoin.mo",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/locale/de/LC_MESSAGES/bitcoin.mo?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0"
      },
      {
        "sha": "94ecc9692672a16f37d380c553d4d8a37cd03e12",
        "filename": "locale/de/LC_MESSAGES/bitcoin.po",
        "status": "modified",
        "additions": 551,
        "deletions": 443,
        "changes": 994,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/de/LC_MESSAGES/bitcoin.po",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/de/LC_MESSAGES/bitcoin.po",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/locale/de/LC_MESSAGES/bitcoin.po?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -3,128 +3,436 @@ msgid \"\"\n msgstr \"\"\n \"Project-Id-Version: \\n\"\n \"Report-Msgid-Bugs-To: \\n\"\n-\"POT-Creation-Date: 2011-05-15 18:18+0100\\n\"\n-\"PO-Revision-Date: 2011-05-26 22:34+0100\\n\"\n-\"Last-Translator: Jakob Kramer <censored@gmail.com>\\n\"\n+\"POT-Creation-Date: 2011-07-17 02:21+0100\\n\"\n+\"PO-Revision-Date: 2011-07-17 02:54+0100\\n\"\n+\"Last-Translator: Michael Bemmerl <mail@mx-server.de>\\n\"\n \"Language-Team: German <translation-team-de@lists.sourceforge.net>\\n\"\n-\"Language: de\\n\"\n \"MIME-Version: 1.0\\n\"\n \"Content-Type: text/plain; charset=UTF-8\\n\"\n \"Content-Transfer-Encoding: 8bit\\n\"\n+\"Language: de\\n\"\n \"Plural-Forms: nplurals=2; plural=(n != 1);\\n\"\n \"X-Generator: Virtaal 0.6.1\\n\"\n \"X-Poedit-KeywordsList: _;gettext;gettext_noop\\n\"\n \"X-Poedit-Basepath: .\\n\"\n \"X-Poedit-SearchPath-0: ../../..\\n\"\n \n-#: ../../../src/net.cpp:1499\n+#: ../../../src/init.cpp:162\n+msgid \"Bitcoin version\"\n+msgstr \"Bitcoin Version\"\n+\n+#: ../../../src/init.cpp:163\n+msgid \"Usage:\"\n+msgstr \"Verwendung:\"\n+\n+#: ../../../src/init.cpp:165\n+msgid \"Send command to -server or bitcoind\\n\"\n+msgstr \"Sende Befehl zu -server oder bitcoind\\n\"\n+\n+#: ../../../src/init.cpp:166\n+msgid \"List commands\\n\"\n+msgstr \"Liste Befehle auf\\n\"\n+\n+#: ../../../src/init.cpp:167\n+msgid \"Get help for a command\\n\"\n+msgstr \"Hilfe f\u00fcr einen Befehl erhalten\\n\"\n+\n+#: ../../../src/init.cpp:168\n+msgid \"Options:\\n\"\n+msgstr \"Optionen:\\n\"\n+\n+#: ../../../src/init.cpp:169\n+msgid \"Specify configuration file (default: bitcoin.conf)\\n\"\n+msgstr \"Konfigurationsdatei bestimmen (Standard: bitcoin.conf)\\n\"\n+\n+#: ../../../src/init.cpp:170\n+msgid \"Specify pid file (default: bitcoind.pid)\\n\"\n+msgstr \"pid-Datei bestimmen (Standard: bitcoind.pid)\\n\"\n+\n+#: ../../../src/init.cpp:171\n+msgid \"Generate coins\\n\"\n+msgstr \"M\u00fcnzen erzeugen\\n\"\n+\n+#: ../../../src/init.cpp:172\n+msgid \"Don't generate coins\\n\"\n+msgstr \"Keine M\u00fcnzen erzeugen\\n\"\n+\n+#: ../../../src/init.cpp:173\n+msgid \"Start minimized\\n\"\n+msgstr \"Minimiert starten\\n\"\n+\n+#: ../../../src/init.cpp:174\n+msgid \"Specify data directory\\n\"\n+msgstr \"Datenverzeichnis festlegen\\n\"\n+\n+#: ../../../src/init.cpp:175\n+msgid \"Specify connection timeout (in milliseconds)\\n\"\n+msgstr \"Verbindungs-Timeout in Milisekunden\\n\"\n+\n+#: ../../../src/init.cpp:176\n+msgid \"Connect through socks4 proxy\\n\"\n+msgstr \"Socks4-Proxy verwenden\\n\"\n+\n+#: ../../../src/init.cpp:177\n+msgid \"Allow DNS lookups for addnode and connect\\n\"\n+msgstr \"DNS-Aufl\u00f6sung f\u00fcr addnode und connect erlauben\\n\"\n+\n+#: ../../../src/init.cpp:178\n+msgid \"Add a node to connect to\\n\"\n+msgstr \"Einen Teilnehmer hinzuf\u00fcgen, zu dem verbunden werden soll\\n\"\n+\n+#: ../../../src/init.cpp:179\n+msgid \"Connect only to the specified node\\n\"\n+msgstr \"Nur zu dem angegebenen Teilnehmer verbinden\\n\"\n+\n+#: ../../../src/init.cpp:180\n+msgid \"Don't accept connections from outside\\n\"\n+msgstr \"Akzeptiere keine externen Verbindungen\\n\"\n+\n+#: ../../../src/init.cpp:183\n+msgid \"Don't attempt to use UPnP to map the listening port\\n\"\n+msgstr \"Versuche nicht, UPnP zur Portweiterleitung zu nutzen\\n\"\n+\n+#: ../../../src/init.cpp:185\n+msgid \"Attempt to use UPnP to map the listening port\\n\"\n+msgstr \"Versuche, UPnP zur Portweiterleitung zu nutzen\\n\"\n+\n+#: ../../../src/init.cpp:188\n+msgid \"Fee per KB to add to transactions you send\\n\"\n+msgstr \"Geb\u00fchr pro KB f\u00fcr \u00dcberweisungen, die Sie t\u00e4tigen\\n\"\n+\n+#: ../../../src/init.cpp:190\n+msgid \"Accept command line and JSON-RPC commands\\n\"\n+msgstr \"Akzeptiere Kommandozeile und JSON-RPC-Befehle\\n\"\n+\n+#: ../../../src/init.cpp:193\n+msgid \"Run in the background as a daemon and accept commands\\n\"\n+msgstr \"Laufe im Hintergrund als Daemon und akzeptiere Befehle\\n\"\n+\n+#: ../../../src/init.cpp:195\n+msgid \"Use the test network\\n\"\n+msgstr \"Nutze das Testnetzwerk\\n\"\n+\n+#: ../../../src/init.cpp:196\n+msgid \"Username for JSON-RPC connections\\n\"\n+msgstr \"Benutzername f\u00fcr JSON-RPC-Verbindungen\\n\"\n+\n+#: ../../../src/init.cpp:197\n+msgid \"Password for JSON-RPC connections\\n\"\n+msgstr \"Passwort f\u00fcr JSON-RPC-Verbindungen\\n\"\n+\n+#: ../../../src/init.cpp:198\n+msgid \"Listen for JSON-RPC connections on <port> (default: 8332)\\n\"\n+msgstr \"Horche f\u00fcr JSON-RPC-Verbindungen auf <port> (Standard: 8332)\\n\"\n+\n+#: ../../../src/init.cpp:199\n+msgid \"Allow JSON-RPC connections from specified IP address\\n\"\n+msgstr \"Erlaube JSON-RPC-Verbindungen von bestimmter IP-Adresse\\n\"\n+\n+#: ../../../src/init.cpp:200\n+msgid \"Send commands to node running on <ip> (default: 127.0.0.1)\\n\"\n+msgstr \"Sende Befehle zum Knoten mit <ip> (Standard: 127.0.0.1)\\n\"\n+\n+#: ../../../src/init.cpp:201\n+msgid \"Set key pool size to <n> (default: 100)\\n\"\n+msgstr \"Setze Key-Pool-Gr\u00f6\u00dfe auf <n> (Standard: 100)\\n\"\n+\n+#: ../../../src/init.cpp:202\n+msgid \"Rescan the block chain for missing wallet transactions\\n\"\n+msgstr \"Frage die Block-Kette nach fehlenden Brieftaschen-\u00dcberweisungen ab\\n\"\n+\n+#: ../../../src/init.cpp:206\n+msgid \"\"\n+\"\\n\"\n+\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\\n\"\n+msgstr \"\"\n+\"\\n\"\n+\"SSL-Optionen: (siehe das Bitcoin-Wiki f\u00fcr SSL-Installationsanleitungen)\\n\"\n+\n+#: ../../../src/init.cpp:207\n+msgid \"Use OpenSSL (https) for JSON-RPC connections\\n\"\n+msgstr \"Nutze OpenSSL (https) f\u00fcr JSON-RPC-Verbindungen\\n\"\n+\n+#: ../../../src/init.cpp:208\n+msgid \"Server certificate file (default: server.cert)\\n\"\n+msgstr \"Server-Zertifikatsdatei (Standard: server.cert)\\n\"\n+\n+#: ../../../src/init.cpp:209\n+msgid \"Server private key (default: server.pem)\\n\"\n+msgstr \"Server-Geheimschl\u00fcssel (Standard: server.pem)\\n\"\n+\n+#: ../../../src/init.cpp:210\n+msgid \"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\\n\"\n+msgstr \"Anzunehmende Verschl\u00fcsselungen (Standard: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\\n\"\n+\n+#: ../../../src/init.cpp:214\n+msgid \"This help message\\n\"\n+msgstr \"Diese Anleitung\\n\"\n+\n+#: ../../../src/init.cpp:351\n+#, c-format\n+msgid \"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"\n+msgstr \"Erhalte keine Datensperre f\u00fcr das Datenverzeichnis %s. Bitcoin l\u00e4uft wahrscheinlich bereits.\"\n+\n+#: ../../../src/init.cpp:377\n+msgid \"Error loading addr.dat      \\n\"\n+msgstr \"Fehler beim Laden von addr.dat      \\n\"\n+\n+#: ../../../src/init.cpp:383\n+msgid \"Error loading blkindex.dat      \\n\"\n+msgstr \"Fehler beim Laden von blkindex.dat      \\n\"\n+\n+#: ../../../src/init.cpp:394\n+msgid \"Error loading wallet.dat: Wallet corrupted      \\n\"\n+msgstr \"Fehler beim Laden von wallet.dat: Brieftasche besch\u00e4digt      \\n\"\n+\n+#: ../../../src/init.cpp:396\n+msgid \"Error loading wallet.dat: Wallet requires newer version of Bitcoin      \\n\"\n+msgstr \"Fehler beim Laden von wallet.dat: Die Brieftasche ben\u00f6tigt eine neuere Version von Bitcoin      \\n\"\n+\n+#: ../../../src/init.cpp:398\n+msgid \"Error loading wallet.dat      \\n\"\n+msgstr \"Fehler beim Laden von wallet.dat      \\n\"\n+\n+#: ../../../src/init.cpp:488\n+msgid \"Invalid -proxy address\"\n+msgstr \"Ung\u00fcltige -Proxy Adresse\"\n+\n+#: ../../../src/init.cpp:513\n+msgid \"Invalid amount for -paytxfee=<amount>\"\n+msgstr \"Ung\u00fcltiger Betrag f\u00fcr -paytxfee=<amount>\"\n+\n+#: ../../../src/init.cpp:517\n+msgid \"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"\n+msgstr \"Warnung: -paytxfee ist sehr hoch gesetzt. Das ist die \u00dcberweisungsgeb\u00fchr, die Sie f\u00fcr das Senden einer \u00dcberweisung zahlen.\"\n+\n+#: ../../../src/main.cpp:1430\n+msgid \"Warning: Disk space is low  \"\n+msgstr \"Warnung: Festplatte fast voll  \"\n+\n+#: ../../../src/net.cpp:1615\n #, c-format\n msgid \"Unable to bind to port %d on this computer.  Bitcoin is probably already running.\"\n msgstr \"Kann nicht zu Port %d auf diesem Computer verbinden. Bitcoin l\u00e4uft wahrscheinlich bereits.\"\n \n-#: ../../../src/ui.cpp:202\n+#: ../../../src/rpc.cpp:2100\n+#: ../../../src/rpc.cpp:2102\n+#, c-format\n+msgid \"To use the %s option\"\n+msgstr \"Um die %s-Option zu nutzen\"\n+\n+#: ../../../src/rpc.cpp:2104\n+#, c-format\n+msgid \"\"\n+\"Warning: %s, you must set rpcpassword=<password>\\n\"\n+\"in the configuration file: %s\\n\"\n+\"If the file does not exist, create it with owner-readable-only file permissions.\\n\"\n+msgstr \"\"\n+\"Warnung: %s, m\u00fcssen Sie rpcpassword=<password>\\n\"\n+\"in der Konfigurationsdatei %s einstellen.\\n\"\n+\"Wenn die Datei nicht existiert, erstellen Sie sie mit ausschlie\u00dflich Besitzer-Leserechten.\\n\"\n+\n+#: ../../../src/rpc.cpp:2277\n+#, c-format\n+msgid \"\"\n+\"You must set rpcpassword=<password> in the configuration file:\\n\"\n+\"%s\\n\"\n+\"If the file does not exist, create it with owner-readable-only file permissions.\"\n+msgstr \"\"\n+\"Sie m\u00fcssen rpcpassword=<password> in der Konfigurationsdatei\\n\"\n+\"\\\"%s\\\" einstellen.\\n\"\n+\"Wenn die Datei nicht existiert, erstellen Sie sie mit ausschlie\u00dflich Besitzer-Leserechten.\"\n+\n+#: ../../../src/ui.cpp:216\n #, c-format\n msgid \"This transaction is over the size limit.  You can still send it for a fee of %s, which goes to the nodes that process your transaction and helps to support the network.  Do you want to pay the fee?\"\n msgstr \"Diese \u00dcberweisung \u00fcbersteigt das Betragslimit. Sie k\u00f6nnen sie trotzdem t\u00e4tigen, aber es wird eine Geb\u00fchr von %s erhoben, die an den Teilnehmer ausgesch\u00fcttet wird, der Ihre \u00dcberweisung bearbeitet und dadurch hilft, das Netzwerk am laufen zu halten. M\u00f6chten Sie die Geb\u00fchr entrichten?\"\n \n-#: ../../../src/ui.cpp:301\n+#: ../../../src/ui.cpp:259\n+#: ../../../src/ui.cpp:1246\n+msgid \"Enter the current passphrase to the wallet.\"\n+msgstr \"Geben Sie die derzeitige Passphrase der Brieftasche ein.\"\n+\n+# See http://dict.leo.org/forum/viewUnsolvedquery.php?idThread=465865&idForum=2&lp=ende&lang=de\n+#: ../../../src/ui.cpp:260\n+#: ../../../src/ui.cpp:1182\n+#: ../../../src/ui.cpp:1199\n+#: ../../../src/ui.cpp:1247\n+#: ../../../src/ui.cpp:1273\n+#: ../../../src/ui.cpp:1293\n+msgid \"Passphrase\"\n+msgstr \"Passphrase\"\n+\n+#: ../../../src/ui.cpp:266\n+msgid \"Please supply the current wallet decryption passphrase.\"\n+msgstr \"Bitte geben Sie die derzeitige Passphrase zur Entschl\u00fcsselung der Brieftasche an.\"\n+\n+#: ../../../src/ui.cpp:274\n+#: ../../../src/ui.cpp:1258\n+#: ../../../src/ui.cpp:1315\n+msgid \"The passphrase entered for the wallet decryption was incorrect.\"\n+msgstr \"Die eingegebene Passphrase zur Entschl\u00fcsselung der Brieftasche war inkorrekt.\"\n+\n+#: ../../../src/ui.cpp:351\n msgid \"Status\"\n msgstr \"Status\"\n \n-#: ../../../src/ui.cpp:302\n+#: ../../../src/ui.cpp:352\n msgid \"Date\"\n msgstr \"Datum\"\n \n-#: ../../../src/ui.cpp:303\n+#: ../../../src/ui.cpp:353\n msgid \"Description\"\n msgstr \"Beschreibung\"\n \n-#: ../../../src/ui.cpp:304\n+#: ../../../src/ui.cpp:354\n msgid \"Debit\"\n msgstr \"Belastungen\"\n \n-#: ../../../src/ui.cpp:305\n+#: ../../../src/ui.cpp:355\n msgid \"Credit\"\n msgstr \"Gutschriften\"\n \n-#: ../../../src/ui.cpp:511\n+#: ../../../src/ui.cpp:566\n #, c-format\n msgid \"Open for %d blocks\"\n msgstr \"Offen f\u00fcr %d Bl\u00f6cke\"\n \n-#: ../../../src/ui.cpp:513\n+#: ../../../src/ui.cpp:568\n #, c-format\n msgid \"Open until %s\"\n msgstr \"Offen bis %s\"\n \n-#: ../../../src/ui.cpp:519\n+#: ../../../src/ui.cpp:574\n #, c-format\n msgid \"%d/offline?\"\n msgstr \"%d/Offline?\"\n \n-#: ../../../src/ui.cpp:521\n+#: ../../../src/ui.cpp:576\n #, c-format\n msgid \"%d/unconfirmed\"\n msgstr \"%d/nicht best\u00e4tigt\"\n \n-#: ../../../src/ui.cpp:523\n+#: ../../../src/ui.cpp:578\n #, c-format\n msgid \"%d confirmations\"\n msgstr \"%d Best\u00e4tigungen\"\n \n-#: ../../../src/ui.cpp:608\n+#: ../../../src/ui.cpp:663\n msgid \"Generated\"\n msgstr \"Erzeugt\"\n \n-#: ../../../src/ui.cpp:616\n+#: ../../../src/ui.cpp:671\n #, c-format\n msgid \"Generated (%s matures in %d more blocks)\"\n msgstr \"Erzeugt (%s reifen nach %d weiteren Bl\u00f6cken)\"\n \n-#: ../../../src/ui.cpp:620\n+#: ../../../src/ui.cpp:675\n msgid \"Generated - Warning: This block was not received by any other nodes and will probably not be accepted!\"\n msgstr \"Erzeugt - Warnung: Dieser Block wurde von keinem anderen Teilnehmer empfangen und wird wahrscheinlich nicht akzeptiert werden!\"\n \n-#: ../../../src/ui.cpp:624\n+#: ../../../src/ui.cpp:679\n msgid \"Generated (not accepted)\"\n msgstr \"Erzeugt (nicht akzeptiert)\"\n \n-#: ../../../src/ui.cpp:634\n+#: ../../../src/ui.cpp:689\n msgid \"From: \"\n msgstr \"Von: \"\n \n-#: ../../../src/ui.cpp:658\n+#: ../../../src/ui.cpp:713\n msgid \"Received with: \"\n msgstr \"Empfangen durch: \"\n \n-#: ../../../src/ui.cpp:704\n+#: ../../../src/ui.cpp:759\n msgid \"Payment to yourself\"\n msgstr \"\u00dcberweisung an Sie selbst\"\n \n-#: ../../../src/ui.cpp:738\n+#: ../../../src/ui.cpp:793\n msgid \"To: \"\n msgstr \"An: \"\n \n-#: ../../../src/ui.cpp:1053\n+#: ../../../src/ui.cpp:1108\n msgid \"    Generating\"\n msgstr \"    Erzeugen\"\n \n-#: ../../../src/ui.cpp:1055\n+#: ../../../src/ui.cpp:1110\n msgid \"(not connected)\"\n msgstr \"(nicht verbunden)\"\n \n-#: ../../../src/ui.cpp:1058\n+#: ../../../src/ui.cpp:1113\n #, c-format\n msgid \"     %d connections     %d blocks     %d transactions\"\n msgstr \"     %d Verbindungen     %d Bl\u00f6cke     %d \u00dcberweisungen\"\n \n-#: ../../../src/ui.cpp:1163\n-#: ../../../src/ui.cpp:2527\n+#: ../../../src/ui.cpp:1170\n+msgid \"Wallet already encrypted.\"\n+msgstr \"Brieftasche bereits verschl\u00fcsselt.\"\n+\n+#: ../../../src/ui.cpp:1181\n+msgid \"\"\n+\"Enter the new passphrase to the wallet.\\n\"\n+\"Please use a passphrase of 10 or more random characters, or eight or more words.\"\n+msgstr \"\"\n+\"Geben Sie die neue Passphrase der Brieftasche ein.\\n\"\n+\"Bitte benutzen Sie eine Passphrase mit zehn oder mehr zuf\u00e4llig gew\u00e4hlten Zeichen, oder acht oder mehr W\u00f6rter.\"\n+\n+#: ../../../src/ui.cpp:1188\n+#: ../../../src/ui.cpp:1281\n+msgid \"Error: The supplied passphrase was too short.\"\n+msgstr \"Fehler: Die angegebene Passphrase war zu kurz. \"\n+\n+#: ../../../src/ui.cpp:1192\n+msgid \"\"\n+\"WARNING: If you encrypt your wallet and lose your passphrase, you will LOSE ALL OF YOUR BITCOINS!\\n\"\n+\"Are you sure you wish to encrypt your wallet?\"\n+msgstr \"\"\n+\"WARNUNG: Wenn Sie Ihre Brieftasche verschl\u00fcsseln und die Passphrase verlieren, werden Sie ALLE IHRE BITCOINS VERLIEREN!\\n\"\n+\"Sind Sie sicher, dass Sie Ihre Brieftasche verschl\u00fcsseln wollen?\"\n+\n+#: ../../../src/ui.cpp:1198\n+msgid \"Please re-enter your new wallet passphrase.\"\n+msgstr \"Bitte geben Sie erneut Ihre neue Passphrase der Brieftasche ein.\"\n+\n+#: ../../../src/ui.cpp:1207\n+#: ../../../src/ui.cpp:1303\n+msgid \"Error: the supplied passphrases didn't match.\"\n+msgstr \"Fehler: Die angegebenen Passphrasen stimmten nicht \u00fcberein.\"\n+\n+#: ../../../src/ui.cpp:1217\n+msgid \"Wallet encryption failed.\"\n+msgstr \"Verschl\u00fcsselung der Brieftasche fehlgeschlagen.\"\n+\n+#: ../../../src/ui.cpp:1224\n+msgid \"\"\n+\"Wallet Encrypted.\\n\"\n+\"Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.\"\n+msgstr \"\"\n+\"Brieftasche verschl\u00fcsselt.\\n\"\n+\"Beachten Sie, dass das Verschl\u00fcsseln der Brieftasche Ihre Bitcoins nicht v\u00f6llig vor Diebstahl durch Schadprogramme auf Ihrem Computer sch\u00fctzt.\"\n+\n+#: ../../../src/ui.cpp:1235\n+msgid \"Wallet is unencrypted, please encrypt it first.\"\n+msgstr \"Die Brieftasche ist nicht verschl\u00fcsselt, bitte verschl\u00fcsselen Sie sie erst.\"\n+\n+#: ../../../src/ui.cpp:1272\n+msgid \"Enter the new passphrase for the wallet.\"\n+msgstr \"Geben Sie die neue Passphrase der Brieftasche ein.\"\n+\n+#: ../../../src/ui.cpp:1292\n+msgid \"Re-enter the new passphrase for the wallet.\"\n+msgstr \"Geben Sie erneut die neue Passphrase der Brieftasche ein.\"\n+\n+#: ../../../src/ui.cpp:1324\n+msgid \"Wallet Passphrase Changed.\"\n+msgstr \"Die Passphrase der Brieftasche wurde ge\u00e4ndert.\"\n+\n+#: ../../../src/ui.cpp:1381\n+#: ../../../src/ui.cpp:2816\n msgid \"New Receiving Address\"\n msgstr \"&Neue Empfangs-Adresse\"\n \n-#: ../../../src/ui.cpp:1164\n-#: ../../../src/ui.cpp:2528\n+#: ../../../src/ui.cpp:1382\n+#: ../../../src/ui.cpp:2817\n msgid \"\"\n \"You should use a new address for each payment you receive.\\n\"\n \"\\n\"\n@@ -134,553 +442,500 @@ msgstr \"\"\n \"\\n\"\n \"Beschreibung\"\n \n-#: ../../../src/ui.cpp:1233\n+#: ../../../src/ui.cpp:1466\n msgid \"<b>Status:</b> \"\n msgstr \"<b>Status:</b> \"\n \n-#: ../../../src/ui.cpp:1238\n+#: ../../../src/ui.cpp:1471\n msgid \", has not been successfully broadcast yet\"\n msgstr \", wurde noch nicht erfolgreich \u00fcbertragen\"\n \n-#: ../../../src/ui.cpp:1240\n+#: ../../../src/ui.cpp:1473\n #, c-format\n msgid \", broadcast through %d node\"\n msgstr \", durch %d Teilnehmer \u00fcbertragen\"\n \n-#: ../../../src/ui.cpp:1242\n+#: ../../../src/ui.cpp:1475\n #, c-format\n msgid \", broadcast through %d nodes\"\n msgstr \", durch %d Teilnehmer \u00fcbertragen\"\n \n-#: ../../../src/ui.cpp:1246\n+#: ../../../src/ui.cpp:1479\n msgid \"<b>Date:</b> \"\n msgstr \"<b>Datum</b> \"\n \n-#: ../../../src/ui.cpp:1254\n+#: ../../../src/ui.cpp:1487\n msgid \"<b>Source:</b> Generated<br>\"\n msgstr \"<b>Quelle:</b> Erzeugt<br>\"\n \n-#: ../../../src/ui.cpp:1260\n-#: ../../../src/ui.cpp:1278\n+#: ../../../src/ui.cpp:1493\n+#: ../../../src/ui.cpp:1511\n msgid \"<b>From:</b> \"\n msgstr \"<b>Von:</b> \"\n \n-#: ../../../src/ui.cpp:1278\n+#: ../../../src/ui.cpp:1511\n msgid \"unknown\"\n msgstr \"Unbekannt\"\n \n-#: ../../../src/ui.cpp:1279\n-#: ../../../src/ui.cpp:1303\n-#: ../../../src/ui.cpp:1362\n+#: ../../../src/ui.cpp:1512\n+#: ../../../src/ui.cpp:1536\n+#: ../../../src/ui.cpp:1595\n msgid \"<b>To:</b> \"\n msgstr \"<b>An:</b> \"\n \n-#: ../../../src/ui.cpp:1282\n+#: ../../../src/ui.cpp:1515\n msgid \" (yours, label: \"\n msgstr \" (Eigene, Beschreibung: \"\n \n-#: ../../../src/ui.cpp:1284\n+#: ../../../src/ui.cpp:1517\n msgid \" (yours)\"\n msgstr \" (Eigene)\"\n \n-#: ../../../src/ui.cpp:1321\n-#: ../../../src/ui.cpp:1333\n-#: ../../../src/ui.cpp:1379\n-#: ../../../src/ui.cpp:1396\n+#: ../../../src/ui.cpp:1554\n+#: ../../../src/ui.cpp:1566\n+#: ../../../src/ui.cpp:1612\n+#: ../../../src/ui.cpp:1629\n msgid \"<b>Credit:</b> \"\n msgstr \"<b>Gutschrift:</b> \"\n \n-#: ../../../src/ui.cpp:1323\n+#: ../../../src/ui.cpp:1556\n #, c-format\n msgid \"(%s matures in %d more blocks)\"\n msgstr \"(%s reifen nach %d weiteren Bl\u00f6cken)\"\n \n-#: ../../../src/ui.cpp:1325\n+#: ../../../src/ui.cpp:1558\n msgid \"(not accepted)\"\n msgstr \"(nicht akzeptiert)\"\n \n-#: ../../../src/ui.cpp:1370\n-#: ../../../src/ui.cpp:1378\n-#: ../../../src/ui.cpp:1393\n+#: ../../../src/ui.cpp:1603\n+#: ../../../src/ui.cpp:1611\n+#: ../../../src/ui.cpp:1626\n msgid \"<b>Debit:</b> \"\n msgstr \"<b>Belastung:</b> \"\n \n-#: ../../../src/ui.cpp:1384\n+#: ../../../src/ui.cpp:1617\n msgid \"<b>Transaction fee:</b> \"\n msgstr \"<b>\u00dcberweisungsgeb\u00fchr:</b> \"\n \n-#: ../../../src/ui.cpp:1400\n+#: ../../../src/ui.cpp:1633\n msgid \"<b>Net amount:</b> \"\n msgstr \"<b>Nettobetrag:</b> \"\n \n-#: ../../../src/ui.cpp:1407\n+#: ../../../src/ui.cpp:1640\n msgid \"Message:\"\n msgstr \"Nachricht:\"\n \n-#: ../../../src/ui.cpp:1409\n+#: ../../../src/ui.cpp:1642\n msgid \"Comment:\"\n msgstr \"Kommentar:\"\n \n-#: ../../../src/ui.cpp:1412\n+#: ../../../src/ui.cpp:1645\n msgid \"Generated coins must wait 120 blocks before they can be spent.  When you generated this block, it was broadcast to the network to be added to the block chain.  If it fails to get into the chain, it will change to \\\"not accepted\\\" and not be spendable.  This may occasionally happen if another node generates a block within a few seconds of yours.\"\n msgstr \"Erzeugte M\u00fcnzen m\u00fcssen 120 Bl\u00f6cke lang reifen. Als Sie diesen Block erzeugt haben, wurde er an alle Teilnehmer \u00fcbertragen, damit er zur Block-Kette hinzugef\u00fcgt werden kann. Falls der Block es nicht in die Block-Kette schafft, wird die Beschreibung zu \\\"nicht akzeptiert\\\" ge\u00e4ndert, und Sie k\u00f6nnen die M\u00fcnzen nicht ausgeben. Dies kann manchmal passieren, wenn Sie und ein anderer Teilnehmer ann\u00e4hernd zeitgleich einen Block erzeugen.\"\n \n-#: ../../../src/ui.cpp:1592\n+#: ../../../src/ui.cpp:1825\n msgid \"Cannot write autostart/bitcoin.desktop file\"\n msgstr \"Kann Datei autostart/bitcoin.desktop nicht schreiben\"\n \n-#: ../../../src/ui.cpp:1628\n+#: ../../../src/ui.cpp:1861\n msgid \"Main\"\n msgstr \"Haupt\"\n \n-#: ../../../src/ui.cpp:1636\n+#: ../../../src/ui.cpp:1871\n msgid \"&Start Bitcoin on window system startup\"\n msgstr \"Bitcoin beim &Systemstart ausf\u00fchren\"\n \n-#: ../../../src/ui.cpp:1643\n+#: ../../../src/ui.cpp:1878\n msgid \"&Minimize on close\"\n-msgstr \"Beim schlie\u00dfen &Minimieren\"\n+msgstr \"Beim Schlie\u00dfen &minimieren\"\n \n-#: ../../../src/ui.cpp:1785\n+#: ../../../src/ui.cpp:2020\n #, c-format\n msgid \"version %s\"\n-msgstr \"version %s\"\n+msgstr \"Version %s\"\n \n-#: ../../../src/ui.cpp:1897\n+#: ../../../src/ui.cpp:2143\n msgid \"Error in amount  \"\n msgstr \"Fehler in Betrag  \"\n \n-#: ../../../src/ui.cpp:1897\n-#: ../../../src/ui.cpp:1902\n-#: ../../../src/ui.cpp:1907\n-#: ../../../src/ui.cpp:1942\n-#: ../../../src/uibase.cpp:55\n+#: ../../../src/ui.cpp:2143\n+#: ../../../src/ui.cpp:2148\n+#: ../../../src/ui.cpp:2153\n+#: ../../../src/ui.cpp:2202\n+#: ../../../src/uibase.cpp:61\n msgid \"Send Coins\"\n msgstr \"\u00dcberweisen\"\n \n-#: ../../../src/ui.cpp:1902\n+#: ../../../src/ui.cpp:2148\n msgid \"Amount exceeds your balance  \"\n msgstr \"Der Betrag \u00fcbersteigt Ihr Guthaben  \"\n \n-#: ../../../src/ui.cpp:1907\n+#: ../../../src/ui.cpp:2153\n msgid \"Total exceeds your balance when the \"\n msgstr \"Der Betrag \u00fcbersteigt Ihr Guthaben, wenn man die \"\n \n-#: ../../../src/ui.cpp:1907\n+#: ../../../src/ui.cpp:2153\n msgid \" transaction fee is included  \"\n msgstr \" \u00dcberweisungsgeb\u00fchr ber\u00fccksichtigt  \"\n \n-#: ../../../src/ui.cpp:1925\n+#: ../../../src/ui.cpp:2176\n msgid \"Payment sent  \"\n msgstr \"Zahlung \u00fcberwiesen  \"\n \n-#: ../../../src/ui.cpp:1925\n-#: ../../../src/ui.cpp:1930\n-#: ../../../src/ui.cpp:2074\n-#: ../../../src/ui.cpp:2227\n-#: ../../../src/main.cpp:3999\n+#: ../../../src/ui.cpp:2176\n+#: ../../../src/ui.cpp:2185\n+#: ../../../src/ui.cpp:2336\n+#: ../../../src/ui.cpp:2500\n+#: ../../../src/wallet.cpp:1097\n msgid \"Sending...\"\n msgstr \"\u00dcberweise ...\"\n \n-#: ../../../src/ui.cpp:1942\n+#: ../../../src/ui.cpp:2202\n msgid \"Invalid address  \"\n msgstr \"Ung\u00fcltige Adresse  \"\n \n-#: ../../../src/ui.cpp:1995\n+#: ../../../src/ui.cpp:2257\n #, c-format\n msgid \"Sending %s to %s\"\n msgstr \"\u00dcberweise %s an %s\"\n \n-#: ../../../src/ui.cpp:2068\n-#: ../../../src/ui.cpp:2101\n+#: ../../../src/ui.cpp:2330\n+#: ../../../src/ui.cpp:2363\n msgid \"CANCELLED\"\n msgstr \"ANNULLIERT\"\n \n-#: ../../../src/ui.cpp:2072\n+#: ../../../src/ui.cpp:2334\n msgid \"Cancelled\"\n msgstr \"Annulliert\"\n \n-#: ../../../src/ui.cpp:2074\n+#: ../../../src/ui.cpp:2336\n msgid \"Transfer cancelled  \"\n msgstr \"\u00dcberweisung annulliert  \"\n \n-#: ../../../src/ui.cpp:2127\n+#: ../../../src/ui.cpp:2389\n msgid \"Error: \"\n msgstr \"Fehler: \"\n \n-#: ../../../src/ui.cpp:2141\n-#: ../../../src/ui.cpp:2212\n-#: ../../../src/main.cpp:4018\n+#: ../../../src/ui.cpp:2403\n+#: ../../../src/ui.cpp:2474\n+#: ../../../src/wallet.cpp:1116\n msgid \"Insufficient funds\"\n msgstr \"Unzureichende Geldmittel\"\n \n-#: ../../../src/ui.cpp:2146\n+#: ../../../src/ui.cpp:2408\n msgid \"Connecting...\"\n msgstr \"Verbinde ...\"\n \n-#: ../../../src/ui.cpp:2151\n+#: ../../../src/ui.cpp:2413\n msgid \"Unable to connect\"\n msgstr \"Kann nicht verbinden\"\n \n-#: ../../../src/ui.cpp:2156\n+#: ../../../src/ui.cpp:2418\n msgid \"Requesting public key...\"\n msgstr \"Fordere \u00f6ffentlichen Schl\u00fcssel an ...\"\n \n-#: ../../../src/ui.cpp:2168\n+#: ../../../src/ui.cpp:2430\n msgid \"Received public key...\"\n msgstr \"\u00d6ffentlicher Schl\u00fcssel empfangen ...\"\n \n-#: ../../../src/ui.cpp:2182\n+#: ../../../src/ui.cpp:2444\n msgid \"Recipient is not accepting transactions sent by IP address\"\n msgstr \"Empf\u00e4nger akzeptiert keine \u00dcberweisungen von IP-Adressen\"\n \n-#: ../../../src/ui.cpp:2184\n+#: ../../../src/ui.cpp:2446\n msgid \"Transfer was not accepted\"\n msgstr \"\u00dcberweisung wurde nicht akzeptiert\"\n \n-#: ../../../src/ui.cpp:2193\n+#: ../../../src/ui.cpp:2455\n msgid \"Invalid response received\"\n msgstr \"Ung\u00fcltige Antwort erhalten\"\n \n-#: ../../../src/ui.cpp:2208\n+#: ../../../src/ui.cpp:2470\n msgid \"Creating transaction...\"\n msgstr \"Erstelle \u00dcberweisung ...\"\n \n-#: ../../../src/ui.cpp:2220\n+#: ../../../src/ui.cpp:2489\n #, c-format\n msgid \"This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds\"\n msgstr \"Diese \u00dcberweisung ben\u00f6tigt eine \u00dcberweisungsgeb\u00fchr von mindestens %s wegen ihres Betrags, Komplexit\u00e4t oder der Benutzung k\u00fcrzlich erhaltener Geldmittel\"\n \n-#: ../../../src/ui.cpp:2222\n+#: ../../../src/ui.cpp:2491\n msgid \"Transaction creation failed\"\n msgstr \"\u00dcberweisung konnte nicht erzeugt werden.\"\n \n-#: ../../../src/ui.cpp:2229\n+#: ../../../src/ui.cpp:2502\n msgid \"Transaction aborted\"\n msgstr \"\u00dcberweisung abgebrochen\"\n \n-#: ../../../src/ui.cpp:2237\n+#: ../../../src/ui.cpp:2510\n msgid \"Lost connection, transaction cancelled\"\n msgstr \"Verbindung verloren, \u00dcberweisungsvorgang abgebrochen\"\n \n-#: ../../../src/ui.cpp:2253\n+#: ../../../src/ui.cpp:2526\n msgid \"Sending payment...\"\n msgstr \"\u00dcberweise Zahlung ...\"\n \n-#: ../../../src/ui.cpp:2259\n+#: ../../../src/ui.cpp:2532\n msgid \"The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\"\n msgstr \"Die \u00dcberweisung wurde abgelehnt. Das kann passieren, wenn einige der M\u00fcnzen in Ihrer Brieftasche bereits ausgegeben wurden, z.B. weil Sie eine Kopie der Brieftasche (wallet.dat) gemacht haben. Bitcoins, die mithilfe der Kopie ausgegeben wurden, sind in dieser Brieftasche noch nicht als ausgegeben markiert worden.\"\n \n-#: ../../../src/ui.cpp:2268\n+#: ../../../src/ui.cpp:2541\n msgid \"Waiting for confirmation...\"\n msgstr \"Warte auf Best\u00e4tigung ...\"\n \n-#: ../../../src/ui.cpp:2286\n+#: ../../../src/ui.cpp:2559\n msgid \"\"\n \"The payment was sent, but the recipient was unable to verify it.\\n\"\n \"The transaction is recorded and will credit to the recipient,\\n\"\n \"but the comment information will be blank.\"\n msgstr \"\"\n \"Die Zahlung wurde \u00fcberwiesen, aber der Empf\u00e4nger konnte sie nicht best\u00e4tigen.\\n\"\n \"Die \u00dcberweisung wurde gespeichert und wird dem Empf\u00e4nger gutgeschrieben,\\n\"\n-\"aber die begleitende Nachricht wird nicht ankommen.\"\n+\"aber die begleitende Nachricht wird leer sein.\"\n \n-#: ../../../src/ui.cpp:2295\n+#: ../../../src/ui.cpp:2568\n msgid \"Payment was sent, but an invalid response was received\"\n msgstr \"Die Zahlung wurde \u00fcberwiesen, aber die Antwort war fehlerhaft\"\n \n-#: ../../../src/ui.cpp:2301\n+#: ../../../src/ui.cpp:2574\n msgid \"Payment completed\"\n msgstr \"Zahlung ausgef\u00fchrt\"\n \n-#: ../../../src/ui.cpp:2332\n-#: ../../../src/ui.cpp:2478\n-#: ../../../src/ui.cpp:2515\n+#: ../../../src/ui.cpp:2616\n+#: ../../../src/ui.cpp:2764\n+#: ../../../src/ui.cpp:2804\n msgid \"Name\"\n msgstr \"Name\"\n \n-#: ../../../src/ui.cpp:2333\n-#: ../../../src/ui.cpp:2478\n-#: ../../../src/ui.cpp:2515\n+#: ../../../src/ui.cpp:2617\n+#: ../../../src/ui.cpp:2764\n+#: ../../../src/ui.cpp:2804\n msgid \"Address\"\n msgstr \"Adresse\"\n \n-#: ../../../src/ui.cpp:2335\n-#: ../../../src/ui.cpp:2490\n+#: ../../../src/ui.cpp:2619\n+#: ../../../src/ui.cpp:2776\n msgid \"Label\"\n msgstr \"Beschreibung\"\n \n-#: ../../../src/ui.cpp:2336\n-#: ../../../src/uibase.cpp:837\n+#: ../../../src/ui.cpp:2620\n+#: ../../../src/uibase.cpp:847\n msgid \"Bitcoin Address\"\n msgstr \"Bitcoin-Adresse\"\n \n-#: ../../../src/ui.cpp:2460\n+#: ../../../src/ui.cpp:2746\n msgid \"This is one of your own addresses for receiving payments and cannot be entered in the address book.  \"\n msgstr \"Dies ist eine Ihrer eigenen Adressen f\u00fcr den Zahlungseingang und kann deshalb nicht in das Adressbuch \u00fcbernommen werden.  \"\n \n-#: ../../../src/ui.cpp:2478\n-#: ../../../src/ui.cpp:2484\n+#: ../../../src/ui.cpp:2764\n+#: ../../../src/ui.cpp:2770\n msgid \"Edit Address\"\n msgstr \"Adresse bearbeiten\"\n \n-#: ../../../src/ui.cpp:2490\n+#: ../../../src/ui.cpp:2776\n msgid \"Edit Address Label\"\n msgstr \"Beschreibung der Adresse bearbeiten\"\n \n-#: ../../../src/ui.cpp:2515\n-#: ../../../src/ui.cpp:2521\n+#: ../../../src/ui.cpp:2804\n+#: ../../../src/ui.cpp:2810\n msgid \"Add Address\"\n msgstr \"Adresse hinzuf\u00fcgen\"\n \n-#: ../../../src/ui.cpp:2598\n+#: ../../../src/ui.cpp:2898\n msgid \"Bitcoin\"\n msgstr \"Bitcoin\"\n \n-#: ../../../src/ui.cpp:2600\n+#: ../../../src/ui.cpp:2900\n msgid \"Bitcoin - Generating\"\n msgstr \"Bitcoin - Erzeuge\"\n \n-#: ../../../src/ui.cpp:2602\n+#: ../../../src/ui.cpp:2902\n msgid \"Bitcoin - (not connected)\"\n msgstr \"Bitcoin - (nicht verbunden)\"\n \n-#: ../../../src/ui.cpp:2681\n+#: ../../../src/ui.cpp:2981\n msgid \"&Open Bitcoin\"\n-msgstr \"Bitcoin \u00d6&ffnen\"\n+msgstr \"Bitcoin \u00f6&ffnen\"\n \n-#: ../../../src/ui.cpp:2682\n+#: ../../../src/ui.cpp:2982\n msgid \"&Send Bitcoins\"\n msgstr \"Bitcoins &senden\"\n \n-#: ../../../src/ui.cpp:2683\n+#: ../../../src/ui.cpp:2983\n msgid \"O&ptions...\"\n msgstr \"O&ptionen ...\"\n \n-#: ../../../src/ui.cpp:2686\n+#: ../../../src/ui.cpp:2986\n #: ../../../src/uibase.cpp:25\n msgid \"E&xit\"\n msgstr \"B&eenden\"\n \n-#: ../../../src/ui.cpp:2902\n+#: ../../../src/ui.cpp:3212\n msgid \"Program has crashed and will terminate.  \"\n msgstr \"Das Programm ist abgest\u00fcrzt und wird beendet.  \"\n \n-#: ../../../src/main.cpp:1868\n-msgid \"Warning: Disk space is low  \"\n-msgstr \"Warnung: Festplatte fast voll  \"\n-\n-#: ../../../src/main.cpp:3992\n-#, c-format\n-msgid \"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"\n-msgstr \"Fehler: Diese \u00dcberweisung ben\u00f6tigt eine \u00dcberweisungsgeb\u00fchr von mindestens %s wegen ihrer Gr\u00f6\u00dfe, Komplexit\u00e4t oder der Benutzung erst k\u00fcrzlich erhaltener Geldmittel  \"\n-\n-#: ../../../src/main.cpp:3994\n-msgid \"Error: Transaction creation failed  \"\n-msgstr \"Fehler: \u00dcberweisung konnte nicht erzeugt werden.  \"\n-\n-#: ../../../src/main.cpp:4003\n-msgid \"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\"\n-msgstr \"Fehler: Die \u00dcberweisung wurde abgelehnt. Das kann passieren, wenn einige der M\u00fcnzen in Ihrer Brieftasche bereits ausgegeben wurden, z.B. weil Sie eine Kopie der Brieftasche (wallet.dat) gemacht haben. Bitcoins, die mithilfe der Kopie ausgegeben wurden, sind in dieser Brieftasche noch nicht als ausgegeben markiert worden.\"\n-\n-#: ../../../src/main.cpp:4016\n-msgid \"Invalid amount\"\n-msgstr \"Ung\u00fcltiger Betrag\"\n-\n-#: ../../../src/main.cpp:4023\n-msgid \"Invalid bitcoin address\"\n-msgstr \"Ung\u00fcltige Bitcoin-Adresse\"\n-\n-#: ../../../src/rpc.cpp:1800\n-#: ../../../src/rpc.cpp:1802\n-#, c-format\n-msgid \"To use the %s option\"\n-msgstr \"Um die %s Option zu nutzen\"\n-\n-#: ../../../src/rpc.cpp:1804\n-#, c-format\n-msgid \"\"\n-\"Warning: %s, you must set rpcpassword=<password>\\n\"\n-\"in the configuration file: %s\\n\"\n-\"If the file does not exist, create it with owner-readable-only file permissions.\\n\"\n-msgstr \"\"\n-\"Warnung: %s, Sie m\u00fcssen rpcpassword=<password> einstellen\\n\"\n-\"in der Konfigurationsdatei: %s\\n\"\n-\"Wenn die Datei nicht existiert, erstellen Sie sie mit ausschlie\u00dflich Besitzer-Leserechten.\\n\"\n-\n-#: ../../../src/rpc.cpp:1972\n-#, c-format\n-msgid \"\"\n-\"You must set rpcpassword=<password> in the configuration file:\\n\"\n-\"%s\\n\"\n-\"If the file does not exist, create it with owner-readable-only file permissions.\"\n-msgstr \"\"\n-\"Sie m\u00fcssen rpcpassword=<password> in der Konfigurationsdatei einstellen:\\n\"\n-\"%s\\n\"\n-\"Wenn die Datei nicht existiert, erstellen Sie sie mit ausschlie\u00dflich Besitzer-Leserechten.\"\n-\n-#: ../../../src/util.cpp:865\n-msgid \"Warning: Please check that your computer's date and time are correct.  If your clock is wrong Bitcoin will not work properly.\"\n-msgstr \"Warnung: Bitte \u00fcberpr\u00fcfen Sie die Richtigkeit des Datums und der Uhrzeit Ihres Computers. Falls Ihre Uhr falsch l\u00e4uft, wird Bitcoin nicht richtig funktionieren.\"\n-\n-#: ../../../src/util.cpp:898\n-msgid \"beta\"\n-msgstr \"Beta\"\n-\n #: ../../../src/uibase.cpp:28\n msgid \"&File\"\n msgstr \"&Datei\"\n \n #: ../../../src/uibase.cpp:32\n msgid \"&Your Receiving Addresses...\"\n-msgstr \"&Ihre Empfangs-Adressen ...\"\n+msgstr \"&Ihre Empfangs-Adressen...\"\n+\n+#: ../../../src/uibase.cpp:35\n+msgid \"&Encrypt Wallet...\"\n+msgstr \"Bri&eftasche verschl\u00fcsseln...\"\n \n-#: ../../../src/uibase.cpp:36\n+#: ../../../src/uibase.cpp:38\n+msgid \"&Change Wallet Encryption Passphrase...\"\n+msgstr \"Passphrase der Vers&chl\u00fcsselung der Brieftasche \u00e4ndern...\"\n+\n+#: ../../../src/uibase.cpp:42\n msgid \"&Options...\"\n-msgstr \"&Optionen ...\"\n+msgstr \"&Optionen...\"\n \n-#: ../../../src/uibase.cpp:39\n+#: ../../../src/uibase.cpp:45\n msgid \"&Settings\"\n msgstr \"&Einstellungen\"\n \n-#: ../../../src/uibase.cpp:43\n+#: ../../../src/uibase.cpp:49\n msgid \"&About...\"\n msgstr \"\u00dc&ber...\"\n \n-#: ../../../src/uibase.cpp:46\n+#: ../../../src/uibase.cpp:52\n msgid \"&Help\"\n msgstr \"&Hilfe\"\n \n-#: ../../../src/uibase.cpp:56\n+#: ../../../src/uibase.cpp:62\n msgid \"Address Book\"\n msgstr \"Adressbuch\"\n \n-#: ../../../src/uibase.cpp:69\n+#: ../../../src/uibase.cpp:75\n msgid \"Your Bitcoin Address:\"\n msgstr \"Ihre Bitcoin-Adresse:\"\n \n-#: ../../../src/uibase.cpp:76\n+#: ../../../src/uibase.cpp:82\n msgid \" &New... \"\n-msgstr \" &Neu ... \"\n+msgstr \" &Neu... \"\n \n-#: ../../../src/uibase.cpp:79\n-#: ../../../src/uibase.cpp:780\n-#: ../../../src/uibase.cpp:883\n+#: ../../../src/uibase.cpp:85\n+#: ../../../src/uibase.cpp:790\n+#: ../../../src/uibase.cpp:893\n msgid \" &Copy to Clipboard \"\n msgstr \" In die Zwischenablage &kopieren \"\n \n-#: ../../../src/uibase.cpp:93\n+#: ../../../src/uibase.cpp:99\n msgid \"Balance:\"\n msgstr \"Kontostand:\"\n \n-#: ../../../src/uibase.cpp:109\n+#: ../../../src/uibase.cpp:115\n msgid \" All\"\n msgstr \" Alle\"\n \n-#: ../../../src/uibase.cpp:109\n+#: ../../../src/uibase.cpp:115\n msgid \" Sent\"\n msgstr \" \u00dcberwiesen\"\n \n-#: ../../../src/uibase.cpp:109\n+#: ../../../src/uibase.cpp:115\n msgid \" Received\"\n msgstr \" Erhalten\"\n \n-#: ../../../src/uibase.cpp:109\n+#: ../../../src/uibase.cpp:115\n msgid \" In Progress\"\n msgstr \" In Bearbeitung\"\n \n-#: ../../../src/uibase.cpp:130\n+#: ../../../src/uibase.cpp:136\n msgid \"All Transactions\"\n msgstr \"Alle \u00dcberweisungen\"\n \n-#: ../../../src/uibase.cpp:141\n+#: ../../../src/uibase.cpp:147\n msgid \"Sent/Received\"\n msgstr \"\u00dcberwiesen/Erhalten\"\n \n-#: ../../../src/uibase.cpp:152\n+#: ../../../src/uibase.cpp:158\n msgid \"Sent\"\n msgstr \"\u00dcberwiesen\"\n \n-#: ../../../src/uibase.cpp:163\n+#: ../../../src/uibase.cpp:169\n msgid \"Received\"\n msgstr \"Erhalten\"\n \n-#: ../../../src/uibase.cpp:302\n-#: ../../../src/uibase.cpp:443\n-#: ../../../src/uibase.cpp:542\n-#: ../../../src/uibase.cpp:722\n-#: ../../../src/uibase.cpp:783\n-#: ../../../src/uibase.cpp:892\n-#: ../../../src/uibase.cpp:981\n+#: ../../../src/uibase.cpp:312\n+#: ../../../src/uibase.cpp:453\n+#: ../../../src/uibase.cpp:552\n+#: ../../../src/uibase.cpp:732\n+#: ../../../src/uibase.cpp:793\n+#: ../../../src/uibase.cpp:902\n+#: ../../../src/uibase.cpp:991\n msgid \"OK\"\n msgstr \"OK\"\n \n-#: ../../../src/uibase.cpp:345\n+#: ../../../src/uibase.cpp:355\n msgid \"&Start Bitcoin on system startup\"\n msgstr \"Bitcoin beim &Systemstart ausf\u00fchren\"\n \n-#: ../../../src/uibase.cpp:348\n+#: ../../../src/uibase.cpp:358\n msgid \"&Minimize to the tray instead of the taskbar\"\n msgstr \"In den Infobereich statt in die Taskleiste &minimieren\"\n \n-#: ../../../src/uibase.cpp:351\n+#: ../../../src/uibase.cpp:361\n msgid \"Map port using &UPnP\"\n msgstr \"Portweiterleitung via &UPnP\"\n \n-#: ../../../src/uibase.cpp:354\n+#: ../../../src/uibase.cpp:364\n msgid \"M&inimize to the tray on close\"\n msgstr \"Beim Schlie\u00dfen in den Infobereich m&inimieren\"\n \n-#: ../../../src/uibase.cpp:360\n+#: ../../../src/uibase.cpp:370\n msgid \"&Connect through socks4 proxy: \"\n msgstr \"&Per Socks4-Proxy verbinden: \"\n \n-#: ../../../src/uibase.cpp:371\n+#: ../../../src/uibase.cpp:381\n msgid \"Proxy &IP:\"\n-msgstr \"Proxy &IP:\"\n+msgstr \"Proxy-&IP:\"\n \n-#: ../../../src/uibase.cpp:379\n+#: ../../../src/uibase.cpp:389\n msgid \" &Port:\"\n msgstr \" &Port:\"\n \n-#: ../../../src/uibase.cpp:392\n+#: ../../../src/uibase.cpp:402\n msgid \"Optional transaction fee per KB that helps make sure your transactions are processed quickly.  Most transactions are 1KB.  Fee 0.01 recommended.\"\n msgstr \"Eine freiwillige \u00dcberweisungsgeb\u00fchr pro KB, die dabei hilft, dass Ihre \u00dcberweisungen schnell durchgef\u00fchrt werden. Die meisten \u00dcberweisungen sind 1 KB gro\u00df. Eine Geb\u00fchr von 0,01 ist empfohlen.\"\n \n-#: ../../../src/uibase.cpp:399\n+#: ../../../src/uibase.cpp:409\n msgid \"Pay transaction fee:\"\n msgstr \"\u00dcberweisungsgeb\u00fchr:\"\n \n-#: ../../../src/uibase.cpp:420\n+#: ../../../src/uibase.cpp:430\n msgid \"// [don't translate] Test panel 2 for future expansion\"\n msgstr \"\"\n \n-#: ../../../src/uibase.cpp:424\n+#: ../../../src/uibase.cpp:434\n msgid \"// [don't translate] Let's not start multiple pages until the first page is filled up\"\n msgstr \"\"\n \n-#: ../../../src/uibase.cpp:446\n-#: ../../../src/uibase.cpp:668\n-#: ../../../src/uibase.cpp:727\n-#: ../../../src/uibase.cpp:786\n-#: ../../../src/uibase.cpp:895\n-#: ../../../src/uibase.cpp:984\n+#: ../../../src/uibase.cpp:456\n+#: ../../../src/uibase.cpp:678\n+#: ../../../src/uibase.cpp:737\n+#: ../../../src/uibase.cpp:796\n+#: ../../../src/uibase.cpp:905\n+#: ../../../src/uibase.cpp:994\n msgid \"Cancel\"\n msgstr \"Abbrechen\"\n \n-#: ../../../src/uibase.cpp:449\n+#: ../../../src/uibase.cpp:459\n msgid \"&Apply\"\n msgstr \"&Anwenden\"\n \n-#: ../../../src/uibase.cpp:508\n+#: ../../../src/uibase.cpp:518\n msgid \"Bitcoin \"\n msgstr \"Bitcoin \"\n \n-#: ../../../src/uibase.cpp:514\n+#: ../../../src/uibase.cpp:524\n msgid \"version\"\n msgstr \"Version\"\n \n-#: ../../../src/uibase.cpp:525\n+#: ../../../src/uibase.cpp:535\n msgid \"\"\n \"Copyright (c) 2009-2011 Bitcoin Developers\\n\"\n \"\\n\"\n@@ -705,39 +960,39 @@ msgstr \"\"\n \"kryptographische Software von Eric Young (eay@cryptsoft.com)\\n\"\n \"und UPnP-Software, entwickelt von Thomas Bernard.\"\n \n-#: ../../../src/uibase.cpp:581\n+#: ../../../src/uibase.cpp:591\n msgid \"Enter a Bitcoin address (e.g. 1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L)\"\n msgstr \"Geben Sie eine Bitcoin-Adresse ein (z.B. 1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L)\"\n \n-#: ../../../src/uibase.cpp:595\n+#: ../../../src/uibase.cpp:605\n msgid \"Pay &To:\"\n msgstr \"\u00dcberweisen &An:\"\n \n-#: ../../../src/uibase.cpp:610\n+#: ../../../src/uibase.cpp:620\n msgid \"&Paste\"\n msgstr \"&Einf\u00fcgen\"\n \n-#: ../../../src/uibase.cpp:613\n+#: ../../../src/uibase.cpp:623\n msgid \" Address &Book...\"\n msgstr \" Address&buch...\"\n \n-#: ../../../src/uibase.cpp:620\n+#: ../../../src/uibase.cpp:630\n msgid \"&Amount:\"\n msgstr \"&Betrag:\"\n \n-#: ../../../src/uibase.cpp:630\n+#: ../../../src/uibase.cpp:640\n msgid \"T&ransfer:\"\n msgstr \"\u00dc&berweisung:\"\n \n-#: ../../../src/uibase.cpp:636\n+#: ../../../src/uibase.cpp:646\n msgid \" Standard\"\n msgstr \" Standard\"\n \n-#: ../../../src/uibase.cpp:663\n+#: ../../../src/uibase.cpp:673\n msgid \"&Send\"\n msgstr \"\u00dc&berweisen\"\n \n-#: ../../../src/uibase.cpp:711\n+#: ../../../src/uibase.cpp:721\n msgid \"\"\n \"\\n\"\n \"\\n\"\n@@ -747,229 +1002,82 @@ msgstr \"\"\n \"\\n\"\n \"Verbinde ...\"\n \n-#: ../../../src/uibase.cpp:761\n+#: ../../../src/uibase.cpp:771\n msgid \"These are your Bitcoin addresses for receiving payments.  You may want to give a different one to each sender so you can keep track of who is paying you.  The highlighted address is displayed in the main window.\"\n msgstr \"Dies sind Ihre Bitcoin-Adressen zum Empfang von Zahlungen. Sie sollten vielleicht jedem \u00dcberweisenden eine andere Adresse geben um nachvollziehen zu k\u00f6nnen von wem eine Zahlung stammt. Die markierte Adresse wird im Hauptfenster angezeigt.\"\n \n-#: ../../../src/uibase.cpp:774\n-#: ../../../src/uibase.cpp:886\n+#: ../../../src/uibase.cpp:784\n+#: ../../../src/uibase.cpp:896\n msgid \"&Edit...\"\n-msgstr \"&Bearbeiten ...\"\n+msgstr \"&Bearbeiten...\"\n \n-#: ../../../src/uibase.cpp:777\n-#: ../../../src/uibase.cpp:889\n+#: ../../../src/uibase.cpp:787\n+#: ../../../src/uibase.cpp:899\n msgid \" &New Address... \"\n-msgstr \" &Neue Adresse ... \"\n+msgstr \" &Neue Adresse... \"\n \n-#: ../../../src/uibase.cpp:849\n+#: ../../../src/uibase.cpp:859\n msgid \"Sending\"\n msgstr \"\u00dcberweise\"\n \n-#: ../../../src/uibase.cpp:857\n+#: ../../../src/uibase.cpp:867\n msgid \"These are your Bitcoin addresses for receiving payments.  You can give a different one to each sender to keep track of who is paying you.  The highlighted address will be displayed in the main window.\"\n msgstr \"Dies sind Ihre Bitcoin-Adressen zum Empfang von Zahlungen. Sie k\u00f6nnen jedem \u00dcberweisenden eine andere Adresse geben um nachvollziehen zu k\u00f6nnen von wem eine Zahlung stammt. Die markierte Adresse wird im Hauptfenster angezeigt.\"\n \n-#: ../../../src/uibase.cpp:870\n+#: ../../../src/uibase.cpp:880\n msgid \"Receiving\"\n msgstr \"Empfange\"\n \n-#: ../../../src/uibase.cpp:880\n+#: ../../../src/uibase.cpp:890\n msgid \"&Delete\"\n msgstr \"&L\u00f6schen\"\n \n-#: ../../../src/init.cpp:147\n-msgid \"Bitcoin version\"\n-msgstr \"Bitcoin \"\n-\n-#: ../../../src/init.cpp:148\n-msgid \"Usage:\"\n-msgstr \"Benutz:\"\n-\n-#: ../../../src/init.cpp:150\n-msgid \"Send command to -server or bitcoind\\n\"\n-msgstr \"Sende Befehl zu -server oder bitcoind\\n\"\n-\n-#: ../../../src/init.cpp:151\n-msgid \"List commands\\n\"\n-msgstr \"Liste Befehle auf\\n\"\n-\n-#: ../../../src/init.cpp:152\n-msgid \"Get help for a command\\n\"\n-msgstr \"Hilfe f\u00fcr einen Befehl erhalten\\n\"\n-\n-#: ../../../src/init.cpp:153\n-msgid \"Options:\\n\"\n-msgstr \"Optionen:\\n\"\n-\n-#: ../../../src/init.cpp:154\n-msgid \"Specify configuration file (default: bitcoin.conf)\\n\"\n-msgstr \"Konfigurationsdatei bestimmen (Standard: bitcoin.conf)\\n\"\n-\n-#: ../../../src/init.cpp:155\n-msgid \"Specify pid file (default: bitcoind.pid)\\n\"\n-msgstr \"pid-Datei bestimmen (Standard: bitcoind.pid)\\n\"\n-\n-#: ../../../src/init.cpp:156\n-msgid \"Generate coins\\n\"\n-msgstr \"M\u00fcnzen erzeugen\\n\"\n-\n-#: ../../../src/init.cpp:157\n-msgid \"Don't generate coins\\n\"\n-msgstr \"Keine M\u00fcnzen erzeugen\\n\"\n-\n-#: ../../../src/init.cpp:158\n-msgid \"Start minimized\\n\"\n-msgstr \"Minimiert starten\\n\"\n-\n-#: ../../../src/init.cpp:159\n-msgid \"Specify data directory\\n\"\n-msgstr \"Datenverzeichnis festlegen\\n\"\n-\n-#: ../../../src/init.cpp:160\n-msgid \"Connect through socks4 proxy\\n\"\n-msgstr \"Socks4-Proxy verwenden\\n\"\n-\n-#: ../../../src/init.cpp:161\n-msgid \"Specify connection timeout (in milliseconds)\\n\"\n-msgstr \"Verbindungs-Timeout in Milisekunden\\n\"\n-\n-#: ../../../src/init.cpp:161\n-msgid \"Allow DNS lookups for addnode and connect\\n\"\n-msgstr \"DNS-Aufl\u00f6sung f\u00fcr addnode und connect erlauben\\n\"\n-\n-#: ../../../src/init.cpp:162\n-msgid \"Add a node to connect to\\n\"\n-msgstr \"Einen Teilnehmer hinzuf\u00fcgen, zu dem verbunden werden soll\\n\"\n-\n-#: ../../../src/init.cpp:163\n-msgid \"Connect only to the specified node\\n\"\n-msgstr \"Nur zu dem angegebenen Teilnehmer verbinden\\n\"\n-\n-#: ../../../src/init.cpp:164\n-msgid \"Don't accept connections from outside\\n\"\n-msgstr \"Akzeptiere keine externen Verbindungen\\n\"\n-\n-#: ../../../src/init.cpp:167\n-msgid \"Don't attempt to use UPnP to map the listening port\\n\"\n-msgstr \"Versuche nicht, UPnP zur Portweiterleitung zu nutzen\\n\"\n-\n-#: ../../../src/init.cpp:169\n-msgid \"Attempt to use UPnP to map the listening port\\n\"\n-msgstr \"Versuche, UPnP zur Portweiterleitung zu nutzen\\n\"\n-\n-#: ../../../src/init.cpp:172\n-msgid \"Fee per KB to add to transactions you send\\n\"\n-msgstr \"Geb\u00fchr pro KB f\u00fcr \u00dcberweisungen, die Sie t\u00e4tigen\\n\"\n-\n-#: ../../../src/init.cpp:174\n-msgid \"Accept command line and JSON-RPC commands\\n\"\n-msgstr \"Akzeptiere Kommandozeile und JSON-RPC-Befehle\\n\"\n-\n-#: ../../../src/init.cpp:177\n-msgid \"Run in the background as a daemon and accept commands\\n\"\n-msgstr \"Laufe im Hintergrund als Daemon und akzeptiere Befehle\\n\"\n-\n-#: ../../../src/init.cpp:179\n-msgid \"Use the test network\\n\"\n-msgstr \"Nutze das Testnetzwerk\\n\"\n-\n-#: ../../../src/init.cpp:180\n-msgid \"Username for JSON-RPC connections\\n\"\n-msgstr \"Benutzername f\u00fcr JSON-RPC-Verbindungen\\n\"\n-\n-#: ../../../src/init.cpp:181\n-msgid \"Password for JSON-RPC connections\\n\"\n-msgstr \"Passwort f\u00fcr JSON-RPC-Verbindungen\\n\"\n-\n-#: ../../../src/init.cpp:182\n-msgid \"Listen for JSON-RPC connections on <port> (default: 8332)\\n\"\n-msgstr \"Horche f\u00fcr JSON-RPC-Verbindungen auf <port> (Standard: 8332)\\n\"\n-\n-#: ../../../src/init.cpp:183\n-msgid \"Allow JSON-RPC connections from specified IP address\\n\"\n-msgstr \"Erlaube JSON-RPC-Verbindungen von bestimmter IP-Adresse\\n\"\n-\n-#: ../../../src/init.cpp:184\n-msgid \"Send commands to node running on <ip> (default: 127.0.0.1)\\n\"\n-msgstr \"Sende Befehle zum Knoten mit <ip> (Standard: 127.0.0.1)\\n\"\n-\n-#: ../../../src/init.cpp:185\n-msgid \"Set key pool size to <n> (default: 100)\\n\"\n-msgstr \"Setze Key-Pool-Gr\u00f6\u00dfe auf <n> (Standard: 100)\\n\"\n-\n-#: ../../../src/init.cpp:186\n-msgid \"Rescan the block chain for missing wallet transactions\\n\"\n-msgstr \"Frage die Block-Kette nach fehlenden Brieftaschen-\u00dcberweisungen ab\\n\"\n-\n-#: ../../../src/init.cpp:190\n-msgid \"\"\n-\"\\n\"\n-\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\\n\"\n-msgstr \"\"\n-\"\\n\"\n-\"SSL-Optionen: (siehe das Bitcoin-Wiki f\u00fcr SSL-Installationsanleitungen)\\n\"\n-\n-#: ../../../src/init.cpp:191\n-msgid \"Use OpenSSL (https) for JSON-RPC connections\\n\"\n-msgstr \"Nutze OpenSSL (https) f\u00fcr JSON-RPC-Verbindungen\\n\"\n-\n-#: ../../../src/init.cpp:192\n-msgid \"Server certificate file (default: server.cert)\\n\"\n-msgstr \"Server-Zertifikatsdatei (Standard: server.cert)\\n\"\n-\n-#: ../../../src/init.cpp:193\n-msgid \"Server private key (default: server.pem)\\n\"\n-msgstr \"Server-Geheimschl\u00fcssel (Standard: server.pem)\\n\"\n+#: ../../../src/util.cpp:869\n+msgid \"Warning: Please check that your computer's date and time are correct.  If your clock is wrong Bitcoin will not work properly.\"\n+msgstr \"Warnung: Bitte \u00fcberpr\u00fcfen Sie die Richtigkeit des Datums und der Uhrzeit Ihres Computers. Falls Ihre Uhr falsch l\u00e4uft, wird Bitcoin nicht richtig funktionieren.\"\n \n-#: ../../../src/init.cpp:194\n-msgid \"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\\n\"\n-msgstr \"Anzunehmende Verschl\u00fcsselungen (Standard: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\\n\"\n+#: ../../../src/util.cpp:903\n+msgid \"beta\"\n+msgstr \"Beta\"\n \n-#: ../../../src/init.cpp:198\n-msgid \"This help message\\n\"\n-msgstr \"Diese Anleitung\\n\"\n+#: ../../../src/wallet.cpp:1081\n+msgid \"Error: Wallet locked, unable to create transaction  \"\n+msgstr \"Fehler: Brieftasche ist verschlossen; \u00dcberweisung konnte nicht erstellt werden  \"\n \n-#: ../../../src/init.cpp:335\n+#: ../../../src/wallet.cpp:1089\n #, c-format\n-msgid \"Cannot obtain a lock on data directory %s.  Bitcoin is probably already running.\"\n-msgstr \"Erhalte keinen Lock f\u00fcr Datenverzeichnis %s. Bitcoin l\u00e4uft wahrscheinlich bereits.\"\n-\n-#: ../../../src/init.cpp:361\n-msgid \"Error loading addr.dat      \\n\"\n-msgstr \"Fehler beim Laden von addr.dat      \\n\"\n-\n-#: ../../../src/init.cpp:367\n-msgid \"Error loading blkindex.dat      \\n\"\n-msgstr \"Fehler beim Laden von blkindex.dat      \\n\"\n+msgid \"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"\n+msgstr \"Fehler: Diese \u00dcberweisung ben\u00f6tigt eine \u00dcberweisungsgeb\u00fchr von mindestens %s wegen ihrer Gr\u00f6\u00dfe, Komplexit\u00e4t oder der Benutzung erst k\u00fcrzlich erhaltener Geldmittel  \"\n \n-#: ../../../src/init.cpp:374\n-msgid \"Error loading wallet.dat      \\n\"\n-msgstr \"Fehler beim Laden von wallet.dat      \\n\"\n+#: ../../../src/wallet.cpp:1091\n+msgid \"Error: Transaction creation failed  \"\n+msgstr \"Fehler: \u00dcberweisung konnte nicht erzeugt werden.  \"\n \n-#: ../../../src/init.cpp:454\n-msgid \"Invalid -proxy address\"\n-msgstr \"Ung\u00fcltige -Proxy Adresse\"\n+#: ../../../src/wallet.cpp:1101\n+msgid \"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\"\n+msgstr \"Fehler: Die \u00dcberweisung wurde abgelehnt. Das kann passieren, wenn einige der M\u00fcnzen in Ihrer Brieftasche bereits ausgegeben wurden, z.B. weil Sie eine Kopie der Brieftasche (wallet.dat) gemacht haben. Bitcoins, die mithilfe der Kopie ausgegeben wurden, sind in dieser Brieftasche noch nicht als ausgegeben markiert worden.\"\n \n-#: ../../../src/init.cpp:477\n-msgid \"Invalid amount for -paytxfee=<amount>\"\n-msgstr \"Ung\u00fcltiger Betrag f\u00fcr -paytxfee=<amount>\"\n+#: ../../../src/wallet.cpp:1114\n+msgid \"Invalid amount\"\n+msgstr \"Ung\u00fcltiger Betrag\"\n \n-#: ../../../src/init.cpp:481\n-msgid \"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"\n-msgstr \"Warnung: -paytxfee ist sehr hoch gesetzt. Das ist die \u00dcberweisungsgeb\u00fchr, die Sie f\u00fcrs Senden einer \u00dcberweisung zahlen.\"\n+#: ../../../src/wallet.cpp:1121\n+msgid \"Invalid bitcoin address\"\n+msgstr \"Ung\u00fcltige Bitcoin-Adresse\"\n \n-#: ../../../src/uibase.h:147\n+#: ../../../src/uibase.h:151\n msgid \"Transaction Details\"\n msgstr \"\u00dcberweisungsdetails\"\n \n-#: ../../../src/uibase.h:199\n+#: ../../../src/uibase.h:203\n msgid \"Options\"\n msgstr \"Optionen\"\n \n-#: ../../../src/uibase.h:228\n+#: ../../../src/uibase.h:232\n msgid \"About Bitcoin\"\n msgstr \"\u00dcber Bitcoin\"\n \n-#: ../../../src/uibase.h:337\n+#: ../../../src/uibase.h:341\n msgid \"Your Bitcoin Addresses\"\n msgstr \"Ihre Bitcoin-Adressen\"\n+"
      },
      {
        "sha": "986a1e5d98d4889c8476da217a39bb80dcb2c63f",
        "filename": "locale/nl/LC_MESSAGES/bitcoin.po",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/nl/LC_MESSAGES/bitcoin.po",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/nl/LC_MESSAGES/bitcoin.po",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/locale/nl/LC_MESSAGES/bitcoin.po?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -448,7 +448,7 @@ msgstr \"&Open Bitcoin\"\n \n #: ../../../src/ui.cpp:2682\n msgid \"&Send Bitcoins\"\n-msgstr \"&Open Bitcoin\"\n+msgstr \"&Verstuur Bitcoins\"\n \n #: ../../../src/ui.cpp:2683\n msgid \"O&ptions...\""
      },
      {
        "sha": "7c177b82de27735c0430e5e7ca13a01e64ebccda",
        "filename": "locale/pl/LC_MESSAGES/bitcoin.po",
        "status": "modified",
        "additions": 317,
        "deletions": 211,
        "changes": 528,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/pl/LC_MESSAGES/bitcoin.po",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/pl/LC_MESSAGES/bitcoin.po",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/locale/pl/LC_MESSAGES/bitcoin.po?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -2,7 +2,7 @@ msgid \"\"\n msgstr \"\"\n \"Project-Id-Version: Bitcoin\\n\"\n \"Report-Msgid-Bugs-To: \\n\"\n-\"POT-Creation-Date: 2011-06-28 20:11+0100\\n\"\n+\"POT-Creation-Date: 2011-07-14 18:55+0100\\n\"\n \"PO-Revision-Date: \\n\"\n \"Last-Translator: Dawid Spiechowicz <spiechu@gmail.com>\\n\"\n \"Language-Team: Spiechu <spiechu@gmail.com>\\n\"\n@@ -18,7 +18,7 @@ msgstr \"\"\n \"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\\n\"\n \"X-Poedit-SearchPath-0: ../../..\\n\"\n \n-#: ../../../src/net.cpp:1590\n+#: ../../../src/net.cpp:1615\n #, c-format\n msgid \"Unable to bind to port %d on this computer.  Bitcoin is probably already running.\"\n msgstr \"Nie mo\u017cna powi\u0105za\u0107 z portem %d tego komputera. Prawdopodobnie program Bitcoin jest ju\u017c uruchomiony.\"\n@@ -188,29 +188,37 @@ msgstr \"B\u0142\u0105d \u0142adowania addr.dat      \\n\"\n msgid \"Error loading blkindex.dat      \\n\"\n msgstr \"B\u0142\u0105d \u0142adowania blkindex.dat      \\n\"\n \n-#: ../../../src/init.cpp:391\n+#: ../../../src/init.cpp:394\n+msgid \"Error loading wallet.dat: Wallet corrupted      \\n\"\n+msgstr \"B\u0142\u0105d \u0142adowania wallet.dat: Portfel uszkodzony      \\n\"\n+\n+#: ../../../src/init.cpp:396\n+msgid \"Error loading wallet.dat: Wallet requires newer version of Bitcoin      \\n\"\n+msgstr \"B\u0142\u0105d \u0142adowania wallet.dat: Portfel wymaga nowszej wersji Bitcoin      \\n\"\n+\n+#: ../../../src/init.cpp:398\n msgid \"Error loading wallet.dat      \\n\"\n msgstr \"B\u0142\u0105d \u0142adowania wallet.dat      \\n\"\n \n-#: ../../../src/init.cpp:481\n+#: ../../../src/init.cpp:488\n msgid \"Invalid -proxy address\"\n msgstr \"Niew\u0142a\u015bciwy adres -proxy\"\n \n-#: ../../../src/init.cpp:504\n+#: ../../../src/init.cpp:513\n msgid \"Invalid amount for -paytxfee=<amount>\"\n msgstr \"Nieprawid\u0142owa kwota w -paytxfee=<amount>\"\n \n-#: ../../../src/init.cpp:508\n+#: ../../../src/init.cpp:517\n msgid \"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"\n msgstr \"Ostrze\u017cenie: ustawienie -paytxfee jest bardzo wysokie. To jest prowizja transakcji, kt\u00f3r\u0105 zap\u0142acisz je\u017celi wy\u015blesz transakcj\u0119.\"\n \n-#: ../../../src/rpc.cpp:1822\n-#: ../../../src/rpc.cpp:1824\n+#: ../../../src/rpc.cpp:2100\n+#: ../../../src/rpc.cpp:2102\n #, c-format\n msgid \"To use the %s option\"\n msgstr \"U\u017cycie opcji %s\"\n \n-#: ../../../src/rpc.cpp:1826\n+#: ../../../src/rpc.cpp:2104\n #, c-format\n msgid \"\"\n \"Warning: %s, you must set rpcpassword=<password>\\n\"\n@@ -221,7 +229,7 @@ msgstr \"\"\n \"w pliku konfiguracyjnym: %s\\n\"\n \"Je\u017celi plik nie istnieje, utw\u00f3rz go z uprawnieniami tylko do odczytu dla w\u0142a\u015bciciela.\\n\"\n \n-#: ../../../src/rpc.cpp:1994\n+#: ../../../src/rpc.cpp:2277\n #, c-format\n msgid \"\"\n \"You must set rpcpassword=<password> in the configuration file:\\n\"\n@@ -232,11 +240,11 @@ msgstr \"\"\n \"%s\\n\"\n \"Je\u017celi plik nie istnieje, utw\u00f3rz go z uprawnieniami tylko do odczytu dla w\u0142a\u015bciciela.\"\n \n-#: ../../../src/util.cpp:874\n+#: ../../../src/util.cpp:869\n msgid \"Warning: Please check that your computer's date and time are correct.  If your clock is wrong Bitcoin will not work properly.\"\n msgstr \"Ostrze\u017cenie: Sprawd\u017a czy ustawienia daty i czasu komputera s\u0105 prawid\u0142owe. Je\u017celi zegar jest \u017ale ustawiony, Bitcoin nie b\u0119dzie poprawnie dzia\u0142a\u0142.\"\n \n-#: ../../../src/util.cpp:908\n+#: ../../../src/util.cpp:903\n msgid \"beta\"\n msgstr \"beta\"\n \n@@ -245,104 +253,190 @@ msgstr \"beta\"\n msgid \"This transaction is over the size limit.  You can still send it for a fee of %s, which goes to the nodes that process your transaction and helps to support the network.  Do you want to pay the fee?\"\n msgstr \"Ta transakcja jest poza limitem wielko\u015bci. W dalszym ci\u0105gu mo\u017cesz wys\u0142a\u0107 j\u0105 z prowizj\u0105 %s, kt\u00f3ra dotrze do w\u0119z\u0142\u00f3w przetwarzaj\u0105cych twoj\u0105 transakcj\u0119 i pomo\u017ce utrzyma\u0107 sie\u0107. Chcesz zap\u0142aci\u0107 prowizj\u0119?\"\n \n-#: ../../../src/ui.cpp:316\n+#: ../../../src/ui.cpp:259\n+#: ../../../src/ui.cpp:1246\n+msgid \"Enter the current passphrase to the wallet.\"\n+msgstr \"Wpisz obecne has\u0142o do portfela.\"\n+\n+#: ../../../src/ui.cpp:260\n+#: ../../../src/ui.cpp:1182\n+#: ../../../src/ui.cpp:1199\n+#: ../../../src/ui.cpp:1247\n+#: ../../../src/ui.cpp:1273\n+#: ../../../src/ui.cpp:1293\n+msgid \"Passphrase\"\n+msgstr \"Has\u0142o\"\n+\n+#: ../../../src/ui.cpp:266\n+msgid \"Please supply the current wallet decryption passphrase.\"\n+msgstr \"Prosz\u0119 dostarczy\u0107 has\u0142o do odszyfrowania portfela.\"\n+\n+#: ../../../src/ui.cpp:274\n+#: ../../../src/ui.cpp:1258\n+#: ../../../src/ui.cpp:1315\n+msgid \"The passphrase entered for the wallet decryption was incorrect.\"\n+msgstr \"Wpisane has\u0142o do odszyfrowania portfela jest nieprawid\u0142owe.\"\n+\n+#: ../../../src/ui.cpp:351\n msgid \"Status\"\n msgstr \"Status\"\n \n-#: ../../../src/ui.cpp:317\n+#: ../../../src/ui.cpp:352\n msgid \"Date\"\n msgstr \"Data\"\n \n-#: ../../../src/ui.cpp:318\n+#: ../../../src/ui.cpp:353\n msgid \"Description\"\n msgstr \"Opis\"\n \n-#: ../../../src/ui.cpp:319\n+#: ../../../src/ui.cpp:354\n msgid \"Debit\"\n msgstr \"Obci\u0105\u017cenie\"\n \n-#: ../../../src/ui.cpp:320\n+#: ../../../src/ui.cpp:355\n msgid \"Credit\"\n msgstr \"Suma\"\n \n-#: ../../../src/ui.cpp:526\n+#: ../../../src/ui.cpp:566\n #, c-format\n msgid \"Open for %d blocks\"\n msgstr \"Otw\u00f3rz na %d blok\u00f3w\"\n \n-#: ../../../src/ui.cpp:528\n+#: ../../../src/ui.cpp:568\n #, c-format\n msgid \"Open until %s\"\n msgstr \"Otwarte dop\u00f3ki %s\"\n \n-#: ../../../src/ui.cpp:534\n+#: ../../../src/ui.cpp:574\n #, c-format\n msgid \"%d/offline?\"\n msgstr \"%d/offline?\"\n \n-#: ../../../src/ui.cpp:536\n+#: ../../../src/ui.cpp:576\n #, c-format\n msgid \"%d/unconfirmed\"\n msgstr \"%d/niepotwierdzono\"\n \n-#: ../../../src/ui.cpp:538\n+#: ../../../src/ui.cpp:578\n #, c-format\n msgid \"%d confirmations\"\n msgstr \"%d potwierdze\u0144\"\n \n-#: ../../../src/ui.cpp:623\n+#: ../../../src/ui.cpp:663\n msgid \"Generated\"\n msgstr \"Wygenerowano\"\n \n-#: ../../../src/ui.cpp:631\n+#: ../../../src/ui.cpp:671\n #, c-format\n msgid \"Generated (%s matures in %d more blocks)\"\n msgstr \"Wygenerowano (%s dojrza\u0142ych w %d wi\u0119cej blok\u00f3w)\"\n \n-#: ../../../src/ui.cpp:635\n+#: ../../../src/ui.cpp:675\n msgid \"Generated - Warning: This block was not received by any other nodes and will probably not be accepted!\"\n msgstr \"Wygenerowano - Ostrze\u017cenie: Ten blok nie zosta\u0142 otrzymany przez \u017caden inny w\u0119ze\u0142 i prawdopodobnie nie zostanie zaakceptowany!\"\n \n-#: ../../../src/ui.cpp:639\n+#: ../../../src/ui.cpp:679\n msgid \"Generated (not accepted)\"\n msgstr \"Wygenerowano (nie zaakceptowano)\"\n \n-#: ../../../src/ui.cpp:649\n+#: ../../../src/ui.cpp:689\n msgid \"From: \"\n msgstr \"Od:\"\n \n-#: ../../../src/ui.cpp:673\n+#: ../../../src/ui.cpp:713\n msgid \"Received with: \"\n msgstr \"Otrzymano z:\"\n \n-#: ../../../src/ui.cpp:719\n+#: ../../../src/ui.cpp:759\n msgid \"Payment to yourself\"\n msgstr \"P\u0142atno\u015b\u0107 dla siebie samego\"\n \n-#: ../../../src/ui.cpp:753\n+#: ../../../src/ui.cpp:793\n msgid \"To: \"\n msgstr \"Do:\"\n \n-#: ../../../src/ui.cpp:1068\n+#: ../../../src/ui.cpp:1108\n msgid \"    Generating\"\n msgstr \"    Generowanie\"\n \n-#: ../../../src/ui.cpp:1070\n+#: ../../../src/ui.cpp:1110\n msgid \"(not connected)\"\n msgstr \"(nie po\u0142\u0105czony)\"\n \n-#: ../../../src/ui.cpp:1073\n+#: ../../../src/ui.cpp:1113\n #, c-format\n msgid \"     %d connections     %d blocks     %d transactions\"\n msgstr \"     %d po\u0142\u0105cze\u0144     %d blok\u00f3w     %d transakcji\"\n \n-#: ../../../src/ui.cpp:1178\n-#: ../../../src/ui.cpp:2571\n+#: ../../../src/ui.cpp:1170\n+msgid \"Wallet already encrypted.\"\n+msgstr \"Portfel ju\u017c zaszyfrowany.\"\n+\n+#: ../../../src/ui.cpp:1181\n+msgid \"\"\n+\"Enter the new passphrase to the wallet.\\n\"\n+\"Please use a passphrase of 10 or more random characters, or eight or more words.\"\n+msgstr \"\"\n+\"Wpisz nowe has\u0142o dla portfela.\\n\"\n+\"Prosz\u0119 u\u017cy\u0107 has\u0142a sk\u0142adaj\u0105cego si\u0119 z 10 lub wi\u0119cej losowych znak\u00f3w albo o\u015bmiu lub wi\u0119cej s\u0142\u00f3w.\"\n+\n+#: ../../../src/ui.cpp:1188\n+#: ../../../src/ui.cpp:1281\n+msgid \"Error: The supplied passphrase was too short.\"\n+msgstr \"B\u0142\u0105d: Dostarczone has\u0142o jest za kr\u00f3tkie.\"\n+\n+#: ../../../src/ui.cpp:1192\n+msgid \"\"\n+\"WARNING: If you encrypt your wallet and lose your passphrase, you will LOSE ALL OF YOUR BITCOINS!\\n\"\n+\"Are you sure you wish to encrypt your wallet?\"\n+msgstr \"\"\n+\"OSTRZE\u017bENIE: Je\u017celi zaszyfrujesz sw\u00f3j portfel i zgubisz has\u0142o, STRACISZ WSZYSTKIE SWOJE BITCOINY!\\n\"\n+\"Czy jeste\u015b pewny, \u017ce chcesz zaszyfrowa\u0107 sw\u00f3j portfel?\"\n+\n+#: ../../../src/ui.cpp:1198\n+msgid \"Please re-enter your new wallet passphrase.\"\n+msgstr \"Prosz\u0119 powt\u00f3rzy\u0107 nowe has\u0142o do portfela.\"\n+\n+#: ../../../src/ui.cpp:1207\n+#: ../../../src/ui.cpp:1303\n+msgid \"Error: the supplied passphrases didn't match.\"\n+msgstr \"B\u0142\u0105d: dostarczone has\u0142a si\u0119 nie zgadzaj\u0105.\"\n+\n+#: ../../../src/ui.cpp:1217\n+msgid \"Wallet encryption failed.\"\n+msgstr \"Szyfrowanie portfela nie powiod\u0142o si\u0119.\"\n+\n+#: ../../../src/ui.cpp:1224\n+msgid \"\"\n+\"Wallet Encrypted.\\n\"\n+\"Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.\"\n+msgstr \"\"\n+\"Portfel zaszyfrowany.\\n\"\n+\"Pami\u0119taj, \u017ce zaszyfrowanie portfela nie chroni w pe\u0142ni twoich bitcoin\u00f3w przed kradzie\u017c\u0105 przeprowadzon\u0105 przez z\u0142o\u015bliwe oprogramowanie infekuj\u0105ce tw\u00f3j komputer.\"\n+\n+#: ../../../src/ui.cpp:1235\n+msgid \"Wallet is unencrypted, please encrypt it first.\"\n+msgstr \"Portfel jest niezaszyfrowany, prosz\u0119 najpierw zaszyfrowa\u0107.\"\n+\n+#: ../../../src/ui.cpp:1272\n+msgid \"Enter the new passphrase for the wallet.\"\n+msgstr \"Wprowad\u017a nowe has\u0142o dla portfela.\"\n+\n+#: ../../../src/ui.cpp:1292\n+msgid \"Re-enter the new passphrase for the wallet.\"\n+msgstr \"Powt\u00f3rnie wprowad\u017a nowe has\u0142o dla portfela.\"\n+\n+#: ../../../src/ui.cpp:1324\n+msgid \"Wallet Passphrase Changed.\"\n+msgstr \"Has\u0142o dla portfela zosta\u0142o zmienione.\"\n+\n+#: ../../../src/ui.cpp:1381\n+#: ../../../src/ui.cpp:2816\n msgid \"New Receiving Address\"\n msgstr \"Nowy Adres Odbiorczy\"\n \n-#: ../../../src/ui.cpp:1179\n-#: ../../../src/ui.cpp:2572\n+#: ../../../src/ui.cpp:1382\n+#: ../../../src/ui.cpp:2817\n msgid \"\"\n \"You should use a new address for each payment you receive.\\n\"\n \"\\n\"\n@@ -352,248 +446,248 @@ msgstr \"\"\n \"\\n\"\n \"Etykieta\"\n \n-#: ../../../src/ui.cpp:1251\n+#: ../../../src/ui.cpp:1466\n msgid \"<b>Status:</b> \"\n msgstr \"<b>Status:</b>\"\n \n-#: ../../../src/ui.cpp:1256\n+#: ../../../src/ui.cpp:1471\n msgid \", has not been successfully broadcast yet\"\n msgstr \", nie zosta\u0142 jeszcze prawid\u0142owo rozg\u0142oszony\"\n \n-#: ../../../src/ui.cpp:1258\n+#: ../../../src/ui.cpp:1473\n #, c-format\n msgid \", broadcast through %d node\"\n msgstr \", rozg\u0142asza przez %d w\u0119ze\u0142\"\n \n-#: ../../../src/ui.cpp:1260\n+#: ../../../src/ui.cpp:1475\n #, c-format\n msgid \", broadcast through %d nodes\"\n msgstr \", rozg\u0142asza przez %d w\u0119z\u0142\u00f3w\"\n \n-#: ../../../src/ui.cpp:1264\n+#: ../../../src/ui.cpp:1479\n msgid \"<b>Date:</b> \"\n msgstr \"<b>Data:</b>\"\n \n-#: ../../../src/ui.cpp:1272\n+#: ../../../src/ui.cpp:1487\n msgid \"<b>Source:</b> Generated<br>\"\n msgstr \"<b>\u0179r\u00f3d\u0142o:</b> Wygenerowano<br>\"\n \n-#: ../../../src/ui.cpp:1278\n-#: ../../../src/ui.cpp:1296\n+#: ../../../src/ui.cpp:1493\n+#: ../../../src/ui.cpp:1511\n msgid \"<b>From:</b> \"\n msgstr \"<b>Od:</b>\"\n \n-#: ../../../src/ui.cpp:1296\n+#: ../../../src/ui.cpp:1511\n msgid \"unknown\"\n msgstr \"nieznany\"\n \n-#: ../../../src/ui.cpp:1297\n-#: ../../../src/ui.cpp:1321\n-#: ../../../src/ui.cpp:1380\n+#: ../../../src/ui.cpp:1512\n+#: ../../../src/ui.cpp:1536\n+#: ../../../src/ui.cpp:1595\n msgid \"<b>To:</b> \"\n msgstr \"<b>Do:</b>\"\n \n-#: ../../../src/ui.cpp:1300\n+#: ../../../src/ui.cpp:1515\n msgid \" (yours, label: \"\n msgstr \" (twoja, etykieta: \"\n \n-#: ../../../src/ui.cpp:1302\n+#: ../../../src/ui.cpp:1517\n msgid \" (yours)\"\n msgstr \" (twoja)\"\n \n-#: ../../../src/ui.cpp:1339\n-#: ../../../src/ui.cpp:1351\n-#: ../../../src/ui.cpp:1397\n-#: ../../../src/ui.cpp:1414\n+#: ../../../src/ui.cpp:1554\n+#: ../../../src/ui.cpp:1566\n+#: ../../../src/ui.cpp:1612\n+#: ../../../src/ui.cpp:1629\n msgid \"<b>Credit:</b> \"\n msgstr \"<b>Suma:</b>\"\n \n-#: ../../../src/ui.cpp:1341\n+#: ../../../src/ui.cpp:1556\n #, c-format\n msgid \"(%s matures in %d more blocks)\"\n msgstr \"(%s dojrza\u0142ych w %d wi\u0119cej blok\u00f3w)\"\n \n-#: ../../../src/ui.cpp:1343\n+#: ../../../src/ui.cpp:1558\n msgid \"(not accepted)\"\n msgstr \"(nie zaakceptowano)\"\n \n-#: ../../../src/ui.cpp:1388\n-#: ../../../src/ui.cpp:1396\n-#: ../../../src/ui.cpp:1411\n+#: ../../../src/ui.cpp:1603\n+#: ../../../src/ui.cpp:1611\n+#: ../../../src/ui.cpp:1626\n msgid \"<b>Debit:</b> \"\n msgstr \"<b>Obci\u0105\u017cenie:</b>\"\n \n-#: ../../../src/ui.cpp:1402\n+#: ../../../src/ui.cpp:1617\n msgid \"<b>Transaction fee:</b> \"\n msgstr \"<b>Prowizja transakcji:</b>\"\n \n-#: ../../../src/ui.cpp:1418\n+#: ../../../src/ui.cpp:1633\n msgid \"<b>Net amount:</b> \"\n msgstr \"<b>Kwota netto:</b>\"\n \n-#: ../../../src/ui.cpp:1425\n+#: ../../../src/ui.cpp:1640\n msgid \"Message:\"\n msgstr \"Wiadomo\u015b\u0107:\"\n \n-#: ../../../src/ui.cpp:1427\n+#: ../../../src/ui.cpp:1642\n msgid \"Comment:\"\n msgstr \"Komentarz:\"\n \n-#: ../../../src/ui.cpp:1430\n+#: ../../../src/ui.cpp:1645\n msgid \"Generated coins must wait 120 blocks before they can be spent.  When you generated this block, it was broadcast to the network to be added to the block chain.  If it fails to get into the chain, it will change to \\\"not accepted\\\" and not be spendable.  This may occasionally happen if another node generates a block within a few seconds of yours.\"\n msgstr \"Wygenerowane monety musz\u0105 poczeka\u0107 120 blok\u00f3w zanim mog\u0105 zosta\u0107 wydane. Gdy wygenerowa\u0142e\u015b ten blok, zosta\u0142 rozg\u0142oszony do sieci z przeznaczeniem do dodania do \u0142a\u0144cucha blok\u00f3w. Je\u017celi nie uda si\u0119 doda\u0107 bloku do \u0142a\u0144cucha, zostanie oznaczony jako \\\"nie zaakceptowany\\\" i nie b\u0119dzie m\u00f3g\u0142 zosta\u0107 wydany. Sporadycznie dzieje si\u0119 tak je\u017celi inny w\u0119ze\u0142 wygeneruje blok nie dalej ni\u017c kilka sekund od ciebie.\"\n \n-#: ../../../src/ui.cpp:1610\n+#: ../../../src/ui.cpp:1825\n msgid \"Cannot write autostart/bitcoin.desktop file\"\n msgstr \"Nie mog\u0119 zapisa\u0107 pliku autostart/bitcoin.desktop\"\n \n-#: ../../../src/ui.cpp:1646\n+#: ../../../src/ui.cpp:1861\n msgid \"Main\"\n msgstr \"G\u0142\u00f3wne\"\n \n-#: ../../../src/ui.cpp:1656\n+#: ../../../src/ui.cpp:1871\n msgid \"&Start Bitcoin on window system startup\"\n msgstr \"&Uruchom Bitcoin przy starcie systemu\"\n \n-#: ../../../src/ui.cpp:1663\n+#: ../../../src/ui.cpp:1878\n msgid \"&Minimize on close\"\n msgstr \"&Minimalizuj przy zamkni\u0119ciu\"\n \n-#: ../../../src/ui.cpp:1805\n+#: ../../../src/ui.cpp:2020\n #, c-format\n msgid \"version %s\"\n msgstr \"wersja %s\"\n \n-#: ../../../src/ui.cpp:1928\n+#: ../../../src/ui.cpp:2143\n msgid \"Error in amount  \"\n msgstr \"Nieprawid\u0142owa kwota\"\n \n-#: ../../../src/ui.cpp:1928\n-#: ../../../src/ui.cpp:1933\n-#: ../../../src/ui.cpp:1938\n-#: ../../../src/ui.cpp:1973\n-#: ../../../src/uibase.cpp:55\n+#: ../../../src/ui.cpp:2143\n+#: ../../../src/ui.cpp:2148\n+#: ../../../src/ui.cpp:2153\n+#: ../../../src/ui.cpp:2202\n+#: ../../../src/uibase.cpp:61\n msgid \"Send Coins\"\n msgstr \"Wy\u015blij Monety\"\n \n-#: ../../../src/ui.cpp:1933\n+#: ../../../src/ui.cpp:2148\n msgid \"Amount exceeds your balance  \"\n msgstr \"Kwota przekracza tw\u00f3j stan konta\"\n \n-#: ../../../src/ui.cpp:1938\n+#: ../../../src/ui.cpp:2153\n msgid \"Total exceeds your balance when the \"\n msgstr \"Przekroczenie twojego stanu konta gdy\"\n \n-#: ../../../src/ui.cpp:1938\n+#: ../../../src/ui.cpp:2153\n msgid \" transaction fee is included  \"\n msgstr \" prowizja jest wliczona\"\n \n-#: ../../../src/ui.cpp:1956\n+#: ../../../src/ui.cpp:2176\n msgid \"Payment sent  \"\n msgstr \"Wys\u0142ano p\u0142atno\u015b\u0107\"\n \n-#: ../../../src/ui.cpp:1956\n-#: ../../../src/ui.cpp:1961\n-#: ../../../src/ui.cpp:2107\n-#: ../../../src/ui.cpp:2260\n-#: ../../../src/wallet.cpp:924\n+#: ../../../src/ui.cpp:2176\n+#: ../../../src/ui.cpp:2185\n+#: ../../../src/ui.cpp:2336\n+#: ../../../src/ui.cpp:2500\n+#: ../../../src/wallet.cpp:1097\n msgid \"Sending...\"\n msgstr \"Wysy\u0142anie...\"\n \n-#: ../../../src/ui.cpp:1973\n+#: ../../../src/ui.cpp:2202\n msgid \"Invalid address  \"\n msgstr \"Nieprawid\u0142owy adres\"\n \n-#: ../../../src/ui.cpp:2028\n+#: ../../../src/ui.cpp:2257\n #, c-format\n msgid \"Sending %s to %s\"\n msgstr \"Wysy\u0142anie %s do %s\"\n \n-#: ../../../src/ui.cpp:2101\n-#: ../../../src/ui.cpp:2134\n+#: ../../../src/ui.cpp:2330\n+#: ../../../src/ui.cpp:2363\n msgid \"CANCELLED\"\n msgstr \"ANULOWANO\"\n \n-#: ../../../src/ui.cpp:2105\n+#: ../../../src/ui.cpp:2334\n msgid \"Cancelled\"\n msgstr \"Anulowano\"\n \n-#: ../../../src/ui.cpp:2107\n+#: ../../../src/ui.cpp:2336\n msgid \"Transfer cancelled  \"\n msgstr \"Transfer anulowano\"\n \n-#: ../../../src/ui.cpp:2160\n+#: ../../../src/ui.cpp:2389\n msgid \"Error: \"\n msgstr \"B\u0142\u0105d:\"\n \n-#: ../../../src/ui.cpp:2174\n-#: ../../../src/ui.cpp:2245\n-#: ../../../src/wallet.cpp:943\n+#: ../../../src/ui.cpp:2403\n+#: ../../../src/ui.cpp:2474\n+#: ../../../src/wallet.cpp:1116\n msgid \"Insufficient funds\"\n msgstr \"Niewystarczaj\u0105ce fundusze\"\n \n-#: ../../../src/ui.cpp:2179\n+#: ../../../src/ui.cpp:2408\n msgid \"Connecting...\"\n msgstr \"\u0141\u0105czenie...\"\n \n-#: ../../../src/ui.cpp:2184\n+#: ../../../src/ui.cpp:2413\n msgid \"Unable to connect\"\n msgstr \"Nie mo\u017cna po\u0142\u0105czy\u0107\"\n \n-#: ../../../src/ui.cpp:2189\n+#: ../../../src/ui.cpp:2418\n msgid \"Requesting public key...\"\n msgstr \"\u017b\u0105danie klucza publicznego...\"\n \n-#: ../../../src/ui.cpp:2201\n+#: ../../../src/ui.cpp:2430\n msgid \"Received public key...\"\n msgstr \"Otrzymano klucz publiczny...\"\n \n-#: ../../../src/ui.cpp:2215\n+#: ../../../src/ui.cpp:2444\n msgid \"Recipient is not accepting transactions sent by IP address\"\n msgstr \"Adresat nie akceptuje transakcji wysy\u0142anych przez adres IP\"\n \n-#: ../../../src/ui.cpp:2217\n+#: ../../../src/ui.cpp:2446\n msgid \"Transfer was not accepted\"\n msgstr \"Transfer nie zosta\u0142 zaakceptowany\"\n \n-#: ../../../src/ui.cpp:2226\n+#: ../../../src/ui.cpp:2455\n msgid \"Invalid response received\"\n msgstr \"Otrzymano niepoprawn\u0105 odpowied\u017a\"\n \n-#: ../../../src/ui.cpp:2241\n+#: ../../../src/ui.cpp:2470\n msgid \"Creating transaction...\"\n msgstr \"Tworzenie transakcji...\"\n \n-#: ../../../src/ui.cpp:2253\n+#: ../../../src/ui.cpp:2489\n #, c-format\n msgid \"This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds\"\n msgstr \"Ta transakcja wymaga prowizji co najmniej %s z uwagi na kwot\u0119, z\u0142o\u017cono\u015b\u0107 lub u\u017cycie niedawno otrzymanych funduszy\"\n \n-#: ../../../src/ui.cpp:2255\n+#: ../../../src/ui.cpp:2491\n msgid \"Transaction creation failed\"\n msgstr \"B\u0142\u0105d tworzenia transakcji \"\n \n-#: ../../../src/ui.cpp:2262\n+#: ../../../src/ui.cpp:2502\n msgid \"Transaction aborted\"\n msgstr \"Transakcj\u0119 przerwano\"\n \n-#: ../../../src/ui.cpp:2270\n+#: ../../../src/ui.cpp:2510\n msgid \"Lost connection, transaction cancelled\"\n msgstr \"Utracono po\u0142\u0105czenie, transakcja anulowana\"\n \n-#: ../../../src/ui.cpp:2286\n+#: ../../../src/ui.cpp:2526\n msgid \"Sending payment...\"\n msgstr \"Wysy\u0142anie p\u0142atno\u015bci...\"\n \n-#: ../../../src/ui.cpp:2292\n+#: ../../../src/ui.cpp:2532\n msgid \"The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\"\n msgstr \"Transakcja zosta\u0142a odrzucona. Mo\u017ce si\u0119 tak zdarzy\u0107 je\u017celi cz\u0119\u015b\u0107 monet w twoim portfelu zosta\u0142o wydanych, np. gdy u\u017cyto kopii pliku wallet.dat i monety zosta\u0142y wydane w kopii, a tutaj nie zosta\u0142y oznaczone jako wydane.\"\n \n-#: ../../../src/ui.cpp:2301\n+#: ../../../src/ui.cpp:2541\n msgid \"Waiting for confirmation...\"\n msgstr \"Oczekiwanie na potwierdzenie...\"\n \n-#: ../../../src/ui.cpp:2319\n+#: ../../../src/ui.cpp:2559\n msgid \"\"\n \"The payment was sent, but the recipient was unable to verify it.\\n\"\n \"The transaction is recorded and will credit to the recipient,\\n\"\n@@ -603,84 +697,84 @@ msgstr \"\"\n \"Transakcja zosta\u0142a zarejestrowana i zostanie przypisana do odbiorcy,\\n\"\n \"ale informacja w komentarzu b\u0119dzie pusta.\"\n \n-#: ../../../src/ui.cpp:2328\n+#: ../../../src/ui.cpp:2568\n msgid \"Payment was sent, but an invalid response was received\"\n msgstr \"P\u0142atno\u015b\u0107 zosta\u0142a wys\u0142ana, ale otrzymano nieprawid\u0142ow\u0105 odpowied\u017a\"\n \n-#: ../../../src/ui.cpp:2334\n+#: ../../../src/ui.cpp:2574\n msgid \"Payment completed\"\n msgstr \"P\u0142atno\u015b\u0107 zako\u0144czona\"\n \n-#: ../../../src/ui.cpp:2376\n-#: ../../../src/ui.cpp:2522\n-#: ../../../src/ui.cpp:2559\n+#: ../../../src/ui.cpp:2616\n+#: ../../../src/ui.cpp:2764\n+#: ../../../src/ui.cpp:2804\n msgid \"Name\"\n msgstr \"Nazwa\"\n \n-#: ../../../src/ui.cpp:2377\n-#: ../../../src/ui.cpp:2522\n-#: ../../../src/ui.cpp:2559\n+#: ../../../src/ui.cpp:2617\n+#: ../../../src/ui.cpp:2764\n+#: ../../../src/ui.cpp:2804\n msgid \"Address\"\n msgstr \"Adres\"\n \n-#: ../../../src/ui.cpp:2379\n-#: ../../../src/ui.cpp:2534\n+#: ../../../src/ui.cpp:2619\n+#: ../../../src/ui.cpp:2776\n msgid \"Label\"\n msgstr \"Etykieta\"\n \n-#: ../../../src/ui.cpp:2380\n-#: ../../../src/uibase.cpp:837\n+#: ../../../src/ui.cpp:2620\n+#: ../../../src/uibase.cpp:847\n msgid \"Bitcoin Address\"\n msgstr \"Adres Bitcoin\"\n \n-#: ../../../src/ui.cpp:2504\n+#: ../../../src/ui.cpp:2746\n msgid \"This is one of your own addresses for receiving payments and cannot be entered in the address book.  \"\n msgstr \"To jest jeden z twoich adres\u00f3w na otrzymywane p\u0142atno\u015bci i nie mo\u017ce zosta\u0107 wpisany do ksi\u0119gi adresowej.\"\n \n-#: ../../../src/ui.cpp:2522\n-#: ../../../src/ui.cpp:2528\n+#: ../../../src/ui.cpp:2764\n+#: ../../../src/ui.cpp:2770\n msgid \"Edit Address\"\n msgstr \"Edytuj Adres\"\n \n-#: ../../../src/ui.cpp:2534\n+#: ../../../src/ui.cpp:2776\n msgid \"Edit Address Label\"\n msgstr \"Edytuj Etykiet\u0119 Adresu\"\n \n-#: ../../../src/ui.cpp:2559\n-#: ../../../src/ui.cpp:2565\n+#: ../../../src/ui.cpp:2804\n+#: ../../../src/ui.cpp:2810\n msgid \"Add Address\"\n msgstr \"Dodaj Adres\"\n \n-#: ../../../src/ui.cpp:2642\n+#: ../../../src/ui.cpp:2898\n msgid \"Bitcoin\"\n msgstr \"Bitcoin\"\n \n-#: ../../../src/ui.cpp:2644\n+#: ../../../src/ui.cpp:2900\n msgid \"Bitcoin - Generating\"\n msgstr \"Bitcoin - Generowanie\"\n \n-#: ../../../src/ui.cpp:2646\n+#: ../../../src/ui.cpp:2902\n msgid \"Bitcoin - (not connected)\"\n msgstr \"Bitcoin - (nie po\u0142\u0105czony)\"\n \n-#: ../../../src/ui.cpp:2725\n+#: ../../../src/ui.cpp:2981\n msgid \"&Open Bitcoin\"\n msgstr \"&Otw\u00f3rz Bitcoin\"\n \n-#: ../../../src/ui.cpp:2726\n+#: ../../../src/ui.cpp:2982\n msgid \"&Send Bitcoins\"\n msgstr \"&Wy\u015blij Bitcoiny\"\n \n-#: ../../../src/ui.cpp:2727\n+#: ../../../src/ui.cpp:2983\n msgid \"O&ptions...\"\n msgstr \"O&pcje...\"\n \n-#: ../../../src/ui.cpp:2730\n+#: ../../../src/ui.cpp:2986\n #: ../../../src/uibase.cpp:25\n msgid \"E&xit\"\n msgstr \"W&yj\u015bcie\"\n \n-#: ../../../src/ui.cpp:2956\n+#: ../../../src/ui.cpp:3212\n msgid \"Program has crashed and will terminate.  \"\n msgstr \"Program uleg\u0142 awarii i zostanie przerwany.\"\n \n@@ -696,152 +790,160 @@ msgstr \"&Plik\"\n msgid \"&Your Receiving Addresses...\"\n msgstr \"&Tw\u00f3j Adres Odbiorczy...\"\n \n-#: ../../../src/uibase.cpp:36\n+#: ../../../src/uibase.cpp:35\n+msgid \"&Encrypt Wallet...\"\n+msgstr \"&Zaszyfruj portfel...\"\n+\n+#: ../../../src/uibase.cpp:38\n+msgid \"&Change Wallet Encryption Passphrase...\"\n+msgstr \"&Zmie\u0144 has\u0142o szyfrowania portfela...\"\n+\n+#: ../../../src/uibase.cpp:42\n msgid \"&Options...\"\n msgstr \"&Opcje...\"\n \n-#: ../../../src/uibase.cpp:39\n+#: ../../../src/uibase.cpp:45\n msgid \"&Settings\"\n msgstr \"&Ustawienia\"\n \n-#: ../../../src/uibase.cpp:43\n+#: ../../../src/uibase.cpp:49\n msgid \"&About...\"\n msgstr \"&O programie...\"\n \n-#: ../../../src/uibase.cpp:46\n+#: ../../../src/uibase.cpp:52\n msgid \"&Help\"\n msgstr \"&Pomoc\"\n \n-#: ../../../src/uibase.cpp:56\n+#: ../../../src/uibase.cpp:62\n msgid \"Address Book\"\n msgstr \"Ksi\u0119ga Adresowa\"\n \n-#: ../../../src/uibase.cpp:69\n+#: ../../../src/uibase.cpp:75\n msgid \"Your Bitcoin Address:\"\n msgstr \"Tw\u00f3j Adres Bitcoin:\"\n \n-#: ../../../src/uibase.cpp:76\n+#: ../../../src/uibase.cpp:82\n msgid \" &New... \"\n msgstr \" &Nowy...\"\n \n-#: ../../../src/uibase.cpp:79\n-#: ../../../src/uibase.cpp:780\n-#: ../../../src/uibase.cpp:883\n+#: ../../../src/uibase.cpp:85\n+#: ../../../src/uibase.cpp:790\n+#: ../../../src/uibase.cpp:893\n msgid \" &Copy to Clipboard \"\n msgstr \" &Kopiuj do schowka \"\n \n-#: ../../../src/uibase.cpp:93\n+#: ../../../src/uibase.cpp:99\n msgid \"Balance:\"\n msgstr \"Saldo:\"\n \n-#: ../../../src/uibase.cpp:109\n+#: ../../../src/uibase.cpp:115\n msgid \" All\"\n msgstr \" Wszystko\"\n \n-#: ../../../src/uibase.cpp:109\n+#: ../../../src/uibase.cpp:115\n msgid \" Sent\"\n msgstr \"Wys\u0142ano\"\n \n-#: ../../../src/uibase.cpp:109\n+#: ../../../src/uibase.cpp:115\n msgid \" Received\"\n msgstr \"Otrzymano\"\n \n-#: ../../../src/uibase.cpp:109\n+#: ../../../src/uibase.cpp:115\n msgid \" In Progress\"\n msgstr \"W Trakcie\"\n \n-#: ../../../src/uibase.cpp:130\n+#: ../../../src/uibase.cpp:136\n msgid \"All Transactions\"\n msgstr \"Wszystkie Transakcje\"\n \n-#: ../../../src/uibase.cpp:141\n+#: ../../../src/uibase.cpp:147\n msgid \"Sent/Received\"\n msgstr \"Wys\u0142ano/Otrzymano\"\n \n-#: ../../../src/uibase.cpp:152\n+#: ../../../src/uibase.cpp:158\n msgid \"Sent\"\n msgstr \"Wys\u0142ano\"\n \n-#: ../../../src/uibase.cpp:163\n+#: ../../../src/uibase.cpp:169\n msgid \"Received\"\n msgstr \"Otrzymano\"\n \n-#: ../../../src/uibase.cpp:302\n-#: ../../../src/uibase.cpp:443\n-#: ../../../src/uibase.cpp:542\n-#: ../../../src/uibase.cpp:722\n-#: ../../../src/uibase.cpp:783\n-#: ../../../src/uibase.cpp:892\n-#: ../../../src/uibase.cpp:981\n+#: ../../../src/uibase.cpp:312\n+#: ../../../src/uibase.cpp:453\n+#: ../../../src/uibase.cpp:552\n+#: ../../../src/uibase.cpp:732\n+#: ../../../src/uibase.cpp:793\n+#: ../../../src/uibase.cpp:902\n+#: ../../../src/uibase.cpp:991\n msgid \"OK\"\n msgstr \"OK\"\n \n-#: ../../../src/uibase.cpp:345\n+#: ../../../src/uibase.cpp:355\n msgid \"&Start Bitcoin on system startup\"\n msgstr \"&Uruchom Bitcoin wraz ze startem systemu\"\n \n-#: ../../../src/uibase.cpp:348\n+#: ../../../src/uibase.cpp:358\n msgid \"&Minimize to the tray instead of the taskbar\"\n msgstr \"&Zminimalizuj do traya zamiast do paska zada\u0144\"\n \n-#: ../../../src/uibase.cpp:351\n+#: ../../../src/uibase.cpp:361\n msgid \"Map port using &UPnP\"\n msgstr \"Mapuj port u\u017cywaj\u0105c &UPnP\"\n \n-#: ../../../src/uibase.cpp:354\n+#: ../../../src/uibase.cpp:364\n msgid \"M&inimize to the tray on close\"\n msgstr \"Zm&inimalizuj do traya przy zamkni\u0119ciu\"\n \n-#: ../../../src/uibase.cpp:360\n+#: ../../../src/uibase.cpp:370\n msgid \"&Connect through socks4 proxy: \"\n msgstr \"&Po\u0142\u0105cz przez socks4 proxy:\"\n \n-#: ../../../src/uibase.cpp:371\n+#: ../../../src/uibase.cpp:381\n msgid \"Proxy &IP:\"\n msgstr \"Proxy &IP:\"\n \n-#: ../../../src/uibase.cpp:379\n+#: ../../../src/uibase.cpp:389\n msgid \" &Port:\"\n msgstr \" &Port:\"\n \n-#: ../../../src/uibase.cpp:392\n+#: ../../../src/uibase.cpp:402\n msgid \"Optional transaction fee per KB that helps make sure your transactions are processed quickly.  Most transactions are 1KB.  Fee 0.01 recommended.\"\n msgstr \"Opcjonalna prowizja okre\u015blona dla KB transakcji, kt\u00f3ra zapewni, \u017ce twoje transakcje b\u0119d\u0105 szybko przetworzone. Wi\u0119kszo\u015b\u0107 transakcji to 1KB. Rekomendowana prowizja to 0.01.\"\n \n-#: ../../../src/uibase.cpp:399\n+#: ../../../src/uibase.cpp:409\n msgid \"Pay transaction fee:\"\n msgstr \"P\u0142a\u0107 prowizj\u0119 transakcji:\"\n \n-#: ../../../src/uibase.cpp:420\n+#: ../../../src/uibase.cpp:430\n msgid \"// [don't translate] Test panel 2 for future expansion\"\n msgstr \"\"\n \n-#: ../../../src/uibase.cpp:424\n+#: ../../../src/uibase.cpp:434\n msgid \"// [don't translate] Let's not start multiple pages until the first page is filled up\"\n msgstr \"\"\n \n-#: ../../../src/uibase.cpp:446\n-#: ../../../src/uibase.cpp:668\n-#: ../../../src/uibase.cpp:727\n-#: ../../../src/uibase.cpp:786\n-#: ../../../src/uibase.cpp:895\n-#: ../../../src/uibase.cpp:984\n+#: ../../../src/uibase.cpp:456\n+#: ../../../src/uibase.cpp:678\n+#: ../../../src/uibase.cpp:737\n+#: ../../../src/uibase.cpp:796\n+#: ../../../src/uibase.cpp:905\n+#: ../../../src/uibase.cpp:994\n msgid \"Cancel\"\n msgstr \"Anuluj\"\n \n-#: ../../../src/uibase.cpp:449\n+#: ../../../src/uibase.cpp:459\n msgid \"&Apply\"\n msgstr \"&Zastosuj\"\n \n-#: ../../../src/uibase.cpp:508\n+#: ../../../src/uibase.cpp:518\n msgid \"Bitcoin \"\n msgstr \"Bitcoin\"\n \n-#: ../../../src/uibase.cpp:514\n+#: ../../../src/uibase.cpp:524\n msgid \"version\"\n msgstr \"wersja\"\n \n-#: ../../../src/uibase.cpp:525\n+#: ../../../src/uibase.cpp:535\n msgid \"\"\n \"Copyright (c) 2009-2011 Bitcoin Developers\\n\"\n \"\\n\"\n@@ -865,39 +967,39 @@ msgstr \"\"\n \"OpenSSL Toolkit (http://www.openssl.org/) i oprogramowanie kryptograficzne napisane przez \\n\"\n \"Erica Younga (eay@cryptsoft.com) oraz oprogramowanie UPnP napisane przez Thomasa Bernarda.\"\n \n-#: ../../../src/uibase.cpp:581\n+#: ../../../src/uibase.cpp:591\n msgid \"Enter a Bitcoin address (e.g. 1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L)\"\n msgstr \"Wprowad\u017a adres Bitcoin (np. 1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L)\"\n \n-#: ../../../src/uibase.cpp:595\n+#: ../../../src/uibase.cpp:605\n msgid \"Pay &To:\"\n msgstr \"Wp\u0142a\u0107 &Dla:\"\n \n-#: ../../../src/uibase.cpp:610\n+#: ../../../src/uibase.cpp:620\n msgid \"&Paste\"\n msgstr \"&Wklej\"\n \n-#: ../../../src/uibase.cpp:613\n+#: ../../../src/uibase.cpp:623\n msgid \" Address &Book...\"\n msgstr \" Ksi\u0119ga &Adresowa...\"\n \n-#: ../../../src/uibase.cpp:620\n+#: ../../../src/uibase.cpp:630\n msgid \"&Amount:\"\n msgstr \"&Kwota:\"\n \n-#: ../../../src/uibase.cpp:630\n+#: ../../../src/uibase.cpp:640\n msgid \"T&ransfer:\"\n msgstr \"T&ransfer:\"\n \n-#: ../../../src/uibase.cpp:636\n+#: ../../../src/uibase.cpp:646\n msgid \" Standard\"\n msgstr \" Standard\"\n \n-#: ../../../src/uibase.cpp:663\n+#: ../../../src/uibase.cpp:673\n msgid \"&Send\"\n msgstr \"&Wy\u015blij\"\n \n-#: ../../../src/uibase.cpp:711\n+#: ../../../src/uibase.cpp:721\n msgid \"\"\n \"\\n\"\n \"\\n\"\n@@ -907,70 +1009,74 @@ msgstr \"\"\n \"\\n\"\n \"\u0141\u0105czenie...\"\n \n-#: ../../../src/uibase.cpp:761\n+#: ../../../src/uibase.cpp:771\n msgid \"These are your Bitcoin addresses for receiving payments.  You may want to give a different one to each sender so you can keep track of who is paying you.  The highlighted address is displayed in the main window.\"\n msgstr \"To s\u0105 twoje adresy Bitcoin dla otrzymywania p\u0142atno\u015bci. Mo\u017cesz chcie\u0107 poda\u0107 r\u00f3\u017cne dla ka\u017cdego p\u0142ac\u0105cego aby kontrolowa\u0107 kto ci p\u0142aci. Wyr\u00f3\u017cniony adres b\u0119dzie wy\u015bwietlany w oknie g\u0142\u00f3wnym.\"\n \n-#: ../../../src/uibase.cpp:774\n-#: ../../../src/uibase.cpp:886\n+#: ../../../src/uibase.cpp:784\n+#: ../../../src/uibase.cpp:896\n msgid \"&Edit...\"\n msgstr \"&Edytuj...\"\n \n-#: ../../../src/uibase.cpp:777\n-#: ../../../src/uibase.cpp:889\n+#: ../../../src/uibase.cpp:787\n+#: ../../../src/uibase.cpp:899\n msgid \" &New Address... \"\n msgstr \" &Nowy Adres...\"\n \n-#: ../../../src/uibase.cpp:849\n+#: ../../../src/uibase.cpp:859\n msgid \"Sending\"\n msgstr \"Wysy\u0142anie\"\n \n-#: ../../../src/uibase.cpp:857\n+#: ../../../src/uibase.cpp:867\n msgid \"These are your Bitcoin addresses for receiving payments.  You can give a different one to each sender to keep track of who is paying you.  The highlighted address will be displayed in the main window.\"\n msgstr \"To s\u0105 twoje adresy Bitcoin dla otrzymywania p\u0142atno\u015bci. Mo\u017cesz poda\u0107 r\u00f3\u017cne dla ka\u017cdego p\u0142ac\u0105cego aby kontrolowa\u0107 kto ci p\u0142aci. Wyr\u00f3\u017cniony adres b\u0119dzie wy\u015bwietlany w oknie g\u0142\u00f3wnym.\"\n \n-#: ../../../src/uibase.cpp:870\n+#: ../../../src/uibase.cpp:880\n msgid \"Receiving\"\n msgstr \"Otrzymywanie\"\n \n-#: ../../../src/uibase.cpp:880\n+#: ../../../src/uibase.cpp:890\n msgid \"&Delete\"\n msgstr \"&Usu\u0144\"\n \n-#: ../../../src/wallet.cpp:917\n+#: ../../../src/wallet.cpp:1081\n+msgid \"Error: Wallet locked, unable to create transaction  \"\n+msgstr \"B\u0142\u0105d: Portfel zablokowany, nie mo\u017cna utworzy\u0107 transakcji\"\n+\n+#: ../../../src/wallet.cpp:1089\n #, c-format\n msgid \"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds  \"\n msgstr \"B\u0142\u0105d: Ta transakcja wymaga prowizji co najmniej %s z uwagi na kwot\u0119, z\u0142o\u017cono\u015b\u0107 lub u\u017cycie niedawno otrzymanych funduszy\"\n \n-#: ../../../src/wallet.cpp:919\n+#: ../../../src/wallet.cpp:1091\n msgid \"Error: Transaction creation failed  \"\n msgstr \"B\u0142\u0105d: Nie uda\u0142o si\u0119 utworzy\u0107 transakcji\"\n \n-#: ../../../src/wallet.cpp:928\n+#: ../../../src/wallet.cpp:1101\n msgid \"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\"\n msgstr \"B\u0142\u0105d: Transakcja zosta\u0142a odrzucona. Mo\u017ce si\u0119 tak zdarzy\u0107 je\u017celi cz\u0119\u015b\u0107 monet w twoim portfelu zosta\u0142o wydanych, np. gdy u\u017cyto kopii pliku wallet.dat i monety zosta\u0142y wydane w kopii, a tutaj nie zosta\u0142y oznaczone jako wydane.\"\n \n-#: ../../../src/wallet.cpp:941\n+#: ../../../src/wallet.cpp:1114\n msgid \"Invalid amount\"\n msgstr \"Niew\u0142a\u015bciwa kwota\"\n \n-#: ../../../src/wallet.cpp:948\n+#: ../../../src/wallet.cpp:1121\n msgid \"Invalid bitcoin address\"\n msgstr \"Niew\u0142a\u015bciwy adres bitcoin\"\n \n-#: ../../../src/uibase.h:147\n+#: ../../../src/uibase.h:151\n msgid \"Transaction Details\"\n msgstr \"Szczeg\u00f3\u0142y Transakcji\"\n \n-#: ../../../src/uibase.h:199\n+#: ../../../src/uibase.h:203\n msgid \"Options\"\n msgstr \"Opcje\"\n \n-#: ../../../src/uibase.h:228\n+#: ../../../src/uibase.h:232\n msgid \"About Bitcoin\"\n msgstr \"O Bitcoin\"\n \n-#: ../../../src/uibase.h:337\n+#: ../../../src/uibase.h:341\n msgid \"Your Bitcoin Addresses\"\n msgstr \"Twoje Adresy Bitcoin\"\n "
      },
      {
        "sha": "4175fc47d197a850d4c24c9092a087a8e632ebe3",
        "filename": "locale/ru/LC_MESSAGES/bitcoin.mo",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/ru/LC_MESSAGES/bitcoin.mo",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/ru/LC_MESSAGES/bitcoin.mo",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/locale/ru/LC_MESSAGES/bitcoin.mo?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0"
      },
      {
        "sha": "266e76825a36c1937bef3885885b710ce0db9082",
        "filename": "locale/ru/LC_MESSAGES/bitcoin.po",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/ru/LC_MESSAGES/bitcoin.po",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/locale/ru/LC_MESSAGES/bitcoin.po",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/locale/ru/LC_MESSAGES/bitcoin.po?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -3,8 +3,8 @@ msgstr \"\"\n \"Project-Id-Version: \\n\"\n \"Report-Msgid-Bugs-To: m0Ray <m0ray@nm.ru>\\n\"\n \"POT-Creation-Date: 2011-05-15 18:24+0100\\n\"\n-\"PO-Revision-Date: 2011-05-23 07:06+0500\\n\"\n-\"Last-Translator: m0Ray <m0ray@nm.ru>\\n\"\n+\"PO-Revision-Date: 2011-07-17 04:18+0100\\n\"\n+\"Last-Translator: Michael Bemmerl <mail@mx-server.de>\\n\"\n \"Language-Team: \\n\"\n \"Language: \\n\"\n \"MIME-Version: 1.0\\n\"\n@@ -448,7 +448,7 @@ msgstr \"&\u041e\u0442\u043a\u0440\u044b\u0442\u044c Bitcoin\"\n \n #: ../../../src/ui.cpp:2682\n msgid \"&Send Bitcoins\"\n-msgstr \"&\u041e\u0442\u043a\u0440\u044b\u0442\u044c Bitcoin\"\n+msgstr \"&\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c Bitcoins\"\n \n #: ../../../src/ui.cpp:2683\n msgid \"O&ptions...\""
      },
      {
        "sha": "7d2c25841577d6927ad14199176e8c06d5504b74",
        "filename": "share/uiproject.fbp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/share/uiproject.fbp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/share/uiproject.fbp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/uiproject.fbp?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -2090,7 +2090,7 @@\n                                                                 <property name=\"font\"></property>\r\n                                                                 <property name=\"hidden\">0</property>\r\n                                                                 <property name=\"id\">wxID_ANY</property>\r\n-                                                                <property name=\"label\">&amp;Connect through socks4 proxy: </property>\r\n+                                                                <property name=\"label\">&amp;Connect through socks4 proxy (requires restart to apply): </property>\r\n                                                                 <property name=\"maximum_size\"></property>\r\n                                                                 <property name=\"minimum_size\"></property>\r\n                                                                 <property name=\"name\">m_checkBoxUseProxy</property>\r"
      },
      {
        "sha": "04922c74d81b6333d5435896dadf81e3bd004f32",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 134,
        "deletions": 37,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -159,52 +159,149 @@ inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>\n \n \n \n-#define ADDRESSVERSION   ((unsigned char)(fTestNet ? 111 : 0))\n-\n-inline std::string Hash160ToAddress(uint160 hash160)\n+class CBase58Data\n {\n-    // add 1-byte version number to the front\n-    std::vector<unsigned char> vch(1, ADDRESSVERSION);\n-    vch.insert(vch.end(), UBEGIN(hash160), UEND(hash160));\n-    return EncodeBase58Check(vch);\n-}\n+protected:\n+    unsigned char nVersion;\n+    std::vector<unsigned char> vchData;\n \n-inline bool AddressToHash160(const char* psz, uint160& hash160Ret)\n-{\n-    std::vector<unsigned char> vch;\n-    if (!DecodeBase58Check(psz, vch))\n-        return false;\n-    if (vch.empty())\n-        return false;\n-    unsigned char nVersion = vch[0];\n-    if (vch.size() != sizeof(hash160Ret) + 1)\n-        return false;\n-    memcpy(&hash160Ret, &vch[1], sizeof(hash160Ret));\n-    return (nVersion <= ADDRESSVERSION);\n-}\n+    CBase58Data()\n+    {\n+        nVersion = 0;\n+        vchData.clear();\n+    }\n \n-inline bool AddressToHash160(const std::string& str, uint160& hash160Ret)\n-{\n-    return AddressToHash160(str.c_str(), hash160Ret);\n-}\n+    ~CBase58Data()\n+    {\n+        if (!vchData.empty())\n+            memset(&vchData[0], 0, vchData.size());\n+    }\n \n-inline bool IsValidBitcoinAddress(const char* psz)\n-{\n-    uint160 hash160;\n-    return AddressToHash160(psz, hash160);\n-}\n+    void SetData(int nVersionIn, const void* pdata, size_t nSize)\n+    {\n+        nVersion = nVersionIn;\n+        vchData.resize(nSize);\n+        if (!vchData.empty())\n+            memcpy(&vchData[0], pdata, nSize);\n+    }\n \n-inline bool IsValidBitcoinAddress(const std::string& str)\n-{\n-    return IsValidBitcoinAddress(str.c_str());\n-}\n+    void SetData(int nVersionIn, const unsigned char *pbegin, const unsigned char *pend)\n+    {\n+        SetData(nVersionIn, (void*)pbegin, pend - pbegin);\n+    }\n+\n+public:\n+    bool SetString(const char* psz)\n+    {\n+        std::vector<unsigned char> vchTemp;\n+        DecodeBase58Check(psz, vchTemp);\n+        if (vchTemp.empty())\n+        {\n+            vchData.clear();\n+            nVersion = 0;\n+            return false;\n+        }\n+        nVersion = vchTemp[0];\n+        vchData.resize(vchTemp.size() - 1);\n+        if (!vchData.empty())\n+            memcpy(&vchData[0], &vchTemp[1], vchData.size());\n+        memset(&vchTemp[0], 0, vchTemp.size());\n+        return true;\n+    }\n+\n+    bool SetString(const std::string& str)\n+    {\n+        return SetString(str.c_str());\n+    }\n \n+    std::string ToString() const\n+    {\n+        std::vector<unsigned char> vch(1, nVersion);\n+        vch.insert(vch.end(), vchData.begin(), vchData.end());\n+        return EncodeBase58Check(vch);\n+    }\n+\n+    int CompareTo(const CBase58Data& b58) const\n+    {\n+        if (nVersion < b58.nVersion) return -1;\n+        if (nVersion > b58.nVersion) return  1;\n+        if (vchData < b58.vchData)   return -1;\n+        if (vchData > b58.vchData)   return  1;\n+        return 0;\n+    }\n \n+    bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }\n+    bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }\n+    bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }\n+    bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }\n+    bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n+};\n \n \n-inline std::string PubKeyToAddress(const std::vector<unsigned char>& vchPubKey)\n+class CBitcoinAddress : public CBase58Data\n {\n-    return Hash160ToAddress(Hash160(vchPubKey));\n-}\n+public:\n+    bool SetHash160(const uint160& hash160)\n+    {\n+        SetData(fTestNet ? 111 : 0, &hash160, 20);\n+        return true;\n+    }\n+\n+    bool SetPubKey(const std::vector<unsigned char>& vchPubKey)\n+    {\n+        return SetHash160(Hash160(vchPubKey));\n+    }\n+\n+    bool IsValid() const\n+    {\n+        int nExpectedSize = 20;\n+        bool fExpectTestNet = false;\n+        switch(nVersion)\n+        {\n+            case 0:\n+                break;\n+\n+            case 111:\n+                fExpectTestNet = true;\n+                break;\n+\n+            default:\n+                return false;\n+        }\n+        return fExpectTestNet == fTestNet && vchData.size() == nExpectedSize;\n+    }\n+\n+    CBitcoinAddress()\n+    {\n+    }\n+\n+    CBitcoinAddress(uint160 hash160In)\n+    {\n+        SetHash160(hash160In);\n+    }\n+\n+    CBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n+    {\n+        SetPubKey(vchPubKey);\n+    }\n+\n+    CBitcoinAddress(const std::string& strAddress)\n+    {\n+        SetString(strAddress);\n+    }\n+\n+    CBitcoinAddress(const char* pszAddress)\n+    {\n+        SetString(pszAddress);\n+    }\n+\n+    uint160 GetHash160() const\n+    {\n+        assert(vchData.size() == 20);\n+        uint160 hash160;\n+        memcpy(&hash160, &vchData[0], 20);\n+        return hash160;\n+    }\n+};\n \n #endif"
      },
      {
        "sha": "fdb744d2f9966df88779c19336a80e53f4fce264",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -530,7 +530,7 @@ bool CAddrDB::LoadAddresses()\n                 char psz[1000];\n                 while (fgets(psz, sizeof(psz), filein))\n                 {\n-                    CAddress addr(psz, NODE_NETWORK);\n+                    CAddress addr(psz, false, NODE_NETWORK);\n                     addr.nTime = 0; // so it won't relay unless successfully connected\n                     if (addr.IsValid())\n                         AddAddress(addr);\n@@ -779,7 +779,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                     key.SetPrivKey(wkey.vchPrivKey);\n                 }\n                 if (!pwallet->LoadKey(key))\n-                    return false;\n+                    return DB_CORRUPT;\n             }\n             else if (strType == \"mkey\")\n             {\n@@ -788,7 +788,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 CMasterKey kMasterKey;\n                 ssValue >> kMasterKey;\n                 if(pwallet->mapMasterKeys.count(nID) != 0)\n-                    return false;\n+                    return DB_CORRUPT;\n                 pwallet->mapMasterKeys[nID] = kMasterKey;\n                 if (pwallet->nMasterKeyMaxID < nID)\n                     pwallet->nMasterKeyMaxID = nID;\n@@ -800,7 +800,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 vector<unsigned char> vchPrivKey;\n                 ssValue >> vchPrivKey;\n                 if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n-                    return false;\n+                    return DB_CORRUPT;\n             }\n             else if (strType == \"defaultkey\")\n             {"
      },
      {
        "sha": "025dd6511b4f235da91de99937bbaddba2ae95c7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -497,7 +497,6 @@ bool AppInit2(int argc, char* argv[])\n         printf(\"mapBlockIndex.size() = %d\\n\",   mapBlockIndex.size());\n         printf(\"nBestHeight = %d\\n\",            nBestHeight);\n         printf(\"setKeyPool.size() = %d\\n\",      pwalletMain->setKeyPool.size());\n-        printf(\"mapPubKeys.size() = %d\\n\",      mapPubKeys.size());\n         printf(\"mapWallet.size() = %d\\n\",       pwalletMain->mapWallet.size());\n         printf(\"mapAddressBook.size() = %d\\n\",  pwalletMain->mapAddressBook.size());\n \n@@ -614,6 +613,9 @@ bool UpdateConfig(string &strError)\n     else\n         fUseProxy = false;\n \n+    fTOR = (fUseProxy && addrProxy.port == htons(9050));\n+\n+\n     fPrintToConsole = printtoconsoleOpt();\n     fPrintToDebugger = printtodebuggerOpt();\n     fLogTimestamps = logtimestampsOpt();"
      },
      {
        "sha": "3c14cfedd51801fc44bd67105e64bb4643c7715e",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -220,6 +220,11 @@ class CKey\n             return false;\n         return true;\n     }\n+\n+    CBitcoinAddress GetAddress() const\n+    {\n+        return CBitcoinAddress(GetPubKey());\n+    }\n };\n \n #endif"
      },
      {
        "sha": "1828d6dddc13b05dc996ada069a46351d98d71d5",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 19,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -16,14 +16,19 @@ std::vector<unsigned char> CKeyStore::GenerateNewKey()\n     return key.GetPubKey();\n }\n \n+bool CKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char> &vchPubKeyOut) const\n+{\n+    CKey key;\n+    if (!GetKey(address, key))\n+        return false;\n+    vchPubKeyOut = key.GetPubKey();\n+    return true;\n+}\n+\n bool CBasicKeyStore::AddKey(const CKey& key)\n {\n-    CRITICAL_BLOCK(cs_mapPubKeys)\n     CRITICAL_BLOCK(cs_KeyStore)\n-    {\n-        mapKeys[key.GetPubKey()] = key.GetPrivKey();\n-        mapPubKeys[Hash160(key.GetPubKey())] = key.GetPubKey();\n-    }\n+        mapKeys[key.GetAddress()] = key.GetSecret();\n     return true;\n }\n \n@@ -44,11 +49,11 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         if (!SetCrypted())\n             return false;\n \n-        std::map<std::vector<unsigned char>, std::vector<unsigned char> >::const_iterator mi = mapCryptedKeys.begin();\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n         for (; mi != mapCryptedKeys.end(); ++mi)\n         {\n-            const std::vector<unsigned char> &vchPubKey = (*mi).first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second;\n+            const std::vector<unsigned char> &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n             CSecret vchSecret;\n             if(!DecryptSecret(vMasterKeyIn, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecret))\n                 return false;\n@@ -88,31 +93,30 @@ bool CCryptoKeyStore::AddKey(const CKey& key)\n \n bool CCryptoKeyStore::AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n-    CRITICAL_BLOCK(cs_mapPubKeys)\n     CRITICAL_BLOCK(cs_KeyStore)\n     {\n         if (!SetCrypted())\n             return false;\n \n-        mapCryptedKeys[vchPubKey] = vchCryptedSecret;\n-        mapPubKeys[Hash160(vchPubKey)] = vchPubKey;\n+        mapCryptedKeys[CBitcoinAddress(vchPubKey)] = make_pair(vchPubKey, vchCryptedSecret);\n     }\n     return true;\n }\n \n-bool CCryptoKeyStore::GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const\n+bool CCryptoKeyStore::GetKey(const CBitcoinAddress &address, CKey& keyOut) const\n {\n     CRITICAL_BLOCK(cs_vMasterKey)\n     {\n         if (!IsCrypted())\n-            return CBasicKeyStore::GetPrivKey(vchPubKey, keyOut);\n+            return CBasicKeyStore::GetKey(address, keyOut);\n \n-        std::map<std::vector<unsigned char>, std::vector<unsigned char> >::const_iterator mi = mapCryptedKeys.find(vchPubKey);\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second;\n+            const std::vector<unsigned char> &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n             CSecret vchSecret;\n-            if (!DecryptSecret(vMasterKey, (*mi).second, Hash((*mi).first.begin(), (*mi).first.end()), vchSecret))\n+            if (!DecryptSecret(vMasterKey, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecret))\n                 return false;\n             keyOut.SetSecret(vchSecret);\n             return true;\n@@ -121,6 +125,23 @@ bool CCryptoKeyStore::GetPrivKey(const std::vector<unsigned char> &vchPubKey, CK\n     return false;\n }\n \n+bool CCryptoKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const\n+{\n+    CRITICAL_BLOCK(cs_vMasterKey)\n+    {\n+        if (!IsCrypted())\n+            return CKeyStore::GetPubKey(address, vchPubKeyOut);\n+\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+        if (mi != mapCryptedKeys.end())\n+        {\n+            vchPubKeyOut = (*mi).second.first;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n {\n     CRITICAL_BLOCK(cs_KeyStore)\n@@ -133,12 +154,13 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n         CKey key;\n         BOOST_FOREACH(KeyMap::value_type& mKey, mapKeys)\n         {\n-            if (!key.SetPrivKey(mKey.second))\n+            if (!key.SetSecret(mKey.second))\n                 return false;\n+            const std::vector<unsigned char> vchPubKey = key.GetPubKey();\n             std::vector<unsigned char> vchCryptedSecret;\n-            if (!EncryptSecret(vMasterKeyIn, key.GetSecret(), Hash(mKey.first.begin(), mKey.first.end()), vchCryptedSecret))\n+            if (!EncryptSecret(vMasterKeyIn, key.GetSecret(), Hash(vchPubKey.begin(), vchPubKey.end()), vchCryptedSecret))\n                 return false;\n-            if (!AddCryptedKey(mKey.first, vchCryptedSecret))\n+            if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n                 return false;\n         }\n         mapKeys.clear();"
      },
      {
        "sha": "436053a9e3fa9c9147980c159d488e2cf5a8d739",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -12,12 +12,13 @@ class CKeyStore\n     mutable CCriticalSection cs_KeyStore;\n \n     virtual bool AddKey(const CKey& key) =0;\n-    virtual bool HaveKey(const std::vector<unsigned char> &vchPubKey) const =0;\n-    virtual bool GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const =0;\n+    virtual bool HaveKey(const CBitcoinAddress &address) const =0;\n+    virtual bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const =0;\n+    virtual bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n     virtual std::vector<unsigned char> GenerateNewKey();\n };\n \n-typedef std::map<std::vector<unsigned char>, CPrivKey> KeyMap;\n+typedef std::map<CBitcoinAddress, CSecret> KeyMap;\n \n class CBasicKeyStore : public CKeyStore\n {\n@@ -26,26 +27,28 @@ class CBasicKeyStore : public CKeyStore\n \n public:\n     bool AddKey(const CKey& key);\n-    bool HaveKey(const std::vector<unsigned char> &vchPubKey) const\n+    bool HaveKey(const CBitcoinAddress &address) const\n     {\n-        return (mapKeys.count(vchPubKey) > 0);\n+        return (mapKeys.count(address) > 0);\n     }\n-    bool GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const\n+    bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const\n     {\n-        std::map<std::vector<unsigned char>, CPrivKey>::const_iterator mi = mapKeys.find(vchPubKey);\n+        KeyMap::const_iterator mi = mapKeys.find(address);\n         if (mi != mapKeys.end())\n         {\n-            keyOut.SetPrivKey((*mi).second);\n+            keyOut.SetSecret((*mi).second);\n             return true;\n         }\n         return false;\n     }\n };\n \n+typedef std::map<CBitcoinAddress, std::pair<std::vector<unsigned char>, std::vector<unsigned char> > > CryptedKeyMap;\n+\n class CCryptoKeyStore : public CBasicKeyStore\n {\n private:\n-    std::map<std::vector<unsigned char>, std::vector<unsigned char> > mapCryptedKeys;\n+    CryptedKeyMap mapCryptedKeys;\n \n     CKeyingMaterial vMasterKey;\n \n@@ -103,13 +106,14 @@ class CCryptoKeyStore : public CBasicKeyStore\n     virtual bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     std::vector<unsigned char> GenerateNewKey();\n     bool AddKey(const CKey& key);\n-    bool HaveKey(const std::vector<unsigned char> &vchPubKey) const\n+    bool HaveKey(const CBitcoinAddress &address) const\n     {\n         if (!IsCrypted())\n-            return CBasicKeyStore::HaveKey(vchPubKey);\n-        return mapCryptedKeys.count(vchPubKey) > 0;\n+            return CBasicKeyStore::HaveKey(address);\n+        return mapCryptedKeys.count(address) > 0;\n     }\n-    bool GetPrivKey(const std::vector<unsigned char> &vchPubKey, CKey& keyOut) const;\n+    bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const;\n+    bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n };\n \n #endif"
      },
      {
        "sha": "56b4eb9c1953efd16b868f45b95149af0bac853d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -29,9 +29,6 @@ set<CWallet*> setpwalletRegistered;\n \n CCriticalSection cs_main;\n \n-CCriticalSection cs_mapPubKeys;\n-map<uint160, vector<unsigned char> > mapPubKeys;\n-\n map<uint256, CTransaction> mapTransactions;\n CCriticalSection cs_mapTransactions;\n unsigned int nTransactionsUpdated = 0;\n@@ -325,6 +322,15 @@ bool CTransaction::CheckTransaction() const\n             return error(\"CTransaction::CheckTransaction() : txout total out of range\");\n     }\n \n+    // Check for duplicate inputs\n+    set<COutPoint> vInOutPoints;\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        if (vInOutPoints.count(txin.prevout))\n+            return false;\n+        vInOutPoints.insert(txin.prevout);\n+    }\n+\n     if (IsCoinBase())\n     {\n         if (vin[0].scriptSig.size() < 2 || vin[0].scriptSig.size() > 100)\n@@ -1904,6 +1910,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             return error(\"message addr size() = %d\", vAddr.size());\n \n         // Store the new addresses\n+        CAddrDB addrDB;\n+        addrDB.TxnBegin();\n         int64 nNow = GetAdjustedTime();\n         int64 nSince = nNow - 10 * 60;\n         BOOST_FOREACH(CAddress& addr, vAddr)\n@@ -1915,7 +1923,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 continue;\n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n                 addr.nTime = nNow - 5 * 24 * 60 * 60;\n-            AddAddress(addr, 2 * 60 * 60);\n+            AddAddress(addr, 2 * 60 * 60, &addrDB);\n             pfrom->AddAddressKnown(addr);\n             if (addr.nTime > nSince && !pfrom->fGetAddr && vAddr.size() <= 10 && addr.IsRoutable())\n             {\n@@ -1946,6 +1954,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 }\n             }\n         }\n+        addrDB.TxnCommit();  // Save addresses (it's ok if this fails)\n         if (vAddr.size() < 1000)\n             pfrom->fGetAddr = false;\n     }\n@@ -2572,6 +2581,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     vGetData.clear();\n                 }\n             }\n+            mapAlreadyAskedFor[inv] = nNow;\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())"
      },
      {
        "sha": "133c1cabff1ca193583df8628fb8889359cf7e33",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -1570,7 +1570,5 @@ class CAlert : public CUnsignedAlert\n \n \n extern std::map<uint256, CTransaction> mapTransactions;\n-extern std::map<uint160, std::vector<unsigned char> > mapPubKeys;\n-extern CCriticalSection cs_mapPubKeys;\n \n #endif"
      },
      {
        "sha": "8b1960bcee959be8439dcb536c2b62ae822c9ca4",
        "filename": "src/makefile.vc",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/makefile.vc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/makefile.vc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.vc?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -41,7 +41,7 @@ DEFS=$(DEFS) /DUSE_UPNP=$(USE_UPNP)\n !ENDIF\n \n LIBS=$(LIBS) \\\n-  kernel32.lib user32.lib gdi32.lib comdlg32.lib winspool.lib winmm.lib shell32.lib comctl32.lib ole32.lib oleaut32.lib uuid.lib rpcrt4.lib advapi32.lib ws2_32.lib shlwapi.lib\n+  kernel32.lib user32.lib gdi32.lib comdlg32.lib winspool.lib winmm.lib shell32.lib comctl32.lib ole32.lib oleaut32.lib uuid.lib rpcrt4.lib advapi32.lib ws2_32.lib shlwapi.lib iphlpapi.lib\n \n DEBUGFLAGS=/Os\n CFLAGS=/MD /c /nologo /EHsc /GR /Zm300 $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n@@ -59,7 +59,8 @@ OBJS= \\\n     obj\\main.obj \\\n \tobj\\wallet.obj \\\n     obj\\rpc.obj \\\n-    obj\\init.obj\n+    obj\\init.obj \\\n+\tobj\\crypter.obj\n \n CRYPTOPP_OBJS= \\\n     cryptopp\\obj\\sha.obj \\\n@@ -94,6 +95,8 @@ obj\\rpc.obj: $(HEADERS)\n \n obj\\init.obj: $(HEADERS)\n \n+obj\\crypter.obj: $(HEADERS)\n+\n obj\\ui.obj: $(HEADERS)\n \n obj\\uibase.obj: $(HEADERS)"
      },
      {
        "sha": "8c509cec269c2deee69d1d378fc972e541bb4b42",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -93,6 +93,7 @@ map<CInv, int64> mapAlreadyAskedFor;\n \n // Settings\n int fUseProxy = false;\n+bool fTOR = false;\n CAddress addrProxy(\"127.0.0.1\",9050);\n \n \n@@ -474,7 +475,7 @@ void ThreadGetMyExternalIP(void* parg)\n \n \n \n-bool AddAddress(CAddress addr, int64 nTimePenalty)\n+bool AddAddress(CAddress addr, int64 nTimePenalty, CAddrDB *pAddrDB)\n {\n     if (!addr.IsRoutable())\n         return false;\n@@ -489,7 +490,10 @@ bool AddAddress(CAddress addr, int64 nTimePenalty)\n             // New address\n             printf(\"AddAddress(%s)\\n\", addr.ToString().c_str());\n             mapAddresses.insert(make_pair(addr.GetKey(), addr));\n-            CAddrDB().WriteAddress(addr);\n+            if (pAddrDB)\n+                pAddrDB->WriteAddress(addr);\n+            else\n+                CAddrDB().WriteAddress(addr);\n             return true;\n         }\n         else\n@@ -511,7 +515,12 @@ bool AddAddress(CAddress addr, int64 nTimePenalty)\n                 fUpdated = true;\n             }\n             if (fUpdated)\n-                CAddrDB().WriteAddress(addrFound);\n+            {\n+                if (pAddrDB)\n+                    pAddrDB->WriteAddress(addrFound);\n+                else\n+                    CAddrDB().WriteAddress(addrFound);\n+            }\n         }\n     }\n     return false;\n@@ -1121,13 +1130,14 @@ void ThreadMapPort2(void* parg)\n     {\n         char intClient[16];\n         char intPort[6];\n+        string strDesc = \"Bitcoin \" + FormatFullVersion();\n \n #ifndef __WXMSW__\n         r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-\t                        port, port, lanaddr, 0, \"TCP\", 0);\n+\t                        port, port, lanaddr, strDesc.c_str(), \"TCP\", 0);\n #else\n         r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-\t                        port, port, lanaddr, 0, \"TCP\", 0, \"0\");\n+\t                        port, port, lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n #endif\n         if(r!=UPNPCOMMAND_SUCCESS)\n             printf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n@@ -1195,6 +1205,8 @@ void DNSAddressSeed()\n     if (!fTestNet)\n     {\n         printf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n+        CAddrDB addrDB;\n+        addrDB.TxnBegin();\n \n         for (int seed_idx = 0; seed_idx < ARRAYLEN(strDNSSeed); seed_idx++) {\n             vector<CAddress> vaddr;\n@@ -1205,12 +1217,14 @@ void DNSAddressSeed()\n                     if (addr.GetByte(3) != 127)\n                     {\n                         addr.nTime = 0;\n-                        AddAddress(addr);\n+                        AddAddress(addr, 0, &addrDB);\n                         found++;\n                     }\n                 }\n             }\n         }\n+\n+        addrDB.TxnCommit();  // Save addresses (it's ok if this fails)\n     }\n \n     printf(\"%d addresses found from DNS seeds\\n\", found);"
      },
      {
        "sha": "262b55a6aa64d0a56ec64e4aa172fea195a8e0f1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -21,6 +21,7 @@ extern option<int> maxsendbufferOpt;\n \n class CMessageHeader;\n class CAddress;\n+class CAddrDB;\n class CInv;\n class CRequestTracker;\n class CNode;\n@@ -43,7 +44,7 @@ bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet, int nTimeout\n bool Lookup(const char *pszName, std::vector<CAddress>& vaddr, int nServices, int nMaxSolutions, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n bool Lookup(const char *pszName, CAddress& addr, int nServices, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n bool GetMyExternalIP(unsigned int& ipRet);\n-bool AddAddress(CAddress addr, int64 nTimePenalty=0);\n+bool AddAddress(CAddress addr, int64 nTimePenalty=0, CAddrDB *pAddrDB=NULL);\n void AddressCurrentlyConnected(const CAddress& addr);\n CNode* FindNode(unsigned int ip);\n CNode* ConnectNode(CAddress addrConnect, int64 nTimeout=0);\n@@ -492,6 +493,7 @@ extern std::map<CInv, int64> mapAlreadyAskedFor;\n \n // Settings\n extern int fUseProxy;\n+extern bool fTOR;\n extern CAddress addrProxy;\n \n "
      },
      {
        "sha": "8698244f2df75e5ec1b3d4b41339b799388ec880",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 97,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -393,21 +393,19 @@ Value getnewaddress(const Array& params, bool fHelp)\n         strAccount = AccountFromValue(params[0]);\n \n     // Generate a new key that is added to wallet\n-    string strAddress = PubKeyToAddress(pwalletMain->GetOrReuseKeyFromPool());\n+    CBitcoinAddress address(pwalletMain->GetOrReuseKeyFromPool());\n \n     // This could be done in the same main CS as GetKeyFromKeyPool.\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n-       pwalletMain->SetAddressBookName(strAddress, strAccount);\n+       pwalletMain->SetAddressBookName(address, strAccount);\n \n-    return strAddress;\n+    return address.ToString();\n }\n \n \n // requires cs_main, cs_mapWallet, cs_mapAddressBook locks\n-string GetAccountAddress(string strAccount, bool bForceNew=false)\n+CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n {\n-    string strAddress;\n-\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n \n     CAccount account;\n@@ -444,16 +442,13 @@ string GetAccountAddress(string strAccount, bool bForceNew=false)\n             else\n             {\n                 account.vchPubKey = pwalletMain->GetOrReuseKeyFromPool();\n-                string strAddress = PubKeyToAddress(account.vchPubKey);\n-                pwalletMain->SetAddressBookName(strAddress, strAccount);\n+                pwalletMain->SetAddressBookName(CBitcoinAddress(account.vchPubKey), strAccount);\n                 walletdb.WriteAccount(strAccount, account);\n             }\n         }\n     }\n \n-    strAddress = PubKeyToAddress(account.vchPubKey);\n-\n-    return strAddress;\n+    return CBitcoinAddress(account.vchPubKey);\n }\n \n Value getaccountaddress(const Array& params, bool fHelp)\n@@ -472,7 +467,7 @@ Value getaccountaddress(const Array& params, bool fHelp)\n     CRITICAL_BLOCK(pwalletMain->cs_mapWallet)\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        ret = GetAccountAddress(strAccount);\n+        ret = GetAccountAddress(strAccount).ToString();\n     }\n \n     return ret;\n@@ -487,10 +482,8 @@ Value setaccount(const Array& params, bool fHelp)\n             \"setaccount <bitcoinaddress> <account>\\n\"\n             \"Sets the account associated with the given address.\");\n \n-    string strAddress = params[0].get_str();\n-    uint160 hash160;\n-    bool isValid = AddressToHash160(strAddress, hash160);\n-    if (!isValid)\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n         throw JSONRPCError(-5, \"Invalid bitcoin address\");\n \n \n@@ -503,14 +496,14 @@ Value setaccount(const Array& params, bool fHelp)\n     CRITICAL_BLOCK(pwalletMain->cs_mapWallet)\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        if (pwalletMain->mapAddressBook.count(strAddress))\n+        if (pwalletMain->mapAddressBook.count(address))\n         {\n-            string strOldAccount = pwalletMain->mapAddressBook[strAddress];\n-            if (strAddress == GetAccountAddress(strOldAccount))\n+            string strOldAccount = pwalletMain->mapAddressBook[address];\n+            if (address == GetAccountAddress(strOldAccount))\n                 GetAccountAddress(strOldAccount, true);\n         }\n \n-        pwalletMain->SetAddressBookName(strAddress, strAccount);\n+        pwalletMain->SetAddressBookName(address, strAccount);\n     }\n \n     return Value::null;\n@@ -524,12 +517,14 @@ Value getaccount(const Array& params, bool fHelp)\n             \"getaccount <bitcoinaddress>\\n\"\n             \"Returns the account associated with the given address.\");\n \n-    string strAddress = params[0].get_str();\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(-5, \"Invalid bitcoin address\");\n \n     string strAccount;\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        map<string, string>::iterator mi = pwalletMain->mapAddressBook.find(strAddress);\n+        map<CBitcoinAddress, string>::iterator mi = pwalletMain->mapAddressBook.find(address);\n         if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.empty())\n             strAccount = (*mi).second;\n     }\n@@ -550,17 +545,12 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     Array ret;\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string, string)& item, pwalletMain->mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n         {\n-            const string& strAddress = item.first;\n+            const CBitcoinAddress& address = item.first;\n             const string& strName = item.second;\n             if (strName == strAccount)\n-            {\n-                // We're only adding valid bitcoin addresses and not ip addresses\n-                CScript scriptPubKey;\n-                if (scriptPubKey.SetBitcoinAddress(strAddress))\n-                    ret.push_back(strAddress);\n-            }\n+                ret.push_back(address.ToString());\n         }\n     }\n     return ret;\n@@ -594,7 +584,9 @@ Value sendtoaddress(const Array& params, bool fHelp)\n             \"sendtoaddress <bitcoinaddress> <amount> [comment] [comment-to]\\n\"\n             \"<amount> is a real and is rounded to the nearest 0.00000001\");\n \n-    string strAddress = params[0].get_str();\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(-5, \"Invalid bitcoin address\");\n \n     // Amount\n     int64 nAmount = AmountFromValue(params[1]);\n@@ -612,7 +604,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n         if(pwalletMain->IsLocked())\n             throw JSONRPCError(-14, \"Error: The wallet passphrase entered was incorrect.\");\n \n-        string strError = pwalletMain->SendMoneyToBitcoinAddress(strAddress, nAmount, wtx);\n+        string strError = pwalletMain->SendMoneyToBitcoinAddress(address, nAmount, wtx);\n         if (strError != \"\")\n             throw JSONRPCError(-4, strError);\n     }\n@@ -629,10 +621,11 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n             \"Returns the total amount received by <bitcoinaddress> in transactions with at least [minconf] confirmations.\");\n \n     // Bitcoin address\n-    string strAddress = params[0].get_str();\n+    CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n     CScript scriptPubKey;\n-    if (!scriptPubKey.SetBitcoinAddress(strAddress))\n+    if (!address.IsValid())\n         throw JSONRPCError(-5, \"Invalid bitcoin address\");\n+    scriptPubKey.SetBitcoinAddress(address);\n     if (!IsMine(*pwalletMain,scriptPubKey))\n         return (double)0.0;\n \n@@ -662,22 +655,16 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n }\n \n \n-void GetAccountPubKeys(string strAccount, set<CScript>& setPubKey)\n+void GetAccountAddresses(string strAccount, set<CBitcoinAddress>& setAddress)\n {\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string, string)& item, pwalletMain->mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n         {\n-            const string& strAddress = item.first;\n+            const CBitcoinAddress& address = item.first;\n             const string& strName = item.second;\n             if (strName == strAccount)\n-            {\n-                // We're only counting our own valid bitcoin addresses and not ip addresses\n-                CScript scriptPubKey;\n-                if (scriptPubKey.SetBitcoinAddress(strAddress))\n-                    if (IsMine(*pwalletMain,scriptPubKey))\n-                        setPubKey.insert(scriptPubKey);\n-            }\n+                setAddress.insert(address);\n         }\n     }\n }\n@@ -697,8 +684,8 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n \n     // Get the set of pub keys that have the label\n     string strAccount = AccountFromValue(params[0]);\n-    set<CScript> setPubKey;\n-    GetAccountPubKeys(strAccount, setPubKey);\n+    set<CBitcoinAddress> setAddress;\n+    GetAccountAddresses(strAccount, setAddress);\n \n     // Tally\n     int64 nAmount = 0;\n@@ -711,9 +698,12 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n                 continue;\n \n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-                if (setPubKey.count(txout.scriptPubKey))\n+            {\n+                CBitcoinAddress address;\n+                if (ExtractAddress(txout.scriptPubKey, pwalletMain, address) && setAddress.count(address))\n                     if (wtx.GetDepthInMainChain() >= nMinDepth)\n                         nAmount += txout.nValue;\n+            }\n         }\n     }\n \n@@ -784,13 +774,13 @@ Value getbalance(const Array& params, bool fHelp)\n             int64 allGeneratedImmature, allGeneratedMature, allFee;\n             allGeneratedImmature = allGeneratedMature = allFee = 0;\n             string strSentAccount;\n-            list<pair<string, int64> > listReceived;\n-            list<pair<string, int64> > listSent;\n+            list<pair<CBitcoinAddress, int64> > listReceived;\n+            list<pair<CBitcoinAddress, int64> > listSent;\n             wtx.GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n-                BOOST_FOREACH(const PAIRTYPE(string,int64)& r, listReceived)\n+                BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listReceived)\n                     nBalance += r.second;\n-            BOOST_FOREACH(const PAIRTYPE(string,int64)& r, listSent)\n+            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n             nBalance += allGeneratedMature;\n@@ -816,9 +806,9 @@ Value movecmd(const Array& params, bool fHelp)\n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n     int64 nAmount = AmountFromValue(params[2]);\n-    int nMinDepth = 1;\n     if (params.size() > 3)\n-        nMinDepth = params[3].get_int();\n+        // unused parameter, used to be nMinDepth, keep type-checking it though\n+        (void)params[3].get_int();\n     string strComment;\n     if (params.size() > 4)\n         strComment = params[4].get_str();\n@@ -867,7 +857,9 @@ Value sendfrom(const Array& params, bool fHelp)\n             \"<amount> is a real and is rounded to the nearest 0.00000001\");\n \n     string strAccount = AccountFromValue(params[0]);\n-    string strAddress = params[1].get_str();\n+    CBitcoinAddress address(params[1].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(-5, \"Invalid bitcoin address\");\n     int64 nAmount = AmountFromValue(params[2]);\n     int nMinDepth = 1;\n     if (params.size() > 3)\n@@ -893,7 +885,7 @@ Value sendfrom(const Array& params, bool fHelp)\n             throw JSONRPCError(-6, \"Account has insufficient funds\");\n \n         // Send\n-        string strError = pwalletMain->SendMoneyToBitcoinAddress(strAddress, nAmount, wtx);\n+        string strError = pwalletMain->SendMoneyToBitcoinAddress(address, nAmount, wtx);\n         if (strError != \"\")\n             throw JSONRPCError(-4, strError);\n     }\n@@ -925,22 +917,22 @@ Value sendmany(const Array& params, bool fHelp)\n     if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n-    set<string> setAddress;\n+    set<CBitcoinAddress> setAddress;\n     vector<pair<CScript, int64> > vecSend;\n \n     int64 totalAmount = 0;\n     BOOST_FOREACH(const Pair& s, sendTo)\n     {\n-        uint160 hash160;\n-        string strAddress = s.name_;\n+        CBitcoinAddress address(s.name_);\n+        if (!address.IsValid())\n+            throw JSONRPCError(-5, string(\"Invalid bitcoin address:\")+s.name_);\n \n-        if (setAddress.count(strAddress))\n-            throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+strAddress);\n-        setAddress.insert(strAddress);\n+        if (setAddress.count(address))\n+            throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+s.name_);\n+        setAddress.insert(address);\n \n         CScript scriptPubKey;\n-        if (!scriptPubKey.SetBitcoinAddress(strAddress))\n-            throw JSONRPCError(-5, string(\"Invalid bitcoin address:\")+strAddress);\n+        scriptPubKey.SetBitcoinAddress(address);\n         int64 nAmount = AmountFromValue(s.value_); \n         totalAmount += nAmount;\n \n@@ -1001,7 +993,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         fIncludeEmpty = params[1].get_bool();\n \n     // Tally\n-    map<uint160, tallyitem> mapTally;\n+    map<CBitcoinAddress, tallyitem> mapTally;\n     CRITICAL_BLOCK(pwalletMain->cs_mapWallet)\n     {\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -1016,12 +1008,11 @@ Value ListReceived(const Array& params, bool fByAccounts)\n \n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             {\n-                // Only counting our own bitcoin addresses and not ip addresses\n-                uint160 hash160 = txout.scriptPubKey.GetBitcoinAddressHash160();\n-                if (hash160 == 0 || !mapPubKeys.count(hash160)) // IsMine\n+                CBitcoinAddress address;\n+                if (!ExtractAddress(txout.scriptPubKey, pwalletMain, address) || !address.IsValid())\n                     continue;\n \n-                tallyitem& item = mapTally[hash160];\n+                tallyitem& item = mapTally[address];\n                 item.nAmount += txout.nValue;\n                 item.nConf = min(item.nConf, nDepth);\n             }\n@@ -1033,14 +1024,11 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     map<string, tallyitem> mapAccountTally;\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string, string)& item, pwalletMain->mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n         {\n-            const string& strAddress = item.first;\n+            const CBitcoinAddress& address = item.first;\n             const string& strAccount = item.second;\n-            uint160 hash160;\n-            if (!AddressToHash160(strAddress, hash160))\n-                continue;\n-            map<uint160, tallyitem>::iterator it = mapTally.find(hash160);\n+            map<CBitcoinAddress, tallyitem>::iterator it = mapTally.find(address);\n             if (it == mapTally.end() && !fIncludeEmpty)\n                 continue;\n \n@@ -1061,7 +1049,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n             else\n             {\n                 Object obj;\n-                obj.push_back(Pair(\"address\",       strAddress));\n+                obj.push_back(Pair(\"address\",       address.ToString()));\n                 obj.push_back(Pair(\"account\",       strAccount));\n                 obj.push_back(Pair(\"label\",         strAccount)); // deprecated\n                 obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n@@ -1124,8 +1112,8 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n {\n     int64 nGeneratedImmature, nGeneratedMature, nFee;\n     string strSentAccount;\n-    list<pair<string, int64> > listReceived;\n-    list<pair<string, int64> > listSent;\n+    list<pair<CBitcoinAddress, int64> > listReceived;\n+    list<pair<CBitcoinAddress, int64> > listSent;\n     wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n \n     bool fAllAccounts = (strAccount == string(\"*\"));\n@@ -1153,11 +1141,11 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string, int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& s, listSent)\n         {\n             Object entry;\n             entry.push_back(Pair(\"account\", strSentAccount));\n-            entry.push_back(Pair(\"address\", s.first));\n+            entry.push_back(Pair(\"address\", s.first.ToString()));\n             entry.push_back(Pair(\"category\", \"send\"));\n             entry.push_back(Pair(\"amount\", ValueFromAmount(-s.second)));\n             entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n@@ -1171,7 +1159,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n         CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n         {\n-            BOOST_FOREACH(const PAIRTYPE(string, int64)& r, listReceived)\n+            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& r, listReceived)\n             {\n                 string account;\n                 if (pwalletMain->mapAddressBook.count(r.first))\n@@ -1180,7 +1168,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n                 {\n                     Object entry;\n                     entry.push_back(Pair(\"account\", account));\n-                    entry.push_back(Pair(\"address\", r.first));\n+                    entry.push_back(Pair(\"address\", r.first.ToString()));\n                     entry.push_back(Pair(\"category\", \"receive\"));\n                     entry.push_back(Pair(\"amount\", ValueFromAmount(r.second)));\n                     if (fLong)\n@@ -1291,9 +1279,8 @@ Value listaccounts(const Array& params, bool fHelp)\n     CRITICAL_BLOCK(pwalletMain->cs_mapWallet)\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string, string)& entry, pwalletMain->mapAddressBook) {\n-            uint160 hash160;\n-            if(AddressToHash160(entry.first, hash160) && mapPubKeys.count(hash160)) // This address belongs to me\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& entry, pwalletMain->mapAddressBook) {\n+            if (pwalletMain->HaveKey(entry.first)) // This address belongs to me\n                 mapAccountBalances[entry.second] = 0;\n         }\n \n@@ -1302,16 +1289,16 @@ Value listaccounts(const Array& params, bool fHelp)\n             const CWalletTx& wtx = (*it).second;\n             int64 nGeneratedImmature, nGeneratedMature, nFee;\n             string strSentAccount;\n-            list<pair<string, int64> > listReceived;\n-            list<pair<string, int64> > listSent;\n+            list<pair<CBitcoinAddress, int64> > listReceived;\n+            list<pair<CBitcoinAddress, int64> > listSent;\n             wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n             mapAccountBalances[strSentAccount] -= nFee;\n-            BOOST_FOREACH(const PAIRTYPE(string, int64)& s, listSent)\n+            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& s, listSent)\n                 mapAccountBalances[strSentAccount] -= s.second;\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n                 mapAccountBalances[\"\"] += nGeneratedMature;\n-                BOOST_FOREACH(const PAIRTYPE(string, int64)& r, listReceived)\n+                BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& r, listReceived)\n                     if (pwalletMain->mapAddressBook.count(r.first))\n                         mapAccountBalances[pwalletMain->mapAddressBook[r.first]] += r.second;\n                     else\n@@ -1603,23 +1590,22 @@ Value validateaddress(const Array& params, bool fHelp)\n             \"validateaddress <bitcoinaddress>\\n\"\n             \"Return information about <bitcoinaddress>.\");\n \n-    string strAddress = params[0].get_str();\n-    uint160 hash160;\n-    bool isValid = AddressToHash160(strAddress, hash160);\n+    CBitcoinAddress address(params[0].get_str());\n+    bool isValid = address.IsValid();\n \n     Object ret;\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n     {\n         // Call Hash160ToAddress() so we always return current ADDRESSVERSION\n         // version of the address:\n-        string currentAddress = Hash160ToAddress(hash160);\n+        string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n-        ret.push_back(Pair(\"ismine\", (mapPubKeys.count(hash160) > 0)));\n+        ret.push_back(Pair(\"ismine\", (pwalletMain->HaveKey(address) > 0)));\n         CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n         {\n-            if (pwalletMain->mapAddressBook.count(currentAddress))\n-                ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[currentAddress]));\n+            if (pwalletMain->mapAddressBook.count(address))\n+                ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address]));\n         }\n     }\n     return ret;\n@@ -1808,7 +1794,7 @@ string pAllowInSafeMode[] =\n     \"getinfo\",\n     \"getnewaddress\",\n     \"getaccountaddress\",\n-    \"setlabel\",\n+    \"setlabel\", // deprecated\n     \"getaccount\",\n     \"getlabel\", // deprecated\n     \"getaddressesbyaccount\",\n@@ -2436,7 +2422,7 @@ int CommandLineRPC(int argc, char *argv[])\n         if (strMethod == \"getreceivedbyaccount\"   && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"getreceivedbylabel\"     && n > 1) ConvertTo<boost::int64_t>(params[1]); // deprecated\n         if (strMethod == \"getallreceived\"         && n > 0) ConvertTo<boost::int64_t>(params[0]); // deprecated\n-        if (strMethod == \"getallreceived\"         && n > 1) ConvertTo<bool>(params[1]);\n+        if (strMethod == \"getallreceived\"         && n > 1) ConvertTo<bool>(params[1]); // deprecated\n         if (strMethod == \"listreceivedbyaddress\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);\n         if (strMethod == \"listreceivedbyaddress\"  && n > 1) ConvertTo<bool>(params[1]);\n         if (strMethod == \"listreceivedbyaccount\"  && n > 0) ConvertTo<boost::int64_t>(params[0]);"
      },
      {
        "sha": "0fc4611fdad864fa6637596ddd0dc2f427e20762",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 55,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -1041,7 +1041,9 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n                 // Sign\n                 const valtype& vchPubKey = item.second;\n                 CKey key;\n-                if (!keystore.GetPrivKey(vchPubKey, key))\n+                if (!keystore.GetKey(Hash160(vchPubKey), key))\n+                    return false;\n+                if (key.GetPubKey() != vchPubKey)\n                     return false;\n                 if (hash != 0)\n                 {\n@@ -1055,20 +1057,16 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n             else if (item.first == OP_PUBKEYHASH)\n             {\n                 // Sign and give pubkey\n-                map<uint160, valtype>::iterator mi = mapPubKeys.find(uint160(item.second));\n-                if (mi == mapPubKeys.end())\n-                    return false;\n-                const vector<unsigned char>& vchPubKey = (*mi).second;\n                 CKey key;\n-                if (!keystore.GetPrivKey(vchPubKey, key))\n+                if (!keystore.GetKey(uint160(item.second), key))\n                     return false;\n                 if (hash != 0)\n                 {\n                     vector<unsigned char> vchSig;\n                     if (!key.Sign(hash, vchSig))\n                         return false;\n                     vchSig.push_back((unsigned char)nHashType);\n-                    scriptSigRet << vchSig << vchPubKey;\n+                    scriptSigRet << vchSig << key.GetPubKey();\n                 }\n             }\n             else\n@@ -1102,19 +1100,16 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         {\n             if (item.first == OP_PUBKEY)\n             {\n-                // Sign\n                 const valtype& vchPubKey = item.second;\n-                if (!keystore.HaveKey(vchPubKey))\n+                vector<unsigned char> vchPubKeyFound;\n+                if (!keystore.GetPubKey(Hash160(vchPubKey), vchPubKeyFound))\n+                    return false;\n+                if (vchPubKeyFound != vchPubKey)\n                     return false;\n             }\n             else if (item.first == OP_PUBKEYHASH)\n             {\n-                // Sign and give pubkey\n-                map<uint160, valtype>::iterator mi = mapPubKeys.find(uint160(item.second));\n-                if (mi == mapPubKeys.end())\n-                    return false;\n-                const vector<unsigned char>& vchPubKey = (*mi).second;\n-                if (!keystore.HaveKey(vchPubKey))\n+                if (!keystore.HaveKey(uint160(item.second)))\n                     return false;\n             }\n             else\n@@ -1127,58 +1122,33 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     return true;\n }\n \n-\n-bool ExtractPubKey(const CScript& scriptPubKey, const CKeyStore* keystore, vector<unsigned char>& vchPubKeyRet)\n+// requires either keystore==0, or a lock on keystore->cs_KeyStore\n+bool static ExtractAddressInner(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n {\n-    vchPubKeyRet.clear();\n-\n     vector<pair<opcodetype, valtype> > vSolution;\n     if (!Solver(scriptPubKey, vSolution))\n         return false;\n \n-    CRITICAL_BLOCK(cs_mapPubKeys)\n+    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n     {\n-        BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n-        {\n-            valtype vchPubKey;\n-            if (item.first == OP_PUBKEY)\n-            {\n-                vchPubKey = item.second;\n-            }\n-            else if (item.first == OP_PUBKEYHASH)\n-            {\n-                map<uint160, valtype>::iterator mi = mapPubKeys.find(uint160(item.second));\n-                if (mi == mapPubKeys.end())\n-                    continue;\n-                vchPubKey = (*mi).second;\n-            }\n-            if (keystore == NULL || keystore->HaveKey(vchPubKey))\n-            {\n-                vchPubKeyRet = vchPubKey;\n-                return true;\n-            }\n-        }\n+        if (item.first == OP_PUBKEY)\n+            addressRet.SetPubKey(item.second);\n+        else if (item.first == OP_PUBKEYHASH)\n+            addressRet.SetHash160((uint160)item.second);\n+        if (keystore == NULL || keystore->HaveKey(addressRet))\n+            return true;\n     }\n     return false;\n }\n \n \n-bool ExtractHash160(const CScript& scriptPubKey, uint160& hash160Ret)\n+bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n {\n-    hash160Ret = 0;\n-\n-    vector<pair<opcodetype, valtype> > vSolution;\n-    if (!Solver(scriptPubKey, vSolution))\n-        return false;\n-\n-    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n-    {\n-        if (item.first == OP_PUBKEYHASH)\n-        {\n-            hash160Ret = uint160(item.second);\n-            return true;\n-        }\n-    }\n+    if (keystore)\n+        CRITICAL_BLOCK(keystore->cs_KeyStore)\n+            return ExtractAddressInner(scriptPubKey, keystore, addressRet);\n+    else\n+        return ExtractAddressInner(scriptPubKey, NULL, addressRet);\n     return false;\n }\n "
      },
      {
        "sha": "9d94e3f5c83994151af525bee346f36bcac8f19f",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 6,
        "deletions": 25,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -622,7 +622,7 @@ class CScript : public std::vector<unsigned char>\n     }\n \n \n-    uint160 GetBitcoinAddressHash160() const\n+    CBitcoinAddress GetBitcoinAddress() const\n     {\n         opcodetype opcode;\n         std::vector<unsigned char> vch;\n@@ -634,36 +634,18 @@ class CScript : public std::vector<unsigned char>\n         if (!GetOp(pc, opcode, vch) || opcode != OP_EQUALVERIFY) return 0;\n         if (!GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG) return 0;\n         if (pc != end()) return 0;\n-        return hash160;\n+        return CBitcoinAddress(hash160);\n     }\n \n-    std::string GetBitcoinAddress() const\n-    {\n-        uint160 hash160 = GetBitcoinAddressHash160();\n-        if (hash160 == 0)\n-            return \"\";\n-        return Hash160ToAddress(hash160);\n-    }\n-\n-    void SetBitcoinAddress(const uint160& hash160)\n+    void SetBitcoinAddress(const CBitcoinAddress& address)\n     {\n         this->clear();\n-        *this << OP_DUP << OP_HASH160 << hash160 << OP_EQUALVERIFY << OP_CHECKSIG;\n+        *this << OP_DUP << OP_HASH160 << address.GetHash160() << OP_EQUALVERIFY << OP_CHECKSIG;\n     }\n \n     void SetBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n     {\n-        SetBitcoinAddress(Hash160(vchPubKey));\n-    }\n-\n-    bool SetBitcoinAddress(const std::string& strAddress)\n-    {\n-        this->clear();\n-        uint160 hash160;\n-        if (!AddressToHash160(strAddress, hash160))\n-            return false;\n-        SetBitcoinAddress(hash160);\n-        return true;\n+        SetBitcoinAddress(CBitcoinAddress(vchPubKey));\n     }\n \n \n@@ -710,8 +692,7 @@ class CScript : public std::vector<unsigned char>\n \n bool IsStandard(const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-bool ExtractPubKey(const CScript& scriptPubKey, const CKeyStore* pkeystore, std::vector<unsigned char>& vchPubKeyRet);\n-bool ExtractHash160(const CScript& scriptPubKey, uint160& hash160Ret);\n+bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* pkeystore, CBitcoinAddress& addressRet);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL, CScript scriptPrereq=CScript());\n bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType=0);\n "
      },
      {
        "sha": "c92facf9cbc139358e7bf08573e4e28ddb0d4a70",
        "filename": "src/ui.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 43,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/ui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/ui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.cpp?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -238,12 +238,13 @@ void SetDefaultReceivingAddress(const string& strAddress)\n         return;\n     if (strAddress != pframeMain->m_textCtrlAddress->GetValue())\n     {\n-        uint160 hash160;\n-        if (!AddressToHash160(strAddress, hash160))\n+        CBitcoinAddress address(strAddress);\n+        if (!address.IsValid())\n             return;\n-        if (!mapPubKeys.count(hash160))\n+        vector<unsigned char> vchPubKey;\n+        if (!pwalletMain->GetPubKey(address, vchPubKey))\n             return;\n-        pwalletMain->SetDefaultKey(mapPubKeys[hash160]);\n+        pwalletMain->SetDefaultKey(vchPubKey);\n         pframeMain->m_textCtrlAddress->SetValue(strAddress);\n     }\n }\n@@ -369,7 +370,7 @@ CMainFrame::CMainFrame(wxWindow* parent) : CMainFrameBase(parent)\n     // Fill your address text box\n     vector<unsigned char> vchPubKey;\n     if (CWalletDB(pwalletMain->strWalletFile,\"r\").ReadDefaultKey(vchPubKey))\n-        m_textCtrlAddress->SetValue(PubKeyToAddress(vchPubKey));\n+        m_textCtrlAddress->SetValue(CBitcoinAddress(vchPubKey).ToString());\n \n     if (pwalletMain->IsCrypted())\n         m_menuOptions->Remove(m_menuOptionsEncryptWallet);\n@@ -706,24 +707,23 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n             {\n                 if (pwalletMain->IsMine(txout))\n                 {\n-                    vector<unsigned char> vchPubKey;\n-                    if (ExtractPubKey(txout.scriptPubKey, pwalletMain, vchPubKey))\n+                    CBitcoinAddress address;\n+                    if (ExtractAddress(txout.scriptPubKey, pwalletMain, address))\n                     {\n                         CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n                         {\n                             //strDescription += _(\"Received payment to \");\n                             //strDescription += _(\"Received with address \");\n                             strDescription += _(\"Received with: \");\n-                            string strAddress = PubKeyToAddress(vchPubKey);\n-                            map<string, string>::iterator mi = pwalletMain->mapAddressBook.find(strAddress);\n+                            map<CBitcoinAddress, string>::iterator mi = pwalletMain->mapAddressBook.find(address);\n                             if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.empty())\n                             {\n                                 string strLabel = (*mi).second;\n-                                strDescription += strAddress.substr(0,12) + \"... \";\n+                                strDescription += address.ToString().substr(0,12) + \"... \";\n                                 strDescription += \"(\" + strLabel + \")\";\n                             }\n                             else\n-                                strDescription += strAddress;\n+                                strDescription += address.ToString();\n                         }\n                     }\n                     break;\n@@ -779,6 +779,7 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n                 if (pwalletMain->IsMine(txout))\n                     continue;\n \n+                CBitcoinAddress address;\n                 string strAddress;\n                 if (!mapValue[\"to\"].empty())\n                 {\n@@ -788,15 +789,14 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n                 else\n                 {\n                     // Sent to Bitcoin Address\n-                    uint160 hash160;\n-                    if (ExtractHash160(txout.scriptPubKey, hash160))\n-                        strAddress = Hash160ToAddress(hash160);\n+                    if (ExtractAddress(txout.scriptPubKey, NULL, address))\n+                        strAddress = address.ToString();\n                 }\n \n                 string strDescription = _(\"To: \");\n                 CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n-                    if (pwalletMain->mapAddressBook.count(strAddress) && !pwalletMain->mapAddressBook[strAddress].empty())\n-                        strDescription += pwalletMain->mapAddressBook[strAddress] + \" \";\n+                    if (pwalletMain->mapAddressBook.count(address) && !pwalletMain->mapAddressBook[address].empty())\n+                        strDescription += pwalletMain->mapAddressBook[address] + \" \";\n                 strDescription += strAddress;\n                 if (!mapValue[\"message\"].empty())\n                 {\n@@ -1117,7 +1117,7 @@ void CMainFrame::OnPaintListCtrl(wxPaintEvent& event)\n     m_statusBar->SetStatusText(strStatus, 2);\n \n     // Update receiving address\n-    string strDefaultAddress = PubKeyToAddress(pwalletMain->vchDefaultKey);\n+    string strDefaultAddress = CBitcoinAddress(pwalletMain->vchDefaultKey).ToString();\n     if (m_textCtrlAddress->GetValue() != strDefaultAddress)\n         m_textCtrlAddress->SetValue(strDefaultAddress);\n }\n@@ -1396,7 +1396,7 @@ void CMainFrame::OnButtonNew(wxCommandEvent& event)\n             return;\n \n         // Generate new key\n-        strAddress = PubKeyToAddress(pwalletMain->GetOrReuseKeyFromPool());\n+        strAddress = CBitcoinAddress(pwalletMain->GetOrReuseKeyFromPool()).ToString();\n \n         if (fWasLocked)\n             pwalletMain->Lock();\n@@ -1505,17 +1505,16 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n                 {\n                     if (pwalletMain->IsMine(txout))\n                     {\n-                        vector<unsigned char> vchPubKey;\n-                        if (ExtractPubKey(txout.scriptPubKey, pwalletMain, vchPubKey))\n+                        CBitcoinAddress address;\n+                        if (ExtractAddress(txout.scriptPubKey, pwalletMain, address))\n                         {\n-                            string strAddress = PubKeyToAddress(vchPubKey);\n-                            if (pwalletMain->mapAddressBook.count(strAddress))\n+                            if (pwalletMain->mapAddressBook.count(address))\n                             {\n                                 strHTML += string() + _(\"<b>From:</b> \") + _(\"unknown\") + \"<br>\";\n                                 strHTML += _(\"<b>To:</b> \");\n-                                strHTML += HtmlEscape(strAddress);\n-                                if (!pwalletMain->mapAddressBook[strAddress].empty())\n-                                    strHTML += _(\" (yours, label: \") + pwalletMain->mapAddressBook[strAddress] + \")\";\n+                                strHTML += HtmlEscape(address.ToString());\n+                                if (!pwalletMain->mapAddressBook[address].empty())\n+                                    strHTML += _(\" (yours, label: \") + pwalletMain->mapAddressBook[address] + \")\";\n                                 else\n                                     strHTML += _(\" (yours)\");\n                                 strHTML += \"<br>\";\n@@ -1591,13 +1590,13 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n                     if (wtx.mapValue[\"to\"].empty())\n                     {\n                         // Offline transaction\n-                        uint160 hash160;\n-                        if (ExtractHash160(txout.scriptPubKey, hash160))\n+                        CBitcoinAddress address;\n+                        if (ExtractAddress(txout.scriptPubKey, pwalletMain, address))\n                         {\n-                            string strAddress = Hash160ToAddress(hash160);\n+                            string strAddress = address.ToString();\n                             strHTML += _(\"<b>To:</b> \");\n-                            if (pwalletMain->mapAddressBook.count(strAddress) && !pwalletMain->mapAddressBook[strAddress].empty())\n-                                strHTML += pwalletMain->mapAddressBook[strAddress] + \" \";\n+                            if (pwalletMain->mapAddressBook.count(address) && !pwalletMain->mapAddressBook[address].empty())\n+                                strHTML += pwalletMain->mapAddressBook[address] + \" \";\n                             strHTML += strAddress;\n                             strHTML += \"<br>\";\n                         }\n@@ -2158,8 +2157,8 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n         }\n \n         // Parse bitcoin address\n-        uint160 hash160;\n-        bool fBitcoinAddress = AddressToHash160(strAddress, hash160);\n+        CBitcoinAddress address(strAddress);\n+        bool fBitcoinAddress = address.IsValid();\n \n         if (fBitcoinAddress)\n         {\n@@ -2172,7 +2171,7 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n \n                 // Send to bitcoin address\n                 CScript scriptPubKey;\n-                scriptPubKey << OP_DUP << OP_HASH160 << hash160 << OP_EQUALVERIFY << OP_CHECKSIG;\n+                scriptPubKey.SetBitcoinAddress(address);\n \n                 string strError = pwalletMain->SendMoney(scriptPubKey, nValue, wtx, true);\n                 if (strError == \"\")\n@@ -2216,7 +2215,7 @@ void CSendDialog::OnButtonSend(wxCommandEvent& event)\n         }\n \n         CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n-            if (!pwalletMain->mapAddressBook.count(strAddress))\n+            if (!pwalletMain->mapAddressBook.count(address))\n                 pwalletMain->SetAddressBookName(strAddress, \"\");\n \n         EndModal(true);\n@@ -2628,15 +2627,14 @@ CAddressBookDialog::CAddressBookDialog(wxWindow* parent, const wxString& strInit\n     CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook)\n     {\n         string strDefaultReceiving = (string)pframeMain->m_textCtrlAddress->GetValue();\n-        BOOST_FOREACH(const PAIRTYPE(string, string)& item, pwalletMain->mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n         {\n-            string strAddress = item.first;\n+            const CBitcoinAddress& address = item.first;\n             string strName = item.second;\n-            uint160 hash160;\n-            bool fMine = (AddressToHash160(strAddress, hash160) && mapPubKeys.count(hash160));\n+            bool fMine = pwalletMain->HaveKey(address);\n             wxListCtrl* plistCtrl = fMine ? m_listCtrlReceiving : m_listCtrlSending;\n-            int nIndex = InsertLine(plistCtrl, strName, strAddress);\n-            if (strAddress == (fMine ? strDefaultReceiving : string(strInitSelected)))\n+            int nIndex = InsertLine(plistCtrl, strName, address.ToString());\n+            if (address.ToString() == (fMine ? strDefaultReceiving : string(strInitSelected)))\n                 plistCtrl->SetItemState(nIndex, wxLIST_STATE_SELECTED|wxLIST_STATE_FOCUSED, wxLIST_STATE_SELECTED|wxLIST_STATE_FOCUSED);\n         }\n     }\n@@ -2743,8 +2741,8 @@ void CAddressBookDialog::OnButtonCopy(wxCommandEvent& event)\n \n bool CAddressBookDialog::CheckIfMine(const string& strAddress, const string& strTitle)\n {\n-    uint160 hash160;\n-    bool fMine = (AddressToHash160(strAddress, hash160) && mapPubKeys.count(hash160));\n+    CBitcoinAddress address(strAddress);\n+    bool fMine = address.IsValid() && pwalletMain->HaveKey(address);\n     if (fMine)\n         wxMessageBox(_(\"This is one of your own addresses for receiving payments and cannot be entered in the address book.  \"), strTitle);\n     return fMine;\n@@ -2830,7 +2828,7 @@ void CAddressBookDialog::OnButtonNew(wxCommandEvent& event)\n                 return;\n \n             // Generate new key\n-            strAddress = PubKeyToAddress(pwalletMain->GetOrReuseKeyFromPool());\n+            strAddress = CBitcoinAddress(pwalletMain->GetOrReuseKeyFromPool()).ToString();\n \n             if (fWasLocked)\n                 pwalletMain->Lock();"
      },
      {
        "sha": "6d219ad6678bc27053b85b4dc5a3a300838de385",
        "filename": "src/uibase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/uibase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/uibase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uibase.cpp?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -367,7 +367,7 @@ COptionsDialogBase::COptionsDialogBase( wxWindow* parent, wxWindowID id, const w\n \twxBoxSizer* bSizer102;\n \tbSizer102 = new wxBoxSizer( wxHORIZONTAL );\n \t\n-\tm_checkBoxUseProxy = new wxCheckBox( m_panelMain, wxID_ANY, _(\"&Connect through socks4 proxy: \"), wxDefaultPosition, wxDefaultSize, 0 );\n+\tm_checkBoxUseProxy = new wxCheckBox( m_panelMain, wxID_ANY, _(\"&Connect through socks4 proxy (requires restart to apply): \"), wxDefaultPosition, wxDefaultSize, 0 );\n \tbSizer102->Add( m_checkBoxUseProxy, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5 );\n \t\n \tbSizer69->Add( bSizer102, 1, wxEXPAND, 5 );"
      },
      {
        "sha": "ac6b59bbe430550bacc2cd5211964dbeb01425b2",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -580,7 +580,10 @@ inline pthread_t CreateThread(void(*pfn)(void*), void* parg, bool fWantHandle=fa\n         return (pthread_t)0;\n     }\n     if (!fWantHandle)\n+    {\n+        pthread_detach(hthread);\n         return (pthread_t)-1;\n+    }\n     return hthread;\n }\n "
      },
      {
        "sha": "5a099015d3e0bbe68e1690776a0c0a2881e1de47",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 32,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -28,6 +28,7 @@ bool CWallet::AddKey(const CKey& key)\n         return true;\n     if (!IsCrypted())\n         return CWalletDB(strWalletFile).WriteKey(key.GetPubKey(), key.GetPrivKey());\n+    return true;\n }\n \n bool CWallet::AddCryptedKey(const vector<unsigned char> &vchPubKey, const vector<unsigned char> &vchCryptedSecret)\n@@ -128,7 +129,6 @@ class CCorruptAddress\n \n bool CWallet::EncryptWallet(const string& strWalletPassphrase)\n {\n-    CRITICAL_BLOCK(cs_mapPubKeys)\n     CRITICAL_BLOCK(cs_KeyStore)\n     CRITICAL_BLOCK(cs_vMasterKey)\n     CRITICAL_BLOCK(cs_pwalletdbEncryption)\n@@ -273,7 +273,10 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             if (txout.scriptPubKey == scriptDefaultKey)\n+            {\n                 SetDefaultKey(GetOrReuseKeyFromPool());\n+                SetAddressBookName(CBitcoinAddress(vchDefaultKey), \"\");\n+            }\n         }\n \n         // Notify UI\n@@ -408,8 +411,8 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n-void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<string, int64> >& listReceived,\n-                           list<pair<string, int64> >& listSent, int64& nFee, string& strSentAccount) const\n+void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<CBitcoinAddress, int64> >& listReceived,\n+                           list<pair<CBitcoinAddress, int64> >& listSent, int64& nFee, string& strSentAccount) const\n {\n     nGeneratedImmature = nGeneratedMature = nFee = 0;\n     listReceived.clear();\n@@ -437,14 +440,9 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n     // but non-standard clients might (so return a list of address/amount pairs)\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n-        string address;\n-        uint160 hash160;\n+        CBitcoinAddress address;\n         vector<unsigned char> vchPubKey;\n-        if (ExtractHash160(txout.scriptPubKey, hash160))\n-            address = Hash160ToAddress(hash160);\n-        else if (ExtractPubKey(txout.scriptPubKey, NULL, vchPubKey))\n-            address = PubKeyToAddress(vchPubKey);\n-        else\n+        if (!ExtractAddress(txout.scriptPubKey, NULL, address))\n         {\n             printf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n                    this->GetHash().ToString().c_str());\n@@ -472,25 +470,25 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, i\n     int64 allGeneratedImmature, allGeneratedMature, allFee;\n     allGeneratedImmature = allGeneratedMature = allFee = 0;\n     string strSentAccount;\n-    list<pair<string, int64> > listReceived;\n-    list<pair<string, int64> > listSent;\n+    list<pair<CBitcoinAddress, int64> > listReceived;\n+    list<pair<CBitcoinAddress, int64> > listSent;\n     GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n \n     if (strAccount == \"\")\n         nGenerated = allGeneratedMature;\n     if (strAccount == strSentAccount)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string,int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& s, listSent)\n             nSent += s.second;\n         nFee = allFee;\n     }\n     CRITICAL_BLOCK(pwallet->cs_mapAddressBook)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(string,int64)& r, listReceived)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listReceived)\n         {\n             if (pwallet->mapAddressBook.count(r.first))\n             {\n-                map<string, string>::const_iterator mi = pwallet->mapAddressBook.find(r.first);\n+                map<CBitcoinAddress, string>::const_iterator mi = pwallet->mapAddressBook.find(r.first);\n                 if (mi != pwallet->mapAddressBook.end() && (*mi).second == strAccount)\n                     nReceived += r.second;\n             }\n@@ -942,9 +940,17 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                     dPriority += (double)nCredit * pcoin.first->GetDepthInMainChain();\n                 }\n \n-                // Fill a vout back to self with any change\n-                int64 nChange = nValueIn - nTotalValue;\n-                if (nChange >= CENT)\n+                int64 nChange = nValueIn - nValue - nFeeRet;\n+                // if sub-cent change is required, the fee must be raised to at least MIN_TX_FEE\n+                // or until nChange becomes zero\n+                if (nFeeRet < MIN_TX_FEE && nChange > 0 && nChange < CENT)\n+                {\n+                    int64 nMoveToFee = min(nChange, MIN_TX_FEE - nFeeRet);\n+                    nChange -= nMoveToFee;\n+                    nFeeRet += nMoveToFee;\n+                }\n+\n+                if (nChange > 0)\n                 {\n                     // Note: We use a new key here to keep it from being obvious which side is the change.\n                     //  The drawback is that by not reusing a previous key, the change may be lost if a\n@@ -959,7 +965,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n \n                     // Fill a vout to ourself, using same address type as the payment\n                     CScript scriptChange;\n-                    if (vecSend[0].first.GetBitcoinAddressHash160() != 0)\n+                    if (vecSend[0].first.GetBitcoinAddress().IsValid())\n                         scriptChange.SetBitcoinAddress(vchPubKey);\n                     else\n                         scriptChange << vchPubKey << OP_CHECKSIG;\n@@ -1108,7 +1114,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n \n \n // requires cs_main lock\n-string CWallet::SendMoneyToBitcoinAddress(string strAddress, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1118,8 +1124,7 @@ string CWallet::SendMoneyToBitcoinAddress(string strAddress, int64 nValue, CWall\n \n     // Parse bitcoin address\n     CScript scriptPubKey;\n-    if (!scriptPubKey.SetBitcoinAddress(strAddress))\n-        return _(\"Invalid bitcoin address\");\n+    scriptPubKey.SetBitcoinAddress(address);\n \n     return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee);\n }\n@@ -1137,13 +1142,13 @@ int CWallet::LoadWallet(bool& fFirstRunRet)\n         return nLoadWalletRet;\n     fFirstRunRet = vchDefaultKey.empty();\n \n-    if (!HaveKey(vchDefaultKey))\n+    if (!HaveKey(Hash160(vchDefaultKey)))\n     {\n         // Create new keyUser and set as default key\n         RandAddSeedPerfmon();\n \n         SetDefaultKey(GetOrReuseKeyFromPool());\n-        if (!SetAddressBookName(PubKeyToAddress(vchDefaultKey), \"\"))\n+        if (!SetAddressBookName(CBitcoinAddress(vchDefaultKey), \"\"))\n             return DB_LOAD_FAIL;\n     }\n \n@@ -1152,20 +1157,20 @@ int CWallet::LoadWallet(bool& fFirstRunRet)\n }\n \n \n-bool CWallet::SetAddressBookName(const string& strAddress, const string& strName)\n+bool CWallet::SetAddressBookName(const CBitcoinAddress& address, const string& strName)\n {\n-    mapAddressBook[strAddress] = strName;\n+    mapAddressBook[address] = strName;\n     if (!fFileBacked)\n         return false;\n-    return CWalletDB(strWalletFile).WriteName(strAddress, strName);\n+    return CWalletDB(strWalletFile).WriteName(address.ToString(), strName);\n }\n \n-bool CWallet::DelAddressBookName(const string& strAddress)\n+bool CWallet::DelAddressBookName(const CBitcoinAddress& address)\n {\n-    mapAddressBook.erase(strAddress);\n+    mapAddressBook.erase(address);\n     if (!fFileBacked)\n         return false;\n-    return CWalletDB(strWalletFile).EraseName(strAddress);\n+    return CWalletDB(strWalletFile).EraseName(address.ToString());\n }\n \n \n@@ -1264,7 +1269,7 @@ void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n         setKeyPool.erase(setKeyPool.begin());\n         if (!walletdb.ReadPool(nIndex, keypool))\n             throw runtime_error(\"ReserveKeyFromKeyPool() : read failed\");\n-        if (!HaveKey(keypool.vchPubKey))\n+        if (!HaveKey(Hash160(keypool.vchPubKey)))\n             throw runtime_error(\"ReserveKeyFromKeyPool() : unknown key in key pool\");\n         assert(!keypool.vchPubKey.empty());\n         printf(\"keypool reserve %\"PRI64d\"\\n\", nIndex);\n@@ -1321,7 +1326,13 @@ vector<unsigned char> CReserveKey::GetReservedKey()\n     {\n         CKeyPool keypool;\n         pwallet->ReserveKeyFromKeyPool(nIndex, keypool);\n-        vchPubKey = keypool.vchPubKey;\n+        if (nIndex != -1)\n+            vchPubKey = keypool.vchPubKey;\n+        else\n+        {\n+            printf(\"CReserveKey::GetReservedKey(): Warning: using default key instead of a new key, top up your keypool.\");\n+            vchPubKey = pwallet->vchDefaultKey;\n+        }\n     }\n     assert(!vchPubKey.empty());\n     return vchPubKey;"
      },
      {
        "sha": "69df8a41576d072db1a202384626c411b2d2e0d4",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04676e696ae606a16a66b60d0d7d6cc04f28f1b0/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=04676e696ae606a16a66b60d0d7d6cc04f28f1b0",
        "patch": "@@ -55,7 +55,7 @@ class CWallet : public CCryptoKeyStore\n     std::map<uint256, int> mapRequestCount;\n     mutable CCriticalSection cs_mapRequestCount;\n \n-    std::map<std::string, std::string> mapAddressBook;\n+    std::map<CBitcoinAddress, std::string> mapAddressBook;\n     mutable CCriticalSection cs_mapAddressBook;\n \n     std::vector<unsigned char> vchDefaultKey;\n@@ -83,7 +83,7 @@ class CWallet : public CCryptoKeyStore\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n     bool BroadcastTransaction(CWalletTx& wtxNew);\n     std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n-    std::string SendMoneyToBitcoinAddress(std::string strAddress, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+    std::string SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n \n     bool TopUpKeyPool();\n     void ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool);\n@@ -106,10 +106,10 @@ class CWallet : public CCryptoKeyStore\n     }\n     bool IsChange(const CTxOut& txout) const\n     {\n-        std::vector<unsigned char> vchPubKey;\n-        if (ExtractPubKey(txout.scriptPubKey, this, vchPubKey))\n+        CBitcoinAddress address;\n+        if (ExtractAddress(txout.scriptPubKey, this, address))\n             CRITICAL_BLOCK(cs_mapAddressBook)\n-                if (!mapAddressBook.count(PubKeyToAddress(vchPubKey)))\n+                if (!mapAddressBook.count(address))\n                     return true;\n         return false;\n     }\n@@ -173,10 +173,10 @@ class CWallet : public CCryptoKeyStore\n //    bool BackupWallet(const std::string& strDest);\n \n     // requires cs_mapAddressBook lock\n-    bool SetAddressBookName(const std::string& strAddress, const std::string& strName);\n+    bool SetAddressBookName(const CBitcoinAddress& address, const std::string& strName);\n \n     // requires cs_mapAddressBook lock\n-    bool DelAddressBookName(const std::string& strAddress);\n+    bool DelAddressBookName(const CBitcoinAddress& address);\n \n     void UpdatedTransaction(const uint256 &hashTx)\n     {\n@@ -466,8 +466,8 @@ class CWalletTx : public CMerkleTx\n         return nChangeCached;\n     }\n \n-    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<std::string /* address */, int64> >& listReceived,\n-                    std::list<std::pair<std::string /* address */, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n+    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<CBitcoinAddress, int64> >& listReceived,\n+                    std::list<std::pair<CBitcoinAddress, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n \n     void GetAccountAmounts(const std::string& strAccount, int64& nGenerated, int64& nReceived, \n                            int64& nSent, int64& nFee) const;"
      }
    ]
  }
]