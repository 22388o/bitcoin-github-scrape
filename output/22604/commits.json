[
  {
    "sha": "d930c7f5b091687eb4208a5ffe8a2abe311d8054",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTMwYzdmNWIwOTE2ODdlYjQyMDhhNWZmZThhMmFiZTMxMWQ4MDU0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-31T19:56:59Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-08-04T17:03:51Z"
      },
      "message": "p2p, rpc, test: address rate-limiting follow-ups",
      "tree": {
        "sha": "e0460df9eb8367667dd86406f2193925caef42a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0460df9eb8367667dd86406f2193925caef42a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d930c7f5b091687eb4208a5ffe8a2abe311d8054",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmEKyH0ACgkQT1chs9Dj\nkh1PcQ//VYxnc33fOTciw6PgsZRnGPdltaZwIEBx+lCRngBqMuRHl8Bh5s8b2nRH\nCkn0MUt2yRkwGO7ScZtPTXk5LRyc9UaWf40fSdl6kK3skqdPlzdSq9Zm35AGbsv3\ndpt4T6HvZv8GlPA/RRD1hOm0Gkq/CLFEzdSz2jWbQWjDldh7V9s1HpKmlxgyy/dI\n4BWMSCAFg00+z2l1shLllXsIW1ke92Y35KeauSNsi0Uw4m91d+XK3wdNOUd7eToy\nwZMJNpZyZnU4dBOPQdjf8Ygw3JwzWd3z3UezS3A0LBdFnsY6n+dgmu5b1DVik03m\nmINU1iPrdpNUOr2g6yWgn4boNHhEDi1MpNkjTECAA37lJPYZeqfHMMn9ad3JZFEt\nzaY9IIQokANLXxCxba30mZRTKS+nl4+0aTebCFSs92MG/tQzSjPyzuc/t3a0JmC/\ndp8Y8N8zDjDeuNxLU64B6F4FLuAuWoiEnsk18fzNPAU7tU1AoXIw9TGwiVHdqQp4\n843qR+N8ilSZgQ62zvLDIHFGntj789/+UvxdAP8fl7Ufl2o2TUIyMpGuTlZEr6NF\nuDVGHW1LSxmbBvzQwPZUYPQjfb7u5C0Rucugjs0cD6+FX7/2miQ1NY1NQ3eAhUEp\noo2Y7v/hYpLS6IBYIAOn/VjJO4GrfGdzLsULs7QTBGRGvx7RnMM=\n=k04b\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDoam/k+qGYiTx1O5AvTt91XULPIPEuoVaojokNvaCReCP/wECEgb+PLHASt\nOA8Wj0Dxxc4I8QRhCsh+8Ag7tG6HX5jBVwCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEH0JNy5A/djXNnS1jjAe\nPMQI8CBWz/HK9eOQAjvtpd+Mn2cEs3Ps68mGmKl572Hfz7OuegjxBGEKyH7wCOVJ\nSejIi/aWAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t//AQmDin9UuirqT7nTTQyY6NLQjxBGEKyH7wCM96LdMqZx69AIPf\n4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHkuY29t8BD4LNGt\n0DMRFQqP6T0K3SmkCPAgTiuUsJcl3F8F3dMqMSYeSztiYcnzagODRoWtNRLV+4gI\n8QRhCsh+8Agsl22K473JNACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e0460df9eb8367667dd86406f2193925caef42a5\nparent 2b06af17470667a9c9ee68cb241936839b46bc33\nauthor Jon Atack <jon@atack.com> 1627761419 +0200\ncommitter Jon Atack <jon@atack.com> 1628096631 +0200\n\np2p, rpc, test: address rate-limiting follow-ups\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d930c7f5b091687eb4208a5ffe8a2abe311d8054",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d930c7f5b091687eb4208a5ffe8a2abe311d8054",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d930c7f5b091687eb4208a5ffe8a2abe311d8054/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b06af17470667a9c9ee68cb241936839b46bc33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b06af17470667a9c9ee68cb241936839b46bc33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b06af17470667a9c9ee68cb241936839b46bc33"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 21,
      "deletions": 22
    },
    "files": [
      {
        "sha": "823ff9e92f927ae7d2666e2a9a02923e84fe4484",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d930c7f5b091687eb4208a5ffe8a2abe311d8054/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d930c7f5b091687eb4208a5ffe8a2abe311d8054/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d930c7f5b091687eb4208a5ffe8a2abe311d8054",
        "patch": "@@ -161,7 +161,7 @@ static constexpr size_t MAX_ADDR_TO_SEND{1000};\n static constexpr double MAX_ADDR_RATE_PER_SECOND{0.1};\n /** The soft limit of the address processing token bucket (the regular MAX_ADDR_RATE_PER_SECOND\n  *  based increments won't go above this, but the MAX_ADDR_TO_SEND increment following GETADDR\n- *  is exempt from this limit. */\n+ *  is exempt from this limit). */\n static constexpr size_t MAX_ADDR_PROCESSING_TOKEN_BUCKET{MAX_ADDR_TO_SEND};\n \n // Internal stuff\n@@ -263,14 +263,14 @@ struct Peer {\n     std::atomic_bool m_wants_addrv2{false};\n     /** Whether this peer has already sent us a getaddr message. */\n     bool m_getaddr_recvd{false};\n-    /** Number of addr messages that can be processed from this peer. Start at 1 to\n+    /** Number of addresses that can be processed from this peer. Start at 1 to\n      *  permit self-announcement. */\n     double m_addr_token_bucket{1.0};\n     /** When m_addr_token_bucket was last updated */\n     std::chrono::microseconds m_addr_token_timestamp{GetTime<std::chrono::microseconds>()};\n     /** Total number of addresses that were dropped due to rate limiting. */\n     std::atomic<uint64_t> m_addr_rate_limited{0};\n-    /** Total number of addresses that were processed (excludes rate limited ones). */\n+    /** Total number of addresses that were processed (excludes rate-limited ones). */\n     std::atomic<uint64_t> m_addr_processed{0};\n \n     /** Set of txids to reconsider once their parent transactions have been accepted **/\n@@ -2848,11 +2848,12 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 return;\n \n             // Apply rate limiting.\n-            if (rate_limited) {\n-                if (peer->m_addr_token_bucket < 1.0) {\n+            if (peer->m_addr_token_bucket < 1.0) {\n+                if (rate_limited) {\n                     ++num_rate_limit;\n                     continue;\n                 }\n+            } else {\n                 peer->m_addr_token_bucket -= 1.0;\n             }\n             // We only bother storing full nodes, though this may include\n@@ -2880,12 +2881,8 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n         peer->m_addr_processed += num_proc;\n         peer->m_addr_rate_limited += num_rate_limit;\n-        LogPrint(BCLog::NET, \"Received addr: %u addresses (%u processed, %u rate-limited) from peer=%d%s\\n\",\n-                 vAddr.size(),\n-                 num_proc,\n-                 num_rate_limit,\n-                 pfrom.GetId(),\n-                 fLogIPs ? \", peeraddr=\" + pfrom.addr.ToString() : \"\");\n+        LogPrint(BCLog::NET, \"Received addr: %u addresses (%u processed, %u rate-limited) from peer=%d\\n\",\n+                 vAddr.size(), num_proc, num_rate_limit, pfrom.GetId());\n \n         m_addrman.Add(vAddrOk, pfrom.addr, 2 * 60 * 60);\n         if (vAddr.size() < 1000) peer->m_getaddr_sent = false;"
      },
      {
        "sha": "4d066b8957715d71270513a46103500f9cf6b736",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d930c7f5b091687eb4208a5ffe8a2abe311d8054/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d930c7f5b091687eb4208a5ffe8a2abe311d8054/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d930c7f5b091687eb4208a5ffe8a2abe311d8054",
        "patch": "@@ -151,6 +151,8 @@ static RPCHelpMan getpeerinfo()\n                                 {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n                             }},\n                             {RPCResult::Type::BOOL, \"addr_relay_enabled\", \"Whether we participate in address relay with this peer\"},\n+                            {RPCResult::Type::NUM, \"addr_processed\", \"The total number of addresses processed, excluding those dropped due to rate limiting\"},\n+                            {RPCResult::Type::NUM, \"addr_rate_limited\", \"The total number of addresses dropped due to rate limiting\"},\n                             {RPCResult::Type::ARR, \"permissions\", \"Any special permissions that have been granted to this peer\",\n                             {\n                                 {RPCResult::Type::STR, \"permission_type\", Join(NET_PERMISSIONS_DOC, \",\\n\") + \".\\n\"},"
      },
      {
        "sha": "f2a682df8b38263ca3f84accbf152a6bef7eba14",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d930c7f5b091687eb4208a5ffe8a2abe311d8054/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d930c7f5b091687eb4208a5ffe8a2abe311d8054/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=d930c7f5b091687eb4208a5ffe8a2abe311d8054",
        "patch": "@@ -311,7 +311,7 @@ def blocksonly_mode_tests(self):\n \n         self.nodes[0].disconnect_p2ps()\n \n-    def send_addrs_and_test_rate_limiting(self, peer, no_relay, new_addrs, total_addrs):\n+    def send_addrs_and_test_rate_limiting(self, peer, no_relay, *, new_addrs, total_addrs):\n         \"\"\"Send an addr message and check that the number of addresses processed and rate-limited is as expected\"\"\"\n \n         peer.send_and_ping(self.setup_rand_addr_msg(new_addrs))\n@@ -329,45 +329,45 @@ def send_addrs_and_test_rate_limiting(self, peer, no_relay, new_addrs, total_add\n             assert_equal(addrs_rate_limited, max(0, total_addrs - peer.tokens))\n \n     def rate_limit_tests(self):\n-\n         self.mocktime = int(time.time())\n         self.restart_node(0, [])\n         self.nodes[0].setmocktime(self.mocktime)\n \n-        for contype, no_relay in [(\"outbound-full-relay\", False), (\"block-relay-only\", True), (\"inbound\", False)]:\n-            self.log.info(f'Test rate limiting of addr processing for {contype} peers')\n-            if contype == \"inbound\":\n+        for conn_type, no_relay in [(\"outbound-full-relay\", False), (\"block-relay-only\", True), (\"inbound\", False)]:\n+            self.log.info(f'Test rate limiting of addr processing for {conn_type} peers')\n+            if conn_type == \"inbound\":\n                 peer = self.nodes[0].add_p2p_connection(AddrReceiver())\n             else:\n-                peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=0, connection_type=contype)\n+                peer = self.nodes[0].add_outbound_p2p_connection(AddrReceiver(), p2p_idx=0, connection_type=conn_type)\n \n             # Send 600 addresses. For all but the block-relay-only peer this should result in addresses being processed.\n-            self.send_addrs_and_test_rate_limiting(peer, no_relay, 600, 600)\n+            self.send_addrs_and_test_rate_limiting(peer, no_relay, new_addrs=600, total_addrs=600)\n \n             # Send 600 more addresses. For the outbound-full-relay peer (which we send a GETADDR, and thus will\n             # process up to 1001 incoming addresses), this means more addresses will be processed.\n-            self.send_addrs_and_test_rate_limiting(peer, no_relay, 600, 1200)\n+            self.send_addrs_and_test_rate_limiting(peer, no_relay, new_addrs=600, total_addrs=1200)\n \n             # Send 10 more. As we reached the processing limit for all nodes, no more addresses should be procesesd.\n-            self.send_addrs_and_test_rate_limiting(peer, no_relay, 10, 1210)\n+            self.send_addrs_and_test_rate_limiting(peer, no_relay, new_addrs=10, total_addrs=1210)\n \n             # Advance the time by 100 seconds, permitting the processing of 10 more addresses.\n             # Send 200 and verify that 10 are processed.\n             self.mocktime += 100\n             self.nodes[0].setmocktime(self.mocktime)\n             peer.increment_tokens(10)\n \n-            self.send_addrs_and_test_rate_limiting(peer, no_relay, 200, 1410)\n+            self.send_addrs_and_test_rate_limiting(peer, no_relay, new_addrs=200, total_addrs=1410)\n \n             # Advance the time by 1000 seconds, permitting the processing of 100 more addresses.\n             # Send 200 and verify that 100 are processed.\n             self.mocktime += 1000\n             self.nodes[0].setmocktime(self.mocktime)\n             peer.increment_tokens(100)\n \n-            self.send_addrs_and_test_rate_limiting(peer, no_relay, 200, 1610)\n+            self.send_addrs_and_test_rate_limiting(peer, no_relay, new_addrs=200, total_addrs=1610)\n \n             self.nodes[0].disconnect_p2ps()\n \n+\n if __name__ == '__main__':\n     AddrTest().main()"
      }
    ]
  }
]