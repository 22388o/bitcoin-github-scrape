[
  {
    "sha": "b931ed8563eff9021ce3b1a05d8e6bc21117dc71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTMxZWQ4NTYzZWZmOTAyMWNlM2IxYTA1ZDhlNmJjMjExMTdkYzcx",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2010-12-16T20:48:04Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-03-13T21:11:49Z"
      },
      "message": "sendmany RPC command, to send to multiple recipients in one transaction.",
      "tree": {
        "sha": "7f9a4ce236cf5aafdd4c181ba04d09573b95a9f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f9a4ce236cf5aafdd4c181ba04d09573b95a9f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b931ed8563eff9021ce3b1a05d8e6bc21117dc71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b931ed8563eff9021ce3b1a05d8e6bc21117dc71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b931ed8563eff9021ce3b1a05d8e6bc21117dc71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b931ed8563eff9021ce3b1a05d8e6bc21117dc71/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f2987273a92c81a2e5c8b137010841e95687d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f2987273a92c81a2e5c8b137010841e95687d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f2987273a92c81a2e5c8b137010841e95687d0"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 106,
      "deletions": 16
    },
    "files": [
      {
        "sha": "50562b765fd397130604fed5aca6bd46c12547f1",
        "filename": "main.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 16,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b931ed8563eff9021ce3b1a05d8e6bc21117dc71/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b931ed8563eff9021ce3b1a05d8e6bc21117dc71/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/main.cpp?ref=b931ed8563eff9021ce3b1a05d8e6bc21117dc71",
        "patch": "@@ -678,7 +678,11 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n \n     // Safety limits\n     unsigned int nSize = ::GetSerializeSize(*this, SER_NETWORK);\n-    if (GetSigOpCount() > 2 || nSize < 100)\n+    // Checking ECDSA signatures is a CPU bottleneck, so to avoid denial-of-service\n+    // attacks disallow transactions with more than one SigOp per 34 bytes.\n+    // 34 bytes because a TxOut is:\n+    //   20-byte address + 8 byte bitcoin amount + 5 bytes of ops + 1 byte script length\n+    if (GetSigOpCount() > nSize / 34 || nSize < 100)\n         return error(\"AcceptToMemoryPool() : nonstandard transaction\");\n \n     // Rather not work on nonstandard transactions\n@@ -3846,8 +3850,18 @@ bool SelectCoins(int64 nTargetValue, set<CWalletTx*>& setCoinsRet)\n \n \n \n-bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n+bool CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n {\n+    int64 nValue = 0;\n+    foreach (const PAIRTYPE(CScript, int64)& s, vecSend)\n+    {\n+        if (nValue < 0)\n+            return false;\n+        nValue += s.second;\n+    }\n+    if (vecSend.empty() || nValue < 0)\n+        return false;\n+\n     CRITICAL_BLOCK(cs_main)\n     {\n         // txdb must be opened before the mapWallet lock\n@@ -3860,11 +3874,12 @@ bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CR\n                 wtxNew.vin.clear();\n                 wtxNew.vout.clear();\n                 wtxNew.fFromMe = true;\n-                if (nValue < 0)\n-                    return false;\n-                int64 nValueOut = nValue;\n+\n                 int64 nTotalValue = nValue + nFeeRet;\n                 double dPriority = 0;\n+                // vouts to the payees\n+                foreach (const PAIRTYPE(CScript, int64)& s, vecSend)\n+                    wtxNew.vout.push_back(CTxOut(s.second, s.first));\n \n                 // Choose coins to use\n                 set<CWalletTx*> setCoins;\n@@ -3878,11 +3893,6 @@ bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CR\n                     dPriority += (double)nCredit * pcoin->GetDepthInMainChain();\n                 }\n \n-                // Fill a vout to the payee\n-                bool fChangeFirst = GetRand(2);\n-                if (!fChangeFirst)\n-                    wtxNew.vout.push_back(CTxOut(nValueOut, scriptPubKey));\n-\n                 // Fill a vout back to self with any change\n                 int64 nChange = nValueIn - nTotalValue;\n                 if (nChange >= CENT)\n@@ -3900,19 +3910,18 @@ bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CR\n \n                     // Fill a vout to ourself, using same address type as the payment\n                     CScript scriptChange;\n-                    if (scriptPubKey.GetBitcoinAddressHash160() != 0)\n+                    if (vecSend[0].first.GetBitcoinAddressHash160() != 0)\n                         scriptChange.SetBitcoinAddress(vchPubKey);\n                     else\n                         scriptChange << vchPubKey << OP_CHECKSIG;\n-                    wtxNew.vout.push_back(CTxOut(nChange, scriptChange));\n+\n+                    // Insert change txn at random position:\n+                    vector<CTxOut>::iterator position = wtxNew.vout.begin()+GetRandInt(wtxNew.vout.size());\n+                    wtxNew.vout.insert(position, CTxOut(nChange, scriptChange));\n                 }\n                 else\n                     reservekey.ReturnKey();\n \n-                // Fill a vout to the payee\n-                if (fChangeFirst)\n-                    wtxNew.vout.push_back(CTxOut(nValueOut, scriptPubKey));\n-\n                 // Fill vin\n                 foreach(CWalletTx* pcoin, setCoins)\n                     for (int nOut = 0; nOut < pcoin->vout.size(); nOut++)\n@@ -3954,6 +3963,13 @@ bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CR\n     return true;\n }\n \n+bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n+{\n+    vector< pair<CScript, int64> > vecSend;\n+    vecSend.push_back(make_pair(scriptPubKey, nValue));\n+    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet);\n+}\n+\n // Call after CreateTransaction unless you want to abort\n bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n {"
      },
      {
        "sha": "e9d0c0031057dd118f8f6f6965ebea093bbdf330",
        "filename": "main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b931ed8563eff9021ce3b1a05d8e6bc21117dc71/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b931ed8563eff9021ce3b1a05d8e6bc21117dc71/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/main.h?ref=b931ed8563eff9021ce3b1a05d8e6bc21117dc71",
        "patch": "@@ -77,6 +77,7 @@ bool ProcessMessages(CNode* pfrom);\n bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n int64 GetBalance();\n+bool CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n bool BroadcastTransaction(CWalletTx& wtxNew);"
      },
      {
        "sha": "97710ff6b81e887d373d433a7b8473b6eac91c51",
        "filename": "rpc.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b931ed8563eff9021ce3b1a05d8e6bc21117dc71/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b931ed8563eff9021ce3b1a05d8e6bc21117dc71/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/rpc.cpp?ref=b931ed8563eff9021ce3b1a05d8e6bc21117dc71",
        "patch": "@@ -768,6 +768,69 @@ Value sendfrom(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n+Value sendmany(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 2 || params.size() > 4)\n+        throw runtime_error(\n+            \"sendmany <fromaccount> {address:amount,...} [minconf=1] [comment]\\n\"\n+            \"amounts are double-precision floating point numbers\");\n+\n+    string strAccount = AccountFromValue(params[0]);\n+    Object sendTo = params[1].get_obj();\n+    int nMinDepth = 1;\n+    if (params.size() > 2)\n+        nMinDepth = params[2].get_int();\n+\n+    CWalletTx wtx;\n+    wtx.strFromAccount = strAccount;\n+    if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n+        wtx.mapValue[\"comment\"] = params[3].get_str();\n+\n+    set<string> setAddress;\n+    vector<pair<CScript, int64> > vecSend;\n+\n+    int64 totalAmount = 0;\n+    foreach(const Pair& s, sendTo)\n+    {\n+        uint160 hash160;\n+        string strAddress = s.name_;\n+\n+        if (setAddress.count(strAddress))\n+            throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+strAddress);\n+        setAddress.insert(strAddress);\n+\n+        CScript scriptPubKey;\n+        if (!scriptPubKey.SetBitcoinAddress(strAddress))\n+            throw JSONRPCError(-5, string(\"Invalid bitcoin address:\")+strAddress);\n+        int64 nAmount = AmountFromValue(s.value_); \n+        totalAmount += nAmount;\n+\n+        vecSend.push_back(make_pair(scriptPubKey, nAmount));\n+    }\n+\n+    CRITICAL_BLOCK(cs_mapWallet)\n+    {\n+        // Check funds\n+        int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+        if (totalAmount > nBalance)\n+            throw JSONRPCError(-6, \"Account has insufficient funds\");\n+\n+        // Send\n+        CReserveKey keyChange;\n+        int64 nFeeRequired = 0;\n+        bool fCreated = CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n+        if (!fCreated)\n+        {\n+            if (totalAmount + nFeeRequired > GetBalance())\n+                throw JSONRPCError(-6, \"Insufficient funds\");\n+            throw JSONRPCError(-4, \"Transaction creation failed\");\n+        }\n+        if (!CommitTransaction(wtx, keyChange))\n+            throw JSONRPCError(-4, \"Transaction commit failed\");\n+    }\n+\n+    return wtx.GetHash().GetHex();\n+}\n \n \n struct tallyitem\n@@ -1344,6 +1407,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"getbalance\",            &getbalance),\n     make_pair(\"move\",                  &movecmd),\n     make_pair(\"sendfrom\",              &sendfrom),\n+    make_pair(\"sendmany\",              &sendmany),\n     make_pair(\"gettransaction\",        &gettransaction),\n     make_pair(\"listtransactions\",      &listtransactions),\n     make_pair(\"getwork\",               &getwork),\n@@ -1995,6 +2059,15 @@ int CommandLineRPC(int argc, char *argv[])\n         if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<boost::int64_t>(params[3]);\n         if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n         if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+        if (strMethod == \"sendmany\"               && n > 1)\n+        {\n+            string s = params[1].get_str();\n+            Value v;\n+            if (!read_string(s, v) || v.type() != obj_type)\n+                throw runtime_error(\"type mismatch\");\n+            params[1] = v.get_obj();\n+        }\n+        if (strMethod == \"sendmany\"                && n > 2) ConvertTo<boost::int64_t>(params[2]);\n \n         // Execute\n         Object reply = CallRPC(strMethod, params);"
      }
    ]
  }
]