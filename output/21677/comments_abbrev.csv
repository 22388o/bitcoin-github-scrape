laanwj,2021-04-14 10:03:25,"Concept ACK but this seems a bit… arbitrary. If you want to be 100% certain to not step on an existing one, could you open a (real) file descriptor, connected to something like a `pipe()` or `/dev/null` etc, and use that? Or do you use the fact that it needs to be a non-allocated file descriptor somewhere?",https://github.com/bitcoin/bitcoin/pull/21677#issuecomment-819397974,819397974,
DrahtBot,2021-04-14 11:28:26,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21630 (fuzz: split FuzzedSock interface and implementation by vasild)\n\nIf you consider this pull request important, ple",https://github.com/bitcoin/bitcoin/pull/21677#issuecomment-819446295,819446295,
vasild,2021-04-14 12:55:37,"> ... could you open a (real) file descriptor, connected to ...\n\nRight! It does not need to be connected to anything. Just reuse this:\n\nhttps://github.com/bitcoin/bitcoin/blob/03ecceedf6f15d2062e95b4533c5cea092c4c696/src/test/sock_tests.cpp#L30-L35\n\nplus a `close()` in the `FuzzedSocket` destructor.",https://github.com/bitcoin/bitcoin/pull/21677#issuecomment-819495706,819495706,
practicalswift,2021-04-14 22:20:50,"> Concept ACK but this seems a bit… arbitrary. If you want to be 100% certain to not step on an existing one, could you open a (real) file descriptor, connected to something like a `pipe()` or `/dev/null` etc, and use that? Or do you use the fact that it needs to be a non-allocated file descriptor somewhere?\n\nThe nice thing about going with `INVALID_SOCKET - 1` is that it doesn't involve slowd",https://github.com/bitcoin/bitcoin/pull/21677#issuecomment-819885553,819885553,
vasild,2021-04-15 06:08:16,"The chosen constant `INVALID_SOCKET - 1` is bigger than `FD_SETSIZE`, so those dummy sockets are not selectable:\n\nhttps://github.com/bitcoin/bitcoin/blob/2cd834e6c09dbbb676ecac4a36d8f0f56b4fe4b2/src/compat.h#L100-L106\n\nI think that's ok. I am working on a change to convert `IsSelectableSocket(bare SOCKET or sock.Get())` to `sock.IsSelectable()` so that the mocked sockets could override tha",https://github.com/bitcoin/bitcoin/pull/21677#issuecomment-820142172,820142172,
vasild,2021-04-15 15:18:38,https://github.com/bitcoin/bitcoin/pull/21700 reduces the usage of `Sock::Get()` to tests and `CreateSockTCP()` which is not to be mocked. It also changes `IsSelectableSocket()` to be a method of `Sock()` so that `FuzzedSock` can override it nicely.,https://github.com/bitcoin/bitcoin/pull/21677#issuecomment-820512529,820512529,
vasild,2021-04-14 12:52:14,"Maybe this should receive similar treatment:\n\nhttps://github.com/bitcoin/bitcoin/blob/03ecceedf6f15d2062e95b4533c5cea092c4c696/src/test/util/net.h#L78-L83",https://github.com/bitcoin/bitcoin/pull/21677#discussion_r613218721,613218721,src/test/fuzz/util.h
practicalswift,2021-04-14 22:24:02,Done!,https://github.com/bitcoin/bitcoin/pull/21677#discussion_r613625113,613625113,src/test/fuzz/util.h
