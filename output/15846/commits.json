[
  {
    "sha": "c634b1e2076d8e15a8284638475e26c691d4e100",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjM0YjFlMjA3NmQ4ZTE1YTgyODQ2Mzg0NzVlMjZjNjkxZDRlMTAw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-04-18T19:46:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-04-18T19:46:07Z"
      },
      "message": "[POLICY] Make sending to future native witness outputs standard",
      "tree": {
        "sha": "340cadff1daf07401ba8376df0a81c4110f605ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/340cadff1daf07401ba8376df0a81c4110f605ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c634b1e2076d8e15a8284638475e26c691d4e100",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c634b1e2076d8e15a8284638475e26c691d4e100",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c634b1e2076d8e15a8284638475e26c691d4e100",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c634b1e2076d8e15a8284638475e26c691d4e100/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d4f70cabd6d92aadd2fe8fe280366c391edb487",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d4f70cabd6d92aadd2fe8fe280366c391edb487",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d4f70cabd6d92aadd2fe8fe280366c391edb487"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "63a3d062674ff7b2013ece2bf1d94a5fcb0178fb",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c634b1e2076d8e15a8284638475e26c691d4e100/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c634b1e2076d8e15a8284638475e26c691d4e100/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=c634b1e2076d8e15a8284638475e26c691d4e100",
        "patch": "@@ -59,7 +59,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n     std::vector<std::vector<unsigned char> > vSolutions;\n     whichType = Solver(scriptPubKey, vSolutions);\n \n-    if (whichType == TX_NONSTANDARD || whichType == TX_WITNESS_UNKNOWN) {\n+    if (whichType == TX_NONSTANDARD) {\n         return false;\n     } else if (whichType == TX_MULTISIG) {\n         unsigned char m = vSolutions.front()[0];"
      },
      {
        "sha": "e5c6b92285733bcda9c59bf9d419a7b8d3f52ed2",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c634b1e2076d8e15a8284638475e26c691d4e100/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c634b1e2076d8e15a8284638475e26c691d4e100/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=c634b1e2076d8e15a8284638475e26c691d4e100",
        "patch": "@@ -1357,7 +1357,8 @@ def test_tx_relay_after_segwit_activation(self):\n     def test_segwit_versions(self):\n         \"\"\"Test validity of future segwit version transactions.\n \n-        Future segwit version transactions are non-standard, but valid in blocks.\n+        Future segwit versions are non-standard to spend, but valid in blocks.\n+        Sending to future segwit versions is always allowed.\n         Can run this before and after segwit activation.\"\"\"\n \n         NUM_SEGWIT_VERSIONS = 17  # will test OP_0, OP1, ..., OP_16\n@@ -1397,18 +1398,17 @@ def test_segwit_versions(self):\n         assert len(self.nodes[0].getrawmempool()) == 0\n \n         # Finally, verify that version 0 -> version 1 transactions\n-        # are non-standard\n+        # are standard\n         script_pubkey = CScript([CScriptOp(OP_1), witness_hash])\n         tx2 = CTransaction()\n         tx2.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n         tx2.vout = [CTxOut(tx.vout[0].nValue - 1000, script_pubkey)]\n         tx2.wit.vtxinwit.append(CTxInWitness())\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         tx2.rehash()\n-        # Gets accepted to test_node, because standardness of outputs isn't\n-        # checked with fRequireStandard\n+        # Gets accepted to both policy-enforcing nodes and others.\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx2, with_witness=True, accepted=True)\n-        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=True)\n         temp_utxo.pop()  # last entry in temp_utxo was the output we just spent\n         temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n "
      }
    ]
  }
]