[
  {
    "sha": "2b4ea520b717b3ca894adbac17796786667764d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjRlYTUyMGI3MTdiM2NhODk0YWRiYWMxNzc5Njc4NjY2Nzc2NGQz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-16T19:46:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-23T14:56:31Z"
      },
      "message": "[tests] fix timeout issues from TestNode\n\nFixes a couple of bugs from the introduction of TestNode:\n\n- test scripts were no longer able to specify a custom timeout for\nstarting a node. Therefore tests with nodes that take a long time to\nstart up (eg pruning.py) would fail.\n- the test for whether a node has failed on start up was broken\nby changing 'assert x is None' to 'assert not x'. Since\nsubprocess.poll() can return None (indicating the node is still running)\nor 0 (indicating the node exited with return code 0), this was a\nregression.",
      "tree": {
        "sha": "e879a1ca697e137363ac4350345e778588a38183",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e879a1ca697e137363ac4350345e778588a38183"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b4ea520b717b3ca894adbac17796786667764d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b4ea520b717b3ca894adbac17796786667764d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b4ea520b717b3ca894adbac17796786667764d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b4ea520b717b3ca894adbac17796786667764d3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31b2612bbf199fcbbb242fc1cfa2ad6221b0dcc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31b2612bbf199fcbbb242fc1cfa2ad6221b0dcc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31b2612bbf199fcbbb242fc1cfa2ad6221b0dcc7"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a7fcc411c345be7cff5df679af019f790611bbe1",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b4ea520b717b3ca894adbac17796786667764d3/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b4ea520b717b3ca894adbac17796786667764d3/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=2b4ea520b717b3ca894adbac17796786667764d3",
        "patch": "@@ -64,7 +64,8 @@ def __init__(self):\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n     def setup_network(self):\n-        self.setup_nodes()\n+        # Need a bit of extra time for the nodes to start up for this test\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n         # Leave them unconnected, we'll use submitblock directly in this test\n \n     def restart_node(self, node_index, expected_tip):\n@@ -74,10 +75,10 @@ def restart_node(self, node_index, expected_tip):\n         after 60 seconds. Returns the utxo hash of the given node.\"\"\"\n \n         time_start = time.time()\n-        while time.time() - time_start < 60:\n+        while time.time() - time_start < 120:\n             try:\n                 # Any of these RPC calls could throw due to node crash\n-                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index])\n+                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index], timewait=90)\n                 self.nodes[node_index].waitforblock(expected_tip)\n                 utxo_hash = self.nodes[node_index].gettxoutsetinfo()['hash_serialized_2']\n                 return utxo_hash"
      },
      {
        "sha": "a803df5b4986019cf5f4a6f535f7585134fdc397",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b4ea520b717b3ca894adbac17796786667764d3/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b4ea520b717b3ca894adbac17796786667764d3/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=2b4ea520b717b3ca894adbac17796786667764d3",
        "patch": "@@ -34,7 +34,11 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n         self.index = i\n         self.datadir = os.path.join(dirname, \"node\" + str(i))\n         self.rpchost = rpchost\n-        self.rpc_timeout = timewait\n+        if timewait:\n+            self.rpc_timeout = timewait\n+        else:\n+            # Wait for up to 60 seconds for the RPC server to respond\n+            self.rpc_timeout = 60\n         if binary is None:\n             self.binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n         else:\n@@ -65,10 +69,10 @@ def start(self):\n \n     def wait_for_rpc_connection(self):\n         \"\"\"Sets up an RPC connection to the bitcoind process. Returns False if unable to connect.\"\"\"\n-        timeout_s = 60 # Wait for up to 60 seconds for the RPC server to respond\n-        poll_per_s = 4 # Poll at a rate of four times per second\n-        for _ in range(timeout_s*poll_per_s):\n-            assert not self.process.poll(), \"bitcoind exited with status %i during initialization\" % self.process.returncode\n+        # Poll at a rate of four times per second\n+        poll_per_s = 4\n+        for _ in range(poll_per_s * self.rpc_timeout):\n+            assert self.process.poll() is None, \"bitcoind exited with status %i during initialization\" % self.process.returncode\n             try:\n                 self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, coveragedir=self.coverage_dir)\n                 self.rpc.getblockcount()"
      }
    ]
  }
]