DrahtBot,2021-03-24 21:36:03,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22937](https://github.com/bitcoin/bitcoin/pull/22937) (refactor: Forbid calling unsafe fs::path(std::string) constructor",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-806201724,806201724,
ryanofsky,2021-03-29 01:41:55,"re: https://github.com/bitcoin/bitcoin/pull/21526#issue-600020266\n\n> * Don't run `UpdateTip` for background validation chainstates.\n\nDoes this prevent bugs in the future when there can be a background validation chainstate? It would help to say what would happen without this change. It could also be helpful to say more about the motivation for this set of changes, and maybe summarize the c",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-809009595,809009595,
jamesob,2021-03-30 15:22:47,@ryanofsky thanks for the thorough look! I agree that I should take a look at writing unittests for these changes and do so if practical. Also appreciate your questions on the logic - I'll get together some responses for those and either adjust the code (especially since `RewindBlockIndex()` is probably going away in #21009) or add some motivating documentation. ,https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-810351331,810351331,
jamesob,2021-04-08 14:58:07,"Okay, after taking @ryanofsky's advice, I sat down to write some unittests for the chainstate-dependent UpdateTip() behavior. It turns out that in the process, trying to get those tests to work uncovered a number of changes that needed to be made to other test-related stuff, including slightly modifying `CheckBlockIndex()` to account for the specific nature of the background validation chainstate.",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-815893602,815893602,
jamesob,2021-04-23 18:38:14,"Thanks for the great feedback, @ryanofsky!",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-825847464,825847464,
DrahtBot,2021-05-03 09:32:53,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @sipa has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-831142104,831142104,
ryanofsky,2021-05-24 21:41:24,"Would be good to see this PR move ahead. Has 2 ACKs. There are a few simple code changes, and most of the PR is adding tests. People interested in assumeutxo should take a look.",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-847354627,847354627,
benthecarman,2021-05-27 08:05:59,tACK eb9623d690e6f390a5f6a8b30763374b72aee282,https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-849428519,849428519,
jamesob,2021-06-10 13:13:15,"Rebased to fix small conflict. \n[`au.multi-chainstates.pt1.8`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.8) -> [`au.multi-chainstates.pt1.9`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.9)\n\n<details><summary>Show range-diff</summary>\n\n```sh\n$ git range-diff master au.multi-chainstates.pt1.8 au.multi-chainstates.pt1.9\n\n1:  23c2d26d4 ! 1:  ",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-858611266,858611266,
jamesob,2021-06-15 13:28:26,"[`au.multi-chainstates.pt1.9`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.9) -> [`au.multi-chainstates.pt1.10`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.10)\n\nI've rebased on top of master (made necessary after the merge of #21866 :tada:). This branch now includes an additional commit (https://github.com/bitcoin/bitcoin/pull/21526/commits/acb5215743",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-861498058,861498058,
jamesob,2021-06-17 21:34:51,"\n[`au.multi-chainstates.pt1.11`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.11) -> [`au.multi-chainstates.pt1.12`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.12)\n\nThe functional test I recently added in the parent branch (https://github.com/bitcoin/bitcoin/pull/15606/commits/aa65b21d79d9cc0d79925879bc62e1c240a1cf59) has uncovered some cases I hadn'",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-863579751,863579751,
jamesob,2021-06-18 19:05:03,"[`au.multi-chainstates.pt1.12`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.12) -> [`au.multi-chainstates.pt1.13`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.13)\n\nArgh sorry for the churn; botched rebase pushed some old code that caused segfault in unittests. Fixed.\n\n<details><summary>Show range-diff</summary>\n\n```sh\n$ git range-diff master ",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-864224100,864224100,
MarcoFalke,2021-06-21 09:28:59,"```\nThis diff appears to have added new lines with tab characters instead of spaces.\nThe following changes were suspected:\n\ndiff --git a/src/validation.cpp b/src/validation.cpp\n@@ -5083,0 +5136,22 @@ void ChainstateManager::MaybeRebalanceCaches()\n+	return std::nullopt;\n+	return std::nullopt;\n^---- failure generated from test/lint/lint-whitespace.sh",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-864883356,864883356,
jamesob,2021-06-21 13:43:02,"[`au.multi-chainstates.pt1.13`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.13) -> [`au.multi-chainstates.pt1.14`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.14)\n\nPushed whitespace fix; sorry for the holdup.\n\n<details><summary>Show range-diff</summary>\n\n```sh\n$ git range-diff master au.multi-chainstates.pt1.13 au.multi-chainstates.pt1.14\n",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-865043913,865043913,
ariard,2021-07-01 22:56:40,"Code Review ACK b6dffad\n\nStill feel free to take my minor comments if you retouch the branch :)",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-872597591,872597591,
jamesob,2021-07-17 14:37:21,"[`au.multi-chainstates.pt1.14`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.14) -> [`au.multi-chainstates.pt1.16`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.16)\n\nAfter looking into @ryanofsky's feedback on #15606, I found that there were some parts of the ChainstateManager interface that were ultimately unused (and probably confusing), so I've remove",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-881908599,881908599,
JeremyRubin,2021-07-17 19:47:48,did some lite code review; generally looks OK but I'm not super familiar with this part of the code so an ACK from me wouldn't count for much.,https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-881950913,881950913,
jamesob,2021-07-24 13:37:15,"[`au.multi-chainstates.pt1.16`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.16) -> [`au.multi-chainstates.pt1.18`](https://github.com/jamesob/bitcoin/tree/au.multi-chainstates.pt1.18)\n\nAfter spending some time slightly reworking #15606 to incorporate good design feedback from @ryanofsky, I've pushed some fairly substantive changes here. Sorry, of course, for these changes ",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-886054862,886054862,
jamesob,2021-08-05 19:25:01,Anyone have any advice on what's needed to move this forward? I think it's in pretty good shape.,https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-893724818,893724818,
ryanofsky,2021-08-05 21:25:14,"> Anyone have any advice on what's needed to move this forward? I think it's in pretty good shape.\n\nMy bad! I reviewed most of the new changes here while I was going through the larger PR #15606, but I forgot to come back and re-ack. \n\nAside from me, some previous reviewers might be interested to continue review or re-ack:\n\n- @sjors https://github.com/bitcoin/bitcoin/pull/21526#pullreq",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-893819553,893819553,
benthecarman,2021-08-14 19:24:10,reACK a30a5d46b3574a49f9e3611caeb730bf12d748fd,https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-898948602,898948602,
naumenkogs,2021-09-03 12:29:34,"Light code review ACK, I will do good review once pending suggestions are resolved.",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-912501201,912501201,
jamesob,2021-09-07 13:30:59,"Hi, sorry for the slowness here and thanks to everyone for the review. I got pretty sick in the last two weeks and was unable to work. As I recover in the coming days I'll address the new feedback.",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-914308923,914308923,
naumenkogs,2021-09-09 10:04:45,"utACK a07e850482ab22f31d070af6d080a0db66564c18\n\nAmong the remaining comments, I'd ask you to reconsider [this one](https://github.com/bitcoin/bitcoin/pull/21526#discussion_r683829467) if you decide to retouch. Not a blocker at all.",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-915946051,915946051,
jamesob,2021-09-09 17:18:24,"Thanks for the looks, everyone. I've pushed a number of small changes addressing the feedback given.",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-916288041,916288041,
achow101,2021-09-13 20:14:39,"~~ACK a07e850482ab22f31d070af6d080a0db66564c18~~\n\nTried to build and I got this error:\n\n    /usr/bin/ld: test/test_bitcoin-validation_chainstatemanager_tests.o:././test/util/chainstate.h:19: multiple definition of `NoMalleation'; test/test_bitcoin-validation_chainstate_tests.o:././test/util/chainstate.h:19: first defined here",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-918540412,918540412,
jamesob,2021-09-13 21:19:34,"@achow101 thanks for reviewing and testing. What's your platform information? I just tried to reproduce your error locally and was unable, and CI is able to build. Maybe try `make distclean; ./configure ...`, then remake?",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-918586144,918586144,
achow101,2021-09-13 22:28:16,"@jamesob\n\n> What's your platform information? I just tried to reproduce your error locally and was unable, and CI is able to build. Maybe try `make distclean; ./configure ...`, then remake?\n\nI've tried all sorts of clean and make to no avail. My system is Arch and I'm using GCC 11.1. Here's the [config.log](https://github.com/bitcoin/bitcoin/files/7157670/config.log) if that's useful.\n",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-918630052,918630052,
jamesob,2021-09-15 11:21:33,"@achow101 did you try clearing ccache? I've found lately that sometimes it's overzealous in caching and can cause problems. If you haven't, give `ccache -C` a try before building.",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-919931718,919931718,
MarcoFalke,2021-09-15 11:44:42,"Can't link either on a fresh Ubuntu Impish:\n\n```\nmake V=1\nMaking all in src\nmake[1]: Entering directory '/bitcoin-core/src'\nmake[2]: Entering directory '/bitcoin-core/src'\nmake[3]: Entering directory '/bitcoin-core'\nmake[3]: Leaving directory '/bitcoin-core'\n/bin/bash ../libtool  --tag=CXX --preserve-dup-deps  --mode=link /usr/bin/ccache g++ -std=c++17 -fdebug-prefix-map=/bitcoin",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-919945778,919945778,
achow101,2021-09-15 18:19:22,"> @achow101 did you try clearing ccache? I've found lately that sometimes it's overzealous in caching and can cause problems. If you haven't, give `ccache -C` a try before building.\n\nStill fails with the same error.",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-920266877,920266877,
achow101,2021-09-15 22:44:03,ACK 673a5bd3377929a0a6a62eda8b560e47bc2cca0c,https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-920439219,920439219,
jamesob,2021-09-16 16:46:57,"Okay, thanks everyone for bearing with the build issues. I think I've addressed all feedback here; in the latest change I've\n- made the `auto` -> `const auto` change (thanks again @ryanofsky), and\n- moved the `g_best_block` documentation change into its own commit (thanks @JeremyRubin).\n\nI think this is in good shape pending some reACKs.\n",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-921064563,921064563,
jonatack,2021-09-16 17:02:46,"@jamesob in case it's accidental, just noticed one commit (b217020df78b) has a different email for you than the others.\n\nCode-review re-ACK 673a5bd3377929a0a6a62eda8b560e47bc2cca0c reviewed diff, rebased to master/debug build/ran unit+functional tests",https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-921075442,921075442,
naumenkogs,2021-09-17 08:48:36,ACK 673a5bd3377929a0a6a62eda8b560e47bc2cca0c,https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-921622921,921622921,
fjahr,2021-09-19 20:10:00,Code review ACK 673a5bd3377929a0a6a62eda8b560e47bc2cca0c,https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-922529364,922529364,
ariard,2021-09-19 23:56:52,utACK 673a5bd3,https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-922558754,922558754,
ryanofsky,2021-09-22 14:11:11,Anything holding this up for merge at this point?,https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-924970076,924970076,
ryanofsky,2021-04-16 18:43:24,"In commit ""validation: fix CheckBlockIndex for multiple chainstates"" (d3cec2a5b3febd091b8002e39f8b7431b7e99c4a)\n\nThis is ok, but it seems to avoid other checks below besides the `setBlockIndexCandidates` checks. And if more checks are added below in the future they could be bypassed unnecessarily. I wonder if it might be more straightforward and futureproof just to add `&& is_active_chain` or ",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r615054872,615054872,src/validation.cpp
ryanofsky,2021-04-16 18:59:01,"In commit ""test: refactor: separate CreateBlock in TestChain100Setup"" (6e5871c0c7b7d7b27b56df4f2c0705921025a6d5)\n\nIMO, it is reasonable for `CreateAndProcessBlock` to have a default-active chainstate pointer for backwards compatibility, but it might be better for this new `CreateBlock` method to take an explicit `CChainState&` reference for more clarity in test code and to prevent mistakes for",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r615063212,615063212,src/test/util/setup_common.h
ryanofsky,2021-04-16 19:21:47,"In commit ""test: validation: add unittest for UpdateTip behavior"" (3f1346a0178afef20db3599cc545dbc54200d635)\n\nSince this test is designed to check `UpdateTip` background behavior, but the test doesn't call `UpdateTip` directly, it may be good to add a comment saying this line is what calls `UpdateTip`.\n\nAlso could maybe a simple check could be added here to verify the new background tip ha",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r615074725,615074725,src/test/validation_chainstate_tests.cpp
jamesob,2021-04-23 18:36:51,"Good call, fixed.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r619424621,619424621,src/validation.cpp
jamesob,2021-04-23 18:36:58,Fixed.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r619424718,619424718,src/test/util/setup_common.h
jamesob,2021-04-23 18:37:48,"Done. \n\n> Also curious if there's an existing test (or a planned one) to cover the background chain catching up to the activated snapshot.\n\nYes; I'll look at writing a test for this sometime today in addition to some chainstate-concurrency torture tests.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r619425233,619425233,src/test/validation_chainstate_tests.cpp
ryanofsky,2021-05-04 00:16:15,"In commit ""test: refactor: separate CreateBlock in TestChain100Setup"" (6d5d09634ac354c16c298c83d7b699b2147a98b3)\n\nWould be nice to make the last argument a `CChainState&` reference instead of a pointer since it isn't allowed to be null (and it's a new method so there's no backward compatility concern)",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r625442975,625442975,src/test/util/setup_common.cpp
Sjors,2021-05-05 17:36:33,"23c2d26d424e5a8b523f7210653958eff10db0f2: given the above `return`, you don't have to drop this assert",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r626767940,626767940,src/validation.cpp
Sjors,2021-05-05 17:46:46,"```\nvalidation.cpp:2321:38: warning: lambda capture 'func_name' is not required to be captured for this use [-Wunused-lambda-capture]\n    auto log_progress = [pindexNew, &func_name, &coins_view, &chainParams](\n                                  ~~~^~~~~~~~~\n1 warning generated.\n```",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r626774638,626774638,src/validation.cpp
Sjors,2021-05-05 18:11:11,23b5ebd02e584c7bb982ccbc28bbabd927b9c57e  why would `CreateNewBlock` ever be called on the background chainstate?,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r626791045,626791045,src/miner.cpp
Sjors,2021-05-05 18:14:08,23b5ebd02e584c7bb982ccbc28bbabd927b9c57e: I thought the background chain didn't have a mempool? Or it had a dummy mempool. I guess it's fine to remove this assert though.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r626792949,626792949,src/txmempool.cpp
jamesob,2021-05-06 08:14:00,Fails CI when addressing this warning.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r627181867,627181867,src/validation.cpp
jamesob,2021-05-06 08:14:26,Gets called during unittests.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r627182208,627182208,src/miner.cpp
jamesob,2021-05-06 08:14:47,Same as above; called during unittests.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r627182479,627182479,src/txmempool.cpp
Sjors,2021-05-06 09:18:27,But why?,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r627241697,627241697,src/miner.cpp
jamesob,2021-05-12 17:01:08,"Because (unlike in actual snapshot usage) we don't have pre-prepared snapshots to use from within unittests, we have to use the same chainstate objects that we ultimately test on to generate snapshots for use during the test. As a result, the background validation chainstate is already at the snapshot base block, so in order to test appending to the bg chainstate, we have to call `CreateNewBlock` ",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r631230573,631230573,src/miner.cpp
ryanofsky,2021-06-21 13:55:55,"In commit ""validation: fix CheckBlockIndex for multiple chainstates"" (0dd5757fd7c5b1d151abe45843711780a4b3885b)\n\nCommit message could be updated. It's still only referring to setBlockIndexCandidates checks, but commit was later extended to skip more checks https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-863579751",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r655399169,655399169,src/validation.cpp
ryanofsky,2021-06-21 15:28:13,"In commit ""validation: fix CheckBlockIndex for multiple chainstates"" (0dd5757fd7c5b1d151abe45843711780a4b3885b)\n\nNot very important since this function is only called one place, but it seems like it would be nicer to just return `CBlockIndex*` instead of `std::optional<CBlockIndex*>`. This way callers don't need to double-dereference, and can just check whether this is null or not null, instea",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r655484970,655484970,src/validation.h
ryanofsky,2021-06-21 15:35:01,"In commit ""test: refactor: separate CreateBlock in TestChain100Setup"" (e061837697ed8ebf8d5443478829b48f3fe0e8db)\n\n> Would be nice to make the last argument a `CChainState&` reference instead of a pointer since it isn't allowed to be null (and it's a new method so there's no backward compatility concern)\n\n(This is still applicable, in case the PR gets another update)",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r655490762,655490762,src/test/util/setup_common.cpp
ariard,2021-06-24 17:53:25,"IIUC this log warns node operator about new consensus rules activated through the BIP9 logic. In case of the assumed-utxo-set being dated after either the locked-in or activation, your foreground validation is going to be blinded and your background validation is going to skim over this warning ? Thus you might have a client not fully-validating the chain, or at least with a set of consensus rules",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r658163708,658163708,src/validation.cpp
ariard,2021-06-24 18:06:45,"Once the background validation has catched up with the snapshot_height, is `GetSnapshotHeight` going to return `std::nullopt` and those checks play out ?",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r658173137,658173137,src/validation.cpp
ariard,2021-06-24 18:09:41,"nit: ""// Don't start being rigorous about missing block data if we've never pruned and we're within a utxo snapshot"" ?",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r658175063,658175063,src/validation.cpp
ariard,2021-06-24 18:11:03,nit: s/height/block metadata/g ?,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r658175967,658175967,src/validation.h
ryanofsky,2021-06-24 18:45:41,"re: https://github.com/bitcoin/bitcoin/pull/21526#discussion_r658163708\n\n> IIUC this log warns node operator about new consensus rules activated through the BIP9 logic. In case of the assumed-utxo-set being dated after either the locked-in or activation, your foreground validation is going to be blinded and your background validation is going to skim over this warning ?\n\nI don't think this",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r658198383,658198383,src/validation.cpp
ariard,2021-07-01 22:31:59,"I agree it's not a change, my point is more about how assume-utxo is breaking the notion of a sequential IBD and introducing out-of-order validation which might invite us to reconsider the design purpose of such warning.\n\n`IsInitialBlockDownload`'s last check relies on our chain tip being older than DEFAULT_MAX_TIP_AGE (24h) and i think that's a reasonable assumption than hardcoded assumed-utx",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r662628271,662628271,src/validation.cpp
jamesob,2021-07-16 19:30:54,"Fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671481714,671481714,src/validation.h
jamesob,2021-07-16 19:49:25,"I'll make a note to ensure that `CompleteSnapshotValidation()` (in #15606) nulls out `m_snapshot_blockhash` so that what you're saying here is actually what happens. Otherwise we would just run the full suite of checks after restart when (what was previously) the snapshot chainstate gets loaded in as a ""regular"" IBD'd chainstate.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671490286,671490286,src/validation.cpp
jonatack,2021-07-16 20:12:03,"94e67d6 This comment seems unclear to me; remove ""either"" and s/otherwise/in that case/? (not sure)\n```suggestion\n    // The contents of this function are not relevant if we're not\n```",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671500822,671500822,src/validation.cpp
jonatack,2021-07-16 20:17:12,"86e996aaef89 can be const, which seems good/useful in a function as long as `CChainState::CheckBlockIndex()`\n```diff\n-    bool is_active_chain = this == &m_chainman.ActiveChainstate();\n-    int snapshot_height = m_chainman.GetSnapshotHeight().value_or(-1);\n+    const bool is_active_chain{this == &m_chainman.ActiveChainstate()};\n+    const int snapshot_height{m_chainman.GetSnapshotHeight(",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671503219,671503219,src/validation.cpp
jonatack,2021-07-16 20:30:07,"ef47823cbec0a9600\n```suggestion\n    const CBlock block = this->CreateBlock(txns, scriptPubKey, chainstate);\n```",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671509172,671509172,src/test/util/setup_common.cpp
jamesob,2021-07-17 14:31:24,"Done, thanks.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671704184,671704184,src/validation.cpp
jamesob,2021-07-17 14:31:36,"Done, thanks.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671704203,671704203,src/validation.cpp
jamesob,2021-07-17 14:31:46,Done,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671704229,671704229,src/test/util/setup_common.cpp
JeremyRubin,2021-07-17 19:29:47,is this necessary? Can we declare NoMalleation the old fashioned way?,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671734817,671734817,src/test/util/chainstate.h
JeremyRubin,2021-07-17 19:44:14,"I was going to suggest changing to std::optional<CBlockIndex&> since the inner type is not nullable. If you want rebindable, reference_wrapper.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671736102,671736102,src/validation.h
JeremyRubin,2021-07-17 19:45:44,"(it's just a test, and it's moveonly, so NBD)",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671736221,671736221,src/test/util/chainstate.h
ryanofsky,2021-07-19 20:14:42,"In commit ""validation: change UpdateTip for multiple chainstates"" (daa6902795b082832734b084a6c118eb8c682c3d)\n\nIt seems like a more natural place for this log print would be line 2239 right next to the background validation log print so logging code here is more consolidated and straightforward. It would be a minor change in logging behavior though, logging at beginning instead of end of this f",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r672599645,672599645,src/validation.cpp
ryanofsky,2021-07-19 20:27:11,"In commit ""validation: change UpdateTip for multiple chainstates"" (daa6902795b082832734b084a6c118eb8c682c3d)\n\nQuestions about previous code I guess, but why is `BACKGROUND_LOG_INTERVAL` rate limiting code is needed for this function in the `this != active` background case, but it is not needed in the `this->IsInitialBlockDownload` background case? I'd expect you'd want the same rate limiting b",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r672607413,672607413,src/validation.cpp
ryanofsky,2021-07-19 21:37:12,"In commit ""validation: change UpdateTip for multiple chainstates"" (daa6902795b082832734b084a6c118eb8c682c3d)\n\nIf going to use EXCLUSIVE_LOCKS_REQUIRED on a lambda right now, should actually use AssertLockHeld inside the lambda as well, because just adding the REQUIRED to a lambda does not actually require anything. (It just makes the analysis assume that the lock is held with no enforcement. O",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r672649191,672649191,src/validation.cpp
ryanofsky,2021-07-19 21:44:41,"In commit ""validation: fix CheckBlockIndex for multiple chainstates"" (d7804383748e85bda1be40cf0782a3ca2e457066)\n\nre: https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671736102\n\n> I was going to suggest changing to std::optional<CBlockIndex&> since the inner type is not nullable. If you want rebindable, reference_wrapper.\n\nI'm probably missing a subtlety but I don't know what r",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r672653163,672653163,src/validation.h
ryanofsky,2021-07-19 22:12:04,"In commit ""validation: fix CheckBlockIndex for multiple chainstates"" (d7804383748e85bda1be40cf0782a3ca2e457066)\n\nre: https://github.com/bitcoin/bitcoin/pull/21526#discussion_r671490286\n\n> I'll make a note to ensure that `CompleteSnapshotValidation()` (in #15606) nulls out `m_snapshot_blockhash` so that what you're saying here is actually what happens. Otherwise we would just run the full s",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r672666902,672666902,src/validation.cpp
MarcoFalke,2021-07-20 20:14:53,Still not fixed?,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r673457466,673457466,src/validation.h
jamesob,2021-07-21 14:27:38,"Totally agree @ryanofsky, and I've got some changes coming that will attempt to limit the degree to which the notion of snapshots leak out of ChainstateManager, but I want to point out two things:\n- having an `m_validation_starting_height` member on CChainState would still have to be toggled after snapshot validation completes, so the fragility you rightfully point out would still be there, and",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r674024789,674024789,src/validation.cpp
ryanofsky,2021-07-21 17:40:52,"> having an `m_validation_starting_height` member on CChainState would still have to be toggled after snapshot validation completes, so the fragility you rightfully point out would still be there\n\nRight, but the point for me is to just locate the complexity in chainstatemanager instead of having it exposed to other parts of the code. I think in this case complexity is like a conserved quantity",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r674198521,674198521,src/validation.cpp
jamesob,2021-07-23 17:13:27,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r675715549,675715549,src/validation.cpp
jamesob,2021-07-23 17:16:15,"""Snapshot height"" has now been completely removed as something this code is concerned about; I'll post a longer comment summarizing the changes, but we now rely on a block index flag called `BLOCK_ASSUMED_VALID` to change CheckBlockIndex() behavior as necessary. We now no longer have to worry about ChainstateManager variables to bring this behavior ""back to normal,"" since `BLOCK_ASSUMED_VALID` is ",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r675716972,675716972,src/validation.cpp
ryanofsky,2021-08-05 21:40:32,"In commit ""chain: add BLOCK_ASSUMED_VALID for use with assumeutxo"" (d502108c82e64b6acec4d2788fb224c118fccaff)\n\nVery little difference, but in case you update, you might backport commit d502108c82e64b6acec4d2788fb224c118fccaff from #15606 to this pr (dropping almost certainly"", https://github.com/bitcoin/bitcoin/pull/15606#discussion_r676189715)",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r683805405,683805405,src/chain.h
ryanofsky,2021-08-05 21:58:31,"In commit ""chain: add BLOCK_ASSUMED_VALID for use with assumeutxo"" (d502108c82e64b6acec4d2788fb224c118fccaff)\n\nIt would be good if this comment said what the reason for unsetting the flag is. I.e. is unsetting the flag just bookkeeping or is there actually code that would be broken if block was assumed valid and later validated, and multiple flags were present?\n\nIt's not a big deal, but my",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r683813701,683813701,src/chain.h
ryanofsky,2021-08-05 22:02:47,"In commit ""validation: set BLOCK_ASSUMED_VALID during snapshot load"" (9a8ad497238c8c8aba1ba8679bc7cdbe409c635e)\n\nSimilar to comment in last commit it would seem nice to just be able to drop this interaction/toggling of flags and just do unconditional `index->nStatus |= BLOCK_ASSUMED_VALID`",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r683815605,683815605,src/validation.cpp
ryanofsky,2021-08-05 22:37:09,"In commit ""validation: set BLOCK_ASSUMED_VALID during snapshot load"" (9a8ad497238c8c8aba1ba8679bc7cdbe409c635e)\n\nWould be nice to have comment explaining the IsAssumedValid condition, since logic is a little convoluted. Maybe ""Treat assumed valid blocks that are missing data as if they have data for the purpose of the [whatever] check below""",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r683829467,683829467,src/validation.cpp
ryanofsky,2021-08-05 22:52:07,"In commit ""validation: set BLOCK_ASSUMED_VALID during snapshot load"" (9a8ad497238c8c8aba1ba8679bc7cdbe409c635e)\n\nWould be nice if comment could be less vague. Maybe ""Treat assumed valid blocks as if they are valid for the purpose of the [whatever] checks below""",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r683835244,683835244,src/validation.cpp
jonatack,2021-08-12 21:00:15,"1142b4f Seeing this warning like @Sjors reported (rebased on master, Clang 13 debug build). What CI failure were you seeing when it was addressed?\n```\nvalidation.cpp:2203:44: warning: lambda capture 'func_name' is not required to be captured for this use [-Wunused-lambda-capture]\n    auto log_progress = [this, pindexNew, &func_name](\n                                        ~~~^~~~~~~~~\n1",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688081245,688081245,src/validation.cpp
jonatack,2021-08-13 08:25:30,"How did you address it when the CI didn't pass? e.g. with `[this, pindexNew]`, or `[&]`, or using a struct instead of a lambda?",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688337328,688337328,src/validation.cpp
jamesob,2021-08-13 14:49:42,"Can't dig up the exact stacktrace, but on one of the more exotic CI platforms (mac, win, or mingw32), the variable isn't captured unless explicitly named, and compilation fails. I think I tried your first two suggestions, but am not sure what you mean by ""struct instead of a lambda.""",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688573073,688573073,src/validation.cpp
ryanofsky,2021-08-13 15:06:34,"> Can't dig up the exact stacktrace, but on one of the more exotic CI platforms (mac, win, or mingw32), the variable isn't captured unless explicitly named, and compilation fails. I think I tried your first two suggestions, but am not sure what you mean by ""struct instead of a lambda.""\n\nRelated: I did have an earlier suggestion for eliminating the lambda here: https://github.com/bitcoin/bitcoi",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688585404,688585404,src/validation.cpp
jamesob,2021-08-13 16:01:49,"@ryanofsky good point - I'll give that a shake, and take a look at addressing your other feedback while I'm at it.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688622291,688622291,src/validation.cpp
jonatack,2021-08-13 17:14:46,"This is new to me, but if I understand correctly, the issue is compiler/system-dependent lambda capture of `__func__`. Maybe convert the `log_progress` lambda to a function: https://github.com/jonatack/bitcoin/commit/e95e25e8aa6581d8658b05581f0b1a04e8712387.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688664938,688664938,src/validation.cpp
jonatack,2021-08-13 17:29:59,"(by ""struct instead of a lambda"", I was thinking of a struct like [`38a81a8` (#21261)](https://github.com/bitcoin/bitcoin/pull/21261/commits/38a81a8e20b0e5ad9fef0eae8abd914619f05b25) that I originally wrote as a lambda, before turning it into a struct to be more similar to the other peer eviction comparators)",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688673184,688673184,src/validation.cpp
jamesob,2021-08-13 19:23:14,"I've looked at doing this, but I don't think it's worth the complication: consider that we aggregate `warning_messages` at the end of this function, which is another reason to split the log up.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688733158,688733158,src/validation.cpp
jamesob,2021-08-13 19:27:54,Took @jonatack's suggestion and moved the lambda to a static function.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688735292,688735292,src/validation.cpp
jamesob,2021-08-13 19:45:48,"I don't think it makes sense to apply the ASSUMED_VALID classification for blocks we've already validated, especially since (i) it's easy to avoid, and (ii) there will almost certainly be blocks at the base of the chain that have been validated prior to loading a UTXO snapshot.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688743795,688743795,src/validation.cpp
jonatack,2021-08-13 19:51:01,"here and below `s/__func__/func_name/` (or remove line 2234, I don't know if the conversion from `char[10]` to `std:string` is needed for any of the compilers, can try dropping it to see...but if the conversion *is* needed, maybe `const std::string func_name{__func__}`)\n\n```\nvalidation.cpp: In member function ‘void CChainState::UpdateTip(const CBlockIndex*)’:\nvalidation.cpp:2223:11: error:",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688746234,688746234,src/validation.cpp
jamesob,2021-08-13 20:58:39,"Fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688777697,688777697,src/validation.cpp
jamesob,2021-08-13 20:59:03,"Whoops, fixed. Thanks!",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688777882,688777882,src/validation.cpp
jonatack,2021-08-14 15:07:32,"Nice, it worked without line 2234. Cool.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r688940721,688940721,src/validation.cpp
jonatack,2021-08-16 13:36:15,"212b80da these two alignments are off by one, as the enumerator values/commas/comments are right-justified\n```diff\n@@ -126,7 +126,7 @@ enum BlockStatus: uint32_t {\n     BLOCK_FAILED_CHILD       =   64, //!< descends from failed block\n     BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,\n \n-    BLOCK_OPT_WITNESS        =   128, //!< block data in blk*.data was recei",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r689543866,689543866,src/chain.h
jonatack,2021-08-16 13:38:23,"e747b53 nit, clang-formatting\n```suggestion\n        log(tip->nChainWork.getdouble()) / log(2.0), (unsigned long)tip->nChainTx,\n```",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r689545543,689545543,src/validation.cpp
jonatack,2021-08-16 13:39:04,"e747b53 nit, clang-formatting\n```suggestion\n        coins_tip.DynamicMemoryUsage() * (1.0 / (1 << 20)),\n```",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r689545997,689545997,src/validation.cpp
jonatack,2021-08-16 13:53:55,"212b80dad5c19a043c007d79109963e301cd1400 bad url?\n```suggestion\n     * on a background chainstate. See `doc/assumeutxo.md`.\n```",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r689558285,689558285,src/chain.h
jonatack,2021-08-16 14:26:45,"0a0a525 a comment here may be nice (this one is from the commit message)  \n```diff\n+       // Mark the block index entries beneath the snapshot base block as assumed-valid.\n        if (!index->IsValid(BLOCK_VALID_SCRIPTS)) {\n```",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r689586083,689586083,src/validation.cpp
jonatack,2021-08-16 14:59:46,"00b44cda suggestion to be unambiguous that `as good as our current tip or better` applies to both cases, `BLOCK_VALID_TRANSACTIONS` and `BLOCK_ASSUMED_VALID`\n```diff\n     /**\n-     * The set of all CBlockIndex entries with either BLOCK_VALID_TRANSACTIONS (for\n-     * itself and all ancestors) *or* BLOCK_ASSUMED_VALID (if using background\n-     * chainstates) and as good as our current ti",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r689614499,689614499,src/validation.h
jonatack,2021-08-16 15:52:17,"a30a5d46 nit, sort\n```diff\n #include <chainparams.h>\n-#include <random.h>\n-#include <uint256.h>\n #include <consensus/validation.h>\n-#include <sync.h>\n+#include <random.h>\n #include <rpc/blockchain.h>\n-#include <test/util/setup_common.h>\n+#include <sync.h>\n #include <test/util/chainstate.h>\n+#include <test/util/setup_common.h>\n+#include <uint256.h>\n #include <validation.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r689657609,689657609,src/test/validation_chainstate_tests.cpp
jonatack,2021-08-16 15:55:08,"6b502ae nit, sort\n```diff\n-#include <test/util/setup_common.h>\n #include <test/util/chainstate.h>\n+#include <test/util/setup_common.h>\n```\n",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r689659807,689659807,src/test/validation_chainstatemanager_tests.cpp
jonatack,2021-08-16 16:44:51,"a30a5d46\n```suggestion\n    // After adding a block to the snapshot tip, best block should have changed.\n```",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r689696315,689696315,src/test/validation_chainstate_tests.cpp
jonatack,2021-08-16 17:32:32,"212b80dad perhaps use the bool helper added in this commit?\n```suggestion\n        if (IsAssumedValid() && nUpTo >= BLOCK_VALID_SCRIPTS) {\n```",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r689728139,689728139,src/chain.h
fjahr,2021-08-25 19:30:11,"in 212b80dad5c19a043c007d79109963e301cd1400\n\nWhy only probably? Is it possible or planned that this will not be the case?",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r696052308,696052308,src/chain.h
fjahr,2021-08-25 19:49:02,"in ed0d83a3d2c5752ef2424dee7c849933fdc39452\n\nnit: could be `const` but also `is_active` is only used once below in a line that might not even run due to other conditionals so maybe it doesn't need to be placed up here? Unless this is used more in follow-ups?",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r696064167,696064167,src/validation.cpp
fjahr,2021-08-25 20:50:21,"in ed0d83a3d2c5752ef2424dee7c849933fdc39452\n\nnit: s/.././",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r696103308,696103308,src/validation.cpp
fjahr,2021-08-25 22:15:41,"in 212b80dad5c19a043c007d79109963e301cd1400\n\nThe block files actually also have a `.dat` extension, not `.data`, if you retouch...",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r696150649,696150649,src/chain.h
fjahr,2021-08-25 23:01:56,"in 212b80dad5c19a043c007d79109963e301cd1400\n\nIf a block had `nStatus = BLOCK_VALID_SCRIPTS | BLOCK_ASSUMED_VALID` and `RaiseValidity(BLOCK_VALID_SCRIPTS)` was called on it then `nStatus` would change but the function would still return false if I see that correctly. But it seems like an extreme edge case that may be impossible to hit but I am not 100% sure. In general it would be nicer if the ",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r696169810,696169810,src/chain.h
fjahr,2021-08-25 23:30:31,"in a30a5d46b3574a49f9e3611caeb730bf12d748fd\n\nnit: I find it a bit strange to refer to a specific function being tested in a unit test when it's not actually called in the test itself since such comments may rot without notice. I would have preferred something a bit more generic like ""Test that active and background chainstates can update their tip independently of each other"".",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r696180570,696180570,src/test/validation_chainstate_tests.cpp
ariard,2021-08-25 23:36:49,"Note, if you want to provide one supplemental information to the node operator and find an usage for the `IsBackgroundIBD` deleted in the previous commit, I think you can add a `chainstate=%s` by passing an arg `const bool is_snapshot` and value=`!m_chainman.IsBackgroundIBD()` ?",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r696182813,696182813,src/validation.cpp
ariard,2021-08-25 23:44:07,"I had an overlook on `assumeutxo.md`, I think it's a mature enough documentation to be landed in-tree in a follow-up PR. At least, it was helpful for me as a reminder on design trade-offs.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r696185527,696185527,src/chain.h
ariard,2021-08-25 23:59:17,"Note, I'm dubious on the flag name choice as we already have a distinct lightweight IBD feature `assumevalid`. Even if their security model are pretty similar, I don't think they are fully-overlapping. What consensus failure case which would be caught by an `assumevalid=X` client but not by an `assume-utxo=X` client (before background IBD is over) would be an inflation bug similar to CVE-2018-1714",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r696190873,696190873,src/chain.h
ariard,2021-08-26 00:17:30,"I don't get the rational of this change, `IsAssumeValid` blocks are ones lower than the best current _snapshot_ tip and as such won't be on a better-work chain and shouldn't be candidate for tip inclusion in `FindMostWorkChain` ? Or do you have a commit in #15606 pointing how it is used ?",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r696197191,696197191,src/validation.cpp
naumenkogs,2021-09-03 12:11:56,I low-key agree.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r701840983,701840983,src/chain.h
jamesob,2021-09-08 17:22:26,"I don't totally understand your comment here. This is a necessary change so that when loading a snapshot-based chainstate, the (assumed-valid) tip is able to be added as a tip candidate, since otherwise it would be excluded on the basis of `!HaveTxsDownloaded()`.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r704625003,704625003,src/validation.cpp
ryanofsky,2021-09-08 18:21:39,"re: https://github.com/bitcoin/bitcoin/pull/21526#discussion_r696190873\n\nJames asked me about the flag again, and I don't have much new to add so I'll just restate what I wrote https://github.com/bitcoin/bitcoin/pull/21526#discussion_r674198521 and https://github.com/bitcoin/bitcoin/pull/21526#discussion_r683813701, which is that I don't like complexity of flags being added and then removed in",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r704667203,704667203,src/chain.h
jamesob,2021-09-08 20:43:54,Given I'm unsetting the same flag just below I think this could be somewhat confusing.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r704759266,704759266,src/chain.h
jamesob,2021-09-08 20:45:59,I don't understand... this already distinguishes for background chainstates with the `prefix` string.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r704760532,704760532,src/validation.cpp
jamesob,2021-09-08 21:00:05,"Thanks again @ryanofsky for weighing in.\n\n> I don't like complexity of flags being added and then removed instead of just being cumulative\n\nI agree that ideally it would be better to set flags once and never touch them subsequently, but there is a need to remove the ASSUMED flag on block index entries as they're validated so that CheckBlockIndex eventually returns to its normal behavior. I",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r704769552,704769552,src/chain.h
naumenkogs,2021-09-09 09:18:35,"Not gonna insist.\nPerhaps, the confusion with `-assumevalid=` matters only for me, someone who looks at this part of the code for the second time.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r705146871,705146871,src/chain.h
jamesob,2021-09-09 13:24:51,"I've changed the code to ensure this can't happen, thanks.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r705328793,705328793,src/chain.h
JeremyRubin,2021-09-15 17:01:42,"should this be configurable (e.g., in case needed for debugging?)",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709379079,709379079,src/validation.cpp
JeremyRubin,2021-09-15 17:03:26,nit: why this comment here?,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709380311,709380311,src/validation.h
JeremyRubin,2021-09-15 17:07:00,"One of the benefits of the 'cumulative' flags is that you can prove the block validity state transitions are finite through consumption of the flag.\n\nHowever, it's easy to prove this by inspection as well, so I think the current design is OK. ",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709382769,709382769,src/chain.h
JeremyRubin,2021-09-15 17:16:38,"nit: an invalid nUpTo such as 6 or 7 could corrupt the result here. Consider 4|3 which is (BLOCK_VALID_CHAIN|BLOCK_VALID_TRANSACTIONS). I don't think this can actually happen though.\n\nIt might be better to explicitly check nUpTo is either exactly BLOCK_VALID_SCRIPTS?",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709389720,709389720,src/chain.h
JeremyRubin,2021-09-15 17:20:13,shouldn't we be tracking if we actually made any changes before marking dirty?,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709392990,709392990,src/validation.cpp
ryanofsky,2021-09-15 17:29:56,"In commit ""move-only: unittest: add test/util/chainstate.h"" (529f5055675f6c7f734796a8339761b6c1ba13b9)\n\nCan declare this `const auto` instead of `auto` to avoid link errors marco and achow are reporting\n\n- https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-918540412\n- https://github.com/bitcoin/bitcoin/pull/21526#issuecomment-919945778\n- https://stackoverflow.com/questions/1811",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709404714,709404714,src/test/util/chainstate.h
jamesob,2021-09-15 19:43:44,I noticed it was undocumented and this is set by `UpdateTip` so it's tangentially related... but agree it looks confusing in this commit. I'll break it out into a separate commit.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709520614,709520614,src/validation.h
jamesob,2021-09-15 21:57:54,"Yeah that might be nice, though it'd feel hamfisted to have a CLI option just for that I think. Probably something to think about for a followup.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709603994,709603994,src/validation.cpp
jamesob,2021-09-15 22:21:41,"This is a really good point, but I think we've got bigger problems if there's an invalid `nUpTo` being passed (that's still within the `BLOCK_VALID_MASK` range as you note; for subsequent reviewers: see the assert at the beginning of the function).\n\nI think if we were to address this, it'd be a more general fix of clamping down this function and others like `IsValid()` with a ceiling check (at",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709615226,709615226,src/chain.h
jamesob,2021-09-15 22:22:29,Done! And yet again @ryanofsky bails me out of C++ jail.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709615629,709615629,src/test/util/chainstate.h
jamesob,2021-09-15 22:24:49,"Syncing the entire block index is negligible in comparison to syncing the coins, and we have to do both at the end of snapshot load, so I figured better to err on the side of over-syncing.",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709616549,709616549,src/validation.cpp
achow101,2021-09-15 22:39:17,Indeed this fixed the linker error.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r709622940,709622940,src/test/util/chainstate.h
ariard,2021-09-19 23:29:32,That's right.,https://github.com/bitcoin/bitcoin/pull/21526#discussion_r711820619,711820619,src/validation.cpp
ariard,2021-09-19 23:42:42,"I had the wrong mental model reviewing. I thought that only blocks before the _snapshot_ height were marked as `IsAssumeValid`, thanks for the clarification!",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r711822386,711822386,src/validation.cpp
ariard,2021-09-19 23:49:48,">  So I'd drop the ""assume"" flag and use something like BLOCK_VALIDATED_FROM_GENESIS, BLOCK_VALIDATED_FROM_SNAPSHOT flags instead. \n\nYes, I think flags informing on the level of validation which has been performed so far would be better than tagging blocks with the validation process they belong to.\n\nI agree, let's not stuck on that, we can improve with 'cumulative' flags and better descri",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r711823337,711823337,src/chain.h
MarcoFalke,2021-09-24 12:11:45,"There is no such document. Also, it would be good to explain how the unlikely case where this is *not* pending on background validation might happen. Even more so when this comment contradicts the very next comment (`IsAssumedValid`).",https://github.com/bitcoin/bitcoin/pull/21526#discussion_r715558994,715558994,src/chain.h
MarcoFalke,2021-09-24 12:53:38,Does it apply to both? Would be good to clarify. (It is not possible to tell from the code in this pull),https://github.com/bitcoin/bitcoin/pull/21526#discussion_r715587133,715587133,src/validation.h
