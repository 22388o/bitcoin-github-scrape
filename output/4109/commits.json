[
  {
    "sha": "6b29ccc9f9a166b54a9a0a026debe6244b77d805",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjI5Y2NjOWY5YTE2NmI1NGE5YTBhMDI2ZGViZTYyNDRiNzdkODA1",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-04-30T06:57:11Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-04-30T06:57:11Z"
      },
      "message": "Correct indentation",
      "tree": {
        "sha": "55308f16a527782ab958c354f777b77b9ff67dec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55308f16a527782ab958c354f777b77b9ff67dec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b29ccc9f9a166b54a9a0a026debe6244b77d805",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b29ccc9f9a166b54a9a0a026debe6244b77d805",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b29ccc9f9a166b54a9a0a026debe6244b77d805",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b29ccc9f9a166b54a9a0a026debe6244b77d805/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48be9ceaa0746ba7ba7f1b9fedeb1d10dc0a5f99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48be9ceaa0746ba7ba7f1b9fedeb1d10dc0a5f99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48be9ceaa0746ba7ba7f1b9fedeb1d10dc0a5f99"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 45,
      "deletions": 44
    },
    "files": [
      {
        "sha": "dc584416eeec662e99365317fda3fc4e42c0d210",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 44,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b29ccc9f9a166b54a9a0a026debe6244b77d805/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b29ccc9f9a166b54a9a0a026debe6244b77d805/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6b29ccc9f9a166b54a9a0a026debe6244b77d805",
        "patch": "@@ -74,53 +74,54 @@ const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n // Internal stuff\n namespace {\n-struct CBlockIndexWorkComparator\n-{\n-    bool operator()(CBlockIndex *pa, CBlockIndex *pb) {\n-        // First sort by most total work, ...\n-        if (pa->nChainWork > pb->nChainWork) return false;\n-        if (pa->nChainWork < pb->nChainWork) return true;\n+    struct CBlockIndexWorkComparator\n+    {\n+        bool operator()(CBlockIndex *pa, CBlockIndex *pb) {\n+            // First sort by most total work, ...\n+            if (pa->nChainWork > pb->nChainWork) return false;\n+            if (pa->nChainWork < pb->nChainWork) return true;\n \n-        // ... then by earliest time received, ...\n-        if (pa->nSequenceId < pb->nSequenceId) return false;\n-        if (pa->nSequenceId > pb->nSequenceId) return true;\n+            // ... then by earliest time received, ...\n+            if (pa->nSequenceId < pb->nSequenceId) return false;\n+            if (pa->nSequenceId > pb->nSequenceId) return true;\n \n-        // Use pointer address as tie breaker (should only happen with blocks\n-        // loaded from disk, as those all have id 0).\n-        if (pa < pb) return false;\n-        if (pa > pb) return true;\n+            // Use pointer address as tie breaker (should only happen with blocks\n+            // loaded from disk, as those all have id 0).\n+            if (pa < pb) return false;\n+            if (pa > pb) return true;\n \n-        // Identical blocks.\n-        return false;\n-    }\n-};\n-\n-CBlockIndex *pindexBestInvalid;\n-set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid; // may contain all CBlockIndex*'s that have validness >=BLOCK_VALID_TRANSACTIONS, and must contain those who aren't failed\n-\n-CCriticalSection cs_LastBlockFile;\n-CBlockFileInfo infoLastBlockFile;\n-int nLastBlockFile = 0;\n-\n-// Every received block is assigned a unique and increasing identifier, so we\n-// know which one to give priority in case of a fork.\n-CCriticalSection cs_nBlockSequenceId;\n-// Blocks loaded from disk are assigned id 0, so start the counter at 1.\n-uint32_t nBlockSequenceId = 1;\n-\n-// Sources of received blocks, to be able to send them reject messages or ban\n-// them, if processing happens afterwards. Protected by cs_main.\n-map<uint256, NodeId> mapBlockSource;\n-\n-// Blocks that are in flight, and that are in the queue to be downloaded.\n-// Protected by cs_main.\n-struct QueuedBlock {\n-    uint256 hash;\n-    int64_t nTime;  // Time of \"getdata\" request in microseconds.\n-    int nQueuedBefore;  // Number of blocks in flight at the time of request.\n-};\n-map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n-map<uint256, pair<NodeId, list<uint256>::iterator> > mapBlocksToDownload;\n+            // Identical blocks.\n+            return false;\n+        }\n+    };\n+\n+    CBlockIndex *pindexBestInvalid;\n+    // may contain all CBlockIndex*'s that have validness >=BLOCK_VALID_TRANSACTIONS, and must contain those who aren't failed\n+    set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid;\n+\n+    CCriticalSection cs_LastBlockFile;\n+    CBlockFileInfo infoLastBlockFile;\n+    int nLastBlockFile = 0;\n+\n+    // Every received block is assigned a unique and increasing identifier, so we\n+    // know which one to give priority in case of a fork.\n+    CCriticalSection cs_nBlockSequenceId;\n+    // Blocks loaded from disk are assigned id 0, so start the counter at 1.\n+    uint32_t nBlockSequenceId = 1;\n+\n+    // Sources of received blocks, to be able to send them reject messages or ban\n+    // them, if processing happens afterwards. Protected by cs_main.\n+    map<uint256, NodeId> mapBlockSource;\n+\n+    // Blocks that are in flight, and that are in the queue to be downloaded.\n+    // Protected by cs_main.\n+    struct QueuedBlock {\n+        uint256 hash;\n+        int64_t nTime;  // Time of \"getdata\" request in microseconds.\n+        int nQueuedBefore;  // Number of blocks in flight at the time of request.\n+    };\n+    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n+    map<uint256, pair<NodeId, list<uint256>::iterator> > mapBlocksToDownload;\n }\n \n //////////////////////////////////////////////////////////////////////////////"
      }
    ]
  }
]