[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/428438305",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-428438305",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 428438305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyODQzODMwNQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-10T04:59:14Z",
    "updated_at": "2018-10-30T06:45:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14303 (rpc: Early call once CWallet::MarkDirty in import calls by promag)\n* #14075 (Import watch only pubkeys to the keypool if private keys are disabled by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/428438305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429585340",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-429585340",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 429585340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTU4NTM0MA==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T00:04:30Z",
    "updated_at": "2018-10-14T00:04:30Z",
    "author_association": "MEMBER",
    "body": "Thanks for reviewing @practicalswift, both comments addressed :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429585340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429609470",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-429609470",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 429609470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTYwOTQ3MA==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-14T09:22:24Z",
    "updated_at": "2018-10-14T09:22:24Z",
    "author_association": "MEMBER",
    "body": "Thanks @achow101, addressed all your points",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/429609470/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430016033",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430016033",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430016033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDAxNjAzMw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-15T21:16:16Z",
    "updated_at": "2018-10-15T21:16:16Z",
    "author_association": "MEMBER",
    "body": "@MeshCollider I don't think it's necessary to import the pubkeys involved separately anymore since #14424, and in fact that sounds very dangerous (you could be tricked into importing a 2-of-3 multisig where you have 2 of the keys, but then receiving a payment to a P2PKH of the third key, and seeing it treated towards your watch-only balance). NACK until that is fixed (or at least restricted to not have that issue, but I believe that rebasing on 14424 will be sufficient).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430016033/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430057292",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430057292",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430057292,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDA1NzI5Mg==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-16T00:15:02Z",
    "updated_at": "2018-10-16T01:38:05Z",
    "author_association": "MEMBER",
    "body": "@sipa good point, fixed, and rebased on master to include the public key fix",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430057292/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430448097",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430448097",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430448097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDQ0ODA5Nw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T00:32:50Z",
    "updated_at": "2018-10-17T00:33:23Z",
    "author_association": "MEMBER",
    "body": "I think there are a few things that need fixing:\r\n* There doesn't seem to be code for P2SH-P2WPKH (which matters at least when passing in a pubkey in that case, which won't be imported).\r\n* The added tests only cover whether `importmulti` returns true, not whether it actually imported anything. \r\n* The added tests are restricted to watchonly and spendable cases, but no solvable-but-not-spendable ones.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430448097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430470951",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430470951",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430470951,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDQ3MDk1MQ==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T02:50:27Z",
    "updated_at": "2018-10-17T02:50:27Z",
    "author_association": "MEMBER",
    "body": "I believe I've addressed the points, thanks for the feedback so far",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430470951/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430870335",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430870335",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430870335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDg3MDMzNQ==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T04:19:48Z",
    "updated_at": "2018-10-18T04:19:48Z",
    "author_association": "MEMBER",
    "body": "All comments so far are addressed, lots more tests added. Thanks @sipa, @instagibbs, @Sjors ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430870335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430912206",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430912206",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430912206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDkxMjIwNg==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T07:57:06Z",
    "updated_at": "2018-10-18T07:57:06Z",
    "author_association": "MEMBER",
    "body": "@MeshCollider I'm still seeing the same behavior I described above when importing a `p2sh-p2wpkh` address using just the address and public key.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430912206/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430913179",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430913179",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430913179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDkxMzE3OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T08:00:21Z",
    "updated_at": "2018-10-18T08:00:21Z",
    "author_association": "MEMBER",
    "body": "@Sjors You need the redeemscript to make your example solvable (otherwise there is no way for the matcher to go from a P2SH hash to knowing what script the hash is of).\r\n\r\nWith the private key the weird-evil-but-necessary magic behaviour that causes us to automatically recognize P2WPKH and P2SH-P2WPKH payments to known private keys triggers.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430913179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430916797",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430916797",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430916797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDkxNjc5Nw==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T08:12:49Z",
    "updated_at": "2018-10-18T08:12:49Z",
    "author_association": "MEMBER",
    "body": "Your wording suggests you're not a fan of adding that weird-evil-but-optional magic behavior to the (very common) case of having one public key?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430916797/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430918731",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430918731",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430918731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDkxODczMQ==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T08:19:09Z",
    "updated_at": "2018-10-18T08:19:09Z",
    "author_association": "MEMBER",
    "body": "@Sjors I'm not really a fan of it, this code is already edge-cased enough without adding more ifs to test for, but I'm happy to add it if you really think its worthwhile.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430918731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430918926",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430918926",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430918926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDkxODkyNg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T08:19:48Z",
    "updated_at": "2018-10-18T08:19:48Z",
    "author_association": "MEMBER",
    "body": "@Sjors No, but I have suggested something else before, which would perhaps also solve your issue, namely that for all single-key schemes you can just provide the pubkey, and `importmulti` would automatically try the different schemes to see which matches your address/script.\r\n\r\nAt the very least, something for another PR, though.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430918926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430920941",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430920941",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430920941,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDkyMDk0MQ==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T08:26:18Z",
    "updated_at": "2018-10-18T08:26:18Z",
    "author_association": "MEMBER",
    "body": "And such a case would be so easy with descriptors too ;)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430920941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430931660",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430931660",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 430931660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDkzMTY2MA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-18T09:00:35Z",
    "updated_at": "2018-10-18T09:00:35Z",
    "author_association": "MEMBER",
    "body": "I'm fine with focusing on descriptors, since those are an order of magnitude more intuitive than the current `importmulti` syntax.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430931660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431348266",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-431348266",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 431348266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTM0ODI2Ng==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T12:35:49Z",
    "updated_at": "2018-10-19T12:35:49Z",
    "author_association": "MEMBER",
    "body": "Fixed a bug where a P2WSH multisig was not treated as IsMine Spendable because the scriptPubKey wasn't being added to the wallet, and updated the test for it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431348266/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431569661",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-431569661",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 431569661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTU2OTY2MQ==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-20T10:47:02Z",
    "updated_at": "2018-10-20T10:47:02Z",
    "author_association": "MEMBER",
    "body": "Comments addressed + squashed some commits together",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431569661/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432397625",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-432397625",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 432397625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjM5NzYyNQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-23T20:02:19Z",
    "updated_at": "2018-10-23T20:02:19Z",
    "author_association": "MEMBER",
    "body": "utACK e4a66bb791cc832b192f4fd780d3159b98f494e3. As @Sjors points out there are some combinations for which tests can be added, but I think that can be done later.\r\n\r\nPlease squash fixups?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432397625/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432816417",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-432816417",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 432816417,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMjgxNjQxNw==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-24T20:29:27Z",
    "updated_at": "2018-10-24T20:31:35Z",
    "author_association": "MEMBER",
    "body": "Squashed fixups into their respective commits, thanks for the review :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432816417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/433167173",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-433167173",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 433167173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzE2NzE3Mw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-25T18:58:25Z",
    "updated_at": "2018-10-25T18:58:25Z",
    "author_association": "MEMBER",
    "body": "utACK c11875c5908a17314bb38caa911507dc6401ec49",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/433167173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/434169088",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-434169088",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 434169088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDE2OTA4OA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-30T04:35:38Z",
    "updated_at": "2018-10-30T04:35:38Z",
    "author_association": "MEMBER",
    "body": "utACK 201451b1ca3c6db3b13f9491a81db5b120b864bb",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/434169088/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/434760981",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-434760981",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14454",
    "id": 434760981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNDc2MDk4MQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-31T16:44:06Z",
    "updated_at": "2018-10-31T16:44:06Z",
    "author_association": "MEMBER",
    "body": "looks good to me, adding the `solvable` to `getaddressinfo` makes a lot of sense, and tests also look good to me\r\nutACK c11875c5908a17314bb38caa911507dc6401ec49",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/434760981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224960596",
    "pull_request_review_id": 164463758,
    "id": 224960596,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk2MDU5Ng==",
    "diff_hunk": "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());\n+                CScriptID witness_id(witnessScript);\n+                CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+                // Check that the witnessScript and P2SH redeemScript match\n+                if (witnessDestination != redeemScript) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n                 }\n \n-                std::vector<unsigned char> vData(ParseHex(strPubKey));\n-                CPubKey pubKey(vData.begin(), vData.end());\n+                // Import into the wallet\n+                if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n \n-                if (!pubKey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n                 }\n+            }\n \n-                CTxDestination pubkey_dest = pubKey.GetID();\n+        // P2WSH\n+        } else if (!strWitnessScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(strWitnessScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+            }\n \n-                // Consistency check.\n-                if (!(pubkey_dest == dest)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n-                }\n+            // Generate the scripts\n+            std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+            CScript witnessScript = CScript(vData.begin(), vData.end());\n+            CScriptID witness_id(witnessScript);\n+            CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                CScript pubKeyScript = GetScriptForDestination(pubkey_dest);\n+            // Check that the witnessScript and scriptPubKey match\n+            if (witnessDestination != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey\");\n+            }\n \n-                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n \n-                pwallet->MarkDirty();\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            }\n \n-                if (!pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        // P2PK/P2PKH/P2WPKH\n+        } else if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n+            if (keys.size() > 1 || pubKeys.size() > 1) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+            }\n+            CPubKey pubkey;\n+            if (keys.size()) {\n+                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n+            }\n+            if (pubKeys.size()) {\n+                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n+                CPubKey pubkey_temp(vData.begin(), vData.end());\n+                if (pubkey.size() && pubkey_temp != pubkey) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n                 }\n+                pubkey = pubkey_temp;\n+            }\n+            if (pubkey.size()) {\n+              std::vector<CTxDestination> destinations = GetAllDestinationsForKey(pubkey);\n+              if (std::find(destinations.begin(), destinations.end(), dest) == destinations.end()) {\n+                  throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Key does not match address destination\");\n+              }\n+            }\n+        }\n \n-                // add to address book or update label\n-                if (IsValidDestination(pubkey_dest)) {\n-                    pwallet->SetAddressBook(pubkey_dest, label, \"receive\");\n-                }\n+        // Import the address\n+        if (::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        }\n \n-                // TODO Is this necessary?\n-                CScript scriptRawPubKey = GetScriptForRawPubKey(pubKey);\n+        pwallet->MarkDirty();\n \n-                if (::IsMine(*pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+        if (!pwallet->AddWatchOnly(script, timestamp)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        }\n \n-                pwallet->MarkDirty();\n+        // add to address book or update label\n+        if (IsValidDestination(dest)) {\n+            pwallet->SetAddressBook(dest, label, \"receive\");\n+        }\n \n-                if (!pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-                }\n+        // Import public keys.\n+        for (size_t i = 0; i < pubKeys.size(); i++) {\n+            const std::string& strPubKey = pubKeys[i].get_str();\n \n-                success = true;\n+            if (!IsHex(strPubKey)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n             }\n \n-            // Import private keys.\n-            if (keys.size()) {\n-                const std::string& strPrivkey = keys[0].get_str();\n-\n-                // Checks.\n-                CKey key = DecodeSecret(strPrivkey);\n-\n-                if (!key.IsValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                }\n+            std::vector<unsigned char> vData(ParseHex(strPubKey));\n+            CPubKey pubKey(vData.begin(), vData.end());\n \n-                CPubKey pubKey = key.GetPubKey();\n-                assert(key.VerifyPubKey(pubKey));\n+            if (!pubKey.IsFullyValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+            }\n \n-                CTxDestination pubkey_dest = pubKey.GetID();\n+            CTxDestination pubkey_dest = pubKey.GetID();",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 300,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "59f8e547130fc1cb756da7d990f65445ca196f5f",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No longer needed?",
    "created_at": "2018-10-13T13:48:28Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224960596",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224960596"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224960596"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224960596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1003,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224960649",
    "pull_request_review_id": 164463821,
    "id": 224960649,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk2MDY0OQ==",
    "diff_hunk": "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 153,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "59f8e547130fc1cb756da7d990f65445ca196f5f",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Use another variable name to avoid shadowing existing local variable `vData` :-)",
    "created_at": "2018-10-13T13:50:03Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224960649",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224960649"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224960649"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224960649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 901,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977141",
    "pull_request_review_id": 164482277,
    "id": 224977141,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzE0MQ==",
    "diff_hunk": "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 57,
    "original_position": 56,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Instead of checking that `strRedeemScript` is not empty, this should check that `strWitnessScript` is empty. Or it could check both: `!strRedeemScript.empty() && strWitnessScript.empty()`.",
    "created_at": "2018-10-14T02:36:32Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977141",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977141"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977141"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977141/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 862,
    "original_line": 862,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977175",
    "pull_request_review_id": 164482277,
    "id": 224977175,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzE3NQ==",
    "diff_hunk": "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Provide witnessscript not redeemscript for P2WSH address\");\n         }\n \n-        // Process. //\n-\n         // P2SH\n-        if (isP2SH) {\n+        if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n+            // Check the redeemScript is valid\n+            if (!IsHex(strRedeemScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+            }\n+\n             // Import redeem script.\n             std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n             CScript redeemScript = CScript(vData.begin(), vData.end());\n+            CScriptID redeem_id(redeemScript);\n+            CScript redeemDestination = GetScriptForDestination(redeem_id);",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 74,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: snake_case",
    "created_at": "2018-10-14T02:38:35Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977175",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977175"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977175"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 877,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977177",
    "pull_request_review_id": 164482277,
    "id": 224977177,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzE3Nw==",
    "diff_hunk": "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n-        bool success = false;\n-\n-        // Required fields.\n+        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n         const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-\n-        // Should have script or JSON with \"address\".\n-        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");\n         }\n+        const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n \n         // Optional fields.\n         const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+        const std::string& strWitnessScript = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 20,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: snake_case",
    "created_at": "2018-10-14T02:38:42Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977177",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977177"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977177"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 822,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977198",
    "pull_request_review_id": 164482277,
    "id": 224977198,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzE5OA==",
    "diff_hunk": "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 154,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: snake_case",
    "created_at": "2018-10-14T02:40:00Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977198",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977198"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977198"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 902,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977201",
    "pull_request_review_id": 164482277,
    "id": 224977201,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzIwMQ==",
    "diff_hunk": "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());\n+                CScriptID witness_id(witnessScript);\n+                CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 156,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: snake_case",
    "created_at": "2018-10-14T02:40:06Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977201",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977201"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977201"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977201/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 904,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977230",
    "pull_request_review_id": 164482277,
    "id": 224977230,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzIzMA==",
    "diff_hunk": "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());\n+                CScriptID witness_id(witnessScript);\n+                CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+                // Check that the witnessScript and P2SH redeemScript match\n+                if (witnessDestination != redeemScript) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n                 }\n \n-                std::vector<unsigned char> vData(ParseHex(strPubKey));\n-                CPubKey pubKey(vData.begin(), vData.end());\n+                // Import into the wallet\n+                if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n \n-                if (!pubKey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n                 }\n+            }\n \n-                CTxDestination pubkey_dest = pubKey.GetID();\n+        // P2WSH\n+        } else if (!strWitnessScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(strWitnessScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+            }\n \n-                // Consistency check.\n-                if (!(pubkey_dest == dest)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n-                }\n+            // Generate the scripts\n+            std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+            CScript witnessScript = CScript(vData.begin(), vData.end());\n+            CScriptID witness_id(witnessScript);\n+            CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                CScript pubKeyScript = GetScriptForDestination(pubkey_dest);\n+            // Check that the witnessScript and scriptPubKey match\n+            if (witnessDestination != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey\");\n+            }\n \n-                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n \n-                pwallet->MarkDirty();\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            }\n \n-                if (!pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        // P2PK/P2PKH/P2WPKH\n+        } else if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n+            if (keys.size() > 1 || pubKeys.size() > 1) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 220,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This error wouldn't make sense if only pubkeys were given.",
    "created_at": "2018-10-14T02:42:21Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977230",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977230"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977230"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977230/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 950,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977262",
    "pull_request_review_id": 164482277,
    "id": 224977262,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk3NzI2Mg==",
    "diff_hunk": "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());\n+                CScriptID witness_id(witnessScript);\n+                CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+                // Check that the witnessScript and P2SH redeemScript match\n+                if (witnessDestination != redeemScript) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n                 }\n \n-                std::vector<unsigned char> vData(ParseHex(strPubKey));\n-                CPubKey pubKey(vData.begin(), vData.end());\n+                // Import into the wallet\n+                if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n \n-                if (!pubKey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n                 }\n+            }\n \n-                CTxDestination pubkey_dest = pubKey.GetID();\n+        // P2WSH\n+        } else if (!strWitnessScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(strWitnessScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+            }\n \n-                // Consistency check.\n-                if (!(pubkey_dest == dest)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n-                }\n+            // Generate the scripts\n+            std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+            CScript witnessScript = CScript(vData.begin(), vData.end());\n+            CScriptID witness_id(witnessScript);\n+            CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                CScript pubKeyScript = GetScriptForDestination(pubkey_dest);\n+            // Check that the witnessScript and scriptPubKey match\n+            if (witnessDestination != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey\");\n+            }\n \n-                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n \n-                pwallet->MarkDirty();\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            }\n \n-                if (!pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        // P2PK/P2PKH/P2WPKH\n+        } else if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n+            if (keys.size() > 1 || pubKeys.size() > 1) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+            }\n+            CPubKey pubkey;\n+            if (keys.size()) {\n+                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n+            }\n+            if (pubKeys.size()) {\n+                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n+                CPubKey pubkey_temp(vData.begin(), vData.end());\n+                if (pubkey.size() && pubkey_temp != pubkey) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n                 }\n+                pubkey = pubkey_temp;\n+            }\n+            if (pubkey.size()) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 234,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Instead of checking pubkey size, check validity? (e.g. use `IsValid()` or `IsFullyValid()`)",
    "created_at": "2018-10-14T02:44:10Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977262",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977262"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977262"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224977262/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 961,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224982951",
    "pull_request_review_id": 164488350,
    "id": 224982951,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk4Mjk1MQ==",
    "diff_hunk": "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 57,
    "original_position": 56,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It should be possible to provide a P2WSH scriptPubKey without providing the witness script for it, e.g. watch only, so I don't think that's right",
    "created_at": "2018-10-14T07:39:21Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224982951",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224982951"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224982951"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224982951/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 862,
    "original_line": 862,
    "side": "RIGHT",
    "in_reply_to_id": 224977141
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224983305",
    "pull_request_review_id": 164488747,
    "id": 224983305,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDk4MzMwNQ==",
    "diff_hunk": "@@ -892,180 +887,167 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n-\n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n-\n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n-\n-                    pwallet->UpdateTimeFirstKey(timestamp);\n+            // Check for P2SH-P2WSH/P2WPKH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(strWitnessScript)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n                 }\n-            }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n+                // Generate the scripts\n+                std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+                CScript witnessScript = CScript(vData.begin(), vData.end());\n+                CScriptID witness_id(witnessScript);\n+                CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+                // Check that the witnessScript and P2SH redeemScript match\n+                if (witnessDestination != redeemScript) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n                 }\n \n-                std::vector<unsigned char> vData(ParseHex(strPubKey));\n-                CPubKey pubKey(vData.begin(), vData.end());\n+                // Import into the wallet\n+                if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n \n-                if (!pubKey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n                 }\n+            }\n \n-                CTxDestination pubkey_dest = pubKey.GetID();\n+        // P2WSH\n+        } else if (!strWitnessScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(strWitnessScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+            }\n \n-                // Consistency check.\n-                if (!(pubkey_dest == dest)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n-                }\n+            // Generate the scripts\n+            std::vector<unsigned char> vData(ParseHex(strWitnessScript));\n+            CScript witnessScript = CScript(vData.begin(), vData.end());\n+            CScriptID witness_id(witnessScript);\n+            CScript witnessDestination = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n \n-                CScript pubKeyScript = GetScriptForDestination(pubkey_dest);\n+            // Check that the witnessScript and scriptPubKey match\n+            if (witnessDestination != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey\");\n+            }\n \n-                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witnessScript, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n \n-                pwallet->MarkDirty();\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witnessScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            }\n \n-                if (!pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        // P2PK/P2PKH/P2WPKH\n+        } else if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n+            if (keys.size() > 1 || pubKeys.size() > 1) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+            }\n+            CPubKey pubkey;\n+            if (keys.size()) {\n+                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n+            }\n+            if (pubKeys.size()) {\n+                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n+                CPubKey pubkey_temp(vData.begin(), vData.end());\n+                if (pubkey.size() && pubkey_temp != pubkey) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n                 }\n+                pubkey = pubkey_temp;\n+            }\n+            if (pubkey.size()) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 234,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "IsValid() just performs the same size check anyway, but yep I'll do that for the sake of clarity, I don't think we need an IsFullyValid() check here",
    "created_at": "2018-10-14T07:53:23Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224983305",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224983305"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224983305"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/224983305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 224977262
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225017450",
    "pull_request_review_id": 164524211,
    "id": 225017450,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTAxNzQ1MA==",
    "diff_hunk": "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 57,
    "original_position": 56,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think checking both covers that case.",
    "created_at": "2018-10-15T00:46:41Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225017450",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225017450"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225017450"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225017450/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 862,
    "original_line": 862,
    "side": "RIGHT",
    "in_reply_to_id": 224977141
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225017866",
    "pull_request_review_id": 164524785,
    "id": 225017866,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTAxNzg2Ng==",
    "diff_hunk": "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 57,
    "original_position": 56,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Checking both would mean that if witnessScript and redeemScript were both present, it would allow it, which makes no sense if its not a P2WSH address",
    "created_at": "2018-10-15T00:55:26Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225017866",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225017866"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225017866"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225017866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 862,
    "original_line": 862,
    "side": "RIGHT",
    "in_reply_to_id": 224977141
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225789734",
    "pull_request_review_id": 165466694,
    "id": 225789734,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc4OTczNA==",
    "diff_hunk": "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n-        bool success = false;\n-\n-        // Required fields.\n+        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n         const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-\n-        // Should have script or JSON with \"address\".\n-        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n            throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\r\n```",
    "created_at": "2018-10-17T06:07:44Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225789734",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225789734"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225789734"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225789734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 816,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225790155",
    "pull_request_review_id": 165466694,
    "id": 225790155,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5MDE1NQ==",
    "diff_hunk": "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n-        bool success = false;\n-\n-        // Required fields.\n+        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n         const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-\n-        // Should have script or JSON with \"address\".\n-        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not sure how the code suggestion feature works. I suspect it creates a new commit, in which case it's better to just copy-paste the text and amend an existing commit.",
    "created_at": "2018-10-17T06:10:48Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225790155",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225790155"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225790155"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225790155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 816,
    "side": "RIGHT",
    "in_reply_to_id": 225789734
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225791517",
    "pull_request_review_id": 165466694,
    "id": 225791517,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5MTUxNw==",
    "diff_hunk": "@@ -858,32 +853,31 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "cd19a2e21ee296e821e3ab4d5b33309143458315",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Suggest using the same error message as the above comment: `Internal addresses should not have a label`",
    "created_at": "2018-10-17T06:20:00Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225791517",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225791517"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225791517"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225791517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 858,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225794109",
    "pull_request_review_id": 165466694,
    "id": 225794109,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5NDEwOQ==",
    "diff_hunk": "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 57,
    "original_position": 56,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> P2WSH scriptPubKey without providing the witness script for it, e.g. watch only\r\n\r\nDo we already support that? And test it? If not, maybe it's easier to just treat it as P2SH until we know the `witnessScript`.",
    "created_at": "2018-10-17T06:33:45Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225794109",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225794109"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225794109"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225794109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 862,
    "original_line": 862,
    "side": "RIGHT",
    "in_reply_to_id": 224977141
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225794821",
    "pull_request_review_id": 165472974,
    "id": 225794821,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5NDgyMQ==",
    "diff_hunk": "@@ -892,103 +889,74 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n+            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n+            script = redeemScript;\n+            ExtractDestination(script, dest);\n+        }\n \n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        // P2WSH\n+        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(witness_script_hex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n             }\n \n-            pwallet->MarkDirty();\n+            // Generate the scripts\n+            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n+            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n+            CScriptID witness_id(witness_script);\n \n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n+            // Check that the witnessScript and scriptPubKey match\n+            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n+            }\n+\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witness_script, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n             }\n \n-            // Import private keys.\n+        // P2PK/P2PKH/P2WPKH",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 134,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it may make sense to repeat the trick from the P2SH block of 'descending' into scriptPubKey/address of the redeemscript, to the P2WSH block, and then do P2PK/P2PKH/P2WPKH as a totally new case rather than an else branch. This would make the code work correctly for P2PK/P2PKH nested inside P2WSH (maybe track that you don't permit P2WPKH inside P2WSH though).",
    "created_at": "2018-10-17T06:37:26Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225794821",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225794821"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225794821"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225794821/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 926,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225795550",
    "pull_request_review_id": 165466694,
    "id": 225795550,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5NTU1MA==",
    "diff_hunk": "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)",
    "path": "src/wallet/rpcdump.cpp",
    "position": 1,
    "original_position": 1,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "cd19a2e21ee296e821e3ab4d5b33309143458315",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe move this function to a different file? Unless `dump` means dumping ground :-)\r\n\r\nI understand if you prefer to keep this PR simple though.",
    "created_at": "2018-10-17T06:40:42Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225795550",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225795550"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225795550"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225795550/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 809,
    "original_line": 809,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225796932",
    "pull_request_review_id": 165472974,
    "id": 225796932,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTc5NjkzMg==",
    "diff_hunk": "@@ -458,6 +468,74 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address",
    "path": "test/functional/wallet_importmulti.py",
    "position": null,
    "original_position": 60,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There are a number more scenarios that make sense to test, I think:\r\n* Address based import (without key/script) of P2WSH-multisig\r\n* For all of P2WPKH, P2WSH-multisig, P2SH-P2WPKH, P2SH-P2WSH-multisig, versions with script/pubkey but no private key, and test that the result is solvable.\r\n* P2WPKH with private key, result must be spendable (not just watchonly)\r\n* P2WSH-multisig and P2SH-multisig with more than 1 key, where some of the keys are specified as private keys, and some as public keys.\r\n",
    "created_at": "2018-10-17T06:47:26Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225796932",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225796932"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225796932"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225796932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 471,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225801208",
    "pull_request_review_id": 165466694,
    "id": 225801208,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTgwMTIwOA==",
    "diff_hunk": "@@ -458,6 +468,74 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address",
    "path": "test/functional/wallet_importmulti.py",
    "position": null,
    "original_position": 60,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Re \"Address based import\", should this result in the following?\r\n```\r\n  \"ismine\": false,\r\n  \"iswatchonly\": true,\r\n  \"issolvable\": false,\r\n  \"isscript\": true,\r\n  \"iswitness\": true,\r\n  \"witness_version\": 0\r\n```\r\n\r\nRe \"must be spendable\", this means ` \"ismine\": true` and `\"iswatchonly\": false`?",
    "created_at": "2018-10-17T07:07:09Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225801208",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225801208"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225801208"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225801208/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 471,
    "side": "RIGHT",
    "in_reply_to_id": 225796932
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225958811",
    "pull_request_review_id": 165667746,
    "id": 225958811,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTk1ODgxMQ==",
    "diff_hunk": "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n-        bool success = false;\n-\n-        // Required fields.\n+        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n         const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-\n-        // Should have script or JSON with \"address\".\n-        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good time to give a more descriptive error?",
    "created_at": "2018-10-17T14:39:38Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225958811",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225958811"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225958811"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225958811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 816,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225960295",
    "pull_request_review_id": 165667746,
    "id": 225960295,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTk2MDI5NQ==",
    "diff_hunk": "@@ -858,32 +853,31 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "cd19a2e21ee296e821e3ab4d5b33309143458315",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could we also get a test for this? ",
    "created_at": "2018-10-17T14:42:33Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225960295",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225960295"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225960295"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225960295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 858,
    "side": "RIGHT",
    "in_reply_to_id": 225791517
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225962269",
    "pull_request_review_id": 165667746,
    "id": 225962269,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTk2MjI2OQ==",
    "diff_hunk": "@@ -858,32 +853,34 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Provide witnessscript not redeemscript for P2WSH address\");",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 52,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "wording suggestion: \"P2WSH addresses have an empty redeemscript. Please provide the witnessscript instead.\"",
    "created_at": "2018-10-17T14:47:11Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225962269",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225962269"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225962269"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225962269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 863,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225962825",
    "pull_request_review_id": 165667746,
    "id": 225962825,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTk2MjgyNQ==",
    "diff_hunk": "@@ -858,32 +853,34 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Provide witnessscript not redeemscript for P2WSH address\");\n         }\n \n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n-        }\n-\n-        // Process. //\n+        CScript original_script = script;\n+        CTxDestination original_dest = dest;\n \n         // P2SH\n-        if (isP2SH) {\n+        if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n+            // Check the redeemScript is valid\n+            if (!IsHex(strRedeemScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 69,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "suggestion: \"Invalid redeem script: must be hex string\"",
    "created_at": "2018-10-17T14:48:27Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225962825",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225962825"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225962825"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225962825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 873,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225965365",
    "pull_request_review_id": 165667746,
    "id": 225965365,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTk2NTM2NQ==",
    "diff_hunk": "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n-        bool success = false;\n-\n-        // Required fields.\n+        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n         const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-\n-        // Should have script or JSON with \"address\".\n-        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");\n         }\n+        const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();",
    "path": "src/wallet/rpcdump.cpp",
    "position": 17,
    "original_position": 16,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "while we're here could we rename this to something more self-documenting?",
    "created_at": "2018-10-17T14:54:11Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225965365",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225965365"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225965365"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225965365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 818,
    "original_line": 818,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225967520",
    "pull_request_review_id": 165667746,
    "id": 225967520,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNTk2NzUyMA==",
    "diff_hunk": "@@ -892,103 +886,95 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n+            // Check for P2SH-P2WSH",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 94,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "cd19a2e21ee296e821e3ab4d5b33309143458315",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I understand this is a transient commit, but could there be a TODO P2SH-P2WPKH comment somewhere around here?",
    "created_at": "2018-10-17T14:58:55Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225967520",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225967520"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225967520"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/225967520/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 893,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226069267",
    "pull_request_review_id": 165667746,
    "id": 226069267,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjA2OTI2Nw==",
    "diff_hunk": "@@ -892,103 +886,95 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n+            // Check for P2SH-P2WSH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(witness_script_hex)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+                }\n \n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n+                // Generate the scripts\n+                std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n+                CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n+                CScriptID witness_id(witness_script);\n \n-            pwallet->MarkDirty();\n+                // Check that the witnessScript and P2SH redeemScript match\n+                if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != redeemScript) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n+                }\n \n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n+                // Import into the wallet\n+                if (!pwallet->AddWatchOnly(witness_script, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n \n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n+                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n+                }\n             }\n \n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n+        // P2WSH",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 147,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "cd19a2e21ee296e821e3ab4d5b33309143458315",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "// (P2SH-)P2WSH\r\n\r\nMakes it more clear to me that the above block changed the `script`",
    "created_at": "2018-10-17T19:43:14Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226069267",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226069267"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226069267"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226069267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 919,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226069938",
    "pull_request_review_id": 165804901,
    "id": 226069938,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjA2OTkzOA==",
    "diff_hunk": "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)",
    "path": "src/wallet/rpcdump.cpp",
    "position": 1,
    "original_position": 1,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "cd19a2e21ee296e821e3ab4d5b33309143458315",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's specific to importing things, though, which is the scope of rpcdump.cpp?",
    "created_at": "2018-10-17T19:45:30Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226069938",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226069938"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226069938"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226069938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 809,
    "original_line": 809,
    "side": "RIGHT",
    "in_reply_to_id": 225795550
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226070434",
    "pull_request_review_id": 165667746,
    "id": 226070434,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjA3MDQzNA==",
    "diff_hunk": "@@ -858,32 +853,34 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Provide witnessscript not redeemscript for P2WSH address\");\n         }\n \n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n-        }\n-\n-        // Process. //\n+        CScript original_script = script;",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 61,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`scriptpubkey_script` more self-explanatory? \"original\" is context dependent. ",
    "created_at": "2018-10-17T19:47:20Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226070434",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226070434"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226070434"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226070434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 866,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226070517",
    "pull_request_review_id": 165667746,
    "id": 226070517,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjA3MDUxNw==",
    "diff_hunk": "@@ -858,32 +853,34 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Provide witnessscript not redeemscript for P2WSH address\");\n         }\n \n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n-        }\n-\n-        // Process. //\n+        CScript original_script = script;\n+        CTxDestination original_dest = dest;",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 62,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`scriptpubkey_dest` more self-explanatory? \"original\" is context dependent.",
    "created_at": "2018-10-17T19:47:33Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226070517",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226070517"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226070517"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226070517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 867,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226071688",
    "pull_request_review_id": 165807200,
    "id": 226071688,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjA3MTY4OA==",
    "diff_hunk": "@@ -892,103 +886,95 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n+            // Check for P2SH-P2WSH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(witness_script_hex)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+                }\n \n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n+                // Generate the scripts\n+                std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n+                CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n+                CScriptID witness_id(witness_script);\n \n-            pwallet->MarkDirty();\n+                // Check that the witnessScript and P2SH redeemScript match\n+                if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != redeemScript) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n+                }\n \n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n+                // Import into the wallet\n+                if (!pwallet->AddWatchOnly(witness_script, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n \n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n+                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n+                }\n             }\n \n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n+        // P2WSH",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 147,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "cd19a2e21ee296e821e3ab4d5b33309143458315",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "And same thing with: `// P2PK/P2PKH/P2WPKH`",
    "created_at": "2018-10-17T19:51:39Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226071688",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226071688"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226071688"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226071688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 919,
    "side": "RIGHT",
    "in_reply_to_id": 226069267
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226103426",
    "pull_request_review_id": 165847341,
    "id": 226103426,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjEwMzQyNg==",
    "diff_hunk": "@@ -458,6 +468,74 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address",
    "path": "test/functional/wallet_importmulti.py",
    "position": null,
    "original_position": 60,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@Sjors Correct.",
    "created_at": "2018-10-17T21:36:19Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226103426",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226103426"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226103426"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226103426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 471,
    "side": "RIGHT",
    "in_reply_to_id": 225796932
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226104528",
    "pull_request_review_id": 165848727,
    "id": 226104528,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjEwNDUyOA==",
    "diff_hunk": "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 57,
    "original_position": 56,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@Sjors Yes, of course, just `importaddress` it. It probably works fine without this PR even.",
    "created_at": "2018-10-17T21:40:32Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226104528",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226104528"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226104528"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226104528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 862,
    "original_line": 862,
    "side": "RIGHT",
    "in_reply_to_id": 224977141
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226134309",
    "pull_request_review_id": 165884346,
    "id": 226134309,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjEzNDMwOQ==",
    "diff_hunk": "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n-        bool success = false;\n-\n-        // Required fields.\n+        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n         const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-\n-        // Should have script or JSON with \"address\".\n-        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");\n         }\n+        const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();",
    "path": "src/wallet/rpcdump.cpp",
    "position": 17,
    "original_position": 16,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "65ecf2d8818b6b9ae4f4a5501d9f860f3bb8baee",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@instagibbs what do you suggest? `script_or_address`?",
    "created_at": "2018-10-18T00:12:19Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226134309",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226134309"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226134309"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226134309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 818,
    "original_line": 818,
    "side": "RIGHT",
    "in_reply_to_id": 225965365
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226204351",
    "pull_request_review_id": 165968129,
    "id": 226204351,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjIwNDM1MQ==",
    "diff_hunk": "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 57,
    "original_position": 56,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@sipa so we currently support importing a `3...` address as watch-only, but the wallet doesn't know or care if it's SegWit or not. The new code here is for a scenario where you do know it's SegWit `script.IsPayToWitnessScriptHash()`, which means you know the `strRedeemScript`, but you don't know the `strWitnessScript`. That seems a strange situation. Why would anyone give you the legacy redeem script but not the Segwit witness script?",
    "created_at": "2018-10-18T08:04:08Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226204351",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226204351"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226204351"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226204351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 862,
    "original_line": 862,
    "side": "RIGHT",
    "in_reply_to_id": 224977141
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226207717",
    "pull_request_review_id": 165971908,
    "id": 226207717,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjIwNzcxNw==",
    "diff_hunk": "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 57,
    "original_position": 56,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@Sjors I have no idea what you're talking about. This is about the case where you're importing a bech32 P2WSH address (no P2SH), without revealing the script inside - which is a totally reasonable thing if you don't care about solvability.",
    "created_at": "2018-10-18T08:14:31Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226207717",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226207717"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226207717"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226207717/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 862,
    "original_line": 862,
    "side": "RIGHT",
    "in_reply_to_id": 224977141
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226810527",
    "pull_request_review_id": 166731607,
    "id": 226810527,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjgxMDUyNw==",
    "diff_hunk": "@@ -458,6 +477,148 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address as watch only\n+        self.log.info(\"Should import a P2WPKH address was watch only\")",
    "path": "test/functional/wallet_importmulti.py",
    "position": null,
    "original_position": 95,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "06d5999b28a636e338135a4e3712e34fa6fcc55d",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Typo: was -> as",
    "created_at": "2018-10-20T00:53:42Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226810527",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226810527"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226810527"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226810527/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 481,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226810629",
    "pull_request_review_id": 166731607,
    "id": 226810629,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjgxMDYyOQ==",
    "diff_hunk": "@@ -3538,6 +3538,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n             \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"issolvable\\\" : true|false,    (boolean) If the address is solvable by the wallet\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "06d5999b28a636e338135a4e3712e34fa6fcc55d",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Addressing a review comment, I've changed the implementation in #14477 to use `solvable` instead of `issolvable`. Perhaps you can do the same?\r\n",
    "created_at": "2018-10-20T00:55:24Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226810629",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226810629"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226810629"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226810629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3541,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226810741",
    "pull_request_review_id": 166731607,
    "id": 226810741,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjgxMDc0MQ==",
    "diff_hunk": "@@ -458,6 +477,148 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address as watch only\n+        self.log.info(\"Should import a P2WPKH address was watch only\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['issolvable'], False)\n+\n+        # Import P2WPKH address with public key but no private key\n+        self.log.info(\"Should import a P2WPKH address and public key as solvable but not spendable\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"pubkeys\": [ address['pubkey'] ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['issolvable'], True)\n+\n+        # Import P2WPKH address with key and check it is spendable\n+        self.log.info(\"Should import a P2WPKH address with key\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"keys\": [self.nodes[0].dumpprivkey(address['address'])]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], True)\n+\n+        # P2WSH multisig address without scripts or keys\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].addmultisigaddress(2, [sig_address_1['pubkey'], sig_address_2['pubkey']], \"\", \"bech32\")\n+        self.log.info(\"Should import a p2wsh multisig as watch only without respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"timestamp\": \"now\"\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n+        assert_equal(address_assert['issolvable'], False)\n+\n+        # Same P2WSH multisig address as above, but now with witnessscript + private keys\n+        self.log.info(\"Should import a p2wsh with respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"witnessscript\": multi_sig_script['redeemScript'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n+        assert_equal(address_assert['issolvable'], True)\n+        assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['sigsrequired'], 2)\n+\n+        # P2SH-P2WPKH address + redeemscript with no public or private key\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"p2sh-segwit\"))\n+        pubkeyhash = hash160(hex_str_to_bytes(sig_address_1['pubkey']))\n+        pkscript = CScript([OP_0, pubkeyhash])\n+        self.log.info(\"Should import a p2sh-p2wpkh with respective redeem script but no keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": sig_address_1['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"redeemscript\": bytes_to_hex_str(pkscript)",
    "path": "test/functional/wallet_importmulti.py",
    "position": null,
    "original_position": 179,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "06d5999b28a636e338135a4e3712e34fa6fcc55d",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "redeemscript is not necessary if you don't need solvability.\r\n",
    "created_at": "2018-10-20T00:57:34Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226810741",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226810741"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226810741"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226810741/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 565,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226915748",
    "pull_request_review_id": 166841599,
    "id": 226915748,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjkxNTc0OA==",
    "diff_hunk": "@@ -858,32 +853,32 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 57,
    "original_position": 56,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "3276b7e22a65606ad8866d898dd14082570aa814",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@sipa I see, I may have gotten confused because Github is showing `if (isP2SH && !IsHex(strRedeemScript` as the deleted line, but this thread is about an earlier code branch.\r\n<img width=\"591\" alt=\"schermafbeelding 2018-10-22 om 14 16 57\" src=\"https://user-images.githubusercontent.com/10217/47281424-45db9880-d605-11e8-977f-3330bbd7da82.png\">\r\n",
    "created_at": "2018-10-22T07:19:04Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226915748",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226915748"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226915748"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226915748/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 862,
    "original_line": 862,
    "side": "RIGHT",
    "in_reply_to_id": 224977141
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227193335",
    "pull_request_review_id": 167176234,
    "id": 227193335,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzE5MzMzNQ==",
    "diff_hunk": "@@ -892,103 +890,83 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n+            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n+            script = redeemScript;\n+            ExtractDestination(script, dest);\n+        }\n \n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        // (P2SH-)P2WSH\n+        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(witness_script_hex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n             }\n \n-            pwallet->MarkDirty();\n+            // Generate the scripts\n+            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n+            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n+            CScriptID witness_id(witness_script);\n \n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            // Check that the witnessScript and scriptPubKey match\n+            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n             }\n \n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witness_script, timestamp)) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 133,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "7c0268acb59e1a2c497b7aaab07f6ac4a7393988",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A small issue still: for P2SH-P2WSH it's unnecessary (and undesirable, I think) to also import the inner P2WSH script as watch-only.\r\n\r\nIt's not necessary because we're already marking the P2SH-P2WSH script as watch-only, and for solvability all we need is `AddCScript`, not `AddWatchOnly`.\r\n\r\nIt's undesirable because it will cause us to treat payments to the P2WSH address as watchonly IsMine (instead of just the P2SH-P2WSH version).",
    "created_at": "2018-10-23T01:34:57Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227193335",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227193335"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227193335"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227193335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 919,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227200337",
    "pull_request_review_id": 167184872,
    "id": 227200337,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzIwMDMzNw==",
    "diff_hunk": "@@ -892,103 +890,83 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n+            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n+            script = redeemScript;\n+            ExtractDestination(script, dest);\n+        }\n \n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        // (P2SH-)P2WSH\n+        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(witness_script_hex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n             }\n \n-            pwallet->MarkDirty();\n+            // Generate the scripts\n+            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n+            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n+            CScriptID witness_id(witness_script);\n \n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            // Check that the witnessScript and scriptPubKey match\n+            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n             }\n \n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witness_script, timestamp)) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": null,
    "original_position": 133,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "7c0268acb59e1a2c497b7aaab07f6ac4a7393988",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point, fixed",
    "created_at": "2018-10-23T02:19:10Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227200337",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227200337"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227200337"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227200337/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 919,
    "side": "RIGHT",
    "in_reply_to_id": 227193335
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227236277",
    "pull_request_review_id": 167228484,
    "id": 227236277,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzIzNjI3Nw==",
    "diff_hunk": "@@ -458,6 +477,147 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address as watch only\n+        self.log.info(\"Should import a P2WPKH address as watch only\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['solvable'], False)",
    "path": "test/functional/wallet_importmulti.py",
    "position": 106,
    "original_position": 106,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "e4a66bb791cc832b192f4fd780d3159b98f494e3",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@sipa can you remind me why a Native Pay-to-Witness-Public-Key-Hash isn't `solvable`, even though legacy Pay-to-Public-Key-Hash addresses are? Is that just to reduce [evil magic](https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430913179) like in the P2SH-P2PKH case?\r\nIf so, maybe add a comment in the test or in the RPC doc?",
    "created_at": "2018-10-23T06:07:50Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227236277",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227236277"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227236277"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227236277/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 492,
    "original_line": 492,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227252340",
    "pull_request_review_id": 167248541,
    "id": 227252340,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzI1MjM0MA==",
    "diff_hunk": "@@ -458,6 +477,147 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address as watch only\n+        self.log.info(\"Should import a P2WPKH address as watch only\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['solvable'], False)",
    "path": "test/functional/wallet_importmulti.py",
    "position": 106,
    "original_position": 106,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "e4a66bb791cc832b192f4fd780d3159b98f494e3",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In this example it's not solvable because the public key isn't included. It has nothing to do with the script/witness hashing type.\n\nIn general, solvability is very easy. Start at the scriptPubKey. Whenever it includes a script hash, we must receive the actual script, and recurse into it. Whenever you encounter a pubkey hash, we must receive the actual public key. A scriptPubKey is solvable whenever you can descend all the way to scripts and pubkeys without any hashes of unknown things.\n\nThe only exception to that is that whenever you have a private key X, we also automatically import the P2WPKH and P2SH-P2WPKH versions of it, so no separate importing is needed in that case.",
    "created_at": "2018-10-23T07:13:32Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227252340",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227252340"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227252340"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227252340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 492,
    "original_line": 492,
    "side": "RIGHT",
    "in_reply_to_id": 227236277
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227264739",
    "pull_request_review_id": 167264100,
    "id": 227264739,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzI2NDczOQ==",
    "diff_hunk": "@@ -458,6 +477,147 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address as watch only\n+        self.log.info(\"Should import a P2WPKH address as watch only\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['solvable'], False)",
    "path": "test/functional/wallet_importmulti.py",
    "position": 106,
    "original_position": 106,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "e4a66bb791cc832b192f4fd780d3159b98f494e3",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> In this example it's not solvable because the public key isn't included.\r\n\r\nOK, that makes sense. Actually I misread the [legacy test](https://github.com/Sjors/bitcoin/blob/02d553b3e6fa78aa76cd825135a496590a243595/test/functional/wallet_importmulti.py#L134-L149): it does add the public key, which why it's solvable.",
    "created_at": "2018-10-23T07:50:47Z",
    "updated_at": "2018-10-24T20:31:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227264739",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227264739"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227264739"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227264739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 492,
    "original_line": 492,
    "side": "RIGHT",
    "in_reply_to_id": 227236277
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228299703",
    "pull_request_review_id": 168542337,
    "id": 228299703,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODI5OTcwMw==",
    "diff_hunk": "@@ -458,6 +477,147 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address as watch only\n+        self.log.info(\"Should import a P2WPKH address as watch only\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['solvable'], False)\n+\n+        # Import P2WPKH address with public key but no private key\n+        self.log.info(\"Should import a P2WPKH address and public key as solvable but not spendable\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"pubkeys\": [ address['pubkey'] ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['solvable'], True)\n+\n+        # Import P2WPKH address with key and check it is spendable\n+        self.log.info(\"Should import a P2WPKH address with key\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"keys\": [self.nodes[0].dumpprivkey(address['address'])]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], True)\n+\n+        # P2WSH multisig address without scripts or keys\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].addmultisigaddress(2, [sig_address_1['pubkey'], sig_address_2['pubkey']], \"\", \"bech32\")\n+        self.log.info(\"Should import a p2wsh multisig as watch only without respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"timestamp\": \"now\"\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n+        assert_equal(address_assert['solvable'], False)",
    "path": "test/functional/wallet_importmulti.py",
    "position": 151,
    "original_position": 97,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: if \"sigsrequired\" and \"ismine\" aren't in results can we assert their absence here?",
    "created_at": "2018-10-25T19:09:43Z",
    "updated_at": "2018-10-25T19:12:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228299703",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228299703"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228299703"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228299703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 537,
    "original_line": 537,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228300582",
    "pull_request_review_id": 168542337,
    "id": 228300582,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODMwMDU4Mg==",
    "diff_hunk": "@@ -458,6 +477,147 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address as watch only\n+        self.log.info(\"Should import a P2WPKH address as watch only\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['solvable'], False)\n+\n+        # Import P2WPKH address with public key but no private key\n+        self.log.info(\"Should import a P2WPKH address and public key as solvable but not spendable\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"pubkeys\": [ address['pubkey'] ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['solvable'], True)\n+\n+        # Import P2WPKH address with key and check it is spendable\n+        self.log.info(\"Should import a P2WPKH address with key\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"keys\": [self.nodes[0].dumpprivkey(address['address'])]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], True)\n+\n+        # P2WSH multisig address without scripts or keys\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].addmultisigaddress(2, [sig_address_1['pubkey'], sig_address_2['pubkey']], \"\", \"bech32\")\n+        self.log.info(\"Should import a p2wsh multisig as watch only without respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"timestamp\": \"now\"\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n+        assert_equal(address_assert['solvable'], False)\n+\n+        # Same P2WSH multisig address as above, but now with witnessscript + private keys\n+        self.log.info(\"Should import a p2wsh with respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"witnessscript\": multi_sig_script['redeemScript'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n+        assert_equal(address_assert['solvable'], True)\n+        assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['sigsrequired'], 2)\n+\n+        # P2SH-P2WPKH address with no redeemscript or public or private key\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"p2sh-segwit\"))\n+        pubkeyhash = hash160(hex_str_to_bytes(sig_address_1['pubkey']))\n+        pkscript = CScript([OP_0, pubkeyhash])\n+        self.log.info(\"Should import a p2sh-p2wpkh without redeem script or keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": sig_address_1['address']\n+            },\n+            \"timestamp\": \"now\"\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(sig_address_1['address'])\n+        assert_equal(address_assert['solvable'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # P2SH-P2WPKH address + redeemscript + public key with no private key\n+        self.log.info(\"Should import a p2sh-p2wpkh with respective redeem script and pubkey as solvable\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": sig_address_1['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"redeemscript\": bytes_to_hex_str(pkscript),\n+            \"pubkeys\": [ sig_address_1['pubkey'] ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(sig_address_1['address'])\n+        assert_equal(address_assert['solvable'], True)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # P2SH-P2WPKH address + redeemscript + private key\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"p2sh-segwit\"))\n+        pubkeyhash = hash160(hex_str_to_bytes(sig_address_1['pubkey']))\n+        pkscript = CScript([OP_0, pubkeyhash])\n+        self.log.info(\"Should import a p2sh-p2wpkh with respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": sig_address_1['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"redeemscript\": bytes_to_hex_str(pkscript),\n+            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address'])]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(sig_address_1['address'])\n+        assert_equal(address_assert['solvable'], True)\n+        assert_equal(address_assert['ismine'], True)\n+\n+        # P2SH-P2WSH 1-of-1 multisig + redeemscript with no private key\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].addmultisigaddress(1, [sig_address_1['pubkey']], \"\", \"p2sh-segwit\")\n+        scripthash = sha256(hex_str_to_bytes(multi_sig_script['redeemScript']))\n+        redeem_script = CScript([OP_0, scripthash])\n+        self.log.info(\"Should import a p2sh-p2wsh with respective redeem script but no private key\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"redeemscript\": bytes_to_hex_str(redeem_script),\n+            \"witnessscript\": multi_sig_script['redeemScript']\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n+        assert_equal(address_assert['solvable'], True)",
    "path": "test/functional/wallet_importmulti.py",
    "position": 234,
    "original_position": 180,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: ismine?",
    "created_at": "2018-10-25T19:12:42Z",
    "updated_at": "2018-10-25T19:12:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228300582",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228300582"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228300582"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228300582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 620,
    "original_line": 620,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228461705",
    "pull_request_review_id": 168740642,
    "id": 228461705,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODQ2MTcwNQ==",
    "diff_hunk": "@@ -3538,6 +3538,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n             \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"solvable\\\" : true|false,      (boolean) If the address is solvable by the wallet\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could have release note.",
    "created_at": "2018-10-26T09:28:28Z",
    "updated_at": "2018-10-26T09:53:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228461705",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228461705"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228461705"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228461705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3541,
    "original_line": 3541,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228469760",
    "pull_request_review_id": 168740642,
    "id": 228469760,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODQ2OTc2MA==",
    "diff_hunk": "@@ -892,103 +890,83 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n+            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n+            script = redeemScript;\n+            ExtractDestination(script, dest);\n+        }\n \n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        // (P2SH-)P2WSH\n+        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(witness_script_hex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n             }\n \n-            pwallet->MarkDirty();\n+            // Generate the scripts\n+            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n+            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n+            CScriptID witness_id(witness_script);\n \n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            // Check that the witnessScript and scriptPubKey match\n+            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n             }\n \n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n+            // Add the witness script as watch only only if it is not for P2SH-P2WSH\n+            if (!scriptpubkey_script.IsPayToScriptHash() && !pwallet->AddWatchOnly(witness_script, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            }\n \n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n+            // Now set script to the witnessScript so we parse the inner script as P2PK or P2PKH below\n+            script = witness_script;\n+            ExtractDestination(script, dest);\n+            allow_p2wpkh = false; // P2WPKH cannot be embedded in P2WSH\n+        }\n \n-                    pwallet->UpdateTimeFirstKey(timestamp);\n-                }\n+        // (P2SH-)P2PK/P2PKH/P2WPKH\n+        if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 176,
    "original_position": 176,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "First time using RTTI? Maybe it could be avoided?\r\n\r\nBTW, didn't test but I don't see `variant::type()` in boost 1.47 documentation.",
    "created_at": "2018-10-26T09:53:35Z",
    "updated_at": "2018-10-26T09:53:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228469760",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228469760"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228469760"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228469760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 934,
    "original_line": 934,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228810060",
    "pull_request_review_id": 169160905,
    "id": 228810060,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODgxMDA2MA==",
    "diff_hunk": "@@ -892,103 +890,83 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n+            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n+            script = redeemScript;\n+            ExtractDestination(script, dest);\n+        }\n \n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        // (P2SH-)P2WSH\n+        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(witness_script_hex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n             }\n \n-            pwallet->MarkDirty();\n+            // Generate the scripts\n+            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n+            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n+            CScriptID witness_id(witness_script);\n \n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            // Check that the witnessScript and scriptPubKey match\n+            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n             }\n \n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n+            // Add the witness script as watch only only if it is not for P2SH-P2WSH\n+            if (!scriptpubkey_script.IsPayToScriptHash() && !pwallet->AddWatchOnly(witness_script, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            }\n \n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n+            // Now set script to the witnessScript so we parse the inner script as P2PK or P2PKH below\n+            script = witness_script;\n+            ExtractDestination(script, dest);\n+            allow_p2wpkh = false; // P2WPKH cannot be embedded in P2WSH\n+        }\n \n-                    pwallet->UpdateTimeFirstKey(timestamp);\n-                }\n+        // (P2SH-)P2PK/P2PKH/P2WPKH\n+        if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 176,
    "original_position": 176,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@promag it seems to be there: https://www.boost.org/doc/libs/1_47_0/doc/html/boost/variant.html\r\nI could also do `dest.which() == 1 || dest.which() == 4` but that's very unclear, or define a new enum of the types, but that seemed over the top unless there's a good reason to avoid RTTI?",
    "created_at": "2018-10-29T06:17:45Z",
    "updated_at": "2018-10-29T06:17:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228810060",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228810060"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228810060"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228810060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 934,
    "original_line": 934,
    "side": "RIGHT",
    "in_reply_to_id": 228469760
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228903672",
    "pull_request_review_id": 169273161,
    "id": 228903672,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODkwMzY3Mg==",
    "diff_hunk": "@@ -892,103 +890,83 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n+            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n+            script = redeemScript;\n+            ExtractDestination(script, dest);\n+        }\n \n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        // (P2SH-)P2WSH\n+        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(witness_script_hex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n             }\n \n-            pwallet->MarkDirty();\n+            // Generate the scripts\n+            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n+            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n+            CScriptID witness_id(witness_script);\n \n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            // Check that the witnessScript and scriptPubKey match\n+            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n             }\n \n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n+            // Add the witness script as watch only only if it is not for P2SH-P2WSH\n+            if (!scriptpubkey_script.IsPayToScriptHash() && !pwallet->AddWatchOnly(witness_script, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n-\n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n-\n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            }\n \n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n+            // Now set script to the witnessScript so we parse the inner script as P2PK or P2PKH below\n+            script = witness_script;\n+            ExtractDestination(script, dest);\n+            allow_p2wpkh = false; // P2WPKH cannot be embedded in P2WSH\n+        }\n \n-                    pwallet->UpdateTimeFirstKey(timestamp);\n-                }\n+        // (P2SH-)P2PK/P2PKH/P2WPKH\n+        if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {",
    "path": "src/wallet/rpcdump.cpp",
    "position": 176,
    "original_position": 176,
    "commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "original_commit_id": "c11875c5908a17314bb38caa911507dc6401ec49",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Indeed it's in 1.47. Anyway this is removed in #14565.",
    "created_at": "2018-10-29T12:25:13Z",
    "updated_at": "2018-10-29T12:25:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228903672",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228903672"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228903672"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14454"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228903672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 934,
    "original_line": 934,
    "side": "RIGHT",
    "in_reply_to_id": 228469760
  }
]