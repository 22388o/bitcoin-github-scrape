DrahtBot,2018-10-10T04:59:14Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14303 (rpc: Early call once CWallet::MarkDirty in import calls by promag)\n* #14075 (Import watch only pubkeys to the keypool if private keys are disabled by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start wi",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-428438305,428438305,
meshcollider,2018-10-14T00:04:30Z,"Thanks for reviewing @practicalswift, both comments addressed :)",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-429585340,429585340,
meshcollider,2018-10-14T09:22:24Z,"Thanks @achow101, addressed all your points",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-429609470,429609470,
sipa,2018-10-15T21:16:16Z,"@MeshCollider I don't think it's necessary to import the pubkeys involved separately anymore since #14424, and in fact that sounds very dangerous (you could be tricked into importing a 2-of-3 multisig where you have 2 of the keys, but then receiving a payment to a P2PKH of the third key, and seeing it treated towards your watch-only balance). NACK until that is fixed (or at least restricted to not",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430016033,430016033,
meshcollider,2018-10-16T00:15:02Z,"@sipa good point, fixed, and rebased on master to include the public key fix",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430057292,430057292,
sipa,2018-10-17T00:32:50Z,"I think there are a few things that need fixing:\n* There doesn't seem to be code for P2SH-P2WPKH (which matters at least when passing in a pubkey in that case, which won't be imported).\n* The added tests only cover whether `importmulti` returns true, not whether it actually imported anything. \n* The added tests are restricted to watchonly and spendable cases, but no solvable-but-not-spendabl",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430448097,430448097,
meshcollider,2018-10-17T02:50:27Z,"I believe I've addressed the points, thanks for the feedback so far",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430470951,430470951,
meshcollider,2018-10-18T04:19:48Z,"All comments so far are addressed, lots more tests added. Thanks @sipa, @instagibbs, @Sjors ",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430870335,430870335,
Sjors,2018-10-18T07:57:06Z,@MeshCollider I'm still seeing the same behavior I described above when importing a `p2sh-p2wpkh` address using just the address and public key.,https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430912206,430912206,
sipa,2018-10-18T08:00:21Z,"@Sjors You need the redeemscript to make your example solvable (otherwise there is no way for the matcher to go from a P2SH hash to knowing what script the hash is of).\n\nWith the private key the weird-evil-but-necessary magic behaviour that causes us to automatically recognize P2WPKH and P2SH-P2WPKH payments to known private keys triggers.",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430913179,430913179,
Sjors,2018-10-18T08:12:49Z,Your wording suggests you're not a fan of adding that weird-evil-but-optional magic behavior to the (very common) case of having one public key?,https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430916797,430916797,
meshcollider,2018-10-18T08:19:09Z,"@Sjors I'm not really a fan of it, this code is already edge-cased enough without adding more ifs to test for, but I'm happy to add it if you really think its worthwhile.",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430918731,430918731,
sipa,2018-10-18T08:19:48Z,"@Sjors No, but I have suggested something else before, which would perhaps also solve your issue, namely that for all single-key schemes you can just provide the pubkey, and `importmulti` would automatically try the different schemes to see which matches your address/script.\n\nAt the very least, something for another PR, though.",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430918926,430918926,
meshcollider,2018-10-18T08:26:18Z,And such a case would be so easy with descriptors too ;),https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430920941,430920941,
Sjors,2018-10-18T09:00:35Z,"I'm fine with focusing on descriptors, since those are an order of magnitude more intuitive than the current `importmulti` syntax.",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430931660,430931660,
meshcollider,2018-10-19T12:35:49Z,"Fixed a bug where a P2WSH multisig was not treated as IsMine Spendable because the scriptPubKey wasn't being added to the wallet, and updated the test for it.",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-431348266,431348266,
meshcollider,2018-10-20T10:47:02Z,Comments addressed + squashed some commits together,https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-431569661,431569661,
sipa,2018-10-23T20:02:19Z,"utACK e4a66bb791cc832b192f4fd780d3159b98f494e3. As @Sjors points out there are some combinations for which tests can be added, but I think that can be done later.\n\nPlease squash fixups?",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-432397625,432397625,
meshcollider,2018-10-24T20:29:27Z,"Squashed fixups into their respective commits, thanks for the review :)",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-432816417,432816417,
sipa,2018-10-25T18:58:25Z,utACK c11875c5908a17314bb38caa911507dc6401ec49,https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-433167173,433167173,
achow101,2018-10-30T04:35:38Z,utACK 201451b1ca3c6db3b13f9491a81db5b120b864bb,https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-434169088,434169088,
laanwj,2018-10-31T16:44:06Z,"looks good to me, adding the `solvable` to `getaddressinfo` makes a lot of sense, and tests also look good to me\nutACK c11875c5908a17314bb38caa911507dc6401ec49",https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-434760981,434760981,
practicalswift,2018-10-13T13:48:28Z,No longer needed?,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224960596,224960596,src/wallet/rpcdump.cpp
practicalswift,2018-10-13T13:50:03Z,Use another variable name to avoid shadowing existing local variable `vData` :-),https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224960649,224960649,src/wallet/rpcdump.cpp
achow101,2018-10-14T02:36:32Z,"Instead of checking that `strRedeemScript` is not empty, this should check that `strWitnessScript` is empty. Or it could check both: `!strRedeemScript.empty() && strWitnessScript.empty()`.",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977141,224977141,src/wallet/rpcdump.cpp
achow101,2018-10-14T02:38:35Z,nit: snake_case,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977175,224977175,src/wallet/rpcdump.cpp
achow101,2018-10-14T02:38:42Z,nit: snake_case,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977177,224977177,src/wallet/rpcdump.cpp
achow101,2018-10-14T02:40:00Z,nit: snake_case,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977198,224977198,src/wallet/rpcdump.cpp
achow101,2018-10-14T02:40:06Z,nit: snake_case,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977201,224977201,src/wallet/rpcdump.cpp
achow101,2018-10-14T02:42:21Z,This error wouldn't make sense if only pubkeys were given.,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977230,224977230,src/wallet/rpcdump.cpp
achow101,2018-10-14T02:44:10Z,"Instead of checking pubkey size, check validity? (e.g. use `IsValid()` or `IsFullyValid()`)",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224977262,224977262,src/wallet/rpcdump.cpp
meshcollider,2018-10-14T07:39:21Z,"It should be possible to provide a P2WSH scriptPubKey without providing the witness script for it, e.g. watch only, so I don't think that's right",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224982951,224982951,src/wallet/rpcdump.cpp
meshcollider,2018-10-14T07:53:23Z,"IsValid() just performs the same size check anyway, but yep I'll do that for the sake of clarity, I don't think we need an IsFullyValid() check here",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r224983305,224983305,src/wallet/rpcdump.cpp
achow101,2018-10-15T00:46:41Z,I think checking both covers that case.,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225017450,225017450,src/wallet/rpcdump.cpp
meshcollider,2018-10-15T00:55:26Z,"Checking both would mean that if witnessScript and redeemScript were both present, it would allow it, which makes no sense if its not a P2WSH address",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225017866,225017866,src/wallet/rpcdump.cpp
Sjors,2018-10-17T06:07:44Z,"```suggestion\n            throw JSONRPCError(RPC_INVALID_PARAMETER, ""scriptPubKey must be string with script or JSON with address string"");\n```",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225789734,225789734,src/wallet/rpcdump.cpp
Sjors,2018-10-17T06:10:48Z,"I'm not sure how the code suggestion feature works. I suspect it creates a new commit, in which case it's better to just copy-paste the text and amend an existing commit.",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225790155,225790155,src/wallet/rpcdump.cpp
Sjors,2018-10-17T06:20:00Z,Suggest using the same error message as the above comment: `Internal addresses should not have a label`,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225791517,225791517,src/wallet/rpcdump.cpp
Sjors,2018-10-17T06:33:45Z,"> P2WSH scriptPubKey without providing the witness script for it, e.g. watch only\n\nDo we already support that? And test it? If not, maybe it's easier to just treat it as P2SH until we know the `witnessScript`.",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225794109,225794109,src/wallet/rpcdump.cpp
sipa,2018-10-17T06:37:26Z,"I think it may make sense to repeat the trick from the P2SH block of 'descending' into scriptPubKey/address of the redeemscript, to the P2WSH block, and then do P2PK/P2PKH/P2WPKH as a totally new case rather than an else branch. This would make the code work correctly for P2PK/P2PKH nested inside P2WSH (maybe track that you don't permit P2WPKH inside P2WSH though).",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225794821,225794821,src/wallet/rpcdump.cpp
Sjors,2018-10-17T06:40:42Z,"Maybe move this function to a different file? Unless `dump` means dumping ground :-)\n\nI understand if you prefer to keep this PR simple though.",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225795550,225795550,src/wallet/rpcdump.cpp
sipa,2018-10-17T06:47:26Z,"There are a number more scenarios that make sense to test, I think:\n* Address based import (without key/script) of P2WSH-multisig\n* For all of P2WPKH, P2WSH-multisig, P2SH-P2WPKH, P2SH-P2WSH-multisig, versions with script/pubkey but no private key, and test that the result is solvable.\n* P2WPKH with private key, result must be spendable (not just watchonly)\n* P2WSH-multisig and P2SH-multis",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225796932,225796932,test/functional/wallet_importmulti.py
Sjors,2018-10-17T07:07:09Z,"Re ""Address based import"", should this result in the following?\n```\n  ""ismine"": false,\n  ""iswatchonly"": true,\n  ""issolvable"": false,\n  ""isscript"": true,\n  ""iswitness"": true,\n  ""witness_version"": 0\n```\n\nRe ""must be spendable"", this means ` ""ismine"": true` and `""iswatchonly"": false`?",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225801208,225801208,test/functional/wallet_importmulti.py
instagibbs,2018-10-17T14:39:38Z,Good time to give a more descriptive error?,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225958811,225958811,src/wallet/rpcdump.cpp
instagibbs,2018-10-17T14:42:33Z,Could we also get a test for this? ,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225960295,225960295,src/wallet/rpcdump.cpp
instagibbs,2018-10-17T14:47:11Z,"wording suggestion: ""P2WSH addresses have an empty redeemscript. Please provide the witnessscript instead.""",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225962269,225962269,src/wallet/rpcdump.cpp
instagibbs,2018-10-17T14:48:27Z,"suggestion: ""Invalid redeem script: must be hex string""",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225962825,225962825,src/wallet/rpcdump.cpp
instagibbs,2018-10-17T14:54:11Z,while we're here could we rename this to something more self-documenting?,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225965365,225965365,src/wallet/rpcdump.cpp
instagibbs,2018-10-17T14:58:55Z,"I understand this is a transient commit, but could there be a TODO P2SH-P2WPKH comment somewhere around here?",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r225967520,225967520,src/wallet/rpcdump.cpp
instagibbs,2018-10-17T19:43:14Z,"// (P2SH-)P2WSH\n\nMakes it more clear to me that the above block changed the `script`",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226069267,226069267,src/wallet/rpcdump.cpp
sipa,2018-10-17T19:45:30Z,"It's specific to importing things, though, which is the scope of rpcdump.cpp?",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226069938,226069938,src/wallet/rpcdump.cpp
instagibbs,2018-10-17T19:47:20Z,"`scriptpubkey_script` more self-explanatory? ""original"" is context dependent. ",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226070434,226070434,src/wallet/rpcdump.cpp
instagibbs,2018-10-17T19:47:33Z,"`scriptpubkey_dest` more self-explanatory? ""original"" is context dependent.",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226070517,226070517,src/wallet/rpcdump.cpp
instagibbs,2018-10-17T19:51:39Z,And same thing with: `// P2PK/P2PKH/P2WPKH`,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226071688,226071688,src/wallet/rpcdump.cpp
sipa,2018-10-17T21:36:19Z,@Sjors Correct.,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226103426,226103426,test/functional/wallet_importmulti.py
sipa,2018-10-17T21:40:32Z,"@Sjors Yes, of course, just `importaddress` it. It probably works fine without this PR even.",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226104528,226104528,src/wallet/rpcdump.cpp
meshcollider,2018-10-18T00:12:19Z,@instagibbs what do you suggest? `script_or_address`?,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226134309,226134309,src/wallet/rpcdump.cpp
Sjors,2018-10-18T08:04:08Z,"@sipa so we currently support importing a `3...` address as watch-only, but the wallet doesn't know or care if it's SegWit or not. The new code here is for a scenario where you do know it's SegWit `script.IsPayToWitnessScriptHash()`, which means you know the `strRedeemScript`, but you don't know the `strWitnessScript`. That seems a strange situation. Why would anyone give you the legacy redeem scr",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226204351,226204351,src/wallet/rpcdump.cpp
sipa,2018-10-18T08:14:31Z,"@Sjors I have no idea what you're talking about. This is about the case where you're importing a bech32 P2WSH address (no P2SH), without revealing the script inside - which is a totally reasonable thing if you don't care about solvability.",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226207717,226207717,src/wallet/rpcdump.cpp
sipa,2018-10-20T00:53:42Z,Typo: was -> as,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226810527,226810527,test/functional/wallet_importmulti.py
sipa,2018-10-20T00:55:24Z,"Addressing a review comment, I've changed the implementation in #14477 to use `solvable` instead of `issolvable`. Perhaps you can do the same?\n",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226810629,226810629,src/wallet/rpcwallet.cpp
sipa,2018-10-20T00:57:34Z,"redeemscript is not necessary if you don't need solvability.\n",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226810741,226810741,test/functional/wallet_importmulti.py
Sjors,2018-10-22T07:19:04Z,"@sipa I see, I may have gotten confused because Github is showing `if (isP2SH && !IsHex(strRedeemScript` as the deleted line, but this thread is about an earlier code branch.\n<img width=""591"" alt=""schermafbeelding 2018-10-22 om 14 16 57"" src=""https://user-images.githubusercontent.com/10217/47281424-45db9880-d605-11e8-977f-3330bbd7da82.png"">\n",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r226915748,226915748,src/wallet/rpcdump.cpp
sipa,2018-10-23T01:34:57Z,"A small issue still: for P2SH-P2WSH it's unnecessary (and undesirable, I think) to also import the inner P2WSH script as watch-only.\n\nIt's not necessary because we're already marking the P2SH-P2WSH script as watch-only, and for solvability all we need is `AddCScript`, not `AddWatchOnly`.\n\nIt's undesirable because it will cause us to treat payments to the P2WSH address as watchonly IsMine (",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227193335,227193335,src/wallet/rpcdump.cpp
meshcollider,2018-10-23T02:19:10Z,"Good point, fixed",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227200337,227200337,src/wallet/rpcdump.cpp
Sjors,2018-10-23T06:07:50Z,"@sipa can you remind me why a Native Pay-to-Witness-Public-Key-Hash isn't `solvable`, even though legacy Pay-to-Public-Key-Hash addresses are? Is that just to reduce [evil magic](https://github.com/bitcoin/bitcoin/pull/14454#issuecomment-430913179) like in the P2SH-P2PKH case?\nIf so, maybe add a comment in the test or in the RPC doc?",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227236277,227236277,test/functional/wallet_importmulti.py
sipa,2018-10-23T07:13:32Z,"In this example it's not solvable because the public key isn't included. It has nothing to do with the script/witness hashing type.\n\nIn general, solvability is very easy. Start at the scriptPubKey. Whenever it includes a script hash, we must receive the actual script, and recurse into it. Whenever you encounter a pubkey hash, we must receive the actual public key. A scriptPubKey is solvable when",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227252340,227252340,test/functional/wallet_importmulti.py
Sjors,2018-10-23T07:50:47Z,"> In this example it's not solvable because the public key isn't included.\n\nOK, that makes sense. Actually I misread the [legacy test](https://github.com/Sjors/bitcoin/blob/02d553b3e6fa78aa76cd825135a496590a243595/test/functional/wallet_importmulti.py#L134-L149): it does add the public key, which why it's solvable.",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r227264739,227264739,test/functional/wallet_importmulti.py
instagibbs,2018-10-25T19:09:43Z,"nit: if ""sigsrequired"" and ""ismine"" aren't in results can we assert their absence here?",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228299703,228299703,test/functional/wallet_importmulti.py
instagibbs,2018-10-25T19:12:42Z,nit: ismine?,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228300582,228300582,test/functional/wallet_importmulti.py
promag,2018-10-26T09:28:28Z,Could have release note.,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228461705,228461705,src/wallet/rpcwallet.cpp
promag,2018-10-26T09:53:35Z,"First time using RTTI? Maybe it could be avoided?\n\nBTW, didn't test but I don't see `variant::type()` in boost 1.47 documentation.",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228469760,228469760,src/wallet/rpcdump.cpp
meshcollider,2018-10-29T06:17:45Z,"@promag it seems to be there: https://www.boost.org/doc/libs/1_47_0/doc/html/boost/variant.html\nI could also do `dest.which() == 1 || dest.which() == 4` but that's very unclear, or define a new enum of the types, but that seemed over the top unless there's a good reason to avoid RTTI?",https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228810060,228810060,src/wallet/rpcdump.cpp
promag,2018-10-29T12:25:13Z,Indeed it's in 1.47. Anyway this is removed in #14565.,https://github.com/bitcoin/bitcoin/pull/14454#discussion_r228903672,228903672,src/wallet/rpcdump.cpp
