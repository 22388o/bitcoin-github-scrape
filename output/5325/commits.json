[
  {
    "sha": "cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmM5NDU4NmZmZjJhN2M0N2YxYjUzNTU1ZmI4MDI1MmZjYmI2NWRk",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-11-20T12:30:03Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-11-20T12:30:03Z"
      },
      "message": "Convert remaining comments in /src to doxygen format\n\nFix comment typo in crypter.h\nUpdate licenses/copyright dates",
      "tree": {
        "sha": "bc46af47595781d08e98c864f11ee9e97c0565cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc46af47595781d08e98c864f11ee9e97c0565cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5d1b1092998bc95313856d535c632ea5a8f9104",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5d1b1092998bc95313856d535c632ea5a8f9104",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5d1b1092998bc95313856d535c632ea5a8f9104"
      }
    ],
    "stats": {
      "total": 286,
      "additions": 153,
      "deletions": 133
    },
    "files": [
      {
        "sha": "c594993ea095224f10a2b598006b311e38a30794",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n@@ -15,7 +15,7 @@\n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>\n \n-/* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n+/** All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)"
      },
      {
        "sha": "c4cb96814cc4c871364ad45d0ae6ef9827886376",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -1,16 +1,16 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n-// Why base-58 instead of standard base-64 encoding?\n-// - Don't want 0OIl characters that look the same in some fonts and\n-//      could be used to create visually identical looking account numbers.\n-// - A string with non-alphanumeric characters is not as easily accepted as an account number.\n-// - E-mail usually won't line-break if there's no punctuation to break at.\n-// - Double-clicking selects the whole number as one word if it's all alphanumeric.\n-//\n+/**\n+ * Why base-58 instead of standard base-64 encoding?\n+ * - Don't want 0OIl characters that look the same in some fonts and\n+ *      could be used to create visually identical looking account numbers.\n+ * - A string with non-alphanumeric characters is not as easily accepted as an account number.\n+ * - E-mail usually won't line-break if there's no punctuation to break at.\n+ * - Double-clicking selects the whole number as one word if it's all alphanumeric.\n+ */\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n@@ -70,10 +70,10 @@ inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>\n class CBase58Data\n {\n protected:\n-    // the version byte(s)\n+    //! the version byte(s)\n     std::vector<unsigned char> vchVersion;\n \n-    // the actually encoded data\n+    //! the actually encoded data\n     typedef std::vector<unsigned char, zero_after_free_allocator<unsigned char> > vector_uchar;\n     vector_uchar vchData;\n "
      },
      {
        "sha": "07b8f2c0ae08079ac4af20c36139ed77289e8eed",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -1,5 +1,5 @@\n-// Copyright (c) 2012 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2012-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"bloom.h\"\n@@ -21,13 +21,17 @@\n using namespace std;\n \n CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn, unsigned char nFlagsIn) :\n-// The ideal size for a bloom filter with a given number of elements and false positive rate is:\n-// - nElements * log(fp rate) / ln(2)^2\n-// We ignore filter parameters which will create a bloom filter larger than the protocol limits\n+/**\n+ * The ideal size for a bloom filter with a given number of elements and false positive rate is:\n+ * - nElements * log(fp rate) / ln(2)^2\n+ * We ignore filter parameters which will create a bloom filter larger than the protocol limits\n+ */\n vData(min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n-// The ideal number of hash functions is filter size * ln(2) / number of elements\n-// Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n-// See http://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n+/**\n+ * The ideal number of hash functions is filter size * ln(2) / number of elements\n+ * Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n+ * See https://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n+ */\n isFull(false),\n isEmpty(false),\n nHashFuncs(min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),"
      },
      {
        "sha": "f54922edb98420590b0d1548bec3bc5054a891e5",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 20,
        "deletions": 16,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -1,5 +1,5 @@\n-// Copyright (c) 2012 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2012-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_BLOOM_H\n@@ -13,12 +13,14 @@ class COutPoint;\n class CTransaction;\n class uint256;\n \n-// 20,000 items with fp rate < 0.1% or 10,000 items and <0.0001%\n+//! 20,000 items with fp rate < 0.1% or 10,000 items and <0.0001%\n static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes\n static const unsigned int MAX_HASH_FUNCS = 50;\n \n-// First two bits of nFlags control how much IsRelevantAndUpdate actually updates\n-// The remaining bits are reserved\n+/**\n+ * First two bits of nFlags control how much IsRelevantAndUpdate actually updates\n+ * The remaining bits are reserved\n+ */\n enum bloomflags\n {\n     BLOOM_UPDATE_NONE = 0,\n@@ -52,13 +54,15 @@ class CBloomFilter\n     unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n \n public:\n-    // Creates a new bloom filter which will provide the given fp rate when filled with the given number of elements\n-    // Note that if the given parameters will result in a filter outside the bounds of the protocol limits,\n-    // the filter created will be as close to the given parameters as possible within the protocol limits.\n-    // This will apply if nFPRate is very low or nElements is unreasonably high.\n-    // nTweak is a constant which is added to the seed value passed to the hash function\n-    // It should generally always be a random value (and is largely only exposed for unit testing)\n-    // nFlags should be one of the BLOOM_UPDATE_* enums (not _MASK)\n+    /**\n+     * Creates a new bloom filter which will provide the given fp rate when filled with the given number of elements\n+     * Note that if the given parameters will result in a filter outside the bounds of the protocol limits,\n+     * the filter created will be as close to the given parameters as possible within the protocol limits.\n+     * This will apply if nFPRate is very low or nElements is unreasonably high.\n+     * nTweak is a constant which is added to the seed value passed to the hash function\n+     * It should generally always be a random value (and is largely only exposed for unit testing)\n+     * nFlags should be one of the BLOOM_UPDATE_* enums (not _MASK)\n+     */\n     CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak, unsigned char nFlagsIn);\n     CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}\n \n@@ -82,14 +86,14 @@ class CBloomFilter\n \n     void clear();\n \n-    // True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n-    // (catch a filter which was just deserialized which was too big)\n+    //! True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n+    //! (catch a filter which was just deserialized which was too big)\n     bool IsWithinSizeConstraints() const;\n \n-    // Also adds any outputs which match the filter to the filter (to match their spending txes)\n+    //! Also adds any outputs which match the filter to the filter (to match their spending txes)\n     bool IsRelevantAndUpdate(const CTransaction& tx);\n \n-    // Checks for empty and full filters to avoid wasting cpu\n+    //! Checks for empty and full filters to avoid wasting cpu\n     void UpdateEmptyFull();\n };\n "
      },
      {
        "sha": "d9cde5de7afa800a9011ef60ed230bfe0a815adc",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -28,19 +28,23 @@ class CScriptID;\n class CScriptCompressor\n {\n private:\n-    // make this static for now (there are only 6 special scripts defined)\n-    // this can potentially be extended together with a new nVersion for\n-    // transactions, in which case this value becomes dependent on nVersion\n-    // and nHeight of the enclosing transaction.\n+    /**\n+     * make this static for now (there are only 6 special scripts defined)\n+     * this can potentially be extended together with a new nVersion for\n+     * transactions, in which case this value becomes dependent on nVersion\n+     * and nHeight of the enclosing transaction.\n+     */\n     static const unsigned int nSpecialScripts = 6;\n \n     CScript &script;\n protected:\n-    // These check for scripts for which a special case with a shorter encoding is defined.\n-    // They are implemented separately from the CScript test, as these test for exact byte\n-    // sequence correspondences, and are more strict. For example, IsToPubKey also verifies\n-    // whether the public key is valid (as invalid ones cannot be represented in compressed\n-    // form).\n+    /**\n+     * These check for scripts for which a special case with a shorter encoding is defined.\n+     * They are implemented separately from the CScript test, as these test for exact byte\n+     * sequence correspondences, and are more strict. For example, IsToPubKey also verifies\n+     * whether the public key is valid (as invalid ones cannot be represented in compressed\n+     * form).\n+     */\n     bool IsToKeyID(CKeyID &hash) const;\n     bool IsToScriptID(CScriptID &hash) const;\n     bool IsToPubKey(CPubKey &pubkey) const;"
      },
      {
        "sha": "f7018cfdbea89908fb497a4d1fd068cf6793a5ce",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 25,
        "deletions": 24,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2013 The Bitcoin developers\n+// Copyright (c) 2009-2014 The Bitcoin developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,33 +14,33 @@ class uint256;\n const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;\n const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;\n \n-/*\n-Private key encryption is done based on a CMasterKey,\n-which holds a salt and random encryption key.\n-\n-CMasterKeys are encrypted using AES-256-CBC using a key\n-derived using derivation method nDerivationMethod\n-(0 == EVP_sha512()) and derivation iterations nDeriveIterations.\n-vchOtherDerivationParameters is provided for alternative algorithms\n-which may require more parameters (such as scrypt).\n-\n-Wallet Private Keys are then encrypted using AES-256-CBC\n-with the double-sha256 of the public key as the IV, and the\n-master key's key as the encryption key (see keystore.[ch]).\n-*/\n+/**\n+ * Private key encryption is done based on a CMasterKey,\n+ * which holds a salt and random encryption key.\n+ * \n+ * CMasterKeys are encrypted using AES-256-CBC using a key\n+ * derived using derivation method nDerivationMethod\n+ * (0 == EVP_sha512()) and derivation iterations nDeriveIterations.\n+ * vchOtherDerivationParameters is provided for alternative algorithms\n+ * which may require more parameters (such as scrypt).\n+ * \n+ * Wallet Private Keys are then encrypted using AES-256-CBC\n+ * with the double-sha256 of the public key as the IV, and the\n+ * master key's key as the encryption key (see keystore.[ch]).\n+ */\n \n /** Master key for wallet encryption */\n class CMasterKey\n {\n public:\n     std::vector<unsigned char> vchCryptedKey;\n     std::vector<unsigned char> vchSalt;\n-    // 0 = EVP_sha512()\n-    // 1 = scrypt()\n+    //! 0 = EVP_sha512()\n+    //! 1 = scrypt()\n     unsigned int nDerivationMethod;\n     unsigned int nDeriveIterations;\n-    // Use this for more parameters to key derivation,\n-    // such as the various parameters to scrypt\n+    //! Use this for more parameters to key derivation,\n+    //! such as the various parameters to scrypt\n     std::vector<unsigned char> vchOtherDerivationParameters;\n \n     ADD_SERIALIZE_METHODS;\n@@ -120,17 +120,17 @@ class CCryptoKeyStore : public CBasicKeyStore\n \n     CKeyingMaterial vMasterKey;\n \n-    // if fUseCrypto is true, mapKeys must be empty\n-    // if fUseCrypto is false, vMasterKey must be empty\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n     bool fUseCrypto;\n \n-    // keeps track of whether Unlock has run a thourough check before\n+    //! keeps track of whether Unlock has run a thorough check before\n     bool fDecryptionThoroughlyChecked;\n \n protected:\n     bool SetCrypted();\n \n-    // will encrypt previously unencrypted keys\n+    //! will encrypt previously unencrypted keys\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n     bool Unlock(const CKeyingMaterial& vMasterKeyIn);\n@@ -189,7 +189,8 @@ class CCryptoKeyStore : public CBasicKeyStore\n         }\n     }\n \n-    /* Wallet status (encrypted, locked) changed.\n+    /**\n+     * Wallet status (encrypted, locked) changed.\n      * Note: Called without locks held.\n      */\n     boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;"
      },
      {
        "sha": "1c572d8970d7aa67f399c2cbd68ae808dc4d7a78",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_DB_H\n@@ -50,7 +50,7 @@ class CDBEnv\n     void MakeMock();\n     bool IsMock() { return fMockDb; }\n \n-    /*\n+    /**\n      * Verify that database file strFile is OK. If it is not,\n      * call the callback to try to recover.\n      * This must be called BEFORE strFile is opened.\n@@ -60,7 +60,7 @@ class CDBEnv\n                         RECOVER_OK,\n                         RECOVER_FAIL };\n     VerifyResult Verify(std::string strFile, bool (*recoverFunc)(CDBEnv& dbenv, std::string strFile));\n-    /*\n+    /**\n      * Salvage data from a file that Verify says is bad.\n      * fAggressive sets the DB_AGGRESSIVE flag (see berkeley DB->verify() method documentation).\n      * Appends binary key/value pairs to vResult, returns true if successful."
      },
      {
        "sha": "5ce7e6129469475489d0d32a1d46b76108745302",
        "filename": "src/ecwrapper.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -13,9 +13,11 @@\n \n namespace {\n \n-// Perform ECDSA key recovery (see SEC1 4.1.6) for curves over (mod p)-fields\n-// recid selects which key is recovered\n-// if check is non-zero, additional checks are performed\n+/**\n+ * Perform ECDSA key recovery (see SEC1 4.1.6) for curves over (mod p)-fields\n+ * recid selects which key is recovered\n+ * if check is non-zero, additional checks are performed\n+ */\n int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned char *msg, int msglen, int recid, int check)\n {\n     if (!eckey) return 0;"
      },
      {
        "sha": "4efde516507b2f3e15e7d671e6d2fe88dc6e89c1",
        "filename": "src/ecwrapper.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/ecwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/ecwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.h?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -12,7 +12,7 @@\n \n class uint256;\n \n-// RAII Wrapper around OpenSSL's EC_KEY\n+/** RAII Wrapper around OpenSSL's EC_KEY */\n class CECKey {\n private:\n     EC_KEY *pkey;\n@@ -25,10 +25,12 @@ class CECKey {\n     bool SetPubKey(const unsigned char* pubkey, size_t size);\n     bool Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig);\n \n-    // reconstruct public key from a compact signature\n-    // This is only slightly more CPU intensive than just verifying it.\n-    // If this function succeeds, the recovered public key is guaranteed to be valid\n-    // (the signature is a valid signature of the given data for that key)\n+    /**\n+     * reconstruct public key from a compact signature\n+     * This is only slightly more CPU intensive than just verifying it.\n+     * If this function succeeds, the recovered public key is guaranteed to be valid\n+     * (the signature is a valid signature of the given data for that key)\n+     */\n     bool Recover(const uint256 &hash, const unsigned char *p64, int rec);\n \n     bool TweakPublic(const unsigned char vchTweak[32]);"
      },
      {
        "sha": "42479206c89a68945f378555614a87b3e07374da",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -1,5 +1,5 @@\n-// Copyright (c) 2012-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2012-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_LEVELDBWRAPPER_H\n@@ -24,7 +24,7 @@ class leveldb_error : public std::runtime_error\n \n void HandleError(const leveldb::Status& status) throw(leveldb_error);\n \n-// Batch of changes queued to be written to a CLevelDBWrapper\n+/** Batch of changes queued to be written to a CLevelDBWrapper */\n class CLevelDBBatch\n {\n     friend class CLevelDBWrapper;\n@@ -64,25 +64,25 @@ class CLevelDBBatch\n class CLevelDBWrapper\n {\n private:\n-    // custom environment this database is using (may be NULL in case of default environment)\n+    //! custom environment this database is using (may be NULL in case of default environment)\n     leveldb::Env* penv;\n \n-    // database options used\n+    //! database options used\n     leveldb::Options options;\n \n-    // options used when reading from the database\n+    //! options used when reading from the database\n     leveldb::ReadOptions readoptions;\n \n-    // options used when iterating over values of the database\n+    //! options used when iterating over values of the database\n     leveldb::ReadOptions iteroptions;\n \n-    // options used when writing to the database\n+    //! options used when writing to the database\n     leveldb::WriteOptions writeoptions;\n \n-    // options used when sync writing to the database\n+    //! options used when sync writing to the database\n     leveldb::WriteOptions syncoptions;\n \n-    // the database itself\n+    //! the database itself\n     leveldb::DB* pdb;\n \n public:"
      },
      {
        "sha": "59f7778db17248bbd2223a556964e9cc065b9858",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"timedata.h\"\n@@ -17,14 +17,13 @@ using namespace std;\n static CCriticalSection cs_nTimeOffset;\n static int64_t nTimeOffset = 0;\n \n-//\n-// \"Never go to sea with two chronometers; take one or three.\"\n-// Our three time sources are:\n-//  - System clock\n-//  - Median of other nodes clocks\n-//  - The user (asking the user to fix the system clock if the first two disagree)\n-//\n-//\n+/**\n+ * \"Never go to sea with two chronometers; take one or three.\"\n+ * Our three time sources are:\n+ *  - System clock\n+ *  - Median of other nodes clocks\n+ *  - The user (asking the user to fix the system clock if the first two disagree)\n+ */\n int64_t GetTimeOffset()\n {\n     LOCK(cs_nTimeOffset);"
      },
      {
        "sha": "64595ffc37aa755d89170f49fc269eda588f788a",
        "filename": "src/timedata.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/timedata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/timedata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.h?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_TIMEDATA_H\n@@ -12,7 +12,8 @@\n \n class CNetAddr;\n \n-/** Median filter over a stream of values.\n+/** \n+ * Median filter over a stream of values.\n  * Returns the median of the last N numbers\n  */\n template <typename T>\n@@ -67,7 +68,7 @@ class CMedianFilter\n     }\n };\n \n-/* Functions to keep track of adjusted P2P time */\n+/** Functions to keep track of adjusted P2P time */\n int64_t GetTimeOffset();\n int64_t GetAdjustedTime();\n void AddTimeData(const CNetAddr& ip, int64_t nTime);"
      },
      {
        "sha": "9a98fcc41b7a2cf706d5e4998e248565ae3d5c8f",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_TXDB_H\n@@ -17,11 +17,11 @@\n class CCoins;\n class uint256;\n \n-// -dbcache default (MiB)\n+//! -dbcache default (MiB)\n static const int64_t nDefaultDbCache = 100;\n-// max. -dbcache in (MiB)\n+//! max. -dbcache in (MiB)\n static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 4096 : 1024;\n-// min. -dbcache in (MiB)\n+//! min. -dbcache in (MiB)\n static const int64_t nMinDbCache = 4;\n \n /** CCoinsView backed by the LevelDB coin database (chainstate/) */"
      },
      {
        "sha": "56f7f44a16228a7e962cf0c990081a0693266994",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 26,
        "deletions": 23,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc94586fff2a7c47f1b53555fb80252fcbb65dd/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=cbc94586fff2a7c47f1b53555fb80252fcbb65dd",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_UINT256_H\n@@ -255,8 +255,10 @@ class base_uint\n         return sizeof(pn);\n     }\n \n-    // Returns the position of the highest bit set plus one, or zero if the\n-    // value is zero.\n+    /**\n+     * Returns the position of the highest bit set plus one, or zero if the\n+     * value is zero.\n+     */\n     unsigned int bits() const;\n \n     uint64_t GetLow64() const\n@@ -301,26 +303,27 @@ class uint256 : public base_uint<256> {\n     uint256(uint64_t b) : base_uint<256>(b) {}\n     explicit uint256(const std::string& str) : base_uint<256>(str) {}\n     explicit uint256(const std::vector<unsigned char>& vch) : base_uint<256>(vch) {}\n-\n-    // The \"compact\" format is a representation of a whole\n-    // number N using an unsigned 32bit number similar to a\n-    // floating point format.\n-    // The most significant 8 bits are the unsigned exponent of base 256.\n-    // This exponent can be thought of as \"number of bytes of N\".\n-    // The lower 23 bits are the mantissa.\n-    // Bit number 24 (0x800000) represents the sign of N.\n-    // N = (-1^sign) * mantissa * 256^(exponent-3)\n-    //\n-    // Satoshi's original implementation used BN_bn2mpi() and BN_mpi2bn().\n-    // MPI uses the most significant bit of the first byte as sign.\n-    // Thus 0x1234560000 is compact (0x05123456)\n-    // and  0xc0de000000 is compact (0x0600c0de)\n-    // (0x05c0de00) would be -0x40de000000\n-    //\n-    // Bitcoin only uses this \"compact\" format for encoding difficulty\n-    // targets, which are unsigned 256bit quantities.  Thus, all the\n-    // complexities of the sign bit and using base 256 are probably an\n-    // implementation accident.\n+    \n+    /**\n+     * The \"compact\" format is a representation of a whole\n+     * number N using an unsigned 32bit number similar to a\n+     * floating point format.\n+     * The most significant 8 bits are the unsigned exponent of base 256.\n+     * This exponent can be thought of as \"number of bytes of N\".\n+     * The lower 23 bits are the mantissa.\n+     * Bit number 24 (0x800000) represents the sign of N.\n+     * N = (-1^sign) * mantissa * 256^(exponent-3)\n+     * \n+     * Satoshi's original implementation used BN_bn2mpi() and BN_mpi2bn().\n+     * MPI uses the most significant bit of the first byte as sign.\n+     * Thus 0x1234560000 is compact (0x05123456)\n+     * and  0xc0de000000 is compact (0x0600c0de)\n+     * \n+     * Bitcoin only uses this \"compact\" format for encoding difficulty\n+     * targets, which are unsigned 256bit quantities.  Thus, all the\n+     * complexities of the sign bit and using base 256 are probably an\n+     * implementation accident.\n+     */\n     uint256& SetCompact(uint32_t nCompact, bool *pfNegative = NULL, bool *pfOverflow = NULL);\n     uint32_t GetCompact(bool fNegative = false) const;\n "
      }
    ]
  }
]