petertodd,2014-06-16T20:20:24Z,"Why is there absolutely no privacy at all in this feature? You could easily search by prefix rather than being forced to always give the peer the exact outputs you are interested in. (recall how leveldb queries work re: the iterators)\n\nAlso, re: security, Lighthouse is particularly bad as lying about UTXO's - falsely claiming they don't exist/are spent when they are unspent - can certainly lead ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46231037,46231037,
petertodd,2014-06-16T20:24:04Z,One last thing: needs a NODE_GETUTXO service bit - having an unencrypted copy of the UTXO set is definitely a service that not all nodes can be expected to have. (recall @gmaxwell's clever suggestion of self-encrypting the UTXO set to avoid issues around storage of problematic data)\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46231501,46231501,
mikehearn,2014-06-16T20:44:16Z,"If the app thinks a pledge is revoked it won't be included in the contract that is broadcast, so it can't lead to overpayment.\n\nRe: encrypted UTXO set. That makes no sense. Nodes must be able to do this lookup internally to operate. Gregory's suggestion was to obfuscate the contents _on disk only_ to avoid problems with silly AV scanners, not that the node itself can't read its own database.\n\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46234028,46234028,
petertodd,2014-06-16T20:57:28Z,"> If the app thinks a pledge is revoked it won't be included in the contract that is broadcast, so it can't lead to overpayment.\n\nThe attacker would of course broadcast the pledges themselves; pledges are public information.\n\n> Re: encrypted UTXO set. That makes no sense.\n\nI was thinking in the case where privacy is implemented, but actually on second thought my complaint is invalid for this",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46236282,46236282,
mikehearn,2014-06-16T21:00:54Z,"Pledges are not public. You're making assumptions about the design without understanding it.\n\nYour second statement is nonsensical. The code does return ""the UTXO data associated with the UTXO"", what else would it do?\n\nYour third statement is something I already know: I am the one who implemented LevelDB for Bitcoin. My point stands. This patch is what it is. If you'd like it to be better feel",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46236773,46236773,
petertodd,2014-06-16T22:17:37Z,"> Pledges are not public. You're making assumptions about the design without understanding it.\n\nEither pledges are public information and can be attacked, or they are not and some single user is running the crowdfund, (the project owner) in which case the overhead of just using existing systems is not a big deal. In particular, in the ""single project owner design"" all pledges can easily be added",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46245259,46245259,
laanwj,2014-06-17T05:50:16Z,"Looks OK to me, implementation-wise. Talking of testing, if you cannot integrate testing into the unit tester suite for some reason I think at least some Python script should be included in `qa/...` to be able to test this functionality. Such a test script could create a node, import a bootstrap file, and launch `getutxos` queries at it.\n\nI think we are at the point that we need to define an ext",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46269705,46269705,
petertodd,2014-06-17T06:34:32Z,"@laanwj I suggested awhile back we use a simple bitmask:\n\n```\nx0000000000000001.testnet-seed-mask.bitcoin.petertodd.org\n```\n\nReturning all seeds with at least NODE_NETWORK set. There's most likely to be a relatively small number of combinations people use, so DNS caching will still work fine. (though I'm no DNS expert) Of course, as always relying heavily on seeds is foolish, so just setting",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46271980,46271980,
laanwj,2014-06-17T06:51:16Z,"@petertodd The problem with service bits is that there is only a very limited number of them. It would, IMO, be better to have a string namespace defining extensions. A new version of the network protocol could add a command that returns a list of strings defining the supported extensions and maybe even per-extension versions. It's still very simple and conflicts could be much more easily avoided.",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46272958,46272958,
petertodd,2014-06-17T06:59:21Z,"@laanwj Well we've got 64 of them, 56 if you reserve some for experiments; I don't see us using up that many all that soon. A string namespace thing can be added in the future for sure, but I just don't see the short-term, or even medium-term, need. After all, NODE_BLOOM was AFAIK the first fully fleshed out proposal to even use a single service bit, with the closest runner up being @sipa's though",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46273448,46273448,
laanwj,2014-06-17T07:04:17Z,"It's not about fear of running out but about reducing the need for central coordination. Anyhow, let's stop hijacking this thread.\nUsing a service bit in this case is fine with me.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46273831,46273831,
petertodd,2014-06-17T07:07:18Z,@laanwj Agreed.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46274024,46274024,
mikehearn,2014-06-17T09:44:18Z,"I don't think the attack you have in mind works.\n\nLet's assume that pledges are public for a moment, e.g. because the user chooses to publish them or collect them in a way that inherently makes them public, like people attaching them to forum posts. I don't fully get what attack you have in mind, but I think you're saying if you can control the internet connection of the fundraiser for an extend",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46286966,46286966,
laanwj,2014-06-17T09:51:59Z,"@mikehearn Binding features to version numbers assumes a linear, centralized progression. It means that everyone that implements A also needs to implement B even though they are unrelated. I don't think this is desirable anymore.\n\nAnd as said above, using a service bit is fine with me. I do think we need another mechanism for signalling extensions to the protocol in the future, but for now we're",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46287612,46287612,
mikehearn,2014-06-17T10:04:33Z,"OK, I can add a service bit, although AFAIK nobody actually has any code that searches out nodes with a particular bit? I'm not sure Core does and bitcoinj definitely doesn't. But that can be resolved later.\n\nThe question of optionality in standards is one with a long history, by the way. The IETF has a guide on the topic here:\n\nhttp://tools.ietf.org/html/rfc2360#section-2.10\n\nDeciding when ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46288726,46288726,
maaku,2014-06-17T10:14:42Z,"NODE_NETWORK is a hack. It is conflating two things: storing the whole block chain, and storing the current UTXO set. These are orthogonal things. I think there should be a service bit here, but the meaning is not constrained to just a 'getutxos' call. NODE_NETWORK should be split into NODE_ARCHIVAL and NODE_UTXOSET, with the latter eventually indicating presence of other things as well, such as a",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46289574,46289574,
laanwj,2014-06-17T10:17:08Z,"I agree it would be preferable for everyone to agree and do the same thing, but that makes progress incredibly difficult. From my (maybe over-cynical) view of the bitcoin community that means that nothing new ever happens. There's always some reason not to agree with a change, it could be some perceived risk, disagreement on the feature set or how the interface should look, or even paranoid fantas",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46289780,46289780,
maaku,2014-06-17T10:20:40Z,@laanwj how else do you indicate presence of this one particular p2p message except by version bump? That's what the version field is for.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46290043,46290043,
mikehearn,2014-06-17T10:23:43Z,"Ah, you're right, that's why software projects have maintainers instead of requiring universal agreement from whoever shows up :) There will always be people who disagree or want something better (but don't want to do the work). Sometimes those disagreements will make sense, and other times they will be bike shedding. \n\nIf we look at projects like the kernel, it's successful partly because Linus",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46290263,46290263,
maaku,2014-06-17T10:32:16Z,"@mikehearn it would be better imho if the return value included the height and hash of the best block. That would help you figure out what is going on when you get different answers from peers, and parallels the information returned by a future getutxos2 that returns merkle proofs.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46290893,46290893,
mikehearn,2014-06-17T10:46:11Z,Good idea! I'll implement that this afternoon or tomorrow.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46292091,46292091,
petertodd,2014-06-17T11:03:46Z,"@mikehearn Sybil attacking the Bitcoin really isn't all that hard; I really hope Lighthouse doesn't blindly trust the DNS seeds like so much other bitcoinj code does. re: having getutxos return actual UTXO's vs. spent/unspent, I see nothing in the design of Lighthouse that prevents pledges from containing the transactions required to prove the UTXO data. Also, last I talked to Gregory Maxwell abou",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46293420,46293420,
laanwj,2014-06-17T11:11:11Z,"@mikehearn It may have been that way in the past, but Bitcoin Core is not the only node implementation anymore. Don't confuse leadership over this project with leadership over the global P2P network, which has various other actors as well now.\n\n**Edit:** another  concrete advantage of an optional-feature approach is that features can be disabled again if they either prove to be not so useful for",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46293990,46293990,
mikehearn,2014-06-17T11:49:22Z,"@laanwj New version numbers can mean anything, including ""feature X is no longer supported"". So I don't think we need service bits for that.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46296844,46296844,
sipa,2014-06-17T11:51:07Z,"We've talked about it, and I'm sure you're aware of my opinion already, but\nI'll still repeat it here to offer for wider discussion.\n\nI do not believe we should encourage users of the p2p protocol to rely on\nunverifiable data. Anyone using 'getutxos' is almost certainly not\nmaintaining a UTXO set already, and thus not doing chain verification, so\nnot able to check that whatever a peer claims",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46296975,46296975,
mikehearn,2014-06-17T11:58:31Z,"I think I put all my comments on that in the original writeup. Yes, in the ideal world everything would be perfect and authenticated by ghash.io ;) However we do not live in such a world and are dragging ourselves towards it one step at a time.\n\nBTW, on height in version message being ""deprecated"", that's the first I've heard of this. SPV clients use it. If someone wants to deprecate that they'r",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46297558,46297558,
sipa,2014-06-17T12:03:26Z,"Oh, not in the protocol. I just mean that full nodes don't use it at all\nanymore. I wish it didn't exist in the first place, but it's too\nunimportant to bother changing in the protocol.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46297934,46297934,
mikehearn,2014-06-17T12:13:31Z,"Ah, OK.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46298733,46298733,
petertodd,2014-06-17T12:30:38Z,"@sipa +1\n\nThere's nothing wrong with trust. We'd like everything to be decentralized, but we don't live in a perfect world so occasionally we introduce trust to solve problems that we don't have decentralized solutions for yet. We did that in the payment protocol because we had no other way to authenticate payments; we should be doing that in UTXO lookup, because we have no other way to authenti",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46300192,46300192,
laanwj,2014-06-17T12:37:01Z,"@sipa Agreed - `getutxos` is in the same category of 'information queries from trusted node' as the mempool check for unconfirmed/conflicted transactions that an external wallet could use.\n\nRegarding the height in version messages: yes, nodes have lied about this, resulting in 'funny' information in the UI so we don't use it anymore, not even behind a median filter. See #4065.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46300757,46300757,
mikehearn,2014-06-17T13:17:57Z,"I have a section in the commit message about philosophy for a reason - this discussion is now firmly in the realm of the philosophical.\n\nThere have been cases in the past few years where people loudly proclaimed that something should not be done because of $ATTACK or $CONCERN, then we did it, and so far things worked out OK. A good example of this was SPV clients in general, a few people said:\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46304861,46304861,
gavinandresen,2014-06-17T13:38:06Z,"Sorry @sipa, I agree with Mike-- lets add this feature.\n\nRE: service bits versus version numbers: In my experience, APIs/protocols fail when they wimp out and make lots of things optional. It becomes impossible to test the 2^N combinations of N optional features once N is greater than... oh, two.\n\nThe unspent transaction output set is something every 'full' node should know, so I see no reason",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46307358,46307358,
sipa,2014-06-17T15:02:02Z,"> RE: fears that lazy programmers will Architect In Bad Ways: ""better is\n> better."" Letting SPV clients query the state of a full node's UTXO set is\n> useful functionality. And simple is generally more secure than complex.\n\nI don't disagree at all that it is useful. I even gave an extra use case\nfor it (mempool conflict checking).\n\nI just want to not make the distinction between the p2p sys",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46319019,46319019,
gmaxwell,2014-06-17T16:04:31Z,"This doesn't appear incompatible with the txout set encryption.  The idea there is to key the utxo set with some hash of the txid:vout and encrypt the data with some different hash of the txid:vout, thus the node itself does not have the data needed to decrypt the txout until the moment its needed.  Since this would provide the txid's it would still work even if it returned the data... though for ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46327971,46327971,
maaku,2014-06-17T17:55:40Z,"My +1 goes to both @sipa and @mikehearn on this. This is a trusted call, and we are giving people enough rope to shoot themselves in the foot. Ideally stuff like this should be disabled by default and/or placed behind a special authenticated connection. But that is a separate issue necessitating a separate pull request -- this gets my ACK once best block hash & height is addd.\n\nWhen I first hear",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46342144,46342144,
jgarzik,2014-06-17T21:52:55Z,"&lt;vendor hat: on&gt;\nThis duplicates multiple other open source projects such as Insight, which provides the same queries and more: https://github.com/bitpay/insight-api\n\nRunning Insight is trivial for anyone running bitcoind.  Anyone not running bitcoind can probably ask or find someone trusted who is already running such a server.\n\nI'm just not seeing a driving use case here [that is not ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46370650,46370650,
laanwj,2014-06-18T06:32:10Z,"@jgarzik Using insight for this seems overkill, as it needs no extra indexes - bitcoind has the required information ready. If this would have been a request to add a private RPC call instead of a public P2P network message, IMO it would have been an easy ACK.\n\n@sipa\n\n> I don't disagree at all that it is useful. I even gave an extra use case for it (mempool conflict checking). I just want to n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46400539,46400539,
mikehearn,2014-06-18T07:28:22Z,"It does not make sense to run a full blown block explorer for something that all bitcoind's can serve without any additional indexes.\n\n@drak There is no danger to people's money. Have you read my original post or the analysis above? Even if you disagree for some reason, you just .... don't run an app that uses the message. \n\n@maaku Thanks, it's nice to see someone weigh the potential benefits ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46403960,46403960,
petertodd,2014-06-18T08:30:33Z,@sipa made a great point above in that getutxos is fundamentally even worse than bloom filters in terms of trust because there is absolutely no security at all. At least CMerkleBlock's have strong assurances that a given transaction exists even if there's no current way to know if you've seen all transactions. (which incidentally is something we can even reasonably good assurance for via random sa,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46408911,46408911,
laanwj,2014-06-18T10:00:23Z,Talking of Electrum: At some point in a mailing list discussion the author of Electrum was also interested in UTXO queries. Though the exact semantics were different: a query of transactions by output/address instead of txout point (see https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04744.html). That would make it possible to implement Electrum server on top of bitcoind ,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46416781,46416781,
BitcoinPullTester,2014-06-18T10:06:08Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/93a2b928dca7d1d2b2aa17f991a53a99ee02fe86 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46417323,46417323,
jgarzik,2014-06-18T11:44:07Z,"""NODE_NETWORK already is a hack that conflates different 'services'""\n\nIt's not a hack.  It continues to mean NODE_FULL, whatever that means.  For years, clients really only cared about the binary question ""full node: yes or no?""  It is not a hack to provide what the clients want.\n\nFor the purposes of this PR, you can bump the protocol version and things will be just fine; as noted, other full ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46425009,46425009,
laanwj,2014-06-18T12:45:35Z,"@jgarzik Yes it is obvious how NODE_NETWORK is defined now and in the past, but going forward it's less clear what services a full node should offer. Or even what a ""full node"" is. Internally it needs to verify UTXOs but that doesn't mean it needs to offer that capability to random other nodes on the network.\nIt could be said that a full node, to maintain the network\n- needs to verify transactio",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46430311,46430311,
jgarzik,2014-06-18T14:22:06Z,"NODE_NETWORK specifies quite precisely what the node offers.  It is not a hack, it is very specific.\n\nFolks are attempting to redefine it as a hack, simply because the model of lumping all new features under NODE_NETWORK is not sustainable moving forward.\n\nAnyway, this is semantics, moving on, to a more on-topic issue:\n\nThere is clearly a desire to generalize the P2P network.  Make it a netw",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46441691,46441691,
jtimon,2014-06-18T14:56:43Z,"What about implementing this using @jgarzik's #2844 instead of the p2p protocol?\nSeems like the right place to put trusted calls.\nIf/when in the future committed utxo's (or some other mechanism) allows these calls to be trust-less, they can be moved to the p2p protocol. Probably I'm missing the point of putting it directly in the protocol.\n\nBeing accepted directly in the protocol (maybe with p",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46446582,46446582,
mikehearn,2014-06-18T15:06:30Z,"@jgarzik Bitcoin _is_ a money-services-and-query network! Maybe in future it won't be, but people have been paper napkinning entirely new network architectures for years, so it'd be a mistake to hold up changes to the existing protocol because someone wrote an email imagining some radical evolution somewhere. We need to work with what we have today. So IMHO theoretical debates about what the perfe",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46448064,46448064,
sipa,2014-06-18T15:21:44Z,"I agree that discussion about what the properties and serviced offered by\nthe network should be should not be done on this pull request.\n\nOn the other hand, I think extensions to the P2P protocol itself also\ndeserve discussion on the mailinglist, perhaps before implementing it...\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46450205,46450205,
petertodd,2014-06-18T15:23:13Z,@mikehearn A bad idea with a working implementation is still a bad idea; the actual code is the least difficult part of doing Bitcoin development. It shouldn't be a surprise that people who believe the idea is fundamentally bad haven't bothered wasting their time reviewing the code. Secondly that we're seeing strongly held fundamental disagreements about whether the idea is good at all strongly su,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46450423,46450423,
jgarzik,2014-06-18T15:24:12Z,"@mikehearn You elided ""generalized""   The current network supports operations necessary to maintain the full node network, and service SPV clients.  That is a focused, specific purpose. It is not a generalized query network, with query functions added _because it was easy to add to bitcoind_\n\nThe use case mentioned can be easily handled using Insight or another existing UTXO query software.\n\nT",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46450554,46450554,
jgarzik,2014-06-18T15:24:59Z,"@jtimon I would ACK such a patch.  Localized queries are fine by me.\n\nIt is adding the query to the P2P network without thinking it through that is the problem.\n\nETA:  I have a similar use case @mikehearn auctions: https://github.com/jgarzik/auctionpunk   It has the same problem:  You make a pledge (sign a transaction), but it might be double-spent away etc. by the end of the auction.  You do ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46450645,46450645,
petertodd,2014-06-18T15:29:45Z,"@jgarzik CoinJoin implementations also have that need, and again we're pursuing alternate ways to solve the issue. (trusted server w/ Dark Wallet, general anti-DoS mechanisms for decentralized CoinJoin)\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46451365,46451365,
jgarzik,2014-06-18T15:31:53Z,"@petertodd It is poor form to make assumptions about what others have reviewed, or not.  The code in this PR was reviewed by myself and is straightforward.\n\nThat does not change any of the larger issues.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46451681,46451681,
petertodd,2014-06-18T15:36:31Z,"@jgarzik By ""code review"" I mean the whole process, which includes discussing it - at least ACKing it. I did as much review as you did, but I wouldn't call that the full process of code review.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46452337,46452337,
mikehearn,2014-06-18T15:39:57Z,"We're going around in circles now. @jgarzik Re: Insight - as already pointed out, it makes no sense to run a full blown very expensive block explorer just for access to the UTXO set. I know it's made by your employer but it's really just not relevant here at all.\n\nThis is not a major change to the network, that's melodramatic. It's a tiny patch. It may not match with your personal vision of what",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46452838,46452838,
jgarzik,2014-06-18T15:48:43Z,"@mikehearn: _"" the Bitcoin protocol has always been about whatever is needed for a decentralised financial system""_    This is _your_ vision, sure.\n\nIf you just want to have a private conversation with Gavin, then take it to private email.  If you wish to participate in an open source project, you are going to have to suffer through opinions other than your own.\n\nIgnoring 100% of @petertodd 's",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46454070,46454070,
mikehearn,2014-06-18T15:53:29Z,"I'm happy to suffer others opinions ;) But the outcome obviously can't be based on consensus (there are no non-trivial changes to bitcoin that have had consensus in recent times).\n\nWhich criticisms do you have in mind? Actually I think I addressed all of them, either in the original writeup or my followup comments. Certainly all the code comments were addressed. The others are why I included a """,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46454764,46454764,
petertodd,2014-06-18T16:10:11Z,"@mikehearn Of course, the beautiful thing is that we don't need consensus: you can always create a Bitcoin Core fork for people who want to volunteer to provide decentralized and unauthenticatable services to others if you can't get consensus that doing so is a good idea. You're welcome to copy the preferential peering code from my replace-by-fee branch so those nodes can find each other more easi",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46457040,46457040,
jtimon,2014-06-18T16:37:46Z,"@mikehearn you didn't addressed my suggestion about supporting this from a rest call extending @jgarzik's PR #2844 Wouldn't that be enough for your purposes?\nI understand that using another software with its own database and indexes may not be satisfactory for you (specially when you have all the data you need here). But this would be in bitcoind without being part of the p2p protocol (yet, maybe",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46460503,46460503,
jgarzik,2014-06-18T16:44:35Z,"A direct query interface (e.g. HTTP REST) makes much more sense for the outlined use case(s), due to the trust issues.\n\nIt is difficult to fathom that a completely untrusted interface will be used remotely across a network by a KickStarter fund administrator, when a trusted local interface is also available.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46461295,46461295,
mikehearn,2014-06-18T16:56:33Z,"@jtimon I didn't address that because it's the same suggestion as ""use Electrum"" or ""use your own trusted nodes"" which has been discussed a lot above. The wire format (p2p or http) makes no real difference.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46462824,46462824,
jtimon,2014-06-18T17:03:49Z,"Yes, since it is a trusted call you will have to use your own trusted\nnodes. If in the future there's committed utxo then it make sense to put it\nin the p2p protocol since you don't require trust anymore (you trust the\nmost work).\nProbably I'm missing something with the references to Electrum. I didn't\nproposed that and I'm not sure what Electrum has to do with this PR.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46463811,46463811,
mikehearn,2014-06-18T17:16:15Z,"Please read this PR from beginning to end, as like I said, this discussion has started to go round in circles. My commit message has a complete discussion of authentication in it, along with why I don't think the current design is a problem for my use case, and there's more discussion in the followups which is where Electrum is mentioned.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46465294,46465294,
maaku,2014-06-18T17:37:19Z,"@jtimon, Electrum has as much or as little to do with this PR as the REST api. @mikehearn intends to use this with untrusted hosts: query the utxoset from multiple peers, using both direct connections and multiple TOR exit nodes. He does some analysis of the attack vectors in the OP. The unstated assumption (and a fair one) is that running a full node is just not an option.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46467876,46467876,
mikehearn,2014-06-18T18:23:50Z,"@drak I have not handwaved, I have given careful analysis of why I think this change is fine, and why I feel the risk is low enough to make an attempt worthwhile. The proposed alternatives are not better. They are merely the same thing but less decentralised, on the assumption that the approach I'd like to try will fail. \n\nDo you have a _specific_ concern with my analysis?\n\nIf you are concerne",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46473957,46473957,
petertodd,2014-06-19T07:46:21Z,"@mikehearn Yes, perfect is the enemy of good. Using Electrum isn't perfect, but it is good; certainly better than trusting random strangers with no authentication and a whole multitude of attack vectors.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46532438,46532438,
mikehearn,2014-06-19T08:40:10Z,"We disagree on that, fundamentally. As this new command costs nothing (ignoring pie in the sky future total redesigns that nobody has even started coding), how about, we merge this in, you build apps your way based on Electrum or heck just build apps period, and I'll build apps my way. Then those apps can compete on decentralisation and security. Experience will tell us who is right. Sound fair?\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46536269,46536269,
petertodd,2014-06-19T09:06:13Z,"@mikehearn Note how I'm not the one asking to add highly controversial features to Bitcoin Core and complaining that people don't just merge them in instantly. You're welcome to add these features (and more!) to a fork and convince people to volunteer provide those services.\n\nSecondly, the whole ""Peter never gets anything done"" thing is a rather dull insult - I am involved in multiple projects a",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46538431,46538431,
mikehearn,2014-06-19T09:24:32Z,"Sybil attacking the tiny testnet where you run one of the DNS seeds isn't an interesting experiment - but if you want to break a resource other developers rely on and annoy them in the process in order to prove not much, go ahead.\n\nA better experiment is this. I have in my pocket a phone. In 48 hours I will look at what nodes it's connected to. If you own the majority of them and can keep contro",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46539975,46539975,
petertodd,2014-06-19T09:33:46Z,"@mikehearn Obviously I'm going to be leaving the DNS seed untouched; wouldn't be a very interesting attack otherwise. Besides, we already know that my node going down was enough to make bitcoinj-using software fail because it all had a single point of failure.\n\nre: a bloom filter attack, all (?) SPV clients using them only ask for a given block one time right? (although from multiple peers at on",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46540817,46540817,
mikehearn,2014-06-19T09:43:15Z,"Alright, so go sybil attack a tiny network without touching your DNS seed then. What are you trying to prove? That attacking small networks is cheap? You could outmine the testnet quite cheaply too, thus rendering UTXO proofs also irrelevant. Nobody disputes that attacks are possible if someone puts enough effort in, the difference between us is that the observation that:\n\na) The gains are not o",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46541596,46541596,
petertodd,2014-06-19T09:53:09Z,"> why don't you go advise others not to use it, and let their products compete on decentralisation and security instead?\n\nObviously adding this feature to Bitcoin Core is inherently putting our stamp of approval on it and will be taken as advice to use it.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46542389,46542389,
mikehearn,2014-06-19T10:07:43Z,"Oh, well good thing everyone always follows such advice then, that must explain why there are no wallets that have created their own client/server protocol :)\n\nThe BIP can explain the tradeoffs and attacks involved just as it does for Bloom filtering and HD wallets, etc. It can also link to this discussion. I'm sure developers can come to their own conclusions, as they have done many times alrea",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46543523,46543523,
maaku,2014-06-19T10:13:03Z,"If unanimous consensus from this group of commentators is required in order to get something merged, then perhaps bitcoin should be forked. At least we'd then be able to get some work done. A culture of what-ifism goes nowhere.\n\nThe text of the pull request lays out a very straight forward use case and analysis of attack vectors. Does anyone have any specific comments or concerns on what is actu",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46543947,46543947,
petertodd,2014-06-19T10:57:52Z,"@maaku This isn't ""what-ifism"", this is what you expect from competent developers working on a project where mistakes are extremely expensive. (heck, I personally have spoken to people with a sum total of a low five figures of losses from zeroconf doublespends) If anything, Bitcoin Core development is particularly bad because we're setting standards that other developers will use in turn - unauthe",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46547246,46547246,
mikehearn,2014-06-19T12:40:31Z,"Oh, I'm going to break my ""end of argument"" rule just once, to outline another use case for getutxo that I didn't mention before (because it's not relevant quite yet), and maybe this one will interest @sipa  and change his mind :)\n\nFloating fees are coming, and as part of that SPV clients need to know what the fee levels are so they can craft transactions. Gavin and I have discussed how to do th",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46554983,46554983,
maaku,2014-06-19T15:40:56Z,"Chain height is in the UTXO set (along with tx nVersion and coinbase\nboolean flag). Height at the very least should be returned by getutxos...\nOn Jun 19, 2014 5:41 AM, ""Mike Hearn"" notifications@github.com wrote:\n\n> Oh, I'm going to break my ""end of argument"" rule just once, to outline\n> another use case for getutxo that I didn't mention before (because it's not\n> relevant quite yet), and ma",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46577272,46577272,
laanwj,2014-06-19T16:46:09Z,"@drak Right, an open source project depends on random people contributing and reviewing changes.\n\nHaving said that, I still haven't heard any arguments that this change is risky to either those running Bitcoin Core or to the Bitcoin P2P network itself. Querying the UTXO database is quite cheap (by design) so it does not pose more DoS risk than the other P2P protocol messages. It doesn't pose mor",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46585886,46585886,
mikehearn,2014-06-19T16:47:13Z,"@maaku Ah! So what's needed for priority calculation is already there. Excellent. Loading the block to calculate the Merkle branch is extra work that no client would use today. I'd rather add that later, once txv3 has happened and all the complicated client-side code to do low-trust fee/prio calculation is implemented so we know it works.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46586054,46586054,
maaku,2014-06-19T17:06:41Z,"Well that triggered some thoughts about this pull request though. I would consider prepending the tx.nVersion and block height fields to the response (using VarInt serialization for minimal size), for two reasons. First, the nHeight lets you look up the transaction with a bloom filter request, as mentioned. Second, adding both tx.nVersion and nHeight _prior_ to the output itself future-proofs the ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46588364,46588364,
mikehearn,2014-06-19T17:12:15Z,"Currently the protocol doesn't let you look up block by height, you always have to provide a hash. I guess you're assuming we'd fix that?\n\nGood point about serialisation format and version prefixing. I'll modify the patch to do that. Other than new script opcodes is there much chance of a txout format change in future? I can't think of any proposals. But it can't really hurt either.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46589066,46589066,
maaku,2014-06-19T17:19:42Z,"You can get a header by height, and compute the hash from that, right? But if this becomes common, it's probably something worth fixing.\n\nRegarding upgrades, if we're going to hard-fork anyway to increase the block size, then there is some house-keeping we could do to e.g. make the serialization smaller. Potential larger changes I could see happening in bitcoin include switching to merklized scr",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46590007,46590007,
mikehearn,2014-06-19T17:32:11Z,Can you? getheaders takes a block locator and a stop hash. Height is I think hardly ever used in the protocol except in the ver announcement. Unless I'm missing something obvious ....\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46591502,46591502,
mikehearn,2014-06-19T17:40:03Z,"Ah yes MASTs. Good point. OK, sure. I'll work on that tomorrow. Should be a simple change. Thanks again for the useful feedback.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46592409,46592409,
jgarzik,2014-06-20T01:57:53Z,"@laanwj The change is risky for anyone (a) using this feature, but without (b) extensive multi-node quality testing of data.  We are rolling out the easy part, with the Hard Part either TBD or DIY.\n\nIOW, the Path Of Least Resistance here is quite dangerous.  Doing the easy thing gets you zero trust data.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46637852,46637852,
laanwj,2014-06-20T08:25:21Z,"Doing the easy thing always gets you into pain with bitcoin. Assuming immutable txids? You get swindled. Assuming that zero-conf double-spends never happen? You get swindled. Using an online wallet? You might get swindled. And so on... When developing bitcoin software one has to be extremely careful. Adding an obscure, optional query function to the P2P protocol is hardly going to make this worse.",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46655575,46655575,
mikehearn,2014-06-20T11:10:06Z,"@laanwj The commit description already explains what has to be done to make it what I think you're asking for i.e. authenticated by miners (which let's face it, is not hugely meaningful at the moment). But as I explained it requires UTXO commitments, a huge upgrade to all of Bitcoin. The pull request you're asking for is in reality a large series of complex pull requests and upgrades that would ta",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46667709,46667709,
jtimon,2014-06-22T19:26:05Z,"It's hard to follow the thread with so much lateral discussion, but it seems to me that the only thing that's polemic about this PR is whether to put the new functionality on the p2p protocol, on the rpc or on an http rest api. I still don't know what are the perceived disadvantages of the rest option.\nFor example, how would lighthouse be affected by using http instead of the p2p protocol as the ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46790203,46790203,
sipa,2014-06-22T19:40:47Z,"The question does not seem to be ""what transport protocol to use for\ncommunication with a trusted bitcoind instance"". It is rather ""Should\nuntrusted bitcoind instances provide unverifiable information"".\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46790588,46790588,
Diapolo,2014-06-22T22:14:03Z,"@sipa If that is the main question I vote NO, that should be avoided!\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46794656,46794656,
maaku,2014-06-22T23:03:27Z,"I don't think that's a fair assessment of the issue here. Doing getutxos the ""proper"" way involves at least a few more months of work on UTXO commitments, then an equally lengthy discussion period where we build consensus among developers, and finally the very lengthy process of convincing miners to follow through with a soft fork, one which causes mining pool software to take a considerable perfo",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46795695,46795695,
jtimon,2014-06-23T09:45:01Z,"""what transport protocol to use for communication with a trusted bitcoind instance"". \n\nI say jgarzik's http rest, maybe optionally authenticating the consumer of the api.\n\n""Should untrusted bitcoind instances provide unverifiable information""\n\nI agree the answer is not, but there's another question.\n\n""Should TRUSTED bitcoind instances provide unverifiable information?""\n\nAnd I think the a",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46824457,46824457,
petertodd,2014-06-23T14:54:09Z,"So with height and blockhash being returned, you can use getutxo in conjunction with getblock to get proof the TXO at least existed at some point. Additionally adding prefixes queries can be done in a backwards compatible way. That's enough to be useful authenticated data for some applications so I'm going to say ACK.\n\nBesides, it'll be good fun exploiting the insecure software that'll inevitabl",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46855628,46855628,
maaku,2014-06-23T15:41:21Z,@jtimon Neither JSON-RPC or the proposed HTTP REST APIs are exposed on public ports. How does the Lighthouse app which has no local copy of bitcoind access either?\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46862142,46862142,
jgarzik,2014-06-23T15:45:33Z,"@maaku The HTTP REST API is as public or private as you want it to be.  It only exports public data, and is not a control plane like RPC.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46862746,46862746,
maaku,2014-06-23T16:12:20Z,"Sure but how does the SPV node find the HTTP REST API port?\nOn Jun 23, 2014 8:46 AM, ""Jeff Garzik"" notifications@github.com wrote:\n\n> @maaku https://github.com/maaku The HTTP REST API is as public or\n> private as you want it to be. It only exports public data, and is not a\n> control plane like RPC.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/bitcoin/bit",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46866154,46866154,
jtimon,2014-06-23T19:34:03Z,"Ok, RPC then.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46890896,46890896,
mikehearn,2014-06-30T16:18:02Z,"@rebroad Thanks for the LogPrint fix.\n\nOK, I rebased and added coin height and version as @maaku suggested.\n\nHere's my current understanding; @sipa agrees the fee algorithm I outlined above would work once we include value under the signature hash, Peter also sees authenticated use cases with the new data, Gavin is for this, @laanwj seems in agreement too as he sees the security arguments.  So",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-47552196,47552196,
sipa,2014-06-30T17:06:47Z,"Can we add least start a thread on the mailinglist about this? Protocol\nchanges affect more than just one client.\n\nRegarding the fee estimation: I'd rather see opting in to getting txins\nspent along with relayed transactions (which, in ordinary cases, is\nauthenticated information indeed), rather than through an extra roundtrip\nwith getutxos, with the race condition that a block spending the ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-47557861,47557861,
mikehearn,2014-06-30T17:31:09Z,"@sipa We could, but is there an advantage to fragmenting the discussion? I think by now every possible angle has been talked about. What should I say on the mailing list thread?\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-47560705,47560705,
jtimon,2014-06-30T18:01:30Z,"I think sipa's point is that not all bitcoin nodes developers follow bitcoind development. And since this would be a protocol change and not just a bitcoind change, some feedback from other implementations devs could be useful. \nAgain, I would say the only thing controversial is p2p message vs rpc message. \nAlthough I'm still having troubles to understand the cases where the p2p message has an a",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-47564320,47564320,
mikehearn,2014-06-30T18:10:47Z,"Alright, I'll mail the list. I'll try and boil down this enormous centi-thread :)\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-47565556,47565556,
sipa,2014-06-30T18:17:59Z,@mikehearn Thanks! It's partially my fault for continuing the discussion here - it should probably have been done mostly on the mailing list in the first place.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-47566500,47566500,
laanwj,2014-07-01T06:44:26Z,I think it now makes sense to post a BIP draft to the mailing list and point here for the implementation.\n(the OP here looks like a BIP already and contains the usage scenarios and pitfalls so there's not much to be done)\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-47622161,47622161,
mikehearn,2014-07-16T10:14:56Z,int -> uint32_t\n\nthanks to @jrick for noticing.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-49146057,49146057,
jgarzik,2014-07-16T12:13:26Z,"I do like that it adds and advertises NODE_GETUTXOS, as it should.\n\nThis feature should be made conditional on a command line option, so that it can be turned off.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-49156502,49156502,
petertodd,2014-07-16T12:18:23Z,"@jgarzik There should also be an easily available ""chaos monkey"" option that makes getutxo's requests return invalid and/or misleading data to both make it easy to test the robustness of applications using it, and in addition, make the point that it's very easy to use it in an unverified way. Similarly we should do the same for bloom filters. (others too, but those are the two major offenders)\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-49156984,49156984,
jgarzik,2014-07-16T13:53:52Z,"Speaking of, this wants tests before going into bitcoind.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-49168169,49168169,
davecgh,2014-07-16T17:36:05Z,"I also like the `NODE_GETUTXOS` flag.  I'd like to see @petertodd's pull request that added a `NODE_BLOOM` flag revisited for the same reason.\n\nI plan to make a more thorough response on the mailing list, but in short, this is not a feature I'm interested in implementing in `btcd` because it's too insecure as currently proposed for my tastes.  We don't need more services out there requesting dat",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-49200047,49200047,
jgarzik,2014-07-16T17:52:51Z,"I am forced to agree with @davecgh RE ""yes, this is insecure, don't care""\n\nI will not NAK this change, but I do give it a solid ""-1""\n\nAFAICT, all other P2P commands fall into one of a few categories:\n- P2P connection maintenance\n- Sending and receiving data _which we may verify_ back to a root of trust (genesis block, eventually).\n\n""getutxos"" is different.  ""getutxos"" just sends data openl",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-49202137,49202137,
petertodd,2014-07-16T18:34:43Z,"@jgarzik Note that the patch has been changed to respond with a block height and block hash, which lets you in turn lookup the transaction and merkle path to the block header. That _does_ let you verify fully, which is why I changed my initial NACK to ACK. Equally in the case of things like CoinJoin, you don't particularly care whether or not a given UTXO is or is not actually spent; all you care ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-49207713,49207713,
jgarzik,2014-07-16T18:38:56Z,@petertodd height only. No block hash AFAICS.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-49208308,49208308,
petertodd,2014-07-16T18:51:07Z,"@jgarzik Right, misremembered. Anyway, height is sufficient to lookup the blockhash and still recover the block.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-49209852,49209852,
jrick,2014-07-16T19:20:34Z,"If we're going with the ""there may be enough authentication with the block height/hash"", perhaps all mempool queries should be removed as well.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-49213601,49213601,
mikehearn,2014-07-23T13:59:39Z,"Tests are added here:\n\nhttps://github.com/bitcoinj/bitcoinj/commit/d737581c61a0512e96711430a6eef955a3689435\n\nIt revealed a regression introduced by re-org changes that left the mempool UTXO view in a bogus state, so the pull tester changes there won't pass until #4575 is merged.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-49877059,49877059,
laanwj,2014-08-08T07:26:40Z,Needs a reference to BIP 64 which was allocated for this in https://github.com/bitcoin/bips/pull/88\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-51571061,51571061,
mikehearn,2014-08-11T12:04:42Z,Added reference to BIP 64 and discussion of how to use the included height.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-51771499,51771499,
BitcoinPullTester,2014-08-11T12:19:20Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4351_da2ec100f3681176f60dec6dc675fc64147ade3a/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-51772576,51772576,
laanwj,2014-08-15T12:41:03Z,Seems this is ready now.\n\nI'd like a last round of ACKs here.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-52301327,52301327,
gavinandresen,2014-08-15T17:20:54Z,Untested ACK\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-52333386,52333386,
maaku,2014-08-15T18:53:37Z,"You could save some bytes by using VARINT for the nTxVer, nHeight, and chainActive.Height() serializations.\n\nRegardless, ACK.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-52344126,52344126,
btcdrak,2014-08-24T20:09:50Z,How far away is this from being merged? Untested ACK.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53205270,53205270,
jgarzik,2014-08-25T12:40:39Z,"WTF?   getutxos can obviously be abused, turning bitcoind into a fileserver.\n\nI thought the IRC discussion was to hold this, until such an obvious flaw was fixed?\n\nNAK.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53258629,53258629,
mikehearn,2014-08-25T12:51:20Z,"No, it can't, at least not sanely. I explained this to Gregory when he emailed me about it but I'll do so again here.\n\nTo fetch a piece of data using this protocol you must upload a hash and an integer, so 36 bytes. You get back whatever the max amount of data is that can be put in an output. Using a standard CHECKMULTISIG output that's more than 36 bytes but not much more, especially if you don",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53259602,53259602,
laanwj,2014-08-25T13:19:00Z,"@jgarzik ""I thought the IRC discussion was..."" I know of no IRC discussion about that. I saw only ACKs here and a don't care from you:\n\n> I will not NAK this change, but I do give it a solid ""-1""\n\nThis issue has been open for months, and people changed their opinion at some point that this was either a good thing to have or not-too-bad.\n\nAnd now it's suddenly NAK? Can you give details on the",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53262188,53262188,
jgarzik,2014-08-25T13:40:40Z,"(summarized from IRC)\n@mikehearn  ""No, it can't, at least not sanely.""  Translation:  Yes, under certain conditions.\n\nI'm currently running some numbers on txouts in the chain.  ""36 bytes for 36 bytes"" is a handwave.\n\n@laanwj Yes, status changed based on this new information.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53264553,53264553,
petertodd,2014-08-25T16:22:26Z,"@jgarzik So the efficient way to use the UTXO set for storage with getutxos is to create a transaction with a large number of outputs, all storing data, and then increment the vout index to retrieve the data. That technique works even with p2pkh and p2sh outputs. With the 100KB limit on transactions you can get ~3000 P2SH outputs, or 60KB of data, and you can of course also chain transactions to s",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53287071,53287071,
mikehearn,2014-08-25T16:34:43Z,"To download that 60kb of data you'd need to upload 102kb of data, which you have to get from somewhere. It makes no difference from an anti-censorship perspective.\n\nNow can we please focus on writing code to solve problems we have _today_?\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53288617,53288617,
petertodd,2014-08-25T16:37:00Z,"@mikehearn Like I said, the bandwidth for that kind of use-case is completely irrelevant. The advantage is the very strong resistance to censorship and high reliability.\n\nPeople use bittorrent all the time, even though to download 60KB of data you end up having to upload about 60KB of data...\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53288870,53288870,
petertodd,2014-08-25T16:45:57Z,"@mikehearn Oh, wait, I misread your reply:\n\n> To download that 60kb of data you'd need to upload 102kb of data, which you have to get from somewhere. It makes no difference from an anti-censorship perspective.\n\nAgain, by incrementing the vout deterministicly and keeping the txid the same you only need a single txid. Basically I'd create a tx with data-encoding outputs 0...n, give out the txid ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53289987,53289987,
maaku,2014-08-25T17:12:25Z,"How does getutxos make that any worse than the current state? You could\njust as easily use block hash and a bloom filter to identify the\ntransaction.\n\nOn Mon, Aug 25, 2014 at 9:46 AM, Peter Todd notifications@github.com\nwrote:\n\n> @mikehearn https://github.com/mikehearn Oh, wait, I misread your reply:\n> \n> To download that 60kb of data you'd need to upload 102kb of data, which\n> you have ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53293482,53293482,
petertodd,2014-08-25T17:20:20Z,"@maaku That may be correct now, but what we're worried about is limiting our options in the future. If we implement it now and an ecosystem of apps depends on it removing the functionality in the future to deal with abuse will be much more difficult. We may be better off with those applications using functionality that can't be abused; note how as I mentioned earlier Lighthouse - as an example - h",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53294667,53294667,
mikehearn,2014-08-25T17:27:13Z,"It doesn't, but Peter hates Bloom filtering too remember?\n\nGiven that BitTorrent and other systems exist, I doubt this will ever be a major problem. But if it does become one, UTXOs can be deleted any time the community wants. If you know they're unspendable you can delete them immediately without any coordination with other peers. Given that the point is censorship resistance that'd usually be ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53295707,53295707,
petertodd,2014-08-25T17:39:07Z,"@mikehearn \n\n> It doesn't, but Peter hates Bloom filtering too remember?\n\nPlease apologise for that inflammatory statement and keep personal attacks out of this discussion. As you know my opposition to bloom filters has nothing to do with this issue; prefix filters are just as easy, if not easier, to use for the purpose of data publication.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53297447,53297447,
btcdrak,2014-08-25T17:48:14Z,I was told this morning on IRC this PR the same as the RPC version of `gettxout`.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53299252,53299252,
jgarzik,2014-08-25T18:08:22Z,"@btcdrak except, you know, it is available to the world vs. just the system owner...  :)\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53303242,53303242,
maaku,2014-08-25T18:08:33Z,"Drak, there are some minor differences but yes it is basically a p2p form\nof `gettxout`. That doesn't make it unnecessary however -- the whole point\nis that you would use `getutxos` when you _don't_ have access to a full\nnode from which to query `gettxout`.\n\nPeter, the fact is this pull request or a future one using Merkle tree\ncommitments is not making the situation any worse than it alread",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53303278,53303278,
btcdrak,2014-08-25T18:12:26Z,"Frankly, given the unauthenticated nature of p2p, I think this patch is dangerous. Reasons seem well covered by others above. I can't see a valid reason for not running a full node when you need access to UTXO whatever your project is. Sorry, this PR is clearly ill thought.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53304058,53304058,
petertodd,2014-08-25T18:17:41Z,"@maaku We _do_ intend on closing off this DoS attack vector, via pruning. Exactly what form that takes is still uncertain, but there's no reason to limit our options yet, particularly when applications like Lighthouse have good alternatives to using getutxos that can be used while we take the time to better understand the landscape. Equally many of the ""entirely new services"" made possible may not",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53305098,53305098,
jgarzik,2014-08-25T18:21:04Z,The open idea on IRC was to return spent-ness.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53305706,53305706,
petertodd,2014-08-25T18:22:22Z,"@jgarzik Right, which I think we should reject due to being completely unauthenticated - encourages dangerous practices.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53305891,53305891,
sipa,2014-08-25T18:59:33Z,"The txout data and spentness are independent data sets in my opinion.\n\nAs this PR implements now, it is possible to authenticate the txout data\npartially (assuming standard transactions, knowing the input spending the\nutxo validates the script part), but not possible to validate the\nspentness. A node can lie both ways about the spentness, though requiring\nthe full txout to be returned makes ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53311203,53311203,
jgarzik,2014-08-26T16:30:09Z,IRC report:\n&lt;dhill&gt; so getutxos makes bitcoind send mesages larger than the max 32MB\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53449159,53449159,
dajohi,2014-08-26T16:46:26Z,"ReadMessage: message payload is too large - header indicates 2892934254 bytes, but max message payload is 33554432 bytes.\n\nJust some thoughts:\n1.  bitcoind should not attempt to send messages that exceed the max message payload (currently 32MB)\n2. bitcoind should ignore duplicate outpoints in a `getutxos` request.\n3. perhaps using MAX_INV_SZ (50000) is too high for a `getutxos` request limit.",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53451507,53451507,
laanwj,2014-08-27T06:23:27Z,"I would have hoped this kind of testing was done in all the time that this was still a pull request.\nBut it's clear that there are still too many gotchas, going to revert.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53531110,53531110,
mikehearn,2014-08-27T09:09:46Z,"MAX_INV_SZ is used for getdata as well, which returns entire transactions, and that doesn't seem to remove duplicate requests either. There's a manual check against the size of the send buffer on the getdata code path which would be fairly easy to duplicate here, but this sort of network code is easy to duplicate.\n\nAt any rate, it should be an easy fix. @laanwj Why don't you wait for me to fix i",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53544346,53544346,
sipa,2014-08-27T09:15:48Z,"getdata returns the results as individual tx/block messages, which are\nthrottled based on space in network send buffers, so the same problem does\nnot exist there.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53544940,53544940,
btcdrak,2014-08-27T09:18:16Z,@mikehearn @laanwj Better to revert this. Clearly this PR needs a lot of work and testing first.\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53545171,53545171,
mikehearn,2014-08-27T09:22:41Z,"Yes, that's what I said.\n\nAs CCoin is a fixed size structure and the size of the bitmap is equal to the size of the inputs, just keeping track of the space required to send and stopping if there'd be insufficient space is good enough. We could remove duplicates too but it doesn't seem necessary if there's a simple counter.\n\nWith respect to reverting things - no, reverting any change that someo",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53545580,53545580,
btcdrak,2014-08-27T09:29:32Z,"@mikehearn For a new feature like this, recently merged (just yesterday!), a revert is absolutely the right course of action. It means if the feature is fixed and merged in again there is one clean merge, one unit. It makes the history much more understandable. From what I can see, we also need more discussion about the rationale of this PR. Clearly there has been a lot of 'hand waving' and not en",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53546232,53546232,
sipa,2014-08-27T09:37:06Z,"Keeping track of the output size constructed would indeed remove the\nproblem. But then what to do to inform the peer? Split the result in two?\nTruncate it? DoS ban the peer? At least some thought is needed.\n\nI would prefer just to only return spentness. No matter what, that data is\nnot authenticated, and can't be by the setup envisioned here. Adding the\nfull txout data just complicates thing",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53546926,53546926,
mikehearn,2014-08-27T09:55:10Z,It can just be truncated. The result bitmap is supposed to be the same length as the input query. If it's not then you know the result has been truncated. I don't think any normal client would ever hit this case anyway. Not complicated.\n\nCan we please stop going over the rationale again and again and again? @btcdrak the RPC stack doesn't even try to handle resource usage attacks so your suggesti,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53548742,53548742,
petertodd,2014-08-27T11:59:05Z,"@mikehearn re: ""not reading a word I've written"", you're doing the exact same thing: @btcdrak made clear above that he believed you should be running a full node: ""I can't see a valid reason for not running a full node when you need access to UTXO whatever your project is.""; his suggestion of using RPC is for local nodes where resource usage attacks are irrelevant.\n\nIn any case, stop trying to d",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53559264,53559264,
mikehearn,2014-08-27T15:42:33Z,There's a fix here:\n\nhttps://github.com/bitcoin/bitcoin/pull/4770\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53592423,53592423,
genjix,2014-08-27T16:28:02Z,"wow what a stupid change, all the more reason why we can't have a single group making unilateral decisions on one codebase. I had never heard of this. I think you guys need to stop trying to throw all this crap into the Bitcoin protocol, and focus on keeping it small + focused. Bloated software overextends itself introducing security flaws through new attack surfaces.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53600726,53600726,
mikehearn,2014-08-27T16:37:00Z,"I actually can't make my bitcoind crash even when firing many such bogus queries in parallel, even without the fix. Memory usage does go up, and if you don't have much RAM that could be a problem, but it drops down again immediately after.\n\nWith the extra ten lines to track bytes used the code is clearly better, but it's way overkill to go running to reddit and claim it's an ""easy way to crash b",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53602018,53602018,
petertodd,2014-08-27T16:46:29Z,"Lots of nodes out there without all that much RAM. Other DoS attacks are prevented by existing resource limits, e.g. tx fees, coin-age, etc. and ""handling lots of clients"" is something we already have limits on via the connection limits. I should know - I've spent a lot of time looking for and fixing cheap DoS attacks. (e.g. the sigops one I fixed) getutxos is unique in how easy it is to use to cr",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53603345,53603345,
laanwj,2014-08-27T16:52:05Z,"> I had never heard of this\n\nIt is not as if this was kept secret. To be fair, the BIP was posted to the bitcoin development mailing list, https://sourceforge.net/p/bitcoin/mailman/message/32590257/\nThe BIP was reviewed, finalized and merged at some point, https://github.com/bitcoin/bips/pull/88 \nThis pull has been open for months as well.\nYou could have heard of this, and given your opinion ",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53604100,53604100,
mikehearn,2014-08-27T17:09:20Z,"Peter, I wrote a patch right? I'm grateful that Dave did this testing and found this problem. I am less grateful that he then ran to reddit and started complaining about how badly unit tested Bitcoin Core is (blame Satoshi for that one, if he must). \n\nI think it's an open question about how such things can be caught in future. Any future change could result in large temporary memory usage withou",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53606505,53606505,
genjix,2014-08-27T17:10:31Z,"There's a ton of silly discussion on that mailing list which consists of ""who has the most stamina to invest in arguments"" which I don't have time for. Therefore I cannot sift through all that looking for the gems of important discussion to register my single objection.\n\n@mikehearn you can avoid mistakes by taking features out not trying to stuff more features in (which we don't _need_). This is",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53606665,53606665,
btcdrak,2014-08-27T18:32:23Z,Reverted in 70352e11c0194fe4e71efea06220544749f4cd64\n,https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-53619206,53619206,
dgenr8,2014-09-01T19:18:17Z,"Nothing about this change is harmful enough to violate the process.  A BIP was even merged, for crying out loud.\n\nIt would be great if core supported optional and p2p-queryable indexes for everything.  An optional way to authenticate data served would also be great.  Lack of these extra features should not doom this change.  They could be in a layer maintained by the core project.  There is abso",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-54086463,54086463,
btcdrak,2014-09-01T19:22:37Z,"@dgenr8 A BIP getting merged doesn't make it a standard, it just starts it in the 'draft' workflow status: https://github.com/bitcoin/bips/blob/master/bip-0001/process.png \n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-54086672,54086672,
gmaxwell,2014-09-01T19:49:08Z,"There are several bad bips which (IMO) no one should ever use, the BIP process doesn't tell you if something is good or not... it just specifies it.\n",https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-54087974,54087974,
rebroad,2014-06-27T04:02:05Z,LogPrint()?\n,https://github.com/bitcoin/bitcoin/pull/4351#discussion_r14278883,14278883,src/main.cpp
sipa,2014-06-30T17:47:21Z,Why not 70003? Protocol versions are intended to be independent from client versions.\n,https://github.com/bitcoin/bitcoin/pull/4351#discussion_r14364054,14364054,src/version.h
mikehearn,2014-06-30T17:52:14Z,"OK, changing ..\n",https://github.com/bitcoin/bitcoin/pull/4351#discussion_r14364344,14364344,src/version.h
petertodd,2014-07-16T18:45:35Z,Point out here that nHeight lets you obtain transactions elsewhere.\n,https://github.com/bitcoin/bitcoin/pull/4351#discussion_r15019025,15019025,src/main.cpp
