[
  {
    "sha": "da2ec100f3681176f60dec6dc675fc64147ade3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTJlYzEwMGYzNjgxMTc2ZjYwZGVjNmRjNjc1ZmM2NDE0N2FkZTNh",
    "commit": {
      "author": {
        "name": "Mike Hearn",
        "email": "mike@plan99.net",
        "date": "2014-05-19T20:25:17Z"
      },
      "committer": {
        "name": "Mike Hearn",
        "email": "mike@plan99.net",
        "date": "2014-08-11T11:59:47Z"
      },
      "message": "Add a getutxos command to the p2p protocol. It allows querying of the UTXO set\ngiven a set of outpoints.",
      "tree": {
        "sha": "356e017dd8ea38a9e1e2c7301516fccac6ea1cef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/356e017dd8ea38a9e1e2c7301516fccac6ea1cef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da2ec100f3681176f60dec6dc675fc64147ade3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da2ec100f3681176f60dec6dc675fc64147ade3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da2ec100f3681176f60dec6dc675fc64147ade3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da2ec100f3681176f60dec6dc675fc64147ade3a/comments",
    "author": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mikehearn",
      "id": 971089,
      "node_id": "MDQ6VXNlcjk3MTA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/971089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikehearn",
      "html_url": "https://github.com/mikehearn",
      "followers_url": "https://api.github.com/users/mikehearn/followers",
      "following_url": "https://api.github.com/users/mikehearn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikehearn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikehearn/subscriptions",
      "organizations_url": "https://api.github.com/users/mikehearn/orgs",
      "repos_url": "https://api.github.com/users/mikehearn/repos",
      "events_url": "https://api.github.com/users/mikehearn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikehearn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36065cc529bb9be5655fcaaad2746edb7b6f4ddb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36065cc529bb9be5655fcaaad2746edb7b6f4ddb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36065cc529bb9be5655fcaaad2746edb7b6f4ddb"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 89,
      "deletions": 2
    },
    "files": [
      {
        "sha": "569b0124628213d4c5db10c6630ce99b7b0680f4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da2ec100f3681176f60dec6dc675fc64147ade3a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da2ec100f3681176f60dec6dc675fc64147ade3a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=da2ec100f3681176f60dec6dc675fc64147ade3a",
        "patch": "@@ -20,6 +20,7 @@\n \n #include <sstream>\n \n+#include <boost/dynamic_bitset.hpp>\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n@@ -3512,6 +3513,75 @@ void static ProcessGetData(CNode* pfrom)\n     }\n }\n \n+struct CCoin {\n+    uint32_t nTxVer;   // Don't call this nVersion, that name has a special meaning inside IMPLEMENT_SERIALIZE\n+    uint32_t nHeight;\n+    CTxOut out;\n+\n+    IMPLEMENT_SERIALIZE(\n+        READWRITE(nTxVer);\n+        READWRITE(nHeight);\n+        READWRITE(out);\n+    )\n+};\n+\n+bool ProcessGetUTXOs(const vector<COutPoint> &vOutPoints, bool fCheckMemPool, vector<unsigned char> *result, vector<CCoin> *resultCoins)\n+{\n+    // Defined by BIP 64.\n+    //\n+    // Allows a peer to retrieve the CTxOut structures corresponding to the given COutPoints. \n+    // Note that this data is not authenticated by anything: this code could just invent any\n+    // old rubbish and hand it back, with the peer being unable to tell unless they are checking\n+    // the outpoints against some out of band data.\n+    //\n+    // Also the answer could change the moment after we give it. However some apps can tolerate\n+    // this, because they're only using the result as a hint or are willing to trust the results\n+    // based on something else. For example we may be a \"trusted node\" for the peer, or it may\n+    // be checking the results given by several nodes for consistency, it may\n+    // run the UTXOs returned against scriptSigs of transactions obtained elsewhere (after checking\n+    // for a standard script form), and because the height in which the UTXO was defined is provided\n+    // a client that has a map of heights to block headers (as SPV clients do, for recent blocks)\n+    // can request the creating block via hash.\n+    //\n+    // IMPORTANT: Clients expect ordering to be preserved!\n+    if (vOutPoints.size() > MAX_INV_SZ)\n+        return error(\"message getutxos size() = %u\", vOutPoints.size());\n+\n+    LogPrint(\"net\", \"getutxos for %d queries %s mempool\\n\", vOutPoints.size(), fCheckMemPool ? \"with\" : \"without\");\n+\n+    boost::dynamic_bitset<unsigned char> hits(vOutPoints.size());\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewMemPool cvMemPool(*pcoinsTip, mempool);\n+        CCoinsViewCache view(fCheckMemPool ? cvMemPool : *pcoinsTip);\n+        for (size_t i = 0; i < vOutPoints.size(); i++)\n+        {\n+            CCoins coins;\n+            uint256 hash = vOutPoints[i].hash;\n+            if (view.GetCoins(hash, coins))\n+            {\n+                mempool.pruneSpent(hash, coins);\n+                if (coins.IsAvailable(vOutPoints[i].n))\n+                {\n+                    hits[i] = true;\n+                    // Safe to index into vout here because IsAvailable checked if it's off the end of the array, or if\n+                    // n is valid but points to an already spent output (IsNull).\n+                    CCoin coin;\n+                    coin.nTxVer = coins.nVersion;\n+                    coin.nHeight = coins.nHeight;\n+                    coin.out = coins.vout.at(vOutPoints[i].n);\n+                    assert(!coin.out.IsNull());\n+                    resultCoins->push_back(coin);\n+                }\n+            }\n+        }\n+    }\n+\n+    boost::to_block_range(hits, std::back_inserter(*result));\n+    return true;\n+}\n+\n+\n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n {\n     RandAddSeedPerfmon();\n@@ -3860,6 +3930,22 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n+    else if (strCommand == \"getutxos\")\n+    {\n+        bool fCheckMemPool;\n+        vector<COutPoint> vOutPoints;\n+        vRecv >> fCheckMemPool;\n+        vRecv >> vOutPoints;\n+\n+        vector<unsigned char> bitmap;\n+        vector<CCoin> outs;\n+        if (ProcessGetUTXOs(vOutPoints, fCheckMemPool, &bitmap, &outs))\n+            pfrom->PushMessage(\"utxos\", chainActive.Height(), chainActive.Tip()->GetBlockHash(), bitmap, outs);\n+        else\n+            Misbehaving(pfrom->GetId(), 20);\n+    }\n+\n+\n     else if (strCommand == \"tx\")\n     {\n         vector<uint256> vWorkQueue;"
      },
      {
        "sha": "e78c7b7fa2bd8627b2727ae7d16e05e6be569a09",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da2ec100f3681176f60dec6dc675fc64147ade3a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da2ec100f3681176f60dec6dc675fc64147ade3a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=da2ec100f3681176f60dec6dc675fc64147ade3a",
        "patch": "@@ -66,7 +66,7 @@ namespace {\n //\n bool fDiscover = true;\n bool fListen = true;\n-uint64_t nLocalServices = NODE_NETWORK;\n+uint64_t nLocalServices = NODE_NETWORK | NODE_GETUTXOS;\n CCriticalSection cs_mapLocalHost;\n map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfReachable[NET_MAX] = {};"
      },
      {
        "sha": "6019dab0c8225e8fcd24e785561aa3f10c67244a",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da2ec100f3681176f60dec6dc675fc64147ade3a/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da2ec100f3681176f60dec6dc675fc64147ade3a/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=da2ec100f3681176f60dec6dc675fc64147ade3a",
        "patch": "@@ -64,6 +64,7 @@ class CMessageHeader\n enum\n {\n     NODE_NETWORK = (1 << 0),\n+    NODE_GETUTXOS = (1 << 1),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      },
      {
        "sha": "fbb731c91d8a7f7163b94d9d12702683f99da064",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da2ec100f3681176f60dec6dc675fc64147ade3a/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da2ec100f3681176f60dec6dc675fc64147ade3a/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=da2ec100f3681176f60dec6dc675fc64147ade3a",
        "patch": "@@ -26,7 +26,7 @@ extern const std::string CLIENT_DATE;\n // network protocol versioning\n //\n \n-static const int PROTOCOL_VERSION = 70002;\n+static const int PROTOCOL_VERSION = 70003;\n \n // initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;"
      }
    ]
  }
]