wtogami,2013-09-25T23:08:16Z,"cfields indicated this ar is not deterministic by default so the hacks need to remain.\n\nhttp://pastebin.com/raw.php?i=a89Hvm7Q\nThe next update will include this commit to make all mingw builds static.\n\nDiscussion in #bitcoin-dev seems to indicate general agreement on upgrading all gitian win32 library deps to stable versions that several distros already ship.  To make it easier to review, I w",https://github.com/bitcoin/bitcoin/pull/3029#issuecomment-25132234,25132234,
gavinandresen,2013-09-26T06:18:12Z,"We currently require 2 VM images to create a release (10.04 32-bit used to compile linux 32-bit and windows binaries, and 10.04 64-bit used to compile linux 64-bit).\n\nIdeally, a single 12.04 64-bit VM could compile everything; if you can get that to work, and produce binaries that work for Windows XP+ and (whatever the equivalent version is for Linux) then I'm all for it, and will gladly do the ",https://github.com/bitcoin/bitcoin/pull/3029#issuecomment-25145916,25145916,
wtogami,2013-09-26T07:00:43Z,"The added storage requirement for base-precise-amd64.qcow2 is only 739M.  That is necessary to modernize the toolchain, enable more hardening and possibly performance optimizations later.  The mingw back in the 10.04 era was pretty dire compared to what shipped in 12.04.\n\nThere was a productive discussion about improvements to the Linux deterministic binary process in #bitcoin-dev today.  Some i",https://github.com/bitcoin/bitcoin/pull/3029#issuecomment-25147320,25147320,
wtogami,2013-09-26T11:19:11Z,Each commit here results in a working win32 build.\n- cfield's commit allows the new mingw32 to build without errors and has no effect on the old mingw.\n- Upgrading to precise 12.04 is literally only that plus the mingw32 compat patch that was later added to boost-1.51. \n- The following commit upgrades to boost-1.54 and demonstrates a very simple method to check the integrity of source inputs.\n,https://github.com/bitcoin/bitcoin/pull/3029#issuecomment-25159926,25159926,
laanwj,2013-09-26T13:52:32Z,Changes ACK (though release-process.md has to be updated to download the new dependency boost-mingw-gas-cross-compile-2013-03-03.patch ) - haven't tested yet\n,https://github.com/bitcoin/bitcoin/pull/3029#issuecomment-25168861,25168861,
wtogami,2013-09-26T14:14:11Z,release-process.md has been updated for boost-mingw-gas-cross-compile-2013-03-03.patch\n,https://github.com/bitcoin/bitcoin/pull/3029#issuecomment-25170501,25170501,
sipa,2013-09-26T14:18:40Z,"ACK on upgrading win32 gitian to mingw-w64 and upgrading boost.\n\nWe probably want to converge to a single VM for everything, with ideally the following properties:\n- Old glibc, so that the resulting binary works on many systems.\n- Modern g++, so we can start using for example C++11 features and -flto\n- Mingw-w64 to have a modern win32 (and perhaps one day win64) environment.\n\nFor now, there",https://github.com/bitcoin/bitcoin/pull/3029#issuecomment-25170871,25170871,
wtogami,2013-09-26T21:22:01Z,"OFF-TOPIC for this PR but responding anyway.\n\n@gavinandresen Regarding ""Ideally, a single 12.04 64-bit VM could compile everything"", consensus is that it is infeasible as its built binaries would be incapable of running on RHEL6, a major server platform on which it is quite difficult to build Bitcoin from source.  It would also drop 10.04 which is still supported as a server platform.\n\nThe mor",https://github.com/bitcoin/bitcoin/pull/3029#issuecomment-25205036,25205036,
sipa,2013-09-28T16:14:13Z,"@gavinandresen Agree with merging this now, so we don't have to rely on an ancient GCC with limited hardening anymore for Win32, and postponing the discussion about what to do for the linux build environments later?\n",https://github.com/bitcoin/bitcoin/pull/3029#issuecomment-25300947,25300947,
Diapolo,2013-09-25T05:36:56Z,We could just display version info via `$compiler-binary$ --version` instead of hard-coding 4.6.\n,https://github.com/bitcoin/bitcoin/pull/3029#discussion_r6564423,6564423,contrib/gitian-descriptors/boost-win32.yml
Diapolo,2013-09-25T05:38:37Z,Instead of another patch perhaps just build with zlib support ;)?\n,https://github.com/bitcoin/bitcoin/pull/3029#discussion_r6564439,6564439,contrib/gitian-descriptors/boost-win32.yml
wtogami,2013-09-25T05:57:51Z,"Edit: I later realized that we already build zlib in deps-win32.yml.  Currently boost is not dependent on it, but it could be.  Reading through the boost commits it sounds like compression is considered to be a potential DoS vector.  I didn't check to see if we actually use that codepath at all, but it just seemed safer to keep it disabled as we didn't need it before.\n\nAt least the disabled zlib",https://github.com/bitcoin/bitcoin/pull/3029#discussion_r6564619,6564619,contrib/gitian-descriptors/boost-win32.yml
wtogami,2013-09-25T06:00:11Z,"""4.6"" seems to be cosmetic, I'm not sure what it does if anything.  The last part actually does seem to matter though.\n",https://github.com/bitcoin/bitcoin/pull/3029#discussion_r6564645,6564645,contrib/gitian-descriptors/boost-win32.yml
theuni,2013-09-25T17:18:24Z,Bumping to 1.54 here just because of a build-bug in 1.50 is senseless. Backport the fix (https://svn.boost.org/trac/boost/ticket/4258) or discuss the possibility of a bump. But don't just change it arbitrarily.\n,https://github.com/bitcoin/bitcoin/pull/3029#discussion_r6579026,6579026,contrib/gitian-descriptors/boost-win32.yml
wtogami,2013-09-25T18:38:10Z,Thank you.  I want to discuss the possibility of a bump of all the deps.  Litecoin's gitian used newer versions of all these libraries (except boost) 15 months ago.  If folks want to back down to the same version of boost used by 0.8.x gitian win32 then I'll apply the patch instead of this approach.  How do others feel about the gitian dep versions? \n,https://github.com/bitcoin/bitcoin/pull/3029#discussion_r6581309,6581309,contrib/gitian-descriptors/boost-win32.yml
wtogami,2013-09-26T05:00:15Z,"@Diapolo What did you mean by `$compiler-binary$`?  Gitian doesn't seem to have anything like that.  Bash parsed it as $compiler (which is blank) and -binary$ is separate.  Unless you indicate exactly what you meant, I'm keeping it as ""4.6"" which seems to be merely cosmetic anyway.\n",https://github.com/bitcoin/bitcoin/pull/3029#discussion_r6592844,6592844,contrib/gitian-descriptors/boost-win32.yml
Diapolo,2013-09-26T06:27:41Z,"I tried to tell you, just use the version output of our MinGW compiler suite, which (for example) could be `g++ --version`, and don't use the hard-coded 4.6 there, nothing fancy ;).\n",https://github.com/bitcoin/bitcoin/pull/3029#discussion_r6593631,6593631,contrib/gitian-descriptors/boost-win32.yml
wtogami,2013-09-26T07:41:14Z,"This works:\n`GCCVERSION=$($HOST-g++ -E -dM $(mktemp --suffix=.h) | grep __VERSION__ | cut -d ' ' -f 3 | cut -d '""' -f 2)\n  echo ""using gcc : $GCCVERSION : $HOST-g++`\n",https://github.com/bitcoin/bitcoin/pull/3029#discussion_r6594557,6594557,contrib/gitian-descriptors/boost-win32.yml
