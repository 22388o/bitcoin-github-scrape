[
  {
    "sha": "87aacaa633bfedaf9947e051dee47807bdeaff9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2FhY2FhNjMzYmZlZGFmOTk0N2UwNTFkZWU0NzgwN2JkZWFmZjli",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-01-11T23:16:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-01-11T23:16:13Z"
      },
      "message": "Avoid conversion to CBigNum for simple multiplications",
      "tree": {
        "sha": "8e618097a99022b2666689a6370f235fa0b95090",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e618097a99022b2666689a6370f235fa0b95090"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87aacaa633bfedaf9947e051dee47807bdeaff9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87aacaa633bfedaf9947e051dee47807bdeaff9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87aacaa633bfedaf9947e051dee47807bdeaff9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87aacaa633bfedaf9947e051dee47807bdeaff9b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc64c3c3747f0d592ebad516dc08e752687e62eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc64c3c3747f0d592ebad516dc08e752687e62eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc64c3c3747f0d592ebad516dc08e752687e62eb"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 34,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b439bbb941d04ddb33628ef5d8841a6983172b3e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87aacaa633bfedaf9947e051dee47807bdeaff9b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87aacaa633bfedaf9947e051dee47807bdeaff9b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=87aacaa633bfedaf9947e051dee47807bdeaff9b",
        "patch": "@@ -1148,7 +1148,7 @@ void CheckForkWarningConditions()\n     if (pindexBestForkTip && chainActive.Height() - pindexBestForkTip->nHeight >= 72)\n         pindexBestForkTip = NULL;\n \n-    if (pindexBestForkTip || (pindexBestInvalid && pindexBestInvalid->nChainWork > chainActive.Tip()->nChainWork + (chainActive.Tip()->GetBlockWork() * 6).getuint256()))\n+    if (pindexBestForkTip || (pindexBestInvalid && pindexBestInvalid->nChainWork > chainActive.Tip()->nChainWork + chainActive.Tip()->GetBlockWork() * 6))\n     {\n         if (!fLargeWorkForkFound)\n         {\n@@ -1203,7 +1203,7 @@ void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     // We define it this way because it allows us to only store the highest fork tip (+ base) which meets\n     // the 7-block condition and from this always have the most-likely-to-cause-warning fork\n     if (pfork && (!pindexBestForkTip || (pindexBestForkTip && pindexNewForkTip->nHeight > pindexBestForkTip->nHeight)) &&\n-            pindexNewForkTip->nChainWork - pfork->nChainWork > (pfork->GetBlockWork() * 7).getuint256() &&\n+            pindexNewForkTip->nChainWork - pfork->nChainWork > pfork->GetBlockWork() * 7 &&\n             chainActive.Height() - pindexNewForkTip->nHeight < 72)\n     {\n         pindexBestForkTip = pindexNewForkTip;\n@@ -1909,7 +1909,7 @@ bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos\n         pindexNew->nHeight = pindexNew->pprev->nHeight + 1;\n     }\n     pindexNew->nTx = block.vtx.size();\n-    pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + pindexNew->GetBlockWork().getuint256();\n+    pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + pindexNew->GetBlockWork();\n     pindexNew->nChainTx = (pindexNew->pprev ? pindexNew->pprev->nChainTx : 0) + pindexNew->nTx;\n     pindexNew->nFile = pos.nFile;\n     pindexNew->nDataPos = pos.nPos;\n@@ -2565,7 +2565,7 @@ bool static LoadBlockIndexDB()\n     BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n-        pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + pindex->GetBlockWork().getuint256();\n+        pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + pindex->GetBlockWork();\n         pindex->nChainTx = (pindex->pprev ? pindex->pprev->nChainTx : 0) + pindex->nTx;\n         if ((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TRANSACTIONS && !(pindex->nStatus & BLOCK_FAILED_MASK))\n             setBlockIndexValid.insert(pindex);"
      },
      {
        "sha": "ad1eb54031e74ff0fac8734c755d8e9a61709d96",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87aacaa633bfedaf9947e051dee47807bdeaff9b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87aacaa633bfedaf9947e051dee47807bdeaff9b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=87aacaa633bfedaf9947e051dee47807bdeaff9b",
        "patch": "@@ -798,13 +798,13 @@ class CBlockIndex\n         return (int64_t)nTime;\n     }\n \n-    CBigNum GetBlockWork() const\n+    uint256 GetBlockWork() const\n     {\n         CBigNum bnTarget;\n         bnTarget.SetCompact(nBits);\n         if (bnTarget <= 0)\n             return 0;\n-        return (CBigNum(1)<<256) / (bnTarget+1);\n+        return ((CBigNum(1)<<256) / (bnTarget+1)).getuint256();\n     }\n \n     bool CheckIndex() const"
      },
      {
        "sha": "7680d6a2a0990b2ef58e6de62f09cb2e15d42602",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87aacaa633bfedaf9947e051dee47807bdeaff9b/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87aacaa633bfedaf9947e051dee47807bdeaff9b/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=87aacaa633bfedaf9947e051dee47807bdeaff9b",
        "patch": "@@ -1,3 +1,4 @@\n+#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n #include <stdint.h>\n #include <sstream>\n@@ -6,6 +7,7 @@\n #include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"bignum.h\"\n #include \"version.h\"\n \n BOOST_AUTO_TEST_SUITE(uint256_tests)\n@@ -629,5 +631,17 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n+BOOST_AUTO_TEST_CASE(multiply) {\n+    uint32_t factors[] = {0, 1, 16, 256, 257, 1000, 1000000, 16777216, 0xFFFFFFFFUL};\n+    BOOST_FOREACH(uint32_t f, factors) {\n+        BOOST_CHECK(R1L * f == (CBigNum(R1L) * f).getuint256());\n+        BOOST_CHECK(R2L * f == (CBigNum(R2L) * f).getuint256());\n+        BOOST_CHECK(ZeroL * f == (CBigNum(ZeroL) * f).getuint256());\n+        BOOST_CHECK(MaxL * f == (CBigNum(MaxL) * f).getuint256());\n+        BOOST_CHECK(OneL * f == (CBigNum(OneL) * f).getuint256());\n+        BOOST_CHECK(HalfL * f == (CBigNum(HalfL) * f).getuint256());\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()\n "
      },
      {
        "sha": "beeea80dd76841d953b536c8b243d615d9e048fa",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87aacaa633bfedaf9947e051dee47807bdeaff9b/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87aacaa633bfedaf9947e051dee47807bdeaff9b/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=87aacaa633bfedaf9947e051dee47807bdeaff9b",
        "patch": "@@ -178,6 +178,16 @@ class base_uint\n         return *this;\n     }\n \n+    base_uint& operator*=(uint32_t b32)\n+    {\n+        uint32_t carry = 0;\n+        for (unsigned int i = 0; i < WIDTH; i++) {\n+            uint64_t sum = carry + (uint64_t)pn[i]*b32;\n+            pn[i] = sum & 0xFFFFFFFF;\n+            carry = sum >> 32;\n+        }\n+        return *this;\n+    }\n \n     base_uint& operator++()\n     {\n@@ -477,6 +487,8 @@ inline const uint160 operator<<(const base_uint160& a, unsigned int shift)   { r\n inline const uint160 operator>>(const base_uint160& a, unsigned int shift)   { return uint160(a) >>= shift; }\n inline const uint160 operator<<(const uint160& a, unsigned int shift)        { return uint160(a) <<= shift; }\n inline const uint160 operator>>(const uint160& a, unsigned int shift)        { return uint160(a) >>= shift; }\n+inline const uint160 operator*(const base_uint160& a, uint32_t b)            { return uint160(a) *= b; }\n+inline const uint160 operator*(const uint160& a, uint32_t b)                 { return uint160(a) *= b; }\n \n inline const uint160 operator^(const base_uint160& a, const base_uint160& b) { return uint160(a) ^= b; }\n inline const uint160 operator&(const base_uint160& a, const base_uint160& b) { return uint160(a) &= b; }\n@@ -589,6 +601,8 @@ inline const uint256 operator<<(const base_uint256& a, unsigned int shift)   { r\n inline const uint256 operator>>(const base_uint256& a, unsigned int shift)   { return uint256(a) >>= shift; }\n inline const uint256 operator<<(const uint256& a, unsigned int shift)        { return uint256(a) <<= shift; }\n inline const uint256 operator>>(const uint256& a, unsigned int shift)        { return uint256(a) >>= shift; }\n+inline const uint256 operator*(const base_uint256& a, uint32_t b)            { return uint256(a) *= b; }\n+inline const uint256 operator*(const uint256& a, uint32_t b)                 { return uint256(a) *= b; }\n \n inline const uint256 operator^(const base_uint256& a, const base_uint256& b) { return uint256(a) ^= b; }\n inline const uint256 operator&(const base_uint256& a, const base_uint256& b) { return uint256(a) &= b; }"
      }
    ]
  }
]