[
  {
    "sha": "d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzY3N2FiNzU3ZWE1N2IyMWQ4YWVkMjRkNWJjM2M0YmZlOWJiNjhj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-08T00:08:32Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-19T02:08:07Z"
      },
      "message": "Tests for zmqpubrawtx and zmqpubrawblock",
      "tree": {
        "sha": "88990d7ed9887a3b0b23ecb41e9e17bf1f70de90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88990d7ed9887a3b0b23ecb41e9e17bf1f70de90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bcc8a620eae9cd8fe95f0a02f17183c4a132e5a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc8a620eae9cd8fe95f0a02f17183c4a132e5a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bcc8a620eae9cd8fe95f0a02f17183c4a132e5a2"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 54,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f819edcc3db9dd03d4ed3d8fc21210b51fb1dc6c",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c",
        "patch": "@@ -7,6 +7,7 @@\n from base64 import b64encode\n from binascii import hexlify, unhexlify\n from decimal import Decimal, ROUND_DOWN\n+import hashlib\n import json\n import logging\n import os\n@@ -148,6 +149,13 @@ def count_bytes(hex_string):\n def bytes_to_hex_str(byte_str):\n     return hexlify(byte_str).decode('ascii')\n \n+def hash256(byte_str):\n+    sha256 = hashlib.sha256()\n+    sha256.update(byte_str)\n+    sha256d = hashlib.sha256()\n+    sha256d.update(sha256.digest())\n+    return sha256d.digest()[::-1]\n+\n def hex_str_to_bytes(hex_str):\n     return unhexlify(hex_str.encode('ascii'))\n "
      },
      {
        "sha": "382ef5bae2891df08c627e9878a0aaf45205feef",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 46,
        "deletions": 6,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c",
        "patch": "@@ -10,7 +10,8 @@\n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n from test_framework.util import (assert_equal,\n                                  bytes_to_hex_str,\n-                                 )\n+                                 hash256,\n+                                )\n \n class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n@@ -37,9 +38,12 @@ def setup_nodes(self):\n         self.zmqSubSocket.set(zmq.RCVTIMEO, 60000)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawblock\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawtx\")\n         ip_address = \"tcp://127.0.0.1:28332\"\n         self.zmqSubSocket.connect(ip_address)\n-        self.extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.extra_args = [['-zmqpubhashblock=%s' % ip_address, '-zmqpubhashtx=%s' % ip_address,\n+                       '-zmqpubrawblock=%s' % ip_address, '-zmqpubrawtx=%s' % ip_address], []]\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n@@ -59,28 +63,51 @@ def _zmq_test(self):\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")\n-        body = msg[1]\n+        txhash = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n \n+        # rawtx\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawtx\")\n+        body = msg[1]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) # must be sequence 0 on rawtx\n+\n+        # Check that the rawtx hashes to the hashtx\n+        assert_equal(hash256(body), txhash)\n+\n         self.log.info(\"Wait for block\")\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n+        assert_equal(topic, b\"hashblock\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n-\n         assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n \n+        # rawblock\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawblock\")\n+        body = msg[1]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) #must be sequence 0 on rawblock\n+\n+        # Check the hash of the rawblock's header matches generate\n+        assert_equal(genhashes[0], bytes_to_hex_str(hash256(body[:80])))\n+\n         self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n         n = 10\n         genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n+        zmqRawHashed = []\n         blockcount = 0\n-        for x in range(n * 2):\n+        for x in range(n * 4):\n             msg = self.zmqSubSocket.recv_multipart()\n             topic = msg[0]\n             body = msg[1]\n@@ -89,9 +116,14 @@ def _zmq_test(self):\n                 msgSequence = struct.unpack('<I', msg[-1])[-1]\n                 assert_equal(msgSequence, blockcount + 1)\n                 blockcount += 1\n+            if topic == b\"rawblock\":\n+                zmqRawHashed.append(bytes_to_hex_str(hash256(body[:80])))\n+                msgSequence = struct.unpack('<I', msg[-1])[-1]\n+                assert_equal(msgSequence, blockcount)\n \n         for x in range(n):\n             assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n+            assert_equal(genhashes[x], zmqRawHashed[x])\n \n         self.log.info(\"Wait for tx from second node\")\n         # test tx from a second node\n@@ -101,13 +133,21 @@ def _zmq_test(self):\n         # now we should receive a zmq msg because the tx was broadcast\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n-        body = msg[1]\n         assert_equal(topic, b\"hashtx\")\n+        body = msg[1]\n         hashZMQ = bytes_to_hex_str(body)\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, blockcount + 1)\n \n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawtx\")\n+        body = msg[1]\n+        hashedZMQ = bytes_to_hex_str(hash256(body))\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, blockcount+1)\n         assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n+        assert_equal(hashRPC, hashedZMQ)\n \n if __name__ == '__main__':\n     ZMQTest().main()"
      }
    ]
  }
]