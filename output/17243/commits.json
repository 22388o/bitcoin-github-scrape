[
  {
    "sha": "4de630354fc6808b9b13b9e82da1a82f2f50f26a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGU2MzAzNTRmYzY4MDhiOWIxM2I5ZTgyZGExYTgyZjJmNTBmMjZh",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-11-05T10:06:53Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-11-05T10:06:53Z"
      },
      "message": "[tools] add PoissonNextSend method that returns mockable time",
      "tree": {
        "sha": "4fc0563ddd0a33a0859ca71c8527ca1ba6a7c399",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fc0563ddd0a33a0859ca71c8527ca1ba6a7c399"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4de630354fc6808b9b13b9e82da1a82f2f50f26a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4de630354fc6808b9b13b9e82da1a82f2f50f26a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4de630354fc6808b9b13b9e82da1a82f2f50f26a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4de630354fc6808b9b13b9e82da1a82f2f50f26a/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "deb2327b435925c6a39ca654a79283b8eb6aeb86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deb2327b435925c6a39ca654a79283b8eb6aeb86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/deb2327b435925c6a39ca654a79283b8eb6aeb86"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 20,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ab69e8b82b4d211dbad7d2b5fbf18b72d659c681",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4de630354fc6808b9b13b9e82da1a82f2f50f26a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4de630354fc6808b9b13b9e82da1a82f2f50f26a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4de630354fc6808b9b13b9e82da1a82f2f50f26a",
        "patch": "@@ -943,11 +943,13 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::seconds average_interval)\n+{\n+    return std::chrono::microseconds{PoissonNextSend(now.count(), average_interval.count())};\n+}\n+\n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "81ae8e2c3f739244ced97306f0e429d9f1ec8c80",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4de630354fc6808b9b13b9e82da1a82f2f50f26a/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4de630354fc6808b9b13b9e82da1a82f2f50f26a/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=4de630354fc6808b9b13b9e82da1a82f2f50f26a",
        "patch": "@@ -303,5 +303,19 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n     BOOST_CHECK_EQUAL(IsLocal(addr), false);\n }\n \n+BOOST_AUTO_TEST_CASE(PoissonNextSend)\n+{\n+    g_mock_deterministic_tests = true;\n+\n+    int64_t now = 5000;\n+    int average_interval_seconds = 600;\n+\n+    auto poisson = ::PoissonNextSend(now, average_interval_seconds);\n+    std::chrono::microseconds poisson_chrono = ::PoissonNextSend(std::chrono::microseconds{now}, std::chrono::seconds{average_interval_seconds});\n+\n+    BOOST_CHECK_EQUAL(poisson, poisson_chrono.count());\n+\n+    g_mock_deterministic_tests = false;\n+}\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "1a8f0d5a74d5cc0000456932babf35301f5c1686",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYThmMGQ1YTc0ZDVjYzAwMDA0NTY5MzJiYWJmMzUzMDFmNWMxNjg2",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-10-30T22:37:35Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-11-05T10:12:10Z"
      },
      "message": "[tools] update nNextInvSend to use mockable time",
      "tree": {
        "sha": "ef35833e97ffd8ad755565fd42d1bbe44c99de16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef35833e97ffd8ad755565fd42d1bbe44c99de16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a8f0d5a74d5cc0000456932babf35301f5c1686",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a8f0d5a74d5cc0000456932babf35301f5c1686",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a8f0d5a74d5cc0000456932babf35301f5c1686",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a8f0d5a74d5cc0000456932babf35301f5c1686/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4de630354fc6808b9b13b9e82da1a82f2f50f26a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4de630354fc6808b9b13b9e82da1a82f2f50f26a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4de630354fc6808b9b13b9e82da1a82f2f50f26a"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c5e7f6c2b17c49cd48b8b0c3400d85fb4ba015d6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a8f0d5a74d5cc0000456932babf35301f5c1686/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a8f0d5a74d5cc0000456932babf35301f5c1686/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1a8f0d5a74d5cc0000456932babf35301f5c1686",
        "patch": "@@ -762,7 +762,7 @@ class CNode\n         bool fSendMempool GUARDED_BY(cs_tx_inventory){false};\n         // Last time a \"MEMPOOL\" request was serviced.\n         std::atomic<std::chrono::seconds> m_last_mempool_req{std::chrono::seconds{0}};\n-        int64_t nNextInvSend{0};\n+        std::chrono::microseconds nNextInvSend{0};\n \n         CCriticalSection cs_feeFilter;\n         // Minimum fee rate with which to filter inv's to this node"
      },
      {
        "sha": "38b25a70b8f5939acccfad3dccea4969793dd62a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a8f0d5a74d5cc0000456932babf35301f5c1686/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a8f0d5a74d5cc0000456932babf35301f5c1686/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1a8f0d5a74d5cc0000456932babf35301f5c1686",
        "patch": "@@ -3548,6 +3548,8 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n         // Address refresh broadcast\n         int64_t nNow = GetTimeMicros();\n+        auto current_time = GetTime<std::chrono::microseconds>();\n+\n         if (pto->IsAddrRelayPeer() && !::ChainstateActive().IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {\n             AdvertiseLocal(pto);\n             pto->nNextLocalAddrSend = PoissonNextSend(nNow, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n@@ -3768,13 +3770,13 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                 LOCK(pto->m_tx_relay->cs_tx_inventory);\n                 // Check whether periodic sends should happen\n                 bool fSendTrickle = pto->HasPermission(PF_NOBAN);\n-                if (pto->m_tx_relay->nNextInvSend < nNow) {\n+                if (pto->m_tx_relay->nNextInvSend < current_time) {\n                     fSendTrickle = true;\n                     if (pto->fInbound) {\n-                        pto->m_tx_relay->nNextInvSend = connman->PoissonNextSendInbound(nNow, INVENTORY_BROADCAST_INTERVAL);\n+                        pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{connman->PoissonNextSendInbound(nNow, INVENTORY_BROADCAST_INTERVAL)};\n                     } else {\n                         // Use half the delay for outbound peers, as there is less privacy concern for them.\n-                        pto->m_tx_relay->nNextInvSend = PoissonNextSend(nNow, INVENTORY_BROADCAST_INTERVAL >> 1);\n+                        pto->m_tx_relay->nNextInvSend = PoissonNextSend(current_time, std::chrono::seconds{INVENTORY_BROADCAST_INTERVAL >> 1});\n                     }\n                 }\n \n@@ -3889,7 +3891,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        const auto current_time = GetTime<std::chrono::microseconds>();\n+        current_time = GetTime<std::chrono::microseconds>();\n         // nNow is the current system time (GetTimeMicros is not mockable) and\n         // should be replaced by the mockable current_time eventually\n         nNow = GetTimeMicros();"
      }
    ]
  }
]