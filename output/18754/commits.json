[
  {
    "sha": "a9b957740e3490d87e5ce0b7f1b93ba43bb19764",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWI5NTc3NDBlMzQ5MGQ4N2U1Y2UwYjdmMWI5M2JhNDNiYjE5NzY0",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-04-20T15:10:52Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-04-21T13:06:59Z"
      },
      "message": "bench: add CAddrMan benchmarks\n\nThe added benchmarks exercise the public methods Add(), GetAddr(),\nSelect() and Good().",
      "tree": {
        "sha": "7cba98393f8dba2d0fa386d6e9aff88ac03590ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cba98393f8dba2d0fa386d6e9aff88ac03590ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9b957740e3490d87e5ce0b7f1b93ba43bb19764",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl6e7/MACgkQVN8G9ktV\ny7/EIx//R+OwGJ9JQSqq9jOKmNcR50ZirO7RyiTmHIDpRzI/cQFhp2/03S71VRCZ\n1/HjHykub3D5H0V1CiSpcbqhzv62Tddv5IxBy9emWyMBTX8GAhlaQ4AUaHlMNp1C\n92eztmg8EdNoxzf1SK4QvxXe4ZZNaIOm4cBcPj1uLAwVATU0yzileXY3hVeoMQpe\nsSYhgvNjomNDYCJcq95eauTQ3X7AWad2r2Hh3fGtQENGgkKS5HZwqUiPKn3GDnId\nVIeBAVqmwtXjP2pKwIHONNnL1wNbjKk/q7k6QAe+CMvqiwKTw/NGAolk2DguNHBt\nymSwbqZzPS9A+uLZyk1XNq9LcrFr1RBtRX46Q7s1W0rrQIvmZh22yvmRYG6xG9cm\nM2EQH6yTJYxdGH2u7dJHoA0InmZm7Am9GJberIAzcXALltU9BV7vQuXHAFV9w8bm\nMgFbkchhlY/cUMSOJqMX0l4hNDKlTQjJVD8gM4cQb13JdF89DrVFwJpuQUj1wgy3\no080EXO7S+a3pp0VGcVQj4m7l3DNP/LFALt2euc7b/laHzbWv0NZsxSbGulDK7lR\nlloLSsxHPf4lECkzJHYm9hI0IlGGTOnWoZ3iLQNuoe0F6j1f6K4x1RVPqJntllJZ\nhACkxAvpGjPFIuBLxACoSCnP9HcqmmC2KIet+YbIEKlXLp19fgqi1+v5opQPId0J\nNZvA10XNNd1EXqj6dO11YvP8xguKvuWMnQh8w0MqXZZttwOayTMXU0MoE1m+Srtm\nhrUJ8e9KB1t94m7c1dVOyKjjE+Cba0knyfjFXiYK+8xOqWxGOSjXlLuAoYd1WwWF\nzwyL6X3yzCA8uNU1SgUZqrc6eIdDmdhdk7PRHgfckDUNIPLdpEqS9w8F5UDTdnI8\n3k0qPYyxAM3VnplEHrIrp91rIThj0k0JXxqSQewnqrDdHLBuHabs/aGQr/pDm0dB\norfwV5Z3IwAIUi9Y/R0qswW+rGty1I84RB4Z3O+Ix1aFY2zvFpPWsyNcNy66V3IC\nqca5qSWJGdiybSRurek4oEi8veiac+rp3SE5E5YKZQ6SB9CS9UcvfBnWIwGOJH3u\nWgoQCVgFlgX/1BuX3fjs5Hfx8VXl0226uKndjQtv0adwdj+YwPAkn2tjLIaI+HFK\nkKb4zwIKuFW/s+VEqqxiuObISTMACo93Kx8h4xLQNx6yElwsyjuvaMLhHodYaV7n\nQSQbfJernO6rTdSM2YNMN1kkfOvRPhGH9bngErwpkFV9r7O3ldbb2mdytxN/0l50\nac3OKapbv9tHjONZk1R2xETMh1O9FWyTw/5SqPYEj15TcnrhD5tpgvmcWqWwhknl\n+ixJvs7F+Jel8vmvxcQEPn7kgmOjpg==\n=7DPo\n-----END PGP SIGNATURE-----",
        "payload": "tree 7cba98393f8dba2d0fa386d6e9aff88ac03590ac\nparent 977328338e468390feea691de744609db213281b\nauthor Vasil Dimov <vd@FreeBSD.org> 1587395452 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1587474419 +0200\n\nbench: add CAddrMan benchmarks\n\nThe added benchmarks exercise the public methods Add(), GetAddr(),\nSelect() and Good().\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b957740e3490d87e5ce0b7f1b93ba43bb19764",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9b957740e3490d87e5ce0b7f1b93ba43bb19764",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b957740e3490d87e5ce0b7f1b93ba43bb19764/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "977328338e468390feea691de744609db213281b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/977328338e468390feea691de744609db213281b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/977328338e468390feea691de744609db213281b"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 141,
      "deletions": 0
    },
    "files": [
      {
        "sha": "766c0fca546d323d7f7631228bff798c4bfedb76",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b957740e3490d87e5ce0b7f1b93ba43bb19764/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b957740e3490d87e5ce0b7f1b93ba43bb19764/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=a9b957740e3490d87e5ce0b7f1b93ba43bb19764",
        "patch": "@@ -12,6 +12,7 @@ GENERATED_BENCH_FILES = $(RAW_BENCH_FILES:.raw=.raw.h)\n \n bench_bench_bitcoin_SOURCES = \\\n   $(RAW_BENCH_FILES) \\\n+  bench/addrman.cpp \\\n   bench/bench_bitcoin.cpp \\\n   bench/bench.cpp \\\n   bench/bench.h \\"
      },
      {
        "sha": "cc260df2b810ed57ff01087a4a8e4e72095a090a",
        "filename": "src/bench/addrman.cpp",
        "status": "added",
        "additions": 140,
        "deletions": 0,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b957740e3490d87e5ce0b7f1b93ba43bb19764/src/bench/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b957740e3490d87e5ce0b7f1b93ba43bb19764/src/bench/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/addrman.cpp?ref=a9b957740e3490d87e5ce0b7f1b93ba43bb19764",
        "patch": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrman.h>\n+#include <bench/bench.h>\n+#include <random.h>\n+#include <util/time.h>\n+\n+#include <vector>\n+\n+/* A \"source\" is a source address from which we have received a bunch of other addresses. */\n+\n+static constexpr size_t NUM_SOURCES = 64;\n+static constexpr size_t NUM_ADDRESSES_PER_SOURCE = 256;\n+\n+static std::vector<CAddress> g_sources;\n+static std::vector<std::vector<CAddress>> g_addresses;\n+\n+static void CreateAddresses()\n+{\n+    if (g_sources.size() > 0) { // already created\n+        return;\n+    }\n+\n+    FastRandomContext rng(uint256(std::vector<unsigned char>(32, 123)));\n+\n+    auto randAddr = [&rng]() {\n+        in6_addr addr;\n+        memcpy(&addr, rng.randbytes(sizeof(addr)).data(), sizeof(addr));\n+\n+        uint16_t port;\n+        memcpy(&port, rng.randbytes(sizeof(port)).data(), sizeof(port));\n+        if (port == 0) {\n+            port = 1;\n+        }\n+\n+        CAddress ret(CService(addr, port), NODE_NETWORK);\n+\n+        ret.nTime = GetAdjustedTime();\n+\n+        return ret;\n+    };\n+\n+    for (size_t source_i = 0; source_i < NUM_SOURCES; ++source_i) {\n+        g_sources.emplace_back(randAddr());\n+        g_addresses.emplace_back();\n+        for (size_t addr_i = 0; addr_i < NUM_ADDRESSES_PER_SOURCE; ++addr_i) {\n+            g_addresses[source_i].emplace_back(randAddr());\n+        }\n+    }\n+}\n+\n+static void AddAddressesToAddrMan(CAddrMan& addrman)\n+{\n+    for (size_t source_i = 0; source_i < NUM_SOURCES; ++source_i) {\n+        addrman.Add(g_addresses[source_i], g_sources[source_i]);\n+    }\n+}\n+\n+static void FillAddrMan(CAddrMan& addrman)\n+{\n+    CreateAddresses();\n+\n+    AddAddressesToAddrMan(addrman);\n+}\n+\n+/* Benchmarks */\n+\n+static void AddrManAdd(benchmark::State& state)\n+{\n+    CreateAddresses();\n+\n+    CAddrMan addrman;\n+\n+    while (state.KeepRunning()) {\n+        AddAddressesToAddrMan(addrman);\n+        addrman.Clear();\n+    }\n+}\n+\n+static void AddrManSelect(benchmark::State& state)\n+{\n+    CAddrMan addrman;\n+\n+    FillAddrMan(addrman);\n+\n+    while (state.KeepRunning()) {\n+        const auto& address = addrman.Select();\n+        assert(address.GetPort() > 0);\n+    }\n+}\n+\n+static void AddrManGetAddr(benchmark::State& state)\n+{\n+    CAddrMan addrman;\n+\n+    FillAddrMan(addrman);\n+\n+    while (state.KeepRunning()) {\n+        const auto& addresses = addrman.GetAddr();\n+        assert(addresses.size() > 0);\n+    }\n+}\n+\n+static void AddrManGood(benchmark::State& state)\n+{\n+    /* Create many CAddrMan objects - one to be modified at each loop iteration.\n+     * This is necessary because the CAddrMan::Good() method modifies the\n+     * object, affecting the timing of subsequent calls to the same method and\n+     * we want to do the same amount of work in every loop iteration. */\n+\n+    const uint64_t numLoops = state.m_num_iters * state.m_num_evals;\n+\n+    std::vector<CAddrMan> addrmans(numLoops);\n+    for (auto& addrman : addrmans) {\n+        FillAddrMan(addrman);\n+    }\n+\n+    auto markSomeAsGood = [](CAddrMan& addrman) {\n+        for (size_t source_i = 0; source_i < NUM_SOURCES; ++source_i) {\n+            for (size_t addr_i = 0; addr_i < NUM_ADDRESSES_PER_SOURCE; ++addr_i) {\n+                if (addr_i % 32 == 0) {\n+                    addrman.Good(g_addresses[source_i][addr_i]);\n+                }\n+            }\n+        }\n+    };\n+\n+    uint64_t i = 0;\n+    while (state.KeepRunning()) {\n+        markSomeAsGood(addrmans.at(i));\n+        ++i;\n+    }\n+}\n+\n+BENCHMARK(AddrManAdd, 5);\n+BENCHMARK(AddrManSelect, 1000000);\n+BENCHMARK(AddrManGetAddr, 500);\n+BENCHMARK(AddrManGood, 2);"
      }
    ]
  }
]