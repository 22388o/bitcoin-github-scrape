[
  {
    "sha": "4343f114cc661cf031ec915538c11b9b030e2e15",
    "node_id": "C_kwDOABII59oAKDQzNDNmMTE0Y2M2NjFjZjAzMWVjOTE1NTM4YzExYjliMDMwZTJlMTU",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-09-30T14:18:50Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-09-30T14:21:17Z"
      },
      "message": "Replace use of locale dependent atoi(\u2026) with locale-independent std::from_chars(\u2026) (C++17)\n\ntest: Add test cases for LocaleIndependentAtoi\n\nfuzz: Assert legacy atoi(s) == LocaleIndependentAtoi<int>(s)\n\nfuzz: Assert legacy atoi64(s) == LocaleIndependentAtoi<int64_t>(s)",
      "tree": {
        "sha": "0b0cc9ec8fbea9cc65490dd2ae437478b78c3a72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b0cc9ec8fbea9cc65490dd2ae437478b78c3a72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4343f114cc661cf031ec915538c11b9b030e2e15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4343f114cc661cf031ec915538c11b9b030e2e15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4343f114cc661cf031ec915538c11b9b030e2e15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4343f114cc661cf031ec915538c11b9b030e2e15/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d8e0c0c3c0d3c4cee7bb52d1edf501f40c53463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8e0c0c3c0d3c4cee7bb52d1edf501f40c53463",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d8e0c0c3c0d3c4cee7bb52d1edf501f40c53463"
      }
    ],
    "stats": {
      "total": 197,
      "additions": 145,
      "deletions": 52
    },
    "files": [
      {
        "sha": "320811b9e986d6d4021224d310f13717df3b7298",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -69,7 +69,7 @@ CScript ParseScript(const std::string& s)\n             (w->front() == '-' && w->size() > 1 && std::all_of(w->begin()+1, w->end(), ::IsDigit)))\n         {\n             // Number\n-            int64_t n = atoi64(*w);\n+            int64_t n = LocaleIndependentAtoi<int64_t>(*w);\n \n             //limit the range of numbers ParseScript accepts in decimal\n             //since numbers outside -0xFFFFFFFF...0xFFFFFFFF are illegal in scripts"
      },
      {
        "sha": "104fe8bf01a8c8d3bd37ab68c6df2391087cfcfd",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -85,7 +85,7 @@ void CleanupBlockRevFiles()\n     // start removing block files.\n     int nContigCounter = 0;\n     for (const std::pair<const std::string, fs::path>& item : mapBlockFiles) {\n-        if (atoi(item.first) == nContigCounter) {\n+        if (LocaleIndependentAtoi<int>(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n         }"
      },
      {
        "sha": "3c0dc5aa40bdc0076ba52709e52f447f694127d0",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -250,7 +250,7 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n                                     for(char argch: curarg)\n                                         if (!IsDigit(argch))\n                                             throw std::runtime_error(\"Invalid result query\");\n-                                    subelement = lastResult[atoi(curarg.c_str())];\n+                                    subelement = lastResult[LocaleIndependentAtoi<int>(curarg)];\n                                 }\n                                 else if (lastResult.isObject())\n                                     subelement = find_value(lastResult, curarg);"
      },
      {
        "sha": "8cad51a7102d34e23ef9fe4cae4e69af7575cade",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -702,7 +702,7 @@ static RPCHelpMan getblocktemplate()\n             std::string lpstr = lpval.get_str();\n \n             hashWatchedChain = ParseHashV(lpstr.substr(0, 64), \"longpollid\");\n-            nTransactionsUpdatedLastLP = atoi64(lpstr.substr(64));\n+            nTransactionsUpdatedLastLP = LocaleIndependentAtoi<int64_t>(lpstr.substr(64));\n         }\n         else\n         {"
      },
      {
        "sha": "4ad81235540142619087d532f6e9c2a9a6477c2c",
        "filename": "src/test/fuzz/locale.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/test/fuzz/locale.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/test/fuzz/locale.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/locale.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -50,8 +50,6 @@ FUZZ_TARGET(locale)\n     const bool parseint32_without_locale = ParseInt32(random_string, &parseint32_out_without_locale);\n     int64_t parseint64_out_without_locale;\n     const bool parseint64_without_locale = ParseInt64(random_string, &parseint64_out_without_locale);\n-    const int64_t atoi64_without_locale = atoi64(random_string);\n-    const int atoi_without_locale = atoi(random_string);\n     const int64_t random_int64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const std::string tostring_without_locale = ToString(random_int64);\n     // The variable `random_int32` is no longer used, but the harness still needs to\n@@ -77,10 +75,6 @@ FUZZ_TARGET(locale)\n     if (parseint64_without_locale) {\n         assert(parseint64_out_without_locale == parseint64_out_with_locale);\n     }\n-    const int64_t atoi64_with_locale = atoi64(random_string);\n-    assert(atoi64_without_locale == atoi64_with_locale);\n-    const int atoi_with_locale = atoi(random_string);\n-    assert(atoi_without_locale == atoi_with_locale);\n     const std::string tostring_with_locale = ToString(random_int64);\n     assert(tostring_without_locale == tostring_with_locale);\n     const std::string strprintf_int_with_locale = strprintf(\"%d\", random_int64);"
      },
      {
        "sha": "6a302e1e06bb8c05e395f69ccdbbcb3039fa895e",
        "filename": "src/test/fuzz/parse_numbers.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/test/fuzz/parse_numbers.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/test/fuzz/parse_numbers.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_numbers.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -25,13 +25,13 @@ FUZZ_TARGET(parse_numbers)\n \n     int32_t i32;\n     (void)ParseInt32(random_string, &i32);\n-    (void)atoi(random_string);\n+    (void)LocaleIndependentAtoi<int>(random_string);\n \n     uint32_t u32;\n     (void)ParseUInt32(random_string, &u32);\n \n     int64_t i64;\n-    (void)atoi64(random_string);\n+    (void)LocaleIndependentAtoi<int64_t>(random_string);\n     (void)ParseFixedPoint(random_string, 3, &i64);\n     (void)ParseInt64(random_string, &i64);\n "
      },
      {
        "sha": "ab646c68fcf665aa1bbe6b03b5e7ce151008015f",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -122,6 +122,12 @@ bool LegacyParseUInt64(const std::string& str, uint64_t* out)\n     return endp && *endp == 0 && !errno &&\n            n <= std::numeric_limits<uint64_t>::max();\n }\n+\n+// For backwards compatibility checking.\n+int64_t atoi64_legacy(const std::string& str)\n+{\n+    return strtoll(str.c_str(), nullptr, 10);\n+}\n }; // namespace\n \n FUZZ_TARGET(string)\n@@ -268,4 +274,22 @@ FUZZ_TARGET(string)\n             assert(u8 == u8_legacy);\n         }\n     }\n+\n+    {\n+        const int atoi_result = atoi(random_string_1.c_str());\n+        const int locale_independent_atoi_result = LocaleIndependentAtoi<int>(random_string_1);\n+        const int64_t atoi64_result = atoi64_legacy(random_string_1);\n+        const bool out_of_range = atoi64_result < std::numeric_limits<int>::min() || atoi64_result > std::numeric_limits<int>::max();\n+        if (out_of_range) {\n+            assert(locale_independent_atoi_result == 0);\n+        } else {\n+            assert(atoi_result == locale_independent_atoi_result);\n+        }\n+    }\n+\n+    {\n+        const int64_t atoi64_result = atoi64_legacy(random_string_1);\n+        const int64_t locale_independent_atoi_result = LocaleIndependentAtoi<int64_t>(random_string_1);\n+        assert(atoi64_result == locale_independent_atoi_result || locale_independent_atoi_result == 0);\n+    }\n }"
      },
      {
        "sha": "5d1ad2ebf633d827bfb6a95c6402af86866a02df",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -1549,6 +1549,77 @@ BOOST_AUTO_TEST_CASE(test_ToIntegral)\n     BOOST_CHECK(!ToIntegral<uint8_t>(\"256\"));\n }\n \n+BOOST_AUTO_TEST_CASE(test_LocaleIndependentAtoi)\n+{\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"1234\"), 1'234);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"0\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"01234\"), 1'234);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-1234\"), -1'234);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\" 1\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"1 \"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"1a\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"1.1\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"1.9\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"+01.9\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-1\"), -1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\" -1\"), -1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-1 \"), -1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\" -1 \"), -1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"+1\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\" +1\"), 1);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\" +1 \"), 1);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"+-1\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-+1\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"++1\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"--1\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"aap\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"0x1\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-32482348723847471234\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"32482348723847471234\"), 0);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int64_t>(\"-9223372036854775809\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int64_t>(\"-9223372036854775808\"), -9'223'372'036'854'775'807LL - 1LL);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int64_t>(\"9223372036854775807\"), 9'223'372'036'854'775'807);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int64_t>(\"9223372036854775808\"), 0);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint64_t>(\"-1\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint64_t>(\"0\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint64_t>(\"18446744073709551615\"), 18'446'744'073'709'551'615ULL);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint64_t>(\"18446744073709551616\"), 0U);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-2147483649\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"-2147483648\"), -2'147'483'648LL);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"2147483647\"), 2'147'483'647);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int32_t>(\"2147483648\"), 0);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint32_t>(\"-1\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint32_t>(\"0\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint32_t>(\"4294967295\"), 4'294'967'295U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint32_t>(\"4294967296\"), 0U);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int16_t>(\"-32769\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int16_t>(\"-32768\"), -32'768);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int16_t>(\"32767\"), 32'767);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int16_t>(\"32768\"), 0);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint16_t>(\"-1\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint16_t>(\"0\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint16_t>(\"65535\"), 65'535U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint16_t>(\"65536\"), 0U);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int8_t>(\"-129\"), 0);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int8_t>(\"-128\"), -128);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int8_t>(\"127\"), 127);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<int8_t>(\"128\"), 0);\n+\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint8_t>(\"-1\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint8_t>(\"0\"), 0U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint8_t>(\"255\"), 255U);\n+    BOOST_CHECK_EQUAL(LocaleIndependentAtoi<uint8_t>(\"256\"), 0U);\n+}\n+\n BOOST_AUTO_TEST_CASE(test_ParseInt64)\n {\n     int64_t n;"
      },
      {
        "sha": "4bd19dcf45f66a130a84d909c9cb9fae9a7d6adc",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -83,7 +83,7 @@ void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)\n         if (s.size() < 4) // Short line\n             continue;\n         // <status>(-|+| )<data><CRLF>\n-        self->message.code = atoi(s.substr(0,3));\n+        self->message.code = LocaleIndependentAtoi<int>(s.substr(0,3));\n         self->message.lines.push_back(s.substr(4));\n         char ch = s[3]; // '-','+' or ' '\n         if (ch == ' ') {"
      },
      {
        "sha": "95a919ad12d965aa3671f6d7ed88b3736f184269",
        "filename": "src/util/moneystr.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/util/moneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/util/moneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -77,8 +77,7 @@ std::optional<CAmount> ParseMoney(const std::string& money_string)\n         return std::nullopt;\n     if (nUnits < 0 || nUnits > COIN)\n         return std::nullopt;\n-    int64_t nWhole = atoi64(strWhole);\n-\n+    int64_t nWhole = LocaleIndependentAtoi<int64_t>(strWhole);\n     CAmount value = nWhole * COIN + nUnits;\n \n     if (!MoneyRange(value)) {"
      },
      {
        "sha": "88fec6740a52b226d20c7a097470f5cd3df241ec",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -403,20 +403,6 @@ std::string FormatParagraph(const std::string& in, size_t width, size_t indent)\n     return out.str();\n }\n \n-int64_t atoi64(const std::string& str)\n-{\n-#ifdef _MSC_VER\n-    return _atoi64(str.c_str());\n-#else\n-    return strtoll(str.c_str(), nullptr, 10);\n-#endif\n-}\n-\n-int atoi(const std::string& str)\n-{\n-    return atoi(str.c_str());\n-}\n-\n /** Upper bound for mantissa.\n  * 10^18-1 is the largest arbitrary decimal that will fit in a signed 64-bit integer.\n  * Larger integers cannot consist of arbitrary combinations of 0-9:"
      },
      {
        "sha": "166352c42f342cb93bb6d2670682fc5ffde88c61",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 28,
        "deletions": 2,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -11,6 +11,7 @@\n \n #include <attributes.h>\n #include <span.h>\n+#include <util/string.h>\n \n #include <charconv>\n #include <cstdint>\n@@ -68,8 +69,33 @@ std::string EncodeBase32(Span<const unsigned char> input, bool pad = true);\n std::string EncodeBase32(const std::string& str, bool pad = true);\n \n void SplitHostPort(std::string in, uint16_t& portOut, std::string& hostOut);\n-int64_t atoi64(const std::string& str);\n-int atoi(const std::string& str);\n+\n+// LocaleIndependentAtoi is provided for backwards compatibility reasons.\n+//\n+// New code should use the ParseInt64/ParseUInt64/ParseInt32/ParseUInt32 functions\n+// which provide parse error feedback.\n+//\n+// The goal of LocaleIndependentAtoi is to replicate the exact defined behaviour\n+// of atoi and atoi64 as they behave under the \"C\" locale.\n+template <typename T>\n+T LocaleIndependentAtoi(const std::string& str)\n+{\n+    static_assert(std::is_integral<T>::value);\n+    T result;\n+    // Emulate atoi(...) handling of white space and leading +/-.\n+    std::string s = TrimString(str);\n+    if (!s.empty() && s[0] == '+') {\n+        if (s.length() >= 2 && s[1] == '-') {\n+            return 0;\n+        }\n+        s = s.substr(1);\n+    }\n+    auto [_, error_condition] = std::from_chars(s.data(), s.data() + s.size(), result);\n+    if (error_condition != std::errc{}) {\n+        return 0;\n+    }\n+    return result;\n+}\n \n /**\n  * Tests if the given character is a decimal digit."
      },
      {
        "sha": "79c08816fa69b70d72a4465dee109d803e0fff63",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -158,16 +158,14 @@ std::streampos GetFileSize(const char* path, std::streamsize max) {\n /**\n  * Interpret a string argument as a boolean.\n  *\n- * The definition of atoi() requires that non-numeric string values like \"foo\",\n- * return 0. This means that if a user unintentionally supplies a non-integer\n- * argument here, the return value is always false. This means that -foo=false\n- * does what the user probably expects, but -foo=true is well defined but does\n- * not do what they probably expected.\n+ * The definition of LocaleIndependentAtoi<int>() requires that non-numeric string values\n+ * like \"foo\", return 0. This means that if a user unintentionally supplies a\n+ * non-integer argument here, the return value is always false. This means that\n+ * -foo=false does what the user probably expects, but -foo=true is well defined\n+ * but does not do what they probably expected.\n  *\n- * The return value of atoi() is undefined when given input not representable as\n- * an int. On most systems this means string value between \"-2147483648\" and\n- * \"2147483647\" are well defined (this method will return true). Setting\n- * -txindex=2147483648 on most systems, however, is probably undefined.\n+ * The return value of LocaleIndependentAtoi<int>(...) is zero when given input not\n+ * representable as an int.\n  *\n  * For a more extensive discussion of this topic (and a wide range of opinions\n  * on the Right Way to change this code), see PR12713.\n@@ -176,7 +174,7 @@ static bool InterpretBool(const std::string& strValue)\n {\n     if (strValue.empty())\n         return true;\n-    return (atoi(strValue) != 0);\n+    return (LocaleIndependentAtoi<int>(strValue) != 0);\n }\n \n static std::string SettingName(const std::string& arg)\n@@ -594,7 +592,7 @@ std::string ArgsManager::GetArg(const std::string& strArg, const std::string& st\n int64_t ArgsManager::GetIntArg(const std::string& strArg, int64_t nDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n+    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : LocaleIndependentAtoi<int64_t>(value.get_str());\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const"
      },
      {
        "sha": "223901586ec73191c730d383d8bf41d655e5cf17",
        "filename": "src/wallet/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/src/wallet/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/src/wallet/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/transaction.h?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -216,9 +216,9 @@ class CWalletTx\n         }\n \n         const auto it_op = mapValue.find(\"n\");\n-        nOrderPos = (it_op != mapValue.end()) ? atoi64(it_op->second) : -1;\n+        nOrderPos = (it_op != mapValue.end()) ? LocaleIndependentAtoi<int64_t>(it_op->second) : -1;\n         const auto it_ts = mapValue.find(\"timesmart\");\n-        nTimeSmart = (it_ts != mapValue.end()) ? static_cast<unsigned int>(atoi64(it_ts->second)) : 0;\n+        nTimeSmart = (it_ts != mapValue.end()) ? static_cast<unsigned int>(LocaleIndependentAtoi<int64_t>(it_ts->second)) : 0;\n \n         mapValue.erase(\"fromaccount\");\n         mapValue.erase(\"spent\");"
      },
      {
        "sha": "3015c4f9b947d17341efe9863aa2fcaa1d74e573",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4343f114cc661cf031ec915538c11b9b030e2e15/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4343f114cc661cf031ec915538c11b9b030e2e15/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=4343f114cc661cf031ec915538c11b9b030e2e15",
        "patch": "@@ -37,23 +37,18 @@ export LC_ALL=C\n # See https://doc.qt.io/qt-5/qcoreapplication.html#locale-settings and\n # https://stackoverflow.com/a/34878283 for more details.\n \n+# TODO: Reduce KNOWN_VIOLATIONS by replacing uses of locale dependent stoul/strtol with locale\n+#       independent ToIntegral<T>(...).\n+# TODO: Reduce KNOWN_VIOLATIONS by replacing uses of locale dependent snprintf with strprintf.\n KNOWN_VIOLATIONS=(\n     \"src/bitcoin-tx.cpp.*stoul\"\n     \"src/dbwrapper.cpp.*stoul\"\n     \"src/dbwrapper.cpp:.*vsnprintf\"\n-    \"src/node/blockstorage.cpp:.*atoi\"\n-    \"src/qt/rpcconsole.cpp:.*atoi\"\n     \"src/rest.cpp:.*strtol\"\n     \"src/test/dbwrapper_tests.cpp:.*snprintf\"\n     \"src/test/fuzz/locale.cpp\"\n-    \"src/test/fuzz/parse_numbers.cpp:.*atoi\"\n     \"src/test/fuzz/string.cpp\"\n-    \"src/torcontrol.cpp:.*atoi\"\n     \"src/torcontrol.cpp:.*strtol\"\n-    \"src/util/strencodings.cpp:.*atoi\"\n-    \"src/util/strencodings.cpp:.*strtoll\"\n-    \"src/util/strencodings.h:.*atoi\"\n-    \"src/util/system.cpp:.*atoi\"\n )\n \n REGEXP_IGNORE_EXTERNAL_DEPENDENCIES=\"^src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)\""
      }
    ]
  }
]