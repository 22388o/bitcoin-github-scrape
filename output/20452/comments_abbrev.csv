laanwj,2020-11-22 12:15:15,"Note that we have a function `ParseInt32` (as well as 64 and UInt variants) for this and I once tried to use it in more places, see #17385.\n\nHowever these didn't turn out to be actually locale-independent. Maybe this can replace them eventually.\n",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731738740,731738740,
laanwj,2020-11-22 12:23:57,">  locale-independent std::from_chars(…) (C++17).\n\nThis is good to hear at least. From https://en.cppreference.com/w/cpp/utility/from_chars#Notes :\n\n> Unlike other parsing functions in C++ and C libraries, std::from_chars is locale-independent, non-allocating, and non-throwing.\n\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731739877,731739877,
DrahtBot,2020-11-22 13:18:44,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15936](https://github.com/bitcoin/bitcoin/pull/15936) (Unify bitcoin-qt and bitcoind persistent settings by ryanofsky)\n",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731747267,731747267,
laanwj,2020-11-22 13:29:25,"I think we need to make a choice here (either one or both):\n\n- Make an emulation of all broken and surprising `atoi` behavior, but call it something else than `ToIntegral`, something like `LocaleIndependentAtoi`, make it clear it should not be used in new code, it's only meant for preserving `atoi` behavior for backward compatibility reasons.\n- Make a sane integer parsing function that can e",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731748771,731748771,
practicalswift,2020-11-22 14:07:33,"@laanwj\n\n> I think we need to make a choice here (either one or both):\n> \n> * Make an emulation of all broken and surprising `atoi` behavior, but call it something else than `ToIntegral`, something like `LocaleIndependentAtoi`, make it clear it should not be used in new code, it's only meant for preserving `atoi` behavior for backward compatibility reasons.\n> * Make a sane integer parsin",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731753699,731753699,
laanwj,2020-11-22 17:48:26,"Okay, agree. I guess it could replace `atoi` as well as `atoi64` in that case (as it's parametrized on type)?",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731783760,731783760,
practicalswift,2020-11-22 19:48:22,@laanwj Done! I've now replaced all instances of `atoi64(s)` with `LocaleIndependentAtoi<int64_t>(s)`.,https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-731834478,731834478,
laanwj,2020-11-23 09:55:20,"> @laanwj Done! I've now replaced all instances of atoi64(s) with LocaleIndependentAtoi<int64_t>(s).\n\nThanks, looks good to me now except the documentation nit.",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-732051748,732051748,
laanwj,2020-11-25 14:28:35,"I don't get the CI error. Is `charconv` non-standard in some way?\n```\nIn file included from primitives/transaction.cpp:10:0:\n./util/strencodings.h:16:10: fatal error: charconv: No such file or directory\n #include <charconv>\n          ^~~~~~~~~~\ncompilation terminated.\n```",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-733740085,733740085,
practicalswift,2020-12-01 15:09:50,"@laanwj I think the CI failures are from relatively older distros, and that C++17 library support lagged behind C++17 compiler support for a while in C++17 infancy. \n\nAccording to [cppreference](https://en.cppreference.com/w/cpp/compiler_support) the [elementary string conversions](https://wg21.link/P0067R5) (`<charconv>`) were added in GCC libstdc++ 8, Clang libc++ 7 and MSVC Standard Library",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-736613876,736613876,
MarcoFalke,2020-12-01 15:51:41,"ok, this is blocked on #20460 ",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-736640758,736640758,
practicalswift,2020-12-15 12:57:51,"Could remove ""Waiting for author""? I don't know if we have any ""Blocked on another PR/issue"" (or ""Waiting for toolchain upgrade"") tag, but this PR is blocked on #20460 :)",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-745270906,745270906,
practicalswift,2021-06-13 08:12:04,"Rebased!\n\nCould this PR get a [23.0 milestone](https://github.com/bitcoin/bitcoin/milestone/52) like the related PR #20457 (""util: Make Parse{Int,UInt}{32,64} use locale independent std::from_chars(…) (C++17) instead of locale dependent strto{l,ll,ul,ull}"")? :)",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-860172153,860172153,
practicalswift,2021-09-29 14:19:36,"Now that #20460 has been merged I think this PR should be ready for final review :)\n\nSee also related PR #20457.",https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-930223139,930223139,
jonatack,2021-09-30 15:33:35,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-931433060,931433060,
laanwj,2021-09-30 16:57:22,Code review ACK 4343f114cc661cf031ec915538c11b9b030e2e15,https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-931498977,931498977,
MarcoFalke,2021-10-05 11:11:02,Follow up in #23184,https://github.com/bitcoin/bitcoin/pull/20452#issuecomment-934309149,934309149,
laanwj,2020-11-22 12:16:12,"Please, do not just return 0 in case of a parse error (same comment above!) but use explicit error feedback. The current formulation encourages ignoring errors. Most C++17ish would be to return an `Option`.\n(then handle it at the call site, if it wants to squash any errors to 0, fine)",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528326970,528326970,src/util/strencodings.h
laanwj,2020-11-22 12:32:37,"Making a copy of the string here, as well as below for the +/- check, is kind of efficient.\nNot sure it matters here, it's not like this function is used in any performance critical places at the moment.\n\nBut as the function takes a range, we could do better.",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528328860,528328860,src/util/strencodings.h
laanwj,2020-11-22 13:06:00,"I think you need to check the returned pointer against `last` as well, otherwise it ignores any remainder.",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528333055,528333055,src/util/strencodings.h
practicalswift,2020-11-22 14:12:08,"I agree on both for a sane safe interface, but since this function (`LocaleIndependentAtoi`) is meant as a quirk-by-quirk compatible to the not-entirely-sane `atoi(…)` I'm afraid we need to return a `T` (instead of `std::optional<T>`) and ignore any remainder, no? :)",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528341227,528341227,src/util/strencodings.h
laanwj,2020-11-23 09:54:55,Please add a comment what this function does (e.g.: replicate the exact behavior of `atoi` for backwards compatibility) and that new code should use the `Parse[U]IntXX` functions with parse error feedback.,https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528582133,528582133,src/util/strencodings.h
practicalswift,2020-11-23 15:50:49,Done! :),https://github.com/bitcoin/bitcoin/pull/20452#discussion_r528803662,528803662,src/util/strencodings.h
practicalswift,2020-12-01 16:15:18,"As a general rule I try to stay away from pointer arithmetic ([rationale here](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es42-keep-use-of-pointers-simple-and-straightforward)): that's the reason for the technically extraneous copy which I think is insignificant in this context :)\n\nPersonally I find code that avoids pointer arithmetic _much_ easier to reason about from a safe",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r533538947,533538947,src/util/strencodings.h
jonatack,2021-09-30 20:20:11,`nTransactionsUpdatedLastLP` is `unsigned int`; should this be defined or cast to that?,https://github.com/bitcoin/bitcoin/pull/20452#discussion_r719729331,719729331,src/rpc/mining.cpp
laanwj,2021-10-01 07:01:23,"This is a really important comment. I hope we can get rid of these functions entirely at some point. The implicit error handling behavior of `atoi` and `atoi64` is pretty much always undesirable.\n(so I would normally comment ""these function names are long and clunky, please shorten them"" but it's good in this case, we want using them to be ugly :smile:  )",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r719990550,719990550,src/util/strencodings.h
laanwj,2021-10-01 07:07:03,"Yes it probably needs the same kind of ugly cast as `nTimeSmart` in the wallet code. In the longer run the field should imo be converted to an explicitly sized type, and parsed as that, but keeping the behavior exactly the same makes sense here to keep it uncontroversial.",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r719993368,719993368,src/rpc/mining.cpp
practicalswift,2021-10-01 14:19:50,@jonatack Good point! I suggest we tackle that in a follow-up PR to keep this PR pure refactoring only :),https://github.com/bitcoin/bitcoin/pull/20452#discussion_r720289301,720289301,src/rpc/mining.cpp
MarcoFalke,2021-10-05 10:03:16,"The condition literally checks for the required format for ParseIntegral<>, so why not use that?",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r722086011,722086011,src/core_read.cpp
MarcoFalke,2021-10-05 10:04:32,Same,https://github.com/bitcoin/bitcoin/pull/20452#discussion_r722086942,722086942,src/qt/rpcconsole.cpp
MarcoFalke,2021-10-05 10:17:04,"The linter says to use `ToIntegral`, this contradicts by saying to use `ParseInt*`??",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r722096494,722096494,src/util/strencodings.h
MarcoFalke,2021-10-05 10:36:30,same,https://github.com/bitcoin/bitcoin/pull/20452#discussion_r722110536,722110536,src/util/moneystr.cpp
practicalswift,2021-10-05 11:54:38,Sounds like a good idea now that `ParseIntegral` is part of `master` :),https://github.com/bitcoin/bitcoin/pull/20452#discussion_r722163966,722163966,src/core_read.cpp
practicalswift,2021-10-05 11:55:20,`ToIntegral` sounds like a good suggestion now that it is part of `master` :),https://github.com/bitcoin/bitcoin/pull/20452#discussion_r722164459,722164459,src/util/strencodings.h
MarcoFalke,2021-10-05 12:03:17,"Sorry, I was wrong. This is not a refactor.",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r722170135,722170135,src/core_read.cpp
MarcoFalke,2021-10-05 12:03:33,"Sorry, I was wrong. This is not a refactor.",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r722170354,722170354,src/qt/rpcconsole.cpp
MarcoFalke,2021-10-05 12:03:51,"Sorry, I was wrong. This is not a refactor.",https://github.com/bitcoin/bitcoin/pull/20452#discussion_r722170522,722170522,src/util/moneystr.cpp
