[
  {
    "sha": "dbd8498b8134cb4cefa351eb21bef2769a7bdf18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmQ4NDk4YjgxMzRjYjRjZWZhMzUxZWIyMWJlZjI3NjlhN2JkZjE4",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-06-09T03:54:57Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-06-11T22:33:45Z"
      },
      "message": "wallet: Remove first parameter to ScanForWalletTransactions start_hash\n\nEvery caller looks up the block hash from a block height immediately before\ncalling.",
      "tree": {
        "sha": "5eea131baf9d421a762204c2c5d22306d1ccf674",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5eea131baf9d421a762204c2c5d22306d1ccf674"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbd8498b8134cb4cefa351eb21bef2769a7bdf18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd8498b8134cb4cefa351eb21bef2769a7bdf18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbd8498b8134cb4cefa351eb21bef2769a7bdf18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd8498b8134cb4cefa351eb21bef2769a7bdf18/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a79bca2f1fb25f433d6e100a31a3acfde2656ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a79bca2f1fb25f433d6e100a31a3acfde2656ce1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a79bca2f1fb25f433d6e100a31a3acfde2656ce1"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 13,
      "deletions": 37
    },
    "files": [
      {
        "sha": "36f43dd0af0237c69ed99b6679f8fe924737d2d6",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbd8498b8134cb4cefa351eb21bef2769a7bdf18/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbd8498b8134cb4cefa351eb21bef2769a7bdf18/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=dbd8498b8134cb4cefa351eb21bef2769a7bdf18",
        "patch": "@@ -153,7 +153,7 @@ void TestGUI(interfaces::Node& node)\n     {\n         WalletRescanReserver reserver(*wallet);\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet->ScanForWalletTransactions(Params().GetConsensus().hashGenesisBlock, 0 /* block height */, {} /* max height */, reserver, true /* fUpdate */);\n+        CWallet::ScanResult result = wallet->ScanForWalletTransactions(0 /* block height */, {} /* max height */, reserver, true /* fUpdate */);\n         QCOMPARE(result.status, CWallet::ScanResult::SUCCESS);\n         QCOMPARE(result.last_scanned_block, ::ChainActive().Tip()->GetBlockHash());\n         QVERIFY(result.last_failed_block.IsNull());"
      },
      {
        "sha": "240d2127172ee67706ee186ab3bbfd06d8afef69",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbd8498b8134cb4cefa351eb21bef2769a7bdf18/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbd8498b8134cb4cefa351eb21bef2769a7bdf18/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dbd8498b8134cb4cefa351eb21bef2769a7bdf18",
        "patch": "@@ -3537,7 +3537,6 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n \n     int start_height = 0;\n     Optional<int> stop_height;\n-    uint256 start_block;\n     {\n         LOCK(pwallet->cs_wallet);\n         int tip_height = pwallet->GetLastBlockHeight();\n@@ -3562,12 +3561,10 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         if (!pwallet->chain().hasBlocks(pwallet->GetLastBlockHash(), start_height, stop_height)) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n         }\n-\n-        CHECK_NONFATAL(pwallet->chain().findAncestorByHeight(pwallet->GetLastBlockHash(), start_height, FoundBlock().hash(start_block)));\n     }\n \n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(start_block, start_height, stop_height, reserver, true /* fUpdate */);\n+        pwallet->ScanForWalletTransactions(start_height, stop_height, reserver, true /* fUpdate */);\n     switch (result.status) {\n     case CWallet::ScanResult::SUCCESS:\n         break;"
      },
      {
        "sha": "a70f485674b3688fc14eaff5ef6b83cedb571782",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 22,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbd8498b8134cb4cefa351eb21bef2769a7bdf18/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbd8498b8134cb4cefa351eb21bef2769a7bdf18/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=dbd8498b8134cb4cefa351eb21bef2769a7bdf18",
        "patch": "@@ -78,24 +78,6 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     NodeContext node;\n     auto chain = interfaces::MakeChain(node);\n \n-    // Verify ScanForWalletTransactions fails to read an unknown start block.\n-    {\n-        CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        {\n-            LOCK(wallet.cs_wallet);\n-            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n-        }\n-        AddKey(wallet, coinbaseKey);\n-        WalletRescanReserver reserver(wallet);\n-        reserver.reserve();\n-        CWallet::ScanResult result = wallet.ScanForWalletTransactions({} /* start_block */, 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n-        BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::FAILURE);\n-        BOOST_CHECK(result.last_failed_block.IsNull());\n-        BOOST_CHECK(result.last_scanned_block.IsNull());\n-        BOOST_CHECK(!result.last_scanned_height);\n-        BOOST_CHECK_EQUAL(wallet.GetBalance().m_mine_immature, 0);\n-    }\n-\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n@@ -107,7 +89,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet);\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n+        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::SUCCESS);\n         BOOST_CHECK(result.last_failed_block.IsNull());\n         BOOST_CHECK_EQUAL(result.last_scanned_block, newTip->GetBlockHash());\n@@ -133,7 +115,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet);\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n+        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::FAILURE);\n         BOOST_CHECK_EQUAL(result.last_failed_block, oldTip->GetBlockHash());\n         BOOST_CHECK_EQUAL(result.last_scanned_block, newTip->GetBlockHash());\n@@ -158,7 +140,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet);\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n+        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::FAILURE);\n         BOOST_CHECK_EQUAL(result.last_failed_block, newTip->GetBlockHash());\n         BOOST_CHECK(result.last_scanned_block.IsNull());\n@@ -496,7 +478,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         AddKey(*wallet, coinbaseKey);\n         WalletRescanReserver reserver(*wallet);\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet->ScanForWalletTransactions(::ChainActive().Genesis()->GetBlockHash(), 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n+        CWallet::ScanResult result = wallet->ScanForWalletTransactions(0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::SUCCESS);\n         BOOST_CHECK_EQUAL(result.last_scanned_block, ::ChainActive().Tip()->GetBlockHash());\n         BOOST_CHECK_EQUAL(*result.last_scanned_height, ::ChainActive().Height());"
      },
      {
        "sha": "692c153172d3c7916bcd715e569f5b76b0c55edf",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbd8498b8134cb4cefa351eb21bef2769a7bdf18/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbd8498b8134cb4cefa351eb21bef2769a7bdf18/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dbd8498b8134cb4cefa351eb21bef2769a7bdf18",
        "patch": "@@ -1628,13 +1628,12 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n     int start_height = 0;\n-    uint256 start_block;\n-    bool start = chain().findFirstBlockWithTimeAndHeight(startTime - TIMESTAMP_WINDOW, 0, FoundBlock().hash(start_block).height(start_height));\n+    bool start = chain().findFirstBlockWithTimeAndHeight(startTime - TIMESTAMP_WINDOW, 0, FoundBlock().height(start_height));\n     WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, start ? WITH_LOCK(cs_wallet, return GetLastBlockHeight()) - start_height + 1 : 0);\n \n     if (start) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        ScanResult result = ScanForWalletTransactions(start_block, start_height, {} /* max_height */, reserver, update);\n+        ScanResult result = ScanForWalletTransactions(start_height, {} /* max_height */, reserver, update);\n         if (result.status == ScanResult::FAILURE) {\n             int64_t time_max;\n             CHECK_NONFATAL(chain().findBlock(result.last_failed_block, FoundBlock().maxTime(time_max)));\n@@ -1649,8 +1648,6 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * @param[in] start_block Scan starting block. If block is not on the active\n- *                        chain, the scan will return SUCCESS immediately.\n  * @param[in] start_height Height of start_block\n  * @param[in] max_height  Optional max scanning height. If unset there is\n  *                        no maximum and scanning can continue to the tip\n@@ -1665,17 +1662,17 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, int start_height, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(int start_height, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     int64_t start_time = GetTimeMillis();\n \n     assert(reserver.isReserved());\n \n-    uint256 block_hash = start_block;\n+    uint256 block_hash = chain().getBlockHash(start_height);\n     ScanResult result;\n \n-    WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", block_hash.ToString());\n \n     fAbortRescan = false;\n     ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\").translated, GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n@@ -3985,7 +3982,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         {\n             WalletRescanReserver reserver(*walletInstance);\n-            if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(chain.getBlockHash(rescan_height), rescan_height, {} /* max height */, reserver, true /* update */).status)) {\n+            if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(rescan_height, {} /* max height */, reserver, true /* update */).status)) {\n                 error = _(\"Failed to rescan the wallet during initialization\");\n                 return nullptr;\n             }"
      },
      {
        "sha": "9d501d2f75354874be9b982ca07f1eab4200d96d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbd8498b8134cb4cefa351eb21bef2769a7bdf18/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbd8498b8134cb4cefa351eb21bef2769a7bdf18/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dbd8498b8134cb4cefa351eb21bef2769a7bdf18",
        "patch": "@@ -920,7 +920,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n         //! USER_ABORT.\n         uint256 last_failed_block;\n     };\n-    ScanResult ScanForWalletTransactions(const uint256& start_block, int start_height, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate);\n+    ScanResult ScanForWalletTransactions(int start_height, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate);\n     void transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason) override;\n     void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions();"
      }
    ]
  }
]