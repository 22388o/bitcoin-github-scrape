[
  {
    "sha": "7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTZjNDZiMzdlZGI4YmZhMDA4NWQyMDJhYTdlOTQyN2Q1ZTRmY2Vi",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-04-25T15:09:29Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:22Z"
      },
      "message": "chainparams: add allowed assumeutxo values\n\nValues for mainnet and testnet will be specified in a follow-up PR that can be\nscrutinized accordingly. This structure is required for use in snapshot activation\nlogic.",
      "tree": {
        "sha": "68f691ce5fec4b11dc22465db1ac82b25662f128",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68f691ce5fec4b11dc22465db1ac82b25662f128"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiFUACgkQepNdrbLE\nTwU8CA/9Grk0/CHM16R71VTtxDPLnL59LXe6jzkh3ePQPqqgh38bD7cw9DOOxFaq\ntapv1xAiRnW73V1jb4Cs5HJgb6//UErisB1Mq+uPB0U65KwDmyASxV8N2yo2z7iP\nVaZwlEU6t/iudwscTtmotA30iqmmjckhszhy5h1VFJTDkedrPoiLrIgzsbo8OE8R\nr9pShUK6dWrl8ZKJnn9woct/uGUk8fcf0J6IZaGMZLENAUmCtwooU7xQK6sChDZM\nGcQjanG+WhNKPoUkNmcbna5sLH32HLXgp1dBjX8msOIX65TO7OdtHpycjA+BcLvx\nwSeuAx9oJmNyxbCScymtovyNum/Ax0vT41Ouv2YB9aKvheWlKy4oQnuSiCtAWjdY\naRY3/F4IgMLrOIx6gEBGtFjL5DTypU6cWmL0aiF2X/W6wx2U54NRG/PebHo8sFpM\nYuqaWu50rlzN+fIJVbFsC63ryyygZLtlkwHPDlVSf39GBIhWZrW1VfvMBHfg/YP9\n8kYwDbFXDSHTeNQyOrlhTh9YgqEBoXhpLO0m2Gn2ScZJAHjvHzZpzAYeWak8lHVU\n/WiK+YH7z9DMyNOxsr91+hP1yaW4yyxm+96SmdGZOoDJFBxQcUqQRWe8vB3QeNzs\nvmb5N8jTxfOGmUwI/w01630Gar8YRJqO0DTlucoHTV7rywf0LiE=\n=/a9Y\n-----END PGP SIGNATURE-----",
        "payload": "tree 68f691ce5fec4b11dc22465db1ac82b25662f128\nparent e9c037ba64dd5b073fccf059ef75db1c97abd0bd\nauthor James O'Beirne <james.obeirne@gmail.com> 1556204969 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138002 -0600\n\nchainparams: add allowed assumeutxo values\n\nValues for mainnet and testnet will be specified in a follow-up PR that can be\nscrutinized accordingly. This structure is required for use in snapshot activation\nlogic.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9c037ba64dd5b073fccf059ef75db1c97abd0bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9c037ba64dd5b073fccf059ef75db1c97abd0bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9c037ba64dd5b073fccf059ef75db1c97abd0bd"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 110,
      "deletions": 1
    },
    "files": [
      {
        "sha": "97280c0d1606bd2c4dea93984ee47b4893a51562",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
        "patch": "@@ -8,7 +8,6 @@\n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n #include <hash.h> // for signet block challenge hash\n-#include <tinyformat.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n #include <versionbitsinfo.h>\n@@ -161,6 +160,10 @@ class CMainParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+         // TODO to be specified in a future patch.\n+        };\n+\n         chainTxData = ChainTxData{\n             // Data from RPC: getchaintxstats 4096 0000000000000000000b9d2ec5a352ecba0592946514a92f14319dc2b367fc72\n             /* nTime    */ 1603995752,\n@@ -250,6 +253,10 @@ class CTestNetParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+            // TODO to be specified in a future patch.\n+        };\n+\n         chainTxData = ChainTxData{\n             // Data from RPC: getchaintxstats 4096 000000000000006433d1efec504c53ca332b64963c425395515b01977bd7b3b0\n             /* nTime    */ 1603359686,\n@@ -431,6 +438,17 @@ class CRegTestParams : public CChainParams {\n             }\n         };\n \n+        m_assumeutxo_data = MapAssumeutxo{\n+            {\n+                110,\n+                {uint256S(\"0x76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"), 110},\n+            },\n+            {\n+                210,\n+                {uint256S(\"0x9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"), 210},\n+            },\n+        };\n+\n         chainTxData = ChainTxData{\n             0,\n             0,\n@@ -526,3 +544,9 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     globalChainParams = CreateChainParams(gArgs, network);\n }\n+\n+std::ostream& operator<<(std::ostream& o, const AssumeutxoData& aud)\n+{\n+    o << strprintf(\"AssumeutxoData(%s, %s)\", aud.hash_serialized.ToString(), aud.nChainTx);\n+    return o;\n+}"
      },
      {
        "sha": "4d24dcdb7c6c4ea5c434907148e77ecc5612ea20",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
        "patch": "@@ -30,6 +30,26 @@ struct CCheckpointData {\n     }\n };\n \n+/**\n+ * Holds configuration for use during UTXO snapshot load and validation. The contents\n+ * here are security critical, since they dictate which UTXO snapshots are recognized\n+ * as valid.\n+ */\n+struct AssumeutxoData {\n+    //! The expected hash of the deserialized UTXO set.\n+    const uint256 hash_serialized;\n+\n+    //! Used to populate the nChainTx value, which is used during BlockManager::LoadBlockIndex().\n+    //!\n+    //! We need to hardcode the value here because this is computed cumulatively using block data,\n+    //! which we do not necessarily have at the time of snapshot load.\n+    const unsigned int nChainTx;\n+};\n+\n+std::ostream& operator<<(std::ostream& o, const AssumeutxoData& aud);\n+\n+using MapAssumeutxo = std::map<int, const AssumeutxoData>;\n+\n /**\n  * Holds various statistics on transactions within a chain. Used to estimate\n  * verification progress during chain sync.\n@@ -90,6 +110,11 @@ class CChainParams\n     const std::string& Bech32HRP() const { return bech32_hrp; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n+\n+    //! Get allowed assumeutxo configuration.\n+    //! @see ChainstateManager\n+    const MapAssumeutxo& Assumeutxo() const { return m_assumeutxo_data; }\n+\n     const ChainTxData& TxData() const { return chainTxData; }\n protected:\n     CChainParams() {}\n@@ -111,6 +136,7 @@ class CChainParams\n     bool m_is_test_chain;\n     bool m_is_mockable_chain;\n     CCheckpointData checkpointData;\n+    MapAssumeutxo m_assumeutxo_data;\n     ChainTxData chainTxData;\n };\n "
      },
      {
        "sha": "06fcc337253fc62f7364a15f3903724662638e69",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
        "patch": "@@ -55,6 +55,18 @@ static void ApplyHash(CCoinsStats& stats, MuHash3072& muhash, const uint256& has\n     muhash.Insert(MakeUCharSpan(ss));\n }\n \n+//! Warning: be very careful when changing this! assumeutxo and UTXO snapshot\n+//! validation commitments are reliant on the hash constructed by this\n+//! function.\n+//!\n+//! If the construction of this hash is changed, it will invalidate\n+//! existing UTXO snapshots. This will not result in any kind of consensus\n+//! failure, but it will force clients that were expecting to make use of\n+//! assumeutxo to do traditional IBD instead.\n+//!\n+//! It is also possible, though very unlikely, that a change in this\n+//! construction could cause a previously invalid (and potentially malicious)\n+//! UTXO snapshot to be considered valid.\n template <typename T>\n static void ApplyStats(CCoinsStats& stats, T& hash_obj, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n {"
      },
      {
        "sha": "ecf945309405d0d7c05c5df5acd4740166e57f8b",
        "filename": "src/test/validation_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/test/validation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/test/validation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_tests.cpp?ref=7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
        "patch": "@@ -5,6 +5,7 @@\n #include <chainparams.h>\n #include <net.h>\n #include <signet.h>\n+#include <uint256.h>\n #include <validation.h>\n \n #include <test/util/setup_common.h>\n@@ -119,4 +120,27 @@ BOOST_AUTO_TEST_CASE(signet_parse_tests)\n     BOOST_CHECK(!CheckSignetBlockSolution(block, signet_params->GetConsensus()));\n }\n \n+//! Test retrieval of valid assumeutxo values.\n+BOOST_AUTO_TEST_CASE(test_assumeutxo)\n+{\n+    const auto params = CreateChainParams(*m_node.args, CBaseChainParams::REGTEST);\n+\n+    // These heights don't have assumeutxo configurations associated, per the contents\n+    // of chainparams.cpp.\n+    std::vector<int> bad_heights{0, 100, 111, 115, 209, 211};\n+\n+    for (auto empty : bad_heights) {\n+        const auto out = ExpectedAssumeutxo(empty, *params);\n+        BOOST_CHECK(!out);\n+    }\n+\n+    const auto out110 = *ExpectedAssumeutxo(110, *params);\n+    BOOST_CHECK_EQUAL(out110.hash_serialized, uint256S(\"76fd7334ac7c1baf57ddc0c626f073a655a35d98a4258cd1382c8cc2b8392e10\"));\n+    BOOST_CHECK_EQUAL(out110.nChainTx, (unsigned int)110);\n+\n+    const auto out210 = *ExpectedAssumeutxo(210, *params);\n+    BOOST_CHECK_EQUAL(out210.hash_serialized, uint256S(\"9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2\"));\n+    BOOST_CHECK_EQUAL(out210.nChainTx, (unsigned int)210);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "993b4cdb65106f50d15cdac8f184f464c9678438",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
        "patch": "@@ -22,6 +22,7 @@\n #include <logging/timer.h>\n #include <node/ui_interface.h>\n #include <optional.h>\n+#include <node/coinstats.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n #include <pow.h>\n@@ -5192,6 +5193,18 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n     return *to_modify;\n }\n \n+const AssumeutxoData* ExpectedAssumeutxo(\n+    const int height, const CChainParams& chainparams)\n+{\n+    const MapAssumeutxo& valid_assumeutxos_map = chainparams.Assumeutxo();\n+    const auto assumeutxo_found = valid_assumeutxos_map.find(height);\n+\n+    if (assumeutxo_found != valid_assumeutxos_map.end()) {\n+        return &assumeutxo_found->second;\n+    }\n+    return nullptr;\n+}\n+\n CChainState& ChainstateManager::ActiveChainstate() const\n {\n     LOCK(::cs_main);"
      },
      {
        "sha": "00fc87878c223282a15c007b4ffeb03cd0c55d1c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
        "patch": "@@ -53,6 +53,7 @@ struct ChainTxData;\n struct DisconnectedBlockTransactions;\n struct PrecomputedTransactionData;\n struct LockPoints;\n+struct AssumeutxoData;\n \n /** Default for -minrelaytxfee, minimum relay fee for transactions */\n static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n@@ -1013,4 +1014,13 @@ inline bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+/**\n+ * Return the expected assumeutxo value for a given height, if one exists.\n+ *\n+ * @param height[in] Get the assumeutxo value for this height.\n+ *\n+ * @returns empty if no assumeutxo configuration exists for the given height.\n+ */\n+const AssumeutxoData* ExpectedAssumeutxo(const int height, const CChainParams& params);\n+\n #endif // BITCOIN_VALIDATION_H"
      }
    ]
  },
  {
    "sha": "f6e2da5fb7c6406c37612c838c998078ea8d2252",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmUyZGE1ZmI3YzY0MDZjMzc2MTJjODM4Yzk5ODA3OGVhOGQyMjUy",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-08-25T17:50:23Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:29Z"
      },
      "message": "simplify ChainstateManager::SnapshotBlockhash() return semantics\n\nDon't return null snapshotblockhash values to avoid caller complexity/confusion.",
      "tree": {
        "sha": "a543e8de37216084fe3cc7a32234e873377003e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a543e8de37216084fe3cc7a32234e873377003e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6e2da5fb7c6406c37612c838c998078ea8d2252",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiFkACgkQepNdrbLE\nTwU7Gw/9FN18iCsDnuIp7YRWW12QEYbQgnzu7ppM78II69eazwOzaQS/K5Hn3vEK\nMu2tZ83bZHAUTkGHeSQkI5dD+ezSnY0+0Lw1YB1ffk/8ct3Seo1FbGmbe127/PLV\n0mDcQFYHrLApyL5ljA6iyWvOg8moFdQG2nZuid11mNLy6PrYcuSLCftiniOmJtw8\nTGVR3gG3bOZj2p5GCQ4bTupQDH9CihwJJhUYq0aYNUtiHAWX076/QHox2uydFr2K\nxKvZyNVmnHSPAZnK+NxszN5K+7dzifYHD/kJ5ZI8AIlP0ESv+MfnYr9BPfFFIRgv\nwx4QWNttC+gCt0CbDuKGrGPUm6cOCNcUhxXAEZMGF+kxmYaM04Eknw4CaMLZqcW5\nOKWI6ZFfcLjPjf0n1rKsc7u8RuQTepdWtrQfG9qWoYkcSaI7MnFNUSiHzb6aT4w4\nV9Y6ivBA4IYvFKNpG9PGhCyFXhKQamVg1WTr3Vf8LAjQcWLvdXePZe3uvOMZOJ5u\nZdmlMjz0gxKLAEDLFyNClzJLHDnAdmIcIHn72PF4/Xke/uwBtLXpavYD58v0ZOhA\nEvWl5rlD7gAre/bkG5VT/a3RLRIAgZC/7NPMDwErSc8B0As6Sn/dRgpb48y/WHaM\nSre5+dIiMMBuNRnO6ePE6WUr3b9R6dbe5rFdMmAxrpYpRGgQdAo=\n=9vE/\n-----END PGP SIGNATURE-----",
        "payload": "tree a543e8de37216084fe3cc7a32234e873377003e5\nparent 7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb\nauthor James O'Beirne <james.obeirne@pm.me> 1598377823 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138009 -0600\n\nsimplify ChainstateManager::SnapshotBlockhash() return semantics\n\nDon't return null snapshotblockhash values to avoid caller complexity/confusion.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6e2da5fb7c6406c37612c838c998078ea8d2252",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6e2da5fb7c6406c37612c838c998078ea8d2252",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6e2da5fb7c6406c37612c838c998078ea8d2252/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb"
      }
    ],
    "stats": {
      "total": 351,
      "additions": 348,
      "deletions": 3
    },
    "files": [
      {
        "sha": "04a5db5a172d123cc7fcb28ab2ca4acf893a8c89",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=f6e2da5fb7c6406c37612c838c998078ea8d2252",
        "patch": "@@ -163,14 +163,27 @@ class CBlockIndex\n \n     //! Number of transactions in this block.\n     //! Note: in a potential headers-first mode, this number cannot be relied upon\n+    //! Note: this value is faked during UTXO snapshot load to ensure that\n+    //! LoadBlockIndex() will load index entries for blocks that we lack data for.\n+    //! @sa ActivateSnapshot\n     unsigned int nTx{0};\n \n     //! (memory only) Number of transactions in the chain up to and including this block.\n     //! This value will be non-zero only if and only if transactions for this block and all its parents are available.\n     //! Change to 64-bit type when necessary; won't happen before 2030\n+    //!\n+    //! Note: this value is faked during use of a UTXO snapshot because we don't\n+    //! have the underlying block data available during snapshot load.\n+    //! @sa AssumeutxoData\n+    //! @sa ActivateSnapshot\n     unsigned int nChainTx{0};\n \n     //! Verification status of this block. See enum BlockStatus\n+    //!\n+    //! Note: this value is modified to show BLOCK_OPT_WITNESS during UTXO snapshot\n+    //! load to avoid the block index being spuriously rewound.\n+    //! @sa RewindBlockIndex\n+    //! @sa ActivateSnapshot\n     uint32_t nStatus{0};\n \n     //! block header"
      },
      {
        "sha": "d52851cadd3aa074006db77761b2b2a1f1903b35",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=f6e2da5fb7c6406c37612c838c998078ea8d2252",
        "patch": "@@ -97,6 +97,14 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n     cachedCoinsUsage += it->second.coin.DynamicMemoryUsage();\n }\n \n+void CCoinsViewCache::EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin) {\n+    cachedCoinsUsage += coin.DynamicMemoryUsage();\n+    cacheCoins.emplace(\n+        std::piecewise_construct,\n+        std::forward_as_tuple(std::move(outpoint)),\n+        std::forward_as_tuple(std::move(coin), CCoinsCacheEntry::DIRTY));\n+}\n+\n void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight, bool check_for_overwrite) {\n     bool fCoinbase = tx.IsCoinBase();\n     const uint256& txid = tx.GetHash();"
      },
      {
        "sha": "feb441fd6a50e762a24071ff9b26d70ee2df3778",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=f6e2da5fb7c6406c37612c838c998078ea8d2252",
        "patch": "@@ -20,6 +20,8 @@\n #include <functional>\n #include <unordered_map>\n \n+class ChainstateManager;\n+\n /**\n  * A UTXO entry.\n  *\n@@ -125,6 +127,7 @@ struct CCoinsCacheEntry\n \n     CCoinsCacheEntry() : flags(0) {}\n     explicit CCoinsCacheEntry(Coin&& coin_) : coin(std::move(coin_)), flags(0) {}\n+    CCoinsCacheEntry(Coin&& coin_, unsigned char flag) : coin(std::move(coin_)), flags(flag) {}\n };\n \n typedef std::unordered_map<COutPoint, CCoinsCacheEntry, SaltedOutpointHasher> CCoinsMap;\n@@ -262,6 +265,15 @@ class CCoinsViewCache : public CCoinsViewBacked\n      */\n     void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);\n \n+    /**\n+     * Emplace a coin into cacheCoins without performing any checks, marking\n+     * the emplaced coin as dirty.\n+     *\n+     * NOT FOR GENERAL USE. Used only when loading coins from a UTXO snapshot.\n+     * @sa ChainstateManager::PopulateAndValidateSnapshot()\n+     */\n+    void EmplaceCoinInternalDANGER(COutPoint&& outpoint, Coin&& coin);\n+\n     /**\n      * Spend a coin. Pass moveto in order to get the deleted data.\n      * If no unspent output exists for the passed outpoint, this call"
      },
      {
        "sha": "d02b7a733ddfa21f08b59121f415b0aa81c64636",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=f6e2da5fb7c6406c37612c838c998078ea8d2252",
        "patch": "@@ -28,6 +28,8 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     std::vector<CChainState*> chainstates;\n     const CChainParams& chainparams = Params();\n \n+    BOOST_CHECK(!manager.SnapshotBlockhash().has_value());\n+\n     // Create a legacy (IBD) chainstate.\n     //\n     CChainState& c1 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(mempool));\n@@ -54,10 +56,17 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n     auto& validated_cs = manager.ValidatedChainstate();\n     BOOST_CHECK_EQUAL(&validated_cs, &c1);\n \n+    BOOST_CHECK(!manager.SnapshotBlockhash().has_value());\n+\n     // Create a snapshot-based chainstate.\n     //\n-    CChainState& c2 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(mempool, GetRandHash()));\n+    const uint256 snapshot_blockhash = GetRandHash();\n+    CChainState& c2 = WITH_LOCK(::cs_main, return manager.InitializeChainstate(\n+        mempool, snapshot_blockhash));\n     chainstates.push_back(&c2);\n+\n+    BOOST_CHECK_EQUAL(manager.SnapshotBlockhash().value(), snapshot_blockhash);\n+\n     c2.InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     WITH_LOCK(::cs_main, c2.InitCoinsCache(1 << 23));"
      },
      {
        "sha": "31609ea3e57e7801c3d44266287bb889120c68b7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 280,
        "deletions": 2,
        "changes": 282,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f6e2da5fb7c6406c37612c838c998078ea8d2252",
        "patch": "@@ -20,9 +20,9 @@\n #include <index/txindex.h>\n #include <logging.h>\n #include <logging/timer.h>\n+#include <node/coinstats.h>\n #include <node/ui_interface.h>\n #include <optional.h>\n-#include <node/coinstats.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n #include <pow.h>\n@@ -5148,7 +5148,8 @@ double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pin\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n     LOCK(::cs_main);\n-    if (m_active_chainstate != nullptr) {\n+    if (m_active_chainstate != nullptr &&\n+            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {\n         // If a snapshot chainstate exists, it will always be our active.\n         return m_active_chainstate->m_from_snapshot_blockhash;\n     }\n@@ -5205,6 +5206,283 @@ const AssumeutxoData* ExpectedAssumeutxo(\n     return nullptr;\n }\n \n+bool ChainstateManager::ActivateSnapshot(\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata,\n+        bool in_memory)\n+{\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    if (this->SnapshotBlockhash()) {\n+        LogPrintf(\"[snapshot] can't activate a snapshot-based chainstate more than once\\n\");\n+        return false;\n+    }\n+\n+    int64_t current_coinsdb_cache_size{0};\n+    int64_t current_coinstip_cache_size{0};\n+\n+    // Cache percentages to allocate to each chainstate.\n+    //\n+    // These particular percentages don't matter so much since they will only be\n+    // relevant during snapshot activation; caches are rebalanced at the conclusion of\n+    // this function. We want to give (essentially) all available cache capacity to the\n+    // snapshot to aid the bulk load later in this function.\n+    static constexpr double IBD_CACHE_PERC = 0.01;\n+    static constexpr double SNAPSHOT_CACHE_PERC = 0.99;\n+\n+    {\n+        LOCK(::cs_main);\n+        // Resize the coins caches to ensure we're not exceeding memory limits.\n+        //\n+        // Allocate the majority of the cache to the incoming snapshot chainstate, since\n+        // (optimistically) getting to its tip will be the top priority. We'll need to call\n+        // `MaybeRebalanceCaches()` once we're done with this function to ensure\n+        // the right allocation (including the possibility that no snapshot was activated\n+        // and that we should restore the active chainstate caches to their original size).\n+        //\n+        current_coinsdb_cache_size = this->ActiveChainstate().m_coinsdb_cache_size_bytes;\n+        current_coinstip_cache_size = this->ActiveChainstate().m_coinstip_cache_size_bytes;\n+\n+        // Temporarily resize the active coins cache to make room for the newly-created\n+        // snapshot chain.\n+        this->ActiveChainstate().ResizeCoinsCaches(\n+            static_cast<size_t>(current_coinstip_cache_size * IBD_CACHE_PERC),\n+            static_cast<size_t>(current_coinsdb_cache_size * IBD_CACHE_PERC));\n+    }\n+\n+    auto snapshot_chainstate = WITH_LOCK(::cs_main, return MakeUnique<CChainState>(\n+            this->ActiveChainstate().m_mempool, m_blockman, base_blockhash));\n+\n+    {\n+        LOCK(::cs_main);\n+        snapshot_chainstate->InitCoinsDB(\n+            static_cast<size_t>(current_coinsdb_cache_size * SNAPSHOT_CACHE_PERC),\n+            in_memory, false, \"chainstate\");\n+        snapshot_chainstate->InitCoinsCache(\n+            static_cast<size_t>(current_coinstip_cache_size * SNAPSHOT_CACHE_PERC));\n+    }\n+\n+    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n+        *snapshot_chainstate, coins_file, metadata);\n+\n+    if (!snapshot_ok) {\n+        WITH_LOCK(::cs_main, this->MaybeRebalanceCaches());\n+        return false;\n+    }\n+\n+    {\n+        LOCK(::cs_main);\n+        assert(!m_snapshot_chainstate);\n+        m_snapshot_chainstate.swap(snapshot_chainstate);\n+        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n+        assert(chaintip_loaded);\n+\n+        m_active_chainstate = m_snapshot_chainstate.get();\n+\n+        LogPrintf(\"[snapshot] successfully activated snapshot %s\\n\", base_blockhash.ToString());\n+        LogPrintf(\"[snapshot] (%.2f MB)\\n\",\n+            m_snapshot_chainstate->CoinsTip().DynamicMemoryUsage() / (1000 * 1000));\n+\n+        this->MaybeRebalanceCaches();\n+    }\n+    return true;\n+}\n+\n+bool ChainstateManager::PopulateAndValidateSnapshot(\n+    CChainState& snapshot_chainstate,\n+    CAutoFile& coins_file,\n+    const SnapshotMetadata& metadata)\n+{\n+    // It's okay to release cs_main before we're done using `coins_cache` because we know\n+    // that nothing else will be referencing the newly created snapshot_chainstate yet.\n+    CCoinsViewCache& coins_cache = *WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsTip());\n+\n+    uint256 base_blockhash = metadata.m_base_blockhash;\n+\n+    COutPoint outpoint;\n+    Coin coin;\n+    const uint64_t coins_count = metadata.m_coins_count;\n+    uint64_t coins_left = metadata.m_coins_count;\n+\n+    LogPrintf(\"[snapshot] loading coins from snapshot %s\\n\", base_blockhash.ToString());\n+    int64_t flush_now{0};\n+    int64_t coins_processed{0};\n+\n+    while (coins_left > 0) {\n+        try {\n+            coins_file >> outpoint;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrintf(\"[snapshot] bad snapshot - no coins left after deserializing %d coins\\n\",\n+                coins_count - coins_left);\n+            return false;\n+        }\n+        coins_file >> coin;\n+        coins_cache.EmplaceCoinInternalDANGER(std::move(outpoint), std::move(coin));\n+\n+        --coins_left;\n+        ++coins_processed;\n+\n+        if (coins_processed % 1000000 == 0) {\n+            LogPrintf(\"[snapshot] %d coins loaded (%.2f%%, %.2f MB)\\n\",\n+                coins_processed,\n+                static_cast<float>(coins_processed) * 100 / static_cast<float>(coins_count),\n+                coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+        }\n+\n+        // Batch write and flush (if we need to) every so often.\n+        //\n+        // If our average Coin size is roughly 41 bytes, checking every 120,000 coins\n+        // means <5MB of memory imprecision.\n+        if (coins_processed % 120000 == 0) {\n+            if (ShutdownRequested()) {\n+                return false;\n+            }\n+\n+            const auto snapshot_cache_state = WITH_LOCK(::cs_main,\n+                return snapshot_chainstate.GetCoinsCacheSizeState(&snapshot_chainstate.m_mempool));\n+\n+            if (snapshot_cache_state >=\n+                    CoinsCacheSizeState::CRITICAL) {\n+                LogPrintf(\"[snapshot] flushing coins cache (%.2f MB)... \", /* Continued */\n+                    coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+                flush_now = GetTimeMillis();\n+\n+                // This is a hack - we don't know what the actual best block is, but that\n+                // doesn't matter for the purposes of flushing the cache here. We'll set this\n+                // to its correct value (`base_blockhash`) below after the coins are loaded.\n+                coins_cache.SetBestBlock(GetRandHash());\n+\n+                coins_cache.Flush();\n+                LogPrintf(\"done (%.2fms)\\n\", GetTimeMillis() - flush_now);\n+            }\n+        }\n+    }\n+\n+    // Important that we set this. This and the coins_cache accesses above are\n+    // sort of a layer violation, but either we reach into the innards of\n+    // CCoinsViewCache here or we have to invert some of the CChainState to\n+    // embed them in a snapshot-activation-specific CCoinsViewCache bulk load\n+    // method.\n+    coins_cache.SetBestBlock(base_blockhash);\n+\n+    bool out_of_coins{false};\n+    try {\n+        coins_file >> outpoint;\n+    } catch (const std::ios_base::failure&) {\n+        // We expect an exception since we should be out of coins.\n+        out_of_coins = true;\n+    }\n+    if (!out_of_coins) {\n+        LogPrintf(\"[snapshot] bad snapshot - coins left over after deserializing %d coins\\n\",\n+            coins_count);\n+        return false;\n+    }\n+\n+    LogPrintf(\"[snapshot] loaded %d (%.2f MB) coins from snapshot %s\\n\",\n+        coins_count,\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000),\n+        base_blockhash.ToString());\n+\n+    LogPrintf(\"[snapshot] flushing snapshot chainstate to disk\\n\");\n+    // No need to acquire cs_main since this chainstate isn't being used yet.\n+    coins_cache.Flush(); // TODO: if #17487 is merged, add erase=false here for better performance.\n+\n+    assert(coins_cache.GetBestBlock() == base_blockhash);\n+\n+    CCoinsStats stats;\n+    auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n+\n+    // As above, okay to immediately release cs_main here since no other context knows\n+    // about the snapshot_chainstate.\n+    CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n+\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+        LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n+        return false;\n+    }\n+\n+    // Ensure that the base blockhash appears in the known chain of valid headers. We're willing to\n+    // wait a bit here because the snapshot may have been loaded on startup, before we've\n+    // received headers from the network.\n+\n+    int max_secs_to_wait_for_headers = 60 * 10;\n+    CBlockIndex* snapshot_start_block = nullptr;\n+\n+    while (max_secs_to_wait_for_headers > 0) {\n+        snapshot_start_block = WITH_LOCK(::cs_main,\n+            return m_blockman.LookupBlockIndex(base_blockhash));\n+        --max_secs_to_wait_for_headers;\n+\n+        if (!snapshot_start_block) {\n+            std::this_thread::sleep_for(std::chrono::seconds(1));\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    if (snapshot_start_block == nullptr) {\n+        LogPrintf(\"[snapshot] timed out waiting for snapshot start blockheader %s\\n\",\n+            base_blockhash.ToString());\n+        return false;\n+    }\n+\n+    // Assert that the deserialized chainstate contents match the expected assumeutxo value.\n+\n+    int base_height = snapshot_start_block->nHeight;\n+    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());\n+\n+    if (!maybe_au_data) {\n+        LogPrintf(\"[snapshot] assumeutxo height in snapshot metadata not recognized \" /* Continued */\n+            \"(%d) - refusing to load snapshot\\n\", base_height);\n+        return false;\n+    }\n+\n+    const AssumeutxoData& au_data = *maybe_au_data;\n+\n+    if (stats.hashSerialized != au_data.hash_serialized) {\n+        LogPrintf(\"[snapshot] bad snapshot content hash: expected %s, got %s\\n\",\n+            au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());\n+        return false;\n+    }\n+\n+    snapshot_chainstate.m_chain.SetTip(snapshot_start_block);\n+\n+    // The remainder of this function requires modifying data protected by cs_main.\n+    LOCK(::cs_main);\n+\n+    // Fake various pieces of CBlockIndex state:\n+    //\n+    //   - nChainTx: so that we accurately report IBD-to-tip progress\n+    //   - nTx: so that LoadBlockIndex() loads assumed-valid CBlockIndex entries\n+    //       (among other things)\n+    //   - nStatus & BLOCK_OPT_WITNESS: so that RewindBlockIndex() doesn't zealously\n+    //       unwind the assumed-valid chain.\n+    //\n+    CBlockIndex* index = nullptr;\n+    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+        index = snapshot_chainstate.m_chain[i];\n+\n+        if (!index->nTx) {\n+            index->nTx = 1;\n+        }\n+        index->nChainTx = index->pprev ? index->pprev->nChainTx + index->nTx : 1;\n+\n+        // We need to fake this flag so that CChainState::RewindBlockIndex()\n+        // won't try to rewind the entire assumed-valid chain on startup.\n+        if (index->pprev && ::IsWitnessEnabled(index->pprev, ::Params().GetConsensus())) {\n+            index->nStatus |= BLOCK_OPT_WITNESS;\n+        }\n+    }\n+\n+    assert(index);\n+    index->nChainTx = metadata.m_nchaintx;\n+    snapshot_chainstate.setBlockIndexCandidates.insert(snapshot_start_block);\n+\n+    LogPrintf(\"[snapshot] validated snapshot (%.2f MB)\\n\",\n+        coins_cache.DynamicMemoryUsage() / (1000 * 1000));\n+    return true;\n+}\n+\n CChainState& ChainstateManager::ActiveChainstate() const\n {\n     LOCK(::cs_main);"
      },
      {
        "sha": "5ec5a549ce0db35244e87cfce3c4bac094f11dee",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6e2da5fb7c6406c37612c838c998078ea8d2252/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f6e2da5fb7c6406c37612c838c998078ea8d2252",
        "patch": "@@ -11,10 +11,12 @@\n #endif\n \n #include <amount.h>\n+#include <attributes.h>\n #include <coins.h>\n #include <consensus/validation.h>\n #include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n+#include <node/utxo_snapshot.h>\n #include <optional.h>\n #include <policy/feerate.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n@@ -870,6 +872,12 @@ class ChainstateManager\n     //! by the background validation chainstate.\n     bool m_snapshot_validated{false};\n \n+    //! Internal helper for ActivateSnapshot().\n+    [[nodiscard]] bool PopulateAndValidateSnapshot(\n+        CChainState& snapshot_chainstate,\n+        CAutoFile& coins_file,\n+        const SnapshotMetadata& metadata);\n+\n     // For access to m_active_chainstate.\n     friend CChainState& ChainstateActive();\n     friend CChain& ChainActive();\n@@ -900,6 +908,22 @@ class ChainstateManager\n     //! Get all chainstates currently being used.\n     std::vector<CChainState*> GetAll();\n \n+    //! Construct and activate a Chainstate on the basis of UTXO snapshot data.\n+    //!\n+    //! Steps:\n+    //!\n+    //! - Initialize an unused CChainState.\n+    //! - Load its `CoinsViews` contents from `coins_file`.\n+    //! - Verify that the hash of the resulting coinsdb matches the expected hash\n+    //!   per assumeutxo chain parameters.\n+    //! - Wait for our headers chain to include the base block of the snapshot.\n+    //! - \"Fast forward\" the tip of the new chainstate to the base of the snapshot,\n+    //!   faking nTx* block index data along the way.\n+    //! - Move the new chainstate to `m_snapshot_chainstate` and make it our\n+    //!   ChainstateActive().\n+    [[nodiscard]] bool ActivateSnapshot(\n+        CAutoFile& coins_file, const SnapshotMetadata& metadata, bool in_memory);\n+\n     //! The most-work chain.\n     CChainState& ActiveChainstate() const;\n     CChain& ActiveChain() const { return ActiveChainstate().m_chain; }"
      },
      {
        "sha": "5312dbbfdbdb600b99032473119ccb2c7ffd684d",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6e2da5fb7c6406c37612c838c998078ea8d2252/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6e2da5fb7c6406c37612c838c998078ea8d2252/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=f6e2da5fb7c6406c37612c838c998078ea8d2252",
        "patch": "@@ -20,6 +20,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"txmempool -> validation -> txmempool\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n+    \"node/coinstats -> validation -> node/coinstats\"\n )\n \n EXIT_CODE=0"
      }
    ]
  },
  {
    "sha": "ad949ba449ff2115e3d22c71f5b6509f11112098",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDk0OWJhNDQ5ZmYyMTE1ZTNkMjJjNzFmNWI2NTA5ZjExMTEyMDk4",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-08-25T17:48:21Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:32Z"
      },
      "message": "txdb: don't reset during in-memory cache resize\n\nWe can't support a reset of the dbwrapper object when in-memory configuration is used\nbecause it results in the permanent loss of coins. This only affects unittest\nconfigurations (since that's the only place we use in-memory CCoinsViewDB instances).",
      "tree": {
        "sha": "e389510ed6ca780532c322c378c8049adde0e7c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e389510ed6ca780532c322c378c8049adde0e7c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad949ba449ff2115e3d22c71f5b6509f11112098",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiFwACgkQepNdrbLE\nTwXm8Q/+KRZ5vrkTdsKXdA9TGJIEyCTTPwSrSMv+x6+CK/fzPqMreqLF5SevdoST\n1nPuhRrL491K3Tb04/0NYzNiksX37wgyHap0eU7D5xU+NdZBXQVUJlwJ/EMuv134\nAlM7+L2JaLIR0u+2Y1A4KfY22EWmkaVQbQcNeV8/Vftz7jqTII5vkqlUNfQQM/O2\nGDB8DQWSFig33F56v9ofNYBNnUxfKjsSI9ybMyY9JxV/GtsW0ISao8xyIq7BDHWf\nVmA+2AtmXOXRURcj5FPrdvoqk1wd7gi9Dm6qHi5pm7beM29NWTYG9yCfrEvuJOrx\nJL+bPSAo9ClQCrz3K5Q9CFe/IpydDIPvXdEMGTq5lv1lv8KoFE9+nzkeJy43VF1+\n5zy9w+lqaygGM9iRgv/HPL82b1xELVd9CB2+t4DNB81/3ztHWhgdihBppEkbr//z\neILrM7ySyBkb91p3oo79eeQHSrGynBkD3rfWPqtHTyaSfKpdgZobcvjzaZPiuB0I\n+qt7ImdEbFWECDjmLRSqwzhhKrLWqzyzW7tzKNwpmrCNlF/iKStHsV7FcJRhB6LK\nN5tS4KenREbNVYpTwpOaYYiv/uYKDXXcRTqQJxLw9c/81TdNc4rpGA85aaPKucJM\nf+IpR8y9dE4qGmuyXvD29lnKmkdsgE6j8tWhpGxb/VrA2uO6RXQ=\n=9Xef\n-----END PGP SIGNATURE-----",
        "payload": "tree e389510ed6ca780532c322c378c8049adde0e7c9\nparent f6e2da5fb7c6406c37612c838c998078ea8d2252\nauthor James O'Beirne <james.obeirne@pm.me> 1598377701 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138012 -0600\n\ntxdb: don't reset during in-memory cache resize\n\nWe can't support a reset of the dbwrapper object when in-memory configuration is used\nbecause it results in the permanent loss of coins. This only affects unittest\nconfigurations (since that's the only place we use in-memory CCoinsViewDB instances).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad949ba449ff2115e3d22c71f5b6509f11112098",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad949ba449ff2115e3d22c71f5b6509f11112098",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad949ba449ff2115e3d22c71f5b6509f11112098/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6e2da5fb7c6406c37612c838c998078ea8d2252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6e2da5fb7c6406c37612c838c998078ea8d2252",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6e2da5fb7c6406c37612c838c998078ea8d2252"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4b4766e1ba704981677b2e30bf18b373d03f602b",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad949ba449ff2115e3d22c71f5b6509f11112098/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad949ba449ff2115e3d22c71f5b6509f11112098/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=ad949ba449ff2115e3d22c71f5b6509f11112098",
        "patch": "@@ -47,11 +47,15 @@ CCoinsViewDB::CCoinsViewDB(fs::path ldb_path, size_t nCacheSize, bool fMemory, b\n \n void CCoinsViewDB::ResizeCache(size_t new_cache_size)\n {\n-    // Have to do a reset first to get the original `m_db` state to release its\n-    // filesystem lock.\n-    m_db.reset();\n-    m_db = MakeUnique<CDBWrapper>(\n-        m_ldb_path, new_cache_size, m_is_memory, /*fWipe*/ false, /*obfuscate*/ true);\n+    // We can't do this operation with an in-memory DB since we'll lose all the coins upon\n+    // reset.\n+    if (!m_is_memory) {\n+        // Have to do a reset first to get the original `m_db` state to release its\n+        // filesystem lock.\n+        m_db.reset();\n+        m_db = MakeUnique<CDBWrapper>(\n+            m_ldb_path, new_cache_size, m_is_memory, /*fWipe*/ false, /*obfuscate*/ true);\n+    }\n }\n \n bool CCoinsViewDB::GetCoin(const COutPoint &outpoint, Coin &coin) const {"
      }
    ]
  },
  {
    "sha": "6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjA2YTRmOGM2MTZjZjI1NjUzN2MzYmZiZGFkZTliNDNjNTFiNGY1",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-08-25T17:46:58Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:34Z"
      },
      "message": "move-onlyish: break out CreateUTXOSnapshot from dumptxoutset\n\nThis move/refactor is needed to set up a decent unittest for UTXO snapshot activation.",
      "tree": {
        "sha": "910c48b11b571dba80c11a5a9dbaa4d4226c3328",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/910c48b11b571dba80c11a5a9dbaa4d4226c3328"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiF4ACgkQepNdrbLE\nTwUxgA//S3LVU14YczPEFCV/SdLNyUfIA4tTTxslJWSx4uSz6tApLMCHStHoF5Nl\nPnbzPzh/11dOgu3yvIdw8dljRWNWEBt42ilwW26TKl6sWu/SsK2NBLoioKTN5H8W\nAkiNxUw8Qld8jnbIrSfcE2fkopVcpsuoSe03UMPVOHUCeBeAcpBfoE9Mi34+55BJ\nqw53ZheHJPsarqBg71f4+sQPDUnLESWP2azVaXMknZeUjAR0QusdYoO+AwZTS2YJ\nL6d3HPcUltO9NaykNnW29wsiQChPCrI+Gz4j7gkCn2epF5AqrWcIE37W8zrwfAy8\nizWwMzZPwlMfEYUM0kWYZMOgivD6MCZ2bbysWu+ZPr287lKrL+FciesteIExLi18\nI6ZZrPzZQHlgxuwItwe3I03Tntu7A//bklfdfpGFLd4xmmpWkXGo9/tfEAD0m/9J\nO9BZRgRZd1L5ptL8y7oI2KGpunBIOH5aGpI0RtdHjhjEXirtYJhz8YNK/59x0jmQ\nP7qmlCsiiLTXqHX0JyeDIPBw2N7ggRNWtmsXymSId5pR65haZSQS6LnIL7ZJYoHT\nyOn4Tt+WrX2RY9Jd+arfJqUHVQ/nlZm8E6J09AhtSuCbEvv4hR/PIay8j+5ae7ry\nIJXUa5niIm2b/rSHIVDx9t3Sud/iMet/IRohAteMFBo4ZVv6UNQ=\n=Yo2g\n-----END PGP SIGNATURE-----",
        "payload": "tree 910c48b11b571dba80c11a5a9dbaa4d4226c3328\nparent ad949ba449ff2115e3d22c71f5b6509f11112098\nauthor James O'Beirne <james.obeirne@pm.me> 1598377618 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138014 -0600\n\nmove-onlyish: break out CreateUTXOSnapshot from dumptxoutset\n\nThis move/refactor is needed to set up a decent unittest for UTXO snapshot activation.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6606a4f8c616cf256537c3bfbdade9b43c51b4f5/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad949ba449ff2115e3d22c71f5b6509f11112098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad949ba449ff2115e3d22c71f5b6509f11112098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad949ba449ff2115e3d22c71f5b6509f11112098"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 24,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5dc33d7a9813429fdbef40886079c0ceac01ae16",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6606a4f8c616cf256537c3bfbdade9b43c51b4f5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6606a4f8c616cf256537c3bfbdade9b43c51b4f5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
        "patch": "@@ -2411,10 +2411,21 @@ static RPCHelpMan dumptxoutset()\n \n     FILE* file{fsbridge::fopen(temppath, \"wb\")};\n     CAutoFile afile{file, SER_DISK, CLIENT_VERSION};\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), afile);\n+    fs::rename(temppath, path);\n+\n+    result.pushKV(\"path\", path.string());\n+    return result;\n+},\n+    };\n+}\n+\n+UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile)\n+{\n     std::unique_ptr<CCoinsViewCursor> pcursor;\n     CCoinsStats stats;\n     CBlockIndex* tip;\n-    NodeContext& node = EnsureNodeContext(request.context);\n \n     {\n         // We need to lock cs_main to ensure that the coinsdb isn't written to\n@@ -2431,13 +2442,13 @@ static RPCHelpMan dumptxoutset()\n         //\n         LOCK(::cs_main);\n \n-        ::ChainstateActive().ForceFlushStateToDisk();\n+        chainstate.ForceFlushStateToDisk();\n \n-        if (!GetUTXOStats(&::ChainstateActive().CoinsDB(), stats, CoinStatsHashType::NONE, node.rpc_interruption_point)) {\n+        if (!GetUTXOStats(&chainstate.CoinsDB(), stats, CoinStatsHashType::NONE, node.rpc_interruption_point)) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n         }\n \n-        pcursor = std::unique_ptr<CCoinsViewCursor>(::ChainstateActive().CoinsDB().Cursor());\n+        pcursor = std::unique_ptr<CCoinsViewCursor>(chainstate.CoinsDB().Cursor());\n         tip = g_chainman.m_blockman.LookupBlockIndex(stats.hashBlock);\n         CHECK_NONFATAL(tip);\n     }\n@@ -2462,16 +2473,13 @@ static RPCHelpMan dumptxoutset()\n     }\n \n     afile.fclose();\n-    fs::rename(temppath, path);\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"coins_written\", stats.coins_count);\n     result.pushKV(\"base_hash\", tip->GetBlockHash().ToString());\n     result.pushKV(\"base_height\", tip->nHeight);\n-    result.pushKV(\"path\", path.string());\n+\n     return result;\n-},\n-    };\n }\n \n void RegisterBlockchainRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "d8cae4dd24e4639ced7835e20148b6af32748e5d",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6606a4f8c616cf256537c3bfbdade9b43c51b4f5/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6606a4f8c616cf256537c3bfbdade9b43c51b4f5/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_RPC_BLOCKCHAIN_H\n \n #include <amount.h>\n+#include <streams.h>\n #include <sync.h>\n \n #include <stdint.h>\n@@ -16,6 +17,7 @@ extern RecursiveMutex cs_main;\n class CBlock;\n class CBlockIndex;\n class CBlockPolicyEstimator;\n+class CChainState;\n class CTxMemPool;\n class ChainstateManager;\n class UniValue;\n@@ -57,4 +59,10 @@ CTxMemPool& EnsureMemPool(const util::Ref& context);\n ChainstateManager& EnsureChainman(const util::Ref& context);\n CBlockPolicyEstimator& EnsureFeeEstimator(const util::Ref& context);\n \n+/**\n+ * Helper to create UTXO snapshots given a chainstate and a file handle.\n+ * @return a UniValue map containing metadata about the snapshot.\n+ */\n+UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile);\n+\n #endif"
      }
    ]
  },
  {
    "sha": "31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWQyMjUyNzRmZjFhNGIyNDVhZWEwYTY5ZjBlNTIyNGIwZTY0Y2Ey",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-08-31T16:39:39Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:36Z"
      },
      "message": "tests: add deterministic chain generation unittest fixture",
      "tree": {
        "sha": "6fb0cb907ac8eed73edc23ee740eaedf1027ba01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fb0cb907ac8eed73edc23ee740eaedf1027ba01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiGAACgkQepNdrbLE\nTwXtgA//RRK4Z9bz/WpVWT/1KsgzEGhE3vJOGxDpoX/k5M6obCED8lS80HaE5wM4\nC4c8W/k0pinc6icfA9K60DYTUidoTGWsfSWyX0KDV4qNh3yUHyFnXtH+Z3EP+Nxf\nTwwb4tJSpi/V8cv8mtaAjT8GvOjM67r8pvQBoPNTdB5UxlXZfhi2LUIkmz/N+RLV\nM8POFrLtYxWwT3HseSvBhX9u0nnpvmLLIKgvIHmmjoTJnYuDIYIz02H+U46XGbyP\ncify9GitGVWXzwym8dOrw0ctCQOSqrbjfFQ4KfQ1dsyMFK1e4kxjqqw2c5wwXHUM\nNeqRnZurVEso8GRy0HiFRW2C1penqXo2JQsO7dU09XPKlIAnxw2Ua0RxwwhCfRzQ\nINtvIPpSCobd2QOllDNd7rkm88/3xtzWIR22ov7MY+sUNSgWTXaMI8OZoKVPXAs/\ndP1XLB9lcw+KPoBw7aCK+lsQfm+lwT1R1FwdOynneE3zegcSDF/p3ob+ep+FRi0C\n/Y+yc0HMWdLUovmCnbQxlx9olh3S9H9zXShb/YRdc4pK2yDtfSnpgqLJ48In13cb\n+qsccW7Wv+hki+1UokrZzdGl0a8jYYO/a+lrpKLTs7rkL076IlmVTi37QTDg0tEV\nbuvNqq+ju1jQGNU0hMCWA44P3pp2cjNoH8rIBBh9PAa92MxPqOg=\n=sjYf\n-----END PGP SIGNATURE-----",
        "payload": "tree 6fb0cb907ac8eed73edc23ee740eaedf1027ba01\nparent 6606a4f8c616cf256537c3bfbdade9b43c51b4f5\nauthor James O'Beirne <james.obeirne@pm.me> 1598891979 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138016 -0600\n\ntests: add deterministic chain generation unittest fixture\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d225274ff1a4b245aea0a69f0e5224b0e64ca2/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6606a4f8c616cf256537c3bfbdade9b43c51b4f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6606a4f8c616cf256537c3bfbdade9b43c51b4f5"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 45,
      "deletions": 5
    },
    "files": [
      {
        "sha": "790329004c62b82f68b4f06ce4de1a52033e36f4",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 3,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d225274ff1a4b245aea0a69f0e5224b0e64ca2/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d225274ff1a4b245aea0a69f0e5224b0e64ca2/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
        "patch": "@@ -199,14 +199,43 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n }\n \n-TestChain100Setup::TestChain100Setup()\n+TestChain100Setup::TestChain100Setup(bool deterministic)\n {\n+    m_deterministic = deterministic;\n+\n+    if (m_deterministic) {\n+        SetMockTime(1598887952);\n+        constexpr std::array<unsigned char, 32> vchKey = {\n+            {\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1\n+            }\n+        };\n+        coinbaseKey.Set(vchKey.begin(), vchKey.end(), false);\n+    } else {\n+        coinbaseKey.MakeNewKey(true);\n+    }\n+\n     // Generate a 100-block chain:\n-    coinbaseKey.MakeNewKey(true);\n+    this->mineBlocks(COINBASE_MATURITY);\n+\n+    if (m_deterministic) {\n+        LOCK(::cs_main);\n+        assert(\n+            m_node.chainman->ActiveChain().Tip()->GetBlockHash().ToString() ==\n+            \"49c95db1e470fed04496d801c9d8fbb78155d2c7f855232c918823d2c17d0cf6\");\n+    }\n+}\n+\n+void TestChain100Setup::mineBlocks(int num_blocks)\n+{\n     CScript scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n-    for (int i = 0; i < COINBASE_MATURITY; i++) {\n+    for (int i = 0; i < num_blocks; i++)\n+    {\n         std::vector<CMutableTransaction> noTxns;\n         CBlock b = CreateAndProcessBlock(noTxns, scriptPubKey);\n+        if (m_deterministic) {\n+            SetMockTime(GetTime() + 1);\n+        }\n         m_coinbase_txns.push_back(b.vtx[0]);\n     }\n }\n@@ -234,6 +263,9 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n TestChain100Setup::~TestChain100Setup()\n {\n     gArgs.ForceSetArg(\"-segwitheight\", \"0\");\n+    if (m_deterministic) {\n+        SetMockTime(0);\n+    }\n }\n \n CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction& tx) const"
      },
      {
        "sha": "4be4763f3500f7134a220e2ec444dea2bc664cfd",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d225274ff1a4b245aea0a69f0e5224b0e64ca2/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d225274ff1a4b245aea0a69f0e5224b0e64ca2/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
        "patch": "@@ -78,7 +78,6 @@ struct BasicTestingSetup {\n     explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n     ~BasicTestingSetup();\n \n-private:\n     const fs::path m_path_root;\n };\n \n@@ -112,7 +111,7 @@ class CScript;\n  * Testing fixture that pre-creates a 100-block REGTEST-mode block chain\n  */\n struct TestChain100Setup : public RegTestingSetup {\n-    TestChain100Setup();\n+    TestChain100Setup(bool deterministic = false);\n \n     /**\n      * Create a new block with just given transactions, coinbase paying to\n@@ -121,12 +120,21 @@ struct TestChain100Setup : public RegTestingSetup {\n     CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n                                  const CScript& scriptPubKey);\n \n+    //! Mine a series of new blocks on the active chain.\n+    void mineBlocks(int num_blocks);\n+\n     ~TestChain100Setup();\n \n+    bool m_deterministic;\n     std::vector<CTransactionRef> m_coinbase_txns; // For convenience, coinbase transactions\n     CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n };\n \n+\n+struct TestChain100DeterministicSetup : public TestChain100Setup {\n+    TestChain100DeterministicSetup() : TestChain100Setup(true) { }\n+};\n+\n class CTxMemPoolEntry;\n \n struct TestMemPoolEntryHelper"
      }
    ]
  },
  {
    "sha": "4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDhkZTA0ZjMyNzM2MTk5ZTRiNDFhMTRhMmQyOWIxYTRkMGExNWQ0",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2020-08-25T17:52:51Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:37Z"
      },
      "message": "tests: add snapshot activation test",
      "tree": {
        "sha": "400bc4e728fb9291532a71e83a504f7c776d674c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/400bc4e728fb9291532a71e83a504f7c776d674c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiGEACgkQepNdrbLE\nTwXTnA//RbKle/vzds0Oy8W3JevcOPaHWPAjgPmylxi+levnHKCINwF+WBuqbjnI\nWfKfCyei5+7fO/ImaohuF2OY/gFPLeKEPWlTDiqRnEi+ydhYrAxxgd3q+MAi9wtl\nJdVo088qBPvAGvZTV1nPebIiv+PbRT9GRyzWe0QlogqdqzgqgBsm/hWAOnM3+ODI\nAbTlFA4BkE9Mgfq4hxSo7UoE2xjnXG6cJdPPS15V7HOKs40kVT3zGWGtZ0/AVpZc\nV5S8ek0ZgIY/P5p6EXDL94+Clksa/6SkxTv2Id46cgjkCOidtYXinDir+leE3cQs\nl4h2YuelX7WUmpSq0duhgKEyMvdFfD3oW6eG9Kmzj4Dxhfi73XzRxPW9dugaYGl3\ngaOjr4Y6qXuJOYsNnuz71ytnacSN975zI4EyH0IsvxfJdRl+ggzzaJStPecXc2mX\nYnUYjzYpoknfoENEjcyOTYegXzwg6n2w3GP+oS+utdms2Q1w+x5cc4WrolivOUE1\naRMlwLfIckaJeQ6Cqd5QY6u96ozZ4Jl8seCYjiQ6SWS3L7oRHul0EtGr6Zxz6fYA\nUe5457W+s2bzGIa+Jo1aPpD2ec6tPW70+xTed6wbqJGrBlGm/8FURYJN9LA1hlmT\nVAgKdwm8UNgO8ifaJIgmVeBVlRmiraHIa3rPgZ/dB+4A0mWqRLE=\n=eCKw\n-----END PGP SIGNATURE-----",
        "payload": "tree 400bc4e728fb9291532a71e83a504f7c776d674c\nparent 31d225274ff1a4b245aea0a69f0e5224b0e64ca2\nauthor James O'Beirne <james.obeirne@pm.me> 1598377971 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138017 -0600\n\ntests: add snapshot activation test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d225274ff1a4b245aea0a69f0e5224b0e64ca2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31d225274ff1a4b245aea0a69f0e5224b0e64ca2"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 149,
      "deletions": 0
    },
    "files": [
      {
        "sha": "96b8e0ca2a6671a05dc69313fd88121b66170590",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 148,
        "deletions": 0,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
        "patch": "@@ -4,13 +4,18 @@\n //\n #include <chainparams.h>\n #include <consensus/validation.h>\n+#include <node/utxo_snapshot.h>\n #include <random.h>\n+#include <rpc/blockchain.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <uint256.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n+#include <tinyformat.h>\n+#include <univalue.h>\n+\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n@@ -164,4 +169,147 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+static bool\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+{\n+    // Write out a snapshot to the test's tempdir.\n+    //\n+    int height;\n+    WITH_LOCK(::cs_main, height = node.chainman->ActiveHeight());\n+    fs::path snapshot_path = root / tfm::format(\"test_snapshot.%d.dat\", height);\n+    FILE* outfile{fsbridge::fopen(snapshot_path, \"wb\")};\n+    CAutoFile auto_outfile{outfile, SER_DISK, CLIENT_VERSION};\n+\n+    UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n+    BOOST_TEST_MESSAGE(\n+        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+\n+    // Read the written snapshot in and then activate it.\n+    //\n+    FILE* infile{fsbridge::fopen(snapshot_path, \"rb\")};\n+    CAutoFile auto_infile{infile, SER_DISK, CLIENT_VERSION};\n+    SnapshotMetadata metadata;\n+    auto_infile >> metadata;\n+\n+    return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n+}\n+\n+//! Test basic snapshot activation.\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100DeterministicSetup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+\n+    size_t initial_size;\n+    size_t initial_total_coins{100};\n+\n+    // Make some initial assertions about the contents of the chainstate.\n+    {\n+        LOCK(::cs_main);\n+        CCoinsViewCache& ibd_coinscache = chainman.ActiveChainstate().CoinsTip();\n+        initial_size = ibd_coinscache.GetCacheSize();\n+        size_t total_coins{0};\n+\n+        for (CTransactionRef& txn : m_coinbase_txns) {\n+            COutPoint op{txn->GetHash(), 0};\n+            BOOST_CHECK(ibd_coinscache.HaveCoin(op));\n+            total_coins++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+        BOOST_CHECK_EQUAL(initial_size, initial_total_coins);\n+    }\n+\n+    // Snapshot should refuse to load at this height.\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        chainman.SnapshotBlockhash().value_or(uint256()));\n+\n+    // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can\n+    // be found.\n+    mineBlocks(10);\n+    initial_size += 10;\n+    initial_total_coins += 10;\n+\n+    BOOST_REQUIRE(CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+\n+    // Ensure our active chain is the snapshot chainstate.\n+    BOOST_CHECK(!chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        *chainman.SnapshotBlockhash());\n+\n+    // To be checked against later when we try loading a subsequent snapshot.\n+    uint256 loaded_snapshot_blockhash{*chainman.SnapshotBlockhash()};\n+\n+    // Make some assertions about the both chainstates. These checks ensure the\n+    // legacy chainstate hasn't changed and that the newly created chainstate\n+    // reflects the expected content.\n+    {\n+        LOCK(::cs_main);\n+        int chains_tested{0};\n+\n+        for (CChainState* chainstate : chainman.GetAll()) {\n+            BOOST_TEST_MESSAGE(\"Checking coins in \" << chainstate->ToString());\n+            CCoinsViewCache& coinscache = chainstate->CoinsTip();\n+\n+            // Both caches will be empty initially.\n+            BOOST_CHECK_EQUAL((unsigned int)0, coinscache.GetCacheSize());\n+\n+            size_t total_coins{0};\n+\n+            for (CTransactionRef& txn : m_coinbase_txns) {\n+                COutPoint op{txn->GetHash(), 0};\n+                BOOST_CHECK(coinscache.HaveCoin(op));\n+                total_coins++;\n+            }\n+\n+            BOOST_CHECK_EQUAL(initial_size , coinscache.GetCacheSize());\n+            BOOST_CHECK_EQUAL(total_coins, initial_total_coins);\n+            chains_tested++;\n+        }\n+\n+        BOOST_CHECK_EQUAL(chains_tested, 2);\n+    }\n+\n+    // Mine some new blocks on top of the activated snapshot chainstate.\n+    constexpr size_t new_coins{100};\n+    mineBlocks(new_coins);  // Defined in TestChain100Setup.\n+\n+    {\n+        LOCK(::cs_main);\n+        size_t coins_in_active{0};\n+        size_t coins_in_ibd{0};\n+        size_t coins_missing_ibd{0};\n+\n+        for (CChainState* chainstate : chainman.GetAll()) {\n+            BOOST_TEST_MESSAGE(\"Checking coins in \" << chainstate->ToString());\n+            CCoinsViewCache& coinscache = chainstate->CoinsTip();\n+            bool is_ibd = chainman.IsBackgroundIBD(chainstate);\n+\n+            for (CTransactionRef& txn : m_coinbase_txns) {\n+                COutPoint op{txn->GetHash(), 0};\n+                if (coinscache.HaveCoin(op)) {\n+                    (is_ibd ? coins_in_ibd : coins_in_active)++;\n+                } else if (is_ibd) {\n+                    coins_missing_ibd++;\n+                }\n+            }\n+        }\n+\n+        BOOST_CHECK_EQUAL(coins_in_active, initial_total_coins + new_coins);\n+        BOOST_CHECK_EQUAL(coins_in_ibd, initial_total_coins);\n+        BOOST_CHECK_EQUAL(coins_missing_ibd, new_coins);\n+    }\n+\n+    // Snapshot should refuse to load after one has already loaded.\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n+\n+    // Snapshot blockhash should be unchanged.\n+    BOOST_CHECK_EQUAL(\n+        chainman.ActiveChainstate().m_from_snapshot_blockhash,\n+        loaded_snapshot_blockhash);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "3fc9fac25ca98e42ec0addae517a2af281a3a60e",
        "filename": "test/sanitizer_suppressions/tsan",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4/test/sanitizer_suppressions/tsan",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4/test/sanitizer_suppressions/tsan",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/sanitizer_suppressions/tsan?ref=4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
        "patch": "@@ -28,6 +28,7 @@ race:BerkeleyBatch\n race:BerkeleyDatabase\n race:DatabaseBatch\n race:leveldb::DBImpl::DeleteObsoleteFiles\n+race:validation_chainstatemanager_tests\n race:zmq::*\n race:bitcoin-qt\n "
      }
    ]
  },
  {
    "sha": "769a1ef9fdc9c372f5bbe91d1961cabd60bc1895",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjlhMWVmOWZkYzljMzcyZjViYmU5MWQxOTYxY2FiZDYwYmMxODk1",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-11-19T14:30:13Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:40Z"
      },
      "message": "test: Add tests with maleated snapshot data",
      "tree": {
        "sha": "324e7d1fa6011b18de611ec05934f14bd8eb4a5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/324e7d1fa6011b18de611ec05934f14bd8eb4a5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiGQACgkQepNdrbLE\nTwWk9hAAhHmnR/XLGWDzKCVD2Gy1dBIwl2YfB4aEzMjdogAdar9B46SL2aSra8mZ\nar1wntPb0lyvgYsRsNsL4qxZhLXjlUN0J6PEJwkwTvGsinBcsduaPAvyS1AlI3ZQ\nTKUTBApuajdKwgFlfLBpY4+PiqLyNLa5Rd/JssoHNZT2cr0yc/tL/4zy+PpVY4Su\nc94MB8Phn7JUvPkBMLE/FzwKhoSvz9h7mR/NkRb/4KgxnJsJZowx9at7yeC91ukN\nKHakmGlFmFz3WYEzB7uIoOHeRfeF4k5fXyNPOGQ/R6TuKbhhDEdtpjw6+sOJv8zx\nNliJvmPXc9PJT+qLbqllh/5sLdp12dbdKQKtMdrQx6l80XBQHmMgWVuKPs65hNc3\nDYIR2cjbAFD+pLl5BBtRuG1IhPaipwg7LzwAIISyowd+Hk1XCaFPuVfAJFfhJZqA\nCifNZ2uoJDbOjD3oPLoyybeh1AgyqlXMfUJeMYITGM8CgBhWKxx2aHMXJ3wRCN/C\nhcV/+ClvvSQvXx9UnUKRyu0bbA2F4XkbQEoxUHglpuxGNwYrqebHXLPp3zaPTnL6\no2VktP2SnWZABzrrZ6tAkCUEZ1a5u0n0HsiS2x2Aj+jfnTziVZfYZyQFe4UN2lEO\n50lbSS/FZVADI49bMsxZ5Xw99Rh7uqAiN61KZ3ZL0edh2sud3xA=\n=/v88\n-----END PGP SIGNATURE-----",
        "payload": "tree 324e7d1fa6011b18de611ec05934f14bd8eb4a5c\nparent 4d8de04f32736199e4b41a14a2d29b1a4d0a15d4\nauthor Fabian Jahr <fjahr@protonmail.com> 1605796213 -0500\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138020 -0600\n\ntest: Add tests with maleated snapshot data\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d8de04f32736199e4b41a14a2d29b1a4d0a15d4"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "94d42770194e032b9c85828f3f96b746e647a2bf",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=769a1ef9fdc9c372f5bbe91d1961cabd60bc1895",
        "patch": "@@ -169,8 +169,11 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     BOOST_CHECK_CLOSE(c2.m_coinsdb_cache_size_bytes, max_cache * 0.95, 1);\n }\n \n+auto NoMalleation = [](CAutoFile& file, SnapshotMetadata& meta){};\n+\n+template<typename F = decltype(NoMalleation)>\n static bool\n-CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n+CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleation = NoMalleation)\n {\n     // Write out a snapshot to the test's tempdir.\n     //\n@@ -191,6 +194,8 @@ CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root)\n     SnapshotMetadata metadata;\n     auto_infile >> metadata;\n \n+    malleation(auto_infile, metadata);\n+\n     return node.chainman->ActivateSnapshot(auto_infile, metadata, /*in_memory*/ true);\n }\n \n@@ -232,6 +237,29 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Determi\n     initial_size += 10;\n     initial_total_coins += 10;\n \n+    // Should not load malleated snapshots\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // A UTXO is missing but count is correct\n+            metadata.m_coins_count -= 1;\n+\n+            COutPoint outpoint;\n+            Coin coin;\n+\n+            auto_infile >> outpoint;\n+            auto_infile >> coin;\n+    }));\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // Coins count is larger than coins in file\n+            metadata.m_coins_count += 1;\n+    }));\n+    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(\n+        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {\n+            // Coins count is smaller than coins in file\n+            metadata.m_coins_count -= 1;\n+    }));\n+\n     BOOST_REQUIRE(CreateAndActivateUTXOSnapshot(m_node, m_path_root));\n \n     // Ensure our active chain is the snapshot chainstate."
      }
    ]
  },
  {
    "sha": "1afc0e4aa1b910991d4f8a77d74e2197f370987c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWZjMGU0YWExYjkxMDk5MWQ0ZjhhNzdkNzRlMjE5N2YzNzA5ODdj",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T04:02:44Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-02-12T13:53:41Z"
      },
      "message": "doc: remove potentially confusing ChainstateManager comment",
      "tree": {
        "sha": "62de33efac62e7d02f994021f35e45d47f83ea10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62de33efac62e7d02f994021f35e45d47f83ea10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1afc0e4aa1b910991d4f8a77d74e2197f370987c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmAmiGUACgkQepNdrbLE\nTwUzyg/8CHSj7Mt3plqPyJdq9+L9+jtE2mrOhDC87WgszWDyF2uFe9zvUogIKG8i\nrGj4RyhMB5dPpJEv0UuY79cjizI3kVEL8e+FUQWRzbD5VjK7WBD+8dkiEMfx6WEh\nIFtWiQGJ/5ouKuTROuWy+lwlgmzkaBIaGNv5lu9EQLAin8/7ZtFccnPymSOgzvlW\nOCD1OIIvtw93gMpXYm0OMiHJR1vl+2tokgJw0pc8hkly7QW9Q6eOH+JEKTu0q1oF\nOzVCtGjkByr5xQJkACRFMB8PrQRe7f4gRMe340uFGYMfaECNmmOuNzX/uTVXOoas\nnnpRRfWj87aCQSl9lZfBb78DpLZjS4Yy4t/beffYvOeCKdGv3n3zI7eNdjUix4OV\noazmzvljHtNeyoLn21+xpwB7aUFQlo8yZBEax8Mr9bH7YiqT6MhujbyBHG6G+MH1\n+SsjhT585mQFy+ZutOeH7kp9DqXoaoM1RSV6DUrIzJS9DnUhoqRdbKEIjEpSuBeu\nqcLNKY/124z51LsTtakoJLkBeNSjRQRPzsGIDpZgW3VXVTQTPLfgxYtiPDBjkreL\nrW13Nqbo9sE3RiTDWSfmIjqAsXKs+JOK7EUxCTN9JFfIBeLE8ScsSFpKeOT7sj1z\n5Pce83fonKM8oRcIWkBptwf8R8XBieY2X0OuFXHeaOekBQOwZaE=\n=Lp9S\n-----END PGP SIGNATURE-----",
        "payload": "tree 62de33efac62e7d02f994021f35e45d47f83ea10\nparent 769a1ef9fdc9c372f5bbe91d1961cabd60bc1895\nauthor James O'Beirne <james.obeirne@pm.me> 1613102564 -0600\ncommitter James O'Beirne <james.obeirne@pm.me> 1613138021 -0600\n\ndoc: remove potentially confusing ChainstateManager comment\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1afc0e4aa1b910991d4f8a77d74e2197f370987c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1afc0e4aa1b910991d4f8a77d74e2197f370987c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1afc0e4aa1b910991d4f8a77d74e2197f370987c/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "769a1ef9fdc9c372f5bbe91d1961cabd60bc1895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/769a1ef9fdc9c372f5bbe91d1961cabd60bc1895"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d6058e7dac84adab70028f7601a53c54a0404390",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1afc0e4aa1b910991d4f8a77d74e2197f370987c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1afc0e4aa1b910991d4f8a77d74e2197f370987c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=1afc0e4aa1b910991d4f8a77d74e2197f370987c",
        "patch": "@@ -833,9 +833,7 @@ class ChainstateManager\n     //! using this pointer (e.g. net_processing).\n     //!\n     //! Once this pointer is set to a corresponding chainstate, it will not\n-    //! be reset until init.cpp:Shutdown(). This means it is safe to acquire\n-    //! the contents of this pointer with ::cs_main held, release the lock,\n-    //! and then use the reference without concern of it being deconstructed.\n+    //! be reset until init.cpp:Shutdown().\n     //!\n     //! This is especially important when, e.g., calling ActivateBestChain()\n     //! on all chainstates because we are not able to hold ::cs_main going into\n@@ -846,9 +844,7 @@ class ChainstateManager\n     //! non-null, it is always our active chainstate.\n     //!\n     //! Once this pointer is set to a corresponding chainstate, it will not\n-    //! be reset until init.cpp:Shutdown(). This means it is safe to acquire\n-    //! the contents of this pointer with ::cs_main held, release the lock,\n-    //! and then use the reference without concern of it being deconstructed.\n+    //! be reset until init.cpp:Shutdown().\n     //!\n     //! This is especially important when, e.g., calling ActivateBestChain()\n     //! on all chainstates because we are not able to hold ::cs_main going into\n@@ -859,9 +855,7 @@ class ChainstateManager\n     //! most-work chain.\n     //!\n     //! Once this pointer is set to a corresponding chainstate, it will not\n-    //! be reset until init.cpp:Shutdown(). This means it is safe to acquire\n-    //! the contents of this pointer with ::cs_main held, release the lock,\n-    //! and then use the reference without concern of it being deconstructed.\n+    //! be reset until init.cpp:Shutdown().\n     //!\n     //! This is especially important when, e.g., calling ActivateBestChain()\n     //! on all chainstates because we are not able to hold ::cs_main going into"
      }
    ]
  }
]