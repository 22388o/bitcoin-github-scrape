DrahtBot,2020-08-26 01:08:50,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21121 ([test] Small unit test improvements, including helper to make mempool transaction by amitiuttarwar)\n* #21061 ([p2",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-680400991,680400991,
Sjors,2020-09-18 12:22:12,"Would it make sense to add the 110 and 210 block regtest snapshots to the repo, and then add a functional test to load them? That should demonstrate all the behavior we need without committing to a testnet or mainnet block.\n\nI can't compile on macOS.\n```\nvalidation.cpp:5334:67: error: passing variable 'm_blockman' by reference requires holding mutex 'cs_main' [-Werror,-Wthread-safety-refer",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-694835995,694835995,
jamesob,2020-10-16 19:02:56,"Okay, rebased. After a few days of fighting on CI with an apparent msan compiler bug (doesn't like `const` map values - thanks to @ryanofsky for the help) and a few macOS-specific sign comparison warnings (I'm beginning to understand why no one writes tests in C++), this thing is building on CI. The lock annotation warnings that @Sjors helpfully pointed out have been fixed (and were introduced whe",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-710438957,710438957,
jamesob,2020-11-19 14:35:09,"Thanks @ryanofsky @fjahr for the review, and thanks especially for the test Fabian - that's great. I've addressed your feedback and slightly modified the test patch for formatting. I fixed up the snapshot activation so that we can properly test both sides of a false coin count without exception, and I've added your commit as the head of this branch.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-730415498,730415498,
fjahr,2020-11-19 23:36:28,"Code review ACK 2aba960c3360da1e840ffef3b0f95c4fde4f86a6\n\nAlso played with the tests extensively looking for edge cases.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-730704478,730704478,
jamesob,2020-11-28 17:03:28,"The Cirrus fuzzer/valgrind test is reliably timing out here. Not sure if that's unique to this PR or not.\n\nOtherwise, I think this is close to ready for merge?",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-735256648,735256648,
MarcoFalke,2020-11-28 17:10:12,"Jup, can be ignored. (Or fixed with a rebase)",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-735257431,735257431,
fjahr,2020-12-13 23:55:15,"Code review ACK 80121fbb2d0c7c14f9c99cb873859e5ed9c83a0e. Changes since last review: rebased, changed a logprint in `validation.cpp` (see GH comments), changed NODISCARD to [[nodiscard]].",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-744091765,744091765,
Sjors,2020-12-14 13:22:24,"In ba2779f98490f1492644a4ee4320fa689560272c you mock `nTx`, `nChainTx` (memory only) and `BLOCK_OPT_WITNESS` in `m_active_chainstate` for all blocks below the snapshot height. Meanwhile the background sync from genesis takes place on `m_ibd_chainstate` which sets the correct values. I spent a bunch of time being confused, but eventually realised `pblocktree` is a global. It might be nice to pull t",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-744436297,744436297,
jamesob,2020-12-15 18:14:31,"[`au.activate.27`](https://github.com/jamesob/bitcoin/tree/au.activate.27) -> [`au.activate.28`](https://github.com/jamesob/bitcoin/tree/au.activate.28)\n\n<details><summary>Show range-diff</summary>\n\n```sh\n$ git range-diff master au.activate.27 au.activate.28\n\n1:  35188e646c = 1:  a9fb5a3174 chainparams: add allowed assumeutxo values\n2:  96d70a3897 = 2:  7356672cc1 simplify Chainsta",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-745471074,745471074,
jonatack,2020-12-15 18:47:37,"Concept ACK, hope to review this tomorrow. Building now.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-745491141,745491141,
fjahr,2020-12-16 00:14:32,"Code review ACK 68dadbdcb9afe60b77e027d6b066c87b86dbf7a9\n\nOnly change since last review was introduction of intermediary variable `chaintip_loaded` to fix https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542412737.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-745661241,745661241,
laanwj,2020-12-21 15:35:35,"This has many ACKs and  seems (besides needing rebase again, sorry) ready for merge.\nSo I think what we need to decide here is whether we'll accept a circular dependency added momentarily, and resolve that in a later PR. I don't insist on holding it up on that.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749036079,749036079,
jamesob,2020-12-21 15:53:54,Thanks for the clear feedback - I'll rebase tonight and at the very least remove the unnecessary optional stuff.,https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749045152,749045152,
jamesob,2020-12-22 03:57:09,"[`au.activate.28`](https://github.com/jamesob/bitcoin/tree/au.activate.28) -> [`au.activate.30`](https://github.com/jamesob/bitcoin/tree/au.activate.30)\n\n<details><summary>Show range-diff</summary>\n\n```sh\n$ git range-diff master au.activate.28 au.activate.30\n\n1:  a9fb5a3174 ! 1:  d684ecd5f1 chainparams: add allowed assumeutxo values\n    @@ -140,17 +140,10 @@\n      #include <chain",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749324217,749324217,
Sjors,2020-12-22 11:43:43,re-ACK e62e2a96f623f5d38845d472329d1a8253e146d0,https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749500104,749500104,
jamesob,2020-12-22 18:19:28,"@jonatack prefer to defer those cleanups for a follow-up PR unless others feel it necessary to do those there, thanks for the look.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-749700550,749700550,
fjahr,2020-12-23 19:40:44,"re-ACK e62e2a96f623f5d38845d472329d1a8253e146d0\n\nOnly changes since last review are updated usage of optional since std::optional was merged.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-750445059,750445059,
jamesob,2021-01-05 14:33:54,Would appreciate some guidance here if maintainers are waiting on anything to be done.,https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-754671970,754671970,
laanwj,2021-01-07 18:17:04,Code review ACK e62e2a96f623f5d38845d472329d1a8253e146d0,https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-756289600,756289600,
laanwj,2021-01-07 18:19:05,"The cirrus CI error looks relevant, though strange (a race in ostream?):\n```\nWrote UTXO snapshot to /tmp/test_common_Bitcoin Core/35ec263ac30d22e47a7de455d58dbf0fd5788ec03feee003dfe753772e175d86/test_snapshot.110.dat: {""coins_written"":110,""base_hash"":""5149f8fe2875e71f5ef664b0e78909cfbd651356fdf5505558323f8321405269"",""base_height"":110}\nmake[3]: *** [Makefile:16615: test/validation_chainstatem",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-756290806,756290806,
MarcoFalke,2021-01-07 20:43:49,"I could only reproduce the tsan failure once, so was unable to debug. Maybe just add `race:validation_chainstatemanager_tests` to the suppressions file?",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-756372850,756372850,
jamesob,2021-01-08 15:10:54,"[`au.activate.30`](https://github.com/jamesob/bitcoin/tree/au.activate.30) -> [`au.activate.31`](https://github.com/jamesob/bitcoin/tree/au.activate.31)\n\n<details><summary>Show range-diff</summary>\n\n```sh\n$ git range-diff master au.activate.30 au.activate.31\n\n1:  d684ecd5f1 ! 1:  5b7fede907 chainparams: add allowed assumeutxo values\n    @@ -162,11 +162,11 @@\n     +        BOOST_C",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-756806028,756806028,
fjahr,2021-01-10 00:41:30,"Code review ACK a56b71054f9ba4f13cea9938826032f9359a39d4\n\nChanges since last review only addressed review comments, most notably introduced `EmplaceCoinInternalDANGER()`.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-757391086,757391086,
jamesob,2021-01-10 16:34:31,"[`au.activate.33`](https://github.com/jamesob/bitcoin/tree/au.activate.33) -> [`au.activate.34`](https://github.com/jamesob/bitcoin/tree/au.activate.34)\n\n<details><summary>Show range-diff</summary>\n\n```sh\n$ git range-diff master au.activate.33 au.activate.34\n\n1:  27f5ea82b5 = 1:  27f5ea82b5 chainparams: add allowed assumeutxo values\n2:  a1410726a1 ! 2:  b02730f8bc simplify Chainsta",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-757504260,757504260,
fjahr,2021-01-11 23:29:05,"Code review ACK f5fe848d676b884692e25b6826737913afb020f5\n\nChanges since last review only addressed @jnewbery 's feedback on optional usage.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-758289550,758289550,
fjahr,2021-01-12 21:23:52,"Code review ACK e77eea5150bd46d2972ec5086b86948df6e73a83\n\nConfirmed only rebased since last review.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-759017745,759017745,
dongcarl,2021-01-28 00:40:25,"Hi all, I've had a chat offline with @jamesob about potential conflicts between this PR (#19806) and all of chainman-deglobalizing (#20158).\n\nThankfully, there is only one substantial conflict of note: the commit 385cb331bbf48cfba7b1e77e180d856100e1fdf1 pushed to #19806 yesterday which added lock annotations to the `ActiveChain{,state}()` suite of methods makes both rebase orders significantly",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-768673523,768673523,
jnewbery,2021-01-28 10:11:50,"The most recent commit looks ok in that it addresses the issue pointed out here: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r564074755. However, I think we should do more to ensure that there aren't other potential data races in this series of PRs. For example:\n\nhttps://github.com/bitcoin/bitcoin/blob/02b01651c56239db227bd58e85bc3174cda64519/src/validation.cpp#L5153-L5166\n\nac",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-768946522,768946522,
laanwj,2021-01-28 10:27:55,"> Hi all, I've had a chat offline with @jamesob about potential conflicts between this PR (#19806) and all of chainman-deglobalizing (#20158).\n\nGlad that you two managed to resolve it, so both can move forward!\n\n> I think that a good rule to follow is: if some mutable state can be read/written by multiple threads, it must be guarded by a mutex (or made atomic). \n\nI think this is a good",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-768955695,768955695,
laanwj,2021-02-01 13:30:05,Needs the (planned) rebase after #20749 merge.,https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-770857739,770857739,
jamesob,2021-02-12 04:16:51,"I've pushed a rebase that\n- peels off the latest two locking annotation commits. I'll likely revive those in some form in a follow-up PR,\n- changes `ExpectedAssumeutxo()`'s return value per @ryanofsky's advice,\n- removes confusing `ChainstateManager` comments about locking per @jnewbery's advice,\n- adds commentary around the severity of changing the assumeutxo hash per @ariard's advice.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-777957331,777957331,
fjahr,2021-02-14 16:47:32,"Code review ACK 1afc0e4aa1b910991d4f8a77d74e2197f370987c\n\nReviewed changes since last review and confirmed they were due to rebasing or addressing review comments as discussed above.",https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-778804420,778804420,
laanwj,2021-02-16 18:22:00,Code review ACK 1afc0e4aa1b910991d4f8a77d74e2197f370987c,https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-780028424,780028424,
MarcoFalke,2021-04-04 15:47:59,(commit title and description of f6e2da5 doesn't match what it does),https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-813055299,813055299,
fjahr,2020-08-29 08:35:22,What is your reasoning behind calling the utxo set hash `assumeutxo` here? It makes it harder for me to reason about but i may be in the minority and this is easier for the casual user. Was that your intention? If we have different hashes in the future and they might be used for assumeutxo as well it would be probably best to use the explicit name for this type of hash `hash_serialized_2`.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626183,479626183,src/validation.cpp
fjahr,2020-08-29 08:36:46,This makes me a bit uncomfortable because we can't test the actual functionality of this function with this. Do you plan to keep this or change it in a follow-up with changes to the testing framework that allow for a better test?,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479626276,479626276,src/validation.cpp
fjahr,2020-08-29 10:16:09,"```suggestion\n    const bool snapshot_ok = this->PopulateAndValidateSnapshot(\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479634348,479634348,src/validation.cpp
fjahr,2020-08-29 10:42:35,I assume it wouldn't work because of a divide by zero error in the progress function? Shouldn't that be rather dealt with at that layer?,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479636397,479636397,src/txdb.cpp
fjahr,2020-08-29 13:28:00,"One alternative way would be hardcode a pre-mined chain into the test and use it, similar to what signet does here: https://github.com/bitcoin/bitcoin/pull/18267/commits/6206c2e8e87fcc70848e4a0fab871d5fd9ea6b16",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479649888,479649888,src/validation.cpp
jamesob,2020-08-30 03:50:48,Thanks for the look. This is good feedback; I'll see if I can get a seed-based deterministic generation of a reg test chain and then add some values/tests based on that. When I originally wrote this I think I'd forgotten that we can mock time.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717530,479717530,src/validation.cpp
jamesob,2020-08-30 03:53:28,It was for consistency with `assumevalid` but I'm happy to rename it in lieu of something better.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r479717700,479717700,src/validation.cpp
MarcoFalke,2020-08-31 17:01:59,"in commit d6396c4be4\n\nFor pure-utility functions it would be good to pass in `params` instead of relying on the global",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264245,480264245,src/validation.cpp
MarcoFalke,2020-08-31 17:03:25,Agree that regtest should have an assumeutxo hash baked in. Maybe we could even get the 200-blocks premine to be deterministic and use that?,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480264955,480264955,src/validation.cpp
MarcoFalke,2020-08-31 17:12:07,"Can't this be hardcoded beside the blockheight and assumeutxo hash in the chain params? \n\n(If not, I'll need to think more about how the txdb value for nchaintx interacts with major version upgrades, which bump the assumeutxo)",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480269550,480269550,src/txdb.cpp
MarcoFalke,2020-08-31 17:13:16,"in commit: bdf182e81e\n\nforward decls right after the includes, pls. kthx",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480270148,480270148,src/coins.h
MarcoFalke,2020-08-31 17:18:14,"in commit bdf182e81e\n\nthis can't be nullptr, so `&` seems more appropriate. Also the metadata should be read-only here?\n\n```suggestion\n        CAutoFile& coins_file, const SnapshotMetadata& metadata, bool in_memory);\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480272552,480272552,src/validation.h
MarcoFalke,2020-08-31 17:21:03,nit: compile time constants can be UPPER_CASE,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274008,480274008,src/validation.cpp
MarcoFalke,2020-08-31 17:22:04,nit: Please prefer the identical ChainstateManager::ActiveChainstate,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480274541,480274541,src/validation.cpp
MarcoFalke,2020-08-31 17:24:00,"```suggestion\n    auto snapshot_chainstate = MakeUnique<CChainState>(mempool, m_blockman, base_blockhash);\n```\n\nneeds rebase",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480275488,480275488,src/validation.cpp
MarcoFalke,2020-08-31 17:32:52,"```suggestion\n    if (!GetUTXOStats(&snapshot_chainstate.CoinsDB(), stats, CoinStatsHashType::HASH_SERIALIZED, [] {/*TODO*/})) {\n```\n\ncould make sense to make this interruptible if it takes a long time",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480280231,480280231,src/validation.cpp
MarcoFalke,2020-08-31 17:35:28,"So in other words this will deadlock with `-nonetworkactive` or `-noconnect`?\n\nIf yes, what about including the preceding headers in the snapshot? I know we had a discussion about that, but I forget the result. Please remind me :sweat_smile:  ",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480281665,480281665,src/validation.cpp
MarcoFalke,2020-08-31 17:40:02,"If nothing else, you can take the hash from `./test/functional/rpc_dumptxoutset.py`",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480284080,480284080,src/validation.cpp
jamesob,2020-08-31 22:25:06,"I've updated the regtest assumeutxo values for two separate heights and added some utilities to the unittest framework for generating a deterministic chain, so we now have some decent tests in place for this.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432499,480432499,src/validation.cpp
jamesob,2020-08-31 22:25:36,Done,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480432847,480432847,src/validation.cpp
jamesob,2020-08-31 22:26:07,"Yup, good call. Done.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433215,480433215,src/validation.h
jamesob,2020-08-31 22:26:30,"Oof, dumb move on my part. Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433490,480433490,src/validation.cpp
jamesob,2020-08-31 22:26:39,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480433603,480433603,src/validation.cpp
jamesob,2020-08-31 22:29:43,"Well, if by ""deadlock"" you mean ""sleep-loop for ten minutes and then fail the activation,"" I guess so. But I wouldn't call this a deadlock personally.\n\nMaybe others can chime in here but IMO it still makes sense to obtain headers from the network, since ultimately what use is a snapshot without network connectivity and peers to get you to the tip of the chain? There may have been a more concre",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480435696,480435696,src/validation.cpp
MarcoFalke,2020-09-01 05:34:47,Oh I missed the `max_secs_to_wait_for_headers` :sleeping: ,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r480835783,480835783,src/validation.cpp
fjahr,2020-09-01 13:15:18,"```\nThe test suite in file src/test/foo_tests.cpp should be named\n""foo_tests"". Please make sure the following test suites follow\nthat convention:\nsrc/test/validation_tests.cpp:BOOST_FIXTURE_TEST_SUITE(validation_tests_regtest, RegTestingSetup)\n^---- failure generated from test/lint/lint-tests.sh\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r481128165,481128165,src/test/validation_tests.cpp
ryanofsky,2020-09-02 19:22:46,"In commit ""add allowed assumeutxo values"" (60bd91334a3654fe59dac0bd28fb8824b897edf7)\n\nMinor: Suggest s/XXX/Warning/. Some editors treat XXX like TODO",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482332094,482332094,src/node/coinstats.cpp
ryanofsky,2020-09-02 20:34:05,"In commit ""add allowed assumeutxo values"" (60bd91334a3654fe59dac0bd28fb8824b897edf7)\n\nNote: unit test coverage for this function is added in later commit ""tests: add unittest for ExpectedAssumeutxo""\n\nJust a suggestion, but I think it would be nice to combine these two commits. Adding new tests along with code makes it easier to:\n\n- Understand the code change (seeing how a function is c",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482426252,482426252,src/validation.h
ryanofsky,2020-09-02 21:34:48,"> Can't this be hardcoded beside the blockheight and assumeutxo hash in the chain params?\n> \n> (If not, I'll need to think more about how the txdb value for nchaintx interacts with major version upgrades, which bump the assumeutxo)\n\nHardcoding this seems does seem like it might be a good simplification. It also seems like hardcoding might be useful for validating the snapshot? Otherwise, w",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482495858,482495858,src/txdb.cpp
ryanofsky,2020-09-02 22:02:18,"In commit ""txdb: add nChainTx cache for snapshot chainstates"" (bc622c33ce925159906e3b00be77b11d598397ed)\n\n""Only contains a value"" suggests the row may be present without a value. Would suggest saying something like ""This is not present in the normal coins database. It is only saved and used in in temporary UTXO snapshots.""",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482518150,482518150,src/txdb.cpp
ryanofsky,2020-09-02 22:10:52,"In commit ""txdb: add nChainTx cache for snapshot chainstates"" (bc622c33ce925159906e3b00be77b11d598397ed)\n\nCan you remind what this is used for? Just estimating sync progress, or other things too? Would also be good to make comment more specific, maybe ""Cached CBlockIndex::nChainTx value (number of transactions in chain) at the base block of a UTXO snapshot that is being imported. This is used ",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482524613,482524613,src/txdb.cpp
ryanofsky,2020-09-02 22:21:08,"> I assume it wouldn't work because of a divide by zero error in the progress function? Shouldn't that be rather dealt with at that layer?\n\nWould agree that handling this in LoadBlockIndex would be preferable to having to hardcode 1's  here and in `ChainstateManager::GetSnapshotNChainTx` along with comments describing other layers of code. Both `CCoinsViewDB::GetNChainTx` and `ChainstateManage",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482532448,482532448,src/txdb.cpp
jamesob,2020-09-02 23:24:18,"Yep, I think @MarcoFalke's approach is the right one. Will implement tomorrow.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r482595806,482595806,src/txdb.cpp
ryanofsky,2020-09-04 19:51:00,"In commit ""simplify ChainstateManager::SnapshotBlockhash() return semantics"" (75d1e7754274d3f015a49e71871c3a069cbe020b)\n\nThere doesn't seem to be any test coverage for this, or at least test seem to pass with change reverted. Would be good to have test coverage when changing a corner case.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483817973,483817973,src/validation.cpp
ryanofsky,2020-09-04 21:13:37,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\n\nWould be good to use SetBestBlock so this is consistent and it's clear this is overwriting random value above. Also it would be good to move this next to the Flush call below for consistency with the sequence above.\n\nOn layer violation comment, IMO it would be reasonable to write a C",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483846226,483846226,src/validation.cpp
ryanofsky,2020-09-04 21:20:45,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\n\nProbably it makes sense for this function to take an interruption_point argument instead of defining its own internally.\n",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483848478,483848478,src/validation.cpp
ryanofsky,2020-09-04 21:30:38,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\n\nCan you add a comment explaining locking in this function. It's not clear to me why cs_main needs to be held at all while reading the snapshot file and populating the chainstate when the chainstate is still being constructed shouldn't be referenced externally. It's also not clear why it'",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483851329,483851329,src/validation.cpp
ryanofsky,2020-09-04 21:34:49,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\n\nIs there a reason hash is being computed above before sleeping but only checked now after sleeping? It seems like it'd be good to return an error as early as possible and not wait for headers if this is going to fail.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483852578,483852578,src/validation.cpp
ryanofsky,2020-09-04 21:49:49,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\n\nIdeally, we would not have to fake these things and external code would code better with missing data, right? Or do you disagree? It would be good if comment would say one way or the other what ultimate fate of faking should be.\n\nIt would also be good if comments in chain.h documenti",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483857507,483857507,src/validation.cpp
ryanofsky,2020-09-04 21:51:39,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\n\nThis function and PopulateAndValidateSnapshot below are doing a lot of things, and I think might benefit from being split up into smaller functions:\n\n- Rebalance caches\n- Load snapshot file -> ccoinsview and verify expected hash\n- Wait for headers\n- Set chain tip and fake block",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483858967,483858967,src/validation.cpp
ryanofsky,2020-09-04 21:57:53,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (9c1db71dbd82342b0a1d33401b329e34a7a6cee8)\n\nI don't understand implication of this comment. Maybe it should say why not to rebalance or flush. I'm not clear on what rebalancing would do here, and it seems like the PopulateAndValidateSnapshot call already flushes the snapshot chainstate, at least.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483860811,483860811,src/validation.cpp
ryanofsky,2020-09-04 22:15:44,"In commit ""simplify ChainstateManager::SnapshotBlockhash() return semantics"" (75d1e7754274d3f015a49e71871c3a069cbe020b)\n\nI think if all the calling code is going to continue to do `.value_or(uint256())` it makes little sense for this to return an optional. Would be simpler to just use `Optional<uint256>` everywhere (make `m_from_snapshot_blockhash` an `Optional<uint256>` and stop treating zero",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r483865232,483865232,src/validation.cpp
jamesob,2020-09-07 23:26:48,"Yep, you're right about this - I'll remove the lock acquisition. I had initially put this in to simplify testing, and had some vague rationale about snapshot load being the most important task and so meriting ""stopping"" everything else by holding cs_main, but that doesn't make much sense. Also probably good to keep cs_main free while deserializing the snapshot so that we have a better chance of ha",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585151,484585151,src/validation.cpp
jamesob,2020-09-07 23:28:24,"> Would be good to use SetBestBlock\n\nFixed, thanks.\n\n> it would be reasonable to write a CAutoFile -> CCoinsViewCache function\n\nHm yeah, this is definitely worth some consideration.\n\n",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585389,484585389,src/validation.cpp
jamesob,2020-09-07 23:31:03,"Yeah, that's a good point. Unfortunately we need the headers chain to [resolve the `base_height`](https://github.com/bitcoin/bitcoin/pull/19806/commits/9c1db71dbd82342b0a1d33401b329e34a7a6cee8#diff-24efdb00bfbe56b140fb006b562cc70bR5495) before retrieving the expected assumeutxo data.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r484585738,484585738,src/validation.cpp
jamesob,2020-10-13 14:41:57,"After revisiting this comment, I don't understand it either! Seems like we should always `MaybeRebalanceCaches()` at the end of this function. It probably had something to do with not wanting to clear the coinscache of the new chainstate throughout the course of the flush, but since we're doing that anyway (#17487 doesn't look like it's going to get merged anytime soon) I'll just add that call to ",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504009619,504009619,src/validation.cpp
jamesob,2020-10-13 14:47:25,Not sure what you mean here. I was a little confused when rebasing because afaict we don't have any remaining usages of interruption_point in the codebase (aside from the RpcInterruptionPoint).,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504014239,504014239,src/validation.cpp
jamesob,2020-10-13 15:04:55,"Ideally you're right here, but there's a lot of complexity in cleaning up the ""consumer"" side of this data. Take for example `nChainTx`; in order to avoid faking that value, there are various points of consumption in net_processing (by way of `HaveTxsDownloaded()`) that need to be addressed. What makes these sites complicated is that they lack the chainstate context, having access only to the CBlo",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504028114,504028114,src/validation.cpp
jamesob,2020-10-13 15:07:29,"I'm not opposed, but I'm not sure I see a lot of benefit either. E.g. I don't think splitting this stuff up allows us to do a more comprehensive job of testing. I'm happy to apply a diff though.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504030195,504030195,src/validation.cpp
jamesob,2020-10-13 15:09:47,Yeah I don't disagree; initially had it that way but changed it at the request of a reviewer in a previous PR.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504031898,504031898,src/validation.cpp
jamesob,2020-10-16 18:55:21,Done.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665391,506665391,src/node/coinstats.cpp
jamesob,2020-10-16 18:55:32,Done.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665484,506665484,src/validation.h
jamesob,2020-10-16 18:56:07,"Thanks, added test coverage in the same commit.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506665741,506665741,src/validation.cpp
jamesob,2020-10-16 18:57:04,Cleaned up the usages to actually make use of the option. Thanks.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r506666210,506666210,src/validation.cpp
ryanofsky,2020-10-19 21:45:28,"In commit ""chainparams: add allowed assumeutxo values"" (a1aa47484fb7c272a1b957a37dc8c4595a0774bb)\n\nIt might be good to say in comment that `int` is a height. Also, it looks like strictly speaking there is no need for this data structure to reference heights. E.g. it could just be a simple map from hash -> nChainTx. Not important, though.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508081070,508081070,src/chainparams.h
ryanofsky,2020-10-19 21:59:41,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\n\nWhat's the reason this uses 99:1 ratio while MaybeRebalanceCaches uses 95:5 ratio? Maybe there should be an explanatory comment, or the two pieces of code could use a common helper function or constants.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508087473,508087473,src/validation.cpp
ryanofsky,2020-10-19 22:12:29,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\n\nWould it make sense to assert m_snap_chainstate is null before this?",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508092882,508092882,src/validation.cpp
ryanofsky,2020-10-19 22:50:03,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\n\nre: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504014239\n\n> Not sure what you mean here. I was a little confused when rebasing because afaict we don't have any remaining usages of interruption_point in the codebase (aside from the RpcInterruptionPoint).\n\nIt's not i",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508107265,508107265,src/validation.cpp
Sjors,2020-10-20 09:56:57,"5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5: You may want to move the refactor from 83a67ec24c053f6d085101c83e448e76806e8355 up a bit, so you can use `if (this->SnapshotBlockhash())` from the get go.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508368402,508368402,src/validation.cpp
Sjors,2020-10-20 10:12:44,5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5 : why is the snapshot mempool shared with the ibd mempool?,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508378505,508378505,src/validation.cpp
Sjors,2020-10-20 10:32:07,"I tend to agree that (in the current incarnation 5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5 `PopulateAndValidateSnapshot` does quite a lot. Although I can follow along, it might be more clear if `ActivateSnapshot` called more specific helper functions in the right order, e.g. `WaitForHeaders`.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508390158,508390158,src/validation.cpp
Sjors,2020-10-20 10:44:39,"It's a bit weird to activate a snapshot that is identical to the actual fully validated chain. It would be nice if we could mine headers-only. Calling `ProcessNewBlockHeaders` instead of `ProcessNewBlock` in the test helper might do the trick.\n\nTogether with mock time you could test the functionality of waiting for headers too.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508397723,508397723,src/test/validation_chainstatemanager_tests.cpp
ryanofsky,2020-10-20 15:16:20,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\n\nre: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r504028114\n\n> I'm not saying it isn't possible to do what you're suggesting here\n\nSorry, wasn't objecting to fudging data now, just suggesting documenting in chain.h which fields may contain fake data and when the fake ",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508597546,508597546,src/validation.cpp
ryanofsky,2020-10-20 15:31:25,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\n\nIf these blockindexes are shared across different chains and can be accessed without `snapshot_chainstate` is some locking needed to update them? Might be good to have a comment saying why cs_main isn't acquired here. (Feel free to skip if I'm just missing a basic assumption)",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508613868,508613868,src/validation.cpp
ryanofsky,2020-10-20 15:39:07,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (5e08b73c023bd7f9e79d1b67c25a2ed2b4248fe5)\n\nFWIW, I don't think a CoinsView bulk load method would be a crazy thing to have. But I can see how making it not snapshot-activation specific could be a pain, so the `friend ChainstateManager` approach does seem ok too.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508622929,508622929,src/validation.cpp
ryanofsky,2020-10-20 15:48:35,"In commit ""tests: add deterministic chain generation unittest fixture"" (e08cc16f53b7b465f4f1e3b6f7bf83b37356b043)\n\nPerhaps should use `if (m_deterministic)` condition for consistency with the other SetMockTime calls in this class",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508634404,508634404,src/test/util/setup_common.cpp
ryanofsky,2020-10-20 15:58:40,"In commit ""tests: add snapshot activation test"" (59013d80067948e5073da10a06802a1e9b84e7d7)\n\nBetter to replace `assert` with `BOOST_REQUIRE` to integrate with test framework. Also because it's good not to do things with side effects in c asserts in case there are custom CPPFLAGS",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r508645914,508645914,src/test/validation_chainstatemanager_tests.cpp
jamesob,2020-10-28 13:09:33,"Each CChainState instance needs a mempool. In practice, the non-active mempool will never be used, but since each chainstate can be the active throughout runtime, they each need a reference to the same mempool.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513427859,513427859,src/validation.cpp
jamesob,2020-10-28 13:11:29,I don't really understand this. There's no way to generate a snapshot to activate without mining blocks on some chain. The chainstate we're loading the snapshot into has no knowledge of the mined blocks. I don't know how we can do better?,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513429114,513429114,src/test/validation_chainstatemanager_tests.cpp
jamesob,2020-10-28 13:41:41,"Oh this is definitely a problem, thanks for finding it. Yet another vestige of originally having `::cs_main` held during the entirety of `PopulateAndValidateSnapshot`.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513451488,513451488,src/validation.cpp
jamesob,2020-10-28 16:39:28,"Hm, you're right about that. I kind of like the constraint that keying by height creates (enforces single entry per height), but that's neither here nor there. I'll leave as-is unless we can think of a good reason to change.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513594968,513594968,src/chainparams.h
jamesob,2020-10-28 18:02:02,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655004,513655004,src/test/validation_chainstatemanager_tests.cpp
jamesob,2020-10-28 18:02:09,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655080,513655080,src/test/util/setup_common.cpp
jamesob,2020-10-28 18:02:21,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655199,513655199,src/validation.cpp
jamesob,2020-10-28 18:02:54,Added a comment here.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655572,513655572,src/validation.cpp
jamesob,2020-10-28 18:03:14,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513655773,513655773,src/validation.cpp
jamesob,2020-10-28 18:10:25,Makes sense to me. Fixed.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513660363,513660363,src/validation.cpp
jamesob,2020-10-28 18:14:21,"Oh sorry, somehow misinterpreted what you'd said. Added some comments in `chain.h` that at least provide references to where the faked values are created and used; if you can think of anything else that'd be useful I'm happy to apply a patch.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r513662804,513662804,src/validation.cpp
fjahr,2020-11-12 23:57:09,"in f92a76b62fad04213884ec602822601ee84f3825:\nnit: This new line doesn't seem necessary",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r522516317,522516317,src/test/validation_chainstatemanager_tests.cpp
fjahr,2020-11-15 15:34:47,"in d2d1eb23331fdb1c36a8a879aff222ff0d731210:\nTypo: `assumeutuxo`",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523774332,523774332,src/node/coinstats.cpp
fjahr,2020-11-15 16:13:14,"in 07936ca7c067f007f7fe9dc04e8feb2c934122a2:\n`coins_left` should always be 0 here so it can be removed I think",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523779017,523779017,src/validation.cpp
fjahr,2020-11-15 18:52:28,"in 07936ca7c067f007f7fe9dc04e8feb2c934122a2:\nThis fails if `m_coins_count` has a higher count than the number of actual coins in `coins_file`. See also my test in https://github.com/fjahr/bitcoin/commit/2835c8118fe35f5551886ac5251e535bb337571a.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523797335,523797335,src/validation.cpp
fjahr,2020-11-15 19:05:53,"in d2d1eb23331fdb1c36a8a879aff222ff0d731210:\nJust a thought: Should a node refuse to start if it has a chain that does not match with the assumeutxo data here? Maybe in the next steps it could make sense to add such a check to init but I haven't thought about it much and maybe you already plan to do this.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523799037,523799037,src/chainparams.cpp
fjahr,2020-11-15 19:30:55,"in 07936ca7c067f007f7fe9dc04e8feb2c934122a2:\nThis statement does not have to be true afaict. The count in the metadata can be different from the actual count of the coins in the file. Also, the loop above doesn't seem to break unless `coins_left` is 0 anyway.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523802301,523802301,src/validation.cpp
fjahr,2020-11-15 20:50:13,"in 700e66dc6bf6ed1b6bc2a642686a734cb69f4932:\nnit: not sure about where univalue really belongs but mostly it seems to be in the very last block of includes while tinyformat is in the block above. But again, not sure which style guide we actually follow there. Either way, if you keep it like this, sorting between univalue and tinyformat is wrong.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r523811814,523811814,src/test/validation_chainstatemanager_tests.cpp
jamesob,2020-11-19 14:14:39,"I think failure is the desired behavior; if the coins count attached to the snapshot deviates from the actual contents of the snapshot, that's an indication that the snapshot has been modified somehow.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r526918310,526918310,src/validation.cpp
jamesob,2020-11-19 14:23:38,"Oh I think I see what you're saying here - it halts execution instead of `return false`? Yeah, maybe we should wrap this in a `try` for testability's sake.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r526925349,526925349,src/validation.cpp
ryanofsky,2020-12-01 18:31:10,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (a2e7b295a33d90c895da649ee479fa090f20276b)\n\nCould drop `- coins_left` to be consistent with `[snapshot] loaded` log print immediately below. Assuming no change in behavior since it will always be zero. Or maybe just move the    ""snapshot loaded"" print above the ""bad snapshot"" print so the loading information only needs to be print",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r533632213,533632213,src/validation.cpp
Sjors,2020-12-14 14:11:03,ba2779f98490f1492644a4ee4320fa689560272c : Better to [avoid](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#general-c) asserts with side-effects.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542412737,542412737,src/validation.cpp
Sjors,2020-12-14 16:00:13,ea0e1d005a455d8ddef63d428dbedcd9f54a2f9e: maybe put an `assert` here and have the caller do `if (!m_is_memory)`? It's also not very clear to me why it's fine to skip the resize (within tests).,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542499846,542499846,src/txdb.cpp
Sjors,2020-12-14 16:05:42,"6bb63e9efeccfad3e5f422453902cb22a22c33b4 : alternatively, it could return `path` rather than a `UniValue`, so it could even live outside of RPC land.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542504229,542504229,src/rpc/blockchain.h
Sjors,2020-12-14 16:08:25,e82498b05634608e59a1d1acc1a8c1b8ece62ffc: why are you dropping `private` here? ,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542506377,542506377,src/test/util/setup_common.h
Sjors,2020-12-14 16:16:42,"`mineBlocks()` calls `CreateAndProcessBlock` which calls `m_node.chainman->ProcessNewBlock`. Doesn't that mean the blocks are fully processed by the test node, including the right values for `nTx` and `BLOCK_OPT_WITNESS` for all blocks before the snapshot? Which would mean we're not testing the code path that sets dummy values.\n\nPerhaps one approach could be to split `CreateAndActivateUTXOSnap",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r542512722,542512722,src/test/validation_chainstatemanager_tests.cpp
jamesob,2020-12-15 16:13:02,I have to make use of it here: https://github.com/bitcoin/bitcoin/pull/19806/files#diff-dbada1fe3a3d0af884304dd28be8c9df74b592401dec2c6400f6b491aefe6c9bR230,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543481652,543481652,src/test/util/setup_common.h
jamesob,2020-12-15 18:10:24,"We have no choice but to skip the resize in tests because, as the comment says, the operations necessary for a resize when using an in-memory db result in an emptying of the coinsdb.\n\nI like the idea of some kind of assert here to prevent this from happening outside of a test setting, but what could we assert on? Sounds like a good small follow-up.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543572101,543572101,src/txdb.cpp
jamesob,2020-12-15 18:14:10,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543574650,543574650,src/validation.cpp
laanwj,2020-12-15 22:05:52,Having to add a circular dependency here is kind of a shame.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543721004,543721004,test/lint/lint-circular-dependencies.sh
laanwj,2020-12-15 22:07:16,Is there a C++17 equivalent for `optional_io`?,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543721793,543721793,test/lint/lint-includes.sh
laanwj,2020-12-15 22:16:38,"The naming ""breakpoint"" in the comment confused me here at first, and made me think at first this was a remnant of debug code.\n\n> ct we don't have any remaining usages of interruption_point\n\nWell, the boost interruption point should no longer be used, If you want to check for interruption it should be done by passing in a polling function as @ryanofsky says.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543726849,543726849,src/validation.cpp
jamesob,2020-12-15 23:24:31,"Unfortunately it doesn't look like it to me. [The contents of the boost header](https://www.boost.org/doc/libs/1_65_0/boost/optional/optional_io.hpp) don't seem to have any equivalent implementations [in c++17](https://en.cppreference.com/w/cpp/utility/optional), but that was a good idea to check. I tried removing the inclusion of this and it broke the build, so I guess it's required.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543760624,543760624,test/lint/lint-includes.sh
jamesob,2020-12-15 23:28:52,I'm with ya. This is cached (and may be stale) but I think the only workable alternative is to fold `coinstats` into validation. If you can think of something else I'm happy to make the change.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r543762546,543762546,test/lint/lint-circular-dependencies.sh
laanwj,2020-12-16 08:33:58,"Okay so you're not intentionally using anything from it, needing to include it is only a by-effect of how boost is structured internally?\nInteresting but yes I guess no way around it then.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544106688,544106688,test/lint/lint-includes.sh
laanwj,2020-12-16 08:37:53,"~~It isn't possible to factor out the part of `node/coinstats` that's used by `validation` to a third module, to prevent the `validation -> node/coinstats` side of the cycle?~~\nApparently that's almost all of it. Ugh.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544109049,544109049,test/lint/lint-circular-dependencies.sh
laanwj,2020-12-16 09:32:45,"I don't think we want to roll more into validation, but less.\n\nMy only idea here is to have the snapshot loading functionality not in validation itself, but in a separate implementation unit (which can depend on both,. but neither will depend on it). ",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544145712,544145712,test/lint/lint-circular-dependencies.sh
jnewbery,2020-12-16 10:04:20,"You can avoid this by using `std::optional`s everywhere. Minimal diff to get this working here (but other uses of boost::optional also need to be removed):\n\n```diff\ndiff --git a/src/test/validation_tests.cpp b/src/test/validation_tests.cpp\nindex 37450ec18f..be9b6ccad2 100644\n--- a/src/test/validation_tests.cpp\n+++ b/src/test/validation_tests.cpp\n@@ -5,14 +5,14 @@\n #include <chainpa",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r544168044,544168044,test/lint/lint-includes.sh
jnewbery,2020-12-21 15:41:41,"boost::optional -> std::optional has now been merged: #20671.\n\nThis boost include can be removed (and some of the optional methods need to be changed).",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r546776491,546776491,test/lint/lint-includes.sh
jonatack,2020-12-22 09:46:15,"d684ecd5 pass cheaply copied types by non-const value\n```suggestion\nOptional<AssumeutxoData> ExpectedAssumeutxo(int height, const CChainParams& chainparams)\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547175326,547175326,src/validation.cpp
jonatack,2020-12-22 10:16:11,"Sorry if this was previously discussed in the earlier, can `MapAssumeutxo` be simplified to not store the height twice?",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547190362,547190362,src/chainparams.cpp
jonatack,2020-12-22 10:22:47,"d684ecd5f11b2cf63235cd483858f3fd27f8c712\n```suggestion\nOptional<AssumeutxoData> ExpectedAssumeutxo(int height, const CChainParams& params);\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547193589,547193589,src/validation.h
jonatack,2020-12-22 10:34:19,nit: sort,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547199449,547199449,src/validation.cpp
jonatack,2020-12-22 10:34:38,nit: sort,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547199589,547199589,src/validation.h
jonatack,2020-12-22 10:49:12,"80f5bacf here and lines 5249 and 5252 below, use [named casts](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Res-casts-named) for error avoidance. Named casts are more specific than a C-style or functional cast, allowing the compiler to catch some errors.\n```diff\n-            (size_t)(current_coinstip_cache_size * IBD_CACHE_PERC),\n-            (size_t)(current_coinsdb_cac",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547206814,547206814,src/validation.cpp
jonatack,2020-12-22 10:58:55,"80f5bacf5 nit\n```suggestion\n        const bool chaintip_loaded = m_snapshot_chainstate->LoadChainTip(::Params());\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547211443,547211443,src/validation.cpp
jonatack,2020-12-22 11:04:29,"80f5bacf55\n```diff\n-        coins_left -= 1;\n-        coins_processed += 1;\n+        --coins_left;\n+        ++coins_processed;\n```\n",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547213999,547213999,src/validation.cpp
jonatack,2020-12-22 11:05:32,80f5bacf use [named casts](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Res-casts-named),https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547214463,547214463,src/validation.cpp
jonatack,2020-12-22 11:13:32,"80f5bacf55\n```suggestion\n        --max_secs_to_wait_for_headers;\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547218038,547218038,src/validation.cpp
jonatack,2020-12-22 11:28:48,"9a2c888d agree with returning `path`\n\nIt looks like NodeContext should be passed by reference to const (""in"" param), not by reference for an ""out"" param\n```suggestion\nUniValue CreateUTXOSnapshot(const NodeContext& node, CChainState& chainstate, CAutoFile& afile);\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547224890,547224890,src/rpc/blockchain.h
jonatack,2020-12-22 11:29:14,"9a2c888d NodeContext should be passed by reference to const\n```suggestion\nUniValue CreateUTXOSnapshot(const NodeContext& node, CChainState& chainstate, CAutoFile& afile);\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547225093,547225093,src/rpc/blockchain.cpp
jonatack,2020-12-22 11:32:19,"414ba8778 here and 51f3f974 in a few places in `src/test/validation_chainstatemanager_tests.cpp`, per `developer-notes.md` prefer the prefix operator\n```suggestion\n    for (int i = 0; i < num_blocks; ++i)\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547226336,547226336,src/test/util/setup_common.cpp
jonatack,2020-12-22 11:40:50,"51f3f974 here and lines 291 and 320\n```suggestion\n        for (const CTransactionRef& txn : m_coinbase_txns) {\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547230123,547230123,src/test/validation_chainstatemanager_tests.cpp
jonatack,2020-12-22 11:43:11,"51f3f974 here and line 245 above\n```suggestion\n            --metadata.m_coins_count;\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547231027,547231027,src/test/validation_chainstatemanager_tests.cpp
jonatack,2020-12-22 11:43:29,"51f3f974\n```suggestion\n            ++metadata.m_coins_count;\n```",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547231144,547231144,src/test/validation_chainstatemanager_tests.cpp
Sjors,2020-12-22 13:32:17,"This is not performance critical I think.  ~`const` has the additional benefit over being easier to reason about.~ (nvm, it's not a reference)",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547279343,547279343,src/validation.cpp
jonatack,2020-12-22 14:05:22,"Yes, there have been a few conversations about this recently, like https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489776345 and others. The developer notes mention referring to the [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/) but maybe a line about this in the notes would save everyone time.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r547295881,547295881,src/validation.cpp
sipa,2020-12-29 21:38:41,"Response to https://github.com/bitcoin/bitcoin/pull/19806/commits/d684ecd5f11b2cf63235cd483858f3fd27f8c712#r523799037:\n\n@fjahr I'd say no. assume* values are optimizations where we know some computation can be avoided because it's known to be valid. But refusing to start with a mismatching one should just mean you don't get the optimization; doing anything else is very close to making it a che",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549858793,549858793,src/chainparams.cpp
sipa,2020-12-29 21:41:11,"Follow-up to https://github.com/bitcoin/bitcoin/pull/19806/commits/d684ecd5f11b2cf63235cd483858f3fd27f8c712#r547190362:\n\n@jonatack It's not the height, but the nChainTx value. It just happens to be equal to the height in chains that have never had anything but coinbase transactions.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549859378,549859378,src/chainparams.cpp
sipa,2020-12-29 21:58:40,"Response to https://github.com/bitcoin/bitcoin/pull/19806/commits/d684ecd5f11b2cf63235cd483858f3fd27f8c712#r547175326:\n\n@jonatack C++ Core Guidelines only say ""don't enforce const arguments for function arguments"", not don't use them. I'd consider whether someone uses them to be personal style.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549863642,549863642,src/validation.cpp
sipa,2020-12-29 22:00:55,"In commit ""chainparams: add allowed assumeutxo values""\n\nReturning a copy of the AssumeUtxoData here is unnecessary, as the data is immutable. You could return a `Optional<std::reference_wrapper<AssumeutxoData>>` instead.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549864140,549864140,src/validation.cpp
sipa,2020-12-29 22:10:11,"In commit ""validation: add ChainstateManager::ActivateSnapshot""\n\nThis seems pretty ugly. I'd rather expose an actually public ""danger"" interface to CCoinsViewCache than needing to make CCoinsViewCache aware of ChainstateManager.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549869106,549869106,src/coins.h
sipa,2020-12-29 22:18:43,"In commit ""validation: add ChainstateManager::ActivateSnapshot"":\n\ncould be made `static`.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549871887,549871887,src/validation.cpp
MarcoFalke,2021-01-06 10:38:24,7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb: why is this removed. This is needed for `strprintf`,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r552497554,552497554,src/chainparams.cpp
jonatack,2021-01-07 19:15:11,"@sipa these C++ Core Guidelines appear to recommend not passing cheaply copied values as const:\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#con-constants-and-immutability\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Rf-in\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#f15-prefer-simple-and-conventional-ways-of-passing-inform",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553529712,553529712,src/validation.cpp
sipa,2021-01-07 19:23:14,"The only relevant discussion about by-value function arguments declared const I can see is:\n\n> Exception\n>\n> Function arguments are rarely mutated, but also rarely declared const. To avoid confusion and lots of false positives, don’t enforce this rule for function arguments.\n\nSo I read this as: the general advice (make immutable things const) applies, but you're not supposed to warn ab",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553533900,553533900,src/validation.cpp
jonatack,2021-01-07 19:32:08,"@sipa per the replies by you and @vasild at https://github.com/bitcoin/bitcoin/pull/19845#discussion_r490289235, *My take is the same as the isocpp guidelines - no const for function arguments that are passed by value*, I had the impression that this is considered a guideline, but I won't comment on it further in reviews.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553540940,553540940,src/validation.cpp
fjahr,2021-01-07 22:51:19,"@sipa Right, I didn't look at it from that perspective. Thanks!",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553639369,553639369,src/chainparams.cpp
jamesob,2021-01-08 03:08:45,"Fixed, thanks. I called this `EmplaceCoinInternalDANGER()`, let me know if you'd prefer something else.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553716518,553716518,src/coins.h
jamesob,2021-01-08 03:10:09,"Fixed (as well as a few others here), thanks.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r553716808,553716808,src/validation.cpp
jonatack,2021-01-08 19:53:28,"Thanks, I must have been confused here. Will re-review this.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554158337,554158337,src/chainparams.cpp
jnewbery,2021-01-08 19:58:16,"This seems like a pretty strange return type, especially since the only call site immediately assigns an `Optional<AssumeutxoData>` from the return value so you're going to make a copy anyway. Why not just return a `std::optional<AssumeutxoData>` or `AssumeutxoData*`?\n\nAlso, prefer `std::optional<>` over `Optional<>` (`Optional<>` is just a wrapper for `std::optional<>` and is deprecated for n",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554160596,554160596,src/validation.cpp
jnewbery,2021-01-08 20:05:33,"These aren't height-hash pairs. It's a map from height to <hash, nChainTx>.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554163683,554163683,src/chainparams.h
jamesob,2021-01-08 20:18:24,See @sipa's feedback here: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r549864140,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554170337,554170337,src/validation.cpp
fjahr,2021-01-09 23:16:07,"in 3a547327446a3608ef2af25a8d25a42954fc5116\n\nWith the introduction of `EmplaceCoinInternalDANGER()` you can remove this line now, right?",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554484699,554484699,src/coins.h
fjahr,2021-01-09 23:33:04,Should probably still use `std::optional` though.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554486012,554486012,src/validation.cpp
jamesob,2021-01-09 23:51:47,"Ugh, embarrassing. Thanks.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554487506,554487506,src/coins.h
jamesob,2021-01-10 00:12:43,Fixed.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554489101,554489101,src/validation.cpp
jnewbery,2021-01-10 10:10:42,Remove use of `Optional` wrapper.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554544030,554544030,src/validation.cpp
jnewbery,2021-01-10 10:11:44,unused import,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554544120,554544120,src/test/validation_chainstatemanager_tests.cpp
jnewbery,2021-01-10 11:29:36,"I believe sipa's point was that you could avoid a copy by returning a `std::optional<std::reference_wrapper<T>>`. However, you're using that return to copy into a `std::optional<T>` in the only place that this is called:\n\nhttps://github.com/bitcoin/bitcoin/pull/19806/files#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98R5422\n\nso you're not actually saving a copy at al",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554553327,554553327,src/validation.cpp
jamesob,2021-01-10 16:34:57,"Gotcha, thanks @jnewbery.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r554591274,554591274,src/validation.cpp
ryanofsky,2021-01-15 16:05:00,"In commit ""chainparams: add allowed assumeutxo values"" (647c91957f99f5b9aed790e49941e3370fc3c0b2)\n\nShould replace `optional<reference_wrapper<T>>` with `T*`. The advantage of using references instead of pointers is that references are not optional, so you don't have to check for null. If you take reference and make it optional, you are just verbosely emulating a pointer.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r558405368,558405368,src/validation.cpp
ryanofsky,2021-01-20 14:56:38,"In commit ""validation: add ChainstateManager::ActivateSnapshot"" (c5154cad6c195759409d6eb5134fad635b9aaade)\n\nCredit to @jnewbery for pointing this out in https://github.com/bitcoin/bitcoin/pull/20749#discussion_r560979259, but the `ChainStateManager::ActiveChainstate` accessor isn't currently [locking cs_main](https://github.com/bitcoin/bitcoin/blob/e77eea5150bd46d2972ec5086b86948df6e73a83/src/",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r561023961,561023961,src/validation.cpp
dongcarl,2021-01-20 22:43:18,"I'm most likely missing something, but I think it'd be sufficient just to lock cs_main in the ActiveChainstate accessor and not burden callers with locking `cs_main`. That way, callers of ActiveChainstate have the choice of either consistently using the chainstate reference they get, or locking cs_main themselves if they want to make sure that the chainstate doesn't change from under them.\n\nIn",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r561356194,561356194,src/validation.cpp
jnewbery,2021-01-21 08:41:11,"I think eventually we'd like to move away from recursive locking, but that's a long way off for `cs_main`, so there's probably no harm in adding it here. Ultimately both are fine - as long as `cs_main` is held whenever `m_active_chainstate` is read or written to, then we're safe. One thing that you'd need to check for is that none of the callers of the various `Active*()` functions are holding a l",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r561691904,561691904,src/validation.cpp
jnewbery,2021-01-25 22:04:00,"There appear to be quite a few other locations where `m_active_chainstate` is read/written without holding `cs_main`. One example: https://github.com/bitcoin/bitcoin/blob/52d84a45e2fa3def71853cd31d5582ae31ea85d3/src/validation.cpp#L5145-L5151\n\nThis violates the conditions in the comment: ""This means it is safe to acquire the contents of this pointer with ::cs_main held, release the lock, and t",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r564074755,564074755,src/validation.cpp
jamesob,2021-01-26 14:31:22,"> This violates the conditions in the comment: ""This means it is safe to acquire the contents of this pointer with ::cs_main held, release the lock, and then use the reference without concern of it being deconstructed.""\n\nHow so? You can still acquire the pointer and use it without fear of segfault, since the underlying data will always correspond to either `m_idb_chainstate` or `m_snapshot_cha",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r564554289,564554289,src/validation.cpp
jnewbery,2021-01-26 14:48:35,"> the underlying data will always correspond to either m_idb_chainstate or m_snapshot_chainstate\n\nNot necessarily - it's not safe to read the pointer value when it's being written to by another thread since pointers aren't guaranteed to be atomic https://stackoverflow.com/questions/8919818/is-pointer-assignment-atomic-in-c",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r564568211,564568211,src/validation.cpp
ariard,2021-02-04 14:40:16,"03e0de1\n\nI think you can constify `coins_count`?",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570275491,570275491,src/validation.cpp
ariard,2021-02-04 15:20:56,"03e0de1\n\nhttps://github.com/bitcoin/bitcoin/pull/21009 may lands first, will it be still valuable to mark assumed-valid blocks `BLOCK_OPT_WITNESS` ?",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570308860,570308860,src/validation.cpp
ariard,2021-02-04 15:50:30,"03e0de1\n\n`BlockManager::LoadBlockIndex` only cares about `nTx` to update `nChainTx`. I think you want `nTx` > 0 to pass `CheckBlockIndex` ? See checks L4772 - L4780 ?",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570333586,570333586,src/validation.cpp
ariard,2021-02-04 16:25:05,"f3bfa25\n\nShould you describe more the concerns with any bug slip in in `ApplyStats` ? A bug breaking validation of already committed assume-valid chains and thus leading to their reject is okay. What is really concerning would be to validate a mischievous utxo set under a committed assume-valid chain, it might lead to double-spend against the assumeutxo user.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570361268,570361268,src/node/coinstats.cpp
ariard,2021-02-04 16:46:33,"f3bfa25\n\nIs it possible to obtain the same UTXO set hash at the same height but for two different chains ? Your UTXO set at block 100 might be committed with header X or header X'. Assuming a reorg deep enough switching from X-chain to X'-chain, your UTXO snapshot for X would become invalid due to its `base_blockhash`. \n\nI think we'll loose this property if we reference by block hash here.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570378037,570378037,src/validation.h
ariard,2021-02-04 16:49:24,"03e0de1\n\nIf those values are going to be sanitized during background-IBD maybe you should document it.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570380414,570380414,src/chain.h
ariard,2021-02-04 16:52:18,"03e0de1\n\nMaybe you can document the problem that's the hack is circumventing w.r.t to coin cache requirements.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570382713,570382713,src/validation.cpp
ariard,2021-02-04 17:00:42,"03e0de1\n\n""Mark snapshot starting block as eligible for the most-work chain"".",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570389322,570389322,src/validation.cpp
ariard,2021-02-04 17:01:47,"03e0de1\n\nYou should swap those two steps to be in-order ? Also mentions the `GetUTXOStats` one.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570390099,570390099,src/validation.h
ryanofsky,2021-02-05 12:08:31,"In commit ""validation: make NotifyHeaderTip not rely on CChainState object"" (2369045c6909bc242b996976d635cd7e6f9c7f62)\n\nI know this commit came from another reviewer's suggestion, so feel free to ignore this comment, but this commit doesn't seem great to me. It's not simplifying code or semantics, and it seems like it might send a less accurate notification if it is unlocking and relocking `cs",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r570923901,570923901,src/validation.cpp
jnewbery,2021-02-05 14:31:15,"I tend to agree. What's the benefit of this commit?\n\nI haven't looked in great detail, but I imagine we probably want `pindexBestHeader` to move from being a global to being a member of CChainState, guarded by cs_main.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r571006690,571006690,src/validation.cpp
jamesob,2021-02-05 22:49:41,"As far as I can tell, this commit is necessary if we both (i) want chainstate usage to be covered by `cs_main` and (ii) want to preserve the lock exclusion annotation on `NotifyHeaderTip`; there is no way to satisfy both while passing in a chainstate as a parameter.\n\nThat said, I have no problem peeling off the last two commits and deferring locking considerations for another PR. ",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r571293050,571293050,src/validation.cpp
ryanofsky,2021-02-05 23:12:24,"re: https://github.com/bitcoin/bitcoin/pull/19806#discussion_r571293050\n\n> As far as I can tell, this commit is necessary if we both (i) want chainstate usage to be covered by `cs_main` and (ii) want to preserve the lock exclusion annotation on `NotifyHeaderTip`; there is no way to satisfy both while passing in a chainstate as a parameter.\n> \n> That said, I have no problem peeling off the ",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r571300707,571300707,src/validation.cpp
jamesob,2021-02-11 15:10:03,"You may be right, but it requires more investigation - and certainly changing the logic in `LoadBlockIndex`, which I am hesitant to do. We can make this change later if we find it to be preferable for whatever reason.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r574577926,574577926,src/validation.cpp
MarcoFalke,2021-04-03 08:50:41,"7a6c46b37edb8bfa0085d202aa7e9427d5e4fceb: I don't understand this section. Does this assume that the way outputs are applied to the hash_obj is broken? In that case it doesn't require a ""previously"" invalid snapshot. Likely, any invalid snapshot can be generated/modified, so that it is considered valid.\n\nIf it assumes that the underlying hash function is broken, there is nothing we can do anyw",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606639204,606639204,src/node/coinstats.cpp
MarcoFalke,2021-04-03 08:55:23,f6e2da5fb7c6406c37612c838c998078ea8d2252: why is this needed?,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606639538,606639538,src/coins.h
MarcoFalke,2021-04-03 10:26:48,4d8de04f32736199e4b41a14a2d29b1a4d0a15d4: Wouldn't it be better to check `!chainman.SnapshotBlockhash()`? Otherwise it can incorrectly return a default constructed uint256 without this test noticing.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606647986,606647986,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2021-04-03 10:27:51,Wouldn't it be better to have the same interface as for the `SnapshotBlockhash` member function? I.e. return nullopt when there is no hash instead of 0.,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606648138,606648138,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2021-04-03 11:52:22,Any need for this? Seems odd to have an option to make a test non-deterministic,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606655606,606655606,src/test/util/setup_common.h
MarcoFalke,2021-04-03 11:58:42,Could use `GetDataDir()` instead,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606656271,606656271,src/test/util/setup_common.h
MarcoFalke,2021-04-04 09:42:02,#21592,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606775877,606775877,src/test/util/setup_common.h
MarcoFalke,2021-04-04 09:42:47,Fixed in #21584  ,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606775982,606775982,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2021-04-04 09:43:04,Fixed in #21584 ,https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606775999,606775999,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2021-04-04 09:44:49,"Removed in #21592\n",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r606776172,606776172,src/coins.h
MarcoFalke,2021-04-13 06:33:32,"`metadata.m_nchaintx` is untrusted input, so this lets an attacker pick the value",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r612165410,612165410,src/validation.cpp
jamesob,2021-04-14 16:47:16,"Oh, yeah, good catch. This is outdated, and should be `... = au_data.nChainTx` instead. This is an artifact from before we moved nChainTx into the hardcoded assumeutxo parameters.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r613412843,613412843,src/validation.cpp
jamesob,2021-04-14 17:32:32,"Fixed here: https://github.com/bitcoin/bitcoin/pull/21681\n\nThanks for finding this.",https://github.com/bitcoin/bitcoin/pull/19806#discussion_r613443306,613443306,src/validation.cpp
