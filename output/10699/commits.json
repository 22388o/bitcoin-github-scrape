[
  {
    "sha": "2851b77312b55c8868acd4cd2c118e5a034606b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODUxYjc3MzEyYjU1Yzg4NjhhY2Q0Y2QyYzExOGU1YTAzNDYwNmI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-28T22:49:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T23:14:13Z"
      },
      "message": "Make all script verification flags softforks",
      "tree": {
        "sha": "a0dcb9dd740bf3f0a277bbf43e6fc9e9445a11ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0dcb9dd740bf3f0a277bbf43e6fc9e9445a11ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2851b77312b55c8868acd4cd2c118e5a034606b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2851b77312b55c8868acd4cd2c118e5a034606b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2851b77312b55c8868acd4cd2c118e5a034606b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2851b77312b55c8868acd4cd2c118e5a034606b7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2935b469ae96a3203bb997a6eddc098903b336ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b469ae96a3203bb997a6eddc098903b336ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2935b469ae96a3203bb997a6eddc098903b336ce"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 14,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d90abdaf57c430e88796429f863eae86cef34be3",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2851b77312b55c8868acd4cd2c118e5a034606b7/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2851b77312b55c8868acd4cd2c118e5a034606b7/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=2851b77312b55c8868acd4cd2c118e5a034606b7",
        "patch": "@@ -349,9 +349,6 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 {\n                     if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {\n                         // not enabled; treat as a NOP2\n-                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n-                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n-                        }\n                         break;\n                     }\n \n@@ -391,9 +388,6 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 {\n                     if (!(flags & SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {\n                         // not enabled; treat as a NOP3\n-                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n-                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n-                        }\n                         break;\n                     }\n "
      },
      {
        "sha": "3e2757271dd47b599565c3b4878d0306008794b5",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2851b77312b55c8868acd4cd2c118e5a034606b7/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2851b77312b55c8868acd4cd2c118e5a034606b7/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=2851b77312b55c8868acd4cd2c118e5a034606b7",
        "patch": "@@ -27,37 +27,40 @@ enum\n     SIGHASH_ANYONECANPAY = 0x80,\n };\n \n-/** Script verification flags */\n+/** Script verification flags.\n+ *\n+ *  All flags are intended to be soft forks: the set of acceptable scripts under\n+ *  flags (A | B) is a subset of the acceptable scripts under flag (A).\n+ */\n enum\n {\n     SCRIPT_VERIFY_NONE      = 0,\n \n-    // Evaluate P2SH subscripts (softfork safe, BIP16).\n+    // Evaluate P2SH subscripts (BIP16).\n     SCRIPT_VERIFY_P2SH      = (1U << 0),\n \n     // Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.\n     // Evaluating a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) by checksig causes script failure.\n-    // (softfork safe, but not used or intended as a consensus rule).\n+    // (not used or intended as a consensus rule).\n     SCRIPT_VERIFY_STRICTENC = (1U << 1),\n \n-    // Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)\n+    // Passing a non-strict-DER signature to a checksig operation causes script failure (BIP62 rule 1)\n     SCRIPT_VERIFY_DERSIG    = (1U << 2),\n \n     // Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure\n-    // (softfork safe, BIP62 rule 5).\n+    // (BIP62 rule 5).\n     SCRIPT_VERIFY_LOW_S     = (1U << 3),\n \n-    // verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).\n+    // verify dummy stack item consumed by CHECKMULTISIG is of zero-length (BIP62 rule 7).\n     SCRIPT_VERIFY_NULLDUMMY = (1U << 4),\n \n-    // Using a non-push operator in the scriptSig causes script failure (softfork safe, BIP62 rule 2).\n+    // Using a non-push operator in the scriptSig causes script failure (BIP62 rule 2).\n     SCRIPT_VERIFY_SIGPUSHONLY = (1U << 5),\n \n     // Require minimal encodings for all push operations (OP_0... OP_16, OP_1NEGATE where possible, direct\n     // pushes up to 75 bytes, OP_PUSHDATA up to 255 bytes, OP_PUSHDATA2 for anything larger). Evaluating\n     // any other push causes the script to fail (BIP62 rule 3).\n     // In addition, whenever a stack element is interpreted as a number, it must be of minimal length (BIP62 rule 4).\n-    // (softfork safe)\n     SCRIPT_VERIFY_MINIMALDATA = (1U << 6),\n \n     // Discourage use of NOPs reserved for upgrades (NOP1-10)\n@@ -68,12 +71,14 @@ enum\n     // discouraged NOPs fails the script. This verification flag will never be\n     // a mandatory flag applied to scripts in a block. NOPs that are not\n     // executed, e.g.  within an unexecuted IF ENDIF block, are *not* rejected.\n+    // NOPs that have associated forks to give them new meaning (CLTV, CSV)\n+    // are not subject to this rule.\n     SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7),\n \n     // Require that only a single stack element remains after evaluation. This changes the success criterion from\n     // \"At least one stack element must remain, and when interpreted as a boolean, it must be true\" to\n     // \"Exactly one stack element must remain, and when interpreted as a boolean, it must be true\".\n-    // (softfork safe, BIP62 rule 6)\n+    // (BIP62 rule 6)\n     // Note: CLEANSTACK should never be used without P2SH or WITNESS.\n     SCRIPT_VERIFY_CLEANSTACK = (1U << 8),\n "
      },
      {
        "sha": "50aaa223f8c0d1a2751d4504076023f1c81f7c54",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2851b77312b55c8868acd4cd2c118e5a034606b7/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2851b77312b55c8868acd4cd2c118e5a034606b7/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=2851b77312b55c8868acd4cd2c118e5a034606b7",
        "patch": "@@ -862,8 +862,6 @@\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"CHECKLOCKTIMEVERIFY\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"CHECKSEQUENCEVERIFY\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP5\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP6\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],"
      }
    ]
  },
  {
    "sha": "2dd6f80680b8cbf9d4c99c6b2a8310af541e9aa3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGQ2ZjgwNjgwYjhjYmY5ZDRjOTljNmIyYTgzMTBhZjU0MWU5YWEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-28T23:29:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T23:14:13Z"
      },
      "message": "Add a test that all flags are softforks",
      "tree": {
        "sha": "f792de4a412e5cb650cd6978363054723df14839",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f792de4a412e5cb650cd6978363054723df14839"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2dd6f80680b8cbf9d4c99c6b2a8310af541e9aa3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dd6f80680b8cbf9d4c99c6b2a8310af541e9aa3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2dd6f80680b8cbf9d4c99c6b2a8310af541e9aa3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dd6f80680b8cbf9d4c99c6b2a8310af541e9aa3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2851b77312b55c8868acd4cd2c118e5a034606b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2851b77312b55c8868acd4cd2c118e5a034606b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2851b77312b55c8868acd4cd2c118e5a034606b7"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f1a3d2d031e5092f8677eb6cee471d6f8fe328dd",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dd6f80680b8cbf9d4c99c6b2a8310af541e9aa3/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dd6f80680b8cbf9d4c99c6b2a8310af541e9aa3/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=2dd6f80680b8cbf9d4c99c6b2a8310af541e9aa3",
        "patch": "@@ -167,6 +167,17 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n+\n+    // Verify that removing flags from a passing test or adding flags to a failing test does not change the result.\n+    for (int i = 0; i < 16; ++i) {\n+        int extra_flags = InsecureRandBits(16);\n+        int combined_flags = expect ? (flags & ~extra_flags) : (flags | extra_flags);\n+        // Weed out some invalid flag combinations.\n+        if (combined_flags & SCRIPT_VERIFY_CLEANSTACK && ~combined_flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) continue;\n+        if (combined_flags & SCRIPT_VERIFY_WITNESS && ~combined_flags & SCRIPT_VERIFY_P2SH) continue;\n+        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, combined_flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message + strprintf(\" (with flags %x)\", combined_flags));\n+    }\n+\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;"
      }
    ]
  },
  {
    "sha": "01013f5d2fbe3fa86565c927bf7bb8ec0f525073",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTAxM2Y1ZDJmYmUzZmE4NjU2NWM5MjdiZjdiYjhlYzBmNTI1MDcz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T23:18:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T23:18:57Z"
      },
      "message": "Simplify tx validation tests",
      "tree": {
        "sha": "f26163d9da95517ebce7ee3df03c4acecf3314c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f26163d9da95517ebce7ee3df03c4acecf3314c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01013f5d2fbe3fa86565c927bf7bb8ec0f525073",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01013f5d2fbe3fa86565c927bf7bb8ec0f525073",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01013f5d2fbe3fa86565c927bf7bb8ec0f525073",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01013f5d2fbe3fa86565c927bf7bb8ec0f525073/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2dd6f80680b8cbf9d4c99c6b2a8310af541e9aa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dd6f80680b8cbf9d4c99c6b2a8310af541e9aa3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2dd6f80680b8cbf9d4c99c6b2a8310af541e9aa3"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 8,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e6d014af2c3c7df1643b77d9861f7cb33e195ffc",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 14,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01013f5d2fbe3fa86565c927bf7bb8ec0f525073/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01013f5d2fbe3fa86565c927bf7bb8ec0f525073/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=01013f5d2fbe3fa86565c927bf7bb8ec0f525073",
        "patch": "@@ -101,7 +101,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n // should fail.\n // Capture this interaction with the upgraded_nop argument: set it when evaluating\n // any script flag that is implemented as an upgraded NOP code.\n-void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_flags, bool add_to_cache, bool upgraded_nop)\n+void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_flags, bool add_to_cache)\n {\n     PrecomputedTransactionData txdata(tx);\n     // If we add many more flags, this loop can get too expensive, but we can\n@@ -122,12 +122,6 @@ void ValidateCheckInputsForAllFlags(CMutableTransaction &tx, uint32_t failing_fl\n         // CheckInputs should succeed iff test_flags doesn't intersect with\n         // failing_flags\n         bool expected_return_value = !(test_flags & failing_flags);\n-        if (expected_return_value && upgraded_nop) {\n-            // If the script flag being tested corresponds to an upgraded NOP,\n-            // then script execution should fail if DISCOURAGE_UPGRADABLE_NOPS\n-            // is set.\n-            expected_return_value = !(test_flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS);\n-        }\n         BOOST_CHECK_EQUAL(ret, expected_return_value);\n \n         // Test the caching\n@@ -213,7 +207,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // not present.  Don't add these checks to the cache, so that we can\n         // test later that block validation works fine in the absence of cached\n         // successes.\n-        ValidateCheckInputsForAllFlags(spend_tx, SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false, false);\n+        ValidateCheckInputsForAllFlags(spend_tx, SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false);\n \n         // And if we produce a block with this tx, it should be valid (DERSIG not\n         // enabled yet), even though there's no cache entry.\n@@ -238,7 +232,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         std::vector<unsigned char> vchSig2(p2pk_scriptPubKey.begin(), p2pk_scriptPubKey.end());\n         invalid_under_p2sh_tx.vin[0].scriptSig << vchSig2;\n \n-        ValidateCheckInputsForAllFlags(invalid_under_p2sh_tx, SCRIPT_VERIFY_P2SH, true, false);\n+        ValidateCheckInputsForAllFlags(invalid_under_p2sh_tx, SCRIPT_VERIFY_P2SH, true);\n     }\n \n     // Test CHECKLOCKTIMEVERIFY\n@@ -261,7 +255,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(invalid_with_cltv_tx, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true);\n+        ValidateCheckInputsForAllFlags(invalid_with_cltv_tx, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true);\n \n         // Make it valid, and check again\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n@@ -289,7 +283,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(invalid_with_csv_tx, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true);\n+        ValidateCheckInputsForAllFlags(invalid_with_csv_tx, SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true);\n \n         // Make it valid, and check again\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n@@ -318,11 +312,11 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         UpdateTransaction(valid_with_witness_tx, 0, sigdata);\n \n         // This should be valid under all script flags.\n-        ValidateCheckInputsForAllFlags(valid_with_witness_tx, 0, true, false);\n+        ValidateCheckInputsForAllFlags(valid_with_witness_tx, 0, true);\n \n         // Remove the witness, and check that it is now invalid.\n         valid_with_witness_tx.vin[0].scriptWitness.SetNull();\n-        ValidateCheckInputsForAllFlags(valid_with_witness_tx, SCRIPT_VERIFY_WITNESS, true, false);\n+        ValidateCheckInputsForAllFlags(valid_with_witness_tx, SCRIPT_VERIFY_WITNESS, true);\n     }\n \n     {\n@@ -347,7 +341,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         }\n \n         // This should be valid under all script flags\n-        ValidateCheckInputsForAllFlags(tx, 0, true, false);\n+        ValidateCheckInputsForAllFlags(tx, 0, true);\n \n         // Check that if the second input is invalid, but the first input is\n         // valid, the transaction is not cached."
      }
    ]
  }
]