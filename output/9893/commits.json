[
  {
    "sha": "0011534a9a25db20c8f830a18ef3f8b336906e7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDExNTM0YTlhMjVkYjIwYzhmODMwYTE4ZWYzZjhiMzM2OTA2ZTdl",
    "commit": {
      "author": {
        "name": "CryptoManiac",
        "email": "balthazar@yandex.ru",
        "date": "2017-02-28T23:49:29Z"
      },
      "committer": {
        "name": "CryptoManiac",
        "email": "balthazar@yandex.ru",
        "date": "2017-02-28T23:49:29Z"
      },
      "message": "Implement Gzip compression to save bandwidth",
      "tree": {
        "sha": "515f27d1c5d55a73c023aa16f75d64220cb381ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/515f27d1c5d55a73c023aa16f75d64220cb381ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0011534a9a25db20c8f830a18ef3f8b336906e7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0011534a9a25db20c8f830a18ef3f8b336906e7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0011534a9a25db20c8f830a18ef3f8b336906e7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0011534a9a25db20c8f830a18ef3f8b336906e7e/comments",
    "author": {
      "login": "CryptoManiac",
      "id": 1429531,
      "node_id": "MDQ6VXNlcjE0Mjk1MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1429531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CryptoManiac",
      "html_url": "https://github.com/CryptoManiac",
      "followers_url": "https://api.github.com/users/CryptoManiac/followers",
      "following_url": "https://api.github.com/users/CryptoManiac/following{/other_user}",
      "gists_url": "https://api.github.com/users/CryptoManiac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CryptoManiac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CryptoManiac/subscriptions",
      "organizations_url": "https://api.github.com/users/CryptoManiac/orgs",
      "repos_url": "https://api.github.com/users/CryptoManiac/repos",
      "events_url": "https://api.github.com/users/CryptoManiac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CryptoManiac/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CryptoManiac",
      "id": 1429531,
      "node_id": "MDQ6VXNlcjE0Mjk1MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1429531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CryptoManiac",
      "html_url": "https://github.com/CryptoManiac",
      "followers_url": "https://api.github.com/users/CryptoManiac/followers",
      "following_url": "https://api.github.com/users/CryptoManiac/following{/other_user}",
      "gists_url": "https://api.github.com/users/CryptoManiac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CryptoManiac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CryptoManiac/subscriptions",
      "organizations_url": "https://api.github.com/users/CryptoManiac/orgs",
      "repos_url": "https://api.github.com/users/CryptoManiac/repos",
      "events_url": "https://api.github.com/users/CryptoManiac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CryptoManiac/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11049f4fe62606d1b0380a9ef800ac130f0fbadf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11049f4fe62606d1b0380a9ef800ac130f0fbadf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11049f4fe62606d1b0380a9ef800ac130f0fbadf"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 192,
      "deletions": 8
    },
    "files": [
      {
        "sha": "70ce3997dd8cdc48da49d0ecaf0e2f23834be61a",
        "filename": "build-aux/m4/ax_boost_iostreams.m4",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0011534a9a25db20c8f830a18ef3f8b336906e7e/build-aux/m4/ax_boost_iostreams.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0011534a9a25db20c8f830a18ef3f8b336906e7e/build-aux/m4/ax_boost_iostreams.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_iostreams.m4?ref=0011534a9a25db20c8f830a18ef3f8b336906e7e",
        "patch": "@@ -0,0 +1,116 @@\n+# ===========================================================================\n+#    https://www.gnu.org/software/autoconf-archive/ax_boost_iostreams.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_IOSTREAMS\n+#\n+# DESCRIPTION\n+#\n+#   Test for IOStreams library from the Boost C++ libraries. The macro\n+#   requires a preceding call to AX_BOOST_BASE. Further documentation is\n+#   available at <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_IOSTREAMS_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_IOSTREAMS\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Thomas Porschberg <thomas@randspringer.de>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 21\n+\n+AC_DEFUN([AX_BOOST_IOSTREAMS],\n+[\n+    AC_ARG_WITH([boost-iostreams],\n+    AS_HELP_STRING([--with-boost-iostreams@<:@=special-lib@:>@],\n+                   [use the IOStreams library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-iostreams=boost_iostreams-gcc-mt-d-1_33_1 ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t    want_boost=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost=\"yes\"\n+            ax_boost_user_iostreams_lib=\"\"\n+        else\n+\t    want_boost=\"yes\"\n+\tax_boost_user_iostreams_lib=\"$withval\"\n+\tfi\n+        ],\n+        [want_boost=\"yes\"]\n+    )\n+\n+    if test \"x$want_boost\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\texport CPPFLAGS\n+\n+\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\texport LDFLAGS\n+\n+        AC_CACHE_CHECK(whether the Boost::IOStreams library is available,\n+\t\t       ax_cv_boost_iostreams,\n+        [AC_LANG_PUSH([C++])\n+\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/iostreams/filtering_stream.hpp>\n+\t\t\t\t\t     @%:@include <boost/range/iterator_range.hpp>\n+\t\t\t\t\t    ]],\n+                                  [[std::string  input = \"Hello World!\";\n+\t\t\t\t namespace io = boost::iostreams;\n+\t\t\t\t     io::filtering_istream  in(boost::make_iterator_range(input));\n+\t\t\t\t     return 0;\n+                                   ]])],\n+                             ax_cv_boost_iostreams=yes, ax_cv_boost_iostreams=no)\n+         AC_LANG_POP([C++])\n+\t])\n+\tif test \"x$ax_cv_boost_iostreams\" = \"xyes\"; then\n+\t    AC_DEFINE(HAVE_BOOST_IOSTREAMS,,[define if the Boost::IOStreams library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+            if test \"x$ax_boost_user_iostreams_lib\" = \"x\"; then\n+                for libextension in `ls $BOOSTLIBDIR/libboost_iostreams*.so* $BOOSTLIBDIR/libboost_iostream*.dylib* $BOOSTLIBDIR/libboost_iostreams*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_iostreams.*\\)\\.so.*$;\\1;' -e 's;^lib\\(boost_iostream.*\\)\\.dylib.*$;\\1;' -e 's;^lib\\(boost_iostreams.*\\)\\.a.*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_IOSTREAMS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_IOSTREAMS_LIB) link_iostreams=\"yes\"; break],\n+                                 [link_iostreams=\"no\"])\n+\t\tdone\n+                if test \"x$link_iostreams\" != \"xyes\"; then\n+                for libextension in `ls $BOOSTLIBDIR/boost_iostreams*.dll* $BOOSTLIBDIR/boost_iostreams*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_iostreams.*\\)\\.dll.*$;\\1;' -e 's;^\\(boost_iostreams.*\\)\\.a.*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_IOSTREAMS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_IOSTREAMS_LIB) link_iostreams=\"yes\"; break],\n+                                 [link_iostreams=\"no\"])\n+\t\tdone\n+                fi\n+\n+            else\n+               for ax_lib in $ax_boost_user_iostreams_lib boost_iostreams-$ax_boost_user_iostreams_lib; do\n+\t\t      AC_CHECK_LIB($ax_lib, main,\n+                                   [BOOST_IOSTREAMS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_IOSTREAMS_LIB) link_iostreams=\"yes\"; break],\n+                                   [link_iostreams=\"no\"])\n+                  done\n+\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the library!)\n+            fi\n+\t    if test \"x$link_iostreams\" != \"xyes\"; then\n+\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n+\t    fi\n+\tfi\n+\n+\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+    LDFLAGS=\"$LDFLAGS_SAVED\"\n+    fi\n+])"
      },
      {
        "sha": "e844b0a412fcbb8a95fc3157654023f569da7d83",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0011534a9a25db20c8f830a18ef3f8b336906e7e/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0011534a9a25db20c8f830a18ef3f8b336906e7e/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=0011534a9a25db20c8f830a18ef3f8b336906e7e",
        "patch": "@@ -624,7 +624,7 @@ AX_BOOST_FILESYSTEM\n AX_BOOST_PROGRAM_OPTIONS\n AX_BOOST_THREAD\n AX_BOOST_CHRONO\n-\n+AX_BOOST_IOSTREAMS\n \n if test x$use_reduce_exports = xyes; then\n   AC_MSG_CHECKING([for working boost reduced exports])\n@@ -686,7 +686,7 @@ fi\n \n if test x$use_boost = xyes; then\n \n-BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB $BOOST_CHRONO_LIB\"\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB $BOOST_CHRONO_LIB $BOOST_IOSTREAMS_LIB\"\n \n \n dnl If boost (prior to 1.57) was built without c++11, it emulated scoped enums"
      },
      {
        "sha": "b9d7965ea51a3f3af6545dd16613025f89240394",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 2,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0011534a9a25db20c8f830a18ef3f8b336906e7e/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0011534a9a25db20c8f830a18ef3f8b336906e7e/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=0011534a9a25db20c8f830a18ef3f8b336906e7e",
        "patch": "@@ -21,6 +21,10 @@\n #include <event2/keyvalq_struct.h>\n #include \"support/events.h\"\n \n+#include <boost/iostreams/filtering_streambuf.hpp>\n+#include <boost/iostreams/copy.hpp>\n+#include <boost/iostreams/filter/gzip.hpp>\n+\n #include <univalue.h>\n \n static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n@@ -168,13 +172,42 @@ static void http_request_done(struct evhttp_request *req, void *ctx)\n \n     reply->status = evhttp_request_get_response_code(req);\n \n+    bool fGzip = false;\n+    {\n+        // Search for \"Content-Encoding: gzip\"\n+        struct evkeyvalq *req_reply_headers = evhttp_request_get_input_headers(req);\n+        struct evkeyval* kv = req_reply_headers->tqh_first;\n+        while (kv)\n+        {\n+            if ( fGzip = (!strcasecmp(kv->key, \"Content-Encoding\") && !strcasecmp(kv->value, \"gzip\")) ) break;\n+            kv = kv->next.tqe_next;\n+        }\n+    }\n+\n     struct evbuffer *buf = evhttp_request_get_input_buffer(req);\n     if (buf)\n     {\n         size_t size = evbuffer_get_length(buf);\n         const char *data = (const char*)evbuffer_pullup(buf, size);\n-        if (data)\n-            reply->body = std::string(data, size);\n+        if (data) {\n+            std::string strResponse = std::string(data, size);\n+\n+            if (fGzip)\n+            {\n+                // We've got a GZIP compressed response and need to uncompress it first\n+                std::stringstream compressedStream(strResponse);\n+                std::stringstream uncompressedStream;\n+\n+                boost::iostreams::filtering_streambuf<boost::iostreams::input> out;\n+                out.push(boost::iostreams::gzip_decompressor());\n+                out.push(compressedStream);\n+                boost::iostreams::copy(out, uncompressedStream);\n+\n+                strResponse = uncompressedStream.str();\n+            }\n+\n+            reply->body = strResponse;\n+        }\n         evbuffer_drain(buf, size);\n     }\n }\n@@ -226,6 +259,7 @@ UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n     evhttp_add_header(output_headers, \"Host\", host.c_str());\n     evhttp_add_header(output_headers, \"Connection\", \"close\");\n     evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n+    evhttp_add_header(output_headers, \"Accept-Encoding\", \"gzip\");\n \n     // Attach request data\n     std::string strRequest = JSONRPCRequestObj(strMethod, params, 1).write() + \"\\n\";"
      },
      {
        "sha": "0b2174c02f7c7dfd09d408cb256a061807cb5253",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0011534a9a25db20c8f830a18ef3f8b336906e7e/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0011534a9a25db20c8f830a18ef3f8b336906e7e/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=0011534a9a25db20c8f830a18ef3f8b336906e7e",
        "patch": "@@ -162,6 +162,13 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n+    bool fGzip = GetBoolArg(\"-rpcgzip\", false);\n+    if (fGzip) {\n+        // Don't use gzip compression if client isn't providing appropriate Accept-Encoding header.\n+        std::pair<bool, std::string> encHeader = req->GetHeader(\"Accept-Encoding\");\n+        fGzip = (encHeader.first && encHeader.second == \"gzip\");\n+    }\n+\n     JSONRPCRequest jreq;\n     if (!RPCAuthorized(authHeader.second, jreq.authUser)) {\n         LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", req->GetPeer().ToString());\n@@ -202,7 +209,9 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n \n         req->WriteHeader(\"Content-Type\", \"application/json\");\n-        req->WriteReply(HTTP_OK, strReply);\n+        if (fGzip)\n+            req->WriteHeader(\"Content-Encoding\", \"gzip\");\n+        req->WriteReply(HTTP_OK, strReply, fGzip);\n     } catch (const UniValue& objError) {\n         JSONErrorReply(req, objError, jreq.id);\n         return false;"
      },
      {
        "sha": "ce8a6bf0669d2d2d0e8fd7cedf390aafff984d4b",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0011534a9a25db20c8f830a18ef3f8b336906e7e/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0011534a9a25db20c8f830a18ef3f8b336906e7e/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=0011534a9a25db20c8f830a18ef3f8b336906e7e",
        "patch": "@@ -35,6 +35,9 @@\n #endif\n #endif\n \n+#include <boost/iostreams/filtering_stream.hpp>\n+#include <boost/iostreams/filter/gzip.hpp>\n+\n /** Maximum size of http request (request line + headers) */\n static const size_t MAX_HEADERS_SIZE = 8192;\n \n@@ -596,13 +599,34 @@ void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n  * Replies must be sent in the main loop in the main http thread,\n  * this cannot be done from worker threads.\n  */\n-void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n+void HTTPRequest::WriteReply(int nStatus, const std::string& strReply, bool fGzip)\n {\n     assert(!replySent && req);\n     // Send event to main http thread to send reply message\n     struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n     assert(evb);\n-    evbuffer_add(evb, strReply.data(), strReply.size());\n+\n+    if (fGzip)\n+    {\n+        // Compress reply\n+        std::string strGzippedReply;\n+        {\n+            boost::iostreams::filtering_ostream compressingStream;\n+            compressingStream.push(boost::iostreams::gzip_compressor(boost::iostreams::gzip_params(boost::iostreams::gzip::best_compression)));\n+            compressingStream.push(boost::iostreams::back_inserter(strGzippedReply));\n+            compressingStream << strReply;\n+            boost::iostreams::close(compressingStream);\n+        }\n+\n+        // Send compressed reply\n+        evbuffer_add(evb, strGzippedReply.data(), strGzippedReply.size());\n+    }\n+    else\n+    {\n+        // Send raw reply\n+        evbuffer_add(evb, strReply.data(), strReply.size());\n+    }\n+\n     HTTPEvent* ev = new HTTPEvent(eventBase, true,\n         std::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer *)NULL));\n     ev->trigger(0);"
      },
      {
        "sha": "59db91393aaf7a7530ed8562be2eb14c1f40db7b",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0011534a9a25db20c8f830a18ef3f8b336906e7e/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0011534a9a25db20c8f830a18ef3f8b336906e7e/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=0011534a9a25db20c8f830a18ef3f8b336906e7e",
        "patch": "@@ -109,7 +109,7 @@ class HTTPRequest\n      * @note Can be called only once. As this will give the request back to the\n      * main thread, do not call any other HTTPRequest methods after calling this.\n      */\n-    void WriteReply(int nStatus, const std::string& strReply = \"\");\n+    void WriteReply(int nStatus, const std::string& strReply = \"\", bool fGzip = false);\n };\n \n /** Event handler closure."
      },
      {
        "sha": "e371fb294e936dfd7de740aee0cb05e6ff0a4522",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0011534a9a25db20c8f830a18ef3f8b336906e7e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0011534a9a25db20c8f830a18ef3f8b336906e7e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0011534a9a25db20c8f830a18ef3f8b336906e7e",
        "patch": "@@ -492,6 +492,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n+    strUsage += HelpMessageOpt(\"-rpcgzip\", _(\"Apply JSON-RPC response compression (default: 0)\"));\n     if (showDebug) {\n         strUsage += HelpMessageOpt(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE));\n         strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));"
      }
    ]
  },
  {
    "sha": "11ce86c4ac56f876c3f18997330df4a6a189702a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWNlODZjNGFjNTZmODc2YzNmMTg5OTczMzBkZjRhNmExODk3MDJh",
    "commit": {
      "author": {
        "name": "CryptoManiac",
        "email": "balthazar@yandex.ru",
        "date": "2017-03-01T00:32:04Z"
      },
      "committer": {
        "name": "CryptoManiac",
        "email": "balthazar@yandex.ru",
        "date": "2017-03-01T00:32:04Z"
      },
      "message": "Use boost::iequals for better compatibility.",
      "tree": {
        "sha": "7637bc022dc54ebec4fcc1b1de8e01ec9c6fbd6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7637bc022dc54ebec4fcc1b1de8e01ec9c6fbd6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11ce86c4ac56f876c3f18997330df4a6a189702a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ce86c4ac56f876c3f18997330df4a6a189702a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11ce86c4ac56f876c3f18997330df4a6a189702a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ce86c4ac56f876c3f18997330df4a6a189702a/comments",
    "author": {
      "login": "CryptoManiac",
      "id": 1429531,
      "node_id": "MDQ6VXNlcjE0Mjk1MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1429531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CryptoManiac",
      "html_url": "https://github.com/CryptoManiac",
      "followers_url": "https://api.github.com/users/CryptoManiac/followers",
      "following_url": "https://api.github.com/users/CryptoManiac/following{/other_user}",
      "gists_url": "https://api.github.com/users/CryptoManiac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CryptoManiac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CryptoManiac/subscriptions",
      "organizations_url": "https://api.github.com/users/CryptoManiac/orgs",
      "repos_url": "https://api.github.com/users/CryptoManiac/repos",
      "events_url": "https://api.github.com/users/CryptoManiac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CryptoManiac/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CryptoManiac",
      "id": 1429531,
      "node_id": "MDQ6VXNlcjE0Mjk1MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1429531?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CryptoManiac",
      "html_url": "https://github.com/CryptoManiac",
      "followers_url": "https://api.github.com/users/CryptoManiac/followers",
      "following_url": "https://api.github.com/users/CryptoManiac/following{/other_user}",
      "gists_url": "https://api.github.com/users/CryptoManiac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CryptoManiac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CryptoManiac/subscriptions",
      "organizations_url": "https://api.github.com/users/CryptoManiac/orgs",
      "repos_url": "https://api.github.com/users/CryptoManiac/repos",
      "events_url": "https://api.github.com/users/CryptoManiac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CryptoManiac/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0011534a9a25db20c8f830a18ef3f8b336906e7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0011534a9a25db20c8f830a18ef3f8b336906e7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0011534a9a25db20c8f830a18ef3f8b336906e7e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "25783aec222d1c91b0e71abec038d40b164aa875",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ce86c4ac56f876c3f18997330df4a6a189702a/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ce86c4ac56f876c3f18997330df4a6a189702a/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=11ce86c4ac56f876c3f18997330df4a6a189702a",
        "patch": "@@ -24,6 +24,7 @@\n #include <boost/iostreams/filtering_streambuf.hpp>\n #include <boost/iostreams/copy.hpp>\n #include <boost/iostreams/filter/gzip.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n \n #include <univalue.h>\n \n@@ -179,7 +180,7 @@ static void http_request_done(struct evhttp_request *req, void *ctx)\n         struct evkeyval* kv = req_reply_headers->tqh_first;\n         while (kv)\n         {\n-            if ( fGzip = (!strcasecmp(kv->key, \"Content-Encoding\") && !strcasecmp(kv->value, \"gzip\")) ) break;\n+            if ( fGzip = (boost::iequals(kv->key, \"Content-Encoding\") && boost::iequals(kv->value, \"gzip\")) ) break;\n             kv = kv->next.tqe_next;\n         }\n     }"
      }
    ]
  }
]