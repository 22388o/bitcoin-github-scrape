[
  {
    "sha": "2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
    "node_id": "C_kwDOABII59oAKDJmOWQ2YWEwM2ZlMTk1ZThiN2YxZTdmOTNmOTNlNGFjYjQ2NjQ5ODQ",
    "commit": {
      "author": {
        "name": "Douglas Chimento",
        "email": "dchimento@gmail.com",
        "date": "2021-10-22T11:46:16Z"
      },
      "committer": {
        "name": "Douglas Chimento",
        "email": "dchimento@gmail.com",
        "date": "2021-10-22T11:46:16Z"
      },
      "message": "tests: Add assert_less_than and assert_less_than_or_equal to test framework",
      "tree": {
        "sha": "39958d2b2ea000f108ca269298c3a36a9307389b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39958d2b2ea000f108ca269298c3a36a9307389b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEFt7wA8cqIHRePmNa0a1maOubxakFAmFypPUACgkQ0a1maOub\nxanmLAv+P6cH6yw6MzMhUhlc3jLNOhZAc0Qd+Nq0Cy366QBVmOGyyfYpABtbgb+9\nCdcTX1JV6vRpi3oVyleacV0SRr+Lw3oHx6Ot2SBjj4zuEJhrSqTqziaa+tZxdqAK\nX43olhOdNoIdPikAkaX23qs6efEebEf14f0lnEprJzf4aYriaHz1as1CQ+RKAgCt\n3dwNT+PWZNC2y/AY2BeUSpYUqh5tGpiFxp2+KYP2IgtISalROcF/ixEVVD8uDHNy\nqk8hFyUohWGtqqFznUnLbc5x1aRegtsCu69FJA9H7k/ASZN7J5Gcig33prL3etdX\nDmuzo2bgvK3ZWYr5eohv1R2mqQVwiXl93uZT5VBeSbCxrZpcfbihyldY0HmKF+yC\n46jxyA+ATE+/56w+tV+5aPs/+aVe+Xzw5f7NCj81D2V0Dvpap4ZzcH5nZyYKCJP6\nRqW/ezZjxDZlSBZ8tHRDfxgotXwxCZf26YeuD1pLpCZTEIKI2wC86Sw0fJRXRd1b\n9Iy1MI9f\n=nxEd\n-----END PGP SIGNATURE-----",
        "payload": "tree 39958d2b2ea000f108ca269298c3a36a9307389b\nparent 02feae54a53ff654f7cecf17ed467edcd612cd0c\nauthor Douglas Chimento <dchimento@gmail.com> 1634903176 +0300\ncommitter Douglas Chimento <dchimento@gmail.com> 1634903176 +0300\n\ntests: Add assert_less_than and assert_less_than_or_equal to test framework\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/comments",
    "author": {
      "login": "dougEfresh",
      "id": 976425,
      "node_id": "MDQ6VXNlcjk3NjQyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/976425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougEfresh",
      "html_url": "https://github.com/dougEfresh",
      "followers_url": "https://api.github.com/users/dougEfresh/followers",
      "following_url": "https://api.github.com/users/dougEfresh/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougEfresh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougEfresh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougEfresh/subscriptions",
      "organizations_url": "https://api.github.com/users/dougEfresh/orgs",
      "repos_url": "https://api.github.com/users/dougEfresh/repos",
      "events_url": "https://api.github.com/users/dougEfresh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougEfresh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dougEfresh",
      "id": 976425,
      "node_id": "MDQ6VXNlcjk3NjQyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/976425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougEfresh",
      "html_url": "https://github.com/dougEfresh",
      "followers_url": "https://api.github.com/users/dougEfresh/followers",
      "following_url": "https://api.github.com/users/dougEfresh/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougEfresh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougEfresh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougEfresh/subscriptions",
      "organizations_url": "https://api.github.com/users/dougEfresh/orgs",
      "repos_url": "https://api.github.com/users/dougEfresh/repos",
      "events_url": "https://api.github.com/users/dougEfresh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougEfresh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02feae54a53ff654f7cecf17ed467edcd612cd0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02feae54a53ff654f7cecf17ed467edcd612cd0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02feae54a53ff654f7cecf17ed467edcd612cd0c"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 43,
      "deletions": 21
    },
    "files": [
      {
        "sha": "eccde64238bc07773adb16ec762f05f059309807",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
        "patch": "@@ -50,7 +50,7 @@\n     script_to_p2sh_script,\n )\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, assert_less_than, assert_less_than_or_equal\n from data import invalid_txs\n \n #  Use this class for tests that require behavior other than normal p2p behavior.\n@@ -525,7 +525,7 @@ def run_test(self):\n         b40 = self.next_block(40, spend=out[12])\n         sigops = get_legacy_sigopcount_block(b40)\n         numTxes = (MAX_BLOCK_SIGOPS - sigops) // b39_sigops_per_output\n-        assert_equal(numTxes <= b39_outputs, True)\n+        assert_less_than_or_equal(numTxes, b39_outputs)\n \n         lastOutpoint = COutPoint(b40.vtx[1].sha256, 0)\n         new_txs = []\n@@ -801,7 +801,7 @@ def run_test(self):\n         self.move_tip(57)\n         b58 = self.next_block(58, spend=out[17])\n         tx = CTransaction()\n-        assert len(out[17].vout) < 42\n+        assert_less_than(len(out[17].vout), 42)\n         tx.vin.append(CTxIn(COutPoint(out[17].sha256, 42), CScript([OP_TRUE]), 0xffffffff))\n         tx.vout.append(CTxOut(0, b\"\"))\n         tx.calc_sha256()\n@@ -877,7 +877,7 @@ def run_test(self):\n         tx.nLockTime = 0xffffffff  # this locktime is non-final\n         tx.vin.append(CTxIn(COutPoint(out[18].sha256, 0)))  # don't set nSequence\n         tx.vout.append(CTxOut(0, CScript([OP_TRUE])))\n-        assert tx.vin[0].nSequence < 0xffffffff\n+        assert_less_than(tx.vin[0].nSequence, 0xffffffff)\n         tx.calc_sha256()\n         b62 = self.update_block(62, [tx])\n         self.send_blocks([b62], success=False, reject_reason='bad-txns-nonfinal', reconnect=True)"
      },
      {
        "sha": "e92c0ca64206055e36390565a9a49587321e7e7e",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
        "patch": "@@ -9,6 +9,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework import util\n+from test_framework.util import assert_less_than\n \n \n class ConfArgsTest(BitcoinTestFramework):\n@@ -189,7 +190,7 @@ def test_seed_peers(self):\n                 \"Adding fixed seeds as -dnsseed=0, -addnode is not provided and all -seednode(s) attempted\\n\",\n         ]):\n             self.start_node(0, extra_args=['-dnsseed=0', '-fixedseeds=1'])\n-        assert time.time() - start < 60\n+        assert_less_than(time.time() - start, 60)\n         self.stop_node(0)\n \n         # No peers.dat exists and dns seeds are disabled.\n@@ -202,7 +203,7 @@ def test_seed_peers(self):\n                 \"Fixed seeds are disabled\",\n         ]):\n             self.start_node(0, extra_args=['-dnsseed=0', '-fixedseeds=0'])\n-        assert time.time() - start < 60\n+        assert_less_than(time.time() - start, 60)\n         self.stop_node(0)\n \n         # No peers.dat exists and -dnsseed=0, but a -addnode is provided"
      },
      {
        "sha": "9bdda6c1c910d22ac216f1e6275dafd7ce17940f",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
        "patch": "@@ -19,6 +19,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_less_than,\n     assert_raises_rpc_error,\n )\n from test_framework.script_util import (\n@@ -105,7 +106,7 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n                 new_size = len(node.getrawmempool())\n                 # Error out if we have something stuck in the mempool, as this\n                 # would likely be a bug.\n-                assert new_size < mempool_size\n+                assert_less_than(new_size, mempool_size)\n                 mempool_size = new_size\n \n         return COutPoint(int(txid, 16), n)\n@@ -205,7 +206,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.00001 * COIN, _t\n             tx.vout = vout\n             tx_hex = tx.serialize().hex()\n \n-            assert len(tx.serialize()) < 100000\n+            assert_less_than(len(tx.serialize()), 100000)\n             txid = self.nodes[0].sendrawtransaction(tx_hex, 0)\n             yield tx\n             _total_txs[0] += 1"
      },
      {
        "sha": "dfbf0d2cd1a300ee8b4e2f1a4690da317febed3e",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
        "patch": "@@ -6,7 +6,7 @@\n \n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, assert_less_than\n from test_framework.wallet import MiniWallet\n \n \n@@ -44,7 +44,7 @@ def run_test(self):\n         assert_equal(set(node.getrawmempool()), set())\n         confirmed_txns = set(node.getblock(blocks[0])['tx'] + node.getblock(blocks[1])['tx'])\n         # Checks that all spend txns are contained in the mined blocks\n-        assert spends_ids < confirmed_txns\n+        assert_less_than(spends_ids, confirmed_txns)\n \n         # Use invalidateblock to re-org back\n         node.invalidateblock(blocks[0])\n@@ -57,7 +57,7 @@ def run_test(self):\n         # mempool should be empty, all txns confirmed\n         assert_equal(set(node.getrawmempool()), set())\n         confirmed_txns = set(node.getblock(blocks[0])['tx'])\n-        assert spends_ids < confirmed_txns\n+        assert_less_than(spends_ids, confirmed_txns)\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "6b3829bc6b61bde289693b7831c519c8b7b272a8",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
        "patch": "@@ -81,6 +81,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_less_than,\n     softfork_active,\n     assert_raises_rpc_error,\n )\n@@ -838,7 +839,7 @@ def test_block_malleability(self):\n         assert self.nodes[0].getbestblockhash() != block.hash\n \n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n-        assert block.get_weight() < MAX_BLOCK_WEIGHT\n+        assert_less_than(block.get_weight(), MAX_BLOCK_WEIGHT)\n         assert_equal(None, self.nodes[0].submitblock(block.serialize().hex()))\n \n         assert self.nodes[0].getbestblockhash() == block.hash\n@@ -1876,7 +1877,7 @@ def test_witness_sigops(self):\n         extra_sigops_available = MAX_SIGOP_COST % sigops_per_script\n \n         # We chose the number of checkmultisigs/checksigs to make this work:\n-        assert extra_sigops_available < 100  # steer clear of MAX_OPS_PER_SCRIPT\n+        assert_less_than(extra_sigops_available, 100)  # steer clear of MAX_OPS_PER_SCRIPT\n \n         # This script, when spent with the first\n         # N(=MAX_SIGOP_COST//sigops_per_script) outputs of our transaction,"
      },
      {
        "sha": "308eb4477f91d1077c9f72a148cc81b6f868376f",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
        "patch": "@@ -42,6 +42,7 @@\n     assert_equal,\n     assert_greater_than,\n     assert_greater_than_or_equal,\n+    assert_less_than,\n     assert_raises,\n     assert_raises_rpc_error,\n     assert_is_hex_string,\n@@ -265,8 +266,8 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['bogosize'], 16800),\n         assert_equal(res['bestblock'], node.getblockhash(HEIGHT))\n         size = res['disk_size']\n-        assert size > 6400\n-        assert size < 64000\n+        assert_greater_than(size, 6400)\n+        assert_less_than(size, 64000)\n         assert_equal(len(res['bestblock']), 64)\n         assert_equal(len(res['hash_serialized_2']), 64)\n \n@@ -360,13 +361,13 @@ def _test_getdifficulty(self):\n         difficulty = self.nodes[0].getdifficulty()\n         # 1 hash in 2 should be valid, so difficulty should be 1/2**31\n         # binary => decimal => binary math is why we do this check\n-        assert abs(difficulty * 2**31 - 1) < 0.0001\n+        assert_less_than(abs(difficulty * 2**31 - 1), 0.0001)\n \n     def _test_getnetworkhashps(self):\n         self.log.info(\"Test getnetworkhashps\")\n         hashes_per_second = self.nodes[0].getnetworkhashps()\n         # This should be 2 hashes every 10 minutes or 1/300\n-        assert abs(hashes_per_second * 300 - 1) < 0.0001\n+        assert_less_than(abs(hashes_per_second * 300 - 1), 0.0001)\n \n     def _test_stopatheight(self):\n         self.log.info(\"Test stopping at height\")"
      },
      {
        "sha": "42cf73ddaf0ee2eca93d8657460439f78b229856",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
        "patch": "@@ -14,6 +14,8 @@\n from test_framework.key import ECPubKey, ECKey\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n+    assert_greater_than,\n+    assert_less_than,\n     assert_raises_rpc_error,\n     assert_equal,\n )\n@@ -124,7 +126,8 @@ def checkbalances(self):\n         bal2 = node2.getbalance()\n \n         height = node0.getblockchaininfo()[\"blocks\"]\n-        assert 150 < height < 350\n+        assert_greater_than(height, 150)\n+        assert_less_than(height, 350)\n         total = 149 * 50 + (height - 149 - 100) * 25\n         assert bal1 == 0\n         assert bal2 == self.moved"
      },
      {
        "sha": "8ad9b830aa02cdcc99e39c8c4bf5c2767b26ed4c",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
        "patch": "@@ -16,6 +16,7 @@\n     assert_fee_amount,\n     assert_greater_than,\n     assert_greater_than_or_equal,\n+    assert_less_than_or_equal,\n     assert_raises_rpc_error,\n     count_bytes,\n     find_vout_for_address,\n@@ -421,7 +422,8 @@ def test_fee_p2pkh(self):\n \n         # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n+        assert_greater_than_or_equal(feeDelta, 0)\n+        assert_less_than_or_equal(feeDelta, self.fee_tolerance)\n \n         self.unlock_utxos(self.nodes[0])\n "
      },
      {
        "sha": "fc7f9af0a8deb03362797f6a568ae31a27b8de2a",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
        "patch": "@@ -60,6 +60,16 @@ def assert_greater_than_or_equal(thing1, thing2):\n         raise AssertionError(\"%s < %s\" % (str(thing1), str(thing2)))\n \n \n+def assert_less_than(thing1, thing2):\n+    if thing1 >= thing2:\n+        raise AssertionError(\"%s >= %s\" % (str(thing1), str(thing2)))\n+\n+\n+def assert_less_than_or_equal(thing1, thing2):\n+    if thing1 > thing2:\n+        raise AssertionError(\"%s > %s\" % (str(thing1), str(thing2)))\n+\n+\n def assert_raises(exc, fun, *args, **kwds):\n     assert_raises_message(exc, None, fun, *args, **kwds)\n \n@@ -308,7 +318,7 @@ def get_rpc_proxy(url: str, node_number: int, *, timeout: int=None, coveragedir:\n \n \n def p2p_port(n):\n-    assert n <= MAX_NODES\n+    assert_less_than_or_equal(n, MAX_NODES)\n     return PORT_MIN + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n "
      },
      {
        "sha": "c8a5d50debd636847559973efe7f895dd2177a30",
        "filename": "test/functional/wallet_create_tx.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/wallet_create_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984/test/functional/wallet_create_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_create_tx.py?ref=2f9d6aa03fe195e8b7f1e7f93f93e4acb4664984",
        "patch": "@@ -6,6 +6,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than,\n+    assert_less_than_or_equal,\n     assert_raises_rpc_error,\n )\n from test_framework.blocktools import (\n@@ -41,7 +43,8 @@ def test_anti_fee_sniping(self):\n         self.generate(self.nodes[0], 1)\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         tx = self.nodes[0].gettransaction(txid=txid, verbose=True)['decoded']\n-        assert 0 < tx['locktime'] <= 201\n+        assert_greater_than(tx['locktime'], 0)\n+        assert_less_than_or_equal(tx['locktime'], 201)\n \n     def test_tx_size_too_large(self):\n         # More than 10kB of outputs, so that we hit -maxtxfee with a high feerate"
      }
    ]
  }
]