hebasto,2019-09-30 13:17:40,"Concept ACK.\n\nFor ""psbt: Add explicit copy operator as default"" commit (108f285f76aa5ae803303c329474035c89921f93) there is another solution: 5b2bb0fd3af34463bb382b473cc8b6dee65c0920",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-536556263,536556263,
laanwj,2019-09-30 13:26:50,"> For ""psbt: Add explicit copy operator as default"" commit (108f285) there is another solution: 5b2bb0f\n\nIf all is the same, removing code is strictly better than adding it. If you're sure that is correct (that that's exactly what the compiler generates implicitly), I'll pull in that one.",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-536559955,536559955,
ryanofsky,2019-09-30 16:46:18,"> ""some compilers"" is kind of vague. It was added by @ryanofsky in [79d579f](https://github.com/bitcoin/bitcoin/commit/79d579f4e11b57f90fed314bccd25230f918729f) (#14437). Can you elaborate which compilers need this?\n\nCommented https://github.com/bitcoin/bitcoin/issues/16992#issuecomment-536634398\n",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-536648293,536648293,
hebasto,2019-09-30 18:29:50,"ACK 0515216a9ce55d4faa531c350128b2628391705e, tested on Fedora 30:\n\n```bash\n$ gcc --version | grep gcc\ngcc (GCC) 9.2.1 20190827 (Red Hat 9.2.1-1)\n$ git checkout master \n$ make clean && make 2>~/master\n$ git checkout pr16995\n$ make clean && make 2>~/pr16995\n$ diff ~/master ~/pr16995 \n6,23d5\n< In file included from /usr/include/string.h:494,\n<                  from ./serializ",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-536691057,536691057,
laanwj,2019-10-01 12:06:22,Pushed a fix for the third warning (inspired by https://cgit.freedesktop.org/libreoffice/core/commit/?id=dc06c8f4989fc28d0c31ebd333e53dfe0e0f5f66).,https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537005352,537005352,
MarcoFalke,2019-10-01 12:23:21,A lot of code to fix dumb compiler warnings. I might prefer the warning over the additional code.,https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537011232,537011232,
laanwj,2019-10-01 12:42:11,"You mean for the `std::move` one? I'm divided on that one too. I'm not sure how much of a pessimization the extra move is. OTOH if libreoffice deems this important enough to special-case in the build system (after extensive discussion on the LLVM mailing list), maybe it's somewhat important.\n\nBut I think the net message code is an improvement, warning or not. I remember @practicalswift has don",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537018065,537018065,
ryanofsky,2019-10-01 12:46:12,"I haven't tested this, but another workaround for the std::move warning might be:\n\n```diff\n--- a/src/interfaces/chain.cpp\n+++ b/src/interfaces/chain.cpp\n@@ -242,11 +242,9 @@ class ChainImpl : public Chain\n public:\n     std::unique_ptr<Chain::Lock> lock(bool try_lock) override\n     {\n-        auto result = MakeUnique<LockImpl>(::cs_main, ""cs_main"", __FILE__, __LINE__, try_lock);\",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537019593,537019593,
laanwj,2019-10-01 12:49:55,"> This avoids the conversion from LockImpl to Chain::Lock on the return line, moving it up to the result = line, so the return defect is no longer a factor.\n\nThat doesn't work, `!*result` is not implemented for `Chain::Lock`.",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537020931,537020931,
ryanofsky,2019-10-01 12:59:33,"> That doesn't work, `!*result` is not implemented for `Chain::Lock`.\n\nOh, I thought it at least compiled, but I missed the error in the build output. The workaround would have to look like:\n\n```diff\n--- a/src/interfaces/chain.cpp\n+++ b/src/interfaces/chain.cpp\n@@ -242,11 +242,10 @@ class ChainImpl : public Chain\n public:\n     std::unique_ptr<Chain::Lock> lock(bool try_lock) over",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537024599,537024599,
laanwj,2019-10-01 13:14:46,"> Oh, I thought it at least compiled, but I missed the error in the build output. The workaround would have to look like:\n\nThat does seem to avoid the warning.",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537030551,537030551,
practicalswift,2019-10-03 05:43:50,"@ryanofsky @laanwj FWIW, versions prior to Clang 3.9 and GCC 5.1 would try to produce copies. You might want to compile with `-Wreturn-std-move-in-c++11` (Clang) to verify that the fix is correct.\n\n_Edited for clarity._",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537796653,537796653,
laanwj,2019-10-03 08:49:25,"I don't think a Lock is even copyable (it shouldn't be at least)... and neither should a unique_ptr, by definition",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537851405,537851405,
practicalswift,2019-10-03 09:27:25,"Prior to the resolution of a defect report against ISO C++11, local variable `result` would have been copied despite being returned by name, due to its not matching the function return type (`unique_ptr<Chain::Lock, default_delete<interfaces::Chain::Lock>>` vs `unique_ptr<interfaces::(anonymous namespace)::LockImpl, default_delete<interfaces::(anonymous namespace)::LockImpl>>`).",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537865643,537865643,
laanwj,2019-10-03 09:33:23,"Ok, I'm getting lost in the C++ issues here closing this. Have to agree a warning is better than a bug.",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537867775,537867775,
ryanofsky,2019-10-03 13:26:30,"> Prior to the resolution of a defect report against ISO C++11, local variable `result` would have been copied despite being returned by name, due to its not matching the function return type \n\nThere's no case where result would have been copied because it's not possible to copy a unique_ptr. Prior to the defect report, returning without std::move would result in a compile error, not a buggy c",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537945040,537945040,
practicalswift,2019-10-03 13:32:45,"@ryanofsky The text is literally the warning emitted by Clang `-Wreturn-std-move-in-c++11` when compiling the code :)  Sorry, should have been more clear about that.\n\n```\ninterfaces/chain.cpp:248:16: warning: prior to the resolution of a defect report \n  against ISO C++11, local variable 'result' would have been copied despite being \n  returned by name, due to its not matching the functi",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537947435,537947435,
ryanofsky,2019-10-03 13:43:28,"The text is correct if you interpret ""would have been copied"" to mean ""would have been copied if copyable, otherwise result in an error."" It does NOT mean ""would have been copied even if not copyable"", which is how Wladimir interpreted your comment what led him to close the PR.",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537951461,537951461,
practicalswift,2019-10-03 13:44:11,@ryanofsky Entirely correct :)  My only point was that `-Wreturn-std-move-in-c++11` might be helpful. Sorry for the ambiguity and distraction.,https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537951750,537951750,
ryanofsky,2019-10-03 13:51:24,"All right, and in any case this can be tagged up for grabs. The current workaround in the PR which avoids warnings is safe, and so is the other workaround for warnings suggested https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537024599. There is no need for any concern that ""a warning is better than a bug"" if someone using GCC 9 wants to make use of this PR.",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-537954749,537954749,
laanwj,2020-02-06 12:22:25,Changing this to @ryanofsky's solution,https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-582881432,582881432,
practicalswift,2020-03-18 00:31:38,ACK ff9c671b11d40e5d0623eff3dd12e48cbaafb34e -- patch looks correct,https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-600365340,600365340,
DrahtBot,2020-03-18 03:39:12,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-600408485,600408485,
sipa,2020-03-19 02:23:27,"utACK ff9c671b11d40e5d0623eff3dd12e48cbaafb34e\n\nI've restarted the s390 travis job that failed due to out of disk space.",https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-600952942,600952942,
MarcoFalke,2020-03-19 12:52:59,re-run ci,https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-601160894,601160894,
MarcoFalke,2020-03-19 12:54:31,The s390x job was removed and I think the only way to tell this to travis is to force push or to close/open. See https://github.com/bitcoin/bitcoin/issues/15847#issuecomment-487591130,https://github.com/bitcoin/bitcoin/pull/16995#issuecomment-601161530,601161530,
ryanofsky,2020-02-06 18:31:30,"In commit ""net: Fail instead of truncate command name in CMessageHeader"" (b837b334db5dd6232725fd2350928ff4fbd3feee)\n\nI don't want to second guess your code style preferences, but I believe you could just add  parentheses around strncpy to silence the warning. IMO, following would be the simplest way of filling the buffer:\n\n```c++\n(strncpy(pchCommand, pszCommand, COMMAND_SIZE));\nassert(",https://github.com/bitcoin/bitcoin/pull/16995#discussion_r376008016,376008016,src/protocol.cpp
sipa,2020-03-19 02:21:25,"@ryanofsky The memset used to be necessary to zero-pad the copy, no?",https://github.com/bitcoin/bitcoin/pull/16995#discussion_r394754466,394754466,src/protocol.cpp
laanwj,2020-03-27 18:46:53,"I meanâ€”this is pretty trivial code to review, only a few bytes are copied, no high performance platform specific implementation is needed. This also adds an extra (although run-time) assertion that the passed-in string is not truncated (also, `pchCommand` is not 0-terminated if the length of the command is exactly `COMMAND_SIZE`).\nI don't think we need to rely on any C string functions here. But",https://github.com/bitcoin/bitcoin/pull/16995#discussion_r399471921,399471921,src/protocol.cpp
