[
  {
    "sha": "b837b334db5dd6232725fd2350928ff4fbd3feee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODM3YjMzNGRiNWRkNjIzMjcyNWZkMjM1MDkyOGZmNGZiZDNmZWVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-09-30T10:27:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-02-06T12:24:40Z"
      },
      "message": "net: Fail instead of truncate command name in CMessageHeader\n\nReplace the memset/strncpy dance in `CMessageHeader::CMessageHeader`\nwith explicit code that copies then name and asserts the length.\n\nThis removes a warning in g++ 9.1.1 and IMO makes the code more readable\nby not relying on strncpy padding and silent truncation behavior.",
      "tree": {
        "sha": "a20d984e931bae8b2a7272977056743b25b19d3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a20d984e931bae8b2a7272977056743b25b19d3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b837b334db5dd6232725fd2350928ff4fbd3feee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b837b334db5dd6232725fd2350928ff4fbd3feee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b837b334db5dd6232725fd2350928ff4fbd3feee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b837b334db5dd6232725fd2350928ff4fbd3feee/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a56f79d491271120abc3843c46e9dda44edd308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a56f79d491271120abc3843c46e9dda44edd308",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a56f79d491271120abc3843c46e9dda44edd308"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bd3ed25a8af7cc7428a6a1e66ee03dbe6c8d805d",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b837b334db5dd6232725fd2350928ff4fbd3feee/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b837b334db5dd6232725fd2350928ff4fbd3feee/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=b837b334db5dd6232725fd2350928ff4fbd3feee",
        "patch": "@@ -85,8 +85,13 @@ CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)\n CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)\n {\n     memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n-    memset(pchCommand, 0, sizeof(pchCommand));\n-    strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n+\n+    // Copy the command name, zero-padding to COMMAND_SIZE bytes\n+    size_t i = 0;\n+    for (; i < COMMAND_SIZE && pszCommand[i] != 0; ++i) pchCommand[i] = pszCommand[i];\n+    assert(pszCommand[i] == 0); // Assert that the command name passed in is not longer than COMMAND_SIZE\n+    for (; i < COMMAND_SIZE; ++i) pchCommand[i] = 0;\n+\n     nMessageSize = nMessageSizeIn;\n     memset(pchChecksum, 0, CHECKSUM_SIZE);\n }"
      },
      {
        "sha": "6639ae2aacf386550d8387f75c8d27ee66eb22f0",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b837b334db5dd6232725fd2350928ff4fbd3feee/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b837b334db5dd6232725fd2350928ff4fbd3feee/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=b837b334db5dd6232725fd2350928ff4fbd3feee",
        "patch": "@@ -37,6 +37,10 @@ class CMessageHeader\n     typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n \n     explicit CMessageHeader(const MessageStartChars& pchMessageStartIn);\n+\n+    /** Construct a P2P message header from message-start characters, a command and the size of the message.\n+     * @note Passing in a `pszCommand` longer than COMMAND_SIZE will result in a run-time assertion error.\n+     */\n     CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn);\n \n     std::string GetCommand() const;"
      }
    ]
  },
  {
    "sha": "ff9c671b11d40e5d0623eff3dd12e48cbaafb34e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjljNjcxYjExZDQwZTVkMDYyM2VmZjNkZDEyZTQ4Y2JhYWZiMzRl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-10-01T12:00:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-02-06T12:43:15Z"
      },
      "message": "refactor: Work around GCC 9 `-Wredundant-move` warning\n\nUse std::move workaround for unique_ptr, for when the C++ compiler lacks\na fix for this issue:\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1579\nDo this in a way that avoids a GCC 9 `-Wredundant-move` warning.",
      "tree": {
        "sha": "1c33de1b0b1c8420df5046e56cb3a631b7b0396b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c33de1b0b1c8420df5046e56cb3a631b7b0396b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff9c671b11d40e5d0623eff3dd12e48cbaafb34e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9c671b11d40e5d0623eff3dd12e48cbaafb34e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff9c671b11d40e5d0623eff3dd12e48cbaafb34e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9c671b11d40e5d0623eff3dd12e48cbaafb34e/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b837b334db5dd6232725fd2350928ff4fbd3feee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b837b334db5dd6232725fd2350928ff4fbd3feee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b837b334db5dd6232725fd2350928ff4fbd3feee"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5a3420349fafe8d02aa4ed49f6e90aa16dd43953",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9c671b11d40e5d0623eff3dd12e48cbaafb34e/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9c671b11d40e5d0623eff3dd12e48cbaafb34e/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=ff9c671b11d40e5d0623eff3dd12e48cbaafb34e",
        "patch": "@@ -236,11 +236,10 @@ class ChainImpl : public Chain\n     explicit ChainImpl(NodeContext& node) : m_node(node) {}\n     std::unique_ptr<Chain::Lock> lock(bool try_lock) override\n     {\n-        auto result = MakeUnique<LockImpl>(::cs_main, \"cs_main\", __FILE__, __LINE__, try_lock);\n-        if (try_lock && result && !*result) return {};\n-        // std::move necessary on some compilers due to conversion from\n-        // LockImpl to Lock pointer\n-        return std::move(result);\n+        auto lock = MakeUnique<LockImpl>(::cs_main, \"cs_main\", __FILE__, __LINE__, try_lock);\n+        if (try_lock && lock && !*lock) return {};\n+        std::unique_ptr<Chain::Lock> result = std::move(lock); // Temporary to avoid CWG 1579\n+        return result;\n     }\n     bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override\n     {"
      }
    ]
  }
]