[
  {
    "sha": "d0f33a4def7090f53648b42c7dd69b7b57a317e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGYzM2E0ZGVmNzA5MGY1MzY0OGI0MmM3ZGQ2OWI3YjU3YTMxN2Ux",
    "commit": {
      "author": {
        "name": "lutangar",
        "email": "johan.dufour@gmail.com",
        "date": "2018-03-20T14:34:00Z"
      },
      "committer": {
        "name": "lutangar",
        "email": "johan.dufour@gmail.com",
        "date": "2018-03-20T14:34:00Z"
      },
      "message": "Meaningful error code when a RPC command is called with the wrong number of arguments\nAny RPC command called with the wrong number of arguments currently raise a `std::runtime_error` exception which is then mapped to a `RPC_MISC_ERROR` when executed from a `CRPCTable`.\nThis error code doesn\u2019t bring any value and should only be used when no other error codes make sense.",
      "tree": {
        "sha": "ad111f33ce2eda48dde8c9e2aa882c089fee806f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad111f33ce2eda48dde8c9e2aa882c089fee806f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0f33a4def7090f53648b42c7dd69b7b57a317e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0f33a4def7090f53648b42c7dd69b7b57a317e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0f33a4def7090f53648b42c7dd69b7b57a317e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0f33a4def7090f53648b42c7dd69b7b57a317e1/comments",
    "author": {
      "login": "lutangar",
      "id": 568769,
      "node_id": "MDQ6VXNlcjU2ODc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/568769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lutangar",
      "html_url": "https://github.com/lutangar",
      "followers_url": "https://api.github.com/users/lutangar/followers",
      "following_url": "https://api.github.com/users/lutangar/following{/other_user}",
      "gists_url": "https://api.github.com/users/lutangar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lutangar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lutangar/subscriptions",
      "organizations_url": "https://api.github.com/users/lutangar/orgs",
      "repos_url": "https://api.github.com/users/lutangar/repos",
      "events_url": "https://api.github.com/users/lutangar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lutangar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lutangar",
      "id": 568769,
      "node_id": "MDQ6VXNlcjU2ODc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/568769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lutangar",
      "html_url": "https://github.com/lutangar",
      "followers_url": "https://api.github.com/users/lutangar/followers",
      "following_url": "https://api.github.com/users/lutangar/following{/other_user}",
      "gists_url": "https://api.github.com/users/lutangar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lutangar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lutangar/subscriptions",
      "organizations_url": "https://api.github.com/users/lutangar/orgs",
      "repos_url": "https://api.github.com/users/lutangar/repos",
      "events_url": "https://api.github.com/users/lutangar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lutangar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ba3d4f4393d81148422d24d222fe7ed00130194",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ba3d4f4393d81148422d24d222fe7ed00130194",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ba3d4f4393d81148422d24d222fe7ed00130194"
      }
    ],
    "stats": {
      "total": 416,
      "additions": 277,
      "deletions": 139
    },
    "files": [
      {
        "sha": "04fd015b7ec9a74dcf97ac3f1803902693dcb71e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 26,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d0f33a4def7090f53648b42c7dd69b7b57a317e1",
        "patch": "@@ -161,7 +161,8 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n UniValue getblockcount(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getblockcount\\n\"\n             \"\\nReturns the number of blocks in the longest blockchain.\\n\"\n             \"\\nResult:\\n\"\n@@ -178,7 +179,8 @@ UniValue getblockcount(const JSONRPCRequest& request)\n UniValue getbestblockhash(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getbestblockhash\\n\"\n             \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\"\n             \"\\nResult:\\n\"\n@@ -205,7 +207,8 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n UniValue waitfornewblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"waitfornewblock (timeout)\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n             \"\\nReturns the current block on timeout or exit.\\n\"\n@@ -243,7 +246,8 @@ UniValue waitfornewblock(const JSONRPCRequest& request)\n UniValue waitforblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"waitforblock <blockhash> (timeout)\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n             \"\\nReturns the current block on timeout or exit.\\n\"\n@@ -285,7 +289,8 @@ UniValue waitforblock(const JSONRPCRequest& request)\n UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"waitforblockheight <height> (timeout)\\n\"\n             \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n             \"of the current tip.\\n\"\n@@ -327,7 +332,8 @@ UniValue waitforblockheight(const JSONRPCRequest& request)\n UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 0) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"syncwithvalidationinterfacequeue\\n\"\n             \"\\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\\n\"\n             \"\\nExamples:\\n\"\n@@ -342,7 +348,8 @@ UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n UniValue getdifficulty(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getdifficulty\\n\"\n             \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n             \"\\nResult:\\n\"\n@@ -451,7 +458,8 @@ UniValue mempoolToJSON(bool fVerbose)\n UniValue getrawmempool(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getrawmempool ( verbose )\\n\"\n             \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n             \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\"\n@@ -483,7 +491,8 @@ UniValue getrawmempool(const JSONRPCRequest& request)\n UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getmempoolancestors txid (verbose)\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\"\n             \"\\nArguments:\\n\"\n@@ -547,7 +556,8 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n UniValue getmempooldescendants(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getmempooldescendants txid (verbose)\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\"\n             \"\\nArguments:\\n\"\n@@ -611,7 +621,8 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n UniValue getmempoolentry(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getmempoolentry txid\\n\"\n             \"\\nReturns mempool data for given transaction\\n\"\n             \"\\nArguments:\\n\"\n@@ -644,7 +655,8 @@ UniValue getmempoolentry(const JSONRPCRequest& request)\n UniValue getblockhash(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getblockhash height\\n\"\n             \"\\nReturns hash of block in best-block-chain at height provided.\\n\"\n             \"\\nArguments:\\n\"\n@@ -669,7 +681,8 @@ UniValue getblockhash(const JSONRPCRequest& request)\n UniValue getblockheader(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getblockheader \\\"hash\\\" ( verbose )\\n\"\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n             \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\"\n@@ -728,7 +741,8 @@ UniValue getblockheader(const JSONRPCRequest& request)\n UniValue getblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getblock \\\"blockhash\\\" ( verbosity ) \\n\"\n             \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n             \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n@@ -890,7 +904,8 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"pruneblockchain\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n@@ -939,7 +954,8 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"gettxoutsetinfo\\n\"\n             \"\\nReturns statistics about the unspent transaction output set.\\n\"\n             \"Note this call may take some time.\\n\"\n@@ -981,7 +997,8 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n UniValue gettxout(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"gettxout \\\"txid\\\" n ( include_mempool )\\n\"\n             \"\\nReturns details about an unspent transaction output.\\n\"\n             \"\\nArguments:\\n\"\n@@ -1062,7 +1079,8 @@ UniValue verifychain(const JSONRPCRequest& request)\n     int nCheckLevel = gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n     int nCheckDepth = gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n     if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"verifychain ( checklevel nblocks )\\n\"\n             \"\\nVerifies blockchain database.\\n\"\n             \"\\nArguments:\\n\"\n@@ -1159,7 +1177,8 @@ void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params&\n UniValue getblockchaininfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getblockchaininfo\\n\"\n             \"Returns an object containing various state info regarding blockchain processing.\\n\"\n             \"\\nResult:\\n\"\n@@ -1276,7 +1295,8 @@ struct CompareBlocksByHeight\n UniValue getchaintips(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getchaintips\\n\"\n             \"Return information about all known tips in the block tree,\"\n             \" including the main chain as well as orphaned branches.\\n\"\n@@ -1393,7 +1413,8 @@ UniValue mempoolInfoToJSON()\n UniValue getmempoolinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getmempoolinfo\\n\"\n             \"\\nReturns details on the active state of the TX memory pool.\\n\"\n             \"\\nResult:\\n\"\n@@ -1416,7 +1437,8 @@ UniValue getmempoolinfo(const JSONRPCRequest& request)\n UniValue preciousblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"preciousblock \\\"blockhash\\\"\\n\"\n             \"\\nTreats a block as if it were received before others with the same work.\\n\"\n             \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n@@ -1454,7 +1476,8 @@ UniValue preciousblock(const JSONRPCRequest& request)\n UniValue invalidateblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"invalidateblock \\\"blockhash\\\"\\n\"\n             \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\"\n             \"\\nArguments:\\n\"\n@@ -1493,7 +1516,8 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n UniValue reconsiderblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"reconsiderblock \\\"blockhash\\\"\\n\"\n             \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n             \"This can be used to undo the effects of invalidateblock.\\n\"\n@@ -1531,7 +1555,8 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n UniValue getchaintxstats(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getchaintxstats ( nblocks blockhash )\\n\"\n             \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\"\n             \"\\nArguments:\\n\"\n@@ -1605,7 +1630,8 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n UniValue savemempool(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"savemempool\\n\"\n             \"\\nDumps the mempool to disk.\\n\"\n             \"\\nExamples:\\n\""
      },
      {
        "sha": "ad48d5875d4eed6064eb2e763bbdbe2310e4f347",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=d0f33a4def7090f53648b42c7dd69b7b57a317e1",
        "patch": "@@ -84,7 +84,8 @@ UniValue GetNetworkHashPS(int lookup, int height) {\n UniValue getnetworkhashps(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getnetworkhashps ( nblocks height )\\n\"\n             \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n             \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n@@ -154,7 +155,8 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"generatetoaddress nblocks address (maxtries)\\n\"\n             \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\"\n             \"\\nArguments:\\n\"\n@@ -188,7 +190,8 @@ UniValue generatetoaddress(const JSONRPCRequest& request)\n UniValue getmininginfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getmininginfo\\n\"\n             \"\\nReturns a json object containing mining-related information.\"\n             \"\\nResult:\\n\"\n@@ -227,7 +230,8 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"prioritisetransaction <txid> <dummy value> <fee delta>\\n\"\n             \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\"\n             \"\\nArguments:\\n\"\n@@ -289,7 +293,8 @@ std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getblocktemplate ( TemplateRequest )\\n\"\n             \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n             \"It returns data needed to construct a block to work on.\\n\"\n@@ -697,7 +702,8 @@ UniValue submitblock(const JSONRPCRequest& request)\n {\n     // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"submitblock \\\"hexdata\\\"  ( \\\"dummy\\\" )\\n\"\n             \"\\nAttempts to submit new block to network.\\n\"\n             \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n@@ -772,7 +778,8 @@ UniValue estimatefee(const JSONRPCRequest& request)\n UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"estimatesmartfee conf_target (\\\"estimate_mode\\\")\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n             \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n@@ -833,7 +840,8 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"estimaterawfee conf_target (threshold)\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n             \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\""
      },
      {
        "sha": "0c6fc3999feaa9c37c714d507af7306023d7cc84",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=d0f33a4def7090f53648b42c7dd69b7b57a317e1",
        "patch": "@@ -36,7 +36,8 @@\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n             \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n@@ -117,7 +118,7 @@ UniValue createmultisig(const JSONRPCRequest& request)\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"createmultisig\", \"2, \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\")\n         ;\n-        throw std::runtime_error(msg);\n+        throw JSONRPCError(RPC_INVALID_REQUEST, msg);\n     }\n \n     int required = request.params[0].get_int();\n@@ -148,7 +149,8 @@ UniValue createmultisig(const JSONRPCRequest& request)\n UniValue verifymessage(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"verifymessage \\\"address\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n             \"\\nVerify a signed message\\n\"\n             \"\\nArguments:\\n\"\n@@ -204,7 +206,8 @@ UniValue verifymessage(const JSONRPCRequest& request)\n UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"signmessagewithprivkey \\\"privkey\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\\n\"\n             \"\\nArguments:\\n\"\n@@ -243,7 +246,8 @@ UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n UniValue setmocktime(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"setmocktime timestamp\\n\"\n             \"\\nSet the local time to given timestamp (-regtest only)\\n\"\n             \"\\nArguments:\\n\"\n@@ -305,7 +309,8 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n      * as users will undoubtedly confuse it with the other \"memory pool\"\n      */\n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getmemoryinfo (\\\"mode\\\")\\n\"\n             \"Returns an object containing information about memory usage.\\n\"\n             \"Arguments:\\n\"\n@@ -366,7 +371,8 @@ uint32_t getCategoryMask(UniValue cats) {\n UniValue logging(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"logging ( <include> <exclude> )\\n\"\n             \"Gets and sets the logging configuration.\\n\"\n             \"When called without an argument, returns the list of categories with status that are currently being debug logged or not.\\n\"\n@@ -435,7 +441,8 @@ UniValue logging(const JSONRPCRequest& request)\n UniValue echo(const JSONRPCRequest& request)\n {\n     if (request.fHelp)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"echo|echojson \\\"message\\\" ...\\n\"\n             \"\\nSimply echo back the input arguments. This command is for testing.\\n\"\n             \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in\""
      },
      {
        "sha": "c8fc07d11592a1e76d930e583e24fd3b752b8a24",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d0f33a4def7090f53648b42c7dd69b7b57a317e1",
        "patch": "@@ -26,7 +26,8 @@\n UniValue getconnectioncount(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getconnectioncount\\n\"\n             \"\\nReturns the number of connections to other nodes.\\n\"\n             \"\\nResult:\\n\"\n@@ -45,7 +46,8 @@ UniValue getconnectioncount(const JSONRPCRequest& request)\n UniValue ping(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"ping\\n\"\n             \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n             \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n@@ -68,7 +70,8 @@ UniValue ping(const JSONRPCRequest& request)\n UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getpeerinfo\\n\"\n             \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n             \"\\nResult:\\n\"\n@@ -197,7 +200,8 @@ UniValue addnode(const JSONRPCRequest& request)\n         strCommand = request.params[1].get_str();\n     if (request.fHelp || request.params.size() != 2 ||\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n             \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n             \"Or try a connection to a node once.\\n\"\n@@ -240,7 +244,8 @@ UniValue addnode(const JSONRPCRequest& request)\n UniValue disconnectnode(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() == 0 || request.params.size() >= 3)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"disconnectnode \\\"[address]\\\" [nodeid]\\n\"\n             \"\\nImmediately disconnects from the specified peer node.\\n\"\n             \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n@@ -283,7 +288,8 @@ UniValue disconnectnode(const JSONRPCRequest& request)\n UniValue getaddednodeinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getaddednodeinfo ( \\\"node\\\" )\\n\"\n             \"\\nReturns information about the given added node, or all added nodes\\n\"\n             \"(note that onetry addnodes are not listed here)\\n\"\n@@ -350,7 +356,8 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n UniValue getnettotals(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getnettotals\\n\"\n             \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n             \"and current time.\\n\"\n@@ -416,7 +423,8 @@ static UniValue GetNetworksInfo()\n UniValue getnetworkinfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getnetworkinfo\\n\"\n             \"Returns an object containing various state info regarding P2P networking.\\n\"\n             \"\\nResult:\\n\"\n@@ -496,7 +504,8 @@ UniValue setban(const JSONRPCRequest& request)\n         strCommand = request.params[1].get_str();\n     if (request.fHelp || request.params.size() < 2 ||\n         (strCommand != \"add\" && strCommand != \"remove\"))\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+                            RPC_INVALID_REQUEST,\n                             \"setban \\\"subnet\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n                             \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\"\n                             \"\\nArguments:\\n\"\n@@ -556,7 +565,8 @@ UniValue setban(const JSONRPCRequest& request)\n UniValue listbanned(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n                             \"listbanned\\n\"\n                             \"\\nList all banned IPs/Subnets.\\n\"\n                             \"\\nExamples:\\n\"\n@@ -589,7 +599,8 @@ UniValue listbanned(const JSONRPCRequest& request)\n UniValue clearbanned(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+                            RPC_INVALID_REQUEST,\n                             \"clearbanned\\n\"\n                             \"\\nClear all banned IPs.\\n\"\n                             \"\\nExamples:\\n\"\n@@ -607,7 +618,8 @@ UniValue clearbanned(const JSONRPCRequest& request)\n UniValue setnetworkactive(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"setnetworkactive true|false\\n\"\n             \"\\nDisable/enable all p2p network activity.\\n\"\n             \"\\nArguments:\\n\""
      },
      {
        "sha": "c3c3b28faa80d6c5c4bf25567a979e4b278f6824",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d0f33a4def7090f53648b42c7dd69b7b57a317e1",
        "patch": "@@ -64,7 +64,8 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getrawtransaction \\\"txid\\\" ( verbose \\\"blockhash\\\" )\\n\"\n \n             \"\\nNOTE: By default this function only works for mempool transactions. If the -txindex option is\\n\"\n@@ -196,7 +197,8 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n UniValue gettxoutproof(const JSONRPCRequest& request)\n {\n     if (request.fHelp || (request.params.size() != 1 && request.params.size() != 2))\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"gettxoutproof [\\\"txid\\\",...] ( blockhash )\\n\"\n             \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n             \"\\nNOTE: By default this function only works sometimes. This is when there is an\\n\"\n@@ -283,7 +285,8 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n UniValue verifytxoutproof(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"verifytxoutproof \\\"proof\\\"\\n\"\n             \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n             \"and throwing an RPC error if the block is not in our best chain\\n\"\n@@ -319,7 +322,8 @@ UniValue verifytxoutproof(const JSONRPCRequest& request)\n UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             // clang-format off\n             \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] [{\\\"address\\\":amount},{\\\"data\\\":\\\"hex\\\"},...] ( locktime ) ( replaceable )\\n\"\n             \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n@@ -479,7 +483,8 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"decoderawtransaction \\\"hexstring\\\" ( iswitness )\\n\"\n             \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\"\n \n@@ -554,7 +559,8 @@ UniValue decoderawtransaction(const JSONRPCRequest& request)\n UniValue decodescript(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"decodescript \\\"hexstring\\\"\\n\"\n             \"\\nDecode a hex-encoded script.\\n\"\n             \"\\nArguments:\\n\"\n@@ -621,7 +627,8 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n {\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"combinerawtransaction [\\\"hexstring\\\",...]\\n\"\n             \"\\nCombine multiple partially signed transactions into one transaction.\\n\"\n             \"The combined transaction may be another partially signed transaction or a \\n\"\n@@ -862,7 +869,8 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival\n UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n             \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n             \"The second argument is an array of base58-encoded private\\n\"\n@@ -945,7 +953,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n #endif\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n             \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n             \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n@@ -1040,7 +1049,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"sendrawtransaction \\\"hexstring\\\" ( allowhighfees )\\n\"\n             \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n             \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\""
      },
      {
        "sha": "a54f21f9988c41e166cd5d9d2f8ed44f7d928323",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 18,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=d0f33a4def7090f53648b42c7dd69b7b57a317e1",
        "patch": "@@ -153,6 +153,7 @@ std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey)\n std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest& helpreq) const\n {\n     std::string strRet;\n+    std::string strHelp;\n     std::string category;\n     std::set<rpcfn_type> setDone;\n     std::vector<std::pair<std::string, const CRPCCommand*> > vCommands;\n@@ -178,27 +179,32 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n             if (setDone.insert(pfn).second)\n                 (*pfn)(jreq);\n         }\n+        catch (const UniValue& objError) {\n+            // Help text is returned in the message key\n+            strHelp = find_value(objError, \"message\").get_str();\n+        }\n         catch (const std::exception& e)\n         {\n             // Help text is returned in an exception\n-            std::string strHelp = std::string(e.what());\n-            if (strCommand == \"\")\n+            strHelp = std::string(e.what());\n+        }\n+\n+        if (strCommand == \"\")\n+        {\n+            if (strHelp.find('\\n') != std::string::npos)\n+                strHelp = strHelp.substr(0, strHelp.find('\\n'));\n+\n+            if (category != pcmd->category)\n             {\n-                if (strHelp.find('\\n') != std::string::npos)\n-                    strHelp = strHelp.substr(0, strHelp.find('\\n'));\n-\n-                if (category != pcmd->category)\n-                {\n-                    if (!category.empty())\n-                        strRet += \"\\n\";\n-                    category = pcmd->category;\n-                    std::string firstLetter = category.substr(0,1);\n-                    boost::to_upper(firstLetter);\n-                    strRet += \"== \" + firstLetter + category.substr(1) + \" ==\\n\";\n-                }\n+                if (!category.empty())\n+                    strRet += \"\\n\";\n+                category = pcmd->category;\n+                std::string firstLetter = category.substr(0,1);\n+                boost::to_upper(firstLetter);\n+                strRet += \"== \" + firstLetter + category.substr(1) + \" ==\\n\";\n             }\n-            strRet += strHelp + \"\\n\";\n         }\n+        strRet += strHelp + \"\\n\";\n     }\n     if (strRet == \"\")\n         strRet = strprintf(\"help: unknown command: %s\\n\", strCommand);\n@@ -209,7 +215,8 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n UniValue help(const JSONRPCRequest& jsonRequest)\n {\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"help ( \\\"command\\\" )\\n\"\n             \"\\nList all commands, or get help for a specified command.\\n\"\n             \"\\nArguments:\\n\"\n@@ -230,7 +237,8 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n {\n     // Accept the deprecated and ignored 'detach' boolean argument\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"stop\\n\"\n             \"\\nStop Bitcoin server.\");\n     // Event loop will exit after current HTTP requests have been handled, so\n@@ -242,7 +250,8 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n UniValue uptime(const JSONRPCRequest& jsonRequest)\n {\n     if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+                RPC_INVALID_REQUEST,\n                 \"uptime\\n\"\n                         \"\\nReturns the total uptime of the server.\\n\"\n                         \"\\nResult:\\n\""
      },
      {
        "sha": "969964b33b8910d5c60b29ded6147f0e33e7230a",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=d0f33a4def7090f53648b42c7dd69b7b57a317e1",
        "patch": "@@ -336,4 +336,15 @@ BOOST_AUTO_TEST_CASE(rpc_convert_values_generatetoaddress)\n     BOOST_CHECK_EQUAL(result[2].get_int(), 9);\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_help)\n+{\n+    UniValue result;\n+\n+    std::vector<std::string> commandList = tableRPC.listCommands();\n+    for (size_t i = 0; i < commandList.size(); ++i)\n+    {\n+        BOOST_CHECK_NO_THROW(CallRPC(\"help \" + commandList[i]));\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "d58e9bad9e5bd336416cbc87c36151af90c5b0a3",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d0f33a4def7090f53648b42c7dd69b7b57a317e1",
        "patch": "@@ -97,7 +97,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"importprivkey \\\"privkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n             \"\\nArguments:\\n\"\n@@ -186,7 +187,8 @@ UniValue abortrescan(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"abortrescan\\n\"\n             \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\"\n             \"\\nExamples:\\n\"\n@@ -247,7 +249,8 @@ UniValue importaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n             \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n             \"\\nArguments:\\n\"\n@@ -325,7 +328,8 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"importprunedfunds\\n\"\n             \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\"\n             \"\\nArguments:\\n\"\n@@ -387,7 +391,8 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"removeprunedfunds \\\"txid\\\"\\n\"\n             \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\"\n             \"\\nArguments:\\n\"\n@@ -425,7 +430,8 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n             \"\\nArguments:\\n\"\n@@ -495,7 +501,8 @@ UniValue importwallet(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"importwallet \\\"filename\\\"\\n\"\n             \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\"\n             \"\\nArguments:\\n\"\n@@ -619,7 +626,8 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"dumpprivkey \\\"address\\\"\\n\"\n             \"\\nReveals the private key corresponding to 'address'.\\n\"\n             \"Then the importprivkey can be used with this output\\n\"\n@@ -662,7 +670,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"dumpwallet \\\"filename\\\"\\n\"\n             \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n             \"Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.\\n\"\n@@ -1107,7 +1116,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     // clang-format off\n     if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"importmulti \\\"requests\\\" ( \\\"options\\\" )\\n\\n\"\n             \"Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options). Requires a new wallet backup.\\n\\n\"\n             \"Arguments:\\n\""
      },
      {
        "sha": "b59521cb388d7b33a40591206d4504139a40f2ba",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 92,
        "deletions": 47,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f33a4def7090f53648b42c7dd69b7b57a317e1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d0f33a4def7090f53648b42c7dd69b7b57a317e1",
        "patch": "@@ -140,7 +140,8 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getnewaddress ( \\\"account\\\" \\\"address_type\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n             \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n@@ -206,7 +207,8 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getaccountaddress \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Returns the current Bitcoin address for receiving payments to this account.\\n\"\n             \"\\nArguments:\\n\"\n@@ -240,7 +242,8 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getrawchangeaddress ( \\\"address_type\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n             \"This is for use with raw transactions, NOT normal use.\\n\"\n@@ -289,7 +292,8 @@ UniValue setaccount(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"setaccount \\\"address\\\" \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Sets the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n@@ -337,7 +341,8 @@ UniValue getaccount(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getaccount \\\"address\\\"\\n\"\n             \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n@@ -373,7 +378,8 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getaddressesbyaccount \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Returns the list of addresses for the given account.\\n\"\n             \"\\nArguments:\\n\"\n@@ -452,7 +458,8 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n             + HelpRequiringPassphrase(pwallet) +\n@@ -541,7 +548,8 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"listaddressgroupings\\n\"\n             \"\\nLists groups of addresses which have had their common ownership\\n\"\n             \"made public by common use as inputs or as the resulting change\\n\"\n@@ -600,7 +608,8 @@ UniValue signmessage(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"signmessage \\\"address\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n@@ -661,7 +670,8 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getreceivedbyaddress \\\"address\\\" ( minconf )\\n\"\n             \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\"\n             \"\\nArguments:\\n\"\n@@ -728,7 +738,8 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getreceivedbyaccount \\\"account\\\" ( minconf )\\n\"\n             \"\\nDEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n             \"\\nArguments:\\n\"\n@@ -793,7 +804,8 @@ UniValue getbalance(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 3)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getbalance ( \\\"account\\\" minconf include_watchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n             \"The available balance is what the wallet considers currently spendable, and is\\n\"\n@@ -873,7 +885,8 @@ UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n     }\n \n     if (request.fHelp || request.params.size() > 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+                RPC_INVALID_REQUEST,\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n \n@@ -897,7 +910,8 @@ UniValue movecmd(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 5)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n             \"\\nDEPRECATED. Move a specified amount from one account in your wallet to another.\\n\"\n             \"\\nArguments:\\n\"\n@@ -948,7 +962,8 @@ UniValue sendfrom(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"sendfrom \\\"fromaccount\\\" \\\"toaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment_to\\\" )\\n\"\n             \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n@@ -1023,7 +1038,8 @@ UniValue sendmany(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n@@ -1199,7 +1215,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"\\nAs json rpc call\\n\"\n             + HelpExampleRpc(\"addmultisigaddress\", \"2, \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\")\n         ;\n-        throw std::runtime_error(msg);\n+        throw JSONRPCError(RPC_INVALID_REQUEST, msg);\n     }\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n@@ -1321,7 +1337,7 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n             \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH or BIP173).\\n\"\n             \"}\\n\"\n         ;\n-        throw std::runtime_error(msg);\n+        throw JSONRPCError(RPC_INVALID_REQUEST, msg);\n     }\n \n     if (!IsDeprecatedRPCEnabled(\"addwitnessaddress\")) {\n@@ -1539,7 +1555,8 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 4)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"listreceivedbyaddress ( minconf include_empty include_watchonly address_filter )\\n\"\n             \"\\nList balances by receiving address.\\n\"\n             \"\\nArguments:\\n\"\n@@ -1590,7 +1607,8 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 3)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"listreceivedbyaccount ( minconf include_empty include_watchonly)\\n\"\n             \"\\nDEPRECATED. List balances by account.\\n\"\n             \"\\nArguments:\\n\"\n@@ -1750,7 +1768,8 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 4)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"listtransactions ( \\\"account\\\" count skip include_watchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n             \"\\nArguments:\\n\"\n@@ -1889,7 +1908,8 @@ UniValue listaccounts(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"listaccounts ( minconf include_watchonly)\\n\"\n             \"\\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\\n\"\n             \"\\nArguments:\\n\"\n@@ -1977,7 +1997,8 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 4)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly include_removed )\\n\"\n             \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n             \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n@@ -2118,7 +2139,8 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"gettransaction \\\"txid\\\" ( include_watchonly )\\n\"\n             \"\\nGet detailed information about in-wallet transaction <txid>\\n\"\n             \"\\nArguments:\\n\"\n@@ -2214,7 +2236,8 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"abandontransaction \\\"txid\\\"\\n\"\n             \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n             \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n@@ -2260,7 +2283,8 @@ UniValue backupwallet(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"backupwallet \\\"destination\\\"\\n\"\n             \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\"\n             \"\\nArguments:\\n\"\n@@ -2293,7 +2317,8 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"keypoolrefill ( newsize )\\n\"\n             \"\\nFills the keypool.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n@@ -2340,7 +2365,8 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 2) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n             \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n             \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\"\n@@ -2392,7 +2418,8 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n         }\n     }\n     else\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"walletpassphrase <passphrase> <timeout>\\n\"\n             \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n \n@@ -2413,7 +2440,8 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 2) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n             \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\"\n             \"\\nArguments:\\n\"\n@@ -2442,7 +2470,8 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n     strNewWalletPass = request.params[1].get_str().c_str();\n \n     if (strOldWalletPass.length() < 1 || strNewWalletPass.length() < 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n \n@@ -2462,7 +2491,8 @@ UniValue walletlock(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 0) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"walletlock\\n\"\n             \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n             \"After calling this method, you will need to call walletpassphrase again\\n\"\n@@ -2500,7 +2530,8 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"encryptwallet \\\"passphrase\\\"\\n\"\n             \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n             \"After this, any calls that interact with private keys such as sending or signing \\n\"\n@@ -2537,7 +2568,8 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n     strWalletPass = request.params[0].get_str().c_str();\n \n     if (strWalletPass.length() < 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"encryptwallet <passphrase>\\n\"\n             \"Encrypts the wallet with <passphrase>.\");\n \n@@ -2560,7 +2592,8 @@ UniValue lockunspent(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"lockunspent unlock ([{\\\"txid\\\":\\\"txid\\\",\\\"vout\\\":n},...])\\n\"\n             \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n             \"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\\n\"\n@@ -2687,7 +2720,8 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"listlockunspent\\n\"\n             \"\\nReturns list of temporarily unspendable outputs.\\n\"\n             \"See the lockunspent call to lock and unlock transactions for spending.\\n\"\n@@ -2739,7 +2773,8 @@ UniValue settxfee(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"settxfee amount\\n\"\n             \"\\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\\n\"\n             \"\\nArguments:\\n\"\n@@ -2768,7 +2803,8 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getwalletinfo\\n\"\n             \"Returns an object containing various wallet state info.\\n\"\n             \"\\nResult:\\n\"\n@@ -2826,7 +2862,8 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n UniValue listwallets(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"listwallets\\n\"\n             \"Returns a list of currently loaded wallets.\\n\"\n             \"For full information on the wallet, use \\\"getwalletinfo\\\"\\n\"\n@@ -2864,7 +2901,8 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"resendwallettransactions\\n\"\n             \"Immediately re-broadcast unconfirmed wallet transactions to all peers.\\n\"\n             \"Intended only for testing; the wallet code periodically re-broadcasts\\n\"\n@@ -2899,7 +2937,8 @@ UniValue listunspent(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 5)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] [include_unsafe] [query_options])\\n\"\n             \"\\nReturns array of unspent transaction outputs\\n\"\n             \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n@@ -3063,7 +3102,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+                            RPC_INVALID_REQUEST,\n                             \"fundrawtransaction \\\"hexstring\\\" ( options iswitness )\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                             \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n@@ -3264,7 +3304,8 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"signrawtransactionwithwallet \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n             \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n             \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n@@ -3333,7 +3374,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"bumpfee \\\"txid\\\" ( options ) \\n\"\n             \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n             \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n@@ -3483,7 +3525,8 @@ UniValue generate(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"generate nblocks ( maxtries )\\n\"\n             \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\"\n             \"\\nArguments:\\n\"\n@@ -3527,7 +3570,8 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() > 2) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"rescanblockchain (\\\"start_height\\\") (\\\"stop_height\\\")\\n\"\n             \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n             \"\\nArguments:\\n\"\n@@ -3721,7 +3765,8 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     }\n \n     if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n+        throw JSONRPCError(\n+            RPC_INVALID_REQUEST,\n             \"getaddressinfo \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n             \"to be in the wallet.\\n\""
      }
    ]
  }
]