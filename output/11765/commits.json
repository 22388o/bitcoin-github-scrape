[
  {
    "sha": "1323df9ff1e9ca80ecba894254fdbba2a8a0b428",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzIzZGY5ZmYxZTljYTgwZWNiYTg5NDI1NGZkYmJhMmE4YTBiNDI4",
    "commit": {
      "author": {
        "name": "aaron-hanson",
        "email": "archaeal@gmail.com",
        "date": "2017-11-25T04:12:27Z"
      },
      "committer": {
        "name": "aaron-hanson",
        "email": "archaeal@gmail.com",
        "date": "2018-04-04T02:18:34Z"
      },
      "message": "[REST] added blockhash api, tests and documentation\n\nAdded a /rest/blockhash/<HEIGHT>.<bin|hex|json> endpoint, so that the user can fetch a block hash by height via REST (analogous to the 'getblockhash' RPC method).",
      "tree": {
        "sha": "f5236f01519e3b9f8f3d309ead12aa0db9da6aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5236f01519e3b9f8f3d309ead12aa0db9da6aa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1323df9ff1e9ca80ecba894254fdbba2a8a0b428",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1323df9ff1e9ca80ecba894254fdbba2a8a0b428",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1323df9ff1e9ca80ecba894254fdbba2a8a0b428",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1323df9ff1e9ca80ecba894254fdbba2a8a0b428/comments",
    "author": {
      "login": "aaron-hanson",
      "id": 8744958,
      "node_id": "MDQ6VXNlcjg3NDQ5NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8744958?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaron-hanson",
      "html_url": "https://github.com/aaron-hanson",
      "followers_url": "https://api.github.com/users/aaron-hanson/followers",
      "following_url": "https://api.github.com/users/aaron-hanson/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaron-hanson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaron-hanson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaron-hanson/subscriptions",
      "organizations_url": "https://api.github.com/users/aaron-hanson/orgs",
      "repos_url": "https://api.github.com/users/aaron-hanson/repos",
      "events_url": "https://api.github.com/users/aaron-hanson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaron-hanson/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "aaron-hanson",
      "id": 8744958,
      "node_id": "MDQ6VXNlcjg3NDQ5NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8744958?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aaron-hanson",
      "html_url": "https://github.com/aaron-hanson",
      "followers_url": "https://api.github.com/users/aaron-hanson/followers",
      "following_url": "https://api.github.com/users/aaron-hanson/following{/other_user}",
      "gists_url": "https://api.github.com/users/aaron-hanson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aaron-hanson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aaron-hanson/subscriptions",
      "organizations_url": "https://api.github.com/users/aaron-hanson/orgs",
      "repos_url": "https://api.github.com/users/aaron-hanson/repos",
      "events_url": "https://api.github.com/users/aaron-hanson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aaron-hanson/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad960f5771dc251c8e1198dd8a82e18df4562171",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad960f5771dc251c8e1198dd8a82e18df4562171",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad960f5771dc251c8e1198dd8a82e18df4562171"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 108,
      "deletions": 0
    },
    "files": [
      {
        "sha": "25b78013da5bc9f267350dbaf94209815b0ffd6c",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1323df9ff1e9ca80ecba894254fdbba2a8a0b428/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1323df9ff1e9ca80ecba894254fdbba2a8a0b428/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=1323df9ff1e9ca80ecba894254fdbba2a8a0b428",
        "patch": "@@ -31,6 +31,11 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n \n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n \n+#### Block hash\n+`GET /rest/blockhash/<HEIGHT>.<bin|hex|json>`\n+\n+Given a block height: returns the hash of the block at <HEIGHT> in the active chain, in binary, hex-encoded binary or JSON formats.\n+\n #### Chaininfos\n `GET /rest/chaininfo.json`\n "
      },
      {
        "sha": "6fb0ec8174151ef0c7aea27fe134aeb2ac444620",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1323df9ff1e9ca80ecba894254fdbba2a8a0b428/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1323df9ff1e9ca80ecba894254fdbba2a8a0b428/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=1323df9ff1e9ca80ecba894254fdbba2a8a0b428",
        "patch": "@@ -269,6 +269,56 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_blockhash(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string strHeight;\n+    const RetFormat rf = ParseDataFormat(strHeight, strURIPart);\n+\n+    int32_t nHeight;\n+    if (!ParseInt32(strHeight, &nHeight))\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Parse error\");\n+\n+    LOCK(cs_main);\n+    if (nHeight < 0 || nHeight > chainActive.Height())\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Block height out of range: \" + strHeight);\n+\n+    const CBlockIndex *pindex = chainActive[nHeight];\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssGetBlockHashResponse(SER_NETWORK, PROTOCOL_VERSION);\n+        ssGetBlockHashResponse << pindex->GetBlockHash();\n+        std::string binaryHash = ssGetBlockHashResponse.str();\n+\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHash);\n+        return true;\n+    }\n+    case RetFormat::HEX: {\n+        CDataStream ssGetBlockHashResponse(SER_NETWORK, PROTOCOL_VERSION);\n+        ssGetBlockHashResponse << pindex->GetBlockHash();\n+        std::string strHex = HexStr(ssGetBlockHashResponse.begin(), ssGetBlockHashResponse.end()) + \"\\n\";\n+\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue blockHashObject = UniValue(UniValue::VOBJ);\n+        blockHashObject.push_back(Pair(\"hash\", pindex->GetBlockHash().GetHex()));\n+        std::string strJSON = blockHashObject.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+}\n+\n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp\n UniValue getblockchaininfo(const JSONRPCRequest& request);\n \n@@ -579,6 +629,7 @@ static const struct {\n       {\"/rest/tx/\", rest_tx},\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n+      {\"/rest/blockhash/\", rest_blockhash},\n       {\"/rest/chaininfo\", rest_chaininfo},\n       {\"/rest/mempool/info\", rest_mempool_info},\n       {\"/rest/mempool/contents\", rest_mempool_contents},"
      },
      {
        "sha": "c1aa11680099f7d0b9ab272a51d29c5bcec50793",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1323df9ff1e9ca80ecba894254fdbba2a8a0b428/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1323df9ff1e9ca80ecba894254fdbba2a8a0b428/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=1323df9ff1e9ca80ecba894254fdbba2a8a0b428",
        "patch": "@@ -223,6 +223,56 @@ def run_test(self):\n         self.nodes[0].generate(1) #generate block to not affect upcoming tests\n         self.sync_all()\n \n+\n+        ####################\n+        # /rest/blockhash/ #\n+        ####################\n+\n+        # check json block hash against bb_hash\n+        response_hash_json = http_get_call(url.hostname, url.port, '/rest/blockhash/'+str(chainHeight)+self.FORMAT_SEPARATOR+'json', True)\n+        assert_equal(response_hash_json.status, 200)\n+        response_hash_json_str = response_hash_json.read().decode('utf-8')\n+        hash_json_obj = json.loads(response_hash_json_str)\n+        assert_equal(hash_json_obj['hash'], bb_hash)\n+\n+        # check binary block hash against bb_hash\n+        response_hash = http_get_call(url.hostname, url.port, '/rest/blockhash/'+str(chainHeight)+self.FORMAT_SEPARATOR+'bin', True)\n+        assert_equal(response_hash.status, 200)\n+        assert_equal(int(response_hash.getheader('content-length')), 32)\n+        response_hash_str = response_hash.read()\n+        output = BytesIO()\n+        output.write(response_hash_str)\n+        output.seek(0)\n+        hashFromBinResponse = hex(deser_uint256(output))[2:].zfill(64)\n+        assert_equal(hashFromBinResponse, bb_hash)\n+\n+        # check hex block hash against bb_hash\n+        response_hash_hex = http_get_call(url.hostname, url.port, '/rest/blockhash/'+str(chainHeight)+self.FORMAT_SEPARATOR+'hex', True)\n+        assert_equal(response_hash_hex.status, 200)\n+        assert_equal(int(response_hash_hex.getheader('content-length')), 65)\n+        response_hash_hex_str = response_hash_hex.read()\n+        assert_equal(encode(response_hash_str, \"hex_codec\")[0:64], response_hash_hex_str[0:64])\n+\n+        # check invalid requests\n+        response = http_get_call(url.hostname, url.port, '/rest/blockhash', True)\n+        assert_equal(response.status, 404) # must be a 404 because it's missing the trailing slash and height parameter\n+\n+        response = http_get_call(url.hostname, url.port, '/rest/blockhash/'+self.FORMAT_SEPARATOR+'json', True)\n+        assert_equal(response.status, 400) # must be a 400 because no height parameter was passed\n+\n+        response = http_get_call(url.hostname, url.port, '/rest/blockhash/0', True)\n+        assert_equal(response.status, 404) # must be a 404 because no output format was passed\n+\n+        response = http_get_call(url.hostname, url.port, '/rest/blockhash/a0'+self.FORMAT_SEPARATOR+'json', True)\n+        assert_equal(response.status, 400) # must be a 400 because a non-numeric height parameter was passed\n+\n+        response = http_get_call(url.hostname, url.port, '/rest/blockhash/-1'+self.FORMAT_SEPARATOR+'json', True)\n+        assert_equal(response.status, 400) # must be a 400 because a negative height parameter was passed\n+\n+        response = http_get_call(url.hostname, url.port, '/rest/blockhash/1000'+self.FORMAT_SEPARATOR+'json', True)\n+        assert_equal(response.status, 400) # must be a 400 because the height parameter is greater than the chain height\n+\n+\n         ################\n         # /rest/block/ #\n         ################\n@@ -259,6 +309,7 @@ def run_test(self):\n         block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n         block_json_obj = json.loads(block_json_string)\n         assert_equal(block_json_obj['hash'], bb_hash)\n+        assert_equal(block_json_obj['hash'], hash_json_obj['hash'])\n \n         # compare with json block header\n         response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n@@ -267,6 +318,7 @@ def run_test(self):\n         json_obj = json.loads(response_header_json_str, parse_float=Decimal)\n         assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n         assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n+        assert_equal(json_obj[0]['hash'], hash_json_obj['hash'])\n \n         #compare with normal RPC block response\n         rpc_block_json = self.nodes[0].getblock(bb_hash)"
      }
    ]
  }
]