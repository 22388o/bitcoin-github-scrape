[
  {
    "sha": "8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWViMWRhYWYxNmM0YWM5MWM4NDFhYzVkZmQxNDEwZmFhYTBlY2Iy",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-15T09:32:12Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T18:48:17Z"
      },
      "message": "Changed functional tests which do not require wallets to run in non-wallet mode.\n\nChanged wallet tests",
      "tree": {
        "sha": "303c777daedb84382042ccd2cbed55cc2a72f4ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/303c777daedb84382042ccd2cbed55cc2a72f4ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f09bc7ec9859bba6d1df765adb1030d276b8f626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f09bc7ec9859bba6d1df765adb1030d276b8f626",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f09bc7ec9859bba6d1df765adb1030d276b8f626"
      }
    ],
    "stats": {
      "total": 289,
      "additions": 182,
      "deletions": 107
    },
    "files": [
      {
        "sha": "c084a25831e391d296ed8ae2747255e4b892bb58",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -85,8 +85,9 @@ def set_test_params(self):\n \n         # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+    # Use skip_test_if_missing_module() to skip the test if the required module is missing\n+    # def skip_test_if_missing_module(self):\n+    #     self.skip_if_no_wallet()\n \n     # Use add_options() to add specific command-line options for your test.\n     # In practice this is not used very much, since the tests are mostly written\n@@ -138,7 +139,7 @@ def run_test(self):\n         self.nodes[0].add_p2p_connection(BaseNode())\n \n         # Generating a block on one of the nodes will get us out of IBD\n-        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n+        blocks = [int(self.nodes[0].generatetoaddress(nblocks=1, self.nodes[0].get_deterministic_priv_key().address)[0], 16)]\n         self.sync_all([self.nodes[0:2]])\n \n         # Notice above how we called an RPC by calling a method with the same\n@@ -166,7 +167,7 @@ def run_test(self):\n \n         for i in range(10):\n             # Use the mininode and blocktools functionality to manually build a block\n-            # Calling the generate() rpc is easier, but this allows us to exactly\n+            # Calling the generatetoaddress()/generate() rpc is easier, but this allows us to exactly\n             # control the blocks and transactions.\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()"
      },
      {
        "sha": "71c3a396c1ba272d33d2ad4b587f3cac2b3be227",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -75,9 +75,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n "
      },
      {
        "sha": "c170f510c88df75465c90902fce8dafbecbdab57",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -16,9 +16,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         self.stop_node(0)\n         shutil.rmtree(self.nodes[0].datadir)\n@@ -30,7 +27,7 @@ def run_test(self):\n         self.log.info(\"Starting with existing blocksdir ...\")\n         self.start_node(0, [\"-blocksdir=\" + blocksdir_path])\n         self.log.info(\"mining blocks..\")\n-        self.nodes[0].generate(10)\n+        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n         assert os.path.isfile(os.path.join(blocksdir_path, \"regtest\", \"blocks\", \"blk00000.dat\"))\n         assert os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest\", \"blocks\", \"index\"))\n "
      },
      {
        "sha": "8bb7e02695f5763e495123a5d1182daae9116575",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -15,9 +15,6 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n "
      },
      {
        "sha": "dbff6f15f2f1f555a832630dec5fd916942267ba",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -31,9 +31,6 @@ def set_test_params(self):\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         # This test relies on the chain setup being:\n         # node0 <- node1 <- node2\n@@ -54,7 +51,8 @@ def run_test(self):\n \n         num_blocks_to_generate = int((self.node_min_work[1] - starting_chain_work) / REGTEST_WORK_PER_BLOCK)\n         self.log.info(\"Generating %d blocks on node0\", num_blocks_to_generate)\n-        hashes = self.nodes[0].generate(num_blocks_to_generate)\n+        hashes = self.nodes[0].generatetoaddress(num_blocks_to_generate,\n+                                                 self.nodes[0].get_deterministic_priv_key().address)\n \n         self.log.info(\"Node0 current chain work: %s\", self.nodes[0].getblockheader(hashes[-1])['chainwork'])\n \n@@ -75,7 +73,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), starting_blockcount)\n \n         self.log.info(\"Generating one more block\")\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n \n         self.log.info(\"Verifying nodes are all synced\")\n "
      },
      {
        "sha": "31a864f7ccf511e185c80133b1b9e6814cbb8f67",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -31,9 +31,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file\n@@ -68,13 +65,14 @@ def run_test(self):\n         node = self.nodes[0]\n         node.add_p2p_connection(P2PInterface())\n \n+        node_deterministic_address = node.get_deterministic_priv_key().address\n         # Mine one period worth of blocks\n-        node.generate(VB_PERIOD)\n+        node.generatetoaddress(VB_PERIOD, node_deterministic_address)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n         self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        node.generatetoaddress(VB_PERIOD - VB_THRESHOLD + 1, node_deterministic_address)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n         assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n@@ -83,7 +81,7 @@ def run_test(self):\n         self.log.info(\"Check that there is a warning if >50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n         self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        node.generate(VB_PERIOD - VB_THRESHOLD)\n+        node.generatetoaddress(VB_PERIOD - VB_THRESHOLD, node_deterministic_address)\n \n         # Check that get*info() shows the 51/100 unknown block version error.\n         assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n@@ -92,16 +90,16 @@ def run_test(self):\n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Mine a period worth of expected blocks so the generic block-version warning\n         # is cleared. This will move the versionbit state to ACTIVE.\n-        node.generate(VB_PERIOD)\n+        node.generatetoaddress(VB_PERIOD, node_deterministic_address)\n \n         # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n         self.restart_node(0)\n \n         # Generating one block guarantees that we'll get out of IBD\n-        node.generate(1)\n+        node.generate(1, node_deterministic_address)\n         wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n         # Generating one more block will be enough to generate an error.\n-        node.generate(1)\n+        node.generatetoaddress(1, node_deterministic_address)\n         # Check that get*info() shows the versionbits unknown rules warning\n         assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])"
      },
      {
        "sha": "e5ba8e247e55c123322221d3009939100fcbd636",
        "filename": "test/functional/output.txt",
        "status": "added",
        "additions": 111,
        "deletions": 0,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/output.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/output.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/output.txt?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -0,0 +1,111 @@\n+Why does logging require wallet?\n+Does -reindex use the wallet? As in while reindexing are the wallet transactions generated again?\n+\n+Files:\n+\n+combine_logs.py NA\n+create_cache.py NA\n+example_test.py changed\n+feature_assumevalid.py  depends on wallet\n+feature_bip68_sequence.py* depends on wallet\n+feature_block.py* was previously marked as dependent on wallet, but it is not dependent?\n+feature_blocksdir.py* changed\n+feature_cltv.py* depends on wallet\n+feature_config_args.py* depends on wallet\n+feature_csv_activation.py* depends on wallet\n+feature_dbcrash.py* depends on wallet\n+feature_dersig.py* depends on wallet\n+feature_fee_estimation.py* depends on wallet\n+feature_help.py* NA\n+feature_includeconf.py* NA\n+feature_logging.py* was previously marked as dependent on wallet, but it is not dependent?\n+feature_maxuploadtarget.py* depends on wallet\n+feature_minchainwork.py* changed\n+feature_notifications.py* depends on wallet\n+feature_nulldummy.py* depends on wallet \n+feature_proxy.py* NA\n+feature_pruning.py* depends on wallet\n+feature_rbf.py* depends on wallet\n+feature_reindex.py* depends on wallet?\n+feature_segwit.py* depends on wallet\n+feature_uacomment.py* NA\n+feature_versionbits_warning.py* changed\n+interface_bitcoin_cli.py* depends on wallet\n+interface_http.py* NA\n+interface_rest.py* depends on wallet\n+interface_zmq.py* depends on wallet\n+mempool_accept.py* depends on wallet\n+mempool_limit.py* depends on wallet\n+mempool_packages.py* depends on wallet\n+mempool_persist.py* depends on wallet\n+mempool_reorg.py* depends on wallet\n+mempool_resurrect.py* depends on wallet\n+mempool_spend_coinbase.py* depends on wallet\n+mining_basic.py* uses wallet has a bug, uses 1 more node than required, does not require wallet but uses initalize\n+mining_getblocktemplate_longpoll.py* uses wallet\n+mining_prioritisetransaction.py* uses wallet,  but 1 more than required\n+p2p_compactblocks.py* uses wallet\n+p2p_disconnect_ban.py* NA\n+p2p_feefilter.py* depends on wallet\n+p2p_fingerprint.py* changed\n+p2p_invalid_block.py* changed\n+p2p_invalid_locator.py* requires intilize to change\n+p2p_invalid_tx.py* changed\n+p2p_leak.py* depends on initlize\n+p2p_mempool.py* NA\n+p2p_node_network_limited.py* -- I think this test is not doing what it claims\n+p2p_segwit.py*  changed\n+p2p_sendheaders.py* changed\n+p2p_timeouts.py* NA\n+p2p_unrequested_blocks.py changed\n+README.md\n+rpc_bind.py* NA\n+rpc_blockchain.py* depends on initialze\n+rpc_createmultisig.py* depends on wallet\n+rpc_decodescript.py* NA\n+rpc_deprecated.py* NA\n+rpc_fundrawtransaction.py* depends on wallet\n+rpc_getblockstats.py* NA\n+rpc_getchaintips.py* depends on intilze\n+rpc_help.py* NA\n+rpc_invalidateblock.py* changed\n+rpc_named_arguments.py* NA\n+rpc_net.py* NA\n+rpc_preciousblock.py* changed\n+rpc_psbt.py* depends on wallet \n+rpc_rawtransaction.py* depends on wallet\n+rpc_scantxoutset.py* depends on wallet\n+rpc_signmessage.py* depends on wallet\n+rpc_signrawtransaction.py* depends on wallet\n+rpc_txoutproof.py* depends on wallet\n+rpc_uptime.py* NA\n+rpc_users.py* NA\n+rpc_zmq.py*\n+test_framework/\n+test_runner.py*\n+wallet_abandonconflict.py*\n+wallet_address_types.py*\n+wallet_backup.py*\n+wallet_basic.py*\n+wallet_bumpfee.py*\n+wallet_disable.py*\n+wallet_disableprivatekeys.py*\n+wallet_dump.py*\n+wallet_encryption.py*\n+wallet_fallbackfee.py*\n+wallet_groups.py*\n+wallet_hd.py*\n+wallet_import_rescan.py*\n+wallet_importmulti.py*\n+wallet_importprunedfunds.py*\n+wallet_keypool.py*\n+wallet_keypool_topup.py*\n+wallet_labels.py*\n+wallet_listreceivedby.py*\n+wallet_listsinceblock.py*\n+wallet_listtransactions.py*\n+wallet_multiwallet.py*\n+wallet_resendwallettransactions.py*\n+wallet_txn_clone.py*\n+wallet_txn_doublespend.py*\n+wallet_zapwallettxes.py*"
      },
      {
        "sha": "3ca754b89b491497d251c4a2a4f9291f00da1801",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -30,9 +30,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     # Build a chain of blocks on top of given one\n     def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n         blocks = []\n@@ -83,7 +80,7 @@ def run_test(self):\n         self.nodes[0].setmocktime(int(time.time()) - 60 * 24 * 60 * 60)\n \n         # Generating a chain of 10 blocks\n-        block_hashes = self.nodes[0].generate(nblocks=10)\n+        block_hashes = self.nodes[0].generatetoaddress(nblocks=10, self.nodes[0].get_deterministic_priv_key().address)\n \n         # Create longer chain starting 2 blocks before current tip\n         height = len(block_hashes) - 2\n@@ -114,7 +111,7 @@ def run_test(self):\n \n         # Longest chain is extended so stale is much older than chain tip\n         self.nodes[0].setmocktime(0)\n-        tip = self.nodes[0].generate(nblocks=1)[0]\n+        tip = self.nodes[0].generatetoaddress(nblocks=1, self.nodes[0].get_deterministic_priv_key().address)[0]\n         assert_equal(self.nodes[0].getblockcount(), 14)\n \n         # Send getdata & getheaders to refresh last received getheader message"
      },
      {
        "sha": "7be7c9b3ee40f43dabe1cc6d57f70c8463d93841",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -24,9 +24,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         # Add p2p connection to node0\n         node = self.nodes[0]  # convenience reference to the node\n@@ -48,7 +45,7 @@ def run_test(self):\n         node.p2p.send_blocks_and_test([block1], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n-        node.generate(100)\n+        node.generatetoaddress(100, node.get_deterministic_priv_key().address)\n \n         best_block = node.getblock(node.getbestblockhash())\n         tip = int(node.getbestblockhash(), 16)"
      },
      {
        "sha": "8d06b2a7db1b0daf6b4b87e808b30ceb198963ae",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -25,10 +25,7 @@ class InvalidTxRequestTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n+        \n     def bootstrap_p2p(self, *, num_connections=1):\n         \"\"\"Add a P2P connection to the node.\n \n@@ -64,7 +61,7 @@ def run_test(self):\n         node.p2p.send_blocks_and_test([block], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n-        self.nodes[0].generate(100)\n+        self.nodes[0].generatetoaddress(100, self.nodes[0].get_deterministic_priv_key().address)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)"
      },
      {
        "sha": "ec3d336dc1af0cbadde8c00900b8a0d6b5f6dff2",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -34,9 +34,6 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def disconnect_all(self):\n         disconnect_nodes(self.nodes[0], 1)\n         disconnect_nodes(self.nodes[1], 0)\n@@ -62,7 +59,7 @@ def run_test(self):\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n         connect_nodes_bi(self.nodes, 0, 1)\n-        blocks = self.nodes[1].generate(292)\n+        blocks = self.nodes[1].generatetoaddress(292, self.nodes[1].get_deterministic_priv_key().address)\n         sync_blocks([self.nodes[0], self.nodes[1]])\n \n         self.log.info(\"Make sure we can max retrieve block at tip-288.\")\n@@ -105,7 +102,7 @@ def run_test(self):\n         self.disconnect_all()\n \n         # mine 10 blocks on node 0 (pruned node)\n-        self.nodes[0].generate(10)\n+        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n \n         # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n         connect_nodes_bi(self.nodes, 0, 1)"
      },
      {
        "sha": "12265df09678d8011631ea8419dafefa10999bbf",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 18,
        "deletions": 21,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -188,9 +188,6 @@ def set_test_params(self):\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [[\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)\n@@ -303,7 +300,7 @@ def test_non_witness_transaction(self):\n         self.test_node.sync_with_ping()  # make sure the block was processed\n         txid = block.vtx[0].sha256\n \n-        self.nodes[0].generate(99)  # let the block mature\n+        self.nodes[0].generatetoaddress(99, self.nodes[0].get_deterministic_priv_key().address)  # let the block mature\n \n         # Create a transaction that spends the coinbase\n         tx = CTransaction()\n@@ -320,7 +317,7 @@ def test_non_witness_transaction(self):\n         assert(tx.hash in self.nodes[0].getrawmempool())\n         # Save this transaction for later\n         self.utxo.append(UTXO(tx.sha256, 0, 49 * 100000000))\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n \n     @subtest\n     def test_unnecessary_witness_before_segwit_activation(self):\n@@ -539,7 +536,7 @@ def advance_to_segwit_started(self):\n         # Will need to rewrite the tests here if we are past the first period\n         assert(height < VB_PERIOD - 1)\n         # Advance to end of period, status should now be 'started'\n-        self.nodes[0].generate(VB_PERIOD - height - 1)\n+        self.nodes[0].generatetoaddress(VB_PERIOD - height - 1, self.nodes[0].get_deterministic_priv_key().address)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n         self.segwit_status = 'started'\n \n@@ -595,11 +592,11 @@ def advance_to_segwit_lockin(self):\n         \"\"\"Mine enough blocks to lock in segwit, but don't activate.\"\"\"\n         height = self.nodes[0].getblockcount()\n         # Advance to end of period, and verify lock-in happens at the end\n-        self.nodes[0].generate(VB_PERIOD - 1)\n+        self.nodes[0].generatetoaddress(VB_PERIOD - 1, self.nodes[0].get_deterministic_priv_key().address)\n         height = self.nodes[0].getblockcount()\n         assert((height % VB_PERIOD) == VB_PERIOD - 2)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n         self.segwit_status = 'locked_in'\n \n@@ -639,7 +636,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Cleanup: mine the first transaction and update utxo\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generate(1, self.nodes[0].get_deterministic_priv_key().address)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.utxo.pop(0)\n@@ -667,7 +664,7 @@ def test_standardness_v0(self):\n \n         # Mine it on test_node to create the confirmed output.\n         test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_tx, with_witness=True, accepted=True)\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generate(1, self.nodes[0].get_deterministic_priv_key().address)\n         sync_blocks(self.nodes)\n \n         # Now test standardness of v0 P2WSH outputs.\n@@ -717,7 +714,7 @@ def test_standardness_v0(self):\n             assert_equal(self.nodes[0].testmempoolaccept([bytes_to_hex_str(tx3.serialize_with_witness())]), [{'txid': tx3.hash, 'allowed': True}])\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n@@ -727,9 +724,9 @@ def test_standardness_v0(self):\n     def advance_to_segwit_active(self):\n         \"\"\"Mine enough blocks to activate segwit.\"\"\"\n         height = self.nodes[0].getblockcount()\n-        self.nodes[0].generate(VB_PERIOD - (height % VB_PERIOD) - 2)\n+        self.nodes[0].generatetoaddress(VB_PERIOD - (height % VB_PERIOD) - 2, self.nodes[0].get_deterministic_priv_key().address)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'active')\n         self.segwit_status = 'active'\n \n@@ -1369,7 +1366,7 @@ def test_tx_relay_after_segwit_activation(self):\n         assert(vsize != raw_tx[\"size\"])\n \n         # Cleanup: mine the transactions and update utxo for next test\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.utxo.pop(0)\n@@ -1414,7 +1411,7 @@ def test_segwit_versions(self):\n             self.utxo.pop(0)\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n-        self.nodes[0].generate(1)  # Mine all the transactions\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)  # Mine all the transactions\n         sync_blocks(self.nodes)\n         assert(len(self.nodes[0].getrawmempool()) == 0)\n \n@@ -1479,14 +1476,14 @@ def test_premature_coinbase_witness_spend(self):\n         spend_tx.rehash()\n \n         # Now test a premature spend.\n-        self.nodes[0].generate(98)\n+        self.nodes[0].generatetoaddress(98, self.nodes[0].get_deterministic_priv_key().address)\n         sync_blocks(self.nodes)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n         test_witness_block(self.nodes[0], self.test_node, block2, accepted=False)\n \n         # Advancing one more block should allow the spend.\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n         test_witness_block(self.nodes[0], self.test_node, block2, accepted=True)\n@@ -1798,7 +1795,7 @@ def test_non_standard_witness_blinding(self):\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, False, True)\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n         sync_blocks(self.nodes)\n \n         # We'll add an unnecessary witness to this transaction that would cause\n@@ -1827,7 +1824,7 @@ def test_non_standard_witness_blinding(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx2, False, True)\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, False, True)\n \n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n         sync_blocks(self.nodes)\n \n         # Update our utxo list; we spent the first entry.\n@@ -1863,7 +1860,7 @@ def test_non_standard_witness(self):\n         txid = tx.sha256\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n         sync_blocks(self.nodes)\n \n         # Creating transactions for tests\n@@ -1926,7 +1923,7 @@ def test_non_standard_witness(self):\n         test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[3], True, False, 'bad-witness-nonstandard')\n         test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[3], True, True)\n \n-        self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)  # Mine and clean up the mempool of non-standard node\n         # Valid but non-standard transactions in a block should be accepted by standard node\n         sync_blocks(self.nodes)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)"
      },
      {
        "sha": "a07118c2daf76cc73d5603b3d88c55934d02aad1",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -208,15 +208,12 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def mine_blocks(self, count):\n         \"\"\"Mine count blocks and return the new tip.\"\"\"\n \n         # Clear out block announcements from each p2p listener\n         [x.clear_block_announcements() for x in self.nodes[0].p2ps]\n-        self.nodes[0].generate(count)\n+        self.nodes[0].generatetoaddress(count, self.nodes[0].get_deterministic_priv_key().address)\n         return int(self.nodes[0].getbestblockhash(), 16)\n \n     def mine_reorg(self, length):\n@@ -226,7 +223,8 @@ def mine_reorg(self, length):\n         to-be-reorged-out blocks are mined, so that we don't break later tests.\n         return the list of block hashes newly mined.\"\"\"\n \n-        self.nodes[0].generate(length)  # make sure all invalidated blocks are node0's\n+        # make sure all invalidated blocks are node0's\n+        self.nodes[0].generatetoaddress(length, self.nodes[0].get_deterministic_priv_key().address)  \n         sync_blocks(self.nodes, wait=0.1)\n         for x in self.nodes[0].p2ps:\n             x.wait_for_block_announcement(int(self.nodes[0].getbestblockhash(), 16))\n@@ -235,7 +233,7 @@ def mine_reorg(self, length):\n         tip_height = self.nodes[1].getblockcount()\n         hash_to_invalidate = self.nodes[1].getblockhash(tip_height - (length - 1))\n         self.nodes[1].invalidateblock(hash_to_invalidate)\n-        all_hashes = self.nodes[1].generate(length + 1)  # Must be longer than the orig chain\n+        all_hashes = self.nodes[1].generatetoaddress(length + 1, self.nodes[1].get_deterministic_priv_key().address)  # Must be longer than the orig chain\n         sync_blocks(self.nodes, wait=0.1)\n         return [int(x, 16) for x in all_hashes]\n \n@@ -254,7 +252,7 @@ def run_test(self):\n         self.test_nonnull_locators(test_node, inv_node)\n \n     def test_null_locators(self, test_node, inv_node):\n-        tip = self.nodes[0].getblockheader(self.nodes[0].generate(1)[0])\n+        tip = self.nodes[0].getblockheader(self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)[0])\n         tip_hash = int(tip[\"hash\"], 16)\n \n         inv_node.check_last_inv_announcement(inv=[tip_hash])"
      },
      {
        "sha": "3741b32516e4f8a1a04ec3ec32b03e17c41d773b",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python3\n+    #!/usr/bin/env python3\n # Copyright (c) 2015-2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -66,9 +66,6 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for\n@@ -85,8 +82,8 @@ def run_test(self):\n         min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n         # 1. Have nodes mine a block (leave IBD)\n-        [ n.generate(1) for n in self.nodes ]\n-        tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n+        [n.generatetoaddress(1, n.get_deterministic_priv_key().address) for n in self.nodes]\n+        tips = [int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes]\n \n         # 2. Send one block that builds on each tip.\n         # This should be accepted by node0"
      },
      {
        "sha": "15ad08f88e2bac0f5e9eaa6f6a0c26880d0f11b6",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -14,21 +14,18 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         self.setup_nodes()\n \n     def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n-        self.nodes[0].generate(4)\n+        self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n         assert(self.nodes[0].getblockcount() == 4)\n         besthash = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n-        self.nodes[1].generate(6)\n+        self.nodes[1].generate(6, self.nodes[1].get_deterministic_priv_key().address)\n         assert(self.nodes[1].getblockcount() == 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n@@ -56,7 +53,7 @@ def run_test(self):\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n         assert(self.nodes[2].getblockcount() == 2)\n         self.log.info(\"..and then mine a block\")\n-        self.nodes[2].generate(1)\n+        self.nodes[2].generate(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n         time.sleep(5)\n         assert_equal(self.nodes[2].getblockcount(), 3)"
      },
      {
        "sha": "72e6e6329f8509449f07e3140fc394b23633934a",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -38,26 +38,24 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         self.setup_nodes()\n \n     def run_test(self):\n         self.log.info(\"Ensure submitblock can in principle reorg to a competing chain\")\n-        self.nodes[0].generate(1)\n+        gen_address = lambda i: self.nodes[i].get_deterministic_priv_key().address  # A non-wallet address to mine to\n+        self.nodes[0].generatetoaddress(1, gen_address(0))\n         assert_equal(self.nodes[0].getblockcount(), 1)\n-        hashZ = self.nodes[1].generate(2)[-1]\n+        hashZ = self.nodes[1].generatetoaddress(2, gen_address(1))[-1]\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         node_sync_via_rpc(self.nodes[0:3])\n         assert_equal(self.nodes[0].getbestblockhash(), hashZ)\n \n         self.log.info(\"Mine blocks A-B-C on Node 0\")\n-        hashC = self.nodes[0].generate(3)[-1]\n+        hashC = self.nodes[0].generatetoaddress(3, gen_address(0))[-1]\n         assert_equal(self.nodes[0].getblockcount(), 5)\n         self.log.info(\"Mine competing blocks E-F-G on Node 1\")\n-        hashG = self.nodes[1].generate(3)[-1]\n+        hashG = self.nodes[1].generatetoaddress(3, gen_address(1))[-1]\n         assert_equal(self.nodes[1].getblockcount(), 5)\n         assert(hashC != hashG)\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n@@ -86,7 +84,7 @@ def run_test(self):\n         self.nodes[1].preciousblock(hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashC)\n         self.log.info(\"Mine another block (E-F-G-)H on Node 0 and reorg Node 1\")\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, gen_address(0))\n         assert_equal(self.nodes[0].getblockcount(), 6)\n         sync_blocks(self.nodes[0:2])\n         hashH = self.nodes[0].getbestblockhash()\n@@ -95,7 +93,7 @@ def run_test(self):\n         self.nodes[1].preciousblock(hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         self.log.info(\"Mine competing blocks I-J-K-L on Node 2\")\n-        self.nodes[2].generate(4)\n+        self.nodes[2].generatetoaddress(4, gen_address(2))\n         assert_equal(self.nodes[2].getblockcount(), 6)\n         hashL = self.nodes[2].getbestblockhash()\n         self.log.info(\"Connect nodes and check no reorg occurs\")"
      },
      {
        "sha": "9a589240a83dfdee9836a0d18a8e65b43cd8894f",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -271,7 +271,7 @@ def import_deterministic_coinbase_privkeys(self):\n                 assert str(e).startswith('Method not found')\n                 continue\n \n-            n.importprivkey(n.get_deterministic_priv_key()[1])\n+            n.importprivkey(n.get_deterministic_priv_key().key)\n \n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\"\n@@ -465,7 +465,7 @@ def _initialize_chain(self):\n                 for peer in range(4):\n                     for j in range(25):\n                         set_node_times(self.nodes, block_time)\n-                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key()[0])\n+                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)"
      },
      {
        "sha": "5c24a11b6f8a3fd6fd9ef34a384c496976c93763",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "patch": "@@ -99,17 +99,18 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n     def get_deterministic_priv_key(self):\n         \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n+        address_key_pair = namedtuple('address_key_pair', ['address', 'key'])\n         PRIV_KEYS = [\n             # address , privkey\n-            ('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n-            ('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n-            ('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n-            ('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n-            ('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n-            ('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n-            ('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n-            ('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n-            ('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n+            address_key_pair('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n+            address_key_pair('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n+            address_key_pair('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n+            address_key_pair('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n+            address_key_pair('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n+            address_key_pair('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n+            address_key_pair('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n+            address_key_pair('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n+            address_key_pair('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n         ]\n         return PRIV_KEYS[self.index]\n "
      }
    ]
  },
  {
    "sha": "31793bf5f17c322110d7d1c9914cf560cc66dd30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTc5M2JmNWYxN2MzMjIxMTBkN2QxYzk5MTRjZjU2MGNjNjZkZDMw",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T19:27:03Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T19:27:03Z"
      },
      "message": "Fixed test failures",
      "tree": {
        "sha": "d5c8ff73862562655bfba3d4efb59371f0dd7256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5c8ff73862562655bfba3d4efb59371f0dd7256"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31793bf5f17c322110d7d1c9914cf560cc66dd30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31793bf5f17c322110d7d1c9914cf560cc66dd30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31793bf5f17c322110d7d1c9914cf560cc66dd30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31793bf5f17c322110d7d1c9914cf560cc66dd30/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8eeb1daaf16c4ac91c841ac5dfd1410faaa0ecb2"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 23,
      "deletions": 20
    },
    "files": [
      {
        "sha": "88df61cabc72c06b9ea9af88bd272dc36782cdf0",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31793bf5f17c322110d7d1c9914cf560cc66dd30/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31793bf5f17c322110d7d1c9914cf560cc66dd30/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=31793bf5f17c322110d7d1c9914cf560cc66dd30",
        "patch": "@@ -96,7 +96,7 @@ def run_test(self):\n         self.restart_node(0)\n \n         # Generating one block guarantees that we'll get out of IBD\n-        node.generate(1, node_deterministic_address)\n+        node.generatetoaddress(1, node_deterministic_address)\n         wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n         # Generating one more block will be enough to generate an error.\n         node.generatetoaddress(1, node_deterministic_address)"
      },
      {
        "sha": "a1ab71f9f1ea9447aa655edd2ced40147ddf73dd",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31793bf5f17c322110d7d1c9914cf560cc66dd30/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31793bf5f17c322110d7d1c9914cf560cc66dd30/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=31793bf5f17c322110d7d1c9914cf560cc66dd30",
        "patch": "@@ -80,7 +80,7 @@ def run_test(self):\n         self.nodes[0].setmocktime(int(time.time()) - 60 * 24 * 60 * 60)\n \n         # Generating a chain of 10 blocks\n-        block_hashes = self.nodes[0].generatetoaddress(nblocks=10, self.nodes[0].get_deterministic_priv_key().address)\n+        block_hashes = self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n \n         # Create longer chain starting 2 blocks before current tip\n         height = len(block_hashes) - 2"
      },
      {
        "sha": "de12ab1ed668ff1d7e84c010551289148d6920e8",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 21,
        "deletions": 18,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31793bf5f17c322110d7d1c9914cf560cc66dd30/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31793bf5f17c322110d7d1c9914cf560cc66dd30/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=31793bf5f17c322110d7d1c9914cf560cc66dd30",
        "patch": "@@ -188,6 +188,9 @@ def set_test_params(self):\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [[\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)\n@@ -300,7 +303,7 @@ def test_non_witness_transaction(self):\n         self.test_node.sync_with_ping()  # make sure the block was processed\n         txid = block.vtx[0].sha256\n \n-        self.nodes[0].generatetoaddress(99, self.nodes[0].get_deterministic_priv_key().address)  # let the block mature\n+        self.nodes[0].generate(99)  # let the block mature\n \n         # Create a transaction that spends the coinbase\n         tx = CTransaction()\n@@ -317,7 +320,7 @@ def test_non_witness_transaction(self):\n         assert(tx.hash in self.nodes[0].getrawmempool())\n         # Save this transaction for later\n         self.utxo.append(UTXO(tx.sha256, 0, 49 * 100000000))\n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n \n     @subtest\n     def test_unnecessary_witness_before_segwit_activation(self):\n@@ -536,7 +539,7 @@ def advance_to_segwit_started(self):\n         # Will need to rewrite the tests here if we are past the first period\n         assert(height < VB_PERIOD - 1)\n         # Advance to end of period, status should now be 'started'\n-        self.nodes[0].generatetoaddress(VB_PERIOD - height - 1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(VB_PERIOD - height - 1)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n         self.segwit_status = 'started'\n \n@@ -592,11 +595,11 @@ def advance_to_segwit_lockin(self):\n         \"\"\"Mine enough blocks to lock in segwit, but don't activate.\"\"\"\n         height = self.nodes[0].getblockcount()\n         # Advance to end of period, and verify lock-in happens at the end\n-        self.nodes[0].generatetoaddress(VB_PERIOD - 1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(VB_PERIOD - 1)\n         height = self.nodes[0].getblockcount()\n         assert((height % VB_PERIOD) == VB_PERIOD - 2)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n         self.segwit_status = 'locked_in'\n \n@@ -636,7 +639,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Cleanup: mine the first transaction and update utxo\n-        self.nodes[0].generate(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.utxo.pop(0)\n@@ -664,7 +667,7 @@ def test_standardness_v0(self):\n \n         # Mine it on test_node to create the confirmed output.\n         test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_tx, with_witness=True, accepted=True)\n-        self.nodes[0].generate(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n         # Now test standardness of v0 P2WSH outputs.\n@@ -714,7 +717,7 @@ def test_standardness_v0(self):\n             assert_equal(self.nodes[0].testmempoolaccept([bytes_to_hex_str(tx3.serialize_with_witness())]), [{'txid': tx3.hash, 'allowed': True}])\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n         self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n@@ -724,9 +727,9 @@ def test_standardness_v0(self):\n     def advance_to_segwit_active(self):\n         \"\"\"Mine enough blocks to activate segwit.\"\"\"\n         height = self.nodes[0].getblockcount()\n-        self.nodes[0].generatetoaddress(VB_PERIOD - (height % VB_PERIOD) - 2, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(VB_PERIOD - (height % VB_PERIOD) - 2)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'active')\n         self.segwit_status = 'active'\n \n@@ -1366,7 +1369,7 @@ def test_tx_relay_after_segwit_activation(self):\n         assert(vsize != raw_tx[\"size\"])\n \n         # Cleanup: mine the transactions and update utxo for next test\n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.utxo.pop(0)\n@@ -1411,7 +1414,7 @@ def test_segwit_versions(self):\n             self.utxo.pop(0)\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)  # Mine all the transactions\n+        self.nodes[0].generate(1)  # Mine all the transactions\n         sync_blocks(self.nodes)\n         assert(len(self.nodes[0].getrawmempool()) == 0)\n \n@@ -1476,14 +1479,14 @@ def test_premature_coinbase_witness_spend(self):\n         spend_tx.rehash()\n \n         # Now test a premature spend.\n-        self.nodes[0].generatetoaddress(98, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(98)\n         sync_blocks(self.nodes)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n         test_witness_block(self.nodes[0], self.test_node, block2, accepted=False)\n \n         # Advancing one more block should allow the spend.\n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n         test_witness_block(self.nodes[0], self.test_node, block2, accepted=True)\n@@ -1795,7 +1798,7 @@ def test_non_standard_witness_blinding(self):\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, False, True)\n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n         # We'll add an unnecessary witness to this transaction that would cause\n@@ -1824,7 +1827,7 @@ def test_non_standard_witness_blinding(self):\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx2, False, True)\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, False, True)\n \n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n         # Update our utxo list; we spent the first entry.\n@@ -1860,7 +1863,7 @@ def test_non_standard_witness(self):\n         txid = tx.sha256\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n         # Creating transactions for tests\n@@ -1923,7 +1926,7 @@ def test_non_standard_witness(self):\n         test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[3], True, False, 'bad-witness-nonstandard')\n         test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[3], True, True)\n \n-        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)  # Mine and clean up the mempool of non-standard node\n+        self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n         # Valid but non-standard transactions in a block should be accepted by standard node\n         sync_blocks(self.nodes)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)"
      }
    ]
  },
  {
    "sha": "c847c8057691b7b6e52056032912ab33a4c9cfa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODQ3YzgwNTc2OTFiN2I2ZTUyMDU2MDMyOTEyYWIzM2E0YzljZmEw",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T20:12:37Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T20:12:37Z"
      },
      "message": "Fixed test bugs",
      "tree": {
        "sha": "1feafbc96f5f69b894c3d2cdf63fc04ebe089506",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1feafbc96f5f69b894c3d2cdf63fc04ebe089506"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c847c8057691b7b6e52056032912ab33a4c9cfa0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c847c8057691b7b6e52056032912ab33a4c9cfa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c847c8057691b7b6e52056032912ab33a4c9cfa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c847c8057691b7b6e52056032912ab33a4c9cfa0/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31793bf5f17c322110d7d1c9914cf560cc66dd30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31793bf5f17c322110d7d1c9914cf560cc66dd30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31793bf5f17c322110d7d1c9914cf560cc66dd30"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "29ff9cb1d8fa131311e319872dc9d28da94beabc",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c847c8057691b7b6e52056032912ab33a4c9cfa0/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c847c8057691b7b6e52056032912ab33a4c9cfa0/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=c847c8057691b7b6e52056032912ab33a4c9cfa0",
        "patch": "@@ -139,7 +139,7 @@ def run_test(self):\n         self.nodes[0].add_p2p_connection(BaseNode())\n \n         # Generating a block on one of the nodes will get us out of IBD\n-        blocks = [int(self.nodes[0].generatetoaddress(nblocks=1, self.nodes[0].get_deterministic_priv_key().address)[0], 16)]\n+        blocks = [int(self.nodes[0].generatetoaddress(nblocks=1), 16)]\n         self.sync_all([self.nodes[0:2]])\n \n         # Notice above how we called an RPC by calling a method with the same"
      },
      {
        "sha": "fab088719756c63bce740c0c8f79eb0e81c316db",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c847c8057691b7b6e52056032912ab33a4c9cfa0/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c847c8057691b7b6e52056032912ab33a4c9cfa0/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=c847c8057691b7b6e52056032912ab33a4c9cfa0",
        "patch": "@@ -111,7 +111,7 @@ def run_test(self):\n \n         # Longest chain is extended so stale is much older than chain tip\n         self.nodes[0].setmocktime(0)\n-        tip = self.nodes[0].generatetoaddress(nblocks=1, self.nodes[0].get_deterministic_priv_key().address)[0]\n+        tip = self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)[0]\n         assert_equal(self.nodes[0].getblockcount(), 14)\n \n         # Send getdata & getheaders to refresh last received getheader message"
      },
      {
        "sha": "d8ecdd573aac5ce3e20cac6cb39eb5b597f375f1",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c847c8057691b7b6e52056032912ab33a4c9cfa0/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c847c8057691b7b6e52056032912ab33a4c9cfa0/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=c847c8057691b7b6e52056032912ab33a4c9cfa0",
        "patch": "@@ -25,7 +25,7 @@ def run_test(self):\n         besthash = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n-        self.nodes[1].generate(6, self.nodes[1].get_deterministic_priv_key().address)\n+        self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n         assert(self.nodes[1].getblockcount() == 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n@@ -53,7 +53,7 @@ def run_test(self):\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n         assert(self.nodes[2].getblockcount() == 2)\n         self.log.info(\"..and then mine a block\")\n-        self.nodes[2].generate(1, self.nodes[2].get_deterministic_priv_key().address)\n+        self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n         time.sleep(5)\n         assert_equal(self.nodes[2].getblockcount(), 3)"
      },
      {
        "sha": "5459795fd8856ecf976485e0dbbcd2369596baae",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c847c8057691b7b6e52056032912ab33a4c9cfa0/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c847c8057691b7b6e52056032912ab33a4c9cfa0/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=c847c8057691b7b6e52056032912ab33a4c9cfa0",
        "patch": "@@ -420,11 +420,12 @@ def _start_logging(self):\n     def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n-        Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n+        Create a cache of a 200-block-long chain (with wallet only if the wallet is compiled) for MAX_NODES\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n         assert self.num_nodes <= MAX_NODES\n         create_cache = False\n+        wallet_compiled = self.is_wallet_compiled()\n         for i in range(MAX_NODES):\n             if not os.path.isdir(get_datadir_path(self.options.cachedir, i)):\n                 create_cache = True\n@@ -465,7 +466,10 @@ def _initialize_chain(self):\n                 for peer in range(4):\n                     for j in range(25):\n                         set_node_times(self.nodes, block_time)\n-                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n+                        if wallet_compiled:\n+                            self.nodes[peer].generate(1)\n+                        else\n+                            self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)"
      }
    ]
  },
  {
    "sha": "55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWYzYWQzY2RmYzc2M2NmNGE3YTNjNWZlNDg5MDIwNTE1MGYwMGEy",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T20:19:49Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T20:19:49Z"
      },
      "message": "Tests fixed",
      "tree": {
        "sha": "c01d914a6d9aae6f419eaaf17629a9129a103b33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c01d914a6d9aae6f419eaaf17629a9129a103b33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c847c8057691b7b6e52056032912ab33a4c9cfa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c847c8057691b7b6e52056032912ab33a4c9cfa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c847c8057691b7b6e52056032912ab33a4c9cfa0"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "224f859b41307dc4b835452613287f81bab09b16",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2",
        "patch": "@@ -468,7 +468,7 @@ def _initialize_chain(self):\n                         set_node_times(self.nodes, block_time)\n                         if wallet_compiled:\n                             self.nodes[peer].generate(1)\n-                        else\n+                        else:\n                             self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks"
      },
      {
        "sha": "66869989092b6cb8518f85da50189bb99732f733",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2",
        "patch": "@@ -17,6 +17,7 @@\n import tempfile\n import time\n import urllib.parse\n+import collections\n \n from .authproxy import JSONRPCException\n from .util import (\n@@ -99,7 +100,7 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n     def get_deterministic_priv_key(self):\n         \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n-        address_key_pair = namedtuple('address_key_pair', ['address', 'key'])\n+        address_key_pair = collections.namedtuple('address_key_pair', ['address', 'key'])\n         PRIV_KEYS = [\n             # address , privkey\n             address_key_pair('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),"
      }
    ]
  },
  {
    "sha": "ca0a840393516964247e5120248bd82336cbd131",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTBhODQwMzkzNTE2OTY0MjQ3ZTUxMjAyNDhiZDgyMzM2Y2JkMTMx",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T20:57:53Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T20:57:53Z"
      },
      "message": "Increased coverage of non-wallet tests",
      "tree": {
        "sha": "8b0193dfab6d68e9b2cc728e79abcdf51a1266f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b0193dfab6d68e9b2cc728e79abcdf51a1266f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca0a840393516964247e5120248bd82336cbd131",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca0a840393516964247e5120248bd82336cbd131",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca0a840393516964247e5120248bd82336cbd131",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca0a840393516964247e5120248bd82336cbd131/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55f3ad3cdfc763cf4a7a3c5fe4890205150f00a2"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 9,
      "deletions": 21
    },
    "files": [
      {
        "sha": "b6b0af434bdfa2a4dd770a1d9cbdc2187c37cdb0",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca0a840393516964247e5120248bd82336cbd131/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca0a840393516964247e5120248bd82336cbd131/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=ca0a840393516964247e5120248bd82336cbd131",
        "patch": "@@ -139,7 +139,7 @@ def run_test(self):\n         self.nodes[0].add_p2p_connection(BaseNode())\n \n         # Generating a block on one of the nodes will get us out of IBD\n-        blocks = [int(self.nodes[0].generatetoaddress(nblocks=1), 16)]\n+        blocks = [int(self.nodes[0].generate(nblocks=1), 16)]\n         self.sync_all([self.nodes[0:2]])\n \n         # Notice above how we called an RPC by calling a method with the same"
      },
      {
        "sha": "f30e1191e322957d3d5ad0bb2eb2303b0771823b",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca0a840393516964247e5120248bd82336cbd131/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca0a840393516964247e5120248bd82336cbd131/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=ca0a840393516964247e5120248bd82336cbd131",
        "patch": "@@ -18,9 +18,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()"
      },
      {
        "sha": "ff55ea552824735a5d977fb7d66eeb4be3c7c6e8",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca0a840393516964247e5120248bd82336cbd131/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca0a840393516964247e5120248bd82336cbd131/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=ca0a840393516964247e5120248bd82336cbd131",
        "patch": "@@ -38,9 +38,6 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         node = self.nodes[0]\n \n@@ -61,7 +58,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         assert_equal(mining_info['pooledtx'], 0)\n \n         # Mine a block to leave initial block download\n-        node.generate(1)\n+        node.generatetoaddress(1, node.get_deterministic_priv_key().address)\n         tmpl = node.getblocktemplate()\n         self.log.info(\"getblocktemplate: Test capability advertised\")\n         assert 'proposal' in tmpl['capabilities']\n@@ -212,7 +209,7 @@ def chain_tip(b_hash, *, status='headers-only', branchlen=1):\n         assert chain_tip(block.hash, status='active', branchlen=0) in node.getchaintips()\n \n         # Building a few blocks should give the same results\n-        node.generate(10)\n+        node.generatetoaddress(10, node.get_deterministic_priv_key().address)\n         assert_raises_rpc_error(-25, 'time-too-old', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block_time).serialize())))\n         assert_raises_rpc_error(-25, 'bad-prevblk', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block2).serialize())))\n         node.submitheader(hexdata=b2x(CBlockHeader(block).serialize()))"
      },
      {
        "sha": "b4c74094ec4ed3f5f1aaf0f552eaa4ac13db0938",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca0a840393516964247e5120248bd82336cbd131/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca0a840393516964247e5120248bd82336cbd131/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=ca0a840393516964247e5120248bd82336cbd131",
        "patch": "@@ -20,7 +20,7 @@ def skip_test_if_missing_module(self):\n \n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n-        node.generate(1)  # Get node out of IBD\n+        node.generatetoaddress(1, node.get_deterministic_priv_key().address)  # Get node out of IBD\n \n         self.log.info('Test max locator size')\n         block_count = node.getblockcount()"
      },
      {
        "sha": "336d34a81d93b3c0186df0b4e0dc6dea7eda5c75",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca0a840393516964247e5120248bd82336cbd131/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca0a840393516964247e5120248bd82336cbd131/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=ca0a840393516964247e5120248bd82336cbd131",
        "patch": "@@ -93,9 +93,6 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore=' + str(banscore)]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False, wait_for_verack=False)\n         no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)\n@@ -106,7 +103,7 @@ def run_test(self):\n         wait_until(lambda: no_verack_idlenode.version_received, timeout=10, lock=mininode_lock)\n \n         # Mine a block and make sure that it's not sent to the connected nodes\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n \n         #Give the node enough time to possibly leak out a message\n         time.sleep(5)"
      },
      {
        "sha": "f67ecc247cec3176052b7a933f0dc707b9acbeca",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca0a840393516964247e5120248bd82336cbd131/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca0a840393516964247e5120248bd82336cbd131/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=ca0a840393516964247e5120248bd82336cbd131",
        "patch": "@@ -48,9 +48,6 @@ class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n \n@@ -242,12 +239,12 @@ def _test_getnetworkhashps(self):\n \n     def _test_stopatheight(self):\n         assert_equal(self.nodes[0].getblockcount(), 200)\n-        self.nodes[0].generate(6)\n+        self.nodes[0].generatetoaddress(6, self.nodes[0].get_deterministic_priv_key().address)\n         assert_equal(self.nodes[0].getblockcount(), 206)\n         self.log.debug('Node should not stop at this height')\n         assert_raises(subprocess.TimeoutExpired, lambda: self.nodes[0].process.wait(timeout=3))\n         try:\n-            self.nodes[0].generate(1)\n+            self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')"
      },
      {
        "sha": "3e791584c36ab7b6d11fa9e7cea8bafa87afdc9a",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca0a840393516964247e5120248bd82336cbd131/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca0a840393516964247e5120248bd82336cbd131/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=ca0a840393516964247e5120248bd82336cbd131",
        "patch": "@@ -29,8 +29,8 @@ def run_test(self):\n \n         # Split the network and build two chains of different lengths.\n         self.split_network()\n-        self.nodes[0].generate(10)\n-        self.nodes[2].generate(20)\n+        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[2].generatetoaddress(20, self.nodes[2].get_deterministic_priv_key().address)\n         self.sync_all([self.nodes[:2], self.nodes[2:]])\n \n         tips = self.nodes[1].getchaintips ()"
      }
    ]
  },
  {
    "sha": "c965233ab58c617321605f47b78fdbf526b2e2a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTY1MjMzYWI1OGM2MTczMjE2MDVmNDdiNzhmZGJmNTI2YjJlMmE0",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T21:13:50Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T21:13:50Z"
      },
      "message": "Increased even more coverage",
      "tree": {
        "sha": "33349dd2145091eb40abb9788b1fb7715fc54690",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33349dd2145091eb40abb9788b1fb7715fc54690"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c965233ab58c617321605f47b78fdbf526b2e2a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c965233ab58c617321605f47b78fdbf526b2e2a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c965233ab58c617321605f47b78fdbf526b2e2a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c965233ab58c617321605f47b78fdbf526b2e2a4/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca0a840393516964247e5120248bd82336cbd131",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca0a840393516964247e5120248bd82336cbd131",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca0a840393516964247e5120248bd82336cbd131"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0a57a062f2797d4587a62e2be5225b0c81bb0659",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c965233ab58c617321605f47b78fdbf526b2e2a4/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c965233ab58c617321605f47b78fdbf526b2e2a4/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=c965233ab58c617321605f47b78fdbf526b2e2a4",
        "patch": "@@ -139,7 +139,7 @@ def run_test(self):\n         self.nodes[0].add_p2p_connection(BaseNode())\n \n         # Generating a block on one of the nodes will get us out of IBD\n-        blocks = [int(self.nodes[0].generate(nblocks=1), 16)]\n+        blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n         self.sync_all([self.nodes[0:2]])\n \n         # Notice above how we called an RPC by calling a method with the same"
      },
      {
        "sha": "940b403f9c183e346e7d0ae1de85c767838fa4ff",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c965233ab58c617321605f47b78fdbf526b2e2a4/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c965233ab58c617321605f47b78fdbf526b2e2a4/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=c965233ab58c617321605f47b78fdbf526b2e2a4",
        "patch": "@@ -19,7 +19,7 @@ def set_test_params(self):\n         self.num_nodes = 1\n \n     def reindex(self, justchainstate=False):\n-        self.nodes[0].generate(3)\n+        self.nodes[0].generatetoaddress(3, self.nodes[0].get_deterministic_priv_key().address)\n         blockcount = self.nodes[0].getblockcount()\n         self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\"]]"
      },
      {
        "sha": "d856e8f8c2a9ab08e599a59386e68416d96d1599",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c965233ab58c617321605f47b78fdbf526b2e2a4/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c965233ab58c617321605f47b78fdbf526b2e2a4/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=c965233ab58c617321605f47b78fdbf526b2e2a4",
        "patch": "@@ -14,10 +14,7 @@ class InvalidLocatorTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n+    \n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n         node.generatetoaddress(1, node.get_deterministic_priv_key().address)  # Get node out of IBD"
      },
      {
        "sha": "c869c7262f4b2c74cef0e8a7f919fd892ca9c218",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c965233ab58c617321605f47b78fdbf526b2e2a4/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c965233ab58c617321605f47b78fdbf526b2e2a4/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=c965233ab58c617321605f47b78fdbf526b2e2a4",
        "patch": "@@ -17,9 +17,6 @@ class GetChainTipsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         tips = self.nodes[0].getchaintips()\n         assert_equal(len(tips), 1)"
      }
    ]
  },
  {
    "sha": "6e9b6bab291f766defab24022117fd780be45ed5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTliNmJhYjI5MWY3NjZkZWZhYjI0MDIyMTE3ZmQ3ODBiZTQ1ZWQ1",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T21:24:56Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T21:24:56Z"
      },
      "message": "Increased even more coverage 2.0",
      "tree": {
        "sha": "aa61b008b544afc8601915e36bbd6bd424c3a0e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa61b008b544afc8601915e36bbd6bd424c3a0e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e9b6bab291f766defab24022117fd780be45ed5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e9b6bab291f766defab24022117fd780be45ed5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e9b6bab291f766defab24022117fd780be45ed5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e9b6bab291f766defab24022117fd780be45ed5/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c965233ab58c617321605f47b78fdbf526b2e2a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c965233ab58c617321605f47b78fdbf526b2e2a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c965233ab58c617321605f47b78fdbf526b2e2a4"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "88c19efc85dbc39b95780316e4f7798112014a06",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e9b6bab291f766defab24022117fd780be45ed5/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e9b6bab291f766defab24022117fd780be45ed5/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=6e9b6bab291f766defab24022117fd780be45ed5",
        "patch": "@@ -85,9 +85,10 @@ def set_test_params(self):\n \n         # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n-    # Use skip_test_if_missing_module() to skip the test if the required module is missing\n-    # def skip_test_if_missing_module(self):\n-    #     self.skip_if_no_wallet()\n+    # Use skip_test_if_missing_module() to skip the test if your test requires certain modules to be present.\n+    # This test uses generate which requires wallet to be compiled\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     # Use add_options() to add specific command-line options for your test.\n     # In practice this is not used very much, since the tests are mostly written"
      }
    ]
  },
  {
    "sha": "6f470017f2d02927b1875fdfb084d69f000f363f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjQ3MDAxN2YyZDAyOTI3YjE4NzVmZGZiMDg0ZDY5ZjAwMGYzNjNm",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-13T20:59:31Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T21:36:30Z"
      },
      "message": "[qa] Use correct python index slices in example test",
      "tree": {
        "sha": "26cc08dd21f4757b5b521a2d6163515b281dc2a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26cc08dd21f4757b5b521a2d6163515b281dc2a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f470017f2d02927b1875fdfb084d69f000f363f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f470017f2d02927b1875fdfb084d69f000f363f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f470017f2d02927b1875fdfb084d69f000f363f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f470017f2d02927b1875fdfb084d69f000f363f/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efb11d7c055f4633c90faf5deef4a26f3e47ceb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb11d7c055f4633c90faf5deef4a26f3e47ceb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efb11d7c055f4633c90faf5deef4a26f3e47ceb2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "937a525401771593b05fe7b66f649d0d47aa2f72",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f470017f2d02927b1875fdfb084d69f000f363f/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f470017f2d02927b1875fdfb084d69f000f363f/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=6f470017f2d02927b1875fdfb084d69f000f363f",
        "patch": "@@ -115,7 +115,7 @@ def setup_network(self):\n         # sync_all() should not include node2, since we're not expecting it to\n         # sync.\n         connect_nodes(self.nodes[0], 1)\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n     # Use setup_nodes() to customize the node start behaviour (for example if\n     # you don't want to start all nodes at the start of the test).\n@@ -139,7 +139,7 @@ def run_test(self):\n \n         # Generating a block on one of the nodes will get us out of IBD\n         blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n         # Notice above how we called an RPC by calling a method with the same\n         # name on the node object. Notice also how we used a keyword argument"
      }
    ]
  },
  {
    "sha": "9d2bb56e2844eb3b060172cc1a35390693fb6d1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDJiYjU2ZTI4NDRlYjNiMDYwMTcyY2MxYTM1MzkwNjkzZmI2ZDFl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-14T02:15:30Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T21:36:31Z"
      },
      "message": "Move BerkeleyEnvironment deletion from internal method to callsite\n\nInstead of having the object destroy itself, having the caller\ndestroy it.",
      "tree": {
        "sha": "b2c3d3582a0f0f423564a1410bcba612f3774647",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2c3d3582a0f0f423564a1410bcba612f3774647"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d2bb56e2844eb3b060172cc1a35390693fb6d1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d2bb56e2844eb3b060172cc1a35390693fb6d1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d2bb56e2844eb3b060172cc1a35390693fb6d1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d2bb56e2844eb3b060172cc1a35390693fb6d1e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f470017f2d02927b1875fdfb084d69f000f363f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f470017f2d02927b1875fdfb084d69f000f363f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f470017f2d02927b1875fdfb084d69f000f363f"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "326ec6b94560c25a260c5b0f1813cc26fc44677f",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d2bb56e2844eb3b060172cc1a35390693fb6d1e/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d2bb56e2844eb3b060172cc1a35390693fb6d1e/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=9d2bb56e2844eb3b060172cc1a35390693fb6d1e",
        "patch": "@@ -697,7 +697,6 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 if (!fMockDb) {\n                     fs::remove_all(fs::path(strPath) / \"database\");\n                 }\n-                g_dbenvs.erase(strPath);\n             }\n         }\n     }\n@@ -796,6 +795,10 @@ void BerkeleyDatabase::Flush(bool shutdown)\n {\n     if (!IsDummy()) {\n         env->Flush(shutdown);\n-        if (shutdown) env = nullptr;\n+        if (shutdown) {\n+            LOCK(cs_db);\n+            g_dbenvs.erase(env->Directory().string());\n+            env = nullptr;\n+        }\n     }\n }"
      }
    ]
  },
  {
    "sha": "1858a01366dfdd1180a5250625d8aeaa72fdc0ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODU4YTAxMzY2ZGZkZDExODBhNTI1MDYyNWQ4YWVhYTcyZmRjMGFk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-20T20:28:42Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T21:36:32Z"
      },
      "message": "Add function to close all Db's and reload the databae environment\n\nAdds a ReloadDbEnv function to BerkeleyEnvironment in order to close all Db\ninstances, closes the environment, resets it, and then reopens\nthe BerkeleyEnvironment.\n\nAlso adds a ReloadDbEnv function to BerkeleyDatabase that calls\nBerkeleyEnvironment's ReloadDbEnv.",
      "tree": {
        "sha": "e6f5c1f5dcbb61f8b514963e8a2d8b672a58f470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6f5c1f5dcbb61f8b514963e8a2d8b672a58f470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1858a01366dfdd1180a5250625d8aeaa72fdc0ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1858a01366dfdd1180a5250625d8aeaa72fdc0ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1858a01366dfdd1180a5250625d8aeaa72fdc0ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1858a01366dfdd1180a5250625d8aeaa72fdc0ad/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d2bb56e2844eb3b060172cc1a35390693fb6d1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d2bb56e2844eb3b060172cc1a35390693fb6d1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d2bb56e2844eb3b060172cc1a35390693fb6d1e"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 38,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a7bf89c57286603aef09a064d6809c782c2946f1",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1858a01366dfdd1180a5250625d8aeaa72fdc0ad/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1858a01366dfdd1180a5250625d8aeaa72fdc0ad/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=1858a01366dfdd1180a5250625d8aeaa72fdc0ad",
        "patch": "@@ -556,6 +556,7 @@ void BerkeleyBatch::Close()\n         LOCK(cs_db);\n         --env->mapFileUseCount[strFile];\n     }\n+    env->m_db_in_use.notify_all();\n }\n \n void BerkeleyEnvironment::CloseDb(const std::string& strFile)\n@@ -572,6 +573,32 @@ void BerkeleyEnvironment::CloseDb(const std::string& strFile)\n     }\n }\n \n+void BerkeleyEnvironment::ReloadDbEnv()\n+{\n+    // Make sure that no Db's are in use\n+    AssertLockNotHeld(cs_db);\n+    std::unique_lock<CCriticalSection> lock(cs_db);\n+    m_db_in_use.wait(lock, [this](){\n+        for (auto& count : mapFileUseCount) {\n+            if (count.second > 0) return false;\n+        }\n+        return true;\n+    });\n+\n+    std::vector<std::string> filenames;\n+    for (auto it : mapDb) {\n+        filenames.push_back(it.first);\n+    }\n+    // Close the individual Db's\n+    for (const std::string& filename : filenames) {\n+        CloseDb(filename);\n+    }\n+    // Reset the environment\n+    Flush(true); // This will flush and close the environment\n+    Reset();\n+    Open(true);\n+}\n+\n bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n {\n     if (database.IsDummy()) {\n@@ -802,3 +829,10 @@ void BerkeleyDatabase::Flush(bool shutdown)\n         }\n     }\n }\n+\n+void BerkeleyDatabase::ReloadDbEnv()\n+{\n+    if (!IsDummy()) {\n+        env->ReloadDbEnv();\n+    }\n+}"
      },
      {
        "sha": "467ed13b450e8570f44d54fb2c6d9d0190003ac2",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1858a01366dfdd1180a5250625d8aeaa72fdc0ad/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1858a01366dfdd1180a5250625d8aeaa72fdc0ad/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=1858a01366dfdd1180a5250625d8aeaa72fdc0ad",
        "patch": "@@ -38,6 +38,7 @@ class BerkeleyEnvironment\n     std::unique_ptr<DbEnv> dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n+    std::condition_variable_any m_db_in_use;\n \n     BerkeleyEnvironment(const fs::path& env_directory);\n     ~BerkeleyEnvironment();\n@@ -75,6 +76,7 @@ class BerkeleyEnvironment\n     void CheckpointLSN(const std::string& strFile);\n \n     void CloseDb(const std::string& strFile);\n+    void ReloadDbEnv();\n \n     DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)\n     {\n@@ -145,6 +147,8 @@ class BerkeleyDatabase\n \n     void IncrementUpdateCounter();\n \n+    void ReloadDbEnv();\n+\n     std::atomic<unsigned int> nUpdateCounter;\n     unsigned int nLastSeen;\n     unsigned int nLastFlushed;"
      }
    ]
  },
  {
    "sha": "79d3e3952944206e00397cbd3a5a1b9110464677",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OWQzZTM5NTI5NDQyMDZlMDAzOTdjYmQzYTVhMWI5MTEwNDY0Njc3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-20T21:08:36Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T21:36:33Z"
      },
      "message": "After encrypting the wallet, reload the database environment\n\nCalls ReloadDbEnv after encrypting the wallet so that the database\nenvironment is flushed, closed, and reopened to prevent unencrypted\nkeys from being saved on disk.",
      "tree": {
        "sha": "d0fa18fdf4cf4c7cd3b362e5e4a4bf51fd3b2307",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0fa18fdf4cf4c7cd3b362e5e4a4bf51fd3b2307"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79d3e3952944206e00397cbd3a5a1b9110464677",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79d3e3952944206e00397cbd3a5a1b9110464677",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79d3e3952944206e00397cbd3a5a1b9110464677",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79d3e3952944206e00397cbd3a5a1b9110464677/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1858a01366dfdd1180a5250625d8aeaa72fdc0ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1858a01366dfdd1180a5250625d8aeaa72fdc0ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1858a01366dfdd1180a5250625d8aeaa72fdc0ad"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7f7a88e986709a652dd33d821675082f66ec0bd8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d3e3952944206e00397cbd3a5a1b9110464677/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d3e3952944206e00397cbd3a5a1b9110464677/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=79d3e3952944206e00397cbd3a5a1b9110464677",
        "patch": "@@ -722,6 +722,11 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         // bits of the unencrypted private key in slack space in the database file.\n         database->Rewrite();\n \n+        // BDB seems to have a bad habit of writing old data into\n+        // slack space in .dat files; that is bad if the old data is\n+        // unencrypted private keys. So:\n+        database->ReloadDbEnv();\n+\n     }\n     NotifyStatusChanged(this);\n "
      }
    ]
  },
  {
    "sha": "bf667f974496fc47d116c71531f102f7b77dee73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjY2N2Y5NzQ0OTZmYzQ3ZDExNmM3MTUzMWYxMDJmN2I3N2RlZTcz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-20T21:09:51Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T21:36:34Z"
      },
      "message": "No longer shutdown after encrypting the wallet\n\nSince the database environment is flushed, closed, and reopened during\nEncryptWallet, there is no need to shut down the software anymore.",
      "tree": {
        "sha": "56b0046b9f43a51874103de4d0585755d8349a7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56b0046b9f43a51874103de4d0585755d8349a7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf667f974496fc47d116c71531f102f7b77dee73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf667f974496fc47d116c71531f102f7b77dee73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf667f974496fc47d116c71531f102f7b77dee73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf667f974496fc47d116c71531f102f7b77dee73/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79d3e3952944206e00397cbd3a5a1b9110464677",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79d3e3952944206e00397cbd3a5a1b9110464677",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79d3e3952944206e00397cbd3a5a1b9110464677"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 9,
      "deletions": 30
    },
    "files": [
      {
        "sha": "a0270daf99d59494086ea0e8d131a82d130144b9",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf667f974496fc47d116c71531f102f7b77dee73/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf667f974496fc47d116c71531f102f7b77dee73/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=bf667f974496fc47d116c71531f102f7b77dee73",
        "patch": "@@ -123,16 +123,15 @@ void AskPassphraseDialog::accept()\n                 {\n                     QMessageBox::warning(this, tr(\"Wallet encrypted\"),\n                                          \"<qt>\" +\n-                                         tr(\"%1 will close now to finish the encryption process. \"\n+                                         tr(\"Your wallet is now encrypted. \"\n                                          \"Remember that encrypting your wallet cannot fully protect \"\n-                                         \"your bitcoins from being stolen by malware infecting your computer.\").arg(tr(PACKAGE_NAME)) +\n+                                         \"your bitcoins from being stolen by malware infecting your computer.\") +\n                                          \"<br><br><b>\" +\n                                          tr(\"IMPORTANT: Any previous backups you have made of your wallet file \"\n                                          \"should be replaced with the newly generated, encrypted wallet file. \"\n                                          \"For security reasons, previous backups of the unencrypted wallet file \"\n                                          \"will become useless as soon as you start using the new, encrypted wallet.\") +\n                                          \"</b></qt>\");\n-                    QApplication::quit();\n                 }\n                 else\n                 {"
      },
      {
        "sha": "1a2dff9a96f1fed0990c62f0223211b1d7165b5b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf667f974496fc47d116c71531f102f7b77dee73/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf667f974496fc47d116c71531f102f7b77dee73/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bf667f974496fc47d116c71531f102f7b77dee73",
        "patch": "@@ -2121,7 +2121,6 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n             \"will require the passphrase to be set prior the making these calls.\\n\"\n             \"Use the walletpassphrase call for this, and then walletlock call.\\n\"\n             \"If the wallet is already encrypted, use the walletpassphrasechange call.\\n\"\n-            \"Note that this will shutdown the server.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"passphrase\\\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\\n\"\n             \"\\nExamples:\\n\"\n@@ -2159,11 +2158,7 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Failed to encrypt the wallet.\");\n     }\n \n-    // BDB seems to have a bad habit of writing old data into\n-    // slack space in .dat files; that is bad if the old data is\n-    // unencrypted private keys. So:\n-    StartShutdown();\n-    return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n+    return \"wallet encrypted; The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n }\n \n static UniValue lockunspent(const JSONRPCRequest& request)"
      },
      {
        "sha": "0c61e9ab62f7032979e976ea769cd2c960bdd4ef",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=bf667f974496fc47d116c71531f102f7b77dee73",
        "patch": "@@ -478,10 +478,8 @@ def run_test(self):\n \n         ############################################################\n         # locked wallet test\n-        self.stop_node(0)\n-        self.nodes[1].node_encrypt_wallet(\"test\")\n-        self.stop_node(2)\n-        self.stop_node(3)\n+        self.nodes[1].encryptwallet(\"test\")\n+        self.stop_nodes()\n \n         self.start_nodes()\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "c267f7f24f43cc5b82fa1309d27fa3f2d4826fc4",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=bf667f974496fc47d116c71531f102f7b77dee73",
        "patch": "@@ -305,14 +305,6 @@ def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, mat\n                     assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n                 self._raise_assertion_error(assert_msg)\n \n-    def node_encrypt_wallet(self, passphrase):\n-        \"\"\"\"Encrypts the wallet.\n-\n-        This causes bitcoind to shutdown, so this method takes\n-        care of cleaning up resources.\"\"\"\n-        self.encryptwallet(passphrase)\n-        self.wait_until_stopped()\n-\n     def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n         \"\"\"Add a p2p connection to the node.\n "
      },
      {
        "sha": "67ee00871d9ba791b83e532d39d0cc11ea4ba402",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=bf667f974496fc47d116c71531f102f7b77dee73",
        "patch": "@@ -42,8 +42,7 @@ def skip_test_if_missing_module(self):\n \n     def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test\n-        self.nodes[1].node_encrypt_wallet(WALLET_PASSPHRASE)\n-        self.start_node(1)\n+        self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n         connect_nodes_bi(self.nodes, 0, 1)"
      },
      {
        "sha": "b1db1e4ab97c79ff0b11e895bd72b17ae9cc3fbe",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=bf667f974496fc47d116c71531f102f7b77dee73",
        "patch": "@@ -132,8 +132,7 @@ def run_test(self):\n         assert_equal(witness_addr_ret, witness_addr)  # p2sh-p2wsh address added to the first key\n \n         #encrypt wallet, restart, unlock and dump\n-        self.nodes[0].node_encrypt_wallet('test')\n-        self.start_node(0)\n+        self.nodes[0].encryptwallet('test')\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()"
      },
      {
        "sha": "ab9ebed8d4e8aa7f0a2c8a854a505a21f03fa49f",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=bf667f974496fc47d116c71531f102f7b77dee73",
        "patch": "@@ -33,8 +33,7 @@ def run_test(self):\n         assert_equal(len(privkey), 52)\n \n         # Encrypt the wallet\n-        self.nodes[0].node_encrypt_wallet(passphrase)\n-        self.start_node(0)\n+        self.nodes[0].encryptwallet(passphrase)\n \n         # Test that the wallet is encrypted\n         assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)"
      },
      {
        "sha": "51afa0cb1a58f33ba5147af912a3f3d17ed2f071",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf667f974496fc47d116c71531f102f7b77dee73/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=bf667f974496fc47d116c71531f102f7b77dee73",
        "patch": "@@ -25,9 +25,7 @@ def run_test(self):\n         assert(addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid'])\n \n         # Encrypt wallet and wait to terminate\n-        nodes[0].node_encrypt_wallet('test')\n-        # Restart node 0\n-        self.start_node(0)\n+        nodes[0].encryptwallet('test')\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].getaddressinfo(addr)"
      }
    ]
  },
  {
    "sha": "558b553290e80b94556dc765209f18a880af0f59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NThiNTUzMjkwZTgwYjk0NTU2ZGM3NjUyMDlmMThhODgwYWYwZjU5",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-15T09:32:12Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-16T21:37:59Z"
      },
      "message": "Changed functional tests which do not require wallets to run in non-wallet mode.\n\nChanged wallet tests\n\nFixed test failures\n\nFixed test bugs\n\nTests fixed\n\nIncreased coverage of non-wallet tests\n\nIncreased even more coverage\n\nIncreased even more coverage 2.0\n\nrmoved junk files",
      "tree": {
        "sha": "4d4495fb0a9bb251bcc776855029036a8591e80e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d4495fb0a9bb251bcc776855029036a8591e80e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/558b553290e80b94556dc765209f18a880af0f59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/558b553290e80b94556dc765209f18a880af0f59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/558b553290e80b94556dc765209f18a880af0f59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/558b553290e80b94556dc765209f18a880af0f59/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf667f974496fc47d116c71531f102f7b77dee73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf667f974496fc47d116c71531f102f7b77dee73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf667f974496fc47d116c71531f102f7b77dee73"
      }
    ],
    "stats": {
      "total": 179,
      "additions": 67,
      "deletions": 112
    },
    "files": [
      {
        "sha": "88c19efc85dbc39b95780316e4f7798112014a06",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -85,6 +85,8 @@ def set_test_params(self):\n \n         # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n+    # Use skip_test_if_missing_module() to skip the test if your test requires certain modules to be present.\n+    # This test uses generate which requires wallet to be compiled\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n@@ -166,7 +168,7 @@ def run_test(self):\n \n         for i in range(10):\n             # Use the mininode and blocktools functionality to manually build a block\n-            # Calling the generate() rpc is easier, but this allows us to exactly\n+            # Calling the generatetoaddress()/generate() rpc is easier, but this allows us to exactly\n             # control the blocks and transactions.\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()"
      },
      {
        "sha": "71c3a396c1ba272d33d2ad4b587f3cac2b3be227",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -75,9 +75,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n "
      },
      {
        "sha": "c170f510c88df75465c90902fce8dafbecbdab57",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -16,9 +16,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         self.stop_node(0)\n         shutil.rmtree(self.nodes[0].datadir)\n@@ -30,7 +27,7 @@ def run_test(self):\n         self.log.info(\"Starting with existing blocksdir ...\")\n         self.start_node(0, [\"-blocksdir=\" + blocksdir_path])\n         self.log.info(\"mining blocks..\")\n-        self.nodes[0].generate(10)\n+        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n         assert os.path.isfile(os.path.join(blocksdir_path, \"regtest\", \"blocks\", \"blk00000.dat\"))\n         assert os.path.isdir(os.path.join(self.nodes[0].datadir, \"regtest\", \"blocks\", \"index\"))\n "
      },
      {
        "sha": "8bb7e02695f5763e495123a5d1182daae9116575",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -15,9 +15,6 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n "
      },
      {
        "sha": "dbff6f15f2f1f555a832630dec5fd916942267ba",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -31,9 +31,6 @@ def set_test_params(self):\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         # This test relies on the chain setup being:\n         # node0 <- node1 <- node2\n@@ -54,7 +51,8 @@ def run_test(self):\n \n         num_blocks_to_generate = int((self.node_min_work[1] - starting_chain_work) / REGTEST_WORK_PER_BLOCK)\n         self.log.info(\"Generating %d blocks on node0\", num_blocks_to_generate)\n-        hashes = self.nodes[0].generate(num_blocks_to_generate)\n+        hashes = self.nodes[0].generatetoaddress(num_blocks_to_generate,\n+                                                 self.nodes[0].get_deterministic_priv_key().address)\n \n         self.log.info(\"Node0 current chain work: %s\", self.nodes[0].getblockheader(hashes[-1])['chainwork'])\n \n@@ -75,7 +73,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), starting_blockcount)\n \n         self.log.info(\"Generating one more block\")\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n \n         self.log.info(\"Verifying nodes are all synced\")\n "
      },
      {
        "sha": "940b403f9c183e346e7d0ae1de85c767838fa4ff",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -18,11 +18,8 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def reindex(self, justchainstate=False):\n-        self.nodes[0].generate(3)\n+        self.nodes[0].generatetoaddress(3, self.nodes[0].get_deterministic_priv_key().address)\n         blockcount = self.nodes[0].getblockcount()\n         self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\"]]"
      },
      {
        "sha": "88df61cabc72c06b9ea9af88bd272dc36782cdf0",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -31,9 +31,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file\n@@ -68,13 +65,14 @@ def run_test(self):\n         node = self.nodes[0]\n         node.add_p2p_connection(P2PInterface())\n \n+        node_deterministic_address = node.get_deterministic_priv_key().address\n         # Mine one period worth of blocks\n-        node.generate(VB_PERIOD)\n+        node.generatetoaddress(VB_PERIOD, node_deterministic_address)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n         self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        node.generatetoaddress(VB_PERIOD - VB_THRESHOLD + 1, node_deterministic_address)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n         assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n@@ -83,7 +81,7 @@ def run_test(self):\n         self.log.info(\"Check that there is a warning if >50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n         self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        node.generate(VB_PERIOD - VB_THRESHOLD)\n+        node.generatetoaddress(VB_PERIOD - VB_THRESHOLD, node_deterministic_address)\n \n         # Check that get*info() shows the 51/100 unknown block version error.\n         assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n@@ -92,16 +90,16 @@ def run_test(self):\n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Mine a period worth of expected blocks so the generic block-version warning\n         # is cleared. This will move the versionbit state to ACTIVE.\n-        node.generate(VB_PERIOD)\n+        node.generatetoaddress(VB_PERIOD, node_deterministic_address)\n \n         # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n         self.restart_node(0)\n \n         # Generating one block guarantees that we'll get out of IBD\n-        node.generate(1)\n+        node.generatetoaddress(1, node_deterministic_address)\n         wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n         # Generating one more block will be enough to generate an error.\n-        node.generate(1)\n+        node.generatetoaddress(1, node_deterministic_address)\n         # Check that get*info() shows the versionbits unknown rules warning\n         assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])"
      },
      {
        "sha": "ff55ea552824735a5d977fb7d66eeb4be3c7c6e8",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -38,9 +38,6 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         node = self.nodes[0]\n \n@@ -61,7 +58,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         assert_equal(mining_info['pooledtx'], 0)\n \n         # Mine a block to leave initial block download\n-        node.generate(1)\n+        node.generatetoaddress(1, node.get_deterministic_priv_key().address)\n         tmpl = node.getblocktemplate()\n         self.log.info(\"getblocktemplate: Test capability advertised\")\n         assert 'proposal' in tmpl['capabilities']\n@@ -212,7 +209,7 @@ def chain_tip(b_hash, *, status='headers-only', branchlen=1):\n         assert chain_tip(block.hash, status='active', branchlen=0) in node.getchaintips()\n \n         # Building a few blocks should give the same results\n-        node.generate(10)\n+        node.generatetoaddress(10, node.get_deterministic_priv_key().address)\n         assert_raises_rpc_error(-25, 'time-too-old', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block_time).serialize())))\n         assert_raises_rpc_error(-25, 'bad-prevblk', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block2).serialize())))\n         node.submitheader(hexdata=b2x(CBlockHeader(block).serialize()))"
      },
      {
        "sha": "fab088719756c63bce740c0c8f79eb0e81c316db",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -30,9 +30,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     # Build a chain of blocks on top of given one\n     def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n         blocks = []\n@@ -83,7 +80,7 @@ def run_test(self):\n         self.nodes[0].setmocktime(int(time.time()) - 60 * 24 * 60 * 60)\n \n         # Generating a chain of 10 blocks\n-        block_hashes = self.nodes[0].generate(nblocks=10)\n+        block_hashes = self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n \n         # Create longer chain starting 2 blocks before current tip\n         height = len(block_hashes) - 2\n@@ -114,7 +111,7 @@ def run_test(self):\n \n         # Longest chain is extended so stale is much older than chain tip\n         self.nodes[0].setmocktime(0)\n-        tip = self.nodes[0].generate(nblocks=1)[0]\n+        tip = self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)[0]\n         assert_equal(self.nodes[0].getblockcount(), 14)\n \n         # Send getdata & getheaders to refresh last received getheader message"
      },
      {
        "sha": "7be7c9b3ee40f43dabe1cc6d57f70c8463d93841",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -24,9 +24,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         # Add p2p connection to node0\n         node = self.nodes[0]  # convenience reference to the node\n@@ -48,7 +45,7 @@ def run_test(self):\n         node.p2p.send_blocks_and_test([block1], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n-        node.generate(100)\n+        node.generatetoaddress(100, node.get_deterministic_priv_key().address)\n \n         best_block = node.getblock(node.getbestblockhash())\n         tip = int(node.getbestblockhash(), 16)"
      },
      {
        "sha": "d856e8f8c2a9ab08e599a59386e68416d96d1599",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -14,13 +14,10 @@ class InvalidLocatorTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n+    \n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n-        node.generate(1)  # Get node out of IBD\n+        node.generatetoaddress(1, node.get_deterministic_priv_key().address)  # Get node out of IBD\n \n         self.log.info('Test max locator size')\n         block_count = node.getblockcount()"
      },
      {
        "sha": "8d06b2a7db1b0daf6b4b87e808b30ceb198963ae",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -25,10 +25,7 @@ class InvalidTxRequestTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n+        \n     def bootstrap_p2p(self, *, num_connections=1):\n         \"\"\"Add a P2P connection to the node.\n \n@@ -64,7 +61,7 @@ def run_test(self):\n         node.p2p.send_blocks_and_test([block], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n-        self.nodes[0].generate(100)\n+        self.nodes[0].generatetoaddress(100, self.nodes[0].get_deterministic_priv_key().address)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)"
      },
      {
        "sha": "336d34a81d93b3c0186df0b4e0dc6dea7eda5c75",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -93,9 +93,6 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore=' + str(banscore)]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False, wait_for_verack=False)\n         no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)\n@@ -106,7 +103,7 @@ def run_test(self):\n         wait_until(lambda: no_verack_idlenode.version_received, timeout=10, lock=mininode_lock)\n \n         # Mine a block and make sure that it's not sent to the connected nodes\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n \n         #Give the node enough time to possibly leak out a message\n         time.sleep(5)"
      },
      {
        "sha": "ec3d336dc1af0cbadde8c00900b8a0d6b5f6dff2",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -34,9 +34,6 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def disconnect_all(self):\n         disconnect_nodes(self.nodes[0], 1)\n         disconnect_nodes(self.nodes[1], 0)\n@@ -62,7 +59,7 @@ def run_test(self):\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n         connect_nodes_bi(self.nodes, 0, 1)\n-        blocks = self.nodes[1].generate(292)\n+        blocks = self.nodes[1].generatetoaddress(292, self.nodes[1].get_deterministic_priv_key().address)\n         sync_blocks([self.nodes[0], self.nodes[1]])\n \n         self.log.info(\"Make sure we can max retrieve block at tip-288.\")\n@@ -105,7 +102,7 @@ def run_test(self):\n         self.disconnect_all()\n \n         # mine 10 blocks on node 0 (pruned node)\n-        self.nodes[0].generate(10)\n+        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n \n         # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n         connect_nodes_bi(self.nodes, 0, 1)"
      },
      {
        "sha": "a07118c2daf76cc73d5603b3d88c55934d02aad1",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -208,15 +208,12 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def mine_blocks(self, count):\n         \"\"\"Mine count blocks and return the new tip.\"\"\"\n \n         # Clear out block announcements from each p2p listener\n         [x.clear_block_announcements() for x in self.nodes[0].p2ps]\n-        self.nodes[0].generate(count)\n+        self.nodes[0].generatetoaddress(count, self.nodes[0].get_deterministic_priv_key().address)\n         return int(self.nodes[0].getbestblockhash(), 16)\n \n     def mine_reorg(self, length):\n@@ -226,7 +223,8 @@ def mine_reorg(self, length):\n         to-be-reorged-out blocks are mined, so that we don't break later tests.\n         return the list of block hashes newly mined.\"\"\"\n \n-        self.nodes[0].generate(length)  # make sure all invalidated blocks are node0's\n+        # make sure all invalidated blocks are node0's\n+        self.nodes[0].generatetoaddress(length, self.nodes[0].get_deterministic_priv_key().address)  \n         sync_blocks(self.nodes, wait=0.1)\n         for x in self.nodes[0].p2ps:\n             x.wait_for_block_announcement(int(self.nodes[0].getbestblockhash(), 16))\n@@ -235,7 +233,7 @@ def mine_reorg(self, length):\n         tip_height = self.nodes[1].getblockcount()\n         hash_to_invalidate = self.nodes[1].getblockhash(tip_height - (length - 1))\n         self.nodes[1].invalidateblock(hash_to_invalidate)\n-        all_hashes = self.nodes[1].generate(length + 1)  # Must be longer than the orig chain\n+        all_hashes = self.nodes[1].generatetoaddress(length + 1, self.nodes[1].get_deterministic_priv_key().address)  # Must be longer than the orig chain\n         sync_blocks(self.nodes, wait=0.1)\n         return [int(x, 16) for x in all_hashes]\n \n@@ -254,7 +252,7 @@ def run_test(self):\n         self.test_nonnull_locators(test_node, inv_node)\n \n     def test_null_locators(self, test_node, inv_node):\n-        tip = self.nodes[0].getblockheader(self.nodes[0].generate(1)[0])\n+        tip = self.nodes[0].getblockheader(self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)[0])\n         tip_hash = int(tip[\"hash\"], 16)\n \n         inv_node.check_last_inv_announcement(inv=[tip_hash])"
      },
      {
        "sha": "3741b32516e4f8a1a04ec3ec32b03e17c41d773b",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/env python3\n+    #!/usr/bin/env python3\n # Copyright (c) 2015-2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -66,9 +66,6 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for\n@@ -85,8 +82,8 @@ def run_test(self):\n         min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n         # 1. Have nodes mine a block (leave IBD)\n-        [ n.generate(1) for n in self.nodes ]\n-        tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n+        [n.generatetoaddress(1, n.get_deterministic_priv_key().address) for n in self.nodes]\n+        tips = [int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes]\n \n         # 2. Send one block that builds on each tip.\n         # This should be accepted by node0"
      },
      {
        "sha": "f67ecc247cec3176052b7a933f0dc707b9acbeca",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -48,9 +48,6 @@ class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n \n@@ -242,12 +239,12 @@ def _test_getnetworkhashps(self):\n \n     def _test_stopatheight(self):\n         assert_equal(self.nodes[0].getblockcount(), 200)\n-        self.nodes[0].generate(6)\n+        self.nodes[0].generatetoaddress(6, self.nodes[0].get_deterministic_priv_key().address)\n         assert_equal(self.nodes[0].getblockcount(), 206)\n         self.log.debug('Node should not stop at this height')\n         assert_raises(subprocess.TimeoutExpired, lambda: self.nodes[0].process.wait(timeout=3))\n         try:\n-            self.nodes[0].generate(1)\n+            self.nodes[0].generatetoaddress(1, self.nodes[0].get_deterministic_priv_key().address)\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')"
      },
      {
        "sha": "c869c7262f4b2c74cef0e8a7f919fd892ca9c218",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -17,9 +17,6 @@ class GetChainTipsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         tips = self.nodes[0].getchaintips()\n         assert_equal(len(tips), 1)\n@@ -29,8 +26,8 @@ def run_test(self):\n \n         # Split the network and build two chains of different lengths.\n         self.split_network()\n-        self.nodes[0].generate(10)\n-        self.nodes[2].generate(20)\n+        self.nodes[0].generatetoaddress(10, self.nodes[0].get_deterministic_priv_key().address)\n+        self.nodes[2].generatetoaddress(20, self.nodes[2].get_deterministic_priv_key().address)\n         self.sync_all([self.nodes[:2], self.nodes[2:]])\n \n         tips = self.nodes[1].getchaintips ()"
      },
      {
        "sha": "d8ecdd573aac5ce3e20cac6cb39eb5b597f375f1",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -14,21 +14,18 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         self.setup_nodes()\n \n     def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n-        self.nodes[0].generate(4)\n+        self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n         assert(self.nodes[0].getblockcount() == 4)\n         besthash = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n-        self.nodes[1].generate(6)\n+        self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n         assert(self.nodes[1].getblockcount() == 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n@@ -56,7 +53,7 @@ def run_test(self):\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n         assert(self.nodes[2].getblockcount() == 2)\n         self.log.info(\"..and then mine a block\")\n-        self.nodes[2].generate(1)\n+        self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n         time.sleep(5)\n         assert_equal(self.nodes[2].getblockcount(), 3)"
      },
      {
        "sha": "72e6e6329f8509449f07e3140fc394b23633934a",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -38,26 +38,24 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def setup_network(self):\n         self.setup_nodes()\n \n     def run_test(self):\n         self.log.info(\"Ensure submitblock can in principle reorg to a competing chain\")\n-        self.nodes[0].generate(1)\n+        gen_address = lambda i: self.nodes[i].get_deterministic_priv_key().address  # A non-wallet address to mine to\n+        self.nodes[0].generatetoaddress(1, gen_address(0))\n         assert_equal(self.nodes[0].getblockcount(), 1)\n-        hashZ = self.nodes[1].generate(2)[-1]\n+        hashZ = self.nodes[1].generatetoaddress(2, gen_address(1))[-1]\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         node_sync_via_rpc(self.nodes[0:3])\n         assert_equal(self.nodes[0].getbestblockhash(), hashZ)\n \n         self.log.info(\"Mine blocks A-B-C on Node 0\")\n-        hashC = self.nodes[0].generate(3)[-1]\n+        hashC = self.nodes[0].generatetoaddress(3, gen_address(0))[-1]\n         assert_equal(self.nodes[0].getblockcount(), 5)\n         self.log.info(\"Mine competing blocks E-F-G on Node 1\")\n-        hashG = self.nodes[1].generate(3)[-1]\n+        hashG = self.nodes[1].generatetoaddress(3, gen_address(1))[-1]\n         assert_equal(self.nodes[1].getblockcount(), 5)\n         assert(hashC != hashG)\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n@@ -86,7 +84,7 @@ def run_test(self):\n         self.nodes[1].preciousblock(hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashC)\n         self.log.info(\"Mine another block (E-F-G-)H on Node 0 and reorg Node 1\")\n-        self.nodes[0].generate(1)\n+        self.nodes[0].generatetoaddress(1, gen_address(0))\n         assert_equal(self.nodes[0].getblockcount(), 6)\n         sync_blocks(self.nodes[0:2])\n         hashH = self.nodes[0].getbestblockhash()\n@@ -95,7 +93,7 @@ def run_test(self):\n         self.nodes[1].preciousblock(hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashH)\n         self.log.info(\"Mine competing blocks I-J-K-L on Node 2\")\n-        self.nodes[2].generate(4)\n+        self.nodes[2].generatetoaddress(4, gen_address(2))\n         assert_equal(self.nodes[2].getblockcount(), 6)\n         hashL = self.nodes[2].getbestblockhash()\n         self.log.info(\"Connect nodes and check no reorg occurs\")"
      },
      {
        "sha": "224f859b41307dc4b835452613287f81bab09b16",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -271,7 +271,7 @@ def import_deterministic_coinbase_privkeys(self):\n                 assert str(e).startswith('Method not found')\n                 continue\n \n-            n.importprivkey(n.get_deterministic_priv_key()[1])\n+            n.importprivkey(n.get_deterministic_priv_key().key)\n \n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\"\n@@ -420,11 +420,12 @@ def _start_logging(self):\n     def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n-        Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n+        Create a cache of a 200-block-long chain (with wallet only if the wallet is compiled) for MAX_NODES\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n         assert self.num_nodes <= MAX_NODES\n         create_cache = False\n+        wallet_compiled = self.is_wallet_compiled()\n         for i in range(MAX_NODES):\n             if not os.path.isdir(get_datadir_path(self.options.cachedir, i)):\n                 create_cache = True\n@@ -465,7 +466,10 @@ def _initialize_chain(self):\n                 for peer in range(4):\n                     for j in range(25):\n                         set_node_times(self.nodes, block_time)\n-                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key()[0])\n+                        if wallet_compiled:\n+                            self.nodes[peer].generate(1)\n+                        else:\n+                            self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)"
      },
      {
        "sha": "66869989092b6cb8518f85da50189bb99732f733",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/558b553290e80b94556dc765209f18a880af0f59/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/558b553290e80b94556dc765209f18a880af0f59/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=558b553290e80b94556dc765209f18a880af0f59",
        "patch": "@@ -17,6 +17,7 @@\n import tempfile\n import time\n import urllib.parse\n+import collections\n \n from .authproxy import JSONRPCException\n from .util import (\n@@ -99,17 +100,18 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n     def get_deterministic_priv_key(self):\n         \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n+        address_key_pair = collections.namedtuple('address_key_pair', ['address', 'key'])\n         PRIV_KEYS = [\n             # address , privkey\n-            ('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n-            ('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n-            ('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n-            ('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n-            ('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n-            ('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n-            ('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n-            ('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n-            ('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n+            address_key_pair('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n+            address_key_pair('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n+            address_key_pair('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n+            address_key_pair('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n+            address_key_pair('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n+            address_key_pair('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n+            address_key_pair('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n+            address_key_pair('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n+            address_key_pair('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n         ]\n         return PRIV_KEYS[self.index]\n "
      }
    ]
  },
  {
    "sha": "5a8bd9076740e26e9aec8e7216087de33e6e8d6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YThiZDkwNzY3NDBlMjZlOWFlYzhlNzIxNjA4N2RlMzNlNmU4ZDZk",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-17T03:15:01Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-17T03:15:01Z"
      },
      "message": "Fixed bug",
      "tree": {
        "sha": "0f2ff83adf60da2b11da8a65191d32381fd3e5c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f2ff83adf60da2b11da8a65191d32381fd3e5c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a8bd9076740e26e9aec8e7216087de33e6e8d6d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a8bd9076740e26e9aec8e7216087de33e6e8d6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a8bd9076740e26e9aec8e7216087de33e6e8d6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a8bd9076740e26e9aec8e7216087de33e6e8d6d/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "558b553290e80b94556dc765209f18a880af0f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/558b553290e80b94556dc765209f18a880af0f59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/558b553290e80b94556dc765209f18a880af0f59"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 2,
      "deletions": 6
    },
    "files": [
      {
        "sha": "9a589240a83dfdee9836a0d18a8e65b43cd8894f",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a8bd9076740e26e9aec8e7216087de33e6e8d6d/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a8bd9076740e26e9aec8e7216087de33e6e8d6d/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=5a8bd9076740e26e9aec8e7216087de33e6e8d6d",
        "patch": "@@ -420,12 +420,11 @@ def _start_logging(self):\n     def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n-        Create a cache of a 200-block-long chain (with wallet only if the wallet is compiled) for MAX_NODES\n+        Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n         assert self.num_nodes <= MAX_NODES\n         create_cache = False\n-        wallet_compiled = self.is_wallet_compiled()\n         for i in range(MAX_NODES):\n             if not os.path.isdir(get_datadir_path(self.options.cachedir, i)):\n                 create_cache = True\n@@ -466,10 +465,7 @@ def _initialize_chain(self):\n                 for peer in range(4):\n                     for j in range(25):\n                         set_node_times(self.nodes, block_time)\n-                        if wallet_compiled:\n-                            self.nodes[peer].generate(1)\n-                        else:\n-                            self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n+                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)"
      }
    ]
  },
  {
    "sha": "a8a74419a130db4b56db773c93549e91ba86baf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGE3NDQxOWExMzBkYjRiNTZkYjc3M2M5MzU0OWU5MWJhODZiYWYz",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-17T03:17:46Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-17T03:17:46Z"
      },
      "message": "Merge conflict",
      "tree": {
        "sha": "d1c10032625003794ef986c3c5b5c7ae61116482",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1c10032625003794ef986c3c5b5c7ae61116482"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8a74419a130db4b56db773c93549e91ba86baf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8a74419a130db4b56db773c93549e91ba86baf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8a74419a130db4b56db773c93549e91ba86baf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8a74419a130db4b56db773c93549e91ba86baf3/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a8bd9076740e26e9aec8e7216087de33e6e8d6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a8bd9076740e26e9aec8e7216087de33e6e8d6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a8bd9076740e26e9aec8e7216087de33e6e8d6d"
      },
      {
        "sha": "6e9b6bab291f766defab24022117fd780be45ed5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e9b6bab291f766defab24022117fd780be45ed5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e9b6bab291f766defab24022117fd780be45ed5"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 113,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e5ba8e247e55c123322221d3009939100fcbd636",
        "filename": "test/functional/output.txt",
        "status": "added",
        "additions": 111,
        "deletions": 0,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8a74419a130db4b56db773c93549e91ba86baf3/test/functional/output.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8a74419a130db4b56db773c93549e91ba86baf3/test/functional/output.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/output.txt?ref=a8a74419a130db4b56db773c93549e91ba86baf3",
        "patch": "@@ -0,0 +1,111 @@\n+Why does logging require wallet?\n+Does -reindex use the wallet? As in while reindexing are the wallet transactions generated again?\n+\n+Files:\n+\n+combine_logs.py NA\n+create_cache.py NA\n+example_test.py changed\n+feature_assumevalid.py  depends on wallet\n+feature_bip68_sequence.py* depends on wallet\n+feature_block.py* was previously marked as dependent on wallet, but it is not dependent?\n+feature_blocksdir.py* changed\n+feature_cltv.py* depends on wallet\n+feature_config_args.py* depends on wallet\n+feature_csv_activation.py* depends on wallet\n+feature_dbcrash.py* depends on wallet\n+feature_dersig.py* depends on wallet\n+feature_fee_estimation.py* depends on wallet\n+feature_help.py* NA\n+feature_includeconf.py* NA\n+feature_logging.py* was previously marked as dependent on wallet, but it is not dependent?\n+feature_maxuploadtarget.py* depends on wallet\n+feature_minchainwork.py* changed\n+feature_notifications.py* depends on wallet\n+feature_nulldummy.py* depends on wallet \n+feature_proxy.py* NA\n+feature_pruning.py* depends on wallet\n+feature_rbf.py* depends on wallet\n+feature_reindex.py* depends on wallet?\n+feature_segwit.py* depends on wallet\n+feature_uacomment.py* NA\n+feature_versionbits_warning.py* changed\n+interface_bitcoin_cli.py* depends on wallet\n+interface_http.py* NA\n+interface_rest.py* depends on wallet\n+interface_zmq.py* depends on wallet\n+mempool_accept.py* depends on wallet\n+mempool_limit.py* depends on wallet\n+mempool_packages.py* depends on wallet\n+mempool_persist.py* depends on wallet\n+mempool_reorg.py* depends on wallet\n+mempool_resurrect.py* depends on wallet\n+mempool_spend_coinbase.py* depends on wallet\n+mining_basic.py* uses wallet has a bug, uses 1 more node than required, does not require wallet but uses initalize\n+mining_getblocktemplate_longpoll.py* uses wallet\n+mining_prioritisetransaction.py* uses wallet,  but 1 more than required\n+p2p_compactblocks.py* uses wallet\n+p2p_disconnect_ban.py* NA\n+p2p_feefilter.py* depends on wallet\n+p2p_fingerprint.py* changed\n+p2p_invalid_block.py* changed\n+p2p_invalid_locator.py* requires intilize to change\n+p2p_invalid_tx.py* changed\n+p2p_leak.py* depends on initlize\n+p2p_mempool.py* NA\n+p2p_node_network_limited.py* -- I think this test is not doing what it claims\n+p2p_segwit.py*  changed\n+p2p_sendheaders.py* changed\n+p2p_timeouts.py* NA\n+p2p_unrequested_blocks.py changed\n+README.md\n+rpc_bind.py* NA\n+rpc_blockchain.py* depends on initialze\n+rpc_createmultisig.py* depends on wallet\n+rpc_decodescript.py* NA\n+rpc_deprecated.py* NA\n+rpc_fundrawtransaction.py* depends on wallet\n+rpc_getblockstats.py* NA\n+rpc_getchaintips.py* depends on intilze\n+rpc_help.py* NA\n+rpc_invalidateblock.py* changed\n+rpc_named_arguments.py* NA\n+rpc_net.py* NA\n+rpc_preciousblock.py* changed\n+rpc_psbt.py* depends on wallet \n+rpc_rawtransaction.py* depends on wallet\n+rpc_scantxoutset.py* depends on wallet\n+rpc_signmessage.py* depends on wallet\n+rpc_signrawtransaction.py* depends on wallet\n+rpc_txoutproof.py* depends on wallet\n+rpc_uptime.py* NA\n+rpc_users.py* NA\n+rpc_zmq.py*\n+test_framework/\n+test_runner.py*\n+wallet_abandonconflict.py*\n+wallet_address_types.py*\n+wallet_backup.py*\n+wallet_basic.py*\n+wallet_bumpfee.py*\n+wallet_disable.py*\n+wallet_disableprivatekeys.py*\n+wallet_dump.py*\n+wallet_encryption.py*\n+wallet_fallbackfee.py*\n+wallet_groups.py*\n+wallet_hd.py*\n+wallet_import_rescan.py*\n+wallet_importmulti.py*\n+wallet_importprunedfunds.py*\n+wallet_keypool.py*\n+wallet_keypool_topup.py*\n+wallet_labels.py*\n+wallet_listreceivedby.py*\n+wallet_listsinceblock.py*\n+wallet_listtransactions.py*\n+wallet_multiwallet.py*\n+wallet_resendwallettransactions.py*\n+wallet_txn_clone.py*\n+wallet_txn_doublespend.py*\n+wallet_zapwallettxes.py*"
      },
      {
        "sha": "f70ee494066e18ade7a19b917150c2f0831f193c",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8a74419a130db4b56db773c93549e91ba86baf3/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8a74419a130db4b56db773c93549e91ba86baf3/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=a8a74419a130db4b56db773c93549e91ba86baf3",
        "patch": "@@ -420,11 +420,12 @@ def _start_logging(self):\n     def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n-        Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n+        Create a cache of a 200-block-long chain (with wallet only if the wallet is compiled) for MAX_NODES\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n         assert self.num_nodes <= MAX_NODES\n         create_cache = False\n+        wallet_compiled = self.is_wallet_compiled()\n         for i in range(MAX_NODES):\n             if not os.path.isdir(get_datadir_path(self.options.cachedir, i)):\n                 create_cache = True"
      }
    ]
  },
  {
    "sha": "0c3ec756e833445239d78463c5ad3f3eb563cac8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzNlYzc1NmU4MzM0NDUyMzlkNzg0NjNjNWFkM2YzZWI1NjNjYWM4",
    "commit": {
      "author": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-17T03:20:58Z"
      },
      "committer": {
        "name": "sanket1729",
        "email": "smk7@illinois.edu",
        "date": "2018-09-17T03:20:58Z"
      },
      "message": "Merge branch 'master' of https://www.github.com/bitcoin/bitcoin into tests_review",
      "tree": {
        "sha": "c5a26bb894f1d6e603d21ea78aa5fcdc961e684c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5a26bb894f1d6e603d21ea78aa5fcdc961e684c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c3ec756e833445239d78463c5ad3f3eb563cac8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c3ec756e833445239d78463c5ad3f3eb563cac8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c3ec756e833445239d78463c5ad3f3eb563cac8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c3ec756e833445239d78463c5ad3f3eb563cac8/comments",
    "author": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8a74419a130db4b56db773c93549e91ba86baf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8a74419a130db4b56db773c93549e91ba86baf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8a74419a130db4b56db773c93549e91ba86baf3"
      },
      {
        "sha": "3832c25f176753b7ddb724c26ee7543fb1e1819e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3832c25f176753b7ddb724c26ee7543fb1e1819e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3832c25f176753b7ddb724c26ee7543fb1e1819e"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 27,
      "deletions": 25
    },
    "files": [
      {
        "sha": "59cc110db553680195063c70343add77e227b1bb",
        "filename": ".travis/test_06_script.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3ec756e833445239d78463c5ad3f3eb563cac8/.travis/test_06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3ec756e833445239d78463c5ad3f3eb563cac8/.travis/test_06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_06_script.sh?ref=0c3ec756e833445239d78463c5ad3f3eb563cac8",
        "patch": "@@ -57,7 +57,7 @@ if [ \"$RUN_BENCH\" = \"true\" ]; then\n fi\n \n if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n-  extended=\"--extended --exclude feature_pruning,feature_dbcrash\"\n+  extended=\"--extended --exclude feature_pruning\"\n fi\n \n if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then"
      },
      {
        "sha": "f7d7a5d377f34f9f699878797b3806161858f957",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3ec756e833445239d78463c5ad3f3eb563cac8/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3ec756e833445239d78463c5ad3f3eb563cac8/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0c3ec756e833445239d78463c5ad3f3eb563cac8",
        "patch": "@@ -467,7 +467,7 @@ bitcoind_LDADD = \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1)\n \n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n@@ -485,7 +485,7 @@ bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO)\n \n-bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n+bitcoin_cli_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n #\n \n # bitcoin-tx binary #"
      },
      {
        "sha": "544092520f200795fde2a2bb6e86a25d12172359",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3ec756e833445239d78463c5ad3f3eb563cac8/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3ec756e833445239d78463c5ad3f3eb563cac8/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=0c3ec756e833445239d78463c5ad3f3eb563cac8",
        "patch": "@@ -56,7 +56,7 @@ if ENABLE_WALLET\n bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n endif\n \n-bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n+bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_BENCH_FILES)"
      },
      {
        "sha": "269a6ff805014281b6892a7978ea3b00bf2c6a31",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3ec756e833445239d78463c5ad3f3eb563cac8/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3ec756e833445239d78463c5ad3f3eb563cac8/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=0c3ec756e833445239d78463c5ad3f3eb563cac8",
        "patch": "@@ -128,7 +128,7 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_C\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n-test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(RAPIDCHECK_LIBS)\n+test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(RAPIDCHECK_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static\n \n if ENABLE_ZMQ"
      },
      {
        "sha": "93568c97a93b0963de41af12e0a16f6e711aaa38",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3ec756e833445239d78463c5ad3f3eb563cac8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3ec756e833445239d78463c5ad3f3eb563cac8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0c3ec756e833445239d78463c5ad3f3eb563cac8",
        "patch": "@@ -426,7 +426,14 @@ void SetupServerArgs()\n #endif\n \n     gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\", DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is: \"\n+        \"level 0 reads the blocks from disk, \"\n+        \"level 1 verifies block validity, \"\n+        \"level 2 verifies undo data, \"\n+        \"level 3 checks disconnection of tip blocks, \"\n+        \"and level 4 tries to reconnect the blocks, \"\n+        \"each level includes the checks of the previous levels \"\n+        \"(0-4, default: %u)\", DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "37a3c1c602716bea55ac360d55c2b29895cbdce1",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 14,
        "deletions": 19,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c3ec756e833445239d78463c5ad3f3eb563cac8/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c3ec756e833445239d78463c5ad3f3eb563cac8/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=0c3ec756e833445239d78463c5ad3f3eb563cac8",
        "patch": "@@ -58,9 +58,12 @@\n BASE_SCRIPTS = [\n     # Scripts that are run by the travis build process.\n     # Longest test should go first, to favor running tests in parallel\n+    'feature_fee_estimation.py',\n     'wallet_hd.py',\n     'wallet_backup.py',\n     # vv Tests less than 5m vv\n+    'mining_getblocktemplate_longpoll.py',\n+    'feature_maxuploadtarget.py',\n     'feature_block.py',\n     'rpc_fundrawtransaction.py',\n     'p2p_compactblocks.py',\n@@ -69,6 +72,7 @@\n     'wallet_basic.py',\n     'wallet_labels.py',\n     'p2p_segwit.py',\n+    'p2p_timeouts.py',\n     'wallet_dump.py',\n     'wallet_listtransactions.py',\n     # vv Tests less than 60s vv\n@@ -82,6 +86,8 @@\n     'feature_csv_activation.py',\n     'rpc_rawtransaction.py',\n     'wallet_address_types.py',\n+    'feature_bip68_sequence.py',\n+    'p2p_feefilter.py',\n     'feature_reindex.py',\n     # vv Tests less than 30s vv\n     'wallet_keypool_topup.py',\n@@ -118,6 +124,14 @@\n     'p2p_invalid_locator.py',\n     'p2p_invalid_block.py',\n     'p2p_invalid_tx.py',\n+    'feature_assumevalid.py',\n+    'example_test.py',\n+    'wallet_txn_doublespend.py',\n+    'wallet_txn_clone.py --mineblock',\n+    'feature_notifications.py',\n+    'rpc_invalidateblock.py',\n+    'feature_rbf.py',\n+    'mempool_packages.py',\n     'rpc_createmultisig.py',\n     'feature_versionbits_warning.py',\n     'rpc_preciousblock.py',\n@@ -162,26 +176,7 @@\n     # These tests are not run by the travis build process.\n     # Longest test should go first, to favor running tests in parallel\n     'feature_pruning.py',\n-    # vv Tests less than 20m vv\n-    'feature_fee_estimation.py',\n-    # vv Tests less than 5m vv\n-    'feature_maxuploadtarget.py',\n-    'mempool_packages.py',\n     'feature_dbcrash.py',\n-    # vv Tests less than 2m vv\n-    'feature_bip68_sequence.py',\n-    'mining_getblocktemplate_longpoll.py',\n-    'p2p_timeouts.py',\n-    # vv Tests less than 60s vv\n-    'p2p_feefilter.py',\n-    # vv Tests less than 30s vv\n-    'feature_assumevalid.py',\n-    'example_test.py',\n-    'wallet_txn_doublespend.py',\n-    'wallet_txn_clone.py --mineblock',\n-    'feature_notifications.py',\n-    'rpc_invalidateblock.py',\n-    'feature_rbf.py',\n ]\n \n # Place EXTENDED_SCRIPTS first since it has the 3 longest running tests"
      }
    ]
  }
]