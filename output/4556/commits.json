[
  {
    "sha": "91cce1732b73c4457e474c557aaa7f343c0dc8a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWNjZTE3MzJiNzNjNDQ1N2U0NzRjNTU3YWFhN2YzNDNjMGRjOGEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-18T14:31:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-23T15:58:46Z"
      },
      "message": "qt: Use fixed-point arithmetic in amount spinbox\n\nFixes various issues and cleans up code\n\n- Fixes issue #4500: Amount widget +/- has floating point rounding artifacts\n- Amount box can now be emptied again, without clearing to 0\n\nAlso aligns the amount to the right, as in other places.",
      "tree": {
        "sha": "d1698a0f93194115581ff012a0ce3eae4c63faff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1698a0f93194115581ff012a0ce3eae4c63faff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91cce1732b73c4457e474c557aaa7f343c0dc8a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91cce1732b73c4457e474c557aaa7f343c0dc8a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91cce1732b73c4457e474c557aaa7f343c0dc8a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91cce1732b73c4457e474c557aaa7f343c0dc8a2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5a3fd10e50ea8b2a43e307ed1f52d286663e551",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5a3fd10e50ea8b2a43e307ed1f52d286663e551",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5a3fd10e50ea8b2a43e307ed1f52d286663e551"
      }
    ],
    "stats": {
      "total": 306,
      "additions": 190,
      "deletions": 116
    },
    "files": [
      {
        "sha": "2772bc753ace81635f2a52c5ed080926fa48078f",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=91cce1732b73c4457e474c557aaa7f343c0dc8a2",
        "patch": "@@ -145,6 +145,7 @@ BITCOIN_MM = \\\n \n QT_MOC = \\\n   qt/bitcoin.moc \\\n+  qt/bitcoinamountfield.moc \\\n   qt/intro.moc \\\n   qt/overviewpage.moc \\\n   qt/rpcconsole.moc"
      },
      {
        "sha": "64660390132e43a5da6a47dd1f6c12d9eb10256d",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 166,
        "deletions": 106,
        "changes": 272,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=91cce1732b73c4457e474c557aaa7f343c0dc8a2",
        "patch": "@@ -9,63 +9,185 @@\n #include \"qvaluecombobox.h\"\n \n #include <QApplication>\n-#include <QDoubleSpinBox>\n+#include <QAbstractSpinBox>\n #include <QHBoxLayout>\n #include <QKeyEvent>\n-#include <qmath.h> // for qPow()\n+#include <QLineEdit>\n \n-// QDoubleSpinBox that shows SI-style thin space thousands separators\n-class AmountSpinBox: public QDoubleSpinBox\n+/** QSpinBox that uses fixed-point numbers internally and uses our own\n+ * formatting/parsing functions.\n+ */\n+class AmountSpinBox: public QAbstractSpinBox\n {\n+    Q_OBJECT\n public:\n     explicit AmountSpinBox(QWidget *parent):\n-        QDoubleSpinBox(parent)\n+        QAbstractSpinBox(parent),\n+        currentUnit(BitcoinUnits::BTC),\n+        singleStep(100000) // satoshis\n     {\n+        setAlignment(Qt::AlignRight);\n+\n+        connect(lineEdit(), SIGNAL(textEdited(QString)), this, SIGNAL(valueChanged()));\n+    }\n+\n+    QValidator::State validate(QString &text, int &pos) const\n+    {\n+        if(text.isEmpty())\n+            return QValidator::Intermediate;\n+        bool valid = false;\n+        parse(text, &valid);\n+        /* Make sure we return Intermediate so that fixup() is called on defocus */\n+        return valid ? QValidator::Intermediate : QValidator::Invalid;\n+    }\n+\n+    void fixup(QString &input) const\n+    {\n+        bool valid = false;\n+        qint64 val = parse(input, &valid);\n+        if(valid)\n+        {\n+            input = BitcoinUnits::format(currentUnit, val, false, BitcoinUnits::separatorAlways);\n+            lineEdit()->setText(input);\n+        }\n     }\n-    QString textFromValue(double value) const\n+\n+    qint64 value(bool *valid_out=0) const\n     {\n-        QStringList parts = QDoubleSpinBox::textFromValue(value).split(\".\");\n-        QString quotient_str = parts[0];\n-        QString remainder_str;\n-        if(parts.size() > 1)\n-            remainder_str = parts[1];\n-\n-        // Code duplication between here and BitcoinUnits::format\n-        // TODO: Figure out how to share this code\n-        QChar thin_sp(THIN_SP_CP);\n-        int q_size = quotient_str.size();\n-        if (q_size > 4)\n-            for (int i = 3; i < q_size; i += 3)\n-                quotient_str.insert(q_size - i, thin_sp);\n-\n-        int r_size = remainder_str.size();\n-        if (r_size > 4)\n-            for (int i = 3, adj = 0; i < r_size; i += 3, adj++)\n-                remainder_str.insert(i + adj, thin_sp);\n-\n-        if(remainder_str.isEmpty())\n-            return quotient_str;\n+        return parse(text(), valid_out);\n+    }\n+\n+    void setValue(qint64 value)\n+    {\n+        lineEdit()->setText(BitcoinUnits::format(currentUnit, value, false, BitcoinUnits::separatorAlways));\n+        emit valueChanged();\n+    }\n+\n+    void stepBy(int steps)\n+    {\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+        val = val + steps * singleStep;\n+        val = qMin(qMax(val, Q_INT64_C(0)), BitcoinUnits::maxMoney());\n+        setValue(val);\n+    }\n+\n+    StepEnabled stepEnabled() const\n+    {\n+        StepEnabled rv = 0;\n+        if(text().isEmpty()) // Allow step-up with empty field\n+            return StepUpEnabled;\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+        if(valid)\n+        {\n+            if(val > 0)\n+                rv |= StepDownEnabled;\n+            if(val < BitcoinUnits::maxMoney())\n+                rv |= StepUpEnabled;\n+        }\n+        return rv;\n+    }\n+\n+    void setDisplayUnit(int unit)\n+    {\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+\n+        currentUnit = unit;\n+\n+        if(valid)\n+            setValue(val);\n         else\n-            return quotient_str + QString(\".\") + remainder_str;\n+            clear();\n     }\n-    QValidator::State validate (QString &text, int &pos) const\n+\n+    void setSingleStep(qint64 step)\n     {\n-        QString s(BitcoinUnits::removeSpaces(text));\n-        return QDoubleSpinBox::validate(s, pos);\n+        singleStep = step;\n+    }\n+\n+    QSize minimumSizeHint() const\n+    {\n+        if(cachedMinimumSizeHint.isEmpty())\n+        {\n+            ensurePolished();\n+\n+            const QFontMetrics fm(fontMetrics());\n+            int h = lineEdit()->minimumSizeHint().height();\n+            int w = fm.width(BitcoinUnits::format(BitcoinUnits::BTC, BitcoinUnits::maxMoney(), false, BitcoinUnits::separatorAlways));\n+            w += 2; // cursor blinking space\n+\n+            QStyleOptionSpinBox opt;\n+            initStyleOption(&opt);\n+            QSize hint(w, h);\n+            QSize extra(35, 6);\n+            opt.rect.setSize(hint + extra);\n+            extra += hint - style()->subControlRect(QStyle::CC_SpinBox, &opt,\n+                                                    QStyle::SC_SpinBoxEditField, this).size();\n+            // get closer to final result by repeating the calculation\n+            opt.rect.setSize(hint + extra);\n+            extra += hint - style()->subControlRect(QStyle::CC_SpinBox, &opt,\n+                                                    QStyle::SC_SpinBoxEditField, this).size();\n+            hint += extra;\n+\n+            opt.rect = rect();\n+\n+            cachedMinimumSizeHint = style()->sizeFromContents(QStyle::CT_SpinBox, &opt, hint, this)\n+                                    .expandedTo(QApplication::globalStrut());\n+        }\n+        return cachedMinimumSizeHint;\n+    }\n+private:\n+    int currentUnit;\n+    qint64 singleStep;\n+    mutable QSize cachedMinimumSizeHint;\n+\n+    /**\n+     * Parse a string into a number of base monetary units and\n+     * return validity.\n+     * @note Must return 0 if !valid.\n+     */\n+    qint64 parse(const QString &text, bool *valid_out=0) const\n+    {\n+        qint64 val = 0;\n+        bool valid = BitcoinUnits::parse(currentUnit, text, &val);\n+        if(valid)\n+        {\n+            if(val < 0 || val > BitcoinUnits::maxMoney())\n+                valid = false;\n+        }\n+        if(valid_out)\n+            *valid_out = valid;\n+        return valid ? val : 0;\n     }\n-    double valueFromText(const QString& text) const\n+\n+protected:\n+    bool event(QEvent *event)\n     {\n-        return QDoubleSpinBox::valueFromText(BitcoinUnits::removeSpaces(text));\n+        if (event->type() == QEvent::KeyPress || event->type() == QEvent::KeyRelease)\n+        {\n+            QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);\n+            if (keyEvent->key() == Qt::Key_Comma)\n+            {\n+                // Translate a comma into a period\n+                QKeyEvent periodKeyEvent(event->type(), Qt::Key_Period, keyEvent->modifiers(), \".\", keyEvent->isAutoRepeat(), keyEvent->count());\n+                return QAbstractSpinBox::event(&periodKeyEvent);\n+            }\n+        }\n+        return QAbstractSpinBox::event(event);\n     }\n+\n+signals:\n+    void valueChanged();\n };\n \n+#include \"bitcoinamountfield.moc\"\n+\n BitcoinAmountField::BitcoinAmountField(QWidget *parent) :\n     QWidget(parent),\n-    amount(0),\n-    currentUnit(-1)\n+    amount(0)\n {\n-    nSingleStep = 100000; // satoshis\n-\n     amount = new AmountSpinBox(this);\n     amount->setLocale(QLocale::c());\n     amount->installEventFilter(this);\n@@ -85,21 +207,13 @@ BitcoinAmountField::BitcoinAmountField(QWidget *parent) :\n     setFocusProxy(amount);\n \n     // If one if the widgets changes, the combined content changes as well\n-    connect(amount, SIGNAL(valueChanged(QString)), this, SIGNAL(textChanged()));\n+    connect(amount, SIGNAL(valueChanged()), this, SIGNAL(valueChanged()));\n     connect(unit, SIGNAL(currentIndexChanged(int)), this, SLOT(unitChanged(int)));\n \n     // Set default based on configuration\n     unitChanged(unit->currentIndex());\n }\n \n-void BitcoinAmountField::setText(const QString &text)\n-{\n-    if (text.isEmpty())\n-        amount->clear();\n-    else\n-        amount->setValue(BitcoinUnits::removeSpaces(text).toDouble());\n-}\n-\n void BitcoinAmountField::clear()\n {\n     amount->clear();\n@@ -108,16 +222,9 @@ void BitcoinAmountField::clear()\n \n bool BitcoinAmountField::validate()\n {\n-    bool valid = true;\n-    if (amount->value() == 0.0)\n-        valid = false;\n-    else if (!BitcoinUnits::parse(currentUnit, text(), 0))\n-        valid = false;\n-    else if (amount->value() > BitcoinUnits::maxAmount(currentUnit))\n-        valid = false;\n-\n+    bool valid = false;\n+    value(&valid);\n     setValid(valid);\n-\n     return valid;\n }\n \n@@ -129,32 +236,13 @@ void BitcoinAmountField::setValid(bool valid)\n         amount->setStyleSheet(STYLE_INVALID);\n }\n \n-QString BitcoinAmountField::text() const\n-{\n-    if (amount->text().isEmpty())\n-        return QString();\n-    else\n-        return amount->text();\n-}\n-\n bool BitcoinAmountField::eventFilter(QObject *object, QEvent *event)\n {\n     if (event->type() == QEvent::FocusIn)\n     {\n         // Clear invalid flag on focus\n         setValid(true);\n     }\n-    else if (event->type() == QEvent::KeyPress || event->type() == QEvent::KeyRelease)\n-    {\n-        QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);\n-        if (keyEvent->key() == Qt::Key_Comma)\n-        {\n-            // Translate a comma into a period\n-            QKeyEvent periodKeyEvent(event->type(), Qt::Key_Period, keyEvent->modifiers(), \".\", keyEvent->isAutoRepeat(), keyEvent->count());\n-            QApplication::sendEvent(object, &periodKeyEvent);\n-            return true;\n-        }\n-    }\n     return QWidget::eventFilter(object, event);\n }\n \n@@ -167,18 +255,12 @@ QWidget *BitcoinAmountField::setupTabChain(QWidget *prev)\n \n qint64 BitcoinAmountField::value(bool *valid_out) const\n {\n-    qint64 val_out = 0;\n-    bool valid = BitcoinUnits::parse(currentUnit, text(), &val_out);\n-    if (valid_out)\n-    {\n-        *valid_out = valid;\n-    }\n-    return val_out;\n+    return amount->value(valid_out);\n }\n \n void BitcoinAmountField::setValue(qint64 value)\n {\n-    setText(BitcoinUnits::format(currentUnit, value));\n+    amount->setValue(value);\n }\n \n void BitcoinAmountField::setReadOnly(bool fReadOnly)\n@@ -195,28 +277,7 @@ void BitcoinAmountField::unitChanged(int idx)\n     // Determine new unit ID\n     int newUnit = unit->itemData(idx, BitcoinUnits::UnitRole).toInt();\n \n-    // Parse current value and convert to new unit\n-    bool valid = false;\n-    qint64 currentValue = value(&valid);\n-\n-    currentUnit = newUnit;\n-\n-    // Set max length after retrieving the value, to prevent truncation\n-    amount->setDecimals(BitcoinUnits::decimals(currentUnit));\n-    amount->setMaximum(qPow(10, BitcoinUnits::amountDigits(currentUnit)) - qPow(10, -amount->decimals()));\n-    amount->setSingleStep((double)nSingleStep / (double)BitcoinUnits::factor(currentUnit));\n-\n-    if (valid)\n-    {\n-        // If value was valid, re-place it in the widget with the new unit\n-        setValue(currentValue);\n-    }\n-    else\n-    {\n-        // If current value is invalid, just clear field\n-        setText(\"\");\n-    }\n-    setValid(true);\n+    amount->setDisplayUnit(newUnit);\n }\n \n void BitcoinAmountField::setDisplayUnit(int newUnit)\n@@ -226,6 +287,5 @@ void BitcoinAmountField::setDisplayUnit(int newUnit)\n \n void BitcoinAmountField::setSingleStep(qint64 step)\n {\n-    nSingleStep = step;\n-    unitChanged(unit->currentIndex());\n+    amount->setSingleStep(step);\n }"
      },
      {
        "sha": "c713f5d68736f0e8dc96b6837ba3b20beac65133",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=91cce1732b73c4457e474c557aaa7f343c0dc8a2",
        "patch": "@@ -8,17 +8,18 @@\n #include <QWidget>\n \n QT_BEGIN_NAMESPACE\n-class QDoubleSpinBox;\n class QValueComboBox;\n QT_END_NAMESPACE\n \n+class AmountSpinBox;\n+\n /** Widget for entering bitcoin amounts.\n   */\n class BitcoinAmountField: public QWidget\n {\n     Q_OBJECT\n \n-    Q_PROPERTY(qint64 value READ value WRITE setValue NOTIFY textChanged USER true)\n+    Q_PROPERTY(qint64 value READ value WRITE setValue NOTIFY valueChanged USER true)\n \n public:\n     explicit BitcoinAmountField(QWidget *parent = 0);\n@@ -49,20 +50,15 @@ class BitcoinAmountField: public QWidget\n     QWidget *setupTabChain(QWidget *prev);\n \n signals:\n-    void textChanged();\n+    void valueChanged();\n \n protected:\n     /** Intercept focus-in event and ',' key presses */\n     bool eventFilter(QObject *object, QEvent *event);\n \n private:\n-    QDoubleSpinBox *amount;\n+    AmountSpinBox *amount;\n     QValueComboBox *unit;\n-    int currentUnit;\n-    qint64 nSingleStep;\n-\n-    void setText(const QString &text);\n-    QString text() const;\n \n private slots:\n     void unitChanged(int idx);"
      },
      {
        "sha": "0435ebc5dc545bc912d4b3af710f4b93a3848225",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=91cce1732b73c4457e474c557aaa7f343c0dc8a2",
        "patch": "@@ -4,6 +4,8 @@\n \n #include \"bitcoinunits.h\"\n \n+#include \"core.h\"\n+\n #include <QStringList>\n \n BitcoinUnits::BitcoinUnits(QObject *parent):\n@@ -250,3 +252,8 @@ QVariant BitcoinUnits::data(const QModelIndex &index, int role) const\n     }\n     return QVariant();\n }\n+\n+qint64 BitcoinUnits::maxMoney()\n+{\n+    return MAX_MONEY;\n+}"
      },
      {
        "sha": "944b4ec5303bec0f23dabcb7f6e4b460dae87c64",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=91cce1732b73c4457e474c557aaa7f343c0dc8a2",
        "patch": "@@ -120,6 +120,9 @@ class BitcoinUnits: public QAbstractListModel\n         return text;\n     }\n \n+    //! Return maximum number of base units (Satoshis)\n+    static qint64 maxMoney();\n+\n private:\n     QList<BitcoinUnits::Unit> unitlist;\n };"
      },
      {
        "sha": "3c0b8881ff5a48ef1e6be1b53bff66cb337aa91b",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91cce1732b73c4457e474c557aaa7f343c0dc8a2/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=91cce1732b73c4457e474c557aaa7f343c0dc8a2",
        "patch": "@@ -72,7 +72,7 @@ void SendCoinsEntry::setModel(WalletModel *model)\n     if (model && model->getOptionsModel())\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n-    connect(ui->payAmount, SIGNAL(textChanged()), this, SIGNAL(payAmountChanged()));\n+    connect(ui->payAmount, SIGNAL(valueChanged()), this, SIGNAL(payAmountChanged()));\n     connect(ui->deleteButton, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n     connect(ui->deleteButton_is, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n     connect(ui->deleteButton_s, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n@@ -130,6 +130,13 @@ bool SendCoinsEntry::validate()\n         retval = false;\n     }\n \n+    // Sending a zero amount is invalid\n+    if (ui->payAmount->value(0) <= 0)\n+    {\n+        ui->payAmount->setValid(false);\n+        retval = false;\n+    }\n+\n     // Reject dust outputs:\n     if (retval && GUIUtil::isDust(ui->payTo->text(), ui->payAmount->value())) {\n         ui->payAmount->setValid(false);"
      }
    ]
  },
  {
    "sha": "2a05101efd41f4e86a0323f5e00dd040574bc170",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTA1MTAxZWZkNDFmNGU4NmEwMzIzZjVlMDBkZDA0MDU3NGJjMTcw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-18T14:36:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-23T15:58:46Z"
      },
      "message": "qt: Remove unused functions from BitcoinUnits\n\nRemove two functions that are now unused.",
      "tree": {
        "sha": "c977b6f1f35972de632b6ebd362d4bde3a0b7400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c977b6f1f35972de632b6ebd362d4bde3a0b7400"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a05101efd41f4e86a0323f5e00dd040574bc170",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a05101efd41f4e86a0323f5e00dd040574bc170",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a05101efd41f4e86a0323f5e00dd040574bc170",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a05101efd41f4e86a0323f5e00dd040574bc170/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91cce1732b73c4457e474c557aaa7f343c0dc8a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91cce1732b73c4457e474c557aaa7f343c0dc8a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91cce1732b73c4457e474c557aaa7f343c0dc8a2"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 0,
      "deletions": 26
    },
    "files": [
      {
        "sha": "6f506d3f2559108a751d45a4f6ed49849abf7cc0",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a05101efd41f4e86a0323f5e00dd040574bc170/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a05101efd41f4e86a0323f5e00dd040574bc170/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=2a05101efd41f4e86a0323f5e00dd040574bc170",
        "patch": "@@ -80,28 +80,6 @@ qint64 BitcoinUnits::factor(int unit)\n     }\n }\n \n-qint64 BitcoinUnits::maxAmount(int unit)\n-{\n-    switch(unit)\n-    {\n-    case BTC:  return Q_INT64_C(21000000);\n-    case mBTC: return Q_INT64_C(21000000000);\n-    case uBTC: return Q_INT64_C(21000000000000);\n-    default:   return 0;\n-    }\n-}\n-\n-int BitcoinUnits::amountDigits(int unit)\n-{\n-    switch(unit)\n-    {\n-    case BTC: return 8; // 21,000,000 (# digits, without commas)\n-    case mBTC: return 11; // 21,000,000,000\n-    case uBTC: return 14; // 21,000,000,000,000\n-    default: return 0;\n-    }\n-}\n-\n int BitcoinUnits::decimals(int unit)\n {\n     switch(unit)"
      },
      {
        "sha": "be9dca601235fe1abebeca8243431e7e897412d8",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a05101efd41f4e86a0323f5e00dd040574bc170/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a05101efd41f4e86a0323f5e00dd040574bc170/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=2a05101efd41f4e86a0323f5e00dd040574bc170",
        "patch": "@@ -82,10 +82,6 @@ class BitcoinUnits: public QAbstractListModel\n     static QString description(int unit);\n     //! Number of Satoshis (1e-8) per unit\n     static qint64 factor(int unit);\n-    //! Max amount per unit\n-    static qint64 maxAmount(int unit);\n-    //! Number of amount digits (to represent max number of coins)\n-    static int amountDigits(int unit);\n     //! Number of decimals left\n     static int decimals(int unit);\n     //! Format as string"
      }
    ]
  },
  {
    "sha": "29eaa316944477af538b75b439a49ee1a9fc2f2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWVhYTMxNjk0NDQ3N2FmNTM4Yjc1YjQzOWE0OWVlMWE5ZmMyZjJh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-22T07:30:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-23T15:58:47Z"
      },
      "message": "ui: Make sure sendcoinsentry signals only connected once\n\nMove signal connections to constructor where possible.",
      "tree": {
        "sha": "4cf2d1d0411ab8c558a4980b02b44840de2c4e30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cf2d1d0411ab8c558a4980b02b44840de2c4e30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29eaa316944477af538b75b439a49ee1a9fc2f2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29eaa316944477af538b75b439a49ee1a9fc2f2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29eaa316944477af538b75b439a49ee1a9fc2f2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29eaa316944477af538b75b439a49ee1a9fc2f2a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a05101efd41f4e86a0323f5e00dd040574bc170",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a05101efd41f4e86a0323f5e00dd040574bc170",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a05101efd41f4e86a0323f5e00dd040574bc170"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "52545c3857bcd5b1034f2e260e4a17a4bf8d37ab",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29eaa316944477af538b75b439a49ee1a9fc2f2a/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29eaa316944477af538b75b439a49ee1a9fc2f2a/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=29eaa316944477af538b75b439a49ee1a9fc2f2a",
        "patch": "@@ -34,6 +34,12 @@ SendCoinsEntry::SendCoinsEntry(QWidget *parent) :\n     GUIUtil::setupAddressWidget(ui->payTo, this);\n     // just a label for displaying bitcoin address(es)\n     ui->payTo_is->setFont(GUIUtil::bitcoinAddressFont());\n+\n+    // Connect signals\n+    connect(ui->payAmount, SIGNAL(valueChanged()), this, SIGNAL(payAmountChanged()));\n+    connect(ui->deleteButton, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n+    connect(ui->deleteButton_is, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n+    connect(ui->deleteButton_s, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n }\n \n SendCoinsEntry::~SendCoinsEntry()\n@@ -72,11 +78,6 @@ void SendCoinsEntry::setModel(WalletModel *model)\n     if (model && model->getOptionsModel())\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n-    connect(ui->payAmount, SIGNAL(valueChanged()), this, SIGNAL(payAmountChanged()));\n-    connect(ui->deleteButton, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n-    connect(ui->deleteButton_is, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n-    connect(ui->deleteButton_s, SIGNAL(clicked()), this, SLOT(deleteClicked()));\n-\n     clear();\n }\n "
      }
    ]
  }
]