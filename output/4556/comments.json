[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49503381",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#issuecomment-49503381",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4556",
    "id": 49503381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTAzMzgx",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-19T08:37:04Z",
    "updated_at": "2014-07-19T08:37:04Z",
    "author_association": "MEMBER",
    "body": "@cozz @roybadami @diapolo can you take a look here - I'd feel a lot better if we got rid of the last vestige of floating-point arithmetic with amounts in the GUI.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49503381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49559502",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#issuecomment-49559502",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4556",
    "id": 49559502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTU5NTAy",
    "user": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-20T21:04:20Z",
    "updated_at": "2014-07-20T21:05:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "- `Object::connect: No such signal QAbstractSpinBox::valueChanged(QString) in qt/bitcoinamountfield.cpp:201`\n  We need a different implementation of the signal valueChanged now.  \n- If the field is empty or zero, you can not use the single step feature.\n- For example, if you enter 1 mBTC and then press single step down, the result is 1 satoshi. Same for 1 uBTC.\n- The alignment of the field-content has changed from left to right. Is this intentional?\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49559502/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49572279",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#issuecomment-49572279",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4556",
    "id": 49572279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTcyMjc5",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-21T05:08:21Z",
    "updated_at": "2014-07-21T05:08:21Z",
    "author_association": "MEMBER",
    "body": "The alignment change to right is intentional, as we always align amounts to the right. Will look at the rest.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49572279/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49578387",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#issuecomment-49578387",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4556",
    "id": 49578387,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NTc4Mzg3",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-21T07:36:57Z",
    "updated_at": "2014-07-21T07:37:11Z",
    "author_association": "MEMBER",
    "body": "- Changed the event code to send the event to the superclass directly\n- Added `Q_OBJECT` and the necessary .moc boilerplate\n\n> If the field is empty or zero, you can not use the single step feature.\n\nFixed. Stepping up from an empty field is now allowed, and zero amounts are allowed. \nI moved the check for zero amounts to SendCoinsEntry as that's the only place where zero amounts are invalid.\n\n> For example, if you enter 1 mBTC and then press single step down, the result is 1 satoshi. Same for 1 uBTC.\n\nFixed.\n\n> Object::connect: No such signal QAbstractSpinBox::valueChanged(QString) in qt/bitcoinamountfield.cpp:201 We need a different implementation of the signal valueChanged now.\n\nFixed. I changed the signal to `valueChanged(qint64)` instead.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49578387/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49692177",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#issuecomment-49692177",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4556",
    "id": 49692177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NjkyMTc3",
    "user": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-22T02:47:30Z",
    "updated_at": "2014-07-22T02:47:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "works for me now, after I made 2 minor changes:\n- sendcoinsentry.cpp, line 75 needs to connect to valueChanged(qint64) instead of textChanged()\n- the signal is not triggered, if you manually edit the field, only single-step triggers.\n  I simply added an \"emit valueChanged(value());\" to the event-function in bitcoinamountfield.cpp, line 176.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49692177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49703734",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#issuecomment-49703734",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4556",
    "id": 49703734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NzAzNzM0",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-22T06:43:07Z",
    "updated_at": "2014-07-22T06:43:07Z",
    "author_association": "MEMBER",
    "body": "Thanks for testing and your suggestions.\n\nI think connecting lineEdit()->textEdited to a signal handler that does `emit valueChanged(value());` would be proper way to handle this.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49703734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49705254",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#issuecomment-49705254",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4556",
    "id": 49705254,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NzA1MjU0",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-22T07:06:46Z",
    "updated_at": "2014-07-22T07:06:46Z",
    "author_association": "MEMBER",
    "body": "Or even better, just connect lineEdit()->textEdited to valueChanged. No one is using the passed-in value so it can just as well be valueChanged() without arg.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49705254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49707228",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#issuecomment-49707228",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4556",
    "id": 49707228,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NzA3MjI4",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-22T07:34:49Z",
    "updated_at": "2014-07-22T07:34:49Z",
    "author_association": "MEMBER",
    "body": "OK - should be fixed now.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49707228/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49737472",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#issuecomment-49737472",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4556",
    "id": 49737472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NzM3NDcy",
    "user": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-22T13:21:32Z",
    "updated_at": "2014-07-22T13:23:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just tested, looks good now.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49737472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49897001",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#issuecomment-49897001",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4556",
    "id": 49897001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODk3MDAx",
    "user": {
      "login": "BitcoinPullTester",
      "id": 2110907,
      "node_id": "MDQ6VXNlcjIxMTA5MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2110907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BitcoinPullTester",
      "html_url": "https://github.com/BitcoinPullTester",
      "followers_url": "https://api.github.com/users/BitcoinPullTester/followers",
      "following_url": "https://api.github.com/users/BitcoinPullTester/following{/other_user}",
      "gists_url": "https://api.github.com/users/BitcoinPullTester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BitcoinPullTester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BitcoinPullTester/subscriptions",
      "organizations_url": "https://api.github.com/users/BitcoinPullTester/orgs",
      "repos_url": "https://api.github.com/users/BitcoinPullTester/repos",
      "events_url": "https://api.github.com/users/BitcoinPullTester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BitcoinPullTester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-07-23T16:15:55Z",
    "updated_at": "2014-07-23T16:15:55Z",
    "author_association": "NONE",
    "body": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4556_29eaa316944477af538b75b439a49ee1a9fc2f2a/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49897001/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15142761",
    "pull_request_review_id": null,
    "id": 15142761,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTQyNzYx",
    "diff_hunk": "@@ -9,63 +9,175 @@\n #include \"qvaluecombobox.h\"\n \n #include <QApplication>\n-#include <QDoubleSpinBox>\n+#include <QAbstractSpinBox>\n #include <QHBoxLayout>\n #include <QKeyEvent>\n+#include <QLineEdit>\n #include <qmath.h> // for qPow()\n \n-// QDoubleSpinBox that shows SI-style thin space thousands separators\n-class AmountSpinBox: public QDoubleSpinBox\n+/** QSpinBox that uses fixed-point numbers internally and uses our own\n+ * formatting/parsing functions.\n+ */\n+class AmountSpinBox: public QAbstractSpinBox\n {\n public:\n     explicit AmountSpinBox(QWidget *parent):\n-        QDoubleSpinBox(parent)\n+        QAbstractSpinBox(parent),\n+        currentUnit(0),\n+        singleStep(100000) // satoshis\n     {\n+        setAlignment(Qt::AlignRight);\n     }\n-    QString textFromValue(double value) const\n+\n+    QValidator::State validate(QString &text, int &pos) const\n+    {\n+        if(text.isEmpty())\n+            return QValidator::Intermediate;\n+        bool valid = false;\n+        parse(text, &valid, true);\n+        /* Make sure we return Intermediate so that fixup() is called */\n+        return valid ? QValidator::Intermediate : QValidator::Invalid;\n+    }\n+\n+    void fixup(QString &input) const\n+    {\n+        bool valid = false;\n+        qint64 val = parse(input, &valid, true);\n+        if(valid)\n+        {\n+            input = BitcoinUnits::format(currentUnit, val, false, BitcoinUnits::separatorAlways);\n+            lineEdit()->setText(input);\n+        }\n+    }\n+\n+    qint64 value(bool *valid_out=0) const\n+    {\n+        return parse(text(), valid_out);\n+    }\n+\n+    void setValue(qint64 value)\n+    {\n+        lineEdit()->setText(BitcoinUnits::format(currentUnit, value, false, BitcoinUnits::separatorAlways));\n+    }\n+\n+    void stepBy(int steps)\n+    {\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+        if(valid)\n+        {\n+            val = val + steps * singleStep;\n+            val = qMin(qMax(val, Q_INT64_C(0)), BitcoinUnits::maxMoney());\n+            setValue(val);\n+        }\n+    }\n+\n+    StepEnabled stepEnabled() const\n     {\n-        QStringList parts = QDoubleSpinBox::textFromValue(value).split(\".\");\n-        QString quotient_str = parts[0];\n-        QString remainder_str;\n-        if(parts.size() > 1)\n-            remainder_str = parts[1];\n-\n-        // Code duplication between here and BitcoinUnits::format\n-        // TODO: Figure out how to share this code\n-        QChar thin_sp(THIN_SP_CP);\n-        int q_size = quotient_str.size();\n-        if (q_size > 4)\n-            for (int i = 3; i < q_size; i += 3)\n-                quotient_str.insert(q_size - i, thin_sp);\n-\n-        int r_size = remainder_str.size();\n-        if (r_size > 4)\n-            for (int i = 3, adj = 0; i < r_size; i += 3, adj++)\n-                remainder_str.insert(i + adj, thin_sp);\n-\n-        if(remainder_str.isEmpty())\n-            return quotient_str;\n+        StepEnabled rv = 0;\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+        if(valid)\n+        {\n+            if(val > 0)\n+                rv |= StepDownEnabled;\n+            if(val < BitcoinUnits::maxMoney())\n+                rv |= StepUpEnabled;\n+        }\n+        return rv;\n+    }\n+\n+    void setDisplayUnit(int unit)\n+    {\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+\n+        currentUnit = unit;\n+\n+        if(valid)\n+            setValue(val);\n         else\n-            return quotient_str + QString(\".\") + remainder_str;\n+            clear();\n     }\n-    QValidator::State validate (QString &text, int &pos) const\n+\n+    void setSingleStep(qint64 step)\n     {\n-        QString s(BitcoinUnits::removeSpaces(text));\n-        return QDoubleSpinBox::validate(s, pos);\n+        singleStep = step;\n     }\n-    double valueFromText(const QString& text) const\n+\n+    QSize minimumSizeHint() const\n     {\n-        return QDoubleSpinBox::valueFromText(BitcoinUnits::removeSpaces(text));\n+        if(cachedMinimumSizeHint.isEmpty())\n+        {\n+            ensurePolished();\n+\n+            const QFontMetrics fm(fontMetrics());\n+            int h = lineEdit()->minimumSizeHint().height();\n+            int w = fm.width(BitcoinUnits::format(BitcoinUnits::BTC, BitcoinUnits::maxMoney(), false, BitcoinUnits::separatorAlways));\n+            w += 2; // cursor blinking space\n+\n+            QStyleOptionSpinBox opt;\n+            initStyleOption(&opt);\n+            QSize hint(w, h);\n+            QSize extra(35, 6);\n+            opt.rect.setSize(hint + extra);\n+            extra += hint - style()->subControlRect(QStyle::CC_SpinBox, &opt,\n+                                                    QStyle::SC_SpinBoxEditField, this).size();\n+            // get closer to final result by repeating the calculation\n+            opt.rect.setSize(hint + extra);\n+            extra += hint - style()->subControlRect(QStyle::CC_SpinBox, &opt,\n+                                                    QStyle::SC_SpinBoxEditField, this).size();\n+            hint += extra;\n+\n+            opt.rect = rect();\n+\n+            cachedMinimumSizeHint = style()->sizeFromContents(QStyle::CT_SpinBox, &opt, hint, this)\n+                                    .expandedTo(QApplication::globalStrut());\n+        }\n+        return cachedMinimumSizeHint;\n+    }\n+\n+private:\n+    int currentUnit;\n+    qint64 singleStep;\n+    mutable QSize cachedMinimumSizeHint;\n+\n+    qint64 parse(const QString &text, bool *valid_out=0, bool allowzero=false) const\n+    {\n+        qint64 val = 0;\n+        bool valid = BitcoinUnits::parse(currentUnit, text, &val);\n+        if(valid)\n+        {\n+            if(val < 0 || val > BitcoinUnits::maxMoney() || (val==0 && !allowzero))\n+                valid = false;\n+        }\n+        if(valid_out)\n+            *valid_out = valid;\n+        return valid ? val : 0;\n+    }\n+\n+protected:\n+    bool event(QEvent *event)\n+    {\n+        if (event->type() == QEvent::KeyPress || event->type() == QEvent::KeyRelease)\n+        {\n+            QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);\n+            if (keyEvent->key() == Qt::Key_Comma)\n+            {\n+                // Translate a comma into a period\n+                QKeyEvent periodKeyEvent(event->type(), Qt::Key_Period, keyEvent->modifiers(), \".\", keyEvent->isAutoRepeat(), keyEvent->count());\n+                QApplication::sendEvent(this, &periodKeyEvent);",
    "path": "src/qt/bitcoinamountfield.cpp",
    "position": null,
    "original_position": 193,
    "commit_id": "29eaa316944477af538b75b439a49ee1a9fc2f2a",
    "original_commit_id": "788eb1a67c863cfc46958d74c4f9fe645c585329",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "TODO: this likely doesn't have to go through QApplication anymore, can we just call QAbstractSpinBox::event?\n",
    "created_at": "2014-07-19T08:37:20Z",
    "updated_at": "2014-07-23T15:59:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15142761",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15142761"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15142761"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15142761/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 169,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144941",
    "pull_request_review_id": null,
    "id": 15144941,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTQ0OTQx",
    "diff_hunk": "@@ -9,63 +9,175 @@\n #include \"qvaluecombobox.h\"\n \n #include <QApplication>\n-#include <QDoubleSpinBox>\n+#include <QAbstractSpinBox>\n #include <QHBoxLayout>\n #include <QKeyEvent>\n+#include <QLineEdit>\n #include <qmath.h> // for qPow()\n \n-// QDoubleSpinBox that shows SI-style thin space thousands separators\n-class AmountSpinBox: public QDoubleSpinBox\n+/** QSpinBox that uses fixed-point numbers internally and uses our own\n+ * formatting/parsing functions.\n+ */\n+class AmountSpinBox: public QAbstractSpinBox\n {\n public:\n     explicit AmountSpinBox(QWidget *parent):\n-        QDoubleSpinBox(parent)\n+        QAbstractSpinBox(parent),\n+        currentUnit(0),\n+        singleStep(100000) // satoshis\n     {\n+        setAlignment(Qt::AlignRight);\n     }\n-    QString textFromValue(double value) const\n+\n+    QValidator::State validate(QString &text, int &pos) const\n+    {\n+        if(text.isEmpty())\n+            return QValidator::Intermediate;\n+        bool valid = false;\n+        parse(text, &valid, true);\n+        /* Make sure we return Intermediate so that fixup() is called */\n+        return valid ? QValidator::Intermediate : QValidator::Invalid;\n+    }\n+\n+    void fixup(QString &input) const\n+    {\n+        bool valid = false;\n+        qint64 val = parse(input, &valid, true);\n+        if(valid)\n+        {\n+            input = BitcoinUnits::format(currentUnit, val, false, BitcoinUnits::separatorAlways);\n+            lineEdit()->setText(input);\n+        }\n+    }\n+\n+    qint64 value(bool *valid_out=0) const\n+    {\n+        return parse(text(), valid_out);\n+    }\n+\n+    void setValue(qint64 value)\n+    {\n+        lineEdit()->setText(BitcoinUnits::format(currentUnit, value, false, BitcoinUnits::separatorAlways));\n+    }\n+\n+    void stepBy(int steps)\n+    {\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+        if(valid)\n+        {\n+            val = val + steps * singleStep;\n+            val = qMin(qMax(val, Q_INT64_C(0)), BitcoinUnits::maxMoney());\n+            setValue(val);\n+        }\n+    }\n+\n+    StepEnabled stepEnabled() const\n     {\n-        QStringList parts = QDoubleSpinBox::textFromValue(value).split(\".\");\n-        QString quotient_str = parts[0];\n-        QString remainder_str;\n-        if(parts.size() > 1)\n-            remainder_str = parts[1];\n-\n-        // Code duplication between here and BitcoinUnits::format\n-        // TODO: Figure out how to share this code\n-        QChar thin_sp(THIN_SP_CP);\n-        int q_size = quotient_str.size();\n-        if (q_size > 4)\n-            for (int i = 3; i < q_size; i += 3)\n-                quotient_str.insert(q_size - i, thin_sp);\n-\n-        int r_size = remainder_str.size();\n-        if (r_size > 4)\n-            for (int i = 3, adj = 0; i < r_size; i += 3, adj++)\n-                remainder_str.insert(i + adj, thin_sp);\n-\n-        if(remainder_str.isEmpty())\n-            return quotient_str;\n+        StepEnabled rv = 0;\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+        if(valid)\n+        {\n+            if(val > 0)\n+                rv |= StepDownEnabled;\n+            if(val < BitcoinUnits::maxMoney())\n+                rv |= StepUpEnabled;\n+        }\n+        return rv;\n+    }\n+\n+    void setDisplayUnit(int unit)\n+    {\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+\n+        currentUnit = unit;\n+\n+        if(valid)\n+            setValue(val);\n         else\n-            return quotient_str + QString(\".\") + remainder_str;\n+            clear();\n     }\n-    QValidator::State validate (QString &text, int &pos) const\n+\n+    void setSingleStep(qint64 step)\n     {\n-        QString s(BitcoinUnits::removeSpaces(text));\n-        return QDoubleSpinBox::validate(s, pos);\n+        singleStep = step;\n     }\n-    double valueFromText(const QString& text) const\n+\n+    QSize minimumSizeHint() const\n     {\n-        return QDoubleSpinBox::valueFromText(BitcoinUnits::removeSpaces(text));\n+        if(cachedMinimumSizeHint.isEmpty())\n+        {\n+            ensurePolished();\n+\n+            const QFontMetrics fm(fontMetrics());\n+            int h = lineEdit()->minimumSizeHint().height();\n+            int w = fm.width(BitcoinUnits::format(BitcoinUnits::BTC, BitcoinUnits::maxMoney(), false, BitcoinUnits::separatorAlways));\n+            w += 2; // cursor blinking space\n+\n+            QStyleOptionSpinBox opt;\n+            initStyleOption(&opt);\n+            QSize hint(w, h);\n+            QSize extra(35, 6);\n+            opt.rect.setSize(hint + extra);\n+            extra += hint - style()->subControlRect(QStyle::CC_SpinBox, &opt,\n+                                                    QStyle::SC_SpinBoxEditField, this).size();\n+            // get closer to final result by repeating the calculation\n+            opt.rect.setSize(hint + extra);\n+            extra += hint - style()->subControlRect(QStyle::CC_SpinBox, &opt,\n+                                                    QStyle::SC_SpinBoxEditField, this).size();\n+            hint += extra;\n+\n+            opt.rect = rect();\n+\n+            cachedMinimumSizeHint = style()->sizeFromContents(QStyle::CT_SpinBox, &opt, hint, this)\n+                                    .expandedTo(QApplication::globalStrut());\n+        }\n+        return cachedMinimumSizeHint;\n+    }\n+\n+private:\n+    int currentUnit;\n+    qint64 singleStep;\n+    mutable QSize cachedMinimumSizeHint;\n+\n+    qint64 parse(const QString &text, bool *valid_out=0, bool allowzero=false) const\n+    {\n+        qint64 val = 0;\n+        bool valid = BitcoinUnits::parse(currentUnit, text, &val);\n+        if(valid)\n+        {\n+            if(val < 0 || val > BitcoinUnits::maxMoney() || (val==0 && !allowzero))\n+                valid = false;\n+        }\n+        if(valid_out)\n+            *valid_out = valid;\n+        return valid ? val : 0;\n+    }\n+\n+protected:\n+    bool event(QEvent *event)\n+    {\n+        if (event->type() == QEvent::KeyPress || event->type() == QEvent::KeyRelease)\n+        {\n+            QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);\n+            if (keyEvent->key() == Qt::Key_Comma)\n+            {\n+                // Translate a comma into a period\n+                QKeyEvent periodKeyEvent(event->type(), Qt::Key_Period, keyEvent->modifiers(), \".\", keyEvent->isAutoRepeat(), keyEvent->count());\n+                QApplication::sendEvent(this, &periodKeyEvent);",
    "path": "src/qt/bitcoinamountfield.cpp",
    "position": null,
    "original_position": 193,
    "commit_id": "29eaa316944477af538b75b439a49ee1a9fc2f2a",
    "original_commit_id": "788eb1a67c863cfc46958d74c4f9fe645c585329",
    "user": {
      "login": "Diapolo",
      "id": 1419649,
      "node_id": "MDQ6VXNlcjE0MTk2NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Diapolo",
      "html_url": "https://github.com/Diapolo",
      "followers_url": "https://api.github.com/users/Diapolo/followers",
      "following_url": "https://api.github.com/users/Diapolo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Diapolo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
      "organizations_url": "https://api.github.com/users/Diapolo/orgs",
      "repos_url": "https://api.github.com/users/Diapolo/repos",
      "events_url": "https://api.github.com/users/Diapolo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Diapolo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I tend to agree as the scope is now our class and QAbstractSpinBox.\n",
    "created_at": "2014-07-19T18:14:02Z",
    "updated_at": "2014-07-23T15:59:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15144941",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144941"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15144941"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 169,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144943",
    "pull_request_review_id": null,
    "id": 15144943,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTQ0OTQz",
    "diff_hunk": "@@ -9,63 +9,175 @@\n #include \"qvaluecombobox.h\"\n \n #include <QApplication>\n-#include <QDoubleSpinBox>\n+#include <QAbstractSpinBox>\n #include <QHBoxLayout>\n #include <QKeyEvent>\n+#include <QLineEdit>\n #include <qmath.h> // for qPow()",
    "path": "src/qt/bitcoinamountfield.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "29eaa316944477af538b75b439a49ee1a9fc2f2a",
    "original_commit_id": "9bf54bf9f346679252abc2e1458a7b807578093c",
    "user": {
      "login": "Diapolo",
      "id": 1419649,
      "node_id": "MDQ6VXNlcjE0MTk2NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Diapolo",
      "html_url": "https://github.com/Diapolo",
      "followers_url": "https://api.github.com/users/Diapolo/followers",
      "following_url": "https://api.github.com/users/Diapolo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Diapolo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
      "organizations_url": "https://api.github.com/users/Diapolo/orgs",
      "repos_url": "https://api.github.com/users/Diapolo/repos",
      "events_url": "https://api.github.com/users/Diapolo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Diapolo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Seems this is obsolete now.\n",
    "created_at": "2014-07-19T18:14:27Z",
    "updated_at": "2014-07-23T15:59:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15144943",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144943"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15144943"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144943/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 16,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144946",
    "pull_request_review_id": null,
    "id": 15144946,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTQ0OTQ2",
    "diff_hunk": "@@ -9,63 +9,175 @@\n #include \"qvaluecombobox.h\"\n \n #include <QApplication>\n-#include <QDoubleSpinBox>\n+#include <QAbstractSpinBox>\n #include <QHBoxLayout>\n #include <QKeyEvent>\n+#include <QLineEdit>\n #include <qmath.h> // for qPow()\n \n-// QDoubleSpinBox that shows SI-style thin space thousands separators\n-class AmountSpinBox: public QDoubleSpinBox\n+/** QSpinBox that uses fixed-point numbers internally and uses our own\n+ * formatting/parsing functions.\n+ */\n+class AmountSpinBox: public QAbstractSpinBox",
    "path": "src/qt/bitcoinamountfield.cpp",
    "position": 16,
    "original_position": 16,
    "commit_id": "29eaa316944477af538b75b439a49ee1a9fc2f2a",
    "original_commit_id": "9bf54bf9f346679252abc2e1458a7b807578093c",
    "user": {
      "login": "Diapolo",
      "id": 1419649,
      "node_id": "MDQ6VXNlcjE0MTk2NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Diapolo",
      "html_url": "https://github.com/Diapolo",
      "followers_url": "https://api.github.com/users/Diapolo/followers",
      "following_url": "https://api.github.com/users/Diapolo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Diapolo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
      "organizations_url": "https://api.github.com/users/Diapolo/orgs",
      "repos_url": "https://api.github.com/users/Diapolo/repos",
      "events_url": "https://api.github.com/users/Diapolo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Diapolo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Does this need the `Q_OBJECT` macro?\n",
    "created_at": "2014-07-19T18:15:03Z",
    "updated_at": "2014-07-23T15:59:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15144946",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144946"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15144946"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 20,
    "original_line": 21,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144964",
    "pull_request_review_id": null,
    "id": 15144964,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTQ0OTY0",
    "diff_hunk": "@@ -9,63 +9,175 @@\n #include \"qvaluecombobox.h\"\n \n #include <QApplication>\n-#include <QDoubleSpinBox>\n+#include <QAbstractSpinBox>\n #include <QHBoxLayout>\n #include <QKeyEvent>\n+#include <QLineEdit>\n #include <qmath.h> // for qPow()\n \n-// QDoubleSpinBox that shows SI-style thin space thousands separators\n-class AmountSpinBox: public QDoubleSpinBox\n+/** QSpinBox that uses fixed-point numbers internally and uses our own\n+ * formatting/parsing functions.\n+ */\n+class AmountSpinBox: public QAbstractSpinBox\n {\n public:\n     explicit AmountSpinBox(QWidget *parent):\n-        QDoubleSpinBox(parent)\n+        QAbstractSpinBox(parent),\n+        currentUnit(0),",
    "path": "src/qt/bitcoinamountfield.cpp",
    "position": null,
    "original_position": 22,
    "commit_id": "29eaa316944477af538b75b439a49ee1a9fc2f2a",
    "original_commit_id": "9bf54bf9f346679252abc2e1458a7b807578093c",
    "user": {
      "login": "Diapolo",
      "id": 1419649,
      "node_id": "MDQ6VXNlcjE0MTk2NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1419649?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Diapolo",
      "html_url": "https://github.com/Diapolo",
      "followers_url": "https://api.github.com/users/Diapolo/followers",
      "following_url": "https://api.github.com/users/Diapolo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Diapolo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Diapolo/subscriptions",
      "organizations_url": "https://api.github.com/users/Diapolo/orgs",
      "repos_url": "https://api.github.com/users/Diapolo/repos",
      "events_url": "https://api.github.com/users/Diapolo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Diapolo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could/Should this better be `BitcoinUnits::BTC`?\n",
    "created_at": "2014-07-19T18:18:27Z",
    "updated_at": "2014-07-23T15:59:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15144964",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144964"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15144964"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15144964/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 26,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15151961",
    "pull_request_review_id": null,
    "id": 15151961,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTUxOTYx",
    "diff_hunk": "@@ -9,63 +9,175 @@\n #include \"qvaluecombobox.h\"\n \n #include <QApplication>\n-#include <QDoubleSpinBox>\n+#include <QAbstractSpinBox>\n #include <QHBoxLayout>\n #include <QKeyEvent>\n+#include <QLineEdit>\n #include <qmath.h> // for qPow()\n \n-// QDoubleSpinBox that shows SI-style thin space thousands separators\n-class AmountSpinBox: public QDoubleSpinBox\n+/** QSpinBox that uses fixed-point numbers internally and uses our own\n+ * formatting/parsing functions.\n+ */\n+class AmountSpinBox: public QAbstractSpinBox\n {\n public:\n     explicit AmountSpinBox(QWidget *parent):\n-        QDoubleSpinBox(parent)\n+        QAbstractSpinBox(parent),\n+        currentUnit(0),\n+        singleStep(100000) // satoshis\n     {\n+        setAlignment(Qt::AlignRight);\n     }\n-    QString textFromValue(double value) const\n+\n+    QValidator::State validate(QString &text, int &pos) const\n+    {\n+        if(text.isEmpty())\n+            return QValidator::Intermediate;\n+        bool valid = false;\n+        parse(text, &valid, true);\n+        /* Make sure we return Intermediate so that fixup() is called */\n+        return valid ? QValidator::Intermediate : QValidator::Invalid;\n+    }\n+\n+    void fixup(QString &input) const\n+    {\n+        bool valid = false;\n+        qint64 val = parse(input, &valid, true);\n+        if(valid)\n+        {\n+            input = BitcoinUnits::format(currentUnit, val, false, BitcoinUnits::separatorAlways);\n+            lineEdit()->setText(input);\n+        }\n+    }\n+\n+    qint64 value(bool *valid_out=0) const\n+    {\n+        return parse(text(), valid_out);\n+    }\n+\n+    void setValue(qint64 value)\n+    {\n+        lineEdit()->setText(BitcoinUnits::format(currentUnit, value, false, BitcoinUnits::separatorAlways));\n+    }\n+\n+    void stepBy(int steps)\n+    {\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+        if(valid)\n+        {\n+            val = val + steps * singleStep;\n+            val = qMin(qMax(val, Q_INT64_C(0)), BitcoinUnits::maxMoney());\n+            setValue(val);\n+        }\n+    }\n+\n+    StepEnabled stepEnabled() const\n     {\n-        QStringList parts = QDoubleSpinBox::textFromValue(value).split(\".\");\n-        QString quotient_str = parts[0];\n-        QString remainder_str;\n-        if(parts.size() > 1)\n-            remainder_str = parts[1];\n-\n-        // Code duplication between here and BitcoinUnits::format\n-        // TODO: Figure out how to share this code\n-        QChar thin_sp(THIN_SP_CP);\n-        int q_size = quotient_str.size();\n-        if (q_size > 4)\n-            for (int i = 3; i < q_size; i += 3)\n-                quotient_str.insert(q_size - i, thin_sp);\n-\n-        int r_size = remainder_str.size();\n-        if (r_size > 4)\n-            for (int i = 3, adj = 0; i < r_size; i += 3, adj++)\n-                remainder_str.insert(i + adj, thin_sp);\n-\n-        if(remainder_str.isEmpty())\n-            return quotient_str;\n+        StepEnabled rv = 0;\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+        if(valid)\n+        {\n+            if(val > 0)\n+                rv |= StepDownEnabled;\n+            if(val < BitcoinUnits::maxMoney())\n+                rv |= StepUpEnabled;\n+        }\n+        return rv;\n+    }\n+\n+    void setDisplayUnit(int unit)\n+    {\n+        bool valid = false;\n+        qint64 val = value(&valid);\n+\n+        currentUnit = unit;\n+\n+        if(valid)\n+            setValue(val);\n         else\n-            return quotient_str + QString(\".\") + remainder_str;\n+            clear();\n     }\n-    QValidator::State validate (QString &text, int &pos) const\n+\n+    void setSingleStep(qint64 step)\n     {\n-        QString s(BitcoinUnits::removeSpaces(text));\n-        return QDoubleSpinBox::validate(s, pos);\n+        singleStep = step;\n     }\n-    double valueFromText(const QString& text) const\n+\n+    QSize minimumSizeHint() const\n     {\n-        return QDoubleSpinBox::valueFromText(BitcoinUnits::removeSpaces(text));\n+        if(cachedMinimumSizeHint.isEmpty())\n+        {\n+            ensurePolished();\n+\n+            const QFontMetrics fm(fontMetrics());\n+            int h = lineEdit()->minimumSizeHint().height();\n+            int w = fm.width(BitcoinUnits::format(BitcoinUnits::BTC, BitcoinUnits::maxMoney(), false, BitcoinUnits::separatorAlways));\n+            w += 2; // cursor blinking space\n+\n+            QStyleOptionSpinBox opt;\n+            initStyleOption(&opt);\n+            QSize hint(w, h);\n+            QSize extra(35, 6);\n+            opt.rect.setSize(hint + extra);\n+            extra += hint - style()->subControlRect(QStyle::CC_SpinBox, &opt,\n+                                                    QStyle::SC_SpinBoxEditField, this).size();\n+            // get closer to final result by repeating the calculation\n+            opt.rect.setSize(hint + extra);\n+            extra += hint - style()->subControlRect(QStyle::CC_SpinBox, &opt,\n+                                                    QStyle::SC_SpinBoxEditField, this).size();\n+            hint += extra;\n+\n+            opt.rect = rect();\n+\n+            cachedMinimumSizeHint = style()->sizeFromContents(QStyle::CT_SpinBox, &opt, hint, this)\n+                                    .expandedTo(QApplication::globalStrut());\n+        }\n+        return cachedMinimumSizeHint;\n+    }\n+\n+private:\n+    int currentUnit;\n+    qint64 singleStep;\n+    mutable QSize cachedMinimumSizeHint;\n+\n+    qint64 parse(const QString &text, bool *valid_out=0, bool allowzero=false) const\n+    {\n+        qint64 val = 0;\n+        bool valid = BitcoinUnits::parse(currentUnit, text, &val);\n+        if(valid)\n+        {\n+            if(val < 0 || val > BitcoinUnits::maxMoney() || (val==0 && !allowzero))\n+                valid = false;\n+        }\n+        if(valid_out)\n+            *valid_out = valid;\n+        return valid ? val : 0;\n+    }\n+\n+protected:\n+    bool event(QEvent *event)\n+    {\n+        if (event->type() == QEvent::KeyPress || event->type() == QEvent::KeyRelease)\n+        {\n+            QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);\n+            if (keyEvent->key() == Qt::Key_Comma)\n+            {\n+                // Translate a comma into a period\n+                QKeyEvent periodKeyEvent(event->type(), Qt::Key_Period, keyEvent->modifiers(), \".\", keyEvent->isAutoRepeat(), keyEvent->count());\n+                QApplication::sendEvent(this, &periodKeyEvent);",
    "path": "src/qt/bitcoinamountfield.cpp",
    "position": null,
    "original_position": 193,
    "commit_id": "29eaa316944477af538b75b439a49ee1a9fc2f2a",
    "original_commit_id": "788eb1a67c863cfc46958d74c4f9fe645c585329",
    "user": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Just calling QAbstractSpinBox::event works for me:\n\n```\nreturn QAbstractSpinBox::event(&periodKeyEvent);\n```\n",
    "created_at": "2014-07-20T20:56:28Z",
    "updated_at": "2014-07-23T15:59:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15151961",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15151961"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4556#discussion_r15151961"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4556"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15151961/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 169,
    "side": "RIGHT"
  }
]