DrahtBot,2021-02-20 14:25:31,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21727 (refactor: Move more stuff to blockstorage by MarcoFalke)\n* #20966 (banman: save the banlist in a JSON format on d",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-782685008,782685008,
laanwj,2021-02-23 13:37:38,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-784208608,784208608,
hebasto,2021-02-23 21:21:27,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-784521153,784521153,
kiminuo,2021-02-24 06:46:45,"@sipa Yes, you are right. I have modified that.",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-784834198,784834198,
kiminuo,2021-03-02 10:34:31,@laanwj @hebasto @MarcoFalke @jonatack @jnewbery Friendly ping: Could anyone please tell me if you find the approach to be correct or not?,https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-788806534,788806534,
MarcoFalke,2021-03-02 10:56:02,It seems fine to remove a global from a function that should be a pure utility helper,https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-788819469,788819469,
kiminuo,2021-03-08 21:29:21,@MarcoFalke So are you saying that my actual approach is good or not? I honestly can't say.,https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-793092835,793092835,
MarcoFalke,2021-03-09 07:07:39,"Concept ACK, haven't reviewed in detail",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-793471203,793471203,
DrahtBot,2021-03-15 16:49:45,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @sipa @jamesob have been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-799574408,799574408,
ryanofsky,2021-04-08 18:01:16,"The new `BasicTestingSetup` args manager instance doesn't seem to be used very much right now. I'd think here or at some point in the future it'd make sense for `BasicTestingSetup::m_node.args` to be a pointer to the local test args manager instead of to `gArgs`. Maybe a change like the following would make sense:\n\n```diff\ndiff --git a/src/bitcoind.cpp b/src/bitcoind.cpp\nindex 80ab69c131e.",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-816026224,816026224,
kiminuo,2021-04-08 20:35:19,"@ryanofsky Thank you for the review! I will try to address it soon.\n\n> Other reviewers might be hesitant about this PR adding many new `gArgs` references when it claims to help ""Remove gArgs"".\n\nI was not sure about the scope of the PR, I started small but it did not feel compelling enough. My inspiration was #20158.",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-816167212,816167212,
kiminuo,2021-04-09 11:21:42,"> The new `BasicTestingSetup` args manager instance doesn't seem to be used very much right now. I'd think here or at some point in the future it'd make sense for `BasicTestingSetup::m_node.args` to be a pointer to the local test args manager instead of to `gArgs`. Maybe a change like the following would make sense:\n\nI would like to reserve this for a follow-up PR. Other than that, I have atte",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-816613578,816613578,
kiminuo,2021-04-10 06:14:00,"""Cirrus CI / [depends, sanitizers: thread (TSan), no gui] [focal]"" seems to be flaky lately.",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-817086352,817086352,
jonatack,2021-04-10 07:31:21,"> ""Cirrus CI / [depends, sanitizers: thread (TSan), no gui] [focal]"" seems to be flaky lately.\n\nIf you rebase on latest master I think that solves it.",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-817093926,817093926,
kiminuo,2021-04-10 08:29:43,"> If you rebase on latest master I think that solves it.\n\nLet's try it :)\n\nedit: It helped!",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-817100456,817100456,
kiminuo,2021-04-13 08:15:44,"> Code review almost-ACK [92b1890](https://github.com/bitcoin/bitcoin/commit/92b1890c9eeeecf9cf7325ef3dc1d2c44a588b87), modulo the `util_datadir` commit [8584666](https://github.com/bitcoin/bitcoin/commit/8584666393255a7ce62d741ddd8d994c486423c6), which I think breaks that test in a way where it still passes but no longer meaningfully checks things (see suggestion below).\n\nI have put `ClearDat",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-818542501,818542501,
ryanofsky,2021-04-16 13:32:14,"Noticed this in IRC:\n\n> \<Kiminuo> Hi guys, a quick question: I have this PR https://github.com/bitcoin/bitcoin/pull/21244 and it got one ACK. Now, should I just wait patiently until somebody else will review the PR? Or am I supposed to do something else to increase the chance of merging it? I'm not in hurry. I would just like to understand the review process better.\n\nThis is an easy revie",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-821180662,821180662,
jonatack,2021-04-16 13:43:44,"> I think a good way to get other people to review your PRs is to review their PRs. Progress on bitcoin is limited more by lack of review than lack of code contributions, and reviews that are substantive and show thought & understanding are encouraged even if you don't have prior experience reviewing bitcoin PRs (https://bitcoincore.reviews/ is a good resource for this).\n\nAgree! suggested a simi",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-821187622,821187622,
kiminuo,2021-04-17 18:39:12,"> I see no reasons to guard new data members `m_cached_*_path` with `RecursiveMutex cs_args`. It tangles recursive locking of `cs_args` more and more. We should move from `RecursiveMutex` to `Mutex` (#19303, #19213). To not deteriorate status quo, maybe just use a new specific mutex?\n\nWould it be better to do this in a follow-up PR?",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-821868314,821868314,
hebasto,2021-04-17 18:55:19,"> > I see no reasons to guard new data members `m_cached_*_path` with `RecursiveMutex cs_args`. It tangles recursive locking of `cs_args` more and more. We should move from `RecursiveMutex` to `Mutex` (#19303, #19213). To not deteriorate status quo, maybe just use a new specific mutex?\n> \n> Would it be better to do this in a follow-up PR?\n\nNot sure if it is better, but it won't stop me fro",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-821870547,821870547,
hebasto,2021-04-17 19:07:12,"- [x] 70cdf679f8e665dbdc3301873a0267fe9faa72cd - ""Move StripRedundantLastElementsOfPath before ArgsManager class.""\n- [x] 1add318704108faa98f5b1b8e9c96d960e9d23a8 - ""Move GetDataDir(fNetSpecific) implementation to ArgsManager.""\n- [x] 5441bd3f54e675445f5a9c10462c24fbba721243 - ""Modify ""util_datadir"" unit test to not use gArgs.""\n- [x] ea70f2266b4329cce75ccb8db73e426055f345a8 - ""BasicTestingSetu",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-821872237,821872237,
kiminuo,2021-04-17 19:53:05,"> Please next time do not rebase without necessity :)\n\nInteresting point, it did not occur to me that it's better. Thank you for pointing it out.",https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-821878378,821878378,
kiminuo,2021-04-18 10:09:05,I addessed outstanding suggestions. Diff since 69b8c4ad is minimal.,https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-821967487,821967487,
kiminuo,2021-02-23 11:30:48,note: `std::string datadir` can be passed instead of `ArgsManager` instance.,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r580961423,580961423,src/util/system.cpp
kiminuo,2021-02-23 11:31:17,Should I get rid of pointers?,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r580961753,580961753,src/util/system.cpp
kiminuo,2021-02-23 11:32:18,note: Maybe mention that empty datadir leads to default datadir?,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r580962300,580962300,src/util/system.h
kiminuo,2021-02-23 11:34:29,"Note: Is signature in form: `void GetDataDir(fs::path* path, ArgsManager& argsManager, bool fNetSpecific = true);` preferred?",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r580963531,580963531,src/util/system.h
kiminuo,2021-02-23 11:35:12,note: Would be nice to wrap this in a helper function.,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r580963943,580963943,src/test/util_tests.cpp
kiminuo,2021-02-23 11:35:45,Should the original test be preserved?,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r580964302,580964302,src/test/util_tests.cpp
kiminuo,2021-02-26 08:32:52,Will remove.,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r583466303,583466303,src/util/system.h
kiminuo,2021-02-26 08:33:36,"```suggestion\n    args1.LockSettings([&](util::Settings& settings) { settings.rw_settings[""name""] = ""value""; });\n```",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r583466676,583466676,src/test/util_tests.cpp
kiminuo,2021-02-26 08:33:46,Will remove to fix linter.,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r583466757,583466757,src/test/util_tests.cpp
kiminuo,2021-02-26 11:34:31,bug: `LOCK(csPathCached);` should be here.,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r583576324,583576324,src/util/system.cpp
ryanofsky,2021-04-08 16:56:48,"In commit ""Move GetDataDir(fNetSpecific) implementation to ArgsManager."" (839324993aeb8448af5a811b7323fa460ac9eac7)\n\nSee symbol naming conventions https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md, but would suggest `m_cached_datadir_path`, `m_cached_network_datadir_path`",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r609904991,609904991,src/util/system.h
ryanofsky,2021-04-08 17:00:19,"In commit ""Modify ""util_datadir"" unit test to not use gArgs."" (ec7769315f5ed62e6145492977226925e122292c)\n\nIt seems unnecessary to add another argsmanager for this test, with 3 side-by-side argsmanagers:\n\n1. gArgs\n2. BasicTestingSetup::m_args_manager added in d4f86a3f608c98365b537d78d7ef1693463d7b9b\n3. This local argsManager variable.\n\nMaybe it could just use the basictesting member",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r609908281,609908281,src/test/util_tests.cpp
ryanofsky,2021-04-08 17:06:17,"In commit ""Change GetBlocksDir() to ArgsManager.GetBlocksDirPath()."" (fa0b2291aa84fe372bb37a9fcbf1ad3165f7daea)\n\nAgain should follow naming convention, would suggest `m_cached_blocks_path`. See naming in  https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r609913613,609913613,src/util/system.h
ryanofsky,2021-04-08 17:15:45,"In commit ""Move StripRedundantLastElementsOfPath before ArgsManager class."" (c44993ad96d649be48c94d4ae38d354d609a7282)\n\nThis commit seems not to compile because these variables are removed\n\n```\n  CXX      libbitcoin_server_a-net.o\nutil/system.cpp:771:37: error: use of undeclared identifier 'pathCachedNetSpecific'\n    fs::path &path = fNetSpecific ? pathCachedNetSpecific : pathCached;",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r609922475,609922475,src/util/system.cpp
ryanofsky,2021-04-08 17:18:19,"In commit ""Move GetDataDir(fNetSpecific) implementation to ArgsManager."" (839324993aeb8448af5a811b7323fa460ac9eac7)\n\nThis commit seems not to compile\n\n```\nutil/system.cpp:422:19: error: out-of-line definition of 'ClearDatadirPathCache' does not match any declaration in 'ArgsManager'; did you mean 'ClearPathCache'?\nvoid ArgsManager::ClearDatadirPathCache()\n                  ^~~~~~~~~~",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r609924623,609924623,src/util/system.cpp
ryanofsky,2021-04-08 17:25:17,"In commit ""BasicTestingSetup: Add ArgsManager."" (d4f86a3f608c98365b537d78d7ef1693463d7b9b)\n\nConvention other places is to call `ArgsManager` instances `args`, suggest naming this `m_args`",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r609930822,609930822,src/test/util/setup_common.h
kiminuo,2021-04-08 20:34:27,"The main reason I did it this way was/is that I persuades me that it does what one expects and there is no possible confusion. When I put `gArgs` (or `BasicTestingSetup::m_args_manager`) there, it forces to me wonder: How is `gArgs` actually initialized and where it is? Can some later refactoring affect the test silently? \n\nMaybe I see it this way because I don't read Bitcoin Core source code ",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r610080299,610080299,src/test/util_tests.cpp
ryanofsky,2021-04-08 21:37:59,"That's reasonable, I would maybe add a commment like /* Use local args variable instead of m_args to avoid making assumptions about test setup. */, but feel free to keep the variable.",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r610129582,610129582,src/test/util_tests.cpp
kiminuo,2021-04-10 06:03:59,"Applied, thanks.",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r611002666,611002666,src/test/util/setup_common.h
kiminuo,2021-04-10 06:05:03,"Applied, thanks.",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r611002731,611002731,src/util/system.h
kiminuo,2021-04-10 06:05:24,"Added comment, thanks.",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r611002743,611002743,src/test/util_tests.cpp
kiminuo,2021-04-10 06:09:39,This is fixed on my system now. Thanks.,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r611003251,611003251,src/util/system.cpp
kiminuo,2021-04-10 06:10:17,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r611003318,611003318,src/util/system.cpp
kiminuo,2021-04-10 06:10:49,"Applied, thanks.",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r611003367,611003367,src/util/system.h
ryanofsky,2021-04-12 17:09:56,"In commit ""Move GetDataDir(fNetSpecific) implementation to ArgsManager."" (fac964698fab1b269d4414dc54560b29a3eccd18)\n\nNote (no change suggested): I was initially confused why `pathCached` and `pathCachedNetSpecific` were being removed in this commit without also removing `g_blocks_path_cache_net_specific`. But it's removed in a later commit, and the reason for treating it differently just seems",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r611808883,611808883,src/util/system.cpp
ryanofsky,2021-04-12 17:23:28,"In commit ""Modify ""util_datadir"" unit test to not use gArgs."" (8584666393255a7ce62d741ddd8d994c486423c6)\n\nIt seems like the checks in this test might be meaningless now that the ClearDatadirCache calls are dropped, because the repeated `BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());` checks will keep passing no matter what value `-datadir` is force set to.\n\nI think it would be best for",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r611817653,611817653,src/test/util_tests.cpp
kiminuo,2021-04-13 13:35:38,You are right. I have put those commands back.,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r612452863,612452863,src/test/util_tests.cpp
kiminuo,2021-04-13 13:38:58,My primary objective was to tackle `::GetDataDir` but then it led me to handle `::GetBlocksDir` too. I did not want to modify those two at the same time.,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r612455831,612455831,src/util/system.cpp
hebasto,2021-04-17 16:25:59,"As these data members are cache, why do not declare them `mutable`?\nIt will allow to keep `const`ness of the `GetSettingsPath` and `WriteSettingsFile`.",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615274095,615274095,src/util/system.h
hebasto,2021-04-17 16:37:31,The description of this function is not true: https://github.com/bitcoin/bitcoin/blob/834b971bff371951e3e63617d0a3fb9b3ad79c62/src/util/system.cpp#L974,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615275565,615275565,src/util/system.h
hebasto,2021-04-17 16:38:31,"```suggestion\n    const fs::path& GetDataDirPath(bool net_specific = true);\n```",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615275684,615275684,src/util/system.h
hebasto,2021-04-17 16:40:49,"style nit:\n```suggestion\n    fs::path& path = fNetSpecific ? m_cached_network_datadir_path : m_cached_datadir_path;\n```",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615275948,615275948,src/util/system.cpp
hebasto,2021-04-17 16:41:15,"style nit:\n```suggestion\n    fs::path& path = m_cached_blocks_path;\n```",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615275994,615275994,src/util/system.cpp
kiminuo,2021-04-17 17:33:18,"Do you have a suggestion for the description?\n\nI think the comment is mostly unhelpful as it is too generic anyway. I would write something like that it's useful to propagate changes in args. I'm not sure about proper English wording though.",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615281482,615281482,src/util/system.h
kiminuo,2021-04-17 17:33:34,"Yes, thank you.",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615281490,615281490,src/util/system.h
kiminuo,2021-04-17 17:33:41,"Yes, thank you.",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615281499,615281499,src/util/system.cpp
hebasto,2021-04-17 17:42:06,"Obviously, I'm not an [Official Namer Of Stuff](https://github.com/bitcoin/bitcoin/pull/20861#discussion_r596389178) :)\n\nMaybe ""Clear cached directory paths""?",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615282423,615282423,src/util/system.h
kiminuo,2021-04-17 18:34:32,I have modified this.,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615290028,615290028,src/util/system.h
hebasto,2021-04-17 19:43:16,Why `const` removed?,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615296625,615296625,src/test/util_tests.cpp
MarcoFalke,2021-04-17 20:32:56,There is already m_node.args. Any reason to avoid using that?,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615301304,615301304,src/test/util/setup_common.cpp
ryanofsky,2021-04-17 20:42:16,"> There is already m_node.args. Any reason to avoid using that?\n\nI suggested this for a followup (It would be a bigger change involving init and might also require updating more tests). Diff was here: https://github.com/bitcoin/bitcoin/pull/21244#issuecomment-816026224",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615302205,615302205,src/test/util/setup_common.cpp
MarcoFalke,2021-04-17 20:57:29,Until then I'd prefer to use `m_node.args->` (or `gArgs.` if that is too much typing). It will be a trivial scripted diff to change that to `m_args.`. But having three argsman in the tests (two of which are the same and one that is different) will just cause confusion and makes review harder/code more fragile. How would you protect against their state diverging?,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615303576,615303576,src/test/util/setup_common.cpp
ryanofsky,2021-04-17 21:40:13,"I'm happy with any intermediate state. Here's what I think the ultimate goal should be:\n\n- Tests should have an `ArgsManager m_args` member that is newly initialized before each test and completely destroyed after each test.\n- Where possible, tests should pass `m_args` references directly to functions that are being tested and need to read options.\n- Tests can pass `m_args` pointers indire",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615307465,615307465,src/test/util/setup_common.cpp
MarcoFalke,2021-04-18 08:20:50,This diff could be a scripted-diff in a separate commit?,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615362236,615362236,src/test/getarg_tests.cpp
MarcoFalke,2021-04-18 08:21:08,"Fair enough, any approach fine by me, too",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615362285,615362285,src/test/util/setup_common.cpp
kiminuo,2021-04-18 10:04:36,Will be addressed in the next push. Thanks.,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615374776,615374776,src/test/util_tests.cpp
kiminuo,2021-04-18 10:04:54,"Yes, will be addressed in the next push.",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615374809,615374809,src/test/getarg_tests.cpp
kiminuo,2021-04-18 10:07:21,Will be addressed in the next push.,https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615375149,615375149,src/util/system.h
kiminuo,2021-04-18 10:56:32,"I think Russell summarized it very nicely. \n\nMy approach with this PR is to use `m_args` wrt `GetDataDir()` functionality for tests. Yes, it is somewhat fragile at this point. If you are too concerned about this, I can revert that change in `BasicTestingSetup` and leave it for some follow-up PR. \n\nnote: There are tests that just need `GetDataDir()` function and not anything else from `Args",https://github.com/bitcoin/bitcoin/pull/21244#discussion_r615380853,615380853,src/test/util/setup_common.cpp
