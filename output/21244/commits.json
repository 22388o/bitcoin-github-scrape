[
  {
    "sha": "70cdf679f8e665dbdc3301873a0267fe9faa72cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGNkZjY3OWY4ZTY2NWRiZGMzMzAxODczYTAyNjdmZTlmYWE3MmNk",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-08T21:14:34Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-17T17:18:10Z"
      },
      "message": "Move StripRedundantLastElementsOfPath before ArgsManager class.",
      "tree": {
        "sha": "b255b8164924d9a033a0a3cbd0b62d5c06ba5e03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b255b8164924d9a033a0a3cbd0b62d5c06ba5e03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70cdf679f8e665dbdc3301873a0267fe9faa72cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70cdf679f8e665dbdc3301873a0267fe9faa72cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70cdf679f8e665dbdc3301873a0267fe9faa72cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70cdf679f8e665dbdc3301873a0267fe9faa72cd/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0dd7b234895b02bfc512ae83bd77b581c861d6e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dd7b234895b02bfc512ae83bd77b581c861d6e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0dd7b234895b02bfc512ae83bd77b581c861d6e9"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "702cfdf1e4fb27756a2f51b7ffba834fa7f0af8f",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70cdf679f8e665dbdc3301873a0267fe9faa72cd/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70cdf679f8e665dbdc3301873a0267fe9faa72cd/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=70cdf679f8e665dbdc3301873a0267fe9faa72cd",
        "patch": "@@ -235,6 +235,19 @@ static bool CheckValid(const std::string& key, const util::SettingsValue& val, u\n     return true;\n }\n \n+namespace {\n+fs::path StripRedundantLastElementsOfPath(const fs::path& path)\n+{\n+    auto result = path;\n+    while (result.filename().string() == \".\") {\n+        result = result.parent_path();\n+    }\n+\n+    assert(fs::equivalent(result, path));\n+    return result;\n+}\n+} // namespace\n+\n // Define default constructor and destructor that are not inline, so code instantiating this class doesn't need to\n // #include class definitions for all members.\n // For example, m_settings has an internal dependency on univalue.\n@@ -723,19 +736,6 @@ fs::path GetDefaultDataDir()\n #endif\n }\n \n-namespace {\n-fs::path StripRedundantLastElementsOfPath(const fs::path& path)\n-{\n-    auto result = path;\n-    while (result.filename().string() == \".\") {\n-        result = result.parent_path();\n-    }\n-\n-    assert(fs::equivalent(result, path));\n-    return result;\n-}\n-} // namespace\n-\n static fs::path g_blocks_path_cache_net_specific;\n static fs::path pathCached;\n static fs::path pathCachedNetSpecific;"
      }
    ]
  },
  {
    "sha": "1add318704108faa98f5b1b8e9c96d960e9d23a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWRkMzE4NzA0MTA4ZmFhOThmNWIxYjhlOWM5NmQ5NjBlOWQyM2E4",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-08T21:15:01Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-17T18:09:01Z"
      },
      "message": "Move GetDataDir(fNetSpecific) implementation to ArgsManager.",
      "tree": {
        "sha": "0f1c4d6c1215508224c2ebbf74f47ded717b594c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f1c4d6c1215508224c2ebbf74f47ded717b594c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1add318704108faa98f5b1b8e9c96d960e9d23a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1add318704108faa98f5b1b8e9c96d960e9d23a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1add318704108faa98f5b1b8e9c96d960e9d23a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1add318704108faa98f5b1b8e9c96d960e9d23a8/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70cdf679f8e665dbdc3301873a0267fe9faa72cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70cdf679f8e665dbdc3301873a0267fe9faa72cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70cdf679f8e665dbdc3301873a0267fe9faa72cd"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 63,
      "deletions": 37
    },
    "files": [
      {
        "sha": "76ffdc598afac2add944c2c0f4752440fd13f0ca",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1add318704108faa98f5b1b8e9c96d960e9d23a8/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1add318704108faa98f5b1b8e9c96d960e9d23a8/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1add318704108faa98f5b1b8e9c96d960e9d23a8",
        "patch": "@@ -1143,21 +1143,23 @@ BOOST_AUTO_TEST_CASE(util_ReadWriteSettings)\n {\n     // Test writing setting.\n     TestArgsManager args1;\n+    args1.ForceSetArg(\"-datadir\", m_path_root.string());\n     args1.LockSettings([&](util::Settings& settings) { settings.rw_settings[\"name\"] = \"value\"; });\n     args1.WriteSettingsFile();\n \n     // Test reading setting.\n     TestArgsManager args2;\n+    args2.ForceSetArg(\"-datadir\", m_path_root.string());\n     args2.ReadSettingsFile();\n     args2.LockSettings([&](util::Settings& settings) { BOOST_CHECK_EQUAL(settings.rw_settings[\"name\"].get_str(), \"value\"); });\n \n     // Test error logging, and remove previously written setting.\n     {\n         ASSERT_DEBUG_LOG(\"Failed renaming settings file\");\n-        fs::remove(GetDataDir() / \"settings.json\");\n-        fs::create_directory(GetDataDir() / \"settings.json\");\n+        fs::remove(args1.GetDataDirPath() / \"settings.json\");\n+        fs::create_directory(args1.GetDataDirPath() / \"settings.json\");\n         args2.WriteSettingsFile();\n-        fs::remove(GetDataDir() / \"settings.json\");\n+        fs::remove(args1.GetDataDirPath() / \"settings.json\");\n     }\n }\n "
      },
      {
        "sha": "0a2ece7b10e2236fbea3e80ce65d391fb4243707",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 34,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1add318704108faa98f5b1b8e9c96d960e9d23a8/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1add318704108faa98f5b1b8e9c96d960e9d23a8/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=1add318704108faa98f5b1b8e9c96d960e9d23a8",
        "patch": "@@ -388,6 +388,45 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n     return std::nullopt;\n }\n \n+const fs::path& ArgsManager::GetDataDirPath(bool net_specific) const\n+{\n+    LOCK(cs_args);\n+    fs::path& path = net_specific ? m_cached_network_datadir_path : m_cached_datadir_path;\n+\n+    // Cache the path to avoid calling fs::create_directories on every call of\n+    // this function\n+    if (!path.empty()) return path;\n+\n+    std::string datadir = GetArg(\"-datadir\", \"\");\n+    if (!datadir.empty()) {\n+        path = fs::system_complete(datadir);\n+        if (!fs::is_directory(path)) {\n+            path = \"\";\n+            return path;\n+        }\n+    } else {\n+        path = GetDefaultDataDir();\n+    }\n+    if (net_specific)\n+        path /= BaseParams().DataDir();\n+\n+    if (fs::create_directories(path)) {\n+        // This is the first run, create wallets subdirectory too\n+        fs::create_directories(path / \"wallets\");\n+    }\n+\n+    path = StripRedundantLastElementsOfPath(path);\n+    return path;\n+}\n+\n+void ArgsManager::ClearDatadirPathCache()\n+{\n+    LOCK(cs_args);\n+\n+    m_cached_datadir_path = fs::path();\n+    m_cached_network_datadir_path = fs::path();\n+}\n+\n std::optional<const ArgsManager::Command> ArgsManager::GetCommand() const\n {\n     Command ret;\n@@ -447,7 +486,7 @@ bool ArgsManager::GetSettingsPath(fs::path* filepath, bool temp) const\n     }\n     if (filepath) {\n         std::string settings = GetArg(\"-settings\", BITCOIN_SETTINGS_FILENAME);\n-        *filepath = fsbridge::AbsPathJoin(GetDataDir(/* net_specific= */ true), temp ? settings + \".tmp\" : settings);\n+        *filepath = fsbridge::AbsPathJoin(GetDataDirPath(/* net_specific= */ true), temp ? settings + \".tmp\" : settings);\n     }\n     return true;\n }\n@@ -737,8 +776,6 @@ fs::path GetDefaultDataDir()\n }\n \n static fs::path g_blocks_path_cache_net_specific;\n-static fs::path pathCached;\n-static fs::path pathCachedNetSpecific;\n static RecursiveMutex csPathCached;\n \n const fs::path &GetBlocksDir()\n@@ -769,33 +806,7 @@ const fs::path &GetBlocksDir()\n \n const fs::path &GetDataDir(bool fNetSpecific)\n {\n-    LOCK(csPathCached);\n-    fs::path &path = fNetSpecific ? pathCachedNetSpecific : pathCached;\n-\n-    // Cache the path to avoid calling fs::create_directories on every call of\n-    // this function\n-    if (!path.empty()) return path;\n-\n-    std::string datadir = gArgs.GetArg(\"-datadir\", \"\");\n-    if (!datadir.empty()) {\n-        path = fs::system_complete(datadir);\n-        if (!fs::is_directory(path)) {\n-            path = \"\";\n-            return path;\n-        }\n-    } else {\n-        path = GetDefaultDataDir();\n-    }\n-    if (fNetSpecific)\n-        path /= BaseParams().DataDir();\n-\n-    if (fs::create_directories(path)) {\n-        // This is the first run, create wallets subdirectory too\n-        fs::create_directories(path / \"wallets\");\n-    }\n-\n-    path = StripRedundantLastElementsOfPath(path);\n-    return path;\n+    return gArgs.GetDataDirPath(fNetSpecific);\n }\n \n bool CheckDataDirOption()\n@@ -806,10 +817,7 @@ bool CheckDataDirOption()\n \n void ClearDatadirCache()\n {\n-    LOCK(csPathCached);\n-\n-    pathCached = fs::path();\n-    pathCachedNetSpecific = fs::path();\n+    gArgs.ClearDatadirPathCache();\n     g_blocks_path_cache_net_specific = fs::path();\n }\n "
      },
      {
        "sha": "a49055b8913e9c2cff54fad625f67283cd51d139",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1add318704108faa98f5b1b8e9c96d960e9d23a8/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1add318704108faa98f5b1b8e9c96d960e9d23a8/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=1add318704108faa98f5b1b8e9c96d960e9d23a8",
        "patch": "@@ -200,6 +200,8 @@ class ArgsManager\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n     bool m_accept_any_command GUARDED_BY(cs_args){true};\n     std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n+    mutable fs::path m_cached_datadir_path GUARDED_BY(cs_args);\n+    mutable fs::path m_cached_network_datadir_path GUARDED_BY(cs_args);\n \n     [[nodiscard]] bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n \n@@ -263,6 +265,20 @@ class ArgsManager\n      */\n     std::optional<const Command> GetCommand() const;\n \n+    /**\n+     * Get data directory path\n+     *\n+     * @param net_specific Append network identifier to the returned path\n+     * @return Absolute path on success, otherwise an empty path when a non-directory path would be returned\n+     * @post Returned directory path is created unless it is empty\n+     */\n+    const fs::path& GetDataDirPath(bool net_specific = true) const;\n+\n+    /**\n+     * For testing\n+     */\n+    void ClearDatadirPathCache();\n+\n     /**\n      * Return a vector of strings of the given argument\n      *"
      }
    ]
  },
  {
    "sha": "1cb52ba0656e78ca6c2ef84b1558198ad113b76a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2I1MmJhMDY1NmU3OGNhNmMyZWY4NGIxNTU4MTk4YWQxMTNiNzZh",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-02-26T08:52:50Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-18T09:59:25Z"
      },
      "message": "Modify \"util_datadir\" unit test to not use gArgs.",
      "tree": {
        "sha": "09df55afba0a82f42789dbf12ba3980bb673079b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09df55afba0a82f42789dbf12ba3980bb673079b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cb52ba0656e78ca6c2ef84b1558198ad113b76a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb52ba0656e78ca6c2ef84b1558198ad113b76a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb52ba0656e78ca6c2ef84b1558198ad113b76a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb52ba0656e78ca6c2ef84b1558198ad113b76a/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1add318704108faa98f5b1b8e9c96d960e9d23a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1add318704108faa98f5b1b8e9c96d960e9d23a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1add318704108faa98f5b1b8e9c96d960e9d23a8"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a11716a7f1ede2d3565026c8a80b63c0c35ee828",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb52ba0656e78ca6c2ef84b1558198ad113b76a/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb52ba0656e78ca6c2ef84b1558198ad113b76a/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1cb52ba0656e78ca6c2ef84b1558198ad113b76a",
        "patch": "@@ -49,24 +49,27 @@ BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_datadir)\n {\n-    ClearDatadirCache();\n-    const fs::path dd_norm = GetDataDir();\n+    // Use local args variable instead of m_args to avoid making assumptions about test setup\n+    ArgsManager args;\n+    args.ForceSetArg(\"-datadir\", m_path_root.string());\n+\n+    const fs::path dd_norm = args.GetDataDirPath();\n \n-    gArgs.ForceSetArg(\"-datadir\", dd_norm.string() + \"/\");\n+    args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/\");\n     ClearDatadirCache();\n-    BOOST_CHECK_EQUAL(dd_norm, GetDataDir());\n+    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n \n-    gArgs.ForceSetArg(\"-datadir\", dd_norm.string() + \"/.\");\n+    args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/.\");\n     ClearDatadirCache();\n-    BOOST_CHECK_EQUAL(dd_norm, GetDataDir());\n+    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n \n-    gArgs.ForceSetArg(\"-datadir\", dd_norm.string() + \"/./\");\n+    args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/./\");\n     ClearDatadirCache();\n-    BOOST_CHECK_EQUAL(dd_norm, GetDataDir());\n+    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n \n-    gArgs.ForceSetArg(\"-datadir\", dd_norm.string() + \"/.//\");\n+    args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/.//\");\n     ClearDatadirCache();\n-    BOOST_CHECK_EQUAL(dd_norm, GetDataDir());\n+    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n }\n \n BOOST_AUTO_TEST_CASE(util_check)"
      }
    ]
  },
  {
    "sha": "511ce3a26b3b78e14acd0d85496b5422a236cf63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTFjZTNhMjZiM2I3OGUxNGFjZDBkODU0OTZiNTQyMmEyMzZjZjYz",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-18T09:37:06Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-18T09:59:28Z"
      },
      "message": "BasicTestingSetup: Add ArgsManager.",
      "tree": {
        "sha": "b9feb74ddb13d4b9672fb145f3987bfb0a0b7752",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9feb74ddb13d4b9672fb145f3987bfb0a0b7752"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/511ce3a26b3b78e14acd0d85496b5422a236cf63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/511ce3a26b3b78e14acd0d85496b5422a236cf63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/511ce3a26b3b78e14acd0d85496b5422a236cf63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/511ce3a26b3b78e14acd0d85496b5422a236cf63/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1cb52ba0656e78ca6c2ef84b1558198ad113b76a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb52ba0656e78ca6c2ef84b1558198ad113b76a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb52ba0656e78ca6c2ef84b1558198ad113b76a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "831083ccb8f7809165ef524b96ff284cd7e4c59d",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/511ce3a26b3b78e14acd0d85496b5422a236cf63/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/511ce3a26b3b78e14acd0d85496b5422a236cf63/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=511ce3a26b3b78e14acd0d85496b5422a236cf63",
        "patch": "@@ -71,7 +71,8 @@ std::ostream& operator<<(std::ostream& os, const uint256& num)\n }\n \n BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n-    : m_path_root{fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / g_insecure_rand_ctx_temp_path.rand256().ToString()}\n+    : m_path_root{fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / g_insecure_rand_ctx_temp_path.rand256().ToString()},\n+      m_args{}\n {\n     const std::vector<const char*> arguments = Cat(\n         {\n@@ -87,6 +88,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n         extra_args);\n     util::ThreadRename(\"test\");\n     fs::create_directories(m_path_root);\n+    m_args.ForceSetArg(\"-datadir\", m_path_root.string());\n     gArgs.ForceSetArg(\"-datadir\", m_path_root.string());\n     ClearDatadirCache();\n     {\n@@ -191,7 +193,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n \n     m_node.addrman = std::make_unique<CAddrMan>();\n-    m_node.banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirPath() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,\n                                        m_node.banman.get(), *m_node.scheduler, *m_node.chainman,"
      },
      {
        "sha": "b19dd757656ac74ddd022597268002572ffd72e4",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/511ce3a26b3b78e14acd0d85496b5422a236cf63/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/511ce3a26b3b78e14acd0d85496b5422a236cf63/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=511ce3a26b3b78e14acd0d85496b5422a236cf63",
        "patch": "@@ -8,6 +8,7 @@\n #include <chainparamsbase.h>\n #include <fs.h>\n #include <key.h>\n+#include <util/system.h>\n #include <node/context.h>\n #include <pubkey.h>\n #include <random.h>\n@@ -80,6 +81,7 @@ struct BasicTestingSetup {\n     ~BasicTestingSetup();\n \n     const fs::path m_path_root;\n+    ArgsManager m_args;\n };\n \n /** Testing setup that performs all steps up until right before"
      }
    ]
  },
  {
    "sha": "55c68e6f011ee604c8a65b9bca668eb4dec452aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWM2OGU2ZjAxMWVlNjA0YzhhNjViOWJjYTY2OGViNGRlYzQ1MmFh",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-18T09:43:40Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-18T09:59:28Z"
      },
      "message": "scripted-diff: Replace m_args with m_local_args in getarg_tests.cpp\n\n-BEGIN VERIFY SCRIPT-\ngit ls-files src/test/getarg_tests.cpp | xargs sed -i \"s/m_args/m_local_args/g\";\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "f6d0785c6b4f37e07a1d03df41c05b9253d87c35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6d0785c6b4f37e07a1d03df41c05b9253d87c35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55c68e6f011ee604c8a65b9bca668eb4dec452aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c68e6f011ee604c8a65b9bca668eb4dec452aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55c68e6f011ee604c8a65b9bca668eb4dec452aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c68e6f011ee604c8a65b9bca668eb4dec452aa/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "511ce3a26b3b78e14acd0d85496b5422a236cf63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/511ce3a26b3b78e14acd0d85496b5422a236cf63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/511ce3a26b3b78e14acd0d85496b5422a236cf63"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 60,
      "deletions": 60
    },
    "files": [
      {
        "sha": "2a217f3455e6404fb1ff791eccf6ac9c5012d7a0",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 60,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55c68e6f011ee604c8a65b9bca668eb4dec452aa/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55c68e6f011ee604c8a65b9bca668eb4dec452aa/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=55c68e6f011ee604c8a65b9bca668eb4dec452aa",
        "patch": "@@ -18,7 +18,7 @@ namespace getarg_tests{\n         protected:\n         void SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args);\n         void ResetArgs(const std::string& strArg);\n-        ArgsManager m_args;\n+        ArgsManager m_local_args;\n     };\n }\n \n@@ -39,14 +39,14 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(m_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(m_local_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    m_args.ClearArgs();\n+    m_local_args.ClearArgs();\n     for (const auto& arg : args) {\n-        m_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        m_local_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n@@ -55,52 +55,52 @@ BOOST_AUTO_TEST_CASE(boolarg)\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo});\n     ResetArgs(\"-foo\");\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!m_args.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(m_args.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!m_args.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(m_args.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-fooo\", true));\n \n     ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n     ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n     ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n \n }\n \n@@ -110,24 +110,24 @@ BOOST_AUTO_TEST_CASE(stringarg)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n \n     ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n \n     ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"eleven\"), \"\");\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"\");\n \n     ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n \n     ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n \n }\n \n@@ -137,20 +137,20 @@ BOOST_AUTO_TEST_CASE(intarg)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", 0), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 0);\n \n     ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n \n     ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-bar\", 11), 12);\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 12);\n \n     ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n@@ -159,11 +159,11 @@ BOOST_AUTO_TEST_CASE(doubledash)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(m_args.GetBoolArg(\"-foo\", false), true);\n+    BOOST_CHECK_EQUAL(m_local_args.GetBoolArg(\"-foo\", false), true);\n \n     ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_args.GetArg(\"-bar\", 0), 1);\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n@@ -172,24 +172,24 @@ BOOST_AUTO_TEST_CASE(boolargno)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_local_args.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_local_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n@@ -209,7 +209,7 @@ BOOST_AUTO_TEST_CASE(logargs)\n         });\n \n     // Log the arguments\n-    m_args.LogArgs();\n+    m_local_args.LogArgs();\n \n     LogInstance().DeleteCallback(print_connection);\n     // Check that what should appear does, and what shouldn't doesn't."
      }
    ]
  },
  {
    "sha": "83292e2a700afbf39936bd67bb89fab5398d0066",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzI5MmUyYTcwMGFmYmYzOTkzNmJkNjdiYjg5ZmFiNTM5OGQwMDY2",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-02-26T08:56:11Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-18T09:59:28Z"
      },
      "message": "scripted-diff: Modify unit tests to use the ArgsManager in the BasicTestingSetup class instead of implicitly relying on gArgs.\n\n-BEGIN VERIFY SCRIPT-\ngit ls-files src/test/dbwrapper_tests.cpp src/test/denialofservice_tests.cpp src/test/flatfile_tests.cpp src/test/fs_tests.cpp src/test/settings_tests.cpp src/test/util_tests.cpp | xargs sed -i 's/GetDataDir()/m_args.GetDataDirPath()/g';\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "135e7629f87517f3e309d5cfd6f6a02ed1ee5c72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/135e7629f87517f3e309d5cfd6f6a02ed1ee5c72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83292e2a700afbf39936bd67bb89fab5398d0066",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83292e2a700afbf39936bd67bb89fab5398d0066",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83292e2a700afbf39936bd67bb89fab5398d0066",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83292e2a700afbf39936bd67bb89fab5398d0066/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55c68e6f011ee604c8a65b9bca668eb4dec452aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c68e6f011ee604c8a65b9bca668eb4dec452aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55c68e6f011ee604c8a65b9bca668eb4dec452aa"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "b5f3bb2fa4ca8b0fe38e9443171a264bce38a652",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=83292e2a700afbf39936bd67bb89fab5398d0066",
        "patch": "@@ -26,7 +26,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (const bool obfuscate : {false, true}) {\n-        fs::path ph = GetDataDir() / (obfuscate ? \"dbwrapper_obfuscate_true\" : \"dbwrapper_obfuscate_false\");\n+        fs::path ph = m_args.GetDataDirPath() / (obfuscate ? \"dbwrapper_obfuscate_true\" : \"dbwrapper_obfuscate_false\");\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = InsecureRand256();\n@@ -45,7 +45,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (bool obfuscate : {false, true}) {\n-        fs::path ph = GetDataDir() / (obfuscate ? \"dbwrapper_1_obfuscate_true\" : \"dbwrapper_1_obfuscate_false\");\n+        fs::path ph = m_args.GetDataDirPath() / (obfuscate ? \"dbwrapper_1_obfuscate_true\" : \"dbwrapper_1_obfuscate_false\");\n         CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n \n         uint256 res;\n@@ -126,7 +126,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (const bool obfuscate : {false, true}) {\n-        fs::path ph = GetDataDir() / (obfuscate ? \"dbwrapper_batch_obfuscate_true\" : \"dbwrapper_batch_obfuscate_false\");\n+        fs::path ph = m_args.GetDataDirPath() / (obfuscate ? \"dbwrapper_batch_obfuscate_true\" : \"dbwrapper_batch_obfuscate_false\");\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n@@ -162,7 +162,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (const bool obfuscate : {false, true}) {\n-        fs::path ph = GetDataDir() / (obfuscate ? \"dbwrapper_iterator_obfuscate_true\" : \"dbwrapper_iterator_obfuscate_false\");\n+        fs::path ph = m_args.GetDataDirPath() / (obfuscate ? \"dbwrapper_iterator_obfuscate_true\" : \"dbwrapper_iterator_obfuscate_false\");\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n@@ -202,7 +202,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {\n     // We're going to share this fs::path between two wrappers\n-    fs::path ph = GetDataDir() / \"existing_data_no_obfuscate\";\n+    fs::path ph = m_args.GetDataDirPath() / \"existing_data_no_obfuscate\";\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n BOOST_AUTO_TEST_CASE(existing_data_reindex)\n {\n     // We're going to share this fs::path between two wrappers\n-    fs::path ph = GetDataDir() / \"existing_data_reindex\";\n+    fs::path ph = m_args.GetDataDirPath() / \"existing_data_reindex\";\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -278,7 +278,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n BOOST_AUTO_TEST_CASE(iterator_ordering)\n {\n-    fs::path ph = GetDataDir() / \"iterator_ordering\";\n+    fs::path ph = m_args.GetDataDirPath() / \"iterator_ordering\";\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n@@ -358,7 +358,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n {\n     char buf[10];\n \n-    fs::path ph = GetDataDir() / \"iterator_string_ordering\";\n+    fs::path ph = m_args.GetDataDirPath() / \"iterator_string_ordering\";\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<10; ++x) {\n         for (int y = 0; y < 10; y++) {\n@@ -404,7 +404,7 @@ BOOST_AUTO_TEST_CASE(unicodepath)\n     // On Windows this test will fail if the directory is created using\n     // the ANSI CreateDirectoryA call and the code page isn't UTF8.\n     // It will succeed if created with CreateDirectoryW.\n-    fs::path ph = GetDataDir() / \"test_runner_\u20bf_\ud83c\udfc3_20191128_104644\";\n+    fs::path ph = m_args.GetDataDirPath() / \"test_runner_\u20bf_\ud83c\udfc3_20191128_104644\";\n     CDBWrapper dbw(ph, (1 << 20));\n \n     fs::path lockPath = ph / \"LOCK\";"
      },
      {
        "sha": "ddf0e0ca907110d4a289a64b089c7aef7c246f6b",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=83292e2a700afbf39936bd67bb89fab5398d0066",
        "patch": "@@ -208,7 +208,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto banman = std::make_unique<BanMan>(m_args.GetDataDirPath() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n@@ -302,7 +302,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto banman = std::make_unique<BanMan>(m_args.GetDataDirPath() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);"
      },
      {
        "sha": "9194ed8130d0ea5af21933bd62c79ce9b5cb9223",
        "filename": "src/test/flatfile_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/flatfile_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/flatfile_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/flatfile_tests.cpp?ref=83292e2a700afbf39936bd67bb89fab5398d0066",
        "patch": "@@ -14,7 +14,7 @@ BOOST_FIXTURE_TEST_SUITE(flatfile_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(flatfile_filename)\n {\n-    const auto data_dir = GetDataDir();\n+    const auto data_dir = m_args.GetDataDirPath();\n \n     FlatFilePos pos(456, 789);\n \n@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(flatfile_filename)\n \n BOOST_AUTO_TEST_CASE(flatfile_open)\n {\n-    const auto data_dir = GetDataDir();\n+    const auto data_dir = m_args.GetDataDirPath();\n     FlatFileSeq seq(data_dir, \"a\", 16 * 1024);\n \n     std::string line1(\"A purely peer-to-peer version of electronic cash would allow online \"\n@@ -88,7 +88,7 @@ BOOST_AUTO_TEST_CASE(flatfile_open)\n \n BOOST_AUTO_TEST_CASE(flatfile_allocate)\n {\n-    const auto data_dir = GetDataDir();\n+    const auto data_dir = m_args.GetDataDirPath();\n     FlatFileSeq seq(data_dir, \"a\", 100);\n \n     bool out_of_space;\n@@ -108,7 +108,7 @@ BOOST_AUTO_TEST_CASE(flatfile_allocate)\n \n BOOST_AUTO_TEST_CASE(flatfile_flush)\n {\n-    const auto data_dir = GetDataDir();\n+    const auto data_dir = m_args.GetDataDirPath();\n     FlatFileSeq seq(data_dir, \"a\", 100);\n \n     bool out_of_space;"
      },
      {
        "sha": "452bc06bbb2c1395b336f6190ef7687715a972c2",
        "filename": "src/test/fs_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/fs_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/fs_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fs_tests.cpp?ref=83292e2a700afbf39936bd67bb89fab5398d0066",
        "patch": "@@ -13,7 +13,7 @@ BOOST_FIXTURE_TEST_SUITE(fs_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(fsbridge_fstream)\n {\n-    fs::path tmpfolder = GetDataDir();\n+    fs::path tmpfolder = m_args.GetDataDirPath();\n     // tmpfile1 should be the same as tmpfile2\n     fs::path tmpfile1 = tmpfolder / \"fs_tests_\u20bf_\ud83c\udfc3\";\n     fs::path tmpfile2 = tmpfolder / \"fs_tests_\u20bf_\ud83c\udfc3\";"
      },
      {
        "sha": "f5ae9f86d1308a4d09a800253b052bac815a4c6e",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=83292e2a700afbf39936bd67bb89fab5398d0066",
        "patch": "@@ -45,7 +45,7 @@ BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(ReadWrite)\n {\n-    fs::path path = GetDataDir() / \"settings.json\";\n+    fs::path path = m_args.GetDataDirPath() / \"settings.json\";\n \n     WriteText(path, R\"({\n         \"string\": \"string\","
      },
      {
        "sha": "92e17d7117e22d4920c6226c012655cc40a843f5",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83292e2a700afbf39936bd67bb89fab5398d0066/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=83292e2a700afbf39936bd67bb89fab5398d0066",
        "patch": "@@ -1801,7 +1801,7 @@ static constexpr char ExitCommand = 'X';\n \n BOOST_AUTO_TEST_CASE(test_LockDirectory)\n {\n-    fs::path dirname = GetDataDir() / \"lock_dir\";\n+    fs::path dirname = m_args.GetDataDirPath() / \"lock_dir\";\n     const std::string lockname = \".lock\";\n #ifndef WIN32\n     // Revert SIGCHLD to default, otherwise boost.test will catch and fail on\n@@ -1890,7 +1890,7 @@ BOOST_AUTO_TEST_CASE(test_LockDirectory)\n BOOST_AUTO_TEST_CASE(test_DirIsWritable)\n {\n     // Should be able to write to the data dir.\n-    fs::path tmpdirname = GetDataDir();\n+    fs::path tmpdirname = m_args.GetDataDirPath();\n     BOOST_CHECK_EQUAL(DirIsWritable(tmpdirname), true);\n \n     // Should not be able to write to a non-existent dir."
      }
    ]
  },
  {
    "sha": "b4190eff72c00e384ad238f9c2f10c8b91be969b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDE5MGVmZjcyYzAwZTM4NGFkMjM4ZjljMmYxMGM4YjkxYmU5Njli",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-09T06:16:36Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-18T09:59:28Z"
      },
      "message": "Change GetBlocksDir() to ArgsManager.GetBlocksDirPath().",
      "tree": {
        "sha": "473640c5390ae891d1fb237b28dd351b9101f49f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/473640c5390ae891d1fb237b28dd351b9101f49f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4190eff72c00e384ad238f9c2f10c8b91be969b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4190eff72c00e384ad238f9c2f10c8b91be969b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4190eff72c00e384ad238f9c2f10c8b91be969b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4190eff72c00e384ad238f9c2f10c8b91be969b/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83292e2a700afbf39936bd67bb89fab5398d0066",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83292e2a700afbf39936bd67bb89fab5398d0066",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83292e2a700afbf39936bd67bb89fab5398d0066"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 43,
      "deletions": 40
    },
    "files": [
      {
        "sha": "741e70f74864552ddca9b26784aa0d7e50adf682",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4190eff72c00e384ad238f9c2f10c8b91be969b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4190eff72c00e384ad238f9c2f10c8b91be969b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b4190eff72c00e384ad238f9c2f10c8b91be969b",
        "patch": "@@ -637,7 +637,7 @@ static void CleanupBlockRevFiles()\n     // Remove the rev files immediately and insert the blk file paths into an\n     // ordered map keyed by block file index.\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n-    fs::path blocksdir = GetBlocksDir();\n+    fs::path blocksdir = gArgs.GetBlocksDirPath();\n     for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n         if (fs::is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n@@ -919,7 +919,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         InitWarning(warnings);\n     }\n \n-    if (!fs::is_directory(GetBlocksDir())) {\n+    if (!fs::is_directory(gArgs.GetBlocksDirPath())) {\n         return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), args.GetArg(\"-blocksdir\", \"\")));\n     }\n \n@@ -1759,8 +1759,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetDataDir()));\n         return false;\n     }\n-    if (!CheckDiskSpace(GetBlocksDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetBlocksDir()));\n+    if (!CheckDiskSpace(gArgs.GetBlocksDirPath())) {\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\"), gArgs.GetBlocksDirPath()));\n         return false;\n     }\n "
      },
      {
        "sha": "f2c555de5276ca31cac36f43a89ecda01c8a1bfa",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4190eff72c00e384ad238f9c2f10c8b91be969b/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4190eff72c00e384ad238f9c2f10c8b91be969b/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=b4190eff72c00e384ad238f9c2f10c8b91be969b",
        "patch": "@@ -216,7 +216,7 @@ QString ClientModel::dataDir() const\n \n QString ClientModel::blocksDir() const\n {\n-    return GUIUtil::boostPathToQString(GetBlocksDir());\n+    return GUIUtil::boostPathToQString(gArgs.GetBlocksDirPath());\n }\n \n void ClientModel::updateBanlist()"
      },
      {
        "sha": "474c4893f9340917f7acf7acf07bf656ad61a02e",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 30,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4190eff72c00e384ad238f9c2f10c8b91be969b/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4190eff72c00e384ad238f9c2f10c8b91be969b/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=b4190eff72c00e384ad238f9c2f10c8b91be969b",
        "patch": "@@ -388,6 +388,32 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n     return std::nullopt;\n }\n \n+const fs::path& ArgsManager::GetBlocksDirPath()\n+{\n+    LOCK(cs_args);\n+    fs::path& path = m_cached_blocks_path;\n+\n+    // Cache the path to avoid calling fs::create_directories on every call of\n+    // this function\n+    if (!path.empty()) return path;\n+\n+    if (IsArgSet(\"-blocksdir\")) {\n+        path = fs::system_complete(GetArg(\"-blocksdir\", \"\"));\n+        if (!fs::is_directory(path)) {\n+            path = \"\";\n+            return path;\n+        }\n+    } else {\n+        path = GetDataDirPath(false);\n+    }\n+\n+    path /= BaseParams().DataDir();\n+    path /= \"blocks\";\n+    fs::create_directories(path);\n+    path = StripRedundantLastElementsOfPath(path);\n+    return path;\n+}\n+\n const fs::path& ArgsManager::GetDataDirPath(bool net_specific) const\n {\n     LOCK(cs_args);\n@@ -425,6 +451,7 @@ void ArgsManager::ClearDatadirPathCache()\n \n     m_cached_datadir_path = fs::path();\n     m_cached_network_datadir_path = fs::path();\n+    m_cached_blocks_path = fs::path();\n }\n \n std::optional<const ArgsManager::Command> ArgsManager::GetCommand() const\n@@ -775,35 +802,6 @@ fs::path GetDefaultDataDir()\n #endif\n }\n \n-static fs::path g_blocks_path_cache_net_specific;\n-static RecursiveMutex csPathCached;\n-\n-const fs::path &GetBlocksDir()\n-{\n-    LOCK(csPathCached);\n-    fs::path &path = g_blocks_path_cache_net_specific;\n-\n-    // Cache the path to avoid calling fs::create_directories on every call of\n-    // this function\n-    if (!path.empty()) return path;\n-\n-    if (gArgs.IsArgSet(\"-blocksdir\")) {\n-        path = fs::system_complete(gArgs.GetArg(\"-blocksdir\", \"\"));\n-        if (!fs::is_directory(path)) {\n-            path = \"\";\n-            return path;\n-        }\n-    } else {\n-        path = GetDataDir(false);\n-    }\n-\n-    path /= BaseParams().DataDir();\n-    path /= \"blocks\";\n-    fs::create_directories(path);\n-    path = StripRedundantLastElementsOfPath(path);\n-    return path;\n-}\n-\n const fs::path &GetDataDir(bool fNetSpecific)\n {\n     return gArgs.GetDataDirPath(fNetSpecific);\n@@ -818,7 +816,6 @@ bool CheckDataDirOption()\n void ClearDatadirCache()\n {\n     gArgs.ClearDatadirPathCache();\n-    g_blocks_path_cache_net_specific = fs::path();\n }\n \n fs::path GetConfigFile(const std::string& confPath)"
      },
      {
        "sha": "fcdb04bb8d0e60fe35708cbab796da93ebd24e1d",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4190eff72c00e384ad238f9c2f10c8b91be969b/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4190eff72c00e384ad238f9c2f10c8b91be969b/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=b4190eff72c00e384ad238f9c2f10c8b91be969b",
        "patch": "@@ -91,8 +91,6 @@ void ReleaseDirectoryLocks();\n \n bool TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n-// The blocks directory is always net specific.\n-const fs::path &GetBlocksDir();\n const fs::path &GetDataDir(bool fNetSpecific = true);\n // Return true if -datadir option points to a valid directory or is not specified.\n bool CheckDataDirOption();\n@@ -200,6 +198,7 @@ class ArgsManager\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n     bool m_accept_any_command GUARDED_BY(cs_args){true};\n     std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n+    fs::path m_cached_blocks_path GUARDED_BY(cs_args);\n     mutable fs::path m_cached_datadir_path GUARDED_BY(cs_args);\n     mutable fs::path m_cached_network_datadir_path GUARDED_BY(cs_args);\n \n@@ -265,6 +264,13 @@ class ArgsManager\n      */\n     std::optional<const Command> GetCommand() const;\n \n+    /**\n+     * Get blocks directory path\n+     *\n+     * @return Blocks path which is network specific\n+     */\n+    const fs::path& GetBlocksDirPath();\n+\n     /**\n      * Get data directory path\n      *"
      },
      {
        "sha": "2bf505e26bbee574a325578516240cc9cd094763",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4190eff72c00e384ad238f9c2f10c8b91be969b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4190eff72c00e384ad238f9c2f10c8b91be969b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b4190eff72c00e384ad238f9c2f10c8b91be969b",
        "patch": "@@ -2204,7 +2204,7 @@ bool CChainState::FlushStateToDisk(\n         // Write blocks and block index to disk.\n         if (fDoFullFlush || fPeriodicWrite) {\n             // Depend on nMinDiskSpace to ensure we can write block index\n-            if (!CheckDiskSpace(GetBlocksDir())) {\n+            if (!CheckDiskSpace(gArgs.GetBlocksDirPath())) {\n                 return AbortNode(state, \"Disk space is too low!\", _(\"Disk space is too low!\"));\n             }\n             {\n@@ -3890,12 +3890,12 @@ void BlockManager::FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPr\n \n static FlatFileSeq BlockFileSeq()\n {\n-    return FlatFileSeq(GetBlocksDir(), \"blk\", gArgs.GetBoolArg(\"-fastprune\", false) ? 0x4000 /* 16kb */ : BLOCKFILE_CHUNK_SIZE);\n+    return FlatFileSeq(gArgs.GetBlocksDirPath(), \"blk\", gArgs.GetBoolArg(\"-fastprune\", false) ? 0x4000 /* 16kb */ : BLOCKFILE_CHUNK_SIZE);\n }\n \n static FlatFileSeq UndoFileSeq()\n {\n-    return FlatFileSeq(GetBlocksDir(), \"rev\", UNDOFILE_CHUNK_SIZE);\n+    return FlatFileSeq(gArgs.GetBlocksDirPath(), \"rev\", UNDOFILE_CHUNK_SIZE);\n }\n \n FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly) {"
      }
    ]
  },
  {
    "sha": "bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjhkMWM2ZTAyOWEyZmQwMTM4NzU5OWQyZmYzYmZjODc5YThhZGE1",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-02-26T08:52:50Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-04-18T10:07:00Z"
      },
      "message": "Change ClearDataDirPathCache() to ArgsManager.ClearPathCache().",
      "tree": {
        "sha": "1b34f491137be9ef3f9bd5b78f471db0d975e8cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b34f491137be9ef3f9bd5b78f471db0d975e8cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4190eff72c00e384ad238f9c2f10c8b91be969b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4190eff72c00e384ad238f9c2f10c8b91be969b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4190eff72c00e384ad238f9c2f10c8b91be969b"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 9,
      "deletions": 16
    },
    "files": [
      {
        "sha": "ffc5115145800a2685707d35c9fbdadd33646c97",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5",
        "patch": "@@ -90,7 +90,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n     fs::create_directories(m_path_root);\n     m_args.ForceSetArg(\"-datadir\", m_path_root.string());\n     gArgs.ForceSetArg(\"-datadir\", m_path_root.string());\n-    ClearDatadirCache();\n+    gArgs.ClearPathCache();\n     {\n         SetupServerArgs(m_node);\n         std::string error;"
      },
      {
        "sha": "04b908829bf2d3a88b6d71a863366024a8713741",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5",
        "patch": "@@ -56,19 +56,19 @@ BOOST_AUTO_TEST_CASE(util_datadir)\n     const fs::path dd_norm = args.GetDataDirPath();\n \n     args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/\");\n-    ClearDatadirCache();\n+    args.ClearPathCache();\n     BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n \n     args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/.\");\n-    ClearDatadirCache();\n+    args.ClearPathCache();\n     BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n \n     args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/./\");\n-    ClearDatadirCache();\n+    args.ClearPathCache();\n     BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n \n     args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/.//\");\n-    ClearDatadirCache();\n+    args.ClearPathCache();\n     BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n }\n "
      },
      {
        "sha": "9b3bd46b386aa21a9cc20703e9236e2a0170cce8",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5",
        "patch": "@@ -445,7 +445,7 @@ const fs::path& ArgsManager::GetDataDirPath(bool net_specific) const\n     return path;\n }\n \n-void ArgsManager::ClearDatadirPathCache()\n+void ArgsManager::ClearPathCache()\n {\n     LOCK(cs_args);\n \n@@ -813,11 +813,6 @@ bool CheckDataDirOption()\n     return datadir.empty() || fs::is_directory(fs::system_complete(datadir));\n }\n \n-void ClearDatadirCache()\n-{\n-    gArgs.ClearDatadirPathCache();\n-}\n-\n fs::path GetConfigFile(const std::string& confPath)\n {\n     return AbsPathForConfigVal(fs::path(confPath), false);\n@@ -976,7 +971,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n     }\n \n     // If datadir is changed in .conf file:\n-    ClearDatadirCache();\n+    gArgs.ClearPathCache();\n     if (!CheckDataDirOption()) {\n         error = strprintf(\"specified data directory \\\"%s\\\" does not exist.\", GetArg(\"-datadir\", \"\"));\n         return false;"
      },
      {
        "sha": "61f862c93a6d66d9f500a0ddf31546a010a8935f",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=bb8d1c6e029a2fd01387599d2ff3bfc879a8ada5",
        "patch": "@@ -94,8 +94,6 @@ fs::path GetDefaultDataDir();\n const fs::path &GetDataDir(bool fNetSpecific = true);\n // Return true if -datadir option points to a valid directory or is not specified.\n bool CheckDataDirOption();\n-/** Tests only */\n-void ClearDatadirCache();\n fs::path GetConfigFile(const std::string& confPath);\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n@@ -281,9 +279,9 @@ class ArgsManager\n     const fs::path& GetDataDirPath(bool net_specific = true) const;\n \n     /**\n-     * For testing\n+     * Clear cached directory paths\n      */\n-    void ClearDatadirPathCache();\n+    void ClearPathCache();\n \n     /**\n      * Return a vector of strings of the given argument"
      }
    ]
  }
]