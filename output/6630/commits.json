[
  {
    "sha": "86270c816411680c33a60adfa768c7a647fce08f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjI3MGM4MTY0MTE2ODBjMzNhNjBhZGZhNzY4YzdhNjQ3ZmNlMDhm",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-09-03T16:53:00Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-09-03T19:13:40Z"
      },
      "message": "Replace boost::reverse_lock with our own.",
      "tree": {
        "sha": "8e8e3f427d23ec88dab51cb99ab5314590997f75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e8e3f427d23ec88dab51cb99ab5314590997f75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86270c816411680c33a60adfa768c7a647fce08f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86270c816411680c33a60adfa768c7a647fce08f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86270c816411680c33a60adfa768c7a647fce08f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86270c816411680c33a60adfa768c7a647fce08f/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da9beb288d2ee35b9c70513dd18f220b2dc32f16"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 100,
      "deletions": 2
    },
    "files": [
      {
        "sha": "456dfc32ce1e8971b62a13233acc77a6f247d852",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86270c816411680c33a60adfa768c7a647fce08f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86270c816411680c33a60adfa768c7a647fce08f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=86270c816411680c33a60adfa768c7a647fce08f",
        "patch": "@@ -119,6 +119,7 @@ BITCOIN_CORE_H = \\\n   protocol.h \\\n   pubkey.h \\\n   random.h \\\n+  reverselock.h \\\n   rpcclient.h \\\n   rpcprotocol.h \\\n   rpcserver.h \\"
      },
      {
        "sha": "cc60cd92bbc0a8466e6a9fbe637772938a01a5de",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86270c816411680c33a60adfa768c7a647fce08f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86270c816411680c33a60adfa768c7a647fce08f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=86270c816411680c33a60adfa768c7a647fce08f",
        "patch": "@@ -62,6 +62,7 @@ BITCOIN_TESTS =\\\n   test/pmt_tests.cpp \\\n   test/policyestimator_tests.cpp \\\n   test/pow_tests.cpp \\\n+  test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\\n   test/scheduler_tests.cpp \\"
      },
      {
        "sha": "567636e16afa78748be337c382ef2154f06f4607",
        "filename": "src/reverselock.h",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86270c816411680c33a60adfa768c7a647fce08f/src/reverselock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86270c816411680c33a60adfa768c7a647fce08f/src/reverselock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/reverselock.h?ref=86270c816411680c33a60adfa768c7a647fce08f",
        "patch": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_REVERSELOCK_H\n+#define BITCOIN_REVERSELOCK_H\n+\n+/**\n+ * An RAII-style reverse lock. Unlocks on construction and locks on destruction.\n+ */\n+template<typename Lock>\n+class reverse_lock\n+{\n+public:\n+\n+    explicit reverse_lock(Lock& lock) : lock(lock) {\n+        lock.unlock();\n+    }\n+\n+    ~reverse_lock() {\n+        lock.lock();\n+    }\n+\n+private:\n+    reverse_lock(reverse_lock const&);\n+    reverse_lock& operator=(reverse_lock const&);\n+\n+    Lock& lock;\n+};\n+\n+#endif // BITCOIN_REVERSELOCK_H"
      },
      {
        "sha": "184ddc28abbff5f704f8af812451080051543e8a",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86270c816411680c33a60adfa768c7a647fce08f/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86270c816411680c33a60adfa768c7a647fce08f/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=86270c816411680c33a60adfa768c7a647fce08f",
        "patch": "@@ -4,9 +4,10 @@\n \n #include \"scheduler.h\"\n \n+#include \"reverselock.h\"\n+\n #include <assert.h>\n #include <boost/bind.hpp>\n-#include <boost/thread/reverse_lock.hpp>\n #include <utility>\n \n CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)\n@@ -69,7 +70,7 @@ void CScheduler::serviceQueue()\n             {\n                 // Unlock before calling f, so it can reschedule itself or another task\n                 // without deadlocking:\n-                boost::reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+                reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n                 f();\n             }\n         } catch (...) {"
      },
      {
        "sha": "e7e627ae0f24eb072e1461891ef281006bf0146c",
        "filename": "src/test/reverselock_tests.cpp",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86270c816411680c33a60adfa768c7a647fce08f/src/test/reverselock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86270c816411680c33a60adfa768c7a647fce08f/src/test/reverselock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/reverselock_tests.cpp?ref=86270c816411680c33a60adfa768c7a647fce08f",
        "patch": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"reverselock.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(reverselock_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(reverselock_basics)\n+{\n+    boost::mutex mutex;\n+    boost::unique_lock<boost::mutex> lock(mutex);\n+\n+    BOOST_CHECK(lock.owns_lock());\n+    {\n+        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        BOOST_CHECK(!lock.owns_lock());\n+    }\n+    BOOST_CHECK(lock.owns_lock());\n+}\n+\n+BOOST_AUTO_TEST_CASE(reverselock_errors)\n+{\n+    boost::mutex mutex;\n+    boost::unique_lock<boost::mutex> lock(mutex);\n+\n+    // Make sure trying to reverse lock an unlocked lock fails\n+    lock.unlock();\n+\n+    BOOST_CHECK(!lock.owns_lock());\n+\n+    bool failed = false;\n+    try {\n+        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+    } catch(...) {\n+        failed = true;\n+    }\n+\n+    BOOST_CHECK(failed);\n+    BOOST_CHECK(!lock.owns_lock());\n+\n+    // Make sure trying to lock a lock after it has been reverse locked fails\n+    failed = false;\n+    bool locked = false;\n+\n+    lock.lock();\n+    BOOST_CHECK(lock.owns_lock());\n+\n+    try {\n+        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        lock.lock();\n+        locked = true;\n+    } catch(...) {\n+        failed = true;\n+    }\n+\n+    BOOST_CHECK(locked && failed);\n+    BOOST_CHECK(lock.owns_lock());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]