[
  {
    "sha": "8969828d069e4e55108618a493749535edc12ec7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTY5ODI4ZDA2OWU0ZTU1MTA4NjE4YTQ5Mzc0OTUzNWVkYzEyZWM3",
    "commit": {
      "author": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-06-07T06:20:22Z"
      },
      "committer": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2014-06-25T18:53:05Z"
      },
      "message": "[Qt] New status bar Unit Display Control and related changes.\n\n- New status bar control shows the current Unit of Display.\n  When clicked (left,or right button) it shows a context menu\n  that allows the user to switch the current Unit of Display (BTC, mBTC, uBTC)\n- Recent Requests and Transaction Table headers are now updated when\n  unit of display is changed, because their \"Amount\" column now displays the\n  current unit of display.\n- Takes care of issue #3970 Units in transaction export csv file.\n- Small refactors for reusability.\n- Demo Video https://www.youtube.com/watch?v=wwcr0Yh68go&list=UUG3jF2hgofmLWP0tRPisQAQ\n- changes after Diapolo's feedback. Have not been able to build after last pool, issues with boost on MacOSX, will test on Ubuntu these changes.\n- removed return statement on switch\n- renamed onDisplayUnitsChanged(int) to updateDisplayUnit(int)\n- now getAmountColumnTitle(int unit) takes a simple unit parameter. moved to BitcoinUnits.",
      "tree": {
        "sha": "b3e65acdf948412304e2179cb2baac4afaab120b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3e65acdf948412304e2179cb2baac4afaab120b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8969828d069e4e55108618a493749535edc12ec7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8969828d069e4e55108618a493749535edc12ec7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8969828d069e4e55108618a493749535edc12ec7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8969828d069e4e55108618a493749535edc12ec7/comments",
    "author": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "343feecf562a39e7d898ece2fd745fcb9d4c90e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/343feecf562a39e7d898ece2fd745fcb9d4c90e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/343feecf562a39e7d898ece2fd745fcb9d4c90e9"
      }
    ],
    "stats": {
      "total": 194,
      "additions": 187,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f2fb8c877e0f812323d43d46a325c02f20acbc95",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8969828d069e4e55108618a493749535edc12ec7/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8969828d069e4e55108618a493749535edc12ec7/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=8969828d069e4e55108618a493749535edc12ec7",
        "patch": "@@ -28,6 +28,7 @@\n \n #include <iostream>\n \n+#include <QAction>\n #include <QApplication>\n #include <QDateTime>\n #include <QDesktopWidget>\n@@ -39,6 +40,7 @@\n #include <QMenuBar>\n #include <QMessageBox>\n #include <QMimeData>\n+#include <QPoint>\n #include <QProgressBar>\n #include <QProgressDialog>\n #include <QSettings>\n@@ -49,6 +51,8 @@\n #include <QToolBar>\n #include <QVBoxLayout>\n \n+\n+\n #if QT_VERSION < 0x050000\n #include <QUrl>\n #include <QTextDocument>\n@@ -156,10 +160,13 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n     QHBoxLayout *frameBlocksLayout = new QHBoxLayout(frameBlocks);\n     frameBlocksLayout->setContentsMargins(3,0,3,0);\n     frameBlocksLayout->setSpacing(3);\n+    unitDisplayControl = new UnitDisplayStatusBarControl();\n     labelEncryptionIcon = new QLabel();\n     labelConnectionsIcon = new QLabel();\n     labelBlocksIcon = new QLabel();\n     frameBlocksLayout->addStretch();\n+    frameBlocksLayout->addWidget(unitDisplayControl);\n+    frameBlocksLayout->addStretch();\n     frameBlocksLayout->addWidget(labelEncryptionIcon);\n     frameBlocksLayout->addStretch();\n     frameBlocksLayout->addWidget(labelConnectionsIcon);\n@@ -420,6 +427,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n             walletFrame->setClientModel(clientModel);\n         }\n #endif\n+\n+        this->unitDisplayControl->setOptionsModel(clientModel->getOptionsModel());\n     }\n }\n \n@@ -1000,3 +1009,72 @@ void BitcoinGUI::unsubscribeFromCoreSignals()\n     // Disconnect signals from client\n     uiInterface.ThreadSafeMessageBox.disconnect(boost::bind(ThreadSafeMessageBox, this, _1, _2, _3));\n }\n+\n+UnitDisplayStatusBarControl::UnitDisplayStatusBarControl():QLabel()\n+{\n+    optionsModel = 0;\n+    createContextMenu();\n+    setStyleSheet(\"font:11pt; color: #333333\");\n+    setToolTip(tr(\"Unit to show amounts in. Click to select another unit.\"));\n+}\n+\n+/** So that it responds to left-button clicks */\n+void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n+{\n+    onDisplayUnitsClicked(event->pos());\n+}\n+\n+/** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */\n+void UnitDisplayStatusBarControl::createContextMenu()\n+{\n+    menu = new QMenu();\n+    foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    {\n+        QAction *menuAction = new QAction(QString(BitcoinUnits::name(u)), this);\n+        menuAction->setData(QVariant(u));\n+        menu->addAction(menuAction);\n+    }\n+    connect(menu,SIGNAL(triggered(QAction*)),this,SLOT(onMenuSelection(QAction*)));\n+\n+    // what happens on right click.\n+    setContextMenuPolicy(Qt::CustomContextMenu);\n+    connect(this,SIGNAL(customContextMenuRequested(const QPoint&)),this,SLOT(onDisplayUnitsClicked(const QPoint&)));\n+}\n+\n+/** Lets the control know about the Options Model (and its signals) */\n+void UnitDisplayStatusBarControl::setOptionsModel(OptionsModel *optionsModel)\n+{\n+    if (optionsModel)\n+    {\n+        this->optionsModel = optionsModel;\n+\n+        // be aware of a display unit change reported by the OptionsModel object.\n+        connect(optionsModel,SIGNAL(displayUnitChanged(int)),this,SLOT(updateDisplayUnit(int)));\n+\n+        // initialize the display units label with the current value in the model.\n+        updateDisplayUnit(optionsModel->getDisplayUnit());\n+    }\n+}\n+\n+/** When Display Units are changed on OptionsModel it will refresh the display text of the control on the status bar */\n+void UnitDisplayStatusBarControl::updateDisplayUnit(int newUnits)\n+{\n+    setText(BitcoinUnits::name(newUnits));\n+}\n+\n+/** Shows context menu with Display Unit options by the mouse coordinates */\n+void UnitDisplayStatusBarControl::onDisplayUnitsClicked(const QPoint& point)\n+{\n+    QPoint globalPos = mapToGlobal(point);\n+    menu->exec(globalPos);\n+}\n+\n+/** Tells underlying optionsModel to update its current display unit. */\n+void UnitDisplayStatusBarControl::onMenuSelection(QAction* action)\n+{\n+    if (action)\n+    {\n+        optionsModel->setDisplayUnit(action->data());\n+    }\n+}\n+"
      },
      {
        "sha": "705e629a697547e1e2fbf80e41162658da64a59e",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8969828d069e4e55108618a493749535edc12ec7/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8969828d069e4e55108618a493749535edc12ec7/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=8969828d069e4e55108618a493749535edc12ec7",
        "patch": "@@ -9,22 +9,30 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include <QLabel>\n #include <QMainWindow>\n #include <QMap>\n+#include <QMenu>\n+#include <QPoint>\n #include <QSystemTrayIcon>\n \n class ClientModel;\n class Notificator;\n+class OptionsModel;\n class RPCConsole;\n class SendCoinsRecipient;\n class WalletFrame;\n class WalletModel;\n \n class CWallet;\n \n+class UnitDisplayStatusBarControl;\n+\n QT_BEGIN_NAMESPACE\n class QAction;\n class QLabel;\n+class QMenu;\n+class QPoint;\n class QProgressBar;\n class QProgressDialog;\n QT_END_NAMESPACE\n@@ -69,6 +77,7 @@ class BitcoinGUI : public QMainWindow\n     ClientModel *clientModel;\n     WalletFrame *walletFrame;\n \n+    UnitDisplayStatusBarControl *unitDisplayControl;\n     QLabel *labelEncryptionIcon;\n     QLabel *labelConnectionsIcon;\n     QLabel *labelBlocksIcon;\n@@ -198,4 +207,32 @@ private slots:\n     void showProgress(const QString &title, int nProgress);\n };\n \n+class UnitDisplayStatusBarControl : public QLabel\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit UnitDisplayStatusBarControl();\n+    /** Lets the control know about the Options Model (and its signals) */\n+    void setOptionsModel(OptionsModel *optionsModel);\n+\n+protected:\n+    /** So that it responds to left-button clicks */\n+    void mousePressEvent(QMouseEvent *event);\n+\n+private:\n+    OptionsModel *optionsModel;\n+    QMenu* menu;\n+    /** Shows context menu with Display Unit options by the mouse coordinates */\n+    void onDisplayUnitsClicked(const QPoint& point);\n+    /** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */\n+    void createContextMenu();\n+\n+private slots:\n+    /** When Display Units are changed on OptionsModel it will refresh the display text of the control on the status bar */\n+    void updateDisplayUnit(int newUnits);\n+    /** Tells underlying optionsModel to update its current display unit. */\n+    void onMenuSelection(QAction* action);\n+};\n+\n #endif // BITCOINGUI_H"
      },
      {
        "sha": "4ba6aba55129f2839243eb06926c8b6dcb3042f1",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8969828d069e4e55108618a493749535edc12ec7/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8969828d069e4e55108618a493749535edc12ec7/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=8969828d069e4e55108618a493749535edc12ec7",
        "patch": "@@ -169,6 +169,16 @@ bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)\n     return ok;\n }\n \n+QString BitcoinUnits::getAmountColumnTitle(int unit)\n+{\n+    QString amountTitle = QObject::tr(\"Amount\");\n+    if (BitcoinUnits::valid(unit))\n+    {\n+        amountTitle += \" (\"+BitcoinUnits::name(unit) + \")\";\n+    }\n+    return amountTitle;\n+}\n+\n int BitcoinUnits::rowCount(const QModelIndex &parent) const\n {\n     Q_UNUSED(parent);"
      },
      {
        "sha": "451b52ee21e0be443406aadffcd08ce004298763",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8969828d069e4e55108618a493749535edc12ec7/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8969828d069e4e55108618a493749535edc12ec7/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=8969828d069e4e55108618a493749535edc12ec7",
        "patch": "@@ -54,6 +54,8 @@ class BitcoinUnits: public QAbstractListModel\n     static QString formatWithUnit(int unit, qint64 amount, bool plussign=false);\n     //! Parse string to coin amount\n     static bool parse(int unit, const QString &value, qint64 *val_out);\n+    //! Gets title for amount column including current display unit if optionsModel reference available */\n+    static QString getAmountColumnTitle(int unit);\n     ///@}\n \n     //! @name AbstractListModel implementation"
      },
      {
        "sha": "09553a258765edd1753a71180c0b98d82cd69aa7",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8969828d069e4e55108618a493749535edc12ec7/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8969828d069e4e55108618a493749535edc12ec7/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=8969828d069e4e55108618a493749535edc12ec7",
        "patch": "@@ -308,9 +308,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             break;\n #endif\n         case DisplayUnit:\n-            nDisplayUnit = value.toInt();\n-            settings.setValue(\"nDisplayUnit\", nDisplayUnit);\n-            emit displayUnitChanged(nDisplayUnit);\n+            setDisplayUnit(value);\n             break;\n         case DisplayAddresses:\n             bDisplayAddresses = value.toBool();\n@@ -356,11 +354,24 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             break;\n         }\n     }\n+\n     emit dataChanged(index, index);\n \n     return successful;\n }\n \n+/** Updates current unit in memory, settings and emits displayUnitChanged(newUnit) signal */\n+void OptionsModel::setDisplayUnit(const QVariant &value)\n+{\n+    if (!value.isNull())\n+    {\n+        QSettings settings;\n+        nDisplayUnit = value.toInt();\n+        settings.setValue(\"nDisplayUnit\", nDisplayUnit);\n+        emit displayUnitChanged(nDisplayUnit);\n+    }\n+}\n+\n bool OptionsModel::getProxySettings(QNetworkProxy& proxy) const\n {\n     // Directly query current base proxy, because"
      },
      {
        "sha": "89c2ec745305b371976dca08141e7b6b757663d7",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8969828d069e4e55108618a493749535edc12ec7/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8969828d069e4e55108618a493749535edc12ec7/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=8969828d069e4e55108618a493749535edc12ec7",
        "patch": "@@ -52,6 +52,8 @@ class OptionsModel : public QAbstractListModel\n     int rowCount(const QModelIndex & parent = QModelIndex()) const;\n     QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const;\n     bool setData(const QModelIndex & index, const QVariant & value, int role = Qt::EditRole);\n+    /** Updates current unit in memory, settings and emits displayUnitChanged(newUnit) signal */\n+    void setDisplayUnit(const QVariant &value);\n \n     /* Explicit getters */\n     bool getMinimizeToTray() { return fMinimizeToTray; }"
      },
      {
        "sha": "b5a998f9f539599b3ea160bb13744368717ef3df",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8969828d069e4e55108618a493749535edc12ec7/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8969828d069e4e55108618a493749535edc12ec7/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=8969828d069e4e55108618a493749535edc12ec7",
        "patch": "@@ -21,7 +21,9 @@ RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel\n         addNewRequest(request);\n \n     /* These columns must match the indices in the ColumnIndex enumeration */\n-    columns << tr(\"Date\") << tr(\"Label\") << tr(\"Message\") << tr(\"Amount\");\n+    columns << tr(\"Date\") << tr(\"Label\") << tr(\"Message\") << getAmountTitle();\n+\n+    connect(walletModel->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n }\n \n RecentRequestsTableModel::~RecentRequestsTableModel()\n@@ -101,6 +103,24 @@ QVariant RecentRequestsTableModel::headerData(int section, Qt::Orientation orien\n     return QVariant();\n }\n \n+/** Updates the column title to \"Amount (DisplayUnit)\" and emits headerDataChanged() signal for table headers to react. */\n+void RecentRequestsTableModel::updateAmountColumnTitle()\n+{\n+    columns[Amount] = getAmountTitle();\n+    emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n+}\n+\n+/** Gets title for amount column including current display unit if optionsModel reference available. */\n+QString RecentRequestsTableModel::getAmountTitle()\n+{\n+    QString amountTitle = tr(\"Amount\");\n+    if (this->walletModel->getOptionsModel() != NULL)\n+    {\n+        amountTitle += \" (\"+BitcoinUnits::name(this->walletModel->getOptionsModel()->getDisplayUnit()) + \")\";\n+    }\n+    return amountTitle;\n+}\n+\n QModelIndex RecentRequestsTableModel::index(int row, int column, const QModelIndex &parent) const\n {\n     Q_UNUSED(parent);\n@@ -185,6 +205,11 @@ void RecentRequestsTableModel::sort(int column, Qt::SortOrder order)\n     emit dataChanged(index(0, 0, QModelIndex()), index(list.size() - 1, NUMBER_OF_COLUMNS - 1, QModelIndex()));\n }\n \n+void RecentRequestsTableModel::updateDisplayUnit()\n+{\n+    updateAmountColumnTitle();\n+}\n+\n bool RecentRequestEntryLessThan::operator()(RecentRequestEntry &left, RecentRequestEntry &right) const\n {\n     RecentRequestEntry *pLeft = &left;"
      },
      {
        "sha": "4f0b241259de92783097a33cbab7cfa58c431555",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8969828d069e4e55108618a493749535edc12ec7/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8969828d069e4e55108618a493749535edc12ec7/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=8969828d069e4e55108618a493749535edc12ec7",
        "patch": "@@ -91,12 +91,18 @@ class RecentRequestsTableModel: public QAbstractTableModel\n \n public slots:\n     void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);\n+    void updateDisplayUnit();\n \n private:\n     WalletModel *walletModel;\n     QStringList columns;\n     QList<RecentRequestEntry> list;\n     int64_t nReceiveRequestsMaxId;\n+\n+    /** Updates the column title to \"Amount (DisplayUnit)\" and emits headerDataChanged() signal for table headers to react. */\n+    void updateAmountColumnTitle();\n+    /** Gets title for amount column including current display unit if optionsModel reference available. */\n+    QString getAmountTitle();\n };\n \n #endif"
      },
      {
        "sha": "e34238d805c6b5a42203195fe815434bc6b11f0a",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8969828d069e4e55108618a493749535edc12ec7/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8969828d069e4e55108618a493749535edc12ec7/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=8969828d069e4e55108618a493749535edc12ec7",
        "patch": "@@ -235,8 +235,7 @@ TransactionTableModel::TransactionTableModel(CWallet* wallet, WalletModel *paren\n         walletModel(parent),\n         priv(new TransactionTablePriv(wallet, this))\n {\n-    columns << QString() << tr(\"Date\") << tr(\"Type\") << tr(\"Address\") << tr(\"Amount\");\n-\n+    columns << QString() << tr(\"Date\") << tr(\"Type\") << tr(\"Address\") << BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n     priv->refreshWallet();\n \n     connect(walletModel->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n@@ -247,6 +246,13 @@ TransactionTableModel::~TransactionTableModel()\n     delete priv;\n }\n \n+/** Updates the column title to \"Amount (DisplayUnit)\" and emits headerDataChanged() signal for table headers to react. */\n+void TransactionTableModel::updateAmountColumnTitle()\n+{\n+    columns[Amount] = BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n+    emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n+}\n+\n void TransactionTableModel::updateTransaction(const QString &hash, int status)\n {\n     uint256 updated;\n@@ -624,5 +630,6 @@ QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex\n void TransactionTableModel::updateDisplayUnit()\n {\n     // emit dataChanged to update Amount column with the current unit\n+    updateAmountColumnTitle();\n     emit dataChanged(index(0, Amount), index(priv->size()-1, Amount));\n }"
      },
      {
        "sha": "e8b6ed065d429a49db1c8220e63ea88149eecf0c",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8969828d069e4e55108618a493749535edc12ec7/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8969828d069e4e55108618a493749535edc12ec7/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=8969828d069e4e55108618a493749535edc12ec7",
        "patch": "@@ -87,6 +87,8 @@ public slots:\n     void updateTransaction(const QString &hash, int status);\n     void updateConfirmations();\n     void updateDisplayUnit();\n+    /** Updates the column title to \"Amount (DisplayUnit)\" and emits headerDataChanged() signal for table headers to react. */\n+    void updateAmountColumnTitle();\n \n     friend class TransactionTablePriv;\n };"
      },
      {
        "sha": "d6d210a561f6d43f8b2f0ce6c0a57e01e1b65b1e",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8969828d069e4e55108618a493749535edc12ec7/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8969828d069e4e55108618a493749535edc12ec7/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=8969828d069e4e55108618a493749535edc12ec7",
        "patch": "@@ -309,7 +309,7 @@ void TransactionView::exportClicked()\n     writer.addColumn(tr(\"Type\"), TransactionTableModel::Type, Qt::EditRole);\n     writer.addColumn(tr(\"Label\"), 0, TransactionTableModel::LabelRole);\n     writer.addColumn(tr(\"Address\"), 0, TransactionTableModel::AddressRole);\n-    writer.addColumn(tr(\"Amount\"), 0, TransactionTableModel::FormattedAmountRole);\n+    writer.addColumn(BitcoinUnits::getAmountColumnTitle(model->getOptionsModel()->getDisplayUnit()), 0, TransactionTableModel::FormattedAmountRole);\n     writer.addColumn(tr(\"ID\"), 0, TransactionTableModel::TxIDRole);\n \n     if(!writer.write()) {"
      }
    ]
  }
]