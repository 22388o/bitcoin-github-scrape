[
  {
    "sha": "1b0bcc5f9573406bff1c3ffaf73826b0142d23cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjBiY2M1Zjk1NzM0MDZiZmYxYzNmZmFmNzM4MjZiMDE0MmQyM2Nj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-10T14:07:14Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-10T19:51:20Z"
      },
      "message": "Track orphan by prev COutPoint rather than prev hash",
      "tree": {
        "sha": "c3ba73606d775c187e0299d949c8dc6355a909a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3ba73606d775c187e0299d949c8dc6355a909a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b0bcc5f9573406bff1c3ffaf73826b0142d23cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b0bcc5f9573406bff1c3ffaf73826b0142d23cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b0bcc5f9573406bff1c3ffaf73826b0142d23cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b0bcc5f9573406bff1c3ffaf73826b0142d23cc/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e4cf8fe26440cae179aaca44ccadd476b464994",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4cf8fe26440cae179aaca44ccadd476b464994",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4cf8fe26440cae179aaca44ccadd476b464994"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 36,
      "deletions": 22
    },
    "files": [
      {
        "sha": "17867c869cd5b91c0b55b5c38b2f6dce466a5a86",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 22,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b0bcc5f9573406bff1c3ffaf73826b0142d23cc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b0bcc5f9573406bff1c3ffaf73826b0142d23cc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1b0bcc5f9573406bff1c3ffaf73826b0142d23cc",
        "patch": "@@ -88,12 +88,21 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n CTxMemPool mempool(::minRelayTxFee);\n FeeFilterRounder filterRounder(::minRelayTxFee);\n \n+struct IteratorComparator\n+{\n+    template<typename I>\n+    bool operator()(const I& a, const I& b)\n+    {\n+        return &(*a) < &(*b);\n+    }\n+};\n+\n struct COrphanTx {\n     CTransaction tx;\n     NodeId fromPeer;\n };\n map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n-map<uint256, set<uint256> > mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n+map<COutPoint, set<map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n@@ -632,31 +641,33 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n         return false;\n     }\n \n-    mapOrphanTransactions[hash].tx = tx;\n-    mapOrphanTransactions[hash].fromPeer = peer;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n+    auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer});\n+    assert(ret.second);\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n+    }\n \n-    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u prevsz %u)\\n\", hash.ToString(),\n+    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n              mapOrphanTransactions.size(), mapOrphanTransactionsByPrev.size());\n     return true;\n }\n \n-void static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n-        return;\n+        return 0;\n     BOOST_FOREACH(const CTxIn& txin, it->second.tx.vin)\n     {\n-        map<uint256, set<uint256> >::iterator itPrev = mapOrphanTransactionsByPrev.find(txin.prevout.hash);\n+        auto itPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n         if (itPrev == mapOrphanTransactionsByPrev.end())\n             continue;\n-        itPrev->second.erase(hash);\n+        itPrev->second.erase(it);\n         if (itPrev->second.empty())\n             mapOrphanTransactionsByPrev.erase(itPrev);\n     }\n     mapOrphanTransactions.erase(it);\n+    return 1;\n }\n \n void EraseOrphansFor(NodeId peer)\n@@ -668,8 +679,7 @@ void EraseOrphansFor(NodeId peer)\n         map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n-            EraseOrphanTx(maybeErase->second.tx.GetHash());\n-            ++nErased;\n+            nErased += EraseOrphanTx(maybeErase->second.tx.GetHash());\n         }\n     }\n     if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx from peer %d\\n\", nErased, peer);\n@@ -5019,7 +5029,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n-        vector<uint256> vWorkQueue;\n+        deque<COutPoint> vWorkQueue;\n         vector<uint256> vEraseQueue;\n         CTransaction tx;\n         vRecv >> tx;\n@@ -5038,7 +5048,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs)) {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx);\n-            vWorkQueue.push_back(inv.hash);\n+            for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+                vWorkQueue.emplace_back(inv.hash, i);\n+            }\n \n             LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n                 pfrom->id,\n@@ -5047,18 +5059,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n             // Recursively process any orphan transactions that depended on this one\n             set<NodeId> setMisbehaving;\n-            for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n-            {\n-                map<uint256, set<uint256> >::iterator itByPrev = mapOrphanTransactionsByPrev.find(vWorkQueue[i]);\n+            while (!vWorkQueue.empty()) {\n+                auto itByPrev = mapOrphanTransactionsByPrev.find(vWorkQueue.front());\n+                vWorkQueue.pop_front();\n                 if (itByPrev == mapOrphanTransactionsByPrev.end())\n                     continue;\n-                for (set<uint256>::iterator mi = itByPrev->second.begin();\n+                for (auto mi = itByPrev->second.begin();\n                      mi != itByPrev->second.end();\n                      ++mi)\n                 {\n-                    const uint256& orphanHash = *mi;\n-                    const CTransaction& orphanTx = mapOrphanTransactions[orphanHash].tx;\n-                    NodeId fromPeer = mapOrphanTransactions[orphanHash].fromPeer;\n+                    const CTransaction& orphanTx = (*mi)->second.tx;\n+                    const uint256& orphanHash = orphanTx.GetHash();\n+                    NodeId fromPeer = (*mi)->second.fromPeer;\n                     bool fMissingInputs2 = false;\n                     // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n                     // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n@@ -5071,7 +5083,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2)) {\n                         LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx);\n-                        vWorkQueue.push_back(orphanHash);\n+                        for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n+                            vWorkQueue.emplace_back(orphanHash, i);\n+                        }\n                         vEraseQueue.push_back(orphanHash);\n                     }\n                     else if (!fMissingInputs2)"
      }
    ]
  },
  {
    "sha": "db0ffe80a0919653f058ab0f1fc735f46bb902f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjBmZmU4MGEwOTE5NjUzZjA1OGFiMGYxZmM3MzVmNDZiYjkwMmYz",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-10T20:41:49Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-10T20:42:03Z"
      },
      "message": "This eliminates the primary leak that causes the orphan map to\n always grow to its maximum size.\n\nThis does not go so far as to attempt to connect orphans made\n connectable by a new block.\n\nKeeping the orphan map less full helps improve the reliability\n of relaying chains of transactions.",
      "tree": {
        "sha": "4c25d78652c8c221a14d6352f32c9b0cc59c6365",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c25d78652c8c221a14d6352f32c9b0cc59c6365"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db0ffe80a0919653f058ab0f1fc735f46bb902f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0ffe80a0919653f058ab0f1fc735f46bb902f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db0ffe80a0919653f058ab0f1fc735f46bb902f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0ffe80a0919653f058ab0f1fc735f46bb902f3/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b0bcc5f9573406bff1c3ffaf73826b0142d23cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b0bcc5f9573406bff1c3ffaf73826b0142d23cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b0bcc5f9573406bff1c3ffaf73826b0142d23cc"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c80a4ac922c8319f2fbb7c10daf7facbff3a146e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0ffe80a0919653f058ab0f1fc735f46bb902f3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0ffe80a0919653f058ab0f1fc735f46bb902f3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=db0ffe80a0919653f058ab0f1fc735f46bb902f3",
        "patch": "@@ -2345,6 +2345,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n+    std::vector<uint256> vOrphanErase;\n     std::vector<int> prevheights;\n     CAmount nFees = 0;\n     int nInputs = 0;\n@@ -2377,6 +2378,17 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 prevheights[j] = view.AccessCoins(tx.vin[j].prevout.hash)->nHeight;\n             }\n \n+            // Which orphan pool entries must we evict?\n+            for (size_t j = 0; j < tx.vin.size(); j++) {\n+                auto itByPrev = mapOrphanTransactionsByPrev.find(tx.vin[j].prevout);\n+                if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n+                for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n+                    const CTransaction& orphanTx = (*mi)->second.tx;\n+                    const uint256& orphanHash = orphanTx.GetHash();\n+                    vOrphanErase.push_back(orphanHash);\n+                }\n+            }\n+\n             if (!SequenceLocks(tx, nLockTimeFlags, &prevheights, *pindex)) {\n                 return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n@@ -2464,6 +2476,15 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     GetMainSignals().UpdatedTransaction(hashPrevBestCoinBase);\n     hashPrevBestCoinBase = block.vtx[0].GetHash();\n \n+    // Erase orphan transactions include or precluded by this block\n+    if (vOrphanErase.size()) {\n+        int nErased = 0;\n+        BOOST_FOREACH(uint256 &orphanHash, vOrphanErase) {\n+            nErased += EraseOrphanTx(orphanHash);\n+        }\n+        LogPrint(\"mempool\", \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n+    }\n+\n     int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;\n     LogPrint(\"bench\", \"    - Callbacks: %.2fms [%.2fs]\\n\", 0.001 * (nTime6 - nTime5), nTimeCallbacks * 0.000001);\n "
      }
    ]
  },
  {
    "sha": "11cc143895e730002749f0881c4c95635fa54bd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWNjMTQzODk1ZTczMDAwMjc0OWYwODgxYzRjOTU2MzVmYTU0YmQ1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-11T00:26:16Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-15T09:56:28Z"
      },
      "message": "Adds an expiration time for orphan tx.\n\nThis prevents higher order orphans and other junk from\n holding positions in the orphan map.  Parents delayed\n twenty minutes are more are unlikely to ever arrive.\n\nThe freed space will improve the orphan matching success rate for\n other transactions.",
      "tree": {
        "sha": "e0e9ad81dbaba5081304341cb49d44a7d0602c92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0e9ad81dbaba5081304341cb49d44a7d0602c92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11cc143895e730002749f0881c4c95635fa54bd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11cc143895e730002749f0881c4c95635fa54bd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11cc143895e730002749f0881c4c95635fa54bd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11cc143895e730002749f0881c4c95635fa54bd5/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db0ffe80a0919653f058ab0f1fc735f46bb902f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0ffe80a0919653f058ab0f1fc735f46bb902f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db0ffe80a0919653f058ab0f1fc735f46bb902f3"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 26,
      "deletions": 1
    },
    "files": [
      {
        "sha": "44d96d614e27815e5eedb943e2a5dee895bfff75",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11cc143895e730002749f0881c4c95635fa54bd5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11cc143895e730002749f0881c4c95635fa54bd5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=11cc143895e730002749f0881c4c95635fa54bd5",
        "patch": "@@ -100,6 +100,7 @@ struct IteratorComparator\n struct COrphanTx {\n     CTransaction tx;\n     NodeId fromPeer;\n+    int64_t nTimeExpire;\n };\n map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n map<COutPoint, set<map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n@@ -641,7 +642,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n         return false;\n     }\n \n-    auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer});\n+    auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME});\n     assert(ret.second);\n     BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n         mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n@@ -689,6 +690,26 @@ void EraseOrphansFor(NodeId peer)\n unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     unsigned int nEvicted = 0;\n+    static int64_t nNextSweep;\n+    int64_t nNow = GetTime();\n+    if (nNextSweep <= nNow) {\n+        // Sweep out expired orphan pool entries:\n+        int nErased = 0;\n+        int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n+        map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+        while (iter != mapOrphanTransactions.end())\n+        {\n+            map<uint256, COrphanTx>::iterator maybeErase = iter++;\n+            if (maybeErase->second.nTimeExpire <= nNow) {\n+                nErased += EraseOrphanTx(maybeErase->second.tx.GetHash());\n+            } else {\n+                nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n+            }\n+        }\n+        // Sweep again 5 minutes after the next entry that expires in order to batch the linear scan.\n+        nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n+        if (nErased > 0) LogPrint(\"mempool\", \"Erased %d orphan tx due to expiration\\n\", nErased);\n+    }\n     while (mapOrphanTransactions.size() > nMaxOrphans)\n     {\n         // Evict a random orphan:"
      },
      {
        "sha": "191aafe0435469f45c5c834cdee73d91e0030f32",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11cc143895e730002749f0881c4c95635fa54bd5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11cc143895e730002749f0881c4c95635fa54bd5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=11cc143895e730002749f0881c4c95635fa54bd5",
        "patch": "@@ -56,6 +56,10 @@ static const CAmount HIGH_TX_FEE_PER_KB = 0.01 * COIN;\n static const CAmount HIGH_MAX_TX_FEE = 100 * HIGH_TX_FEE_PER_KB;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n+/** Expiration time for orphan transactions in seconds */\n+static const int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static const int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n /** Default for -limitancestorcount, max number of in-mempool ancestors */\n static const unsigned int DEFAULT_ANCESTOR_LIMIT = 25;\n /** Default for -limitancestorsize, maximum kilobytes of tx + all in-mempool ancestors */"
      }
    ]
  },
  {
    "sha": "8c99d1b525562ab3b733e9d7ef770882646bad5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Yzk5ZDFiNTI1NTYyYWIzYjczM2U5ZDdlZjc3MDg4MjY0NmJhZDVj",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-13T17:27:44Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-15T09:56:37Z"
      },
      "message": "Treat orphans as implicit inv for parents, discard when parents rejected.\n\nAn orphan whos parents were rejected is never going to connect, so there\n is little utility in keeping it.\n\nOrphans also helpfully tell us what we're missing, so go ahead and treat\n it as INVed.",
      "tree": {
        "sha": "60c73cd07b468cea795a0ab41f68c42bdf918dc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60c73cd07b468cea795a0ab41f68c42bdf918dc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c99d1b525562ab3b733e9d7ef770882646bad5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c99d1b525562ab3b733e9d7ef770882646bad5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c99d1b525562ab3b733e9d7ef770882646bad5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c99d1b525562ab3b733e9d7ef770882646bad5c/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11cc143895e730002749f0881c4c95635fa54bd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11cc143895e730002749f0881c4c95635fa54bd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11cc143895e730002749f0881c4c95635fa54bd5"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 22,
      "deletions": 6
    },
    "files": [
      {
        "sha": "6a2290bc05e2478f0cee7aa20eff518a7ecd967c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 6,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c99d1b525562ab3b733e9d7ef770882646bad5c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c99d1b525562ab3b733e9d7ef770882646bad5c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8c99d1b525562ab3b733e9d7ef770882646bad5c",
        "patch": "@@ -5156,13 +5156,29 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n         else if (fMissingInputs)\n         {\n-            AddOrphanTx(tx, pfrom->GetId());\n+            bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                if (recentRejects->contains(txin.prevout.hash)) {\n+                    fRejectedParents = true;\n+                    break;\n+                }\n+            }\n+            if (!fRejectedParents) {\n+                BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                    CInv inv(MSG_TX, txin.prevout.hash);\n+                    pfrom->AddInventoryKnown(inv);\n+                    if (!AlreadyHave(inv)) pfrom->AskFor(inv);\n+                }\n+                AddOrphanTx(tx, pfrom->GetId());\n \n-            // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n-            unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n-            unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n-            if (nEvicted > 0)\n-                LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n+                // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n+                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+                unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n+                if (nEvicted > 0)\n+                    LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n+            } else {\n+                LogPrint(\"mempool\", \"not keeping orphan with rejected parents %s\\n\",tx.GetHash().ToString());\n+            }\n         } else {\n             assert(recentRejects);\n             recentRejects->insert(tx.GetHash());"
      }
    ]
  },
  {
    "sha": "54326a6808a7026eef9d3a26f91f93b77f00a793",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDMyNmE2ODA4YTcwMjZlZWY5ZDNhMjZmOTFmOTNiNzdmMDBhNzkz",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-11T00:28:48Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-06-15T09:56:42Z"
      },
      "message": "Increase maximum orphan size to 100,000 bytes.\n\nAlthough this increases node memory usage in the worst case by perhaps\n 30MB, the current behavior causes severe issues with dependent tx relay.",
      "tree": {
        "sha": "8fad0f70057833c64c1120546ae407b244dec79e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fad0f70057833c64c1120546ae407b244dec79e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54326a6808a7026eef9d3a26f91f93b77f00a793",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54326a6808a7026eef9d3a26f91f93b77f00a793",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54326a6808a7026eef9d3a26f91f93b77f00a793",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54326a6808a7026eef9d3a26f91f93b77f00a793/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c99d1b525562ab3b733e9d7ef770882646bad5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c99d1b525562ab3b733e9d7ef770882646bad5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c99d1b525562ab3b733e9d7ef770882646bad5c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d4ab32744f022e2202656d0ca73c44ad0c5de43c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54326a6808a7026eef9d3a26f91f93b77f00a793/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54326a6808a7026eef9d3a26f91f93b77f00a793/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=54326a6808a7026eef9d3a26f91f93b77f00a793",
        "patch": "@@ -633,10 +633,10 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n     // large transaction with a missing parent then we assume\n     // it will rebroadcast it later, after the parent transaction(s)\n     // have been mined or received.\n-    // 10,000 orphans, each of which is at most 5,000 bytes big is\n-    // at most 500 megabytes of orphans:\n+    // 100 orphans, each of which is at most 99,999 bytes big is\n+    // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n     unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz > 5000)\n+    if (sz >= MAX_STANDARD_TX_SIZE)\n     {\n         LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n         return false;"
      },
      {
        "sha": "818128d186c112c1e34512e40f54f60a4df40f66",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54326a6808a7026eef9d3a26f91f93b77f00a793/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54326a6808a7026eef9d3a26f91f93b77f00a793/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=54326a6808a7026eef9d3a26f91f93b77f00a793",
        "patch": "@@ -162,7 +162,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n-        tx.vin.resize(500);\n+        tx.vin.resize(2777);\n         for (unsigned int j = 0; j < tx.vin.size(); j++)\n         {\n             tx.vin[j].prevout.n = j;"
      }
    ]
  }
]