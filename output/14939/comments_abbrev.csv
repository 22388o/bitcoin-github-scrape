MarcoFalke,2018-12-12T17:42:12Z,Fixes #14859?,https://github.com/bitcoin/bitcoin/pull/14939#issuecomment-446677040,446677040,
lontivero,2018-12-12T17:44:08Z,"Yes, it fixes #14859.",https://github.com/bitcoin/bitcoin/pull/14939#issuecomment-446677657,446677657,
DrahtBot,2018-12-12T21:29:25Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14987](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14987.html) (RPCHelpMan: Pass through Result and Example",https://github.com/bitcoin/bitcoin/pull/14939#issuecomment-446750977,446750977,
gmaxwell,2018-12-13T06:29:20Z,Hm but many important standardness rules and consensus rules are part of script validation.  As a result this will not achieve the stated goal of telling you if the transaction would be accepted but for being signed.,https://github.com/bitcoin/bitcoin/pull/14939#issuecomment-446857278,446857278,
nopara73,2018-12-13T15:48:22Z,"It would partly achieve it, the rest could be handled from code. For example unspentness, descendant and ascendant count limits would be checked properly. Descendant and ascendant size limits can be, too by smartly constructing the ""fake transaction"" described here: https://github.com/bitcoin/bitcoin/issues/14859#issue-386659270  \n\nI agree however that it can be considered misleading if too ma",https://github.com/bitcoin/bitcoin/pull/14939#issuecomment-447016836,447016836,
sdaftuar,2018-12-13T17:57:17Z,"I think the way this is implemented would be confusing to future maintainers of this code -- for example, if more policy checks were to be added in the future that take place inside script validation, it would be hard for us to determine whether it breaks the use case that this code change is trying to make.",https://github.com/bitcoin/bitcoin/pull/14939#issuecomment-447061891,447061891,
gmaxwell,2018-12-13T18:10:58Z,"Dummying out checksigs (and maybe equalverify) might be a better way to go.  With the exception of some fee limit stuff, you should generally expect almost all standardness checks to be signature validation flags.",https://github.com/bitcoin/bitcoin/pull/14939#issuecomment-447066133,447066133,
lontivero,2018-12-16T20:39:04Z,"@gmaxwell, I am not sure to understand what you mean by dummying out checksigs and equalverify ops. Do you mean we could create a new `DummyTransactionSignatureChecker` class or something like that?",https://github.com/bitcoin/bitcoin/pull/14939#issuecomment-447673939,447673939,
MarcoFalke,2018-12-12T17:40:43Z,This already has way too many positional arguments. I'd prefer to make `test_accept` a `enum class` to avoid passing in single bits that are only supposed to be set exclusively?,https://github.com/bitcoin/bitcoin/pull/14939#discussion_r241115395,241115395,src/validation.h
lontivero,2018-12-13T04:45:39Z,I've replaced the `test_accept` by an `enum class` called `MemPoolValidationScope`. Is this better? Any suggestion is very welcome.,https://github.com/bitcoin/bitcoin/pull/14939#discussion_r241270706,241270706,src/validation.h
