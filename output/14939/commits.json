[
  {
    "sha": "22d9e65200119713531c7ef4f76aeed3fa01eb4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmQ5ZTY1MjAwMTE5NzEzNTMxYzdlZjRmNzZhZWVkM2ZhMDFlYjRk",
    "commit": {
      "author": {
        "name": "Lucas Ontivero",
        "email": "lucasontivero@gmail.com",
        "date": "2018-12-11T21:16:30Z"
      },
      "committer": {
        "name": "Lucas Ontivero",
        "email": "lucasontivero@gmail.com",
        "date": "2018-12-18T03:31:49Z"
      },
      "message": "Add test_accept_unsigned flag to testmempoolaccept RPC method",
      "tree": {
        "sha": "0b8b5cacb00e75496bafdf1b6b50019c0ff2f84e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b8b5cacb00e75496bafdf1b6b50019c0ff2f84e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22d9e65200119713531c7ef4f76aeed3fa01eb4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22d9e65200119713531c7ef4f76aeed3fa01eb4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22d9e65200119713531c7ef4f76aeed3fa01eb4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22d9e65200119713531c7ef4f76aeed3fa01eb4d/comments",
    "author": {
      "login": "lontivero",
      "id": 127973,
      "node_id": "MDQ6VXNlcjEyNzk3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127973?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lontivero",
      "html_url": "https://github.com/lontivero",
      "followers_url": "https://api.github.com/users/lontivero/followers",
      "following_url": "https://api.github.com/users/lontivero/following{/other_user}",
      "gists_url": "https://api.github.com/users/lontivero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lontivero/subscriptions",
      "organizations_url": "https://api.github.com/users/lontivero/orgs",
      "repos_url": "https://api.github.com/users/lontivero/repos",
      "events_url": "https://api.github.com/users/lontivero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lontivero/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lontivero",
      "id": 127973,
      "node_id": "MDQ6VXNlcjEyNzk3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127973?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lontivero",
      "html_url": "https://github.com/lontivero",
      "followers_url": "https://api.github.com/users/lontivero/followers",
      "following_url": "https://api.github.com/users/lontivero/following{/other_user}",
      "gists_url": "https://api.github.com/users/lontivero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lontivero/subscriptions",
      "organizations_url": "https://api.github.com/users/lontivero/orgs",
      "repos_url": "https://api.github.com/users/lontivero/repos",
      "events_url": "https://api.github.com/users/lontivero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lontivero/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27f5a295d7409c1811f74339d509ea7a348a2220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27f5a295d7409c1811f74339d509ea7a348a2220",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27f5a295d7409c1811f74339d509ea7a348a2220"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 45,
      "deletions": 11
    },
    "files": [
      {
        "sha": "f240ac23335d5139a667d7558fe826e36b19a2c4",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22d9e65200119713531c7ef4f76aeed3fa01eb4d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22d9e65200119713531c7ef4f76aeed3fa01eb4d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=22d9e65200119713531c7ef4f76aeed3fa01eb4d",
        "patch": "@@ -97,6 +97,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },\n     { \"testmempoolaccept\", 0, \"rawtxs\" },\n     { \"testmempoolaccept\", 1, \"allowhighfees\" },\n+    { \"testmempoolaccept\", 2, \"allowunsignedtxs\" },\n     { \"combinerawtransaction\", 0, \"txs\" },\n     { \"fundrawtransaction\", 1, \"options\" },\n     { \"fundrawtransaction\", 2, \"iswitness\" },"
      },
      {
        "sha": "b58dbaf3cb2ae35a2cea1b2cc6ca5a375af07225",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22d9e65200119713531c7ef4f76aeed3fa01eb4d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22d9e65200119713531c7ef4f76aeed3fa01eb4d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=22d9e65200119713531c7ef4f76aeed3fa01eb4d",
        "patch": "@@ -1104,7 +1104,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n \n static UniValue testmempoolaccept(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3) {\n         throw std::runtime_error(\n             RPCHelpMan{\"testmempoolaccept\",\n                 \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n@@ -1118,6 +1118,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                         },\n                         },\n                     {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n+                    {\"allowunsignedtxs\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow test unsigned transactions\"},\n                 }}\n                 .ToString() +\n             \"\\nResult:\\n\"\n@@ -1141,7 +1142,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             );\n     }\n \n-    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VBOOL});\n+    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VBOOL, UniValue::VBOOL});\n     if (request.params[0].get_array().size() != 1) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n     }\n@@ -1162,13 +1163,18 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     UniValue result_0(UniValue::VOBJ);\n     result_0.pushKV(\"txid\", tx_hash.GetHex());\n \n+    bool test_accept_unsigned = false;\n+    if (!request.params[2].isNull() && request.params[2].get_bool()) {\n+        test_accept_unsigned = true;\n+    }\n+\n     CValidationState state;\n     bool missing_inputs;\n     bool test_accept_res;\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx), &missing_inputs,\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true, test_accept_unsigned);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);\n     if (!test_accept_res) {\n@@ -1751,7 +1757,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n     { \"hidden\",             \"signrawtransaction\",           &signrawtransaction,        {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} },\n     { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },\n-    { \"rawtransactions\",    \"testmempoolaccept\",            &testmempoolaccept,         {\"rawtxs\",\"allowhighfees\"} },\n+    { \"rawtransactions\",    \"testmempoolaccept\",            &testmempoolaccept,         {\"rawtxs\",\"allowhighfees\",\"allowunsignedtxs\"} },\n     { \"rawtransactions\",    \"decodepsbt\",                   &decodepsbt,                {\"psbt\"} },\n     { \"rawtransactions\",    \"combinepsbt\",                  &combinepsbt,               {\"txs\"} },\n     { \"rawtransactions\",    \"finalizepsbt\",                 &finalizepsbt,              {\"psbt\", \"extract\"} },"
      },
      {
        "sha": "a20c591775f14abb12e5dae41ad8329a9d0f35d5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22d9e65200119713531c7ef4f76aeed3fa01eb4d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22d9e65200119713531c7ef4f76aeed3fa01eb4d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=22d9e65200119713531c7ef4f76aeed3fa01eb4d",
        "patch": "@@ -559,7 +559,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n \n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept, bool test_accept_unsigned) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -885,6 +885,11 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             }\n         }\n \n+        if (test_accept_unsigned) {\n+            // Unsigned Tx could be accepted. It is not added\n+            return true;\n+        }\n+\n         constexpr unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n \n         // Check against previous transactions\n@@ -968,10 +973,10 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, bool test_accept_unsigned) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept);\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept, test_accept_unsigned);\n     if (!res) {\n         for (const COutPoint& hashTx : coins_to_uncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -984,10 +989,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, bool test_accept_unsigned)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept, test_accept_unsigned);\n }\n \n /**\n@@ -4723,7 +4728,7 @@ bool LoadMempool()\n                 LOCK(cs_main);\n                 AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr /* pfMissingInputs */, nTime,\n                                            nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n-                                           false /* test_accept */);\n+                                           false /* test_accept */, false /* test_accept_unsigned */);\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "b9ebcbfe9668da5572430228c9ffc97668ff6b0b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22d9e65200119713531c7ef4f76aeed3fa01eb4d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22d9e65200119713531c7ef4f76aeed3fa01eb4d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=22d9e65200119713531c7ef4f76aeed3fa01eb4d",
        "patch": "@@ -306,7 +306,7 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false, bool test_accept_unsigned=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);"
      },
      {
        "sha": "e2c1ffdf820af527859e80d0bf879862c2196da9",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22d9e65200119713531c7ef4f76aeed3fa01eb4d/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22d9e65200119713531c7ef4f76aeed3fa01eb4d/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=22d9e65200119713531c7ef4f76aeed3fa01eb4d",
        "patch": "@@ -65,6 +65,8 @@ def run_test(self):\n         assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))\n         assert_raises_rpc_error(-22, 'TX decode failed', lambda: node.testmempoolaccept(rawtxs=['ff00baar']))\n \n+        coins = node.listunspent()\n+\n         self.log.info('A transaction already in the blockchain')\n         coin = coins.pop()  # Pick a random coin(base) to spend\n         raw_tx_in_block = node.signrawtransactionwithwallet(node.createrawtransaction(\n@@ -79,6 +81,26 @@ def run_test(self):\n             rawtxs=[raw_tx_in_block],\n         )\n \n+        self.log.info('An unsigned transaction')\n+        coin = coins.pop()  # Pick a random coin(base) to spend\n+        raw_unsigned_tx = node.createrawtransaction(\n+            inputs=[{'txid': coin['txid'], 'vout': coin['vout']}],\n+            outputs=[{node.getnewaddress(): 0.99}, {node.getnewaddress(): 49}],\n+        )\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_unsigned_tx)))\n+        raw_unsigned_txid = tx.rehash()\n+        self.check_mempool_result(\n+            result_expected=[{'txid': raw_unsigned_txid, 'allowed': False, 'reject-reason': '16: mandatory-script-verify-flag-failed (Operation not valid with the current stack size)'}],\n+            rawtxs=[raw_unsigned_tx],\n+        )\n+        self.check_mempool_result(\n+            result_expected=[{'txid': raw_unsigned_txid, 'allowed': True}],\n+            rawtxs=[raw_unsigned_tx],\n+            allowunsignedtxs=True,\n+            allowhighfees=False\n+        )\n+\n         self.log.info('A transaction not in the mempool')\n         fee = 0.00000700\n         raw_tx_0 = node.signrawtransactionwithwallet(node.createrawtransaction("
      }
    ]
  },
  {
    "sha": "fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWQ4ZWYzY2JlNWQ0OTVjN2MzODZjMWI1ZmFmNmUyNDUzZTMyNDZl",
    "commit": {
      "author": {
        "name": "Lucas Ontivero",
        "email": "lucasontivero@gmail.com",
        "date": "2018-12-13T04:32:26Z"
      },
      "committer": {
        "name": "Lucas Ontivero",
        "email": "lucasontivero@gmail.com",
        "date": "2018-12-18T03:31:49Z"
      },
      "message": "Replace test_accept boolean parameters by enum",
      "tree": {
        "sha": "f7d7c109f04bb8ead42a1dd25f9cb2d1040f0eb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7d7c109f04bb8ead42a1dd25f9cb2d1040f0eb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e/comments",
    "author": {
      "login": "lontivero",
      "id": 127973,
      "node_id": "MDQ6VXNlcjEyNzk3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127973?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lontivero",
      "html_url": "https://github.com/lontivero",
      "followers_url": "https://api.github.com/users/lontivero/followers",
      "following_url": "https://api.github.com/users/lontivero/following{/other_user}",
      "gists_url": "https://api.github.com/users/lontivero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lontivero/subscriptions",
      "organizations_url": "https://api.github.com/users/lontivero/orgs",
      "repos_url": "https://api.github.com/users/lontivero/repos",
      "events_url": "https://api.github.com/users/lontivero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lontivero/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lontivero",
      "id": 127973,
      "node_id": "MDQ6VXNlcjEyNzk3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127973?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lontivero",
      "html_url": "https://github.com/lontivero",
      "followers_url": "https://api.github.com/users/lontivero/followers",
      "following_url": "https://api.github.com/users/lontivero/following{/other_user}",
      "gists_url": "https://api.github.com/users/lontivero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lontivero/subscriptions",
      "organizations_url": "https://api.github.com/users/lontivero/orgs",
      "repos_url": "https://api.github.com/users/lontivero/repos",
      "events_url": "https://api.github.com/users/lontivero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lontivero/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22d9e65200119713531c7ef4f76aeed3fa01eb4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22d9e65200119713531c7ef4f76aeed3fa01eb4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22d9e65200119713531c7ef4f76aeed3fa01eb4d"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 21,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b5febcca7c07ca39def644872368e85be4fd1d93",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e",
        "patch": "@@ -1163,9 +1163,9 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     UniValue result_0(UniValue::VOBJ);\n     result_0.pushKV(\"txid\", tx_hash.GetHex());\n \n-    bool test_accept_unsigned = false;\n+    MemPoolValidationScope validation_scope = MemPoolValidationScope::TEST_ACCEPT;\n     if (!request.params[2].isNull() && request.params[2].get_bool()) {\n-        test_accept_unsigned = true;\n+        validation_scope = MemPoolValidationScope::TEST_ACCEPT_UNSIGNED;\n     }\n \n     CValidationState state;\n@@ -1174,7 +1174,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx), &missing_inputs,\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true, test_accept_unsigned);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, validation_scope);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);\n     if (!test_accept_res) {"
      },
      {
        "sha": "38725b437f0ec2a1d1bdde97b27494a84ebe2667",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e",
        "patch": "@@ -559,7 +559,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n \n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept, bool test_accept_unsigned) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, MemPoolValidationScope validation_scope) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -885,7 +885,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             }\n         }\n \n-        if (test_accept_unsigned) {\n+        if (validation_scope == MemPoolValidationScope::TEST_ACCEPT_UNSIGNED) {\n             // Unsigned Tx could be accepted. It is not added\n             return true;\n         }\n@@ -929,7 +929,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                     __func__, hash.ToString(), FormatStateMessage(state));\n         }\n \n-        if (test_accept) {\n+        if (validation_scope == MemPoolValidationScope::TEST_ACCEPT) {\n             // Tx was accepted, but not added\n             return true;\n         }\n@@ -973,10 +973,10 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, bool test_accept_unsigned) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                        bool bypass_limits, const CAmount nAbsurdFee, MemPoolValidationScope validation_scope) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept, test_accept_unsigned);\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, validation_scope);\n     if (!res) {\n         for (const COutPoint& hashTx : coins_to_uncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -989,10 +989,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, bool test_accept_unsigned)\n+                        bool bypass_limits, const CAmount nAbsurdFee, MemPoolValidationScope validation_scope)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept, test_accept_unsigned);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, validation_scope);\n }\n \n /**\n@@ -4728,7 +4728,7 @@ bool LoadMempool()\n                 LOCK(cs_main);\n                 AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr /* pfMissingInputs */, nTime,\n                                            nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n-                                           false /* test_accept */, false /* test_accept_unsigned */);\n+                                           MemPoolValidationScope::ACCEPT);\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "2866c2504c14bf6c9503fd7be6688db3ab4f717c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fed8ef3cbe5d495c7c386c1b5faf6e2453e3246e",
        "patch": "@@ -302,11 +302,20 @@ void PruneAndFlush();\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n+/** To what extend a transaction has to be validated\n+ * by AcceptToMemoryPool.\n+ */\n+enum class MemPoolValidationScope {\n+    ACCEPT,                 //!< Validate signed transaction and add to the pool\n+    TEST_ACCEPT,            //!< Validate signed transaction but DO NOT add to the pool\n+    TEST_ACCEPT_UNSIGNED    //!< Validate unsigned transaction (except scripts)\n+};\n+\n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false, bool test_accept_unsigned=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+                        bool bypass_limits, const CAmount nAbsurdFee, MemPoolValidationScope validation_scope=MemPoolValidationScope::ACCEPT) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);"
      }
    ]
  }
]