[
  {
    "sha": "520cc05b89aae5fed155482d5fa66b4290487d55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjBjYzA1Yjg5YWFlNWZlZDE1NTQ4MmQ1ZmE2NmI0MjkwNDg3ZDU1",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-10-02T15:15:51Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-10-02T15:15:51Z"
      },
      "message": "init.cpp: cosmetic indent changes, preparing for no-wallet mode",
      "tree": {
        "sha": "518ac6107fd9b5cb909ffe8ddf9d63b1e2d45f4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/518ac6107fd9b5cb909ffe8ddf9d63b1e2d45f4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/520cc05b89aae5fed155482d5fa66b4290487d55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/520cc05b89aae5fed155482d5fa66b4290487d55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/520cc05b89aae5fed155482d5fa66b4290487d55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/520cc05b89aae5fed155482d5fa66b4290487d55/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "28f6b8dbad27f0dac72daca6f1bfe41d7e701908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28f6b8dbad27f0dac72daca6f1bfe41d7e701908",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28f6b8dbad27f0dac72daca6f1bfe41d7e701908"
      }
    ],
    "stats": {
      "total": 222,
      "additions": 113,
      "deletions": 109
    },
    "files": [
      {
        "sha": "cadad2b1b42f0660b0a9ab691af957ef301469d7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 113,
        "deletions": 109,
        "changes": 222,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/520cc05b89aae5fed155482d5fa66b4290487d55/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/520cc05b89aae5fed155482d5fa66b4290487d55/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=520cc05b89aae5fed155482d5fa66b4290487d55",
        "patch": "@@ -548,49 +548,51 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 5: verify wallet database integrity\n \n-    uiInterface.InitMessage(_(\"Verifying wallet...\"));\n+    if (1) {\n+        uiInterface.InitMessage(_(\"Verifying wallet...\"));\n \n-    if (!bitdb.Open(GetDataDir()))\n-    {\n-        // try moving the database env out of the way\n-        boost::filesystem::path pathDatabase = GetDataDir() / \"database\";\n-        boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf(\"database.%\"PRI64d\".bak\", GetTime());\n-        try {\n-            boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n-            LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string().c_str(), pathDatabaseBak.string().c_str());\n-        } catch(boost::filesystem::filesystem_error &error) {\n-             // failure is ok (well, not really, but it's not worse than what we started with)\n-        }\n+        if (!bitdb.Open(GetDataDir()))\n+        {\n+            // try moving the database env out of the way\n+            boost::filesystem::path pathDatabase = GetDataDir() / \"database\";\n+            boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf(\"database.%\"PRI64d\".bak\", GetTime());\n+            try {\n+                boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n+                LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string().c_str(), pathDatabaseBak.string().c_str());\n+            } catch(boost::filesystem::filesystem_error &error) {\n+                 // failure is ok (well, not really, but it's not worse than what we started with)\n+            }\n \n-        // try again\n-        if (!bitdb.Open(GetDataDir())) {\n-            // if it still fails, it probably means we can't even create the database env\n-            string msg = strprintf(_(\"Error initializing wallet database environment %s!\"), strDataDir.c_str());\n-            return InitError(msg);\n+            // try again\n+            if (!bitdb.Open(GetDataDir())) {\n+                // if it still fails, it probably means we can't even create the database env\n+                string msg = strprintf(_(\"Error initializing wallet database environment %s!\"), strDataDir.c_str());\n+                return InitError(msg);\n+            }\n         }\n-    }\n \n-    if (GetBoolArg(\"-salvagewallet\", false))\n-    {\n-        // Recover readable keypairs:\n-        if (!CWalletDB::Recover(bitdb, strWalletFile, true))\n-            return false;\n-    }\n+        if (GetBoolArg(\"-salvagewallet\", false))\n+        {\n+            // Recover readable keypairs:\n+            if (!CWalletDB::Recover(bitdb, strWalletFile, true))\n+                return false;\n+        }\n \n-    if (filesystem::exists(GetDataDir() / strWalletFile))\n-    {\n-        CDBEnv::VerifyResult r = bitdb.Verify(strWalletFile, CWalletDB::Recover);\n-        if (r == CDBEnv::RECOVER_OK)\n+        if (filesystem::exists(GetDataDir() / strWalletFile))\n         {\n-            string msg = strprintf(_(\"Warning: wallet.dat corrupt, data salvaged!\"\n-                                     \" Original wallet.dat saved as wallet.{timestamp}.bak in %s; if\"\n-                                     \" your balance or transactions are incorrect you should\"\n-                                     \" restore from a backup.\"), strDataDir.c_str());\n-            InitWarning(msg);\n+            CDBEnv::VerifyResult r = bitdb.Verify(strWalletFile, CWalletDB::Recover);\n+            if (r == CDBEnv::RECOVER_OK)\n+            {\n+                string msg = strprintf(_(\"Warning: wallet.dat corrupt, data salvaged!\"\n+                                         \" Original wallet.dat saved as wallet.{timestamp}.bak in %s; if\"\n+                                         \" your balance or transactions are incorrect you should\"\n+                                         \" restore from a backup.\"), strDataDir.c_str());\n+                InitWarning(msg);\n+            }\n+            if (r == CDBEnv::RECOVER_FAIL)\n+                return InitError(_(\"wallet.dat corrupt, salvage failed\"));\n         }\n-        if (r == CDBEnv::RECOVER_FAIL)\n-            return InitError(_(\"wallet.dat corrupt, salvage failed\"));\n-    }\n+    } // (1)\n \n     // ********************************************************* Step 6: network initialization\n \n@@ -854,92 +856,94 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 8: load wallet\n \n-    uiInterface.InitMessage(_(\"Loading wallet...\"));\n+    if (1) {\n+        uiInterface.InitMessage(_(\"Loading wallet...\"));\n \n-    nStart = GetTimeMillis();\n-    bool fFirstRun = true;\n-    pwalletMain = new CWallet(strWalletFile);\n-    DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-    if (nLoadWalletRet != DB_LOAD_OK)\n-    {\n-        if (nLoadWalletRet == DB_CORRUPT)\n-            strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+        nStart = GetTimeMillis();\n+        bool fFirstRun = true;\n+        pwalletMain = new CWallet(strWalletFile);\n+        DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n+        if (nLoadWalletRet != DB_LOAD_OK)\n         {\n-            string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n-                         \" or address book entries might be missing or incorrect.\"));\n-            InitWarning(msg);\n+            if (nLoadWalletRet == DB_CORRUPT)\n+                strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n+            else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+            {\n+                string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n+                             \" or address book entries might be missing or incorrect.\"));\n+                InitWarning(msg);\n+            }\n+            else if (nLoadWalletRet == DB_TOO_NEW)\n+                strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin\") << \"\\n\";\n+            else if (nLoadWalletRet == DB_NEED_REWRITE)\n+            {\n+                strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n+                LogPrintf(\"%s\", strErrors.str().c_str());\n+                return InitError(strErrors.str());\n+            }\n+            else\n+                strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n         }\n-        else if (nLoadWalletRet == DB_TOO_NEW)\n-            strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NEED_REWRITE)\n+\n+        if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n         {\n-            strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n-            LogPrintf(\"%s\", strErrors.str().c_str());\n-            return InitError(strErrors.str());\n+            int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+            if (nMaxVersion == 0) // the -upgradewallet without argument case\n+            {\n+                LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+                nMaxVersion = CLIENT_VERSION;\n+                pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+            }\n+            else\n+                LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+            if (nMaxVersion < pwalletMain->GetVersion())\n+                strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n+            pwalletMain->SetMaxVersion(nMaxVersion);\n         }\n-        else\n-            strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-    }\n \n-    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-    {\n-        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-        if (nMaxVersion == 0) // the -upgradewallet without argument case\n+        if (fFirstRun)\n         {\n-            LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-            nMaxVersion = CLIENT_VERSION;\n-            pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-        }\n-        else\n-            LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-        if (nMaxVersion < pwalletMain->GetVersion())\n-            strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-        pwalletMain->SetMaxVersion(nMaxVersion);\n-    }\n+            // Create new keyUser and set as default key\n+            RandAddSeedPerfmon();\n+\n+            CPubKey newDefaultKey;\n+            if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n+                pwalletMain->SetDefaultKey(newDefaultKey);\n+                if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n+                    strErrors << _(\"Cannot write default address\") << \"\\n\";\n+            }\n \n-    if (fFirstRun)\n-    {\n-        // Create new keyUser and set as default key\n-        RandAddSeedPerfmon();\n-\n-        CPubKey newDefaultKey;\n-        if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n-            pwalletMain->SetDefaultKey(newDefaultKey);\n-            if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n-                strErrors << _(\"Cannot write default address\") << \"\\n\";\n+            pwalletMain->SetBestChain(CBlockLocator(pindexBest));\n         }\n \n-        pwalletMain->SetBestChain(CBlockLocator(pindexBest));\n-    }\n-\n-    LogPrintf(\"%s\", strErrors.str().c_str());\n-    LogPrintf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+        LogPrintf(\"%s\", strErrors.str().c_str());\n+        LogPrintf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n-    RegisterWallet(pwalletMain);\n+        RegisterWallet(pwalletMain);\n \n-    CBlockIndex *pindexRescan = pindexBest;\n-    if (GetBoolArg(\"-rescan\", false))\n-        pindexRescan = pindexGenesisBlock;\n-    else\n-    {\n-        CWalletDB walletdb(strWalletFile);\n-        CBlockLocator locator;\n-        if (walletdb.ReadBestBlock(locator))\n-            pindexRescan = locator.GetBlockIndex();\n-        else\n+        CBlockIndex *pindexRescan = pindexBest;\n+        if (GetBoolArg(\"-rescan\", false))\n             pindexRescan = pindexGenesisBlock;\n-    }\n-    if (pindexBest && pindexBest != pindexRescan)\n-    {\n-        uiInterface.InitMessage(_(\"Rescanning...\"));\n-        LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n-        nStart = GetTimeMillis();\n-        pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-        LogPrintf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-        pwalletMain->SetBestChain(CBlockLocator(pindexBest));\n-        nWalletDBUpdated++;\n-    }\n+        else\n+        {\n+            CWalletDB walletdb(strWalletFile);\n+            CBlockLocator locator;\n+            if (walletdb.ReadBestBlock(locator))\n+                pindexRescan = locator.GetBlockIndex();\n+            else\n+                pindexRescan = pindexGenesisBlock;\n+        }\n+        if (pindexBest && pindexBest != pindexRescan)\n+        {\n+            uiInterface.InitMessage(_(\"Rescanning...\"));\n+            LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n+            nStart = GetTimeMillis();\n+            pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n+            LogPrintf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+            pwalletMain->SetBestChain(CBlockLocator(pindexBest));\n+            nWalletDBUpdated++;\n+        }\n+    } // (1)\n \n     // ********************************************************* Step 9: import blocks\n "
      }
    ]
  },
  {
    "sha": "5d4f3a1f0cbdf52257b41ea09d175c0018ad9434",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDRmM2ExZjBjYmRmNTIyNTdiNDFlYTA5ZDE3NWMwMDE4YWQ5NDM0",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-10-02T15:19:10Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-10-02T15:19:10Z"
      },
      "message": "Add -disablewallet option, to disable wallet support (and BDB)",
      "tree": {
        "sha": "06ff57d8e3cab19d1b613d7156d39a7aa16f13bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06ff57d8e3cab19d1b613d7156d39a7aa16f13bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d4f3a1f0cbdf52257b41ea09d175c0018ad9434",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d4f3a1f0cbdf52257b41ea09d175c0018ad9434",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d4f3a1f0cbdf52257b41ea09d175c0018ad9434",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d4f3a1f0cbdf52257b41ea09d175c0018ad9434/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "520cc05b89aae5fed155482d5fa66b4290487d55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/520cc05b89aae5fed155482d5fa66b4290487d55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/520cc05b89aae5fed155482d5fa66b4290487d55"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "820348999b82f70edc913dd8887d373ea9919fac",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d4f3a1f0cbdf52257b41ea09d175c0018ad9434/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d4f3a1f0cbdf52257b41ea09d175c0018ad9434/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5d4f3a1f0cbdf52257b41ea09d175c0018ad9434",
        "patch": "@@ -460,6 +460,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\", false);\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", false);\n+    bool fDisableWallet = GetBoolArg(\"-disablewallet\", false);\n \n     if (mapArgs.count(\"-timeout\"))\n     {\n@@ -548,7 +549,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 5: verify wallet database integrity\n \n-    if (1) {\n+    if (!fDisableWallet) {\n         uiInterface.InitMessage(_(\"Verifying wallet...\"));\n \n         if (!bitdb.Open(GetDataDir()))\n@@ -592,7 +593,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             if (r == CDBEnv::RECOVER_FAIL)\n                 return InitError(_(\"wallet.dat corrupt, salvage failed\"));\n         }\n-    } // (1)\n+    } // (!fDisableWallet)\n \n     // ********************************************************* Step 6: network initialization\n \n@@ -856,7 +857,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 8: load wallet\n \n-    if (1) {\n+    if (fDisableWallet) {\n+        uiInterface.InitMessage(_(\"Wallet disabled...\"));\n+        pwalletMain = NULL;\n+    } else {\n         uiInterface.InitMessage(_(\"Loading wallet...\"));\n \n         nStart = GetTimeMillis();\n@@ -943,7 +947,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             pwalletMain->SetBestChain(CBlockLocator(pindexBest));\n             nWalletDBUpdated++;\n         }\n-    } // (1)\n+    } // (!fDisableWallet)\n \n     // ********************************************************* Step 9: import blocks\n "
      }
    ]
  }
]