[
  {
    "sha": "209377a7cb5a9ea5d724faf94846ee5bacd289e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDkzNzdhN2NiNWE5ZWE1ZDcyNGZhZjk0ODQ2ZWU1YmFjZDI4OWU3",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-28T21:36:06Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-07-07T08:20:28Z"
      },
      "message": "Use GetBlockTime() more",
      "tree": {
        "sha": "41a311498d0758dfb108bc5d03037e5b08bb654f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41a311498d0758dfb108bc5d03037e5b08bb654f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/209377a7cb5a9ea5d724faf94846ee5bacd289e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/209377a7cb5a9ea5d724faf94846ee5bacd289e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/209377a7cb5a9ea5d724faf94846ee5bacd289e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/209377a7cb5a9ea5d724faf94846ee5bacd289e7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6654a87e7b2bd5d1d4a5c0af70d0468dfde300a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6654a87e7b2bd5d1d4a5c0af70d0468dfde300a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6654a87e7b2bd5d1d4a5c0af70d0468dfde300a9"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "4cab11db3d4bff62db8dd466f27e01f3d638a622",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=209377a7cb5a9ea5d724faf94846ee5bacd289e7",
        "patch": "@@ -127,7 +127,7 @@ namespace Checkpoints {\n         } else {\n             double nCheapBefore = data.nTransactionsLastCheckpoint;\n             double nExpensiveBefore = pindex->nChainTx - data.nTransactionsLastCheckpoint;\n-            double nExpensiveAfter = (nNow - pindex->nTime)/86400.0*data.fTransactionsPerDay;\n+            double nExpensiveAfter = (nNow - pindex->GetBlockTime())/86400.0*data.fTransactionsPerDay;\n             fWorkBefore = nCheapBefore + nExpensiveBefore*fSigcheckVerificationFactor;\n             fWorkAfter = nExpensiveAfter*fSigcheckVerificationFactor;\n         }"
      },
      {
        "sha": "4bc6e8e38d85ece155ffd64b583da34b7c78afb1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=209377a7cb5a9ea5d724faf94846ee5bacd289e7",
        "patch": "@@ -1788,7 +1788,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n \n     // BIP16 didn't become active until Apr 1 2012\n     int64_t nBIP16SwitchTime = 1333238400;\n-    bool fStrictPayToScriptHash = (pindex->nTime >= nBIP16SwitchTime);\n+    bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n \n     unsigned int flags = SCRIPT_VERIFY_NOCACHE |\n                          (fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE);\n@@ -2437,7 +2437,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     if (pcheckpoint && block.hashPrevBlock != (chainActive.Tip() ? chainActive.Tip()->GetBlockHash() : uint256(0)))\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64_t deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n+        int64_t deltaTime = block.GetBlockTime() - pcheckpoint->GetBlockTime();\n         if (deltaTime < 0)\n         {\n             return state.DoS(100, error(\"CheckBlockHeader() : block with timestamp before last checkpoint\"),\n@@ -2548,7 +2548,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         CDiskBlockPos blockPos;\n         if (dbp != NULL)\n             blockPos = *dbp;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.nTime, dbp != NULL))\n+        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL))\n             return error(\"AcceptBlock() : FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n@@ -3146,7 +3146,7 @@ bool InitBlockIndex() {\n             unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n             CDiskBlockPos blockPos;\n             CValidationState state;\n-            if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.nTime))\n+            if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n                 return error(\"LoadBlockIndex() : FindBlockPos failed\");\n             if (!WriteBlockToDisk(block, blockPos))\n                 return error(\"LoadBlockIndex() : writing genesis block to disk failed\");"
      },
      {
        "sha": "c0d0a7ca20f26cc1ec5214c0b64e0557b4602c1e",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=209377a7cb5a9ea5d724faf94846ee5bacd289e7",
        "patch": "@@ -26,7 +26,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n-            if (pblock->nTime > pindexLast->nTime + Params().TargetSpacing()*2)\n+            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + Params().TargetSpacing()*2)\n                 return nProofOfWorkLimit;\n             else\n             {"
      },
      {
        "sha": "4c21eb5594e19796feaf4f162c08247c0a3ba12c",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=209377a7cb5a9ea5d724faf94846ee5bacd289e7",
        "patch": "@@ -85,7 +85,7 @@ QDateTime ClientModel::getLastBlockDate() const\n     if (chainActive.Tip())\n         return QDateTime::fromTime_t(chainActive.Tip()->GetBlockTime());\n     else\n-        return QDateTime::fromTime_t(Params().GenesisBlock().nTime); // Genesis block's time of current network\n+        return QDateTime::fromTime_t(Params().GenesisBlock().GetBlockTime()); // Genesis block's time of current network\n }\n \n double ClientModel::getVerificationProgress() const"
      },
      {
        "sha": "d20bfcf095a57c8539d03374a77d5c412808f3f4",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=209377a7cb5a9ea5d724faf94846ee5bacd289e7",
        "patch": "@@ -157,7 +157,7 @@ Value importwallet(const Array& params, bool fHelp)\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n-    int64_t nTimeBegin = chainActive.Tip()->nTime;\n+    int64_t nTimeBegin = chainActive.Tip()->GetBlockTime();\n \n     bool fGood = true;\n \n@@ -215,7 +215,7 @@ Value importwallet(const Array& params, bool fHelp)\n     pwalletMain->ShowProgress(\"\", 100); // hide progress dialog in GUI\n \n     CBlockIndex *pindex = chainActive.Tip();\n-    while (pindex && pindex->pprev && pindex->nTime > nTimeBegin - 7200)\n+    while (pindex && pindex->pprev && pindex->GetBlockTime() > nTimeBegin - 7200)\n         pindex = pindex->pprev;\n \n     if (!pwalletMain->nTimeFirstKey || nTimeBegin < pwalletMain->nTimeFirstKey)\n@@ -301,7 +301,7 @@ Value dumpwallet(const Array& params, bool fHelp)\n     file << strprintf(\"# Wallet dump created by Bitcoin %s (%s)\\n\", CLIENT_BUILD, CLIENT_DATE);\n     file << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n     file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n-    file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->nTime));\n+    file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n     file << \"\\n\";\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;"
      },
      {
        "sha": "c7621dc137b5d3b894907fc7f1e1e6da3e31d7b8",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=209377a7cb5a9ea5d724faf94846ee5bacd289e7",
        "patch": "@@ -442,7 +442,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n     result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n-    result.push_back(Pair(\"curtime\", (int64_t)pblock->nTime));\n+    result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n "
      },
      {
        "sha": "45a227d1dc7d2f53ec2902398093ece6de3d2f39",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=209377a7cb5a9ea5d724faf94846ee5bacd289e7",
        "patch": "@@ -99,8 +99,8 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n             if (chainActive.Contains(pindex))\n             {\n                 entry.push_back(Pair(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight));\n-                entry.push_back(Pair(\"time\", (int64_t)pindex->nTime));\n-                entry.push_back(Pair(\"blocktime\", (int64_t)pindex->nTime));\n+                entry.push_back(Pair(\"time\", pindex->GetBlockTime()));\n+                entry.push_back(Pair(\"blocktime\", pindex->GetBlockTime()));\n             }\n             else\n                 entry.push_back(Pair(\"confirmations\", 0));"
      },
      {
        "sha": "6fd46fdcc5e49b43ccb2a0b2f13220046ed1cdfa",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=209377a7cb5a9ea5d724faf94846ee5bacd289e7",
        "patch": "@@ -50,7 +50,7 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     {\n         entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n         entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n-        entry.push_back(Pair(\"blocktime\", (int64_t)(mapBlockIndex[wtx.hashBlock]->nTime)));\n+        entry.push_back(Pair(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime()));\n     }\n     uint256 hash = wtx.GetHash();\n     entry.push_back(Pair(\"txid\", hash.GetHex()));"
      },
      {
        "sha": "14235f310ba138705a9d50913e91f13a722c71c0",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/209377a7cb5a9ea5d724faf94846ee5bacd289e7/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=209377a7cb5a9ea5d724faf94846ee5bacd289e7",
        "patch": "@@ -515,8 +515,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n             {\n                 if (mapBlockIndex.count(wtxIn.hashBlock))\n                 {\n-                    unsigned int latestNow = wtx.nTimeReceived;\n-                    unsigned int latestEntry = 0;\n+                    int64_t latestNow = wtx.nTimeReceived;\n+                    int64_t latestEntry = 0;\n                     {\n                         // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n                         int64_t latestTolerated = latestNow + 300;\n@@ -547,7 +547,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n                         }\n                     }\n \n-                    unsigned int& blocktime = mapBlockIndex[wtxIn.hashBlock]->nTime;\n+                    int64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n                     wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n                 }\n                 else\n@@ -889,7 +889,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n \n         // no need to read and scan block, if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        while (pindex && nTimeFirstKey && (pindex->nTime < (nTimeFirstKey - 7200)))\n+        while (pindex && nTimeFirstKey && (pindex->GetBlockTime() < (nTimeFirstKey - 7200)))\n             pindex = chainActive.Next(pindex);\n \n         ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n@@ -2092,7 +2092,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n \n     // Extract block timestamps for those keys\n     for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n-        mapKeyBirth[it->first] = it->second->nTime - 7200; // block times can be 2h off\n+        mapKeyBirth[it->first] = it->second->GetBlockTime() - 7200; // block times can be 2h off\n }\n \n bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)"
      }
    ]
  }
]