[
  {
    "sha": "b9a19f32290119f225f7769ba1432fa7904011b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWExOWYzMjI5MDExOWYyMjVmNzc2OWJhMTQzMmZhNzkwNDAxMWIz",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-08-20T12:33:06Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-08-20T12:33:06Z"
      },
      "message": "Common code for decoding of hex \"objects\".\n\nDecodeHexBlk and DecodeHexBlockHeader have exactly the same\nimplementation, except that they decode a CBlock and CBlockHeader\nobject, respectively.  Thus we can share the common code through a\ntemplate.",
      "tree": {
        "sha": "e011d1b0f0a192d7b88a10584b176b2d939dcf81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e011d1b0f0a192d7b88a10584b176b2d939dcf81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9a19f32290119f225f7769ba1432fa7904011b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9a19f32290119f225f7769ba1432fa7904011b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9a19f32290119f225f7769ba1432fa7904011b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9a19f32290119f225f7769ba1432fa7904011b3/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a583406c00761c0ac1d162531256b401d5b16c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a583406c00761c0ac1d162531256b401d5b16c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a583406c00761c0ac1d162531256b401d5b16c3"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 16,
      "deletions": 18
    },
    "files": [
      {
        "sha": "5453e1d91bb71f72278f3dc046a4a73aecde1015",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9a19f32290119f225f7769ba1432fa7904011b3/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9a19f32290119f225f7769ba1432fa7904011b3/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=b9a19f32290119f225f7769ba1432fa7904011b3",
        "patch": "@@ -145,35 +145,33 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no\n     return false;\n }\n \n-bool DecodeHexBlockHeader(CBlockHeader& header, const std::string& hex_header)\n+namespace {\n+\n+template<typename T>\n+bool DecodeHexObject(T& obj, const std::string& strHex)\n {\n-    if (!IsHex(hex_header)) return false;\n+    if (!IsHex(strHex)) return false;\n \n-    const std::vector<unsigned char> header_data{ParseHex(hex_header)};\n-    CDataStream ser_header(header_data, SER_NETWORK, PROTOCOL_VERSION);\n+    const std::vector<unsigned char> data(ParseHex(strHex));\n+    CDataStream stream(data, SER_NETWORK, PROTOCOL_VERSION);\n     try {\n-        ser_header >> header;\n+        stream >> obj;\n     } catch (const std::exception&) {\n         return false;\n     }\n     return true;\n }\n \n-bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n-{\n-    if (!IsHex(strHexBlk))\n-        return false;\n+} // anonymous namespace\n \n-    std::vector<unsigned char> blockData(ParseHex(strHexBlk));\n-    CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION);\n-    try {\n-        ssBlock >> block;\n-    }\n-    catch (const std::exception&) {\n-        return false;\n-    }\n+bool DecodeHexBlockHeader(CBlockHeader& header, const std::string& hex_header)\n+{\n+    return DecodeHexObject(header, hex_header);\n+}\n \n-    return true;\n+bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n+{\n+    return DecodeHexObject(block, strHexBlk);\n }\n \n bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)"
      }
    ]
  }
]