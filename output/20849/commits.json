[
  {
    "sha": "5fd2cee7fbc38c677d08a1545770156cc061833e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmQyY2VlN2ZiYzM4YzY3N2QwOGExNTQ1NzcwMTU2Y2MwNjE4MzNl",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-04T15:57:49Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-04T16:17:10Z"
      },
      "message": "net: disconnect peers by address without using a subnet\n\nPreviously, when disconnecting a peer with a given address we would\ncreate a dummy subnet that contains just 1 address (/32 for IPv4 and\n/128 for IPv6) and would disconnect all peers that belong to this\nsubnet (there may be more than one connection, to a different port).\n\nThe problem is that for any non-IPv4 and non-IPv6 address we would\ncreate an invalid subnet which would later not match any addresses.\n\nThus, don't use a one-host-subnet, but compare the addresses directly.\nThis works for any type of addresses.",
      "tree": {
        "sha": "58cc6edfc7655386c689dda955ce7225c76463c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58cc6edfc7655386c689dda955ce7225c76463c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fd2cee7fbc38c677d08a1545770156cc061833e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl/zQRAACgkQVN8G9ktV\ny7/xBR/+N3gGh/30qzYDUpW9khsWq5f0CpLsO4YTYIpKeBGrbi6htW4PqfuhPPqz\n5/M5H5B9+JAD4+chajNWRnzF+cR88rW5vig0rUCIZzV3u16+50yF8UWnzBJJfVHO\n04nJIPyYb9PwdApRP980hVRqYvCbwOnl4Pk6h+OiTo5RhSucUXvYfHVyQ+NvXc2y\nN6HUFiYbh7pdlkRnitqPG/XY4LWHf8ZMDLCft7ps0e0YzleBA5XudbHrMdoLfNZL\nkFt47Y7Tfiuox9XvicVMRI98bDdGBVdNgYigJyyG29kp3dnhNEn7z4JBbAbvq4Mo\no0BDTEgtv+pVIlEHhXXeaezSqrl/9I1fwANX5bLnKbNQwZD41Pm5SDoMGut0hMv9\neR9udSf3bb3WSZtXfZxhMZrXREML2BH1lS4n0EntvhtrNC7HdZ4pjLUdg0PZdwLC\nhkXhdz0cHq7c6LIWIxw1kGm38B+pQ/PT813rIXsxLv8SYEPJfOfAo5WpgAh+GSjL\nvP5d2DgO4mohZAQTo2YDEQ9OTVp/cRlSiTfXvAWtNp2kxCxmgD2t3U9y18L3089k\nIW1sh8OJvxRgqAK5VV3mvcDWF+zkwfE3zLVZay194bgUpxJaJ5kCDUP8GliQbESI\nXgndfapoAZ1Ifz+vnuLAeE1Yw2/uy6Jur1HbnDCdr/1l9XcQd7btbfjyA6PjatJm\ngNwTXKOi0oBqEEjxM17Ol9+14Dtka9c3NDlYJhBsonvi3zp/hnzAOmzbqnLdDj9a\nQuoIFRX2KTdd1n45Dkjm+y3QhMpWamhq0aPzKYzR+5exg665aB/IaCDCxkwoUJ72\nkkRdXJQvHA1aWAAlPFAJPVHliOSqKGx9MKeQvm5p3NCi4tumeb1XehsHhF4/9W8z\nD6x+TNqWTYMjsUu4g1NJ4CrBL2Ytmd7dEWos1zLg+AYxgmwJb7PY2Cw5xc25opUE\nmOuywZkvzsuCl4D2rA9kuAIApF5yMMf23t3PopcAxC6R8vgl2633Gk0WxjSfJos9\nDZttJQQRHpNE/d2LRthab6HtqgOVzYq7gecpEWmpDLyFgIhhpMNk/zgk/X0c5kYl\nhxMdzMMbPXZO4mAodCOzZrZyuFjO5vXj99ZeisWks2U2yAQfnZJDJI5tSJcZiEeN\nK2xOJ7jCaSlLKG/2MvDbuADSbUWoMdFui6sHt+eL7oayViY7WMGSyXhyihYyoCjE\n09CfCzk/RD6sMEMc+lU4mVP8gSfrzu/SMsIkRYLb6HKksuyVNyQZGchW/NZP6N0R\nsoWnHCsPexU52GQo67GG7HnY9l8QRRdoX7JHrnERQwos4mM5+dTbRvW4yEyB27JK\nQamgVbTAI6+ZS0w7YpgtB10lIcyYOw==\n=kXK+\n-----END PGP SIGNATURE-----",
        "payload": "tree 58cc6edfc7655386c689dda955ce7225c76463c7\nparent bc8ada1c15345d14e324aee68488c8aa8a75cae0\nauthor Vasil Dimov <vd@FreeBSD.org> 1609775869 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1609777030 +0100\n\nnet: disconnect peers by address without using a subnet\n\nPreviously, when disconnecting a peer with a given address we would\ncreate a dummy subnet that contains just 1 address (/32 for IPv4 and\n/128 for IPv6) and would disconnect all peers that belong to this\nsubnet (there may be more than one connection, to a different port).\n\nThe problem is that for any non-IPv4 and non-IPv6 address we would\ncreate an invalid subnet which would later not match any addresses.\n\nThus, don't use a one-host-subnet, but compare the addresses directly.\nThis works for any type of addresses.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fd2cee7fbc38c677d08a1545770156cc061833e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fd2cee7fbc38c677d08a1545770156cc061833e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fd2cee7fbc38c677d08a1545770156cc061833e/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc8ada1c15345d14e324aee68488c8aa8a75cae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc8ada1c15345d14e324aee68488c8aa8a75cae0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc8ada1c15345d14e324aee68488c8aa8a75cae0"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a270547085b215fbfb9264a74fa642972759214b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fd2cee7fbc38c677d08a1545770156cc061833e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fd2cee7fbc38c677d08a1545770156cc061833e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5fd2cee7fbc38c677d08a1545770156cc061833e",
        "patch": "@@ -2814,7 +2814,15 @@ bool CConnman::DisconnectNode(const CSubNet& subnet)\n \n bool CConnman::DisconnectNode(const CNetAddr& addr)\n {\n-    return DisconnectNode(CSubNet(addr));\n+    bool disconnected = false;\n+    LOCK(cs_vNodes);\n+    for (CNode* pnode : vNodes) {\n+        if (addr == pnode->addr) {\n+            pnode->fDisconnect = true;\n+            disconnected = true;\n+        }\n+    }\n+    return disconnected;\n }\n \n bool CConnman::DisconnectNode(NodeId id)"
      }
    ]
  },
  {
    "sha": "98140bc855b037d2c552153496e8e4e2c2efdad9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODE0MGJjODU1YjAzN2QyYzU1MjE1MzQ5NmU4ZTRlMmMyZWZkYWQ5",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-06T14:07:37Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-06T14:48:12Z"
      },
      "message": "test: add test to ensure non-IP peers are properly misbehaved\n\nChange the `peer_discouragement` test to use `CNode` pointers so that\nthe nodes it uses can be added to `CConnman::vNodes` and cleaned up\nproperly. Make it use `CConnmanTest` instead of `CConnman`. This is\nneeded because we want to check `CNode::fDisconnect` and for this flag\nto be flipped by `CConnman::DisconnectNode()` the node must be in\n`CConnman::vNodes`.\n\nExtend the test with one torv3 peer and check that it is discouraged and\ndisconnected as expected.",
      "tree": {
        "sha": "949742a54d00ea9e2be1293fd0ce79842a321492",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/949742a54d00ea9e2be1293fd0ce79842a321492"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98140bc855b037d2c552153496e8e4e2c2efdad9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl/1zm8ACgkQVN8G9ktV\ny78VPCAAny6nM46U/nHWAZcrCZXOno+3HeCk+8A5c02Y2lVLyAat4UtIoTQtl6LT\n9oYPStH0p3KTlTwzPC5B0SYyaa2EdtS0/HZDtv1YvMJem09sUsSugZKAM5l1ogvN\nRT4Rsc3uDX2UL3/JWXggMhRTYt6ulai4TE8NbySPQbZpUMRi9kd+bEzAam5Y6pj6\nR3peuLKVFAgOPqBE6kvo0WjquLvoG8QWjYarKE/DeTtAK1jdVxwW5BjsHoVR0dvA\njcULzFJ8ZvJQsHVtN+k/nmIp4OuDAawB5Z5jkx1ikBVgOqAX2RcsfS7DLrd8lps8\nPzAfeh4uknxbE8AxfG5CctgbmWlCh+RPyxqUcpXGWc6jkMgX9TlpIqfsPMccMGUq\nBJXqYlh8Nj6C2iPfPRBe1AikuPIcIXIKC4J3JVc6Tw8r9D7BeLipIlE3wUoBsPhd\nryNLtO5+tvQVf+S3R61hk2yJlRmud02FrQa5hvFN0fFVQqxhDtsO3aj0torwraNH\nU69ud6muXUlxoR8HDTS2o2joGFK86Zh4gtE0xyd4kwBng6clRUI6urxiOCNGHNOe\nmjDGHLHWXkbW7Tf1xTOWuJXbfM6MMFcPhUF0m1r+YRt8LOShTdv5Qr4BCGoWv+1p\n6V/0J6jg+NPdkZpzcJKctu0R7gWNpeJ67uNVIDyDYeFs05TRBX26QwfJ2be5ZivV\ns7yL21NiM0uw++OY/vl+PJ20CmoGtxQE1Q0LSULR9GOkwOaeMp+0Y8cen9zsNInt\nqg/yj3BvHNbewazkCgKl9nYgmLkJjQYP+5PI3lcAyLinS1Nt/tg0KDRsVEK843Wg\n1WnWJchxL0Ofz80o5G3CLvthj0OHcihICqIqnmE6Zg/C6aN6n7DacInvxb+NRpBw\n/1CAOK/R9kpk6g9cgf7LLzm4yiCmlmBSVx+iqXXdA0KNiV6abpOKTngzbIFkgAzm\nABHVnw41OmgK0Fh26JefvNutnTODjqS7mLLT8NYVc8qYFxZ+uhuxeCjK4HKUD00e\njuABYXzpKAyU5QvU2V/NYK1x+lQmZM7T2wXAzevUs9C5EzyGegKKTQaAPqATbv1H\nnt9zKF6gaxpsVshjk5C0bgRyLdSWBVYe0BDcldwiBZAHlI6tVbrE9HYDpTiY6sWP\nUUl4umMgqwL0ACOtNk4VP5i4PGrj5ol2iVvve+6FV49P4/LODaJ5pf1QZmmfHC3p\nzwxy7r/iw42K/jXf5nF5PADzzpw+jOGGIx7XclBvRhcIUTwOk1oyHPjNPreZN1dD\nzVC+dZ//RXdAKW+flMYYgLMo7pdesUXl5ua4QXzmRBsrQelHAYPyX/Q/Q4u4DpT7\n9lbTdZh+Ifu3VoNH1zgmcC5LTnYkdw==\n=whOl\n-----END PGP SIGNATURE-----",
        "payload": "tree 949742a54d00ea9e2be1293fd0ce79842a321492\nparent 5fd2cee7fbc38c677d08a1545770156cc061833e\nauthor Vasil Dimov <vd@FreeBSD.org> 1609942057 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1609944492 +0100\n\ntest: add test to ensure non-IP peers are properly misbehaved\n\nChange the `peer_discouragement` test to use `CNode` pointers so that\nthe nodes it uses can be added to `CConnman::vNodes` and cleaned up\nproperly. Make it use `CConnmanTest` instead of `CConnman`. This is\nneeded because we want to check `CNode::fDisconnect` and for this flag\nto be flipped by `CConnman::DisconnectNode()` the node must be in\n`CConnman::vNodes`.\n\nExtend the test with one torv3 peer and check that it is discouraged and\ndisconnected as expected.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98140bc855b037d2c552153496e8e4e2c2efdad9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98140bc855b037d2c552153496e8e4e2c2efdad9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98140bc855b037d2c552153496e8e4e2c2efdad9/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fd2cee7fbc38c677d08a1545770156cc061833e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fd2cee7fbc38c677d08a1545770156cc061833e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fd2cee7fbc38c677d08a1545770156cc061833e"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 59,
      "deletions": 22
    },
    "files": [
      {
        "sha": "119e2beecb85d3ede699a98ae8801e44e9e45a35",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 22,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98140bc855b037d2c552153496e8e4e2c2efdad9/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98140bc855b037d2c552153496e8e4e2c2efdad9/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=98140bc855b037d2c552153496e8e4e2c2efdad9",
        "patch": "@@ -223,47 +223,84 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+    auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n     auto peerLogic = std::make_unique<PeerManager>(chainparams, *connman, banman.get(), *m_node.scheduler,\n                                                    *m_node.chainman, *m_node.mempool, false);\n \n+    std::vector<CNode*> nodes(3);\n+\n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::INBOUND);\n-    dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode1);\n-    dummyNode1.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n+    nodes[0] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", ConnectionType::INBOUND);\n+    nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[0]);\n+    nodes[0]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[0]);\n+    peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n-        LOCK(dummyNode1.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n+        LOCK(nodes[0]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n     }\n     BOOST_CHECK(banman->IsDiscouraged(addr1));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n     BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not discouraged\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", ConnectionType::INBOUND);\n-    dummyNode2.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode2);\n-    dummyNode2.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n+    nodes[1] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", ConnectionType::INBOUND);\n+    nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[1]);\n+    nodes[1]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[1]);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n     BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not discouraged yet...\n+    BOOST_CHECK(!nodes[1]->fDisconnect);\n     BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n-    peerLogic->Misbehaving(dummyNode2.GetId(), 1, /* message */ \"\");         // 2 reaches discouragement threshold\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\");         // 2 reaches discouragement threshold\n+    {\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n+    }\n+    // Expect both 1 and 2 to be discouraged now.\n+    BOOST_CHECK(banman->IsDiscouraged(addr1));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(banman->IsDiscouraged(addr2));\n+    BOOST_CHECK(nodes[1]->fDisconnect);\n+\n+    // Make sure non-IP peers get discouraged and disconnected properly.\n+\n+    CNetAddr tor_netaddr;\n+    BOOST_REQUIRE(\n+        tor_netaddr.SetSpecial(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"));\n+\n+    const CAddress addr3(CService(tor_netaddr, Params().GetDefaultPort()), NODE_NONE);\n+    nodes[2] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr3, 1, 1, CAddress(), \"\",\n+                         ConnectionType::OUTBOUND_FULL_RELAY);\n+    nodes[2]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[2]);\n+    connman->AddNode(*nodes[2]);\n+    nodes[2]->fSuccessfullyConnected = true;\n+    peerLogic->Misbehaving(nodes[2]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\");\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[2]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[2]));\n+    }\n+    BOOST_CHECK(banman->IsDiscouraged(addr1));\n+    BOOST_CHECK(banman->IsDiscouraged(addr2));\n+    BOOST_CHECK(banman->IsDiscouraged(addr3));\n+    for (CNode* node : nodes) {\n+        BOOST_CHECK(node->fDisconnect);\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // Expect both 1 and 2\n-    BOOST_CHECK(banman->IsDiscouraged(addr2));  // to be discouraged now\n \n     bool dummy;\n-    peerLogic->FinalizeNode(dummyNode1, dummy);\n-    peerLogic->FinalizeNode(dummyNode2, dummy);\n+    for (CNode* node : nodes) {\n+        peerLogic->FinalizeNode(*node, dummy);\n+    }\n+    connman->ClearNodes();\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)"
      }
    ]
  }
]