[
  {
    "sha": "e783197bf0f7429f80fea94b44c59857bc8cfef9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzgzMTk3YmYwZjc0MjlmODBmZWE5NGI0NGM1OTg1N2JjOGNmZWY5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-28T06:13:19Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-28T06:13:19Z"
      },
      "message": "refactor: replace RegisterWalletRPCCommands with GetWalletRPCCommands",
      "tree": {
        "sha": "fe3756424868d395910d5cb529ea490fb37a9299",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe3756424868d395910d5cb529ea490fb37a9299"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e783197bf0f7429f80fea94b44c59857bc8cfef9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e783197bf0f7429f80fea94b44c59857bc8cfef9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e783197bf0f7429f80fea94b44c59857bc8cfef9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e783197bf0f7429f80fea94b44c59857bc8cfef9/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55b4c65bd1d829e799db7fe75fab88691830de43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55b4c65bd1d829e799db7fe75fab88691830de43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55b4c65bd1d829e799db7fe75fab88691830de43"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "9e5b357f69bec7f5526b2fd7f1373c28fd439f8c",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783197bf0f7429f80fea94b44c59857bc8cfef9/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783197bf0f7429f80fea94b44c59857bc8cfef9/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=e783197bf0f7429f80fea94b44c59857bc8cfef9",
        "patch": "@@ -9,6 +9,7 @@\n #include <interfaces/handler.h>\n #include <policy/fees.h>\n #include <primitives/transaction.h>\n+#include <rpc/server.h>\n #include <script/standard.h>\n #include <support/allocators/secure.h>\n #include <sync.h>\n@@ -487,7 +488,9 @@ class WalletClientImpl : public ChainClient\n     void registerRpcs() override\n     {\n         g_rpc_chain = &m_chain;\n-        return RegisterWalletRPCCommands(m_chain, m_rpc_handlers);\n+        for (const CRPCCommand& command : GetWalletRPCCommands()) {\n+            m_rpc_handlers.emplace_back(m_chain.handleRpc(command));\n+        }\n     }\n     bool verify() override { return VerifyWallets(m_chain, m_wallet_filenames); }\n     bool load() override { return LoadWallets(m_chain, m_wallet_filenames); }"
      },
      {
        "sha": "c4052d67b05b89c839d7cb1f2aae4f0eb7ba31af",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783197bf0f7429f80fea94b44c59857bc8cfef9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783197bf0f7429f80fea94b44c59857bc8cfef9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e783197bf0f7429f80fea94b44c59857bc8cfef9",
        "patch": "@@ -4263,7 +4263,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request);\n UniValue importmulti(const JSONRPCRequest& request);\n UniValue importdescriptors(const JSONRPCRequest& request);\n \n-void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers)\n+Span<const CRPCCommand> GetWalletRPCCommands()\n {\n // clang-format off\n static const CRPCCommand commands[] =\n@@ -4329,9 +4329,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"walletprocesspsbt\",                &walletprocesspsbt,             {\"psbt\",\"sign\",\"sighashtype\",\"bip32derivs\"} },\n };\n // clang-format on\n-\n-    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n-        handlers.emplace_back(chain.handleRpc(commands[vcidx]));\n+    return MakeSpan(commands);\n }\n \n interfaces::Chain* g_rpc_chain = nullptr;"
      },
      {
        "sha": "fd8a41ed1473a54e362731ac5424787568460416",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783197bf0f7429f80fea94b44c59857bc8cfef9/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783197bf0f7429f80fea94b44c59857bc8cfef9/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=e783197bf0f7429f80fea94b44c59857bc8cfef9",
        "patch": "@@ -5,11 +5,13 @@\n #ifndef BITCOIN_WALLET_RPCWALLET_H\n #define BITCOIN_WALLET_RPCWALLET_H\n \n+#include <span.h>\n+\n #include <memory>\n #include <string>\n #include <vector>\n \n-class CRPCTable;\n+class CRPCCommand;\n class CWallet;\n class JSONRPCRequest;\n class LegacyScriptPubKeyMan;\n@@ -19,16 +21,14 @@ class CTransaction;\n \n namespace interfaces {\n class Chain;\n-class Handler;\n }\n \n //! Pointer to chain interface that needs to be declared as a global to be\n //! accessible loadwallet and createwallet methods. Due to limitations of the\n //! RPC framework, there's currently no direct way to pass in state to RPC\n //! methods without globals.\n extern interfaces::Chain* g_rpc_chain;\n-\n-void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers);\n+Span<const CRPCCommand> GetWalletRPCCommands();\n \n /**\n  * Figures out what wallet, if any, to use for a JSONRPCRequest."
      }
    ]
  },
  {
    "sha": "4a7253ab6c3bb323581cea54573529c2f823f035",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTcyNTNhYjZjM2JiMzIzNTgxY2VhNTQ1NzM1MjljMmY4MjNmMDM1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-28T06:13:19Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-28T06:13:19Z"
      },
      "message": "Remove g_rpc_chain global\n\nReplace with RPC request reference to new WalletContext struct similar to the\nexisting NodeContext struct and reference.\n\nThis PR is a followup to 25ad2c623af30056ffb36dcd203a52edda2b170f\nhttps://github.com/bitcoin/bitcoin/pull/18740 removing the g_rpc_node global.\n\nSome later PRs will follow this up and move more wallet globals to the\nWalletContext struct.\n\nCo-authored-by: Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com>",
      "tree": {
        "sha": "026a1a071a230352a7673f5be38ba1c1b8935550",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/026a1a071a230352a7673f5be38ba1c1b8935550"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a7253ab6c3bb323581cea54573529c2f823f035",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a7253ab6c3bb323581cea54573529c2f823f035",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a7253ab6c3bb323581cea54573529c2f823f035",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a7253ab6c3bb323581cea54573529c2f823f035/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e783197bf0f7429f80fea94b44c59857bc8cfef9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e783197bf0f7429f80fea94b44c59857bc8cfef9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e783197bf0f7429f80fea94b44c59857bc8cfef9"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 81,
      "deletions": 20
    },
    "files": [
      {
        "sha": "7a280a67a7741c47dde0dd3a3e9583100b309fef",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a7253ab6c3bb323581cea54573529c2f823f035/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a7253ab6c3bb323581cea54573529c2f823f035/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4a7253ab6c3bb323581cea54573529c2f823f035",
        "patch": "@@ -241,6 +241,7 @@ BITCOIN_CORE_H = \\\n   versionbitsinfo.h \\\n   walletinitinterface.h \\\n   wallet/coincontrol.h \\\n+  wallet/context.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n   wallet/feebumper.h \\\n@@ -350,6 +351,7 @@ libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   interfaces/wallet.cpp \\\n   wallet/coincontrol.cpp \\\n+  wallet/context.cpp \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n   wallet/feebumper.cpp \\"
      },
      {
        "sha": "7b907b2a0be5bb1d597dbda944c62fc42b3f7887",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a7253ab6c3bb323581cea54573529c2f823f035/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a7253ab6c3bb323581cea54573529c2f823f035/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=4a7253ab6c3bb323581cea54573529c2f823f035",
        "patch": "@@ -16,7 +16,9 @@\n #include <ui_interface.h>\n #include <uint256.h>\n #include <util/check.h>\n+#include <util/ref.h>\n #include <util/system.h>\n+#include <wallet/context.h>\n #include <wallet/feebumper.h>\n #include <wallet/fees.h>\n #include <wallet/ismine.h>\n@@ -482,18 +484,21 @@ class WalletClientImpl : public ChainClient\n {\n public:\n     WalletClientImpl(Chain& chain, std::vector<std::string> wallet_filenames)\n-        : m_chain(chain), m_wallet_filenames(std::move(wallet_filenames))\n+        : m_wallet_filenames(std::move(wallet_filenames))\n     {\n+        m_context.chain = &chain;\n     }\n     void registerRpcs() override\n     {\n-        g_rpc_chain = &m_chain;\n         for (const CRPCCommand& command : GetWalletRPCCommands()) {\n-            m_rpc_handlers.emplace_back(m_chain.handleRpc(command));\n+            m_rpc_commands.emplace_back(command.category, command.name, [this, &command](const JSONRPCRequest& request, UniValue& result, bool last_handler) {\n+                return command.actor({request, m_context}, result, last_handler);\n+            }, command.argNames, command.unique_id);\n+            m_rpc_handlers.emplace_back(m_context.chain->handleRpc(m_rpc_commands.back()));\n         }\n     }\n-    bool verify() override { return VerifyWallets(m_chain, m_wallet_filenames); }\n-    bool load() override { return LoadWallets(m_chain, m_wallet_filenames); }\n+    bool verify() override { return VerifyWallets(*m_context.chain, m_wallet_filenames); }\n+    bool load() override { return LoadWallets(*m_context.chain, m_wallet_filenames); }\n     void start(CScheduler& scheduler) override { return StartWallets(scheduler); }\n     void flush() override { return FlushWallets(); }\n     void stop() override { return StopWallets(); }\n@@ -508,9 +513,10 @@ class WalletClientImpl : public ChainClient\n     }\n     ~WalletClientImpl() override { UnloadWallets(); }\n \n-    Chain& m_chain;\n+    WalletContext m_context;\n     std::vector<std::string> m_wallet_filenames;\n     std::vector<std::unique_ptr<Handler>> m_rpc_handlers;\n+    std::list<CRPCCommand> m_rpc_commands;\n };\n \n } // namespace"
      },
      {
        "sha": "4761e9e371b9d8bdc6a1a5865200dd9d1a115c46",
        "filename": "src/rpc/request.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a7253ab6c3bb323581cea54573529c2f823f035/src/rpc/request.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a7253ab6c3bb323581cea54573529c2f823f035/src/rpc/request.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.h?ref=4a7253ab6c3bb323581cea54573529c2f823f035",
        "patch": "@@ -41,6 +41,16 @@ class JSONRPCRequest\n     const util::Ref& context;\n \n     JSONRPCRequest(const util::Ref& context) : id(NullUniValue), params(NullUniValue), fHelp(false), context(context) {}\n+\n+    //! Initializes request information from another request object and the\n+    //! given context. The implementation should be updated if any members are\n+    //! added or removed above.\n+    JSONRPCRequest(const JSONRPCRequest& other, const util::Ref& context)\n+        : id(other.id), strMethod(other.strMethod), params(other.params), fHelp(other.fHelp), URI(other.URI),\n+          authUser(other.authUser), peerAddr(other.peerAddr), context(context)\n+    {\n+    }\n+\n     void parse(const UniValue& valRequest);\n };\n "
      },
      {
        "sha": "09b2f30467099d36e8405b42328987364cd486a4",
        "filename": "src/wallet/context.cpp",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a7253ab6c3bb323581cea54573529c2f823f035/src/wallet/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a7253ab6c3bb323581cea54573529c2f823f035/src/wallet/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/context.cpp?ref=4a7253ab6c3bb323581cea54573529c2f823f035",
        "patch": "@@ -0,0 +1,8 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/context.h>\n+\n+WalletContext::WalletContext() {}\n+WalletContext::~WalletContext() {}"
      },
      {
        "sha": "3c8fdd1c59e9c37913580862decd898d27ce0503",
        "filename": "src/wallet/context.h",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a7253ab6c3bb323581cea54573529c2f823f035/src/wallet/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a7253ab6c3bb323581cea54573529c2f823f035/src/wallet/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/context.h?ref=4a7253ab6c3bb323581cea54573529c2f823f035",
        "patch": "@@ -0,0 +1,32 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_CONTEXT_H\n+#define BITCOIN_WALLET_CONTEXT_H\n+\n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n+//! WalletContext struct containing references to state shared between CWallet\n+//! instances, like the reference to the chain interface, and the list of opened\n+//! wallets.\n+//!\n+//! Future shared state can be added here as an alternative to adding global\n+//! variables.\n+//!\n+//! The struct isn't intended to have any member functions. It should just be a\n+//! collection of state pointers that doesn't pull in dependencies or implement\n+//! behavior.\n+struct WalletContext {\n+    interfaces::Chain* chain{nullptr};\n+\n+    //! Declare default constructor and destructor that are not inline, so code\n+    //! instantiating the WalletContext struct doesn't need to #include class\n+    //! definitions for smart pointer and container members.\n+    WalletContext();\n+    ~WalletContext();\n+};\n+\n+#endif // BITCOIN_WALLET_CONTEXT_H"
      },
      {
        "sha": "ae2b19e923da88fabf5fec3db37366f5d4b2f450",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a7253ab6c3bb323581cea54573529c2f823f035/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a7253ab6c3bb323581cea54573529c2f823f035/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4a7253ab6c3bb323581cea54573529c2f823f035",
        "patch": "@@ -21,12 +21,14 @@\n #include <util/fees.h>\n #include <util/message.h> // For MessageSign()\n #include <util/moneystr.h>\n+#include <util/ref.h>\n #include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <util/url.h>\n #include <util/vector.h>\n #include <wallet/coincontrol.h>\n+#include <wallet/context.h>\n #include <wallet/feebumper.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n@@ -121,6 +123,14 @@ void EnsureWalletIsUnlocked(const CWallet* pwallet)\n     }\n }\n \n+WalletContext& EnsureWalletContext(const util::Ref& context)\n+{\n+    if (!context.Has<WalletContext>()) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wallet context not found\");\n+    }\n+    return context.Get<WalletContext>();\n+}\n+\n // also_create should only be set to true only when the RPC is expected to add things to a blank wallet and make it no longer blank\n LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create)\n {\n@@ -2584,6 +2594,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    WalletContext& context = EnsureWalletContext(request.context);\n     WalletLocation location(request.params[0].get_str());\n \n     if (!location.Exists()) {\n@@ -2598,7 +2609,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n-    std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_chain, location, error, warnings);\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, location, error, warnings);\n     if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n \n     UniValue obj(UniValue::VOBJ);\n@@ -2702,6 +2713,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         },\n     }.Check(request);\n \n+    WalletContext& context = EnsureWalletContext(request.context);\n     uint64_t flags = 0;\n     if (!request.params[1].isNull() && request.params[1].get_bool()) {\n         flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n@@ -2731,7 +2743,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n \n     bilingual_str error;\n     std::shared_ptr<CWallet> wallet;\n-    WalletCreationStatus status = CreateWallet(*g_rpc_chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n+    WalletCreationStatus status = CreateWallet(*context.chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n     switch (status) {\n         case WalletCreationStatus::CREATION_FAILED:\n             throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n@@ -4331,5 +4343,3 @@ static const CRPCCommand commands[] =\n // clang-format on\n     return MakeSpan(commands);\n }\n-\n-interfaces::Chain* g_rpc_chain = nullptr;"
      },
      {
        "sha": "d00221a04c69f86da17febb50cb40455303ac772",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 10,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a7253ab6c3bb323581cea54573529c2f823f035/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a7253ab6c3bb323581cea54573529c2f823f035/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=4a7253ab6c3bb323581cea54573529c2f823f035",
        "patch": "@@ -16,18 +16,10 @@ class CWallet;\n class JSONRPCRequest;\n class LegacyScriptPubKeyMan;\n class UniValue;\n-struct PartiallySignedTransaction;\n class CTransaction;\n+struct PartiallySignedTransaction;\n+struct WalletContext;\n \n-namespace interfaces {\n-class Chain;\n-}\n-\n-//! Pointer to chain interface that needs to be declared as a global to be\n-//! accessible loadwallet and createwallet methods. Due to limitations of the\n-//! RPC framework, there's currently no direct way to pass in state to RPC\n-//! methods without globals.\n-extern interfaces::Chain* g_rpc_chain;\n Span<const CRPCCommand> GetWalletRPCCommands();\n \n /**\n@@ -40,6 +32,7 @@ std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& reques\n \n void EnsureWalletIsUnlocked(const CWallet*);\n bool EnsureWalletIsAvailable(const CWallet*, bool avoidException);\n+WalletContext& EnsureWalletContext(const util::Ref& context);\n LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create = false);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);"
      }
    ]
  }
]