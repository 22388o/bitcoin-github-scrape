DrahtBot,2021-09-19 02:50:48,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22950](https://github.com/bitcoin/bitcoin/pull/22950) ([p2p] Pimpl AddrMan to abstract implementation details by amitiut",https://github.com/bitcoin/bitcoin/pull/23025#issuecomment-922406734,922406734,
martinus,2021-09-19 11:00:51,Thanks for the reviews! I've incorporated all the suggestions into the right commits and rebased everything.,https://github.com/bitcoin/bitcoin/pull/23025#issuecomment-922454698,922454698,
martinus,2021-09-20 05:32:26,"Rebased with header cleanups, and signed all commits.",https://github.com/bitcoin/bitcoin/pull/23025#issuecomment-922647753,922647753,
jonatack,2021-09-20 08:53:10,ACK e7e890079e92e346997cbdf491b5b0717cd4bcab,https://github.com/bitcoin/bitcoin/pull/23025#issuecomment-922741072,922741072,
jonatack,2021-09-21 13:27:12,"re-ACK e148a5233292d156cda76cb20afb6641fc20f25e\n\nThe Win64 CI failure looks unrelated.\n\n```\n$ NANOBENCH_SUPPRESS_WARNINGS=1 ./bench_bitcoin -filter=AddrMan*.* -min_time=20000\n\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------:|:----------\n|      762,448,657.67 |                1.31 |    ",https://github.com/bitcoin/bitcoin/pull/23025#issuecomment-923989184,923989184,
martinus,2021-09-21 13:51:28,@jonatack Interesting that your benchmark results are so different. Did you compile for release? I can't believe my computer is ~20 times faster than yours... I compile with `./autogen.sh && ./configure --with-incompatible-bdb CC=clang CXX=clang++` ,https://github.com/bitcoin/bitcoin/pull/23025#issuecomment-924010520,924010520,
jonatack,2021-09-21 13:58:02,"@martinus no, it's a debug build and the computer is not optimized. Re-building a non-debug build would take a long time (I have a slow 2-core laptop) and I'd already tested it properly above. Sorry for the weird example.",https://github.com/bitcoin/bitcoin/pull/23025#issuecomment-924016548,924016548,
laanwj,2021-09-24 16:38:53,Code review ACK e148a5233292d156cda76cb20afb6641fc20f25e,https://github.com/bitcoin/bitcoin/pull/23025#issuecomment-926770523,926770523,
jonatack,2021-09-18 13:12:44,"3154897f nit, s/influcence/influence/",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711589008,711589008,src/bench/peer_eviction.cpp
jonatack,2021-09-18 13:19:39,c67f365 nit s/method modifies theobject/modifies the object/,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711589771,711589771,src/bench/addrman.cpp
jonatack,2021-09-18 13:25:41,"f167647\n```suggestion\nstatic constexpr int64_t DEFAULT_MIN_DURATION_MS{10};\n```",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711590355,711590355,src/bench/bench_bitcoin.cpp
jonatack,2021-09-18 13:31:19,"fc2d44dd missing word\n```suggestion\n                     ""    results, use CPU pinning and CPU isolation (see [2]).\n""\n```",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711590975,711590975,src/bench/bench_bitcoin.cpp
jonatack,2021-09-18 13:32:53,"fc2d44d s/reliable increase/reliable, increase/ and s/seconds/seconds./",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711591098,711591098,src/bench/bench_bitcoin.cpp
jonatack,2021-09-18 13:37:04,"f167647 or 3e1a8ca maybe place this line after `bool is_list_only`, as it is a very lightweight data type in terms of packing",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711591578,711591578,src/bench/bench.h
jonatack,2021-09-18 13:43:48,"354fbc0 Would it be a good idea to instead just make `data` a vector of uint8? There has been ongoing refactoring in the codebase to move from unsigned char to uint8. \n```diff\n-    std::vector<unsigned char> data(32);\n-    uint32_t count = 0;\n+    std::vector<uint8_t> data(32);\n+    uint8_t count = 0;\n```\n",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711592387,711592387,src/bench/rollingbloom.cpp
jonatack,2021-09-18 13:53:21,"fc2d44dd suggestion\n\n""It can sometimes be difficult to get stable, repeatable results, so here are a few tips:""\n",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711593437,711593437,src/bench/bench_bitcoin.cpp
jonatack,2021-09-18 13:55:10,"fc2d44d I think it would be most helpful to begin with the Options, followed by the Description and Notes, as they go together.",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711593618,711593618,src/bench/bench_bitcoin.cpp
jonatack,2021-09-18 13:58:37,f167647c consider shortening the argument name to `-min_time` (faster and easier to type!),https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711593977,711593977,src/bench/bench_bitcoin.cpp
jonatack,2021-09-18 14:32:52,"Looking at https://en.cppreference.com/w/cpp/chrono/duration/duration_cast, would something like this be a good idea?\n\n```cpp\n// converting integral duration to integral duration of shorter divisible time unit:\n    // no duration_cast needed\n    std::chrono::duration<long, std::micro> int_usec = int_ms;\n```\n\nalso line 62, can shorten if preferred\n```diff\n-        if (args.min_d",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711598161,711598161,src/bench/bench.cpp
jonatack,2021-09-18 18:41:09,Another alternative would be to add this Description and Notes documentation to `doc/benchmarking.md`.,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711625919,711625919,src/bench/bench_bitcoin.cpp
martinus,2021-09-19 10:52:48,fixed in eb399ab0577dffe7e1080bb497ff642de1c8c359,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711724830,711724830,src/bench/peer_eviction.cpp
martinus,2021-09-19 10:53:41,fixed in 652faa16a1410b51a5ad78a3121cf6ab9329f640,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711724965,711724965,src/bench/addrman.cpp
martinus,2021-09-19 10:54:20,fixed in b8f16c323e02c3d06e5ad57b6c0f96196d9b12e0,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711725015,711725015,src/bench/bench_bitcoin.cpp
martinus,2021-09-19 10:55:01,wordings fixed in 57a7a020a87f13c231b44ad1861b0bb6e6f92e70,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711725089,711725089,src/bench/bench_bitcoin.cpp
martinus,2021-09-19 10:55:12,done!,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711725143,711725143,src/bench/bench.h
martinus,2021-09-19 10:56:17,I can't easily change that because the RollingBloomHash's API uses that and I don't want the change to be too large. I've changed this though to use `& 0xFF` like it's done in many other places in the code. Done in b901174bfb6895c8e332c2b5e280348836398e68,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711725279,711725279,src/bench/rollingbloom.cpp
martinus,2021-09-19 10:56:52,done in b8f16c323e02c3d06e5ad57b6c0f96196d9b12e0,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711725337,711725337,src/bench/bench_bitcoin.cpp
martinus,2021-09-19 10:57:15,changed in 57a7a020a87f13c231b44ad1861b0bb6e6f92e70,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711725386,711725386,src/bench/bench_bitcoin.cpp
martinus,2021-09-19 10:59:55,"hm, I think it's fine to use `std::chrono::nanoseconds`, it's basically the same but with `int64_t`. It should be large so there's no easy chance for overflow. I generally try to not use `duration_cast`, because that's a sign that at that place there will be some loss of information due to the casting.\n\nI've changed  line 64 to 0ms in b8f16c323e02c3d06e5ad57b6c0f96196d9b12e0",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711725752,711725752,src/bench/bench.cpp
jonatack,2021-09-19 15:26:19,"57a7a02\n```suggestion\n                     ""    -min_time=5000 to let a benchmark run for at least 5 seconds.\n""\n```",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711761445,711761445,src/bench/bench_bitcoin.cpp
jonatack,2021-09-19 15:40:39,"b8f16c3\n\n- per `doc/developer-notes.md`, it looks like `#include <chrono>` should be added to bench.cpp and bench_bitcoin.cpp:\n```\n- Every `.cpp` and `.h` file should `#include` every header file it directly uses classes, functions or other\n  definitions from, even if those headers are already included indirectly through other headers.\n\n  - *Rationale*: Excluding headers because they",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711763464,711763464,src/bench/bench.cpp
martinus,2021-09-19 17:37:19,"hm, that include guideline is a bit hard to follow. There are lots of other missing includes, e.g. `bench_bitcoin.cpp` would need at least chrono, cstdint, vector, sstream, string, iostream. Should I add these as well?\n\nAbout the constructor, I think that is one of the cases where assignment is better: chrono's assignment is more strict than the constructor, you can't do e.g. `std::chrono::nan",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711777746,711777746,src/bench/bench.cpp
martinus,2021-09-20 05:31:48,"damn, forgot that one! Fixed in the latest rebase.",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711885691,711885691,src/bench/bench_bitcoin.cpp
martinus,2021-09-20 05:32:09,I've now added the headers in clean up includes commit,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711885770,711885770,src/bench/bench.cpp
MarcoFalke,2021-09-20 09:08:38, Likely going to change with #22974,https://github.com/bitcoin/bitcoin/pull/23025#discussion_r711994199,711994199,src/bench/addrman.cpp
martinus,2021-09-20 11:12:38,"hm, I don't know much about what addrman does, but currently `markSomeAsGood` in the benchmark only uses every 32nd element. Can be bumped up to call Good() on every entry, maybe in random order?",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r712072172,712072172,src/bench/addrman.cpp
martinus,2021-09-21 12:49:38,"I've rebased because #22974 is already merged, and updated the benchmark in 153e686 so it makes more sense with the much faster `Good()`. Nothing else has changed",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r713006208,713006208,src/bench/addrman.cpp
MarcoFalke,2021-09-21 13:28:10,"If the overhead is now 99%, then changes in the order of -50% or +100% are not noticed. Just asking to make sure the overhead isn't too much.",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r713040141,713040141,src/bench/addrman.cpp
martinus,2021-09-21 13:46:33,"This is what I get when I run `./src/bench/bench_bitcoin -min_time=10000 -filter=""AddrManAdd.*""` on my machine:\n\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----",https://github.com/bitcoin/bitcoin/pull/23025#discussion_r713057764,713057764,src/bench/addrman.cpp
