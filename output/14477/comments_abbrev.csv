sipa,2018-10-17T01:35:13Z,"Addressed all nits, and added some comments.",https://github.com/bitcoin/bitcoin/pull/14477#issuecomment-430458223,430458223,
Sjors,2018-10-17T09:05:46Z,"Concept ACK. Lightly tested a5e0b62; e.g. `getaddressinfo` shows a descriptor now.\n\nThe descriptors only show the public key, which is consistent with `getaddressinfo` not showing private keys and seeds. Maybe add a `descriptor` boolean argument to `dumpprivkey` as a way to obtain descriptors with a private key?",https://github.com/bitcoin/bitcoin/pull/14477#issuecomment-430549843,430549843,
ryanofsky,2018-10-17T17:48:19Z,"utACK a5e0b620062bf00a5f24d195bcaf52839681cb5d. Only changes since last review were making some suggested changes and expanding the InferDescriptor.\n\nIt would also be nice to add release notes for the RPC changes in this PR.\n\n> For large wallets this will make listunspent perform a lot worse?\n\nIt seems like the new work listunspent is doing is similar to the work it was doing before wi",https://github.com/bitcoin/bitcoin/pull/14477#issuecomment-430724012,430724012,
sipa,2018-10-19T01:09:57Z,"Sorry for the big change, but I realized that after #14150, we'll want to integrate origin information into the inferred descriptors this PR brings, so I went ahead and did that (it's based on 14150 now).",https://github.com/bitcoin/bitcoin/pull/14477#issuecomment-431212707,431212707,
DrahtBot,2018-10-20T10:00:08Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14646](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14646.html) (Add expansion cache functions to descriptor",https://github.com/bitcoin/bitcoin/pull/14477#issuecomment-431566840,431566840,
Sjors,2018-10-23T10:33:54Z,Lightly tested e6e4704; `getaddressinfo` descriptor now includes origin info.,https://github.com/bitcoin/bitcoin/pull/14477#issuecomment-432192974,432192974,
sipa,2018-10-26T17:41:23Z,"Rebased, renamed the descriptor output field to `desc` (for consistency with the name of the input argument to `scantxoutset`), and added the output to `scantxoutset` as well (fixing #14503).",https://github.com/bitcoin/bitcoin/pull/14477#issuecomment-433487789,433487789,
meshcollider,2018-10-29T06:25:29Z,re-utACK https://github.com/bitcoin/bitcoin/pull/14477/commits/fe9b68a81a6f3a9abac7b3b7740d5019129d4fff,https://github.com/bitcoin/bitcoin/pull/14477#issuecomment-433800680,433800680,
Sjors,2018-10-30T12:27:43Z,"Also lightly tested 2286f20 using `scantxoutset` to check the balance of a watch-only ""wallet"". It's nice to see the origin information that I passed in appear in the desc field.\n\nEven though it makes sense, it's less intuitive, that if you pass in origin like `wpkh([fingerprint/44'/0'/0']xpub/0/*` it comes out as `wpkh([fingerprint/44'/0'/0'/0/0]pub_key)`. Might be worth pointing this on in t",https://github.com/bitcoin/bitcoin/pull/14477#issuecomment-434280868,434280868,
laanwj,2018-11-23T12:07:38Z,utACK 109699dd33c72539fc33619f7836b8088f63182c,https://github.com/bitcoin/bitcoin/pull/14477#issuecomment-441225222,441225222,
ryanofsky,2018-10-16T18:22:29Z,Should this be returning m_descriptor->IsSolvable() instead of true? Maybe add an explanatory comment if returning true here is actually correct.,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r225654846,225654846,src/script/descriptor.cpp
ryanofsky,2018-10-16T18:36:05Z,"Would it be useful to mention that raw and address descriptors are always considered unsolvable? It seems like this would make the description more concrete, and make it clear that a raw P2PK descriptor is not considered solvable (for example).",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r225660827,225660827,src/script/descriptor.h
ryanofsky,2018-10-16T18:36:55Z,"Curious where this might be used in the future, since right now it is only called by test code.",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r225661115,225661115,src/script/descriptor.h
ryanofsky,2018-10-16T18:42:22Z,"This is a very picky comment, but maybe reverse the arguments so the test more consistently uses the CHECK_EQUAL(actual, expected) form.",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r225662927,225662927,src/test/descriptor_tests.cpp
sipa,2018-10-17T01:23:04Z,"It is actually correct, but so if your suggestion, which is much more obvious.\n\nThe reason is that the only non-solvable constructions (`raw` and `addr`) are only allowed at the top level anyway, so anything embedded in `sh` or `wsh` cannot be non-solvable.",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r225756320,225756320,src/script/descriptor.cpp
sipa,2018-10-17T01:26:56Z,Good idea.,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r225756795,225756795,src/script/descriptor.h
sipa,2018-10-17T01:28:40Z,For example an `descriptorprocesspsbt` RPC can complain if a non-solvable descriptor is passed (which is useless for its purpose).,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r225756980,225756980,src/script/descriptor.h
sipa,2018-10-17T01:29:12Z,Done.,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r225757067,225757067,src/test/descriptor_tests.cpp
promag,2018-10-17T14:31:58Z,`assert found`,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r225955422,225955422,test/functional/wallet_address_types.py
promag,2018-10-17T14:34:15Z,nit sort.,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r225956442,225956442,src/wallet/rpcwallet.cpp
sipa,2018-10-19T01:43:32Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r226514670,226514670,src/wallet/rpcwallet.cpp
sipa,2018-10-19T01:43:41Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r226514688,226514688,test/functional/wallet_address_types.py
ryanofsky,2018-10-19T16:42:02Z,"I think it would be nicer to call this ""solvable"" instead of ""issolvable"" for consistency with `listunspent`. This would be less consistent with other fields here like ""iswatchonly"", but I think it's worse to have different names for the same field than different styles of names for different fields.",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r226710478,226710478,src/wallet/rpcwallet.cpp
ryanofsky,2018-10-19T16:44:37Z,"It seems like it'd be good to check inferred origins instead of skipping them. If it isn't easy to do this, maybe you could add a comment to the test saying why.",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r226711251,226711251,test/functional/wallet_address_types.py
sipa,2018-10-19T23:03:20Z,Done.,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r226801534,226801534,src/wallet/rpcwallet.cpp
sipa,2018-10-19T23:05:28Z,"Done, rewritten the test to compare with information put in PSBT (which also reports fingerprint and path in `decodepsbt`).",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r226801775,226801775,test/functional/wallet_address_types.py
ryanofsky,2018-10-22T21:35:51Z,"Minor python style suggestion: You can usually avoid the need to look up keys multiple times using `.get()`. For example, you could write this check as\n\n```python3\nassert_equals(info.get('solvable'), True)\n```",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r227147089,227147089,test/functional/wallet_address_types.py
meshcollider,2018-10-25T08:16:57Z,What is the point of the `ParseScriptContext` if it is never used? Why not just remove it?,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r228074385,228074385,src/script/descriptor.cpp
meshcollider,2018-10-25T08:18:31Z,Why not just put the InferDescriptor() part in the if-statement below like you did for `getaddressinfo`? `descriptor` is not used otherwise,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r228074866,228074866,src/wallet/rpcwallet.cpp
ryanofsky,2018-10-30T18:00:49Z,"In commit ""Add matching descriptors to scantxoutset output + tests"" (fe9b68a81a6f3a9abac7b3b7740d5019129d4fff)\n\nI think I agree with @Sjors in https://github.com/bitcoin/bitcoin/pull/14477#issuecomment-434280868 that behavior that comes from inferring a descriptor here, instead of deriving it directly from `desc` above, is a little unintuitive. IMO, it'd be nicer if `Expand` took an optional `",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r229421663,229421663,src/rpc/blockchain.cpp
sipa,2018-10-30T19:00:37Z,"Sorry I missed this, but I'd prefer not rewriting commits now.",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r229444346,229444346,test/functional/wallet_address_types.py
sipa,2018-10-30T19:02:36Z,"It can be used for extra sanity checking (like rejecting malformed constructions with an uncompressed pubkey inside a witness) early, instead of having them fail when expanding the inferred descriptor.",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r229445012,229445012,src/script/descriptor.cpp
sipa,2018-10-30T19:07:14Z,"That makes sense. The inferred descriptor is functionally equivalent with a more straightforward specialization of the descriptor you're suggesting, but descriptors are intended to at least be somewhat human readable, so this may matter.\n\nHowever, it's quite a bit of code to implement that (it needs specialization code for a number of constructions, including `combo()` which would need to get ",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r229446517,229446517,src/rpc/blockchain.cpp
promag,2018-11-04T18:47:37Z,Could be `const auto&`?,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r230600398,230600398,src/rpc/blockchain.cpp
promag,2018-11-04T18:50:33Z,Could add that note to the code otherwise it can be removed in the future?,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r230600484,230600484,src/script/descriptor.cpp
practicalswift,2018-11-12T16:41:26Z,"Nit: Use another variable name to avoid showing `desc` declared on line 2133 (`auto desc = Parse(desc_str, provider);`)?",https://github.com/bitcoin/bitcoin/pull/14477#discussion_r232730539,232730539,src/rpc/blockchain.cpp
sipa,2018-11-14T22:28:02Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r233645546,233645546,test/functional/wallet_address_types.py
sipa,2018-11-14T22:28:08Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r233645573,233645573,src/wallet/rpcwallet.cpp
sipa,2018-11-14T22:28:17Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r233645605,233645605,src/rpc/blockchain.cpp
sipa,2018-11-14T22:28:23Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14477#discussion_r233645640,233645640,src/rpc/blockchain.cpp
