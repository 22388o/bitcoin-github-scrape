[
  {
    "sha": "df4c642714c193372b8f4ddd0364b8cc9692ad86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjRjNjQyNzE0YzE5MzM3MmI4ZjRkZGQwMzY0YjhjYzk2OTJhZDg2",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-04-27T23:34:31Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-04-27T23:34:31Z"
      },
      "message": "wip: Only support shared validation interfaces",
      "tree": {
        "sha": "e57949819817547952136127682e4956b73bb81a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e57949819817547952136127682e4956b73bb81a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df4c642714c193372b8f4ddd0364b8cc9692ad86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df4c642714c193372b8f4ddd0364b8cc9692ad86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df4c642714c193372b8f4ddd0364b8cc9692ad86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df4c642714c193372b8f4ddd0364b8cc9692ad86/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eef90c14ed0f559e3f6e187341009270b84f45cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eef90c14ed0f559e3f6e187341009270b84f45cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eef90c14ed0f559e3f6e187341009270b84f45cb"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 64,
      "deletions": 84
    },
    "files": [
      {
        "sha": "42fe60acfcedb2401df0ea5f5429e56bdf4a9930",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -48,8 +48,6 @@ void BaseIndex::DB::WriteBestBlock(CDBBatch& batch, const CBlockLocator& locator\n \n BaseIndex::~BaseIndex()\n {\n-    Interrupt();\n-    Stop();\n }\n \n bool BaseIndex::Init()\n@@ -302,7 +300,7 @@ void BaseIndex::Start()\n {\n     // Need to register this ValidationInterface before running Init(), so that\n     // callbacks are not missed if Init sets m_synced to true.\n-    RegisterValidationInterface(this);\n+    RegisterSharedValidationInterface(shared_from_this());\n     if (!Init()) {\n         FatalError(\"%s: %s failed to initialize\", __func__, GetName());\n         return;\n@@ -314,7 +312,7 @@ void BaseIndex::Start()\n \n void BaseIndex::Stop()\n {\n-    UnregisterValidationInterface(this);\n+    UnregisterSharedValidationInterface(shared_from_this());\n \n     if (m_thread_sync.joinable()) {\n         m_thread_sync.join();"
      },
      {
        "sha": "d398bc00540b378a4949d8a40130935fe01065a8",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -18,7 +18,7 @@ class CBlockIndex;\n  * CValidationInterface and ensures blocks are indexed sequentially according\n  * to their position in the active chain.\n  */\n-class BaseIndex : public CValidationInterface\n+class BaseIndex : public CValidationInterface, public std::enable_shared_from_this<BaseIndex>\n {\n protected:\n     class DB : public CDBWrapper"
      },
      {
        "sha": "c9c98e0ff38d733140d771981c7af672f4bf019d",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -15,7 +15,7 @@ constexpr char DB_BEST_BLOCK = 'B';\n constexpr char DB_TXINDEX = 't';\n constexpr char DB_TXINDEX_BLOCK = 'T';\n \n-std::unique_ptr<TxIndex> g_txindex;\n+std::shared_ptr<TxIndex> g_txindex;\n \n struct CDiskTxPos : public FlatFilePos\n {"
      },
      {
        "sha": "3fcd87e040cdf6b87ff9dd33305da8d8628100de",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -49,6 +49,6 @@ class TxIndex final : public BaseIndex\n };\n \n /// The global transaction index, used in GetTransaction. May be null.\n-extern std::unique_ptr<TxIndex> g_txindex;\n+extern std::shared_ptr<TxIndex> g_txindex;\n \n #endif // BITCOIN_INDEX_TXINDEX_H"
      },
      {
        "sha": "50c86343f64b39500254797997e35ec9887cb99f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -196,7 +196,7 @@ void Shutdown(NodeContext& node)\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n-    if (node.peer_logic) UnregisterValidationInterface(node.peer_logic.get());\n+    if (node.peer_logic) UnregisterSharedValidationInterface(node.peer_logic);\n     // Follow the lock order requirements:\n     // * CheckForStaleTipAndEvictPeers locks cs_main before indirectly calling GetExtraOutboundCount\n     //   which locks cs_vNodes.\n@@ -286,9 +286,8 @@ void Shutdown(NodeContext& node)\n \n #if ENABLE_ZMQ\n     if (g_zmq_notification_interface) {\n-        UnregisterValidationInterface(g_zmq_notification_interface);\n-        delete g_zmq_notification_interface;\n-        g_zmq_notification_interface = nullptr;\n+        UnregisterSharedValidationInterface(g_zmq_notification_interface);\n+        g_zmq_notification_interface.reset();\n     }\n #endif\n \n@@ -1364,7 +1363,7 @@ bool AppInitMain(NodeContext& node)\n     node.mempool = &::mempool;\n \n     node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), *node.scheduler, *node.mempool));\n-    RegisterValidationInterface(node.peer_logic.get());\n+    RegisterSharedValidationInterface(node.peer_logic);\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n@@ -1481,7 +1480,7 @@ bool AppInitMain(NodeContext& node)\n     g_zmq_notification_interface = CZMQNotificationInterface::Create();\n \n     if (g_zmq_notification_interface) {\n-        RegisterValidationInterface(g_zmq_notification_interface);\n+        RegisterSharedValidationInterface(g_zmq_notification_interface);\n     }\n #endif\n     uint64_t nMaxOutboundLimit = 0; //unlimited unless -maxuploadtarget is set"
      },
      {
        "sha": "e9d308c3b31aa4413ecb2aafae0afd79cd35455d",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -32,7 +32,7 @@ class ChainClient;\n struct NodeContext {\n     std::unique_ptr<CConnman> connman;\n     CTxMemPool* mempool{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n-    std::unique_ptr<PeerLogicValidation> peer_logic;\n+    std::shared_ptr<PeerLogicValidation> peer_logic;\n     std::unique_ptr<BanMan> banman;\n     ArgsManager* args{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<interfaces::Chain> chain;"
      },
      {
        "sha": "5a9552c125be6f69784110f8da9d8523d9d207ad",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -942,17 +942,17 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     }\n \n     bool new_block;\n-    submitblock_StateCatcher sc(block.GetHash());\n-    RegisterValidationInterface(&sc);\n+    auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n+    RegisterSharedValidationInterface(sc);\n     bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n-    UnregisterValidationInterface(&sc);\n+    UnregisterSharedValidationInterface(sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n-    if (!sc.found) {\n+    if (!sc->found) {\n         return \"inconclusive\";\n     }\n-    return BIP22ValidationResult(sc.state);\n+    return BIP22ValidationResult(sc->state);\n }\n \n static UniValue submitheader(const JSONRPCRequest& request)"
      },
      {
        "sha": "5ac052575073552a704054d5331eaab1f4c578de",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -23,11 +23,11 @@ struct BuildChainTestingSetup : public TestChain100Setup {\n     bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key, size_t length, std::vector<std::shared_ptr<CBlock>>& chain);\n };\n \n-static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\n+static bool CheckFilterLookups(std::shared_ptr<BlockFilterIndex> filter_index, const CBlockIndex* block_index,\n                                uint256& last_header)\n {\n     BlockFilter expected_filter;\n-    if (!ComputeFilter(filter_index.GetFilterType(), block_index, expected_filter)) {\n+    if (!ComputeFilter(filter_index->GetFilterType(), block_index, expected_filter)) {\n         BOOST_ERROR(\"ComputeFilter failed on block \" << block_index->nHeight);\n         return false;\n     }\n@@ -37,10 +37,10 @@ static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex\n     std::vector<BlockFilter> filters;\n     std::vector<uint256> filter_hashes;\n \n-    BOOST_CHECK(filter_index.LookupFilter(block_index, filter));\n-    BOOST_CHECK(filter_index.LookupFilterHeader(block_index, filter_header));\n-    BOOST_CHECK(filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n-    BOOST_CHECK(filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+    BOOST_CHECK(filter_index->LookupFilter(block_index, filter));\n+    BOOST_CHECK(filter_index->LookupFilterHeader(block_index, filter_header));\n+    BOOST_CHECK(filter_index->LookupFilterRange(block_index->nHeight, block_index, filters));\n+    BOOST_CHECK(filter_index->LookupFilterHashRange(block_index->nHeight, block_index,\n                                                    filter_hashes));\n \n     BOOST_CHECK_EQUAL(filters.size(), 1);\n@@ -104,7 +104,7 @@ bool BuildChainTestingSetup::BuildChain(const CBlockIndex* pindex,\n \n BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n {\n-    BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n+    auto filter_index = std::make_shared<BlockFilterIndex>(BlockFilterType::BASIC, 1 << 20, true);\n \n     uint256 last_header;\n \n@@ -120,23 +120,23 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         for (const CBlockIndex* block_index = ::ChainActive().Genesis();\n              block_index != nullptr;\n              block_index = ::ChainActive().Next(block_index)) {\n-            BOOST_CHECK(!filter_index.LookupFilter(block_index, filter));\n-            BOOST_CHECK(!filter_index.LookupFilterHeader(block_index, filter_header));\n-            BOOST_CHECK(!filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n-            BOOST_CHECK(!filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+            BOOST_CHECK(!filter_index->LookupFilter(block_index, filter));\n+            BOOST_CHECK(!filter_index->LookupFilterHeader(block_index, filter_header));\n+            BOOST_CHECK(!filter_index->LookupFilterRange(block_index->nHeight, block_index, filters));\n+            BOOST_CHECK(!filter_index->LookupFilterHashRange(block_index->nHeight, block_index,\n                                                             filter_hashes));\n         }\n     }\n \n     // BlockUntilSyncedToCurrentChain should return false before index is started.\n-    BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n+    BOOST_CHECK(!filter_index->BlockUntilSyncedToCurrentChain());\n \n-    filter_index.Start();\n+    filter_index->Start();\n \n     // Allow filter index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;\n     int64_t time_start = GetTimeMillis();\n-    while (!filter_index.BlockUntilSyncedToCurrentChain()) {\n+    while (!filter_index->BlockUntilSyncedToCurrentChain()) {\n         BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n         UninterruptibleSleep(std::chrono::milliseconds{100});\n     }\n@@ -181,7 +181,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n             block_index = LookupBlockIndex(block->GetHash());\n         }\n \n-        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        BOOST_CHECK(filter_index->BlockUntilSyncedToCurrentChain());\n         CheckFilterLookups(filter_index, block_index, chainA_last_header);\n     }\n \n@@ -199,7 +199,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n             block_index = LookupBlockIndex(block->GetHash());\n         }\n \n-        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        BOOST_CHECK(filter_index->BlockUntilSyncedToCurrentChain());\n         CheckFilterLookups(filter_index, block_index, chainB_last_header);\n     }\n \n@@ -213,7 +213,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n             block_index = LookupBlockIndex(block->GetHash());\n         }\n \n-        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        BOOST_CHECK(filter_index->BlockUntilSyncedToCurrentChain());\n         CheckFilterLookups(filter_index, block_index, chainA_last_header);\n     }\n \n@@ -233,14 +233,14 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n              LOCK(cs_main);\n              block_index = LookupBlockIndex(chainA[i]->GetHash());\n          }\n-         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+         BOOST_CHECK(filter_index->BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainA_last_header);\n \n          {\n              LOCK(cs_main);\n              block_index = LookupBlockIndex(chainB[i]->GetHash());\n          }\n-         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+         BOOST_CHECK(filter_index->BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainB_last_header);\n      }\n \n@@ -252,17 +252,17 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         LOCK(cs_main);\n         tip = ::ChainActive().Tip();\n     }\n-    BOOST_CHECK(filter_index.LookupFilterRange(0, tip, filters));\n-    BOOST_CHECK(filter_index.LookupFilterHashRange(0, tip, filter_hashes));\n+    BOOST_CHECK(filter_index->LookupFilterRange(0, tip, filters));\n+    BOOST_CHECK(filter_index->LookupFilterHashRange(0, tip, filter_hashes));\n \n     BOOST_CHECK_EQUAL(filters.size(), tip->nHeight + 1);\n     BOOST_CHECK_EQUAL(filter_hashes.size(), tip->nHeight + 1);\n \n     filters.clear();\n     filter_hashes.clear();\n \n-    filter_index.Interrupt();\n-    filter_index.Stop();\n+    filter_index->Interrupt();\n+    filter_index->Stop();\n }\n \n BOOST_FIXTURE_TEST_CASE(blockfilter_index_init_destroy, BasicTestingSetup)"
      },
      {
        "sha": "a5798f5373bed9ed54b5cbb36fcbef9f0bcdef85",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -14,38 +14,38 @@ BOOST_AUTO_TEST_SUITE(txindex_tests)\n \n BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n {\n-    TxIndex txindex(1 << 20, true);\n+    auto txindex = std::make_shared<TxIndex>(1 << 20, true);\n \n     CTransactionRef tx_disk;\n     uint256 block_hash;\n \n     // Transaction should not be found in the index before it is started.\n     for (const auto& txn : m_coinbase_txns) {\n-        BOOST_CHECK(!txindex.FindTx(txn->GetHash(), block_hash, tx_disk));\n+        BOOST_CHECK(!txindex->FindTx(txn->GetHash(), block_hash, tx_disk));\n     }\n \n     // BlockUntilSyncedToCurrentChain should return false before txindex is started.\n-    BOOST_CHECK(!txindex.BlockUntilSyncedToCurrentChain());\n+    BOOST_CHECK(!txindex->BlockUntilSyncedToCurrentChain());\n \n-    txindex.Start();\n+    txindex->Start();\n \n     // Allow tx index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;\n     int64_t time_start = GetTimeMillis();\n-    while (!txindex.BlockUntilSyncedToCurrentChain()) {\n+    while (!txindex->BlockUntilSyncedToCurrentChain()) {\n         BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n         UninterruptibleSleep(std::chrono::milliseconds{100});\n     }\n \n     // Check that txindex excludes genesis block transactions.\n     const CBlock& genesis_block = Params().GenesisBlock();\n     for (const auto& txn : genesis_block.vtx) {\n-        BOOST_CHECK(!txindex.FindTx(txn->GetHash(), block_hash, tx_disk));\n+        BOOST_CHECK(!txindex->FindTx(txn->GetHash(), block_hash, tx_disk));\n     }\n \n     // Check that txindex has all txs that were in the chain before it started.\n     for (const auto& txn : m_coinbase_txns) {\n-        if (!txindex.FindTx(txn->GetHash(), block_hash, tx_disk)) {\n+        if (!txindex->FindTx(txn->GetHash(), block_hash, tx_disk)) {\n             BOOST_ERROR(\"FindTx failed\");\n         } else if (tx_disk->GetHash() != txn->GetHash()) {\n             BOOST_ERROR(\"Read incorrect tx\");\n@@ -59,16 +59,16 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n         const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n         const CTransaction& txn = *block.vtx[0];\n \n-        BOOST_CHECK(txindex.BlockUntilSyncedToCurrentChain());\n-        if (!txindex.FindTx(txn.GetHash(), block_hash, tx_disk)) {\n+        BOOST_CHECK(txindex->BlockUntilSyncedToCurrentChain());\n+        if (!txindex->FindTx(txn.GetHash(), block_hash, tx_disk)) {\n             BOOST_ERROR(\"FindTx failed\");\n         } else if (tx_disk->GetHash() != txn.GetHash()) {\n             BOOST_ERROR(\"Read incorrect tx\");\n         }\n     }\n \n     // shutdown sequence (c.f. Shutdown() in init.cpp)\n-    txindex.Stop();\n+    txindex->Stop();\n \n     // Let scheduler events finish running to avoid accessing any memory related to txindex after it is destructed\n     SyncWithValidationInterfaceQueue();"
      },
      {
        "sha": "e8bd2a266bd20cadb7f7acb0d6f942f3b869b55a",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -161,7 +161,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     m_node.mempool->setSanityCheck(1.0);\n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n-    m_node.peer_logic = MakeUnique<PeerLogicValidation>(m_node.connman.get(), m_node.banman.get(), *m_node.scheduler, *m_node.mempool);\n+    m_node.peer_logic = std::make_shared<PeerLogicValidation>(m_node.connman.get(), m_node.banman.get(), *m_node.scheduler, *m_node.mempool);\n     {\n         CConnman::Options options;\n         options.m_msgproc = m_node.peer_logic.get();"
      },
      {
        "sha": "2d887aea708fad1ed6dfab77adc69e032f9a8425",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -175,8 +175,8 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n         LOCK(cs_main);\n         initial_tip = ::ChainActive().Tip();\n     }\n-    TestSubscriber sub(initial_tip->GetBlockHash());\n-    RegisterValidationInterface(&sub);\n+    auto sub = std::make_shared<TestSubscriber>(initial_tip->GetBlockHash());\n+    RegisterSharedValidationInterface(sub);\n \n     // create a bunch of threads that repeatedly process a block generated above at random\n     // this will create parallelism and randomness inside validation - the ValidationInterface\n@@ -208,10 +208,10 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n         UninterruptibleSleep(std::chrono::milliseconds{100});\n     }\n \n-    UnregisterValidationInterface(&sub);\n+    UnregisterSharedValidationInterface(sub);\n \n     LOCK(cs_main);\n-    BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n+    BOOST_CHECK_EQUAL(sub->m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n /**"
      },
      {
        "sha": "a2e9286618adcce0f25aa1e97ff73cfd57dcee6a",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -120,21 +120,10 @@ void RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface> pwa\n     g_signals.m_internals->Register(std::move(pwalletIn));\n }\n \n-void RegisterValidationInterface(CValidationInterface* callbacks)\n-{\n-    // Create a shared_ptr with a no-op deleter - CValidationInterface lifecycle\n-    // is managed by the caller.\n-    RegisterSharedValidationInterface({callbacks, [](CValidationInterface*){}});\n-}\n-\n void UnregisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks)\n {\n-    UnregisterValidationInterface(callbacks.get());\n-}\n-\n-void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     if (g_signals.m_internals) {\n-        g_signals.m_internals->Unregister(pwalletIn);\n+        g_signals.m_internals->Unregister(callbacks.get());\n     }\n }\n "
      },
      {
        "sha": "5096e99c2f279bc99dc9c2498a62ff3dad348f1a",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -24,10 +24,6 @@ class CScheduler;\n \n // These functions dispatch to one or all registered wallets\n \n-/** Register a wallet to receive updates from core */\n-void RegisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister a wallet from core */\n-void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllValidationInterfaces();\n \n@@ -180,7 +176,7 @@ class CMainSignals {\n     std::unique_ptr<MainSignalsInstance> m_internals;\n \n     friend void ::RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface>);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterSharedValidationInterface(std::shared_ptr<CValidationInterface>);\n     friend void ::UnregisterAllValidationInterfaces();\n     friend void ::CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n "
      },
      {
        "sha": "ded7c9ac0af816cf5e7b8b04b8316feb613d95b6",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -36,9 +36,9 @@ std::list<const CZMQAbstractNotifier*> CZMQNotificationInterface::GetActiveNotif\n     return result;\n }\n \n-CZMQNotificationInterface* CZMQNotificationInterface::Create()\n+std::unique_ptr<CZMQNotificationInterface> CZMQNotificationInterface::Create()\n {\n-    CZMQNotificationInterface* notificationInterface = nullptr;\n+    std::unique_ptr<CZMQNotificationInterface> notificationInterface;\n     std::map<std::string, CZMQNotifierFactory> factories;\n     std::list<CZMQAbstractNotifier*> notifiers;\n \n@@ -64,13 +64,11 @@ CZMQNotificationInterface* CZMQNotificationInterface::Create()\n \n     if (!notifiers.empty())\n     {\n-        notificationInterface = new CZMQNotificationInterface();\n+        notificationInterface.reset(new CZMQNotificationInterface);\n         notificationInterface->notifiers = notifiers;\n \n-        if (!notificationInterface->Initialize())\n-        {\n-            delete notificationInterface;\n-            notificationInterface = nullptr;\n+        if (!notificationInterface->Initialize()) {\n+            return nullptr;\n         }\n     }\n \n@@ -193,4 +191,4 @@ void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CB\n     }\n }\n \n-CZMQNotificationInterface* g_zmq_notification_interface = nullptr;\n+std::shared_ptr<CZMQNotificationInterface> g_zmq_notification_interface;"
      },
      {
        "sha": "0fceb7b8dbba9d80e2abd28733aae2951fd09443",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df4c642714c193372b8f4ddd0364b8cc9692ad86/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=df4c642714c193372b8f4ddd0364b8cc9692ad86",
        "patch": "@@ -18,7 +18,7 @@ class CZMQNotificationInterface final : public CValidationInterface\n \n     std::list<const CZMQAbstractNotifier*> GetActiveNotifiers() const;\n \n-    static CZMQNotificationInterface* Create();\n+    static std::unique_ptr<CZMQNotificationInterface> Create();\n \n protected:\n     bool Initialize();\n@@ -37,6 +37,6 @@ class CZMQNotificationInterface final : public CValidationInterface\n     std::list<CZMQAbstractNotifier*> notifiers;\n };\n \n-extern CZMQNotificationInterface* g_zmq_notification_interface;\n+extern std::shared_ptr<CZMQNotificationInterface> g_zmq_notification_interface;\n \n #endif // BITCOIN_ZMQ_ZMQNOTIFICATIONINTERFACE_H"
      }
    ]
  }
]