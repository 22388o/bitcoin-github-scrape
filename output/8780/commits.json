[
  {
    "sha": "ddddaafa4aca2725a18606a38c3341a8637b0c3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGRkYWFmYTRhY2EyNzI1YTE4NjA2YTM4YzMzNDFhODYzN2IwYzNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-21T19:01:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-21T19:19:20Z"
      },
      "message": "[rpc] Deprecate getinfo\n\nThis was replaced by getmininginfo, getnetworkinfo and getwalletinfo",
      "tree": {
        "sha": "82e2ab4b32c6e1ca1d059cacf64ebb975f623e7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82e2ab4b32c6e1ca1d059cacf64ebb975f623e7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddddaafa4aca2725a18606a38c3341a8637b0c3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddddaafa4aca2725a18606a38c3341a8637b0c3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddddaafa4aca2725a18606a38c3341a8637b0c3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddddaafa4aca2725a18606a38c3341a8637b0c3b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf5ebaa921a939cc3a81948a559c1f1ab53d68b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf5ebaa921a939cc3a81948a559c1f1ab53d68b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf5ebaa921a939cc3a81948a559c1f1ab53d68b6"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "c17bacfc79abc65f65b7cde1129df386584da4f3",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddddaafa4aca2725a18606a38c3341a8637b0c3b/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddddaafa4aca2725a18606a38c3341a8637b0c3b/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=ddddaafa4aca2725a18606a38c3341a8637b0c3b",
        "patch": "@@ -122,8 +122,9 @@ def run_test(self):\n         # Fill rest of period with regular version blocks\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n         # Check that we're not getting any versionbit-related errors in\n-        # getinfo()\n-        assert(not self.vb_pattern.match(self.nodes[0].getinfo()[\"errors\"]))\n+        # get*info()\n+        assert(not self.vb_pattern.match(self.nodes[0].getmininginfo()[\"errors\"]))\n+        assert(not self.vb_pattern.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n \n         # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n         # some unknown bit\n@@ -132,8 +133,9 @@ def run_test(self):\n         # Might not get a versionbits-related alert yet, as we should\n         # have gotten a different alert due to more than 51/100 blocks\n         # being of unexpected version.\n-        # Check that getinfo() shows some kind of error.\n-        assert(len(self.nodes[0].getinfo()[\"errors\"]) != 0)\n+        # Check that get*info() shows some kind of error.\n+        assert(\"Unknown block versions\" in self.nodes[0].getmininginfo()[\"errors\"])\n+        assert(\"Unknown block versions\" in self.nodes[0].getnetworkinfo()[\"warnings\"])\n \n         # Mine a period worth of expected blocks so the generic block-version warning\n         # is cleared, and restart the node. This should move the versionbit state\n@@ -148,7 +150,8 @@ def run_test(self):\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n-        assert(len(self.nodes[0].getinfo()[\"errors\"]) != 0)\n+        assert(\"unknown new rules\" in self.nodes[0].getmininginfo()[\"errors\"])\n+        assert(\"unknown new rules\" in self.nodes[0].getnetworkinfo()[\"warnings\"])\n         stop_node(self.nodes[0], 0)\n         wait_bitcoinds()\n         self.test_versionbits_in_alert_file()"
      },
      {
        "sha": "144c2f4cd41d75def983a9ad555af41760eed149",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddddaafa4aca2725a18606a38c3341a8637b0c3b/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddddaafa4aca2725a18606a38c3341a8637b0c3b/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=ddddaafa4aca2725a18606a38c3341a8637b0c3b",
        "patch": "@@ -44,15 +44,15 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n \n     def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n-        Start a node with rpcwallow IP, and request getinfo\n+        Start a node with rpcwallow IP, and request getnetworkinfo\n         at a non-localhost IP.\n         '''\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n         try:\n             # connect to node through non-loopback interface\n             node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n-            node.getinfo()\n+            node.getnetworkinfo()\n         finally:\n             node = None # make sure connection will be garbage collected and closed\n             stop_nodes(self.nodes)"
      },
      {
        "sha": "f0b7e0a07cffaa1e132efccf0e629eb1b99d5c80",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddddaafa4aca2725a18606a38c3341a8637b0c3b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddddaafa4aca2725a18606a38c3341a8637b0c3b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=ddddaafa4aca2725a18606a38c3341a8637b0c3b",
        "patch": "@@ -44,7 +44,7 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw runtime_error(\n             \"getinfo\\n\"\n-            \"Returns an object containing various state info.\\n\"\n+            \"\\nDEPRECATED. Returns an object containing various state info.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"version\\\": xxxxx,           (numeric) the server version\\n\""
      }
    ]
  },
  {
    "sha": "fa6e71b27d00766897f3e69775d450924a58a153",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZlNzFiMjdkMDA3NjY4OTdmM2U2OTc3NWQ0NTA5MjRhNThhMTUz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-25T13:01:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-25T13:01:29Z"
      },
      "message": "[qa] Add getinfo smoke tests and rework versionbits test",
      "tree": {
        "sha": "2bac0e29a09fb651d43f823918ed7a0e7325cb5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bac0e29a09fb651d43f823918ed7a0e7325cb5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6e71b27d00766897f3e69775d450924a58a153",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6e71b27d00766897f3e69775d450924a58a153",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6e71b27d00766897f3e69775d450924a58a153",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6e71b27d00766897f3e69775d450924a58a153/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddddaafa4aca2725a18606a38c3341a8637b0c3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddddaafa4aca2725a18606a38c3341a8637b0c3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddddaafa4aca2725a18606a38c3341a8637b0c3b"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 23,
      "deletions": 20
    },
    "files": [
      {
        "sha": "00dbbc02cf3c7473e93ce34b40a9003f7ee47e1f",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 22,
        "deletions": 19,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6e71b27d00766897f3e69775d450924a58a153/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6e71b27d00766897f3e69775d450924a58a153/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=fa6e71b27d00766897f3e69775d450924a58a153",
        "patch": "@@ -6,6 +6,7 @@\n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+import re\n import time\n from test_framework.blocktools import create_block, create_coinbase\n \n@@ -21,6 +22,10 @@\n VB_TOP_BITS = 0x20000000\n VB_UNKNOWN_BIT = 27 # Choose a bit unassigned to any deployment\n \n+WARN_UNKNOWN_RULES_MINED = \"Unknown block versions being mined! It's possible unknown rules are in effect\"\n+WARN_UNKNOWN_RULES_ACTIVE = \"unknown new rules activated (versionbit {})\".format(VB_UNKNOWN_BIT)\n+VB_PATTERN = re.compile(\"^Warning.*versionbit\")\n+\n # TestNode: bare-bones \"peer\".  Used mostly as a conduit for a test to sending\n # p2p messages to a node, generating the messages in the main testing logic.\n class TestNode(NodeConnCB):\n@@ -65,16 +70,12 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = []\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file\n-        with open(self.alert_filename, 'w') as f:\n+        with open(self.alert_filename, 'w') as _:\n             pass\n-        self.node_options = [\"-debug\", \"-logtimemicros=1\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]\n-        self.nodes.append(start_node(0, self.options.tmpdir, self.node_options))\n-\n-        import re\n-        self.vb_pattern = re.compile(\"^Warning.*versionbit\")\n+        self.extra_args = [[\"-debug\", \"-logtimemicros=1\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n \n     # Send numblocks blocks via peer with nVersionToUse set.\n     def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n@@ -83,7 +84,7 @@ def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n         block_time = self.nodes[0].getblockheader(tip)[\"time\"]+1\n         tip = int(tip, 16)\n \n-        for i in range(numblocks):\n+        for _ in range(numblocks):\n             block = create_block(tip, create_coinbase(height+1), block_time)\n             block.nVersion = nVersionToUse\n             block.solve()\n@@ -96,7 +97,7 @@ def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n     def test_versionbits_in_alert_file(self):\n         with open(self.alert_filename, 'r') as f:\n             alert_text = f.read()\n-        assert(self.vb_pattern.match(alert_text))\n+        assert(VB_PATTERN.match(alert_text))\n \n     def run_test(self):\n         # Setup the p2p connection and start up the network thread.\n@@ -123,8 +124,9 @@ def run_test(self):\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n         # Check that we're not getting any versionbit-related errors in\n         # get*info()\n-        assert(not self.vb_pattern.match(self.nodes[0].getmininginfo()[\"errors\"]))\n-        assert(not self.vb_pattern.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(self.nodes[0].getinfo()[\"errors\"]))\n+        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"errors\"]))\n+        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n \n         # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n         # some unknown bit\n@@ -134,8 +136,9 @@ def run_test(self):\n         # have gotten a different alert due to more than 51/100 blocks\n         # being of unexpected version.\n         # Check that get*info() shows some kind of error.\n-        assert(\"Unknown block versions\" in self.nodes[0].getmininginfo()[\"errors\"])\n-        assert(\"Unknown block versions\" in self.nodes[0].getnetworkinfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getinfo()[\"errors\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"errors\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n \n         # Mine a period worth of expected blocks so the generic block-version warning\n         # is cleared, and restart the node. This should move the versionbit state\n@@ -144,21 +147,21 @@ def run_test(self):\n         stop_node(self.nodes[0], 0)\n         wait_bitcoinds()\n         # Empty out the alert file\n-        with open(self.alert_filename, 'w') as f:\n+        with open(self.alert_filename, 'w') as _:\n             pass\n-        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"])\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n-        assert(\"unknown new rules\" in self.nodes[0].getmininginfo()[\"errors\"])\n-        assert(\"unknown new rules\" in self.nodes[0].getnetworkinfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getinfo()[\"errors\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"errors\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n         stop_node(self.nodes[0], 0)\n         wait_bitcoinds()\n         self.test_versionbits_in_alert_file()\n \n         # Test framework expects the node to still be running...\n-        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"])\n-\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n \n if __name__ == '__main__':\n     VersionBitsWarningTest().main()"
      },
      {
        "sha": "085024e26838435115a7b37890f427fc03d8bb3c",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6e71b27d00766897f3e69775d450924a58a153/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6e71b27d00766897f3e69775d450924a58a153/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=fa6e71b27d00766897f3e69775d450924a58a153",
        "patch": "@@ -44,7 +44,7 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n \n     def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n-        Start a node with rpcwallow IP, and request getnetworkinfo\n+        Start a node with rpcallow IP, and request getnetworkinfo\n         at a non-localhost IP.\n         '''\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]"
      }
    ]
  }
]