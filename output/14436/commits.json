[
  {
    "sha": "b191c7dfb7ede3f74edb3a32b8ac6fa2f4d6b78a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTkxYzdkZmI3ZWRlM2Y3NGVkYjNhMzJiOGFjNmZhMmY0ZDZiNzhh",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-10-09T02:19:56Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-10-16T17:04:42Z"
      },
      "message": "doc: add comment explaining recentRejects-DoS behavior\n\nWhen we receive invalid txs for the first time, we mark the sender as\nmisbehaving. If we receive the same tx before a new block is seen, we *don't*\npunish the second sender (in the same way we do the original sender). It wasn't\ninitially clear to me that this is intentional, so add a clarifying comment.",
      "tree": {
        "sha": "9b90d65e9d3586d0aca2743c40449b66320f8b84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b90d65e9d3586d0aca2743c40449b66320f8b84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b191c7dfb7ede3f74edb3a32b8ac6fa2f4d6b78a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b191c7dfb7ede3f74edb3a32b8ac6fa2f4d6b78a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b191c7dfb7ede3f74edb3a32b8ac6fa2f4d6b78a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b191c7dfb7ede3f74edb3a32b8ac6fa2f4d6b78a/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4de0b5f39cc35636d499ad29ee3c63384b13fc76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4de0b5f39cc35636d499ad29ee3c63384b13fc76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4de0b5f39cc35636d499ad29ee3c63384b13fc76"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "51b545efa0e031b5c3384b960e91de34fc932dbf",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b191c7dfb7ede3f74edb3a32b8ac6fa2f4d6b78a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b191c7dfb7ede3f74edb3a32b8ac6fa2f4d6b78a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b191c7dfb7ede3f74edb3a32b8ac6fa2f4d6b78a",
        "patch": "@@ -2357,6 +2357,23 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         for (const CTransactionRef& removedTx : lRemovedTxn)\n             AddToCompactExtraTransactions(removedTx);\n \n+        // If a tx has been detected by recentRejects, we will have reached\n+        // this point and the tx will have been ignored. Because we haven't run\n+        // the tx through AcceptToMemoryPool, we won't have computed a DoS\n+        // score for it or determined exactly why we consider it invalid.\n+        //\n+        // This means we won't penalize any peer subsequently relaying a DoSy\n+        // tx (even if we penalized the first peer who gave it to us) because\n+        // we have to account for recentRejects showing false positives. In\n+        // other words, we shouldn't penalize a peer if we aren't *sure* they\n+        // submitted a DoSy tx.\n+        //\n+        // Note that recentRejects doesn't just record DoSy or invalid\n+        // transactions, but any tx not accepted by the mempool, which may be\n+        // due to node policy (vs. consensus). So we can't blanket penalize a\n+        // peer simply for relaying a tx that our recentRejects has caught,\n+        // regardless of false positives.\n+\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n         {"
      }
    ]
  }
]