promag,2019-06-13 21:58:49,Maybe just ditch `ReturnKey` and always `KeepKey` implicitly if a key was reserved? I think this would be good simplification. This is also compatible with the 2nd commit.,https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-501894108,501894108,
DrahtBot,2019-06-13 22:01:04,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14582](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14582.html) (wallet: try -avoidpartialspends mode and us",https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-501894750,501894750,
instagibbs,2019-06-14 11:24:51,@promag that's basically what I was trying in https://github.com/bitcoin/bitcoin/pull/15796 originally. This can lead to many burned keys unnecessarily. I think this PR is actually even more of a simplification since it reduces the lifecycle of the reserve keys as well.,https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-502072491,502072491,
promag,2019-06-14 11:42:23,"> This can lead to many burned keys unnecessarily\n\nEven with this change this happens even when creating the transaction fails:\n```cpp\n    ret = reservekey.GetReservedKey(vchPubKey, true);\n    LearnRelatedScripts(vchPubKey, change_type);          // will call AddCScript\n\n```\nSo IIUC it should always keep the key.",https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-502077059,502077059,
instagibbs,2019-06-14 13:05:18,"@promag AFAICT there is no case, except maybe mempool chain limits being busted, where keys will be burned. I'm not sure what you're saying with respect to `GetReservedKey`, all that does is make `KeepKey` a non-no-op. In the case of transaction *creation* failure, the key is returned to the keypool.",https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-502101659,502101659,
promag,2019-06-18 14:48:04,"I mean that once `GetReservedKey` is called (which calls `CWallet::ReserveKeyFromKeyPool`), it should never return the key to the pool. Please see a33189bd9.",https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-503169794,503169794,
instagibbs,2019-06-18 15:02:27,"@promag That's not the case though. There are a number of reasons why a valid transaction is unable to be made, *after* the key is reserved. Insufficient fee, transaction too large, etc. This results in additional burned keys.",https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-503176354,503176354,
DrahtBot,2019-07-10 11:31:24,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-510023432,510023432,
instagibbs,2019-07-10 13:36:43,rebased,https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-510064002,510064002,
instagibbs,2019-07-10 15:41:33,fixed and updated OP/description as per @achow101 suggestions,https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-510115918,510115918,
achow101,2019-07-10 16:39:44,ACK e10e1e8db043e9b7c113e07faf408f337c1b732d Reviewed the diff,https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-510138063,510138063,
stevenroose,2019-07-16 09:58:58,utACK e10e1e8db043e9b7c113e07faf408f337c1b732d,https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-511751001,511751001,
jonasschnelli,2019-07-16 16:17:16,"Looks good. I initially thought this includes ""createrawtransaction"" which I think should be stateless,... but `createrawtransaction` used `ConstructTransaction` and not `CreateTransaction`.\n\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-511885583,511885583,
ryanofsky,2019-07-18 16:55:00,"Should this have release notes? IIUC before this change, if you created a transaction in the GUI and pressed ""Cancel"" instead of ""Yes"" in the confirmation dialog, it would previously not affect the change keypool, but now it will remove the key from the pool and mark it used.",https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-512899963,512899963,
instagibbs,2019-07-18 17:05:54,@ryanofsky Forgot this case in OP. Considering it's unlikely(?) to be an automated process I don't think it necessitates release notes but that is just my estimation.,https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-512903849,512903849,
ryanofsky,2019-07-18 17:14:26,"Sure, could just add the https://github.com/bitcoin/bitcoin/labels/Needs%20release%20note tag for consideration when there is a release.",https://github.com/bitcoin/bitcoin/pull/16208#issuecomment-512906796,512906796,
achow101,2019-07-10 15:18:57,This change should be in the previous commit.,https://github.com/bitcoin/bitcoin/pull/16208#discussion_r302124454,302124454,src/wallet/wallet.cpp
achow101,2019-07-10 15:19:43,nit: should be `reserve an address`.,https://github.com/bitcoin/bitcoin/pull/16208#discussion_r302124889,302124889,src/wallet/wallet.h
instagibbs,2019-07-10 15:39:38,done,https://github.com/bitcoin/bitcoin/pull/16208#discussion_r302136188,302136188,src/wallet/wallet.cpp
instagibbs,2019-07-10 15:39:42,done,https://github.com/bitcoin/bitcoin/pull/16208#discussion_r302136247,302136247,src/wallet/wallet.h
meshcollider,2019-07-17 07:42:23,"Not quite true, it is still used in GetNewChangeDestination() which is called by the `getrawchangeaddress` RPC",https://github.com/bitcoin/bitcoin/pull/16208#discussion_r304260302,304260302,src/wallet/wallet.h
