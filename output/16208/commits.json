[
  {
    "sha": "d9ff862f2d24784ee081a8f62a76ffdfe409c10a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWZmODYyZjJkMjQ3ODRlZTA4MWE4ZjYyYTc2ZmZkZmU0MDljMTBh",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-06-13T18:12:01Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-07-10T15:38:37Z"
      },
      "message": "CreateTransaction calls KeepDestination on ReserveDestination before success",
      "tree": {
        "sha": "62978768688e6a9c502fb96de79a2d5e4c5caaaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62978768688e6a9c502fb96de79a2d5e4c5caaaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9ff862f2d24784ee081a8f62a76ffdfe409c10a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9ff862f2d24784ee081a8f62a76ffdfe409c10a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9ff862f2d24784ee081a8f62a76ffdfe409c10a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9ff862f2d24784ee081a8f62a76ffdfe409c10a/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c1e45c4c41676f80ac6fb8d48cfbcf839593f19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c1e45c4c41676f80ac6fb8d48cfbcf839593f19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c1e45c4c41676f80ac6fb8d48cfbcf839593f19"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 4,
      "deletions": 8
    },
    "files": [
      {
        "sha": "e6ed69bfd00368161b22078cecd3d94560bb31a0",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9ff862f2d24784ee081a8f62a76ffdfe409c10a/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9ff862f2d24784ee081a8f62a76ffdfe409c10a/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=d9ff862f2d24784ee081a8f62a76ffdfe409c10a",
        "patch": "@@ -281,9 +281,6 @@ Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCo\n         return Result::WALLET_ERROR;\n     }\n \n-    // If change key hasn't been ReturnKey'ed by this point, we take it out of keypool\n-    reservedest.KeepDestination();\n-\n     // Write back new fee if successful\n     new_fee = fee_ret;\n "
      },
      {
        "sha": "75c3989a25631e83fb17c506b3caf2c2a0b99d68",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9ff862f2d24784ee081a8f62a76ffdfe409c10a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9ff862f2d24784ee081a8f62a76ffdfe409c10a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d9ff862f2d24784ee081a8f62a76ffdfe409c10a",
        "patch": "@@ -2674,9 +2674,6 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n \n     if (nChangePosInOut != -1) {\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, tx_new->vout[nChangePosInOut]);\n-        // We don't have the normal Create/Commit cycle, and don't want to risk\n-        // reusing change, so just remove the key from the keypool here.\n-        reservedest.KeepDestination();\n     }\n \n     // Copy output sizes from new transaction; they may have had the fee\n@@ -3070,8 +3067,6 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             }\n         }\n \n-        if (nChangePosInOut == -1) reservedest.ReturnDestination(); // Return any reserved address if we don't have change\n-\n         // Shuffle selected coins and fill in final vin\n         txNew.vin.clear();\n         std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n@@ -3134,6 +3129,10 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n         }\n     }\n \n+    // Before we return success, we assume any change key will be used to prevent\n+    // accidental re-use.\n+    reservedest.KeepDestination();\n+\n     WalletLogPrintf(\"Fee Calculation: Fee:%d Bytes:%u Needed:%d Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n               nFeeRet, nBytes, nFeeNeeded, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,\n               feeCalc.est.pass.start, feeCalc.est.pass.end,"
      }
    ]
  },
  {
    "sha": "e10e1e8db043e9b7c113e07faf408f337c1b732d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTBlMWU4ZGIwNDNlOWI3YzExM2UwN2ZhZjQwOGYzMzdjMWI3MzJk",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-07-10T15:37:45Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-07-10T15:38:37Z"
      },
      "message": "Restrict lifetime of ReserveDestination to CWallet::CreateTransaction",
      "tree": {
        "sha": "17eb6f8da853e1ddb64e6d52b7a371294ec30245",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17eb6f8da853e1ddb64e6d52b7a371294ec30245"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e10e1e8db043e9b7c113e07faf408f337c1b732d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10e1e8db043e9b7c113e07faf408f337c1b732d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e10e1e8db043e9b7c113e07faf408f337c1b732d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10e1e8db043e9b7c113e07faf408f337c1b732d/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9ff862f2d24784ee081a8f62a76ffdfe409c10a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9ff862f2d24784ee081a8f62a76ffdfe409c10a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9ff862f2d24784ee081a8f62a76ffdfe409c10a"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 19,
      "deletions": 27
    },
    "files": [
      {
        "sha": "09e78d7f7b3715ecdfe462b52e49c808bc9d74a1",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=e10e1e8db043e9b7c113e07faf408f337c1b732d",
        "patch": "@@ -36,7 +36,7 @@ namespace {\n class PendingWalletTxImpl : public PendingWalletTx\n {\n public:\n-    explicit PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_dest(&wallet) {}\n+    explicit PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet) {}\n \n     const CTransaction& get() override { return *m_tx; }\n \n@@ -47,7 +47,7 @@ class PendingWalletTxImpl : public PendingWalletTx\n         auto locked_chain = m_wallet.chain().lock();\n         LOCK(m_wallet.cs_wallet);\n         CValidationState state;\n-        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_dest, state)) {\n+        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), state)) {\n             reject_reason = state.GetRejectReason();\n             return false;\n         }\n@@ -56,7 +56,6 @@ class PendingWalletTxImpl : public PendingWalletTx\n \n     CTransactionRef m_tx;\n     CWallet& m_wallet;\n-    ReserveDestination m_dest;\n };\n \n //! Construct wallet tx struct.\n@@ -238,7 +237,7 @@ class WalletImpl : public Wallet\n         auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         auto pending = MakeUnique<PendingWalletTxImpl>(*m_wallet);\n-        if (!m_wallet->CreateTransaction(*locked_chain, recipients, pending->m_tx, pending->m_dest, fee, change_pos,\n+        if (!m_wallet->CreateTransaction(*locked_chain, recipients, pending->m_tx, fee, change_pos,\n                 fail_reason, coin_control, sign)) {\n             return {};\n         }"
      },
      {
        "sha": "619197a57a35a793e92184b286d23c16a93b67b1",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=e10e1e8db043e9b7c113e07faf408f337c1b732d",
        "patch": "@@ -272,11 +272,10 @@ Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCo\n     new_coin_control.m_min_depth = 1;\n \n     CTransactionRef tx_new = MakeTransactionRef();\n-    ReserveDestination reservedest(wallet);\n     CAmount fee_ret;\n     int change_pos_in_out = -1; // No requested location for change\n     std::string fail_reason;\n-    if (!wallet->CreateTransaction(*locked_chain, recipients, tx_new, reservedest, fee_ret, change_pos_in_out, fail_reason, new_coin_control, false)) {\n+    if (!wallet->CreateTransaction(*locked_chain, recipients, tx_new, fee_ret, change_pos_in_out, fail_reason, new_coin_control, false)) {\n         errors.push_back(\"Unable to create transaction: \" + fail_reason);\n         return Result::WALLET_ERROR;\n     }\n@@ -327,9 +326,8 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n     mapValue_t mapValue = oldWtx.mapValue;\n     mapValue[\"replaces_txid\"] = oldWtx.GetHash().ToString();\n \n-    ReserveDestination reservedest(wallet);\n     CValidationState state;\n-    if (!wallet->CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, reservedest, state)) {\n+    if (!wallet->CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n         errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n         return Result::WALLET_ERROR;"
      },
      {
        "sha": "d432395d8babb480733da5e4542e9c5e7672a764",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e10e1e8db043e9b7c113e07faf408f337c1b732d",
        "patch": "@@ -309,21 +309,20 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n     CScript scriptPubKey = GetScriptForDestination(address);\n \n     // Create and send the transaction\n-    ReserveDestination reservedest(pwallet);\n     CAmount nFeeRequired;\n     std::string strError;\n     std::vector<CRecipient> vecSend;\n     int nChangePosRet = -1;\n     CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n     vecSend.push_back(recipient);\n     CTransactionRef tx;\n-    if (!pwallet->CreateTransaction(locked_chain, vecSend, tx, reservedest, nFeeRequired, nChangePosRet, strError, coin_control)) {\n+    if (!pwallet->CreateTransaction(locked_chain, vecSend, tx, nFeeRequired, nChangePosRet, strError, coin_control)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, reservedest, state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, state)) {\n         strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n@@ -907,16 +906,15 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     std::shuffle(vecSend.begin(), vecSend.end(), FastRandomContext());\n \n     // Send\n-    ReserveDestination changedest(pwallet);\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     std::string strFailReason;\n     CTransactionRef tx;\n-    bool fCreated = pwallet->CreateTransaction(*locked_chain, vecSend, tx, changedest, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n+    bool fCreated = pwallet->CreateTransaction(*locked_chain, vecSend, tx, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, changedest, state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, state)) {\n         strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }"
      },
      {
        "sha": "61b1efafa1c59006037562927a8e3f9d91f3cce8",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=e10e1e8db043e9b7c113e07faf408f337c1b732d",
        "patch": "@@ -361,17 +361,16 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     CWalletTx& AddTx(CRecipient recipient)\n     {\n         CTransactionRef tx;\n-        ReserveDestination reservedest(wallet.get());\n         CAmount fee;\n         int changePos = -1;\n         std::string error;\n         CCoinControl dummy;\n         {\n             auto locked_chain = m_chain->lock();\n-            BOOST_CHECK(wallet->CreateTransaction(*locked_chain, {recipient}, tx, reservedest, fee, changePos, error, dummy));\n+            BOOST_CHECK(wallet->CreateTransaction(*locked_chain, {recipient}, tx, fee, changePos, error, dummy));\n         }\n         CValidationState state;\n-        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, reservedest, state));\n+        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, state));\n         CMutableTransaction blocktx;\n         {\n             LOCK(wallet->cs_wallet);"
      },
      {
        "sha": "ad9dd18c35a7350000e6998d8728806b69f83b43",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e10e1e8db043e9b7c113e07faf408f337c1b732d",
        "patch": "@@ -2666,9 +2666,8 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n-    ReserveDestination reservedest(this);\n     CTransactionRef tx_new;\n-    if (!CreateTransaction(*locked_chain, vecSend, tx_new, reservedest, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n+    if (!CreateTransaction(*locked_chain, vecSend, tx_new, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n         return false;\n     }\n \n@@ -2784,10 +2783,11 @@ OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vec\n     return m_default_address_type;\n }\n \n-bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, ReserveDestination& reservedest, CAmount& nFeeRet,\n+bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet,\n                          int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n {\n     CAmount nValue = 0;\n+    ReserveDestination reservedest(this);\n     int nChangePosRequest = nChangePosInOut;\n     unsigned int nSubtractFeeFromAmount = 0;\n     for (const auto& recipient : vecSend)\n@@ -3147,7 +3147,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n /**\n  * Call after CreateTransaction unless you want to abort\n  */\n-bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, ReserveDestination& reservedest, CValidationState& state)\n+bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CValidationState& state)\n {\n     {\n         auto locked_chain = chain().lock();\n@@ -3161,8 +3161,6 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n \n         WalletLogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString()); /* Continued */\n         {\n-            // Take key pair from key pool so it won't be used again\n-            reservedest.KeepDestination();\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history."
      },
      {
        "sha": "d6c2038fcbf2c963ab1cc2d817db92caa697082c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10e1e8db043e9b7c113e07faf408f337c1b732d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e10e1e8db043e9b7c113e07faf408f337c1b732d",
        "patch": "@@ -256,8 +256,8 @@ class CKeyPool\n \n /** A wrapper to reserve an address from a wallet\n  *\n- * ReserveDestination is used to reserve an address. It is passed around\n- * during the CreateTransaction/CommitTransaction procedure.\n+ * ReserveDestination is used to reserve an address.\n+ * It is currently only used inside of CreateTransaction.\n  *\n  * Instantiating a ReserveDestination does not reserve an address. To do so,\n  * GetReservedDestination() needs to be called on the object. Once an address has been\n@@ -1084,9 +1084,9 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n      * selected by SelectCoins(); Also create the change output, when needed\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n-    bool CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, ReserveDestination& reservedest, CAmount& nFeeRet, int& nChangePosInOut,\n+    bool CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n-    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, ReserveDestination& reservedest, CValidationState& state);\n+    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CValidationState& state);\n \n     bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const\n     {"
      }
    ]
  }
]