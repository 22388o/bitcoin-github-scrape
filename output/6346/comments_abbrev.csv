paveljanik,2015-06-27T15:02:17Z,~~FIXME: allow more than one OP_RETURN on testnet and regtest according to chain params.~~\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116083536,116083536,
lapp0,2015-06-27T16:24:09Z,"OP_RETURN <data> transactions are relayed in order to minimize harm to the network. Do you think this change will convert people from UTXO spam to the less-bad OP_RETURN spam, or will it just make it easier for non-spammers to start spamming? I have a feeling it's the latter unfortunately.\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116093115,116093115,
luke-jr,2015-06-27T17:55:08Z,"To address @lapp0 's concern, I'd recommend instead focussing on doing this in bitcoin-tx, or even more ideal, beginning work on a tx utility library (that bitcoin-tx would wrap).\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116109053,116109053,
jonasschnelli,2015-06-27T18:45:54Z,Nice work!\nBut i also agree with @luke-jr. Best would be to add OP_RETURN support to `bitcoin-tx`. Together with now merged `fundrawtransaction` this would make sense. There it would be good to avoid policy and support multiple OP_RETURN outputs.\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116116041,116116041,
paveljanik,2015-06-27T19:58:33Z,"`bitcoin-tx` support added (to make it much easier for me - read: I'm lazy - I allow to specify the value for OP_RETURN transaction output. This is worth a few moments to rethink carefully - opinions? Maybe we should only allow zero as the output value... but this way, it is more generic).\n\nThe above `createrawtransaction` call rewritten for `bitcoin-tx` looks much better and is easier to red/wr",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116123729,116123729,
luke-jr,2015-06-27T20:14:22Z,@paveljanik _Users_ should not be doing anything with OP_RETURN in the first place. Policy is node-specific and cannot be expected to be consistent. Nothing should be designed around specific policies.\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116130936,116130936,
paveljanik,2015-06-27T20:24:32Z,@luke-jr There are several types of users... :-)\n\nAd policy: got it. I'll delete every policy rules checks (even `MAX_OP_RETURN_RELAY`/`nMaxDatacarrierBytes` because the transaction can be created on this system but sent via another where there are different rules).\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116134546,116134546,
jgarzik,2015-06-27T21:53:35Z,"mostly ACK.  Comments:\n- The long term direction is to move ""pure function"" stuff out of bitcoind and into bitcoin-tx and similar utilities.  IRC discussion has proposed similar tools ""bitcoin-key"", etc.\n- Thus, _not_ implementing it at all in bitcoind is _weakly_ preferred.  (""weak"" preference = may be useful in the short term, even if long term it is certain the code will be deleted)\n- Missin",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116151125,116151125,
paveljanik,2015-06-28T09:19:56Z,Travis builds fail on some systems - can't find the file txcreatedata1.hex. Strange. Any ideas?\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116236143,116236143,
paveljanik,2015-06-28T09:41:50Z,I'll keep both `createrawtransaction` and `bitcoin-tx` parts here in this PR. We can later decide to remove it.\nStill have to rewrite the `createrawtransaction` help text and squash into nice commits.\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116246967,116246967,
paveljanik,2015-06-28T17:28:43Z,"@luke-jr I commented on non-zero output value above. I prefer to be able to construct the transaction with non-zero output value/burning the value. I do not personally have a use case for it though. I only want to be more generic.\n\nYes, I still have to rewrite the docs of `createrawtransaction`. As a OP_RETURN is a ""stranger"" in `createrawtransaction`, I have to come up with a good way to descri",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116301270,116301270,
paveljanik,2015-06-28T18:31:44Z,"Implemented @jgarzik 's solution - the value is now optional, default is 0.\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116312033,116312033,
paveljanik,2015-06-28T18:58:20Z,"Help text updated. I do not want to use []/{} notation for optional or required parts of input because it can't be combined with JSON text in an elegant way.\nTwo spaces after ""txid"":""id"" added on purpose to fix the formatting.\nI hope it is clear (but getting too long).\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116313812,116313812,
jgarzik,2015-06-28T19:45:08Z,ut ACK\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116320255,116320255,
theuni,2015-06-28T20:22:09Z,"@paveljanik You need to list the .hex files in Makefile.test.in, otherwise they're missing from the source tarball.\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116325748,116325748,
paveljanik,2015-06-28T20:27:55Z,@theuni Thanks! But what is the reason for the first and the last Travis builds to be OK and only the rest of builds failing?\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116328111,116328111,
theuni,2015-06-28T20:30:48Z,"@paveljanik Those two just compile, they don't run the tests. The others failed to open the files for tests, but those two never tried to open them at all.\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116328733,116328733,
jonasschnelli,2015-06-29T07:05:01Z,"Slightly tested. But i was assuming that this steps should work:\n\n```\nJonass-MacBook-Pro:bitcoin jonasschnelli$ ./src/bitcoin-cli -regtest createrawtransaction [] '{""data"":""6a6f6e61737363686e656c6c69""}'\n01000000000100000000000000000f6a0d6a6f6e61737363686e656c6c6900000000\nJonass-MacBook-Pro:bitcoin jonasschnelli$ ./src/bitcoin-cli -regtest fundrawtransaction 01000000000100000000000000000f6a0d6",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116486336,116486336,
jonasschnelli,2015-06-29T08:18:39Z,Tested ACK (nits see previous comment).\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116519302,116519302,
paveljanik,2015-06-29T09:20:27Z,"@jonasschnelli Current master (without OP_RETURN changes):\n\n```\n$ bitcoin-cli -testnet createrawtransaction ""[{\""txid\"":\""f7640e528c4ecbcf437adc22e1a02634aefcd286b0affc8a0edde34dcfaef60b\"",\""vout\"":1}]"" ""{\""msj42CCGruhRsFrGATiUuh25dtxYtnpbTx\"": 0 }""\n01000000010bf6aecf4de3dd0e8afcafb086d2fcae3426a0e122dc7a43cfcb4e8c520e64f70100000000ffffffff0100000000000000001976a91485eb47fe98f349065d6f044e27a4",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116560452,116560452,
jonasschnelli,2015-06-29T09:24:59Z,@paveljanik: Yes. This makes sense.\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116564507,116564507,
dexX7,2015-06-29T16:03:44Z,"> Maybe it could be more verbose and say something like: ""No output needs funding."" or something similar.\n\nIt's not strictly because there is no output to fund, but because `OP_RETURN` outputs don't pass the `IsDust` check in `CWallet::CreateTransaction`.\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116743120,116743120,
paveljanik,2015-06-29T17:01:46Z,"@dexX7 Yes. And this applies to address outputs as well (not specific to this particular OP_RETURN/data transaction). Hmm, this looks like applying policy checks at the wrong place. Funded dust transaction can be delivered to friendly miner to be mined.\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116761954,116761954,
paveljanik,2015-06-29T18:16:14Z,"Squashed, separated both changes and their tests.\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116781794,116781794,
luke-jr,2015-06-29T21:52:38Z,Have you given any thought to integrating contracthashtool so people don't misuse this unnecessarily?\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-116858199,116858199,
jonasschnelli,2015-07-02T19:12:06Z,While testing i was stumbled over this issue...\n\n```\njonasschnelli$ ./src/bitcoin-cli --regtest sendrawtransaction 010000000156a1172a1cfeede2f1c868f737b5c10c9d39bb85c05e45fae01bffbf7cc9194a0000000049483045022100b84e6381224773ffc3a5f1040e1bc675046b48bfad0655e947032dacd946b7370220166ebc760ea78c18ea49a4686fd751f206859b9f3d8670c3ec6d8400ce232f7e01ffffffff0100000000000000000c6a0a68656c6c6f776f726c64,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-118135984,118135984,
laanwj,2015-07-02T19:21:31Z,Concept ACK. Especially the bitcoin-tx part.\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-118139562,118139562,
paveljanik,2015-07-02T19:25:40Z,"@jonasschnelli Yes, this is #5913. Almost ready.\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-118140287,118140287,
laanwj,2015-07-02T19:27:07Z,"Although I also agree we should deprecate pure utility functions from the RPC at some point, and extending them may raise the wrong expectations. We rejected a similar change by @dgenr8  in #5936 to add a field to `locktime` to `createrawtransaction` recently, so this is not entirely conistent.\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-118140533,118140533,
paveljanik,2015-07-02T19:31:03Z,This is why I separated both commits. I also think that the first one can be omitted...\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-118141185,118141185,
jonasschnelli,2015-07-02T19:44:33Z,"I think this is useful to have in the RPC `createrawtransaction` call. Would it be a bad design to add support for OP_RETURN to `fundrawtransaction`? Something like that: If there is a OP_RETURN vout, always add a change output with the minimum fee and fund it as usual.\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-118143569,118143569,
jonasschnelli,2015-07-02T19:49:15Z,Tested ACK.\nWrote a simple rpc test for `rawtransaction.py` https://github.com/jonasschnelli/bitcoin/commit/5aa299ff2c40b4b5504ab99ecf19887842d7cf39\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-118144379,118144379,
btcdrak,2015-07-06T10:48:30Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-118806966,118806966,
paveljanik,2015-07-12T19:33:57Z,"More reviews please, thank you.\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-120755795,120755795,
dexX7,2015-07-15T20:21:54Z,"Tested, works as expected.\n\n@jonasschnelli:\nI proposed #6444, and with this PR `""fundrawtransaction""` actually works out of the box:\n\n``` bash\n$ ./src/bitcoin-cli createrawtransaction '[]' '{""data"":""74657374""}'\n0100000000010000000000000000066a047465737400000000\n$ ./src/bitcoin-cli fundrawtransaction '0100000000010000000000000000066a047465737400000000'\n{\n  ""hex"": ""0100000001197c6aafa1edb6",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-121735187,121735187,
btcdrak,2015-08-04T22:49:51Z,needs rebase\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-127784233,127784233,
paveljanik,2015-08-06T18:54:29Z,Rebased (to accomodate #6504 changes).\nReady for merge IMO.\n,https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-128473298,128473298,
dgenr8,2015-08-10T17:30:21Z,"@laanwj Thank you for noticing the parallel to #5936, rebasing it ... :-)\n",https://github.com/bitcoin/bitcoin/pull/6346#issuecomment-129540050,129540050,
luke-jr,2015-06-27T17:51:08Z,"Key probably should be named ""commitment"" or ""data"", not ""OP_RETURN"" (which is just a technical implementation detail).\n",https://github.com/bitcoin/bitcoin/pull/6346#discussion_r33414547,33414547,src/rpcrawtransaction.cpp
luke-jr,2015-06-27T17:51:45Z,Prefer expounding on the proper use cases here to avoid people getting the impression it should be used incorrectly.\n,https://github.com/bitcoin/bitcoin/pull/6346#discussion_r33414553,33414553,src/rpcrawtransaction.cpp
luke-jr,2015-06-27T17:52:21Z,createrawtransaction shouldn't enforce policy.\n,https://github.com/bitcoin/bitcoin/pull/6346#discussion_r33414558,33414558,src/rpcrawtransaction.cpp
luke-jr,2015-06-27T17:53:07Z,"Again, policy. Although maybe okay if you use nMaxDatacarrierBytes instead.\n",https://github.com/bitcoin/bitcoin/pull/6346#discussion_r33414567,33414567,src/rpcrawtransaction.cpp
paveljanik,2015-06-28T09:38:02Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/6346#discussion_r33421056,33421056,src/rpcrawtransaction.cpp
paveljanik,2015-06-28T09:38:19Z,Policy check removed.\n,https://github.com/bitcoin/bitcoin/pull/6346#discussion_r33421061,33421061,src/rpcrawtransaction.cpp
paveljanik,2015-06-28T09:38:34Z,I have removed policy checks completely.\n,https://github.com/bitcoin/bitcoin/pull/6346#discussion_r33421064,33421064,src/rpcrawtransaction.cpp
luke-jr,2015-06-28T17:00:57Z,Is there a use case for burning a value?\n,https://github.com/bitcoin/bitcoin/pull/6346#discussion_r33424581,33424581,src/bitcoin-tx.cpp
luke-jr,2015-06-28T17:02:19Z,Don't forget to update docs here.\n,https://github.com/bitcoin/bitcoin/pull/6346#discussion_r33424597,33424597,src/rpcrawtransaction.cpp
jgarzik,2015-06-28T17:31:52Z,"It is easy to make the ""VALUE:"" piece optional, in the colon search/parsing code.\n\nThat way the most common use case is outdata=DATA.\n\nHowever, it is technically possible to put a value in the OP_RETURN output.  This is a raw transaction interface, so setting that as an option seems reasonable, even if the use cases are rare.\n",https://github.com/bitcoin/bitcoin/pull/6346#discussion_r33424882,33424882,src/bitcoin-tx.cpp
paveljanik,2015-06-28T18:05:31Z,"This is the best solution, yes.\n",https://github.com/bitcoin/bitcoin/pull/6346#discussion_r33425198,33425198,src/bitcoin-tx.cpp
jtimon,2016-07-21T20:21:18Z,FIX Why did this OP_RETURN got here?\n,https://github.com/bitcoin/bitcoin/pull/6346#discussion_r71779709,71779709,src/rpcrawtransaction.cpp
paveljanik,2016-07-22T05:15:24Z,"Because it is part of the ""data"" transaction?\n",https://github.com/bitcoin/bitcoin/pull/6346#discussion_r71827929,71827929,src/rpcrawtransaction.cpp
