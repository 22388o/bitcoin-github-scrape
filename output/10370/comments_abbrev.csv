karelbilek,2017-05-09T12:28:18Z,"The tests seem to be failing on some rebased code. \n\nBut as I said, I added this PR as a general discussion request. If there is an interest, I will clean this up.",https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-300147587,300147587,
jonasschnelli,2017-05-09T13:35:07Z,"Having an independent address-index available somewhere may be handy and in general a great thing. Though, I'm not sure if we want to add this to the Bitcoin-Core repository. It already contains (too) much. Wallet, utilities, txindex, UI, p2p, consensus.\n\nI would prefer to keep the address-index (and all other sorts of indexes) in other repositories.\nSince Core offers ZMQ, creating an addres",https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-300165607,300165607,
karelbilek,2017-05-09T13:58:21Z,"I am not sure about the exact reasoning (cc @braydonf again), but older versions of Bitcore (< 3) had something similar - unpatched bitcoin core with additional indexes in node.js (see https://github.com/bitpay/bitcore-node/tree/v2.1.1/lib/services ) - but in Bitcore 3, they instead moved to including the address index in the bitcoin core itself. \n\nPerhaps it is easier to maintain one database",https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-300172971,300172971,
dcousens,2017-05-09T14:04:49Z,"@runn1ng have you looked at https://github.com/bitcoinjs/indexd?\nIt has all the indexes listed above, and it works seamlessly with an unpatched bitcoin-core RPC.",https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-300174955,300174955,
karelbilek,2017-05-09T14:10:10Z,@dcousens thanks for noticing me! I will definitely look at that.,https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-300176542,300176542,
braydonf,2017-05-09T14:13:07Z,"There was a significant performance gain by building the indexes at the same time as the txindex, since each block only needed to be read and deserialized once.",https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-300177682,300177682,
TheBlueMatt,2017-05-09T14:19:09Z,See-also #9806 (and #8660 and #5048). I think the jury might still be out on whether we want more indexes supported in Bitcoin Core.,https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-300179649,300179649,
dcousens,2017-05-09T14:20:17Z,"@braydonf at ~400ms per 1MB block... that really shouldn't be an issue - and the above is _Javascript_.\nIf you're concern is related to the initial import,  tools like https://github.com/dcousens/fast-dat-parser can dump the leveldb as fast as it can push IO.\n\nIMHO I don't think `bitcoind` should support any further indexes...",https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-300179992,300179992,
braydonf,2017-05-10T04:55:32Z,"In the past, we had implemented indexes in several ways, as mentioned, and found this to be the best option. I do think additional indexes, if needed, should be implemented within a full/spv node, the closeness reduces the overall complexity and duplication of disk and CPU usage. It otherwise ends up being what is effectively two nodes next to each other. The point that I realized this was when it",https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-300373601,300373601,
dcousens,2017-05-10T05:25:43Z,"> the closeness reduces the overall complexity and duplication of disk and CPU usage\n\nIf you are using a pruned or SPV node,  you really shouldn't be suffering from disk duplication problems.\nThe CPU usage _for an index_ is near completely negligible compared to your IO.\nYou don't need to verify anything if you trust your data source (your node).\n\n>  An address index ... [would be opti",https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-300377458,300377458,
junderw,2017-05-10T10:19:21Z,Allowing Bitcore-Wallet-Service to run on top of a vanilla bitcoind + bitcore (no patched binaries needed during install) would be extremely useful.,https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-300439772,300439772,
priestc,2017-05-16T12:41:38Z,"I just want to say that a UTXO database index in bitcoin core is a very good idea in my opinion.\n\nKeep in mind also there is BIP131, which requires a index on the UTXO set to be implemented. If BIP131 gets implemented, the UTXO database no longer becomes optional (as it will be required to validate new transactions), but since the UTXO index is relatively tiny compared to the `txindex` I don't",https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-301769749,301769749,
jtimon,2017-07-18T23:19:05Z,"As said in #9806 I'm not opposed to an additional optional index similar to -txindex. For example ""-scriptpubkeyindex"".\nBut instead I think it's more generic to use the scriptPubKey directly as key instead of addresses.\nThe translation from address to script is simple for p2pkh (and other script templates) can be done externally or maybe internally too as an additional rpc call.\n\nThe minim",https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-316225670,316225670,
karelbilek,2017-08-17T22:26:14Z,"I am closing this PR. We are running bitcoin with these custom patches on our servers and while it is working so far, it is not very maintainable long-term and the leveldb performance is subpar for the addressindex.\n\nExternal index is the only solution.",https://github.com/bitcoin/bitcoin/pull/10370#issuecomment-323211049,323211049,
