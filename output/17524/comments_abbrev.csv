practicalswift,2019-11-19 20:23:44,"Concept ACK\n\nThanks for fixing this!",https://github.com/bitcoin/bitcoin/pull/17524#issuecomment-555695980,555695980,
Sjors,2019-11-19 20:52:32,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17524#issuecomment-555708149,555708149,
practicalswift,2019-11-19 21:24:27,"Note to reviewers:\n\nThis is the issue (https://github.com/bitcoin/bitcoin/issues/17149#issuecomment-552202472) fixed by this PR:\n\n```\n$ bitcoind &\n$ bitcoin-cli analyzepsbt ""cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWAEHYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFv8/wADXYP/7//////8JxOh0LR2HAI8AAA",https://github.com/bitcoin/bitcoin/pull/17524#issuecomment-555722045,555722045,
instagibbs,2019-11-19 21:26:59,@practicalswift 2 minutes too late bro :joy: ,https://github.com/bitcoin/bitcoin/pull/17524#issuecomment-555723086,555723086,
DrahtBot,2019-11-19 22:03:40,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17211](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17211.html) (Allow fundrawtransaction and walletcreatefu",https://github.com/bitcoin/bitcoin/pull/17524#issuecomment-555736964,555736964,
Sjors,2019-11-20 10:05:22,"ACK 773d457\n\nThe new `creator` role and `error` field are release note worthy.\n\nThis should be back-ported.",https://github.com/bitcoin/bitcoin/pull/17524#issuecomment-555932794,555932794,
darosior,2019-11-23 13:30:44,"The removal of the input field in case of error would break the API, wouldn't be better to push an empty array instead ?",https://github.com/bitcoin/bitcoin/pull/17524#issuecomment-557798175,557798175,
achow101,2019-11-23 16:58:33,I don't think this really breaks the api since this error condition would cause a crash rather than return any sort of result previously.,https://github.com/bitcoin/bitcoin/pull/17524#issuecomment-557814498,557814498,
instagibbs,2019-11-25 14:15:22,After some thought ACK https://github.com/bitcoin/bitcoin/commit/773d4572a4864ab7b6380858d07d9579ff6dd9a2,https://github.com/bitcoin/bitcoin/pull/17524#issuecomment-558174238,558174238,
instagibbs,2019-11-19 21:25:42,"damnit you should have warned me this crashes Core, lol",https://github.com/bitcoin/bitcoin/pull/17524#discussion_r348176251,348176251,test/functional/rpc_psbt.py
instagibbs,2019-11-19 21:31:58,"```\n      ""final_scriptSig"": {\n        ""asm"": ""1050369 0 0 0 OP_LEFT"",\n        ""hex"": ""030107100001000080""\n      }\n```\n\nwhy does this PSBT have scriptsigs for OP_RETURN inputs? Can't this PSBT be generated dynamically for better readability? Even if not, we should assert some things using `decodepsbt` to make sure we know the scriptpubkeys.",https://github.com/bitcoin/bitcoin/pull/17524#discussion_r348179091,348179091,test/functional/rpc_psbt.py
practicalswift,2019-11-19 21:38:36,"The PSBT was created by a coverage-guided fuzzer using the fuzzing harness that I added in PR #17136 (""tests: Add fuzzing harness for various PSBT related functions""). The only post-processing done was a test-case minimisation run :)",https://github.com/bitcoin/bitcoin/pull/17524#discussion_r348181969,348181969,test/functional/rpc_psbt.py
