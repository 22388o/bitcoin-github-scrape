[
  {
    "sha": "2e29e7e247b6b74502c70612dab1f7f67de675c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTI5ZTdlMjQ3YjZiNzQ1MDJjNzA2MTJkYWIxZjdmNjdkZTY3NWMz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-17T12:40:24Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-23T11:14:40Z"
      },
      "message": "Globals: Remove a bunch of Params() calls from main.cpp:\n\n1) Chainparams: Explicit CChainParams arg for main:\n\n-AcceptBlock\n-AcceptBlockHeader\n-ActivateBestChain\n-ConnectTip\n-InitBlockIndex\n-LoadExternalBlockFile\n-VerifyDB parametric constructor\n\n2) Also pickup more Params()\\. in main.cpp\n\n3) Pass nPruneAfterHeight explicitly to new FindFilesToPrune() in main.cpp",
      "tree": {
        "sha": "c5e4e5a8d5364f501af5f7664b731e6f10cb0589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5e4e5a8d5364f501af5f7664b731e6f10cb0589"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e29e7e247b6b74502c70612dab1f7f67de675c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e29e7e247b6b74502c70612dab1f7f67de675c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e29e7e247b6b74502c70612dab1f7f67de675c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e29e7e247b6b74502c70612dab1f7f67de675c3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac53ec992018a14db6f8a65a7ce333a4c8284cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac53ec992018a14db6f8a65a7ce333a4c8284cc"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 44,
      "deletions": 49
    },
    "files": [
      {
        "sha": "3b82dfdc7caaa24747c4aa078cf5ec39c3dab879",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "patch": "@@ -588,6 +588,7 @@ void CleanupBlockRevFiles()\n \n void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n {\n+    const CChainParams& chainparams = Params();\n     RenameThread(\"bitcoin-loadblk\");\n     // -reindex\n     if (fReindex) {\n@@ -601,14 +602,14 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n             if (!file)\n                 break; // This error is logged in OpenBlockFile\n             LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-            LoadExternalBlockFile(file, &pos);\n+            LoadExternalBlockFile(chainparams, file, &pos);\n             nFile++;\n         }\n         pblocktree->WriteReindexing(false);\n         fReindex = false;\n         LogPrintf(\"Reindexing finished\\n\");\n         // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-        InitBlockIndex();\n+        InitBlockIndex(chainparams);\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n@@ -619,7 +620,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n             CImportingNow imp;\n             boost::filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n-            LoadExternalBlockFile(file);\n+            LoadExternalBlockFile(chainparams, file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n         } else {\n             LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.string());\n@@ -632,7 +633,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         if (file) {\n             CImportingNow imp;\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-            LoadExternalBlockFile(file);\n+            LoadExternalBlockFile(chainparams, file);\n         } else {\n             LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n         }\n@@ -1297,7 +1298,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n \n                 // Initialize the block index (no-op if non-empty database was already loaded)\n-                if (!InitBlockIndex()) {\n+                if (!InitBlockIndex(chainparams)) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }\n@@ -1332,7 +1333,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n-                if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                               GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                     strLoadError = _(\"Corrupted block database detected\");\n                     break;\n@@ -1556,7 +1557,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     uiInterface.InitMessage(_(\"Activating best chain...\"));\n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n     CValidationState state;\n-    if (!ActivateBestChain(state))\n+    if (!ActivateBestChain(state, chainparams))\n         strErrors << \"Failed to connect best block\";\n \n     std::vector<boost::filesystem::path> vImportFiles;"
      },
      {
        "sha": "4d88078f4118f976ba9cf8def69aff43ba27cf42",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 30,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "patch": "@@ -1939,6 +1939,7 @@ enum FlushStateMode {\n  * or always and in all cases if we're in prune mode and are deleting files.\n  */\n bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n+    const CChainParams& chainparams = Params();\n     LOCK2(cs_main, cs_LastBlockFile);\n     static int64_t nLastWrite = 0;\n     static int64_t nLastFlush = 0;\n@@ -1947,7 +1948,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n     bool fFlushForPrune = false;\n     try {\n     if (fPruneMode && fCheckForPruning && !fReindex) {\n-        FindFilesToPrune(setFilesToPrune);\n+        FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight());\n         fCheckForPruning = false;\n         if (!setFilesToPrune.empty()) {\n             fFlushForPrune = true;\n@@ -2147,8 +2148,8 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CBlock *pblock) {\n-    const CChainParams& chainparams = Params();\n+bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock)\n+{\n     assert(pindexNew->pprev == chainActive.Tip());\n     mempool.check(pcoinsTip);\n     // Read block from disk.\n@@ -2280,8 +2281,8 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, const CBlock *pblock) {\n-    const CChainParams& chainparams = Params();\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock)\n+{\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2314,7 +2315,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n \n     // Connect new blocks.\n     BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-        if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n+        if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n             if (state.IsInvalid()) {\n                 // The block violates a consensus rule.\n                 if (!state.CorruptionPossible())\n@@ -2355,10 +2356,10 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, const CBlock *pblock) {\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock)\n+{\n     CBlockIndex *pindexNewTip = NULL;\n     CBlockIndex *pindexMostWork = NULL;\n-    const CChainParams& chainparams = Params();\n     do {\n         boost::this_thread::interruption_point();\n \n@@ -2371,7 +2372,7 @@ bool ActivateBestChain(CValidationState &state, const CBlock *pblock) {\n             if (pindexMostWork == NULL || pindexMostWork == chainActive.Tip())\n                 return true;\n \n-            if (!ActivateBestChainStep(state, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL))\n+            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL))\n                 return false;\n \n             pindexNewTip = chainActive.Tip();\n@@ -2850,9 +2851,9 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n     return true;\n }\n \n-bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n+/** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n+static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n {\n-    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n \n     CBlockIndex *&pindex = *ppindex;\n@@ -2942,7 +2943,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, c\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n-        bool ret = AcceptBlock(*pblock, state, &pindex, fRequested, dbp);\n+        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp);\n         if (pindex && pfrom) {\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n         }\n@@ -2951,7 +2952,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, c\n             return error(\"%s: AcceptBlock FAILED\", __func__);\n     }\n \n-    if (!ActivateBestChain(state, pblock))\n+    if (!ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n@@ -3041,13 +3042,13 @@ void UnlinkPrunedFiles(std::set<int>& setFilesToPrune)\n }\n \n /* Calculate the block/rev files that should be deleted to remain under target*/\n-void FindFilesToPrune(std::set<int>& setFilesToPrune)\n+void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight)\n {\n     LOCK2(cs_main, cs_LastBlockFile);\n     if (chainActive.Tip() == NULL || nPruneTarget == 0) {\n         return;\n     }\n-    if (chainActive.Tip()->nHeight <= Params().PruneAfterHeight()) {\n+    if (chainActive.Tip()->nHeight <= nPruneAfterHeight) {\n         return;\n     }\n \n@@ -3275,9 +3276,8 @@ CVerifyDB::~CVerifyDB()\n     uiInterface.ShowProgress(\"\", 100);\n }\n \n-bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n+bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n {\n-    const CChainParams& chainparams = Params();\n     LOCK(cs_main);\n     if (chainActive.Tip() == NULL || chainActive.Tip()->pprev == NULL)\n         return true;\n@@ -3393,9 +3393,8 @@ bool LoadBlockIndex()\n     return true;\n }\n \n-\n-bool InitBlockIndex() {\n-    const CChainParams& chainparams = Params();\n+bool InitBlockIndex(const CChainParams& chainparams) \n+{\n     LOCK(cs_main);\n \n     // Initialize global variables that cannot be constructed at startup.\n@@ -3413,7 +3412,7 @@ bool InitBlockIndex() {\n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)\n     if (!fReindex) {\n         try {\n-            CBlock &block = const_cast<CBlock&>(Params().GenesisBlock());\n+            CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n             // Start new block file\n             unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n             CDiskBlockPos blockPos;\n@@ -3425,7 +3424,7 @@ bool InitBlockIndex() {\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n                 return error(\"LoadBlockIndex(): genesis block not accepted\");\n-            if (!ActivateBestChain(state, &block))\n+            if (!ActivateBestChain(state, chainparams, &block))\n                 return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n@@ -3437,11 +3436,8 @@ bool InitBlockIndex() {\n     return true;\n }\n \n-\n-\n-bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n {\n-    const CChainParams& chainparams = Params();\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n@@ -3461,10 +3457,10 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n             try {\n                 // locate a header\n                 unsigned char buf[MESSAGE_START_SIZE];\n-                blkdat.FindByte(Params().MessageStart()[0]);\n+                blkdat.FindByte(chainparams.MessageStart()[0]);\n                 nRewind = blkdat.GetPos()+1;\n                 blkdat >> FLATDATA(buf);\n-                if (memcmp(buf, Params().MessageStart(), MESSAGE_START_SIZE))\n+                if (memcmp(buf, chainparams.MessageStart(), MESSAGE_START_SIZE))\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n@@ -3858,7 +3854,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // best equivalent proof of work) than the best header chain we know about.\n                         send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != NULL) &&\n                             (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() < nOneMonth) &&\n-                            (GetBlockProofEquivalentTime(*pindexBestHeader, *mi->second, *pindexBestHeader, Params().GetConsensus()) < nOneMonth);\n+                            (GetBlockProofEquivalentTime(*pindexBestHeader, *mi->second, *pindexBestHeader, consensusParams) < nOneMonth);\n                         if (!send) {\n                             LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                         }\n@@ -4701,7 +4697,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         uint256 alertHash = alert.GetHash();\n         if (pfrom->setKnown.count(alertHash) == 0)\n         {\n-            if (alert.ProcessAlert(Params().AlertKey()))\n+            if (alert.ProcessAlert(chainparams.AlertKey()))\n             {\n                 // Relay\n                 pfrom->setKnown.insert(alertHash);"
      },
      {
        "sha": "35774f3e258a05afe681142ac87a15e81295056a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "patch": "@@ -172,9 +172,9 @@ FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n-bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp = NULL);\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = NULL);\n /** Initialize a new block tree database + block data on disk */\n-bool InitBlockIndex();\n+bool InitBlockIndex(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk */\n bool LoadBlockIndex();\n /** Unload database information */\n@@ -199,7 +199,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState &state, const CBlock *pblock = NULL);\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**\n@@ -217,7 +217,7 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n  *\n  * @param[out]   setFilesToPrune   The set of file indices that can be unlinked will be returned\n  */\n-void FindFilesToPrune(std::set<int>& setFilesToPrune);\n+void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n \n /**\n  *  Actually unlink the specified files\n@@ -383,9 +383,6 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n-/** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);\n-\n \n class CBlockFileInfo\n {\n@@ -446,7 +443,7 @@ class CVerifyDB {\n public:\n     CVerifyDB();\n     ~CVerifyDB();\n-    bool VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n+    bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n /** Find the last common block between the parameter chain and a locator. */"
      },
      {
        "sha": "5fa707f94e3cf7ac52aa1dbfc7ff502a9f135494",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "patch": "@@ -562,7 +562,7 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n     if (params.size() > 1)\n         nCheckDepth = params[1].get_int();\n \n-    return CVerifyDB().VerifyDB(pcoinsTip, nCheckLevel, nCheckDepth);\n+    return CVerifyDB().VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);\n }\n \n /** Implementation of IsSuperMajority with better feedback */\n@@ -828,7 +828,7 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state);\n+        ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {\n@@ -867,7 +867,7 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state);\n+        ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {"
      },
      {
        "sha": "816abd928118dae960274325fb263bc4352d70a8",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e29e7e247b6b74502c70612dab1f7f67de675c3/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=2e29e7e247b6b74502c70612dab1f7f67de675c3",
        "patch": "@@ -50,6 +50,7 @@ BasicTestingSetup::~BasicTestingSetup()\n \n TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n+    const CChainParams& chainparams = Params();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n #endif\n@@ -60,7 +61,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n-        InitBlockIndex();\n+        InitBlockIndex(chainparams);\n #ifdef ENABLE_WALLET\n         bool fFirstRun;\n         pwalletMain = new CWallet(\"wallet.dat\");"
      }
    ]
  }
]