TheBlueMatt,2014-11-08T19:30:18Z,"Aside from gcc warnings, tested ACK only commithash 377f674491230b5bce8308fde6189f7439866921: http://bitcoin.ninja/TheBlueMatt-5206.txt\n",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-62273660,62273660,
sipa,2014-11-17T16:19:39Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-63329674,63329674,
sipa,2014-11-18T13:59:35Z,"Some further optimizations may be possible later, as AcceptToMemoryPool may need less code now to detect missing inputs; unsure.\n",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-63474275,63474275,
TheBlueMatt,2014-11-21T22:14:29Z,You can at least remove the block at https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L925\n,https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-64046550,64046550,
sipa,2014-11-23T11:37:21Z,"Alternatively, have a LOCK_INIT(cs) macro that does initialize the cs variable, but does not declare it, and use that in the mempool constructor.\n",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-64114966,64114966,
morcos,2014-11-26T17:31:47Z,"`CCoinsViewMemPool::GetCoins` is actually called multiple places in the code base, and this pull causes changes in behavior.  For instance, using the rpc signrawtransaction, it used to be possible to sign a double spend using a zero-conf transaction as input when the first spend was in the mempool, but now that is not possible.   For reference, it is still possible to sign a double spend with a co",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-64681917,64681917,
dgenr8,2014-11-30T20:10:35Z,"Not tested, but I think the pruning change breaks spending unconfirmed outputs because pruned `CCoins` wind up in the `CCoinsViewCache` in `AcceptToMemoryPool`.\n\nWhen accepting the child, the call to `view.HaveCoins(txin.prevout.hash))` results in a call to `CCoinsViewMemPool::GetCoins` via `CCoinsViewCache::FetchCoins`, and a pruned version of the unconfirmed parent is cached.\n\nThen, `view.Ha",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-64998215,64998215,
TheBlueMatt,2014-11-30T20:35:31Z,"@dgenr8 Are you sure about that? A pruned entry should still result in a true for HaveInputs as the unspent entry itself shouldnt be removed, and thats the only one HaveInputs cares about.\n",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-64999171,64999171,
dgenr8,2014-12-01T15:45:28Z,"Ok, no pruning happens in `view.HaveCoins(txin.prevout.hash))` because the child is not yet accepted (duh).  If a conflicting child arrives later, it should correctly fail HaveInputs .  So it seems this may work as a way to detect intra-mempool conflicts (not all conflicts though).  This also explains @morcos finding above.\n\nWhat about @sipa comment at [line 649](https://github.com/bitcoin/bitco",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-65083217,65083217,
dgenr8,2014-12-01T16:11:51Z,"> You can at least remove the block at https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L925\n\n@TheBlueMatt Removing the check at [line 954](https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L954) instead should be considered.  It literally says ""if tx is spendable, don't let it into the mempool!"" and only works as a duplicate check because 'spendable' has been defined locall",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-65087834,65087834,
sipa,2014-12-01T16:15:51Z,"@dgenr8 You misread the comment at line 649. The problem is that a pruned transaction may exist in pcoinsTip (perhaps because it used to be there and reorganized away), so if a transaction exists in the mempool, we have to return that one, even if a HaveCoins on the underlying cache may be true. The mempool consistency guarantees that in that case the underlying coin is fully spent anyway.\n",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-65088504,65088504,
sipa,2014-12-01T16:18:45Z,The check on line 954 (as @dgenr8 mentions) is actually worrysome. It is possible that HaveCoins returns true while there is actually no entry there (because it was reorganized away). This may possibly currently result in rejecting completely valid transactions.\n,https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-65088986,65088986,
morcos,2014-12-01T17:38:38Z,Just to add one more question about how this is all supposed to work.  It seems to me that if you see a double spend of a transaction that is already confirmed it will fail the HaveCoins check on its inputs in line 961 and therefore be treated as an orphan transaction.   Is that the desired behavior?  It doesn't seem like the HaveInputs check in line 969 gets used until we remove the explicit conf,https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-65102914,65102914,
sipa,2014-12-01T17:54:22Z,"@morcos The risk currently already exists that a double-spending transaction is treated as an orphan. The correct solution for that is keeping track of recently-spent transactions, rather than relying on mempool/UTXOset logic to detect it. Unspent outputs are pretty much by definition a bad way to keep tracking of spent coins...\n",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-65105593,65105593,
morcos,2014-12-01T18:09:00Z,": ), oh yeah, guess that makes sense.\n",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-65107874,65107874,
sipa,2014-12-01T19:29:50Z,@apoelstra Can you move the pruneSpent call to also apply to transactions fetched from the underlying cache?\n,https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-65120420,65120420,
TheBlueMatt,2014-12-21T02:50:59Z,"@sipa, @apoelstra already did in #5347.\n",https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-67758234,67758234,
laanwj,2015-03-20T11:17:30Z,Closing in favor of #5347\n,https://github.com/bitcoin/bitcoin/pull/5206#issuecomment-83988336,83988336,
TheBlueMatt,2014-11-08T06:58:25Z,"By initializing this last gcc complains about initialization out of order (yes, that is an actual warning...), I'd prefer we not add new warning messages.\n",https://github.com/bitcoin/bitcoin/pull/5206#discussion_r20050280,20050280,src/txmempool.cpp
