jonasschnelli,2016-04-11T14:05:28Z,"What would be the downside of a forced 64bit type on 32bit platform? I guess the performance reduction and the slightly higher memory consumption is totally negligible?\n\nWould fixing it ""on the other side"" (detect size_t overflow while hashing, force the 32bit reset on 64bit platforms) not involve less risks?\n",https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-208362634,208362634,
sipa,2016-04-11T14:23:21Z,"We should replace the utxo hash reported by gettxoutsetinfo by a Merkle\nroot of a tree whose leaves are the UTXO entries in a simple serialized\nformat. That would allow producing short proofs about the existance or\nnon-existance of certain entries to anyone who gets such a hash from a\ntrusted source.\n\nThis isn't hard to do using a variation of the algorithm in\nconsensus/merkle.cpp, but it's",https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-208371497,208371497,
theuni,2016-04-12T07:06:09Z,"@laanwj Nice catches. utACK.\n\n@jonasschnelli I think it's not worth the trouble. For platforms constrained enough for the change to be significant, I suspect that a separate hashing implementation would've already been patched in.\n",https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-208741597,208741597,
laanwj,2016-04-14T07:42:58Z,"@sipa I know you have bigger plans for this. Do you disagree, though, that this is an improvement? I'm using `gettxoutsetinfo` a lot so it would really help me if this is fixed.\n\n@jonasschnelli I'd say doing the hashing as it is supposed to be done, with counters of the appropriate width - as done here - is less risky than trying to hack something with overflow detection? Adding a 64-bit with 32",https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-209810078,209810078,
gmaxwell,2016-04-14T08:54:20Z,The hash function code should be correct with large inputs regardless of what the utxoset hash stuff returns. utACK.\n,https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-209835229,209835229,
sipa,2016-04-14T09:09:17Z,"@laanwj Oops, I just responded to @jonasschnelli's comment, not seeing there was a patch too.\n\nYes, uint64_t should definitely be used for at least SHA1, SHA256 and RIPEMD160. In theory, we'd need to use a 128-bit integer for SHA512 (as it writes a 128-bit length descriptor in the padding), but I guess we'll never hit that.\n",https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-209839963,209839963,
gmaxwell,2016-04-14T09:13:26Z,"there can be an assert to catch the overflow in the sha512 case, if we want to be pedantic?\n",https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-209841643,209841643,
laanwj,2016-04-14T10:04:31Z,"> In theory, we'd need to use a 128-bit integer for SHA512 (as it writes a 128-bit length descriptor in the padding), but I guess we'll never hit that.\n\nGood catch!\n\nAlthough implementing actual 128-bit counting is just as much work as adding an overflow assertion, I'd personally say adding an assert is preferable here, as we can never test this behavior.\n",https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-209861344,209861344,
sipa,2016-04-14T10:06:23Z,"The assert should probably exist for SHA1/256/RIPEMD160 as well, as those are undefined for longer messages.\n",https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-209862243,209862243,
laanwj,2016-04-14T13:32:40Z,"Hmm looking at the actual code I'll leave that for another time. At least this is trivially correct. I feel that the risk of someone hashing 18,446,744 TB of data is extremely low in the foreseeable future (even with the unfortunate rate of UTXO growth that will take a while), at least smaller than the risk of me introducing bugs there.\n",https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-209942011,209942011,
sipa,2016-04-14T13:35:50Z,utACK 088c270c2928089f1903db0ff01c82eaaa5f6e45\n,https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-209944290,209944290,
MarcoFalke,2016-04-15T08:51:51Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-210368826,210368826,
gavinandresen,2016-04-15T17:13:22Z,"Tested ACK, on an OSX 64-bit machine.\n\nOn a debug build on my machine, hashing the txids makes gettxoutsetinfo about ten seconds slower (3 minutes versus 2 minutes 50 seconds).\n",https://github.com/bitcoin/bitcoin/pull/7848#issuecomment-210550913,210550913,
