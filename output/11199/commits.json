[
  {
    "sha": "4103397fabecf34b291028d88e863100d9cf80da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTAzMzk3ZmFiZWNmMzRiMjkxMDI4ZDg4ZTg2MzEwMGQ5Y2Y4MGRh",
    "commit": {
      "author": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-08-30T19:28:10Z"
      },
      "committer": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-08-30T19:44:37Z"
      },
      "message": "Sync module: Use std locking primitives instead of boost ones\n\nMigrate the sync module to use the std-defined (since C++11) condition_variable, mutex and recursive_mutex instead of the boost provided ones.\n\nBoost locking primitives are still used elsewhere in the project. This commit modifies just the sync module itself and the minimum code required to compile and work with its modified interface.\n\nA couple of files were missing boost includes and previously indirectly included them through the sync.h header - added them.\n\nAdded TODO comment about changing a polling timeout in mining.cpp to use std::chrono::stable_clock which can't go back in time due to OS changes instead of std::chrono::system_clock which can. Not making the actual fix in this commit to maintain max compatibility with previous behavior.",
      "tree": {
        "sha": "9cb7c867ca9de32ac0725b0102a982b9b37af862",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cb7c867ca9de32ac0725b0102a982b9b37af862"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4103397fabecf34b291028d88e863100d9cf80da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4103397fabecf34b291028d88e863100d9cf80da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4103397fabecf34b291028d88e863100d9cf80da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4103397fabecf34b291028d88e863100d9cf80da/comments",
    "author": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d81dccf191a48a6b59c3747d7b4ccbe3535dde40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d81dccf191a48a6b59c3747d7b4ccbe3535dde40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d81dccf191a48a6b59c3747d7b4ccbe3535dde40"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 37,
      "deletions": 31
    },
    "files": [
      {
        "sha": "51f16dbef0734792687f0948b2e5c0373e014e22",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4103397fabecf34b291028d88e863100d9cf80da/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4103397fabecf34b291028d88e863100d9cf80da/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4103397fabecf34b291028d88e863100d9cf80da",
        "patch": "@@ -50,6 +50,7 @@\n #include <stdint.h>\n #include <stdio.h>\n #include <memory>\n+#include <mutex>\n \n #ifndef WIN32\n #include <signal.h>\n@@ -554,14 +555,14 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n }\n \n static bool fHaveGenesis = false;\n-static boost::mutex cs_GenesisWait;\n+static std::mutex cs_GenesisWait;\n static CConditionVariable condvar_GenesisWait;\n \n static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)\n {\n     if (pBlockIndex != nullptr) {\n         {\n-            boost::unique_lock<boost::mutex> lock_GenesisWait(cs_GenesisWait);\n+            std::unique_lock<std::mutex> lock_GenesisWait(cs_GenesisWait);\n             fHaveGenesis = true;\n         }\n         condvar_GenesisWait.notify_all();\n@@ -1623,7 +1624,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // Wait for genesis block to be processed\n     {\n-        boost::unique_lock<boost::mutex> lock(cs_GenesisWait);\n+        std::unique_lock<std::mutex> lock(cs_GenesisWait);\n         while (!fHaveGenesis) {\n             condvar_GenesisWait.wait(lock);\n         }"
      },
      {
        "sha": "63ba49227285c4a72d8558c1feb053627e9e7acc",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4103397fabecf34b291028d88e863100d9cf80da/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4103397fabecf34b291028d88e863100d9cf80da/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=4103397fabecf34b291028d88e863100d9cf80da",
        "patch": "@@ -26,6 +26,7 @@\n #include \"validationinterface.h\"\n #include \"warnings.h\"\n \n+#include <chrono>\n #include <memory>\n #include <stdint.h>\n \n@@ -451,7 +452,9 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     {\n         // Wait to respond until either the best block changes, OR a minute has passed and there are more transactions\n         uint256 hashWatchedChain;\n-        boost::system_time checktxtime;\n+        // TODO: Change checktxtime type to std::chrono::steady_clock::time_point so it can never go back in time due to\n+        // modifying the time in the OS.\n+        std::chrono::system_clock::time_point checktxtime;\n         unsigned int nTransactionsUpdatedLastLP;\n \n         if (lpval.isStr())\n@@ -472,17 +475,19 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         // Release the wallet and main lock while waiting\n         LEAVE_CRITICAL_SECTION(cs_main);\n         {\n-            checktxtime = boost::get_system_time() + boost::posix_time::minutes(1);\n+            // TODO: Change std::chrono::system_clock::now() to std::chrono::steady_clock::now()\n+            // (see comment at checktxtime definition).\n+            checktxtime = std::chrono::system_clock::now() + std::chrono::minutes(1);\n \n-            boost::unique_lock<boost::mutex> lock(csBestBlock);\n+            std::unique_lock<std::mutex> lock(csBestBlock);\n             while (chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning())\n             {\n-                if (!cvBlockChange.timed_wait(lock, checktxtime))\n+                if (cvBlockChange.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n                     // Timeout: Check transactions for update\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n-                    checktxtime += boost::posix_time::seconds(10);\n+                    checktxtime += std::chrono::seconds(10);\n                 }\n             }\n         }"
      },
      {
        "sha": "9bd9a125425f1f174b53fc42f61dceb851cc8692",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 22,
        "deletions": 23,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4103397fabecf34b291028d88e863100d9cf80da/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4103397fabecf34b291028d88e863100d9cf80da/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=4103397fabecf34b291028d88e863100d9cf80da",
        "patch": "@@ -8,9 +8,8 @@\n \n #include \"threadsafety.h\"\n \n-#include <boost/thread/condition_variable.hpp>\n-#include <boost/thread/mutex.hpp>\n-#include <boost/thread/recursive_mutex.hpp>\n+#include <condition_variable>\n+#include <mutex>\n \n \n ////////////////////////////////////////////////\n@@ -21,17 +20,17 @@\n \n /*\n CCriticalSection mutex;\n-    boost::recursive_mutex mutex;\n+    std::recursive_mutex mutex;\n \n LOCK(mutex);\n-    boost::unique_lock<boost::recursive_mutex> criticalblock(mutex);\n+    std::unique_lock<std::recursive_mutex> criticalblock(mutex);\n \n LOCK2(mutex1, mutex2);\n-    boost::unique_lock<boost::recursive_mutex> criticalblock1(mutex1);\n-    boost::unique_lock<boost::recursive_mutex> criticalblock2(mutex2);\n+    std::unique_lock<std::recursive_mutex> criticalblock1(mutex1);\n+    std::unique_lock<std::recursive_mutex> criticalblock2(mutex2);\n \n TRY_LOCK(mutex, name);\n-    boost::unique_lock<boost::recursive_mutex> name(mutex, boost::try_to_lock_t);\n+    std::unique_lock<std::recursive_mutex> name(mutex, std::try_to_lock);\n \n ENTER_CRITICAL_SECTION(mutex); // no RAII\n     mutex.lock();\n@@ -85,33 +84,33 @@ void static inline DeleteLock(void* cs) {}\n #define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n \n /**\n- * Wrapped boost mutex: supports recursive locking, but no waiting\n+ * Wrapped std mutex: supports recursive locking, but no waiting\n  * TODO: We should move away from using the recursive lock by default.\n  */\n-class CCriticalSection : public AnnotatedMixin<boost::recursive_mutex>\n+class CCriticalSection : public AnnotatedMixin<std::recursive_mutex>\n {\n public:\n     ~CCriticalSection() {\n         DeleteLock((void*)this);\n     }\n };\n \n-/** Wrapped boost mutex: supports waiting but not recursive locking */\n-typedef AnnotatedMixin<boost::mutex> CWaitableCriticalSection;\n+/** Wrapped std mutex: supports waiting but not recursive locking */\n+typedef AnnotatedMixin<std::mutex> CWaitableCriticalSection;\n \n-/** Just a typedef for boost::condition_variable, can be wrapped later if desired */\n-typedef boost::condition_variable CConditionVariable;\n+/** Just a typedef for std::condition_variable, can be wrapped later if desired */\n+typedef std::condition_variable CConditionVariable;\n \n #ifdef DEBUG_LOCKCONTENTION\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n #endif\n \n-/** Wrapper around boost::unique_lock<Mutex> */\n+/** Wrapper around std::unique_lock<Mutex> */\n template <typename Mutex>\n class SCOPED_LOCKABLE CMutexLock\n {\n private:\n-    boost::unique_lock<Mutex> lock;\n+    std::unique_lock<Mutex> lock;\n \n     void Enter(const char* pszName, const char* pszFile, int nLine)\n     {\n@@ -136,7 +135,7 @@ class SCOPED_LOCKABLE CMutexLock\n     }\n \n public:\n-    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : lock(mutexIn, boost::defer_lock)\n+    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : lock(mutexIn, std::defer_lock)\n     {\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n@@ -148,7 +147,7 @@ class SCOPED_LOCKABLE CMutexLock\n     {\n         if (!pmutexIn) return;\n \n-        lock = boost::unique_lock<Mutex>(*pmutexIn, boost::defer_lock);\n+        lock = std::unique_lock<Mutex>(*pmutexIn, std::defer_lock);\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n         else\n@@ -191,16 +190,16 @@ typedef CMutexLock<CCriticalSection> CCriticalBlock;\n class CSemaphore\n {\n private:\n-    boost::condition_variable condition;\n-    boost::mutex mutex;\n+    std::condition_variable condition;\n+    std::mutex mutex;\n     int value;\n \n public:\n     explicit CSemaphore(int init) : value(init) {}\n \n     void wait()\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n+        std::unique_lock<std::mutex> lock(mutex);\n         while (value < 1) {\n             condition.wait(lock);\n         }\n@@ -209,7 +208,7 @@ class CSemaphore\n \n     bool try_wait()\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n+        std::unique_lock<std::mutex> lock(mutex);\n         if (value < 1)\n             return false;\n         value--;\n@@ -219,7 +218,7 @@ class CSemaphore\n     void post()\n     {\n         {\n-            boost::unique_lock<boost::mutex> lock(mutex);\n+            std::unique_lock<std::mutex> lock(mutex);\n             value++;\n         }\n         condition.notify_one();"
      },
      {
        "sha": "e77ff7e2a379ef8ee7edc4548ef51583c3a0ccac",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4103397fabecf34b291028d88e863100d9cf80da/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4103397fabecf34b291028d88e863100d9cf80da/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=4103397fabecf34b291028d88e863100d9cf80da",
        "patch": "@@ -28,6 +28,7 @@\n #include <vector>\n \n #include <boost/signals2/signal.hpp>\n+#include <boost/thread/thread.hpp>\n \n // Application startup time (used for uptime calculation)\n int64_t GetStartupTime();"
      }
    ]
  }
]