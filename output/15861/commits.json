[
  {
    "sha": "f016cd420df932364b33dcb6ce8943edc489f9c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDE2Y2Q0MjBkZjkzMjM2NGIzM2RjYjZjZTg5NDNlZGM0ODlmOWM1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-05-16T17:33:31Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-12-15T17:09:11Z"
      },
      "message": "Restore warning for individual unknown version bits, as well as unknown version schemas",
      "tree": {
        "sha": "efa98bd69da6abb6d7aadbfe41ef00f70dc9759c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efa98bd69da6abb6d7aadbfe41ef00f70dc9759c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f016cd420df932364b33dcb6ce8943edc489f9c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f016cd420df932364b33dcb6ce8943edc489f9c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f016cd420df932364b33dcb6ce8943edc489f9c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f016cd420df932364b33dcb6ce8943edc489f9c5/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "831675c8dccfa6525ffe751da3cc60709c380953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/831675c8dccfa6525ffe751da3cc60709c380953",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/831675c8dccfa6525ffe751da3cc60709c380953"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 71,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1313fd8945ebd36d40aef7f35008c271d4e5ef53",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f016cd420df932364b33dcb6ce8943edc489f9c5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f016cd420df932364b33dcb6ce8943edc489f9c5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f016cd420df932364b33dcb6ce8943edc489f9c5",
        "patch": "@@ -2474,13 +2474,39 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n             }\n         }\n         // Check the version of the last 100 blocks to see if we need to upgrade:\n+        int unexpected_bit_count[VERSIONBITS_NUM_BITS], nonversionbit_count = 0;\n+        for (size_t i = 0; i < VERSIONBITS_NUM_BITS; ++i) unexpected_bit_count[i] = 0;\n+        static constexpr int WARNING_THRESHOLD = 100/2;\n+        bool warning_threshold_hit = false;\n         for (int i = 0; i < 100 && pindex != nullptr; i++)\n         {\n             int32_t nExpectedVersion = ComputeBlockVersion(pindex->pprev, chainParams.GetConsensus());\n             if (pindex->nVersion > VERSIONBITS_LAST_OLD_BLOCK_VERSION && (pindex->nVersion & ~nExpectedVersion) != 0)\n+            {\n                 ++num_unexpected_version;\n+                if ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) {\n+                    for (int bit = 0; bit < VERSIONBITS_NUM_BITS; ++bit) {\n+                        const int32_t mask = 1 << bit;\n+                        if ((nExpectedVersion & mask) != (pindex->nVersion & mask)) {\n+                            if (++unexpected_bit_count[bit] > WARNING_THRESHOLD) {\n+                                warning_threshold_hit = true;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // Non-versionbits upgrade\n+                    if (++nonversionbit_count > WARNING_THRESHOLD) {\n+                        warning_threshold_hit = true;\n+                    }\n+                }\n+            }\n             pindex = pindex->pprev;\n         }\n+        if (warning_threshold_hit) {\n+            auto strWarning = _(\"Warning: Unrecognised block version being mined! Unknown rules may or may not be in effect\");\n+            // notify GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n+            DoWarning(strWarning);\n+        }\n     }\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,"
      },
      {
        "sha": "39b69cd9f275cbcdd6d6ef5c65147fffa29f1e74",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f016cd420df932364b33dcb6ce8943edc489f9c5/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f016cd420df932364b33dcb6ce8943edc489f9c5/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=f016cd420df932364b33dcb6ce8943edc489f9c5",
        "patch": "@@ -42,6 +42,7 @@ def setup_network(self):\n             \"-alertnotify=echo > {}\".format(os.path.join(self.alertnotify_dir, '%s')),\n             \"-blocknotify=echo > {}\".format(os.path.join(self.blocknotify_dir, '%s')),\n         ], [\n+            \"-blockversion=211\",\n             \"-rescan\",\n             \"-walletnotify=echo > {}\".format(os.path.join(self.walletnotify_dir, notify_outputname('%w', '%s'))),\n         ]]\n@@ -137,6 +138,24 @@ def run_test(self):\n \n         # TODO: add test for `-alertnotify` large fork notifications\n \n+        # Mine 51 unknown-version blocks. -alertnotify should trigger on the 51st.\n+        self.log.info(\"test -alertnotify\")\n+        self.nodes[1].generatetoaddress(51, ADDRESS_BCRT1_UNSPENDABLE)\n+        self.sync_all()\n+\n+        # Give bitcoind 10 seconds to write the alert notification\n+        self.wait_until(lambda: len(os.listdir(self.alertnotify_dir)), timeout=10)\n+\n+        for notify_file in os.listdir(self.alertnotify_dir):\n+            os.remove(os.path.join(self.alertnotify_dir, notify_file))\n+\n+        # Mine more up-version blocks, should not get more alerts:\n+        self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_UNSPENDABLE)\n+        self.sync_all()\n+\n+        self.log.info(\"-alertnotify should not continue notifying for more unknown version blocks\")\n+        assert_equal(len(os.listdir(self.alertnotify_dir)), 0)\n+\n     def expect_wallet_notify(self, tx_ids):\n         self.wait_until(lambda: len(os.listdir(self.walletnotify_dir)) >= len(tx_ids), timeout=10)\n         assert_equal(sorted(notify_outputname(self.wallet, tx_id) for tx_id in tx_ids), sorted(os.listdir(self.walletnotify_dir)))"
      },
      {
        "sha": "6270020aad4e3fb34e183b82b4e7ddee160d5e07",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f016cd420df932364b33dcb6ce8943edc489f9c5/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f016cd420df932364b33dcb6ce8943edc489f9c5/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=f016cd420df932364b33dcb6ce8943edc489f9c5",
        "patch": "@@ -20,7 +20,10 @@\n VB_TOP_BITS = 0x20000000\n VB_UNKNOWN_BIT = 27       # Choose a bit unassigned to any deployment\n VB_UNKNOWN_VERSION = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)\n+UNKNOWN_VERSION_SCHEMA = 0x60000000\n+UNKNOWN_VERSION_SCHEMA_THRESHOLD = 51\n \n+WARN_UNKNOWN_RULES_MINED = \"Warning: Unrecognised block version being mined! Unknown rules may or may not be in effect\"\n WARN_UNKNOWN_RULES_ACTIVE = \"unknown new rules activated (versionbit {})\".format(VB_UNKNOWN_BIT)\n VB_PATTERN = re.compile(\"Warning: unknown new rules activated.*versionbit\")\n \n@@ -76,10 +79,33 @@ def run_test(self):\n         assert not VB_PATTERN.match(node.getmininginfo()[\"warnings\"])\n         assert not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"])\n \n+        self.log.info(\"Check that there is a warning if >50 blocks in the last 100 were an unknown version schema\")\n+        # Build UNKNOWN_VERSION_SCHEMA_THRESHOLD blocks signaling some unknown schema\n+        self.send_blocks_with_version(peer, UNKNOWN_VERSION_SCHEMA_THRESHOLD, UNKNOWN_VERSION_SCHEMA)\n+        # Check that get*info() shows the 51/100 unknown block version error.\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n+        # Close the period normally\n+        node.generatetoaddress(VB_PERIOD - UNKNOWN_VERSION_SCHEMA_THRESHOLD, node_deterministic_address)\n+        # Make sure the warning remains\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n+\n+        # Stop-start the node, and make sure the warning is gone\n+        self.restart_node(0)\n+        assert(WARN_UNKNOWN_RULES_MINED not in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED not in node.getnetworkinfo()[\"warnings\"])\n+        peer = node.add_p2p_connection(P2PInterface())\n+\n+        self.log.info(\"Check that there is a warning if >50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n         self.send_blocks_with_version(peer, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n         node.generatetoaddress(VB_PERIOD - VB_THRESHOLD, node_deterministic_address)\n \n+        # Check that get*info() shows the 51/100 unknown block version error.\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n+\n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Mine a period worth of expected blocks so the generic block-version warning\n         # is cleared. This will move the versionbit state to ACTIVE."
      }
    ]
  }
]