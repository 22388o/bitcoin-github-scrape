[
  {
    "sha": "ff25c32392596883c13623eed6018fabb7877ed7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjI1YzMyMzkyNTk2ODgzYzEzNjIzZWVkNjAxOGZhYmI3ODc3ZWQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-26T15:44:50Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-23T20:43:22Z"
      },
      "message": "mempool: add notification for added/removed entries\n\nAdd notification signals to make it possible to subscribe to mempool\nchanges:\n\n- NotifyEntryAdded(CTransactionRef)>\n- NotifyEntryRemoved(CTransactionRef, MemPoolRemovalReason)>\n\nAlso add a mempool removal reason enumeration, which is passed to the\nremoved notification based on why the transaction was removed from\nthe mempool.",
      "tree": {
        "sha": "faf5e8691f9c93c2a173961a969b3e420bf7ae39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faf5e8691f9c93c2a173961a969b3e420bf7ae39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff25c32392596883c13623eed6018fabb7877ed7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff25c32392596883c13623eed6018fabb7877ed7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff25c32392596883c13623eed6018fabb7877ed7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff25c32392596883c13623eed6018fabb7877ed7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71148b8947fe8b4d756822420a7f31c380159425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71148b8947fe8b4d756822420a7f31c380159425",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71148b8947fe8b4d756822420a7f31c380159425"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 39,
      "deletions": 17
    },
    "files": [
      {
        "sha": "54400caccc806db6e9afb70c879d7e07044c3a5f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff25c32392596883c13623eed6018fabb7877ed7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff25c32392596883c13623eed6018fabb7877ed7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ff25c32392596883c13623eed6018fabb7877ed7",
        "patch": "@@ -393,6 +393,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n \n bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n {\n+    NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n     // Used by main.cpp AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n@@ -449,8 +450,9 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     return true;\n }\n \n-void CTxMemPool::removeUnchecked(txiter it)\n+void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n+    NotifyEntryRemoved(it->GetSharedTx(), reason);\n     const uint256 hash = it->GetTx().GetHash();\n     BOOST_FOREACH(const CTxIn& txin, it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n@@ -502,7 +504,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants\n     }\n }\n \n-void CTxMemPool::removeRecursive(const CTransaction &origTx)\n+void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)\n {\n     // Remove transaction from memory pool\n     {\n@@ -529,7 +531,8 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx)\n         BOOST_FOREACH(txiter it, txToRemove) {\n             CalculateDescendants(it, setAllRemoves);\n         }\n-        RemoveStaged(setAllRemoves, false);\n+\n+        RemoveStaged(setAllRemoves, false, reason);\n     }\n }\n \n@@ -567,7 +570,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     for (txiter it : txToRemove) {\n         CalculateDescendants(it, setAllRemoves);\n     }\n-    RemoveStaged(setAllRemoves, false);\n+    RemoveStaged(setAllRemoves, false, MemPoolRemovalReason::REORG);\n }\n \n void CTxMemPool::removeConflicts(const CTransaction &tx)\n@@ -581,7 +584,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx)\n             if (txConflict != tx)\n             {\n                 ClearPrioritisation(txConflict.GetHash());\n-                removeRecursive(txConflict);\n+                removeRecursive(txConflict, MemPoolRemovalReason::CONFLICT);\n             }\n         }\n     }\n@@ -610,7 +613,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n         if (it != mapTx.end()) {\n             setEntries stage;\n             stage.insert(it);\n-            RemoveStaged(stage, true);\n+            RemoveStaged(stage, true, MemPoolRemovalReason::BLOCK);\n         }\n         removeConflicts(*tx);\n         ClearPrioritisation(tx->GetHash());\n@@ -989,11 +992,11 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 15 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n \n-void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants) {\n+void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage, updateDescendants);\n     BOOST_FOREACH(const txiter& it, stage) {\n-        removeUnchecked(it);\n+        removeUnchecked(it, reason);\n     }\n }\n \n@@ -1009,7 +1012,7 @@ int CTxMemPool::Expire(int64_t time) {\n     BOOST_FOREACH(txiter removeit, toremove) {\n         CalculateDescendants(removeit, stage);\n     }\n-    RemoveStaged(stage, false);\n+    RemoveStaged(stage, false, MemPoolRemovalReason::EXPIRY);\n     return stage.size();\n }\n \n@@ -1118,7 +1121,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n             BOOST_FOREACH(txiter iter, stage)\n                 txn.push_back(iter->GetTx());\n         }\n-        RemoveStaged(stage, false);\n+        RemoveStaged(stage, false, MemPoolRemovalReason::SIZELIMIT);\n         if (pvNoSpendsRemaining) {\n             BOOST_FOREACH(const CTransaction& tx, txn) {\n                 BOOST_FOREACH(const CTxIn& txin, tx.vin) {"
      },
      {
        "sha": "f842a07dd657153208c5f946e9b3cd3212a96815",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 22,
        "deletions": 3,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff25c32392596883c13623eed6018fabb7877ed7/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff25c32392596883c13623eed6018fabb7877ed7/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ff25c32392596883c13623eed6018fabb7877ed7",
        "patch": "@@ -25,6 +25,8 @@\n #include \"boost/multi_index/ordered_index.hpp\"\n #include \"boost/multi_index/hashed_index.hpp\"\n \n+#include <boost/signals2/signal.hpp>\n+\n class CAutoFile;\n class CBlockIndex;\n \n@@ -333,6 +335,19 @@ struct TxMempoolInfo\n     int64_t nFeeDelta;\n };\n \n+/** Reason why a transaction was removed from the mempool,\n+ * this is passed to the notification signal.\n+ */\n+enum class MemPoolRemovalReason {\n+    UNKNOWN = 0, //! Manually removed or unknown reason\n+    EXPIRY,      //! Expired from mempool\n+    SIZELIMIT,   //! Removed in size limiting\n+    REORG,       //! Removed for reorganization\n+    BLOCK,       //! Removed for block\n+    CONFLICT,    //! Removed for conflict with in-block transaction\n+    REPLACED     //! Removed for replacement\n+};\n+\n /**\n  * CTxMemPool stores valid-according-to-the-current-best-chain transactions\n  * that may be included in the next block.\n@@ -521,10 +536,11 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool validFeeEstimate = true);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate = true);\n \n-    void removeRecursive(const CTransaction &tx);\n+    void removeRecursive(const CTransaction &tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n     void removeConflicts(const CTransaction &tx);\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight);\n+\n     void clear();\n     void _clear(); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);\n@@ -551,7 +567,7 @@ class CTxMemPool\n      *  Set updateDescendants to true when removing a tx that was in a block, so\n      *  that any in-mempool descendants have their ancestor state updated.\n      */\n-    void RemoveStaged(setEntries &stage, bool updateDescendants);\n+    void RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n \n     /** When adding transactions from a disconnected block back to the mempool,\n      *  new mempool entries may have children in the mempool (which is generally\n@@ -647,6 +663,9 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;\n+    boost::signals2::signal<void (CTransactionRef, MemPoolRemovalReason)> NotifyEntryRemoved;\n+\n private:\n     /** UpdateForDescendants is used by UpdateTransactionsFromBlock to update\n      *  the descendants for a single transaction that has been added to the\n@@ -683,7 +702,7 @@ class CTxMemPool\n      *  transactions in a chain before we've updated all the state for the\n      *  removal.\n      */\n-    void removeUnchecked(txiter entry);\n+    void removeUnchecked(txiter entry, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n };\n \n /** "
      },
      {
        "sha": "d382e121bc724ec7fe3b3acda6cf350af858f4cb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff25c32392596883c13623eed6018fabb7877ed7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff25c32392596883c13623eed6018fabb7877ed7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ff25c32392596883c13623eed6018fabb7877ed7",
        "patch": "@@ -956,7 +956,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             if (plTxnReplaced)\n                 plTxnReplaced->push_back(it->GetSharedTx());\n         }\n-        pool.RemoveStaged(allConflicting, false);\n+        pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n \n         // This transaction should only count for fee estimation if\n         // the node is not behind and it is not dependent on any other\n@@ -2166,7 +2166,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n             // ignore validation errors in resurrected transactions\n             CValidationState stateDummy;\n             if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, it, false, NULL, NULL, true)) {\n-                mempool.removeRecursive(tx);\n+                mempool.removeRecursive(tx, MemPoolRemovalReason::REORG);\n             } else if (mempool.exists(tx.GetHash())) {\n                 vHashUpdate.push_back(tx.GetHash());\n             }\n@@ -3597,7 +3597,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n-            return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__, \n+            return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n                          pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n@@ -3768,7 +3768,7 @@ bool LoadBlockIndex(const CChainParams& chainparams)\n     return true;\n }\n \n-bool InitBlockIndex(const CChainParams& chainparams) \n+bool InitBlockIndex(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n "
      }
    ]
  },
  {
    "sha": "4afbde6028708541c4da8732a1bd12fb8735fdae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWZiZGU2MDI4NzA4NTQxYzRkYTg3MzJhMWJkMTJmYjg3MzVmZGFl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-12-16T16:34:39Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-23T20:43:22Z"
      },
      "message": "Introduce MemPoolConflictRemovalTracker\n\nAnalogue to ConnectTrace that tracks transactions that have been removed from the mempool due to conflicts and then passes them through SyncTransaction at the end of its scope.",
      "tree": {
        "sha": "b609405705274e9f07f9df6e419df9a78599d592",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b609405705274e9f07f9df6e419df9a78599d592"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4afbde6028708541c4da8732a1bd12fb8735fdae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4afbde6028708541c4da8732a1bd12fb8735fdae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4afbde6028708541c4da8732a1bd12fb8735fdae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4afbde6028708541c4da8732a1bd12fb8735fdae/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff25c32392596883c13623eed6018fabb7877ed7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff25c32392596883c13623eed6018fabb7877ed7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff25c32392596883c13623eed6018fabb7877ed7"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 45,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b882416961ea06da62da759b7b4edda73016ee53",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4afbde6028708541c4da8732a1bd12fb8735fdae/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4afbde6028708541c4da8732a1bd12fb8735fdae/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4afbde6028708541c4da8732a1bd12fb8735fdae",
        "patch": "@@ -157,6 +157,39 @@ namespace {\n     set<int> setDirtyFileInfo;\n } // anon namespace\n \n+/* Use this class to start tracking transactions that are removed from the\n+ * mempool and pass all those transactions through SyncTransaction when the\n+ * object goes out of scope. This is currently only used to call SyncTransaction\n+ * on conflicts removed from the mempool during block connection.  Applied in\n+ * ActivateBestChain around ActivateBestStep which in turn calls:\n+ * ConnectTip->removeForBlock->removeConflicts\n+ */\n+class MemPoolConflictRemovalTracker\n+{\n+private:\n+    std::vector<CTransactionRef> conflictedTxs;\n+    CTxMemPool &pool;\n+\n+public:\n+    MemPoolConflictRemovalTracker(CTxMemPool &_pool) : pool(_pool) {\n+        pool.NotifyEntryRemoved.connect(boost::bind(&MemPoolConflictRemovalTracker::NotifyEntryRemoved, this, _1, _2));\n+    }\n+\n+    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n+        if (reason == MemPoolRemovalReason::CONFLICT) {\n+            conflictedTxs.push_back(txRemoved);\n+        }\n+    }\n+\n+    ~MemPoolConflictRemovalTracker() {\n+        pool.NotifyEntryRemoved.disconnect(boost::bind(&MemPoolConflictRemovalTracker::NotifyEntryRemoved, this, _1, _2));\n+        for (const auto& tx : conflictedTxs) {\n+            GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+        }\n+        conflictedTxs.clear();\n+    }\n+};\n+\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     // Find the first block the caller has in the main chain\n@@ -2453,6 +2486,14 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n+            { // TODO: Tempoarily ensure that mempool removals are notified before\n+              // connected transactions.  This shouldn't matter, but the abandoned\n+              // state of transactions in our wallet is currently cleared when we\n+              // receive another notification and there is a race condition where\n+              // notification of a connected conflict might cause an outside process\n+              // to abandon a transaction and then have it inadvertantly cleared by\n+              // the notification that the conflicted transaction was evicted.\n+            MemPoolConflictRemovalTracker mrt(mempool);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n             if (pindexMostWork == NULL) {\n                 pindexMostWork = FindMostWorkChain();\n@@ -2476,6 +2517,10 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             fInitialDownload = IsInitialBlockDownload();\n \n             // throw all transactions though the signal-interface\n+\n+            } // MemPoolConflictRemovalTracker destroyed and conflict evictions are notified\n+\n+            // Transactions in the connnected block are notified\n             for (const auto& pair : connectTrace.blocksConnected) {\n                 assert(pair.second);\n                 const CBlock& block = *(pair.second);"
      }
    ]
  },
  {
    "sha": "094e4b33839404d9c18200fc30d9a993a3dc106f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTRlNGIzMzgzOTQwNGQ5YzE4MjAwZmMzMGQ5YTk5M2EzZGMxMDZm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-12-16T19:17:13Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-23T20:43:22Z"
      },
      "message": "Better document usage of SyncTransaction",
      "tree": {
        "sha": "7a85d9479cb849c407a7b7c4a4d4aaf0e607cea7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a85d9479cb849c407a7b7c4a4d4aaf0e607cea7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/094e4b33839404d9c18200fc30d9a993a3dc106f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/094e4b33839404d9c18200fc30d9a993a3dc106f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/094e4b33839404d9c18200fc30d9a993a3dc106f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/094e4b33839404d9c18200fc30d9a993a3dc106f/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4afbde6028708541c4da8732a1bd12fb8735fdae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4afbde6028708541c4da8732a1bd12fb8735fdae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4afbde6028708541c4da8732a1bd12fb8735fdae"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 19,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a2e76f2036e1ddd16ecdb11b0ece62a1e73df032",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/094e4b33839404d9c18200fc30d9a993a3dc106f/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/094e4b33839404d9c18200fc30d9a993a3dc106f/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=094e4b33839404d9c18200fc30d9a993a3dc106f",
        "patch": "@@ -50,9 +50,16 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    /** A posInBlock value for SyncTransaction which indicates the transaction was conflicted, disconnected, or not in a block */\n+    /** A posInBlock value for SyncTransaction calls for tranactions not\n+     * included in connected blocks such as transactions removed from mempool,\n+     * accepted to mempool or appearing in disconnected blocks.*/\n     static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;\n-    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n+    /** Notifies listeners of updated transaction data (transaction, and\n+     * optionally the block it is found in). Called with block data when\n+     * transaction is included in a connected block, and without block data when\n+     * transaction was accepted to mempool, removed from mempool (only when\n+     * removal was due to conflict from connected block), or appeared in a\n+     * disconnected block.*/\n     boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;"
      },
      {
        "sha": "b4715622cf4f867b9f9163870ff2cacadd3f20a7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/094e4b33839404d9c18200fc30d9a993a3dc106f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/094e4b33839404d9c18200fc30d9a993a3dc106f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=094e4b33839404d9c18200fc30d9a993a3dc106f",
        "patch": "@@ -1003,9 +1003,17 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n }\n \n /**\n- * Add a transaction to the wallet, or update it.\n- * pblock is optional, but should be provided if the transaction is known to be in a block.\n+ * Add a transaction to the wallet, or update it.  pIndex and posInBlock should\n+ * be set when the transaction was known to be included in a block.  When\n+ * posInBlock = SYNC_TRANSACTION_NOT_IN_BLOCK (-1) , then wallet state is not\n+ * updated in AddToWallet, but notifications happen and cached balances are\n+ * marked dirty.\n  * If fUpdate is true, existing transactions will be updated.\n+ * TODO: One exception to this is that the abandoned state is cleared under the\n+ * assumption that any further notification of a transaction that was considered\n+ * abandoned is an indication that it is not safe to be considered abandoned.\n+ * Abandoned state should probably be more carefuly tracked via different\n+ * posInBlock signals or by checking mempool presence when necessary.\n  */\n bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n {"
      }
    ]
  }
]