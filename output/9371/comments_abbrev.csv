dcousens,2016-12-19T04:09:07Z,"Is there a way to isolate these changes to the wallet code only?\nI understand it is to fix a problem there,  but ideally I'd rather see just a primitive mechanism in the mempool for removal events,  and the wallet then handle that with a ""mempool removal tracker"" and such.\n\nAFAIK, non-wallet users don't need this or #9240 reverted.",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-267878008,267878008,
laanwj,2016-12-19T07:22:03Z,"> I'd rather see just a primitive mechanism in the mempool for removal events, and the wallet then handle that with a ""mempool removal tracker"" and such.\n\nIn #8549 I had added a specific signal on the mempool to be notified of removed transactions, even with a reason field.\nI think this was slightly more elegant than having a stateful StartTracking/StopTracking in the mempool itself and keep",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-267898126,267898126,
jonasschnelli,2016-12-19T07:35:14Z,Agree with @laanwj: the reason enum is really what we should have for mempool removal notifications: https://github.com/bitcoin/bitcoin/pull/8549/files#diff-d8e6fe13399f13c42a93ec8326c60614R150,https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-267899860,267899860,
dcousens,2016-12-19T07:44:59Z,"Agree with @laanwj,  I actually thought that was merged and was wondering why this wasn't using it.",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-267901192,267901192,
morcos,2016-12-19T11:56:21Z,"@laanwj ah, sorry I hadn't seen #8549.  The reason I did it this way instead of trying to do notifications from the mempool directly was because we had just gone to such much effort to remove other notifications from happening within cs_main during the block connection logic.  \n\nIt would be very easy to add to this PR the ability to distinguish between: ""added"", ""removed"", ""appeared in a disco",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-267947272,267947272,
morcos,2017-01-04T17:56:25Z,rebased,https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-270438832,270438832,
morcos,2017-01-04T18:03:42Z,".. and added @ryanofsky's suggested cleanup\n\n",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-270440756,270440756,
sipa,2017-01-09T20:22:10Z,"It seems strange to have a constraint that the mempool is either in a tracking or non-tracking state... the mempool object itself shouldn't need to know or care that there is at most one entity interested in seeing its removals.\n\nWould it be possible to instead have a callback installed from the mempool to notify whatever is interested of removed transactions?",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-271396629,271396629,
morcos,2017-01-09T20:43:43Z,"Yes @laanwj had a similar comment.\nWhat I wanted to accomplish was that the notifications (or at least some of the potentially time consuming ones) happened outside of the critical path.  The same as the change we recently made with transactions in connected blocks.  But perhaps there is a better way to design that where the mempool just fires off its notifications immediately, but there can be ",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-271401915,271401915,
sipa,2017-01-09T20:56:54Z,"The receiver of the mempool-removal event notifications can also still add things to a queue for later processing, i mean. It doesn't need to be the mempool that does the batching - as that inherently only works for a single consumer of event.",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-271405120,271405120,
morcos,2017-01-18T19:14:12Z,"OK I've redone this in a way that is hopefully more appealing.\n\nThe first commit is stolen (and slightly tweaked) from #8549 and will lay the ground work for a more flexible notification system on mempool actions. \n\nThen I introduce a minimal `MemPoolConflictRemovalTracker` which should exactly mimic the behavior of txConflicted that was removed in #9240.  I wouldn't argue that we want to ",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-273571462,273571462,
TheBlueMatt,2017-01-18T22:43:44Z,"I believe this breaks #9570. Even if its rebased on #9570 (so that SyncTransaction becomes SyncTransactions and they're all batched together), the multiple per-block SyncTransactions calls will still expose wallet state as of mid-block to RPC clients. I'm not sure how exactly we should go about fixing this, but one way might be to take @theuni's suggestion for 0.14 and split SyncTransaction to Syn",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-273625900,273625900,
morcos,2017-01-18T23:09:47Z,"Yeah ....  frustrating...   Ideally we wouldn't actually be calling the wallet part of SyncTransaction for these transactions anyway.  But I suspect that for 0.14 we should just be fine with wallet state being inspectable between these.  As you point out it should have basically no effect...  (it really shouldn't be unabandoning anything, that would imply some other logic was broken)\n\n",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-273631554,273631554,
morcos,2017-01-19T17:07:15Z,"OK this has been rebased on #9583 which automagically fixes the lesser synchronization issues here if these notifications are also moved inside cs_main.\n\nThe ugly scope hack to have removals notified before connections I think should be removed after we tidy up abandoned logic in some future PR.  I believe the natural order of notifications should be chainstate changes before mempool changes..",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-273835854,273835854,
TheBlueMatt,2017-01-23T21:46:26Z,utACK 094e4b33839404d9c18200fc30d9a993a3dc106f,https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-274627615,274627615,
laanwj,2017-01-24T09:06:41Z,Looks good to me now. utACK 094e4b3,https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-274747333,274747333,
ryanofsky,2020-03-12T21:36:13Z,"@jnewbery pointed out the PR description here became out of date and doesn't reflect the change that was actually merged\n\nre: https://github.com/bitcoin/bitcoin/pull/9371#issue-98389524\n\n> I think we have to decide which one of these 3 choices we like best:\n>\n>- walletnotify, zmq notification and UI notification on all transactions evicted from the mempool for any reason => merge this ",https://github.com/bitcoin/bitcoin/pull/9371#issuecomment-598428907,598428907,
sipa,2016-12-16T20:38:46Z,"It's better to have a single return statement that returns a local variable over using std::move:\n\n```c++\n    ...\n    std::vector<CTransactionRef> temp;\n    if (trackRemovalsCount == 0) {\n        temp.emplace_back(std::move(removedTxs));\n        removedTxs.clear();\n    }\n    return temp;\n}\n```\n\nThis allows the compiler to use NVRO (named return value optimization) - the `",https://github.com/bitcoin/bitcoin/pull/9371#discussion_r92882079,92882079,src/txmempool.cpp
ryanofsky,2016-12-16T21:15:03Z,"Using swap in the middle could be a nice way to simplify this:\n\n```\n    std::vector<CTransactionRef> temp;\n    if (trackRemovalsCount == 0)\n        temp.swap(removedTxs);\n    return temp;\n```",https://github.com/bitcoin/bitcoin/pull/9371#discussion_r92887197,92887197,src/txmempool.cpp
rebroad,2016-12-19T03:56:33Z,"Is this the only notification, or is the GUI notified also?",https://github.com/bitcoin/bitcoin/pull/9371#discussion_r92965473,92965473,src/txmempool.cpp
morcos,2016-12-19T11:28:26Z,I like @ryanofsky's suggestion. Will do.,https://github.com/bitcoin/bitcoin/pull/9371#discussion_r93013886,93013886,src/txmempool.cpp
morcos,2016-12-19T11:29:13Z,about the error?  this is the only log of the fact that a removal happened without notification.,https://github.com/bitcoin/bitcoin/pull/9371#discussion_r93013994,93013994,src/txmempool.cpp
theuni,2017-01-18T19:56:01Z,"Seems like a good time to split up SyncTransaction.\n\nHow about dropping the SYNC_TRANSACTION_NOT_IN_BLOCK kludge, and adding a new signal for mempool removals? I suspect @TheBlueMatt's recent-removed-tx-cache could benefit from that as well.",https://github.com/bitcoin/bitcoin/pull/9371#discussion_r96720627,96720627,src/validation.cpp
TheBlueMatt,2017-01-18T22:39:09Z,"I believe you need some lock held here so that no two threads could be calling mempool.NotifyEntryRemoved.connect at the same time, however I agree you dont want to SyncTransaction with cs_main held. You could add a static mutex here, or you could create the object with cs_main, then std::move it to a dummy which will be destroyed without cs_main.",https://github.com/bitcoin/bitcoin/pull/9371#discussion_r96751491,96751491,src/validation.cpp
morcos,2017-01-18T23:07:32Z,Hmm I guess you're right..  Perhaps I need to go back to reference counting these things..,https://github.com/bitcoin/bitcoin/pull/9371#discussion_r96756523,96756523,src/validation.cpp
laanwj,2017-01-24T09:04:27Z,Î¼-nit: please don't include space changes in otherwise unchanged lines/functions,https://github.com/bitcoin/bitcoin/pull/9371#discussion_r97500045,97500045,src/validation.cpp
morcos,2017-01-24T11:11:15Z,heh.  sure.  i'll pass that on to the commit author. :),https://github.com/bitcoin/bitcoin/pull/9371#discussion_r97523183,97523183,src/validation.cpp
