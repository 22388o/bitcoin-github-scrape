[
  {
    "sha": "5c21e6c6d3843232f384079837da1d9fae573b8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzIxZTZjNmQzODQzMjMyZjM4NDA3OTgzN2RhMWQ5ZmFlNTczYjhk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-05T14:17:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-07T16:29:48Z"
      },
      "message": "[logging] Comment all continuing logs.\n\nMost logs should terminated with a '\\n'. Some logs\nare built up over multiple calls to logPrintf(), so\ndo not need a newline terminater. Comment all of\nthese 'continued' logs as a linter hing.",
      "tree": {
        "sha": "10596bfe565862e054d4a38655c049989f2e41e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10596bfe565862e054d4a38655c049989f2e41e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c21e6c6d3843232f384079837da1d9fae573b8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c21e6c6d3843232f384079837da1d9fae573b8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c21e6c6d3843232f384079837da1d9fae573b8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c21e6c6d3843232f384079837da1d9fae573b8d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b54155a459c235626fddc4495bb681b93d3dbc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b54155a459c235626fddc4495bb681b93d3dbc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b54155a459c235626fddc4495bb681b93d3dbc5"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "e401b5fb1b5b039bfe6b8a9b44a06d014d2cda34",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c21e6c6d3843232f384079837da1d9fae573b8d/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c21e6c6d3843232f384079837da1d9fae573b8d/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=5c21e6c6d3843232f384079837da1d9fae573b8d",
        "patch": "@@ -63,7 +63,7 @@ class CBitcoinLevelDBLogger : public leveldb::Logger {\n \n                 assert(p <= limit);\n                 base[std::min(bufsize - 1, (int)(p - base))] = '\\0';\n-                LogPrintf(\"leveldb: %s\", base);\n+                LogPrintf(\"leveldb: %s\", base);  /* Continued */\n                 if (base != buffer) {\n                     delete[] base;\n                 }"
      },
      {
        "sha": "b1897e0c17bc994c6e93276ed94a51e41aea277d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c21e6c6d3843232f384079837da1d9fae573b8d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c21e6c6d3843232f384079837da1d9fae573b8d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5c21e6c6d3843232f384079837da1d9fae573b8d",
        "patch": "@@ -1215,7 +1215,7 @@ bool AppInitMain()\n \n     // Warn about relative -datadir path.\n     if (gArgs.IsArgSet(\"-datadir\") && !fs::path(gArgs.GetArg(\"-datadir\", \"\")).is_absolute()) {\n-        LogPrintf(\"Warning: relative datadir option '%s' specified, which will be interpreted relative to the \"\n+        LogPrintf(\"Warning: relative datadir option '%s' specified, which will be interpreted relative to the \" /* Continued */\n                   \"current working directory '%s'. This is fragile, because if bitcoin is started in the future \"\n                   \"from a different location, it will be unable to locate the current data files. There could \"\n                   \"also be data loss if bitcoin is started while in a temporary directory.\\n\","
      },
      {
        "sha": "6f21d498ee7f809a620ec6715bd9a41fcd4057d8",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c21e6c6d3843232f384079837da1d9fae573b8d/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c21e6c6d3843232f384079837da1d9fae573b8d/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=5c21e6c6d3843232f384079837da1d9fae573b8d",
        "patch": "@@ -81,20 +81,20 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n     LogPrintf(\"Previous lock order was:\\n\");\n     for (const std::pair<void*, CLockLocation> & i : s2) {\n         if (i.first == mismatch.first) {\n-            LogPrintf(\" (1)\");\n+            LogPrintf(\" (1)\"); /* Continued */\n         }\n         if (i.first == mismatch.second) {\n-            LogPrintf(\" (2)\");\n+            LogPrintf(\" (2)\"); /* Continued */\n         }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     LogPrintf(\"Current lock order is:\\n\");\n     for (const std::pair<void*, CLockLocation> & i : s1) {\n         if (i.first == mismatch.first) {\n-            LogPrintf(\" (1)\");\n+            LogPrintf(\" (1)\"); /* Continued */\n         }\n         if (i.first == mismatch.second) {\n-            LogPrintf(\" (2)\");\n+            LogPrintf(\" (2)\"); /* Continued */\n         }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }"
      },
      {
        "sha": "45ce94ae42d5b75dcb2585f3e1cc4c9d2f797a1b",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c21e6c6d3843232f384079837da1d9fae573b8d/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c21e6c6d3843232f384079837da1d9fae573b8d/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=5c21e6c6d3843232f384079837da1d9fae573b8d",
        "patch": "@@ -370,7 +370,7 @@ bool CCoinsViewDB::Upgrade() {\n \n     int64_t count = 0;\n     LogPrintf(\"Upgrading utxo-set database...\\n\");\n-    LogPrintf(\"[0%%]...\");\n+    LogPrintf(\"[0%%]...\"); /* Continued */\n     uiInterface.ShowProgress(_(\"Upgrading UTXO database\"), 0, true);\n     size_t batch_size = 1 << 24;\n     CDBBatch batch(db);\n@@ -389,7 +389,7 @@ bool CCoinsViewDB::Upgrade() {\n                 uiInterface.ShowProgress(_(\"Upgrading UTXO database\"), percentageDone, true);\n                 if (reportDone < percentageDone/10) {\n                     // report max. every 10% step\n-                    LogPrintf(\"[%d%%]...\", percentageDone);\n+                    LogPrintf(\"[%d%%]...\", percentageDone); /* Continued */\n                     reportDone = percentageDone/10;\n                 }\n             }"
      },
      {
        "sha": "26d2b0b7e49c72cd8df9cb3eb3e2101501e2078e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c21e6c6d3843232f384079837da1d9fae573b8d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c21e6c6d3843232f384079837da1d9fae573b8d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5c21e6c6d3843232f384079837da1d9fae573b8d",
        "patch": "@@ -2231,13 +2231,13 @@ void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainPar\n             DoWarning(strWarning);\n         }\n     }\n-    LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)\", __func__,\n+    LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)\", __func__, /* Continued */\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n       FormatISO8601DateTime(pindexNew->GetBlockTime()),\n       GuessVerificationProgress(chainParams.TxData(), pindexNew), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n     if (!warningMessages.empty())\n-        LogPrintf(\" warning='%s'\", boost::algorithm::join(warningMessages, \", \"));\n+        LogPrintf(\" warning='%s'\", boost::algorithm::join(warningMessages, \", \")); /* Continued */\n     LogPrintf(\"\\n\");\n \n }\n@@ -3903,14 +3903,14 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     int nGoodTransactions = 0;\n     CValidationState state;\n     int reportDone = 0;\n-    LogPrintf(\"[0%%]...\");\n+    LogPrintf(\"[0%%]...\"); /* Continued */\n     for (CBlockIndex* pindex = chainActive.Tip(); pindex && pindex->pprev; pindex = pindex->pprev)\n     {\n         boost::this_thread::interruption_point();\n         int percentageDone = std::max(1, std::min(99, (int)(((double)(chainActive.Height() - pindex->nHeight)) / (double)nCheckDepth * (nCheckLevel >= 4 ? 50 : 100))));\n         if (reportDone < percentageDone/10) {\n             // report every 10% step\n-            LogPrintf(\"[%d%%]...\", percentageDone);\n+            LogPrintf(\"[%d%%]...\", percentageDone); /* Continued */\n             reportDone = percentageDone/10;\n         }\n         uiInterface.ShowProgress(_(\"Verifying blocks...\"), percentageDone, false);"
      },
      {
        "sha": "59fdae903533d81a3d13a805f36aa52b78a57c8a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c21e6c6d3843232f384079837da1d9fae573b8d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c21e6c6d3843232f384079837da1d9fae573b8d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5c21e6c6d3843232f384079837da1d9fae573b8d",
        "patch": "@@ -3076,7 +3076,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n         wtxNew.fTimeReceivedIsTxTime = true;\n         wtxNew.fFromMe = true;\n \n-        LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString());\n+        LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString()); /* Continued */\n         {\n             // Take key pair from key pool so it won't be used again\n             reservekey.KeepKey();"
      }
    ]
  },
  {
    "sha": "d207207fd3ac1a0aaf3c34379f8f02b76dc69c69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjA3MjA3ZmQzYWMxYTBhYWYzYzM0Mzc5ZjhmMDJiNzZkYzY5YzY5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-05T14:18:26Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-07T16:29:52Z"
      },
      "message": "[logging] add lint-logs.sh to check for newline termination.\n\nCheck that all calls to LogPrintf() are terminated by a newline,\nexcept those that are explicitly marked as 'continued' logs.",
      "tree": {
        "sha": "e218eca7cae58e41fefd0fe63c3d5d704d0edc85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e218eca7cae58e41fefd0fe63c3d5d704d0edc85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d207207fd3ac1a0aaf3c34379f8f02b76dc69c69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d207207fd3ac1a0aaf3c34379f8f02b76dc69c69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d207207fd3ac1a0aaf3c34379f8f02b76dc69c69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d207207fd3ac1a0aaf3c34379f8f02b76dc69c69/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c21e6c6d3843232f384079837da1d9fae573b8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c21e6c6d3843232f384079837da1d9fae573b8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c21e6c6d3843232f384079837da1d9fae573b8d"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3bb54359a87b93023520fe91b976d057b2e15667",
        "filename": "contrib/devtools/lint-logs.sh",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d207207fd3ac1a0aaf3c34379f8f02b76dc69c69/contrib/devtools/lint-logs.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d207207fd3ac1a0aaf3c34379f8f02b76dc69c69/contrib/devtools/lint-logs.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-logs.sh?ref=d207207fd3ac1a0aaf3c34379f8f02b76dc69c69",
        "patch": "@@ -0,0 +1,25 @@\n+#!/bin/bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Check that all logs are terminated with '\\n'\n+#\n+# Some logs are continued over multiple lines. They should be explicitly\n+# commented with \\* Continued *\\\n+#\n+# There are some instances of LogPrintf() in comments. Those can be\n+# ignored\n+\n+\n+UNTERMINATED_LOGS=$(git grep \"LogPrintf(\" -- \"*.cpp\" | \\\n+    grep -v '\\\\n\"' | \\\n+    grep -v \"/\\* Continued \\*/\" | \\\n+    grep -v \"LogPrintf()\")\n+if [[ ${UNTERMINATED_LOGS} != \"\" ]]; then\n+    echo \"All calls to LogPrintf() should be terminated with \\\\n\"\n+    echo\n+    echo \"${UNTERMINATED_LOGS}\"\n+    exit 1\n+fi"
      }
    ]
  }
]