[
  {
    "sha": "a27e813af799fe2a93e3b0190b2b9105111e16a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjdlODEzYWY3OTlmZTJhOTNlM2IwMTkwYjJiOTEwNTExMWUxNmEx",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-02-16T20:00:16Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-02-23T20:14:24Z"
      },
      "message": "bitcoind changes to stop storing settings in wallet.dat.",
      "tree": {
        "sha": "b178fcbd7e0aca7344ecae40219dd0db90a7f2af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b178fcbd7e0aca7344ecae40219dd0db90a7f2af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a27e813af799fe2a93e3b0190b2b9105111e16a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a27e813af799fe2a93e3b0190b2b9105111e16a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a27e813af799fe2a93e3b0190b2b9105111e16a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a27e813af799fe2a93e3b0190b2b9105111e16a1/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c12851ed497797684588e09637d80a5abd5725e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c12851ed497797684588e09637d80a5abd5725e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c12851ed497797684588e09637d80a5abd5725e"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 34,
      "deletions": 90
    },
    "files": [
      {
        "sha": "68cc17b518dc67ed6b95fcf9b1f75ff8ccd919ee",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=a27e813af799fe2a93e3b0190b2b9105111e16a1",
        "patch": "@@ -301,7 +301,7 @@ Value getgenerate(const Array& params, bool fHelp)\n             \"getgenerate\\n\"\n             \"Returns true or false.\");\n \n-    return (bool)fGenerateBitcoins;\n+    return GetBoolArg(\"-gen\");\n }\n \n \n@@ -320,13 +320,11 @@ Value setgenerate(const Array& params, bool fHelp)\n     if (params.size() > 1)\n     {\n         int nGenProcLimit = params[1].get_int();\n-        fLimitProcessors = (nGenProcLimit != -1);\n-        WriteSetting(\"fLimitProcessors\", fLimitProcessors);\n-        if (nGenProcLimit != -1)\n-            WriteSetting(\"nLimitProcessors\", nLimitProcessors = nGenProcLimit);\n+        mapArgs[\"-genproclimit\"] = itostr(nGenProcLimit);\n         if (nGenProcLimit == 0)\n             fGenerate = false;\n     }\n+    mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n \n     GenerateBitcoins(fGenerate, pwalletMain);\n     return Value::null;\n@@ -385,8 +383,8 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"currentblocktx\",(uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"generate\",      (bool)fGenerateBitcoins));\n-    obj.push_back(Pair(\"genproclimit\",  (int)(fLimitProcessors ? nLimitProcessors : -1)));\n+    obj.push_back(Pair(\"generate\",      GetBoolArg(\"-gen\")));\n+    obj.push_back(Pair(\"genproclimit\",  (int)GetArg(\"-genproclimit\", -1)));\n     obj.push_back(Pair(\"hashespersec\",  gethashespersec(params, false)));\n     obj.push_back(Pair(\"pooledtx\",      (uint64_t)nPooledTx));\n     obj.push_back(Pair(\"testnet\",       fTestNet));"
      },
      {
        "sha": "b77a038b415983a0c91e42026925945c66ece572",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=a27e813af799fe2a93e3b0190b2b9105111e16a1",
        "patch": "@@ -768,13 +768,6 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n     vector<uint256> vWalletUpgrade;\n     bool fIsEncrypted = false;\n \n-    // Modify defaults\n-#ifndef WIN32\n-    // Tray icon sometimes disappears on 9.10 karmic koala 64-bit, leaving no way to access the program\n-    fMinimizeToTray = false;\n-    fMinimizeOnClose = false;\n-#endif\n-\n     //// todo: shouldn't we catch exceptions and try to recover and continue?\n     CRITICAL_BLOCK(pwallet->cs_wallet)\n     {\n@@ -916,24 +909,6 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 if (nFileVersion == 10300)\n                     nFileVersion = 300;\n             }\n-            else if (strType == \"setting\")\n-            {\n-                string strKey;\n-                ssKey >> strKey;\n-\n-                // Options\n-#ifndef QT_GUI\n-                if (strKey == \"fGenerateBitcoins\")  ssValue >> fGenerateBitcoins;\n-#endif\n-                if (strKey == \"nTransactionFee\")    ssValue >> nTransactionFee;\n-                if (strKey == \"fLimitProcessors\")   ssValue >> fLimitProcessors;\n-                if (strKey == \"nLimitProcessors\")   ssValue >> nLimitProcessors;\n-                if (strKey == \"fMinimizeToTray\")    ssValue >> fMinimizeToTray;\n-                if (strKey == \"fMinimizeOnClose\")   ssValue >> fMinimizeOnClose;\n-                if (strKey == \"fUseProxy\")          ssValue >> fUseProxy;\n-                if (strKey == \"addrProxy\")          ssValue >> addrProxy;\n-                if (fHaveUPnP && strKey == \"fUseUPnP\")           ssValue >> fUseUPnP;\n-            }\n             else if (strType == \"minversion\")\n             {\n                 int nMinVersion = 0;\n@@ -959,14 +934,6 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n         WriteTx(hash, pwallet->mapWallet[hash]);\n \n     printf(\"nFileVersion = %d\\n\", nFileVersion);\n-    printf(\"fGenerateBitcoins = %d\\n\", fGenerateBitcoins);\n-    printf(\"nTransactionFee = %\"PRI64d\"\\n\", nTransactionFee);\n-    printf(\"fMinimizeToTray = %d\\n\", fMinimizeToTray);\n-    printf(\"fMinimizeOnClose = %d\\n\", fMinimizeOnClose);\n-    printf(\"fUseProxy = %d\\n\", fUseProxy);\n-    printf(\"addrProxy = %s\\n\", addrProxy.ToString().c_str());\n-    if (fHaveUPnP)\n-        printf(\"fUseUPnP = %d\\n\", fUseUPnP);\n \n \n     // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:"
      },
      {
        "sha": "74cb5d8d5ff3440e5a1828ebb22fa251ffda2918",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=a27e813af799fe2a93e3b0190b2b9105111e16a1",
        "patch": "@@ -473,18 +473,24 @@ class CWalletDB : public CDB\n         return Erase(std::make_pair(std::string(\"pool\"), nPool));\n     }\n \n+    // Settings are no longer stored in wallet.dat; these are\n+    // used only for backwards compatibility:\n     template<typename T>\n     bool ReadSetting(const std::string& strKey, T& value)\n     {\n         return Read(std::make_pair(std::string(\"setting\"), strKey), value);\n     }\n-\n     template<typename T>\n     bool WriteSetting(const std::string& strKey, const T& value)\n     {\n         nWalletDBUpdated++;\n         return Write(std::make_pair(std::string(\"setting\"), strKey), value);\n     }\n+    bool EraseSetting(const std::string& strKey)\n+    {\n+        nWalletDBUpdated++;\n+        return Erase(std::make_pair(std::string(\"setting\"), strKey));\n+    }\n \n     bool WriteMinVersion(int nVersion)\n     {"
      },
      {
        "sha": "e54964d61eb83d3f21c3c35ee765d6a36c45780d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a27e813af799fe2a93e3b0190b2b9105111e16a1",
        "patch": "@@ -472,8 +472,6 @@ bool AppInit2(int argc, char* argv[])\n         return false;\n     }\n \n-    fGenerateBitcoins = GetBoolArg(\"-gen\");\n-\n     if (mapArgs.count(\"-proxy\"))\n     {\n         fUseProxy = true;\n@@ -519,13 +517,6 @@ bool AppInit2(int argc, char* argv[])\n         COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));\n     }\n \n-    // Command-line args override in-wallet settings:\n-#if USE_UPNP\n-    fUseUPnP = GetBoolArg(\"-upnp\", true);\n-#else\n-    fUseUPnP = GetBoolArg(\"-upnp\", false);\n-#endif\n-\n     if (!fNoListen)\n     {\n         std::string strError;"
      },
      {
        "sha": "a7bb71f01126d597123e07189c3de3cb55f230ef",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 18,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a27e813af799fe2a93e3b0190b2b9105111e16a1",
        "patch": "@@ -57,22 +57,12 @@ CScript COINBASE_FLAGS;\n \n const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n-\n double dHashesPerSec;\n int64 nHPSTimerStart;\n \n // Settings\n-int fGenerateBitcoins = false;\n int64 nTransactionFee = 0;\n-int fLimitProcessors = false;\n-int nLimitProcessors = 1;\n-int fMinimizeToTray = true;\n-int fMinimizeOnClose = true;\n-#if USE_UPNP\n-int fUseUPnP = true;\n-#else\n-int fUseUPnP = false;\n-#endif\n+\n \n \n //////////////////////////////////////////////////////////////////////////////\n@@ -3289,6 +3279,10 @@ bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n \n void static ThreadBitcoinMiner(void* parg);\n \n+static bool fGenerateBitcoins = false;\n+static bool fLimitProcessors = false;\n+static int nLimitProcessors = -1;\n+\n void static BitcoinMiner(CWallet *pwallet)\n {\n     printf(\"BitcoinMiner started\\n\");\n@@ -3464,13 +3458,13 @@ void static ThreadBitcoinMiner(void* parg)\n \n void GenerateBitcoins(bool fGenerate, CWallet* pwallet)\n {\n-    if (fGenerateBitcoins != fGenerate)\n-    {\n-        fGenerateBitcoins = fGenerate;\n-        WriteSetting(\"fGenerateBitcoins\", fGenerateBitcoins);\n-        MainFrameRepaint();\n-    }\n-    if (fGenerateBitcoins)\n+    fGenerateBitcoins = fGenerate;\n+    nLimitProcessors = GetArg(\"-genproclimit\", -1);\n+    if (nLimitProcessors == 0)\n+        fGenerateBitcoins = false;\n+    fLimitProcessors = (nLimitProcessors != -1);\n+\n+    if (fGenerate)\n     {\n         int nProcessors = boost::thread::hardware_concurrency();\n         printf(\"%d processors\\n\", nProcessors);"
      },
      {
        "sha": "ac6d624e40e15ce5a0bc77c2e45bdc5edec2bfc9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a27e813af799fe2a93e3b0190b2b9105111e16a1",
        "patch": "@@ -77,13 +77,7 @@ extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n \n // Settings\n-extern int fGenerateBitcoins;\n extern int64 nTransactionFee;\n-extern int fLimitProcessors;\n-extern int nLimitProcessors;\n-extern int fMinimizeToTray;\n-extern int fMinimizeOnClose;\n-extern int fUseUPnP;\n \n \n \n@@ -127,20 +121,6 @@ std::string GetWarnings(std::string strFor);\n \n bool GetWalletFile(CWallet* pwallet, std::string &strWalletFileOut);\n \n-template<typename T>\n-bool WriteSetting(const std::string& strKey, const T& value)\n-{\n-    bool fOk = false;\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-    {\n-        std::string strWalletFile;\n-        if (!GetWalletFile(pwallet, strWalletFile))\n-            continue;\n-        fOk |= CWalletDB(strWalletFile).WriteSetting(strKey, value);\n-    }\n-    return fOk;\n-}\n-\n \n class CDiskTxPos\n {"
      },
      {
        "sha": "5d45e10d0504bba3be155da719695f4d78b8f443",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a27e813af799fe2a93e3b0190b2b9105111e16a1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a27e813af799fe2a93e3b0190b2b9105111e16a1",
        "patch": "@@ -43,6 +43,7 @@ bool OpenNetworkConnection(const CAddress& addrConnect);\n //\n bool fClient = false;\n bool fAllowDNS = false;\n+static bool fUseUPnP = false;\n uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n CAddress addrLocalHost(CService(\"0.0.0.0\", 0), nLocalServices);\n static CNode* pnodeLocalHost = NULL;\n@@ -1102,7 +1103,6 @@ void MapPort(bool fMapPort)\n     if (fUseUPnP != fMapPort)\n     {\n         fUseUPnP = fMapPort;\n-        WriteSetting(\"fUseUPnP\", fUseUPnP);\n     }\n     if (fUseUPnP && vnThreadsRunning[THREAD_UPNP] < 1)\n     {\n@@ -1711,6 +1711,14 @@ bool BindListenPort(string& strError)\n \n void StartNode(void* parg)\n {\n+#ifdef USE_UPNP\n+#if USE_UPNP\n+    fUseUPnP = GetBoolArg(\"-upnp\", true);\n+#else\n+    fUseUPnP = GetBoolArg(\"-upnp\", false);\n+#endif\n+#endif\n+\n     if (pnodeLocalHost == NULL)\n         pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(\"127.0.0.1\", 0), nLocalServices));\n \n@@ -1812,7 +1820,7 @@ void StartNode(void* parg)\n         printf(\"Error: CreateThread(ThreadMessageHandler) failed\\n\");\n \n     // Generate coins in the background\n-    GenerateBitcoins(fGenerateBitcoins, pwalletMain);\n+    GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain);\n }\n \n bool StopNode()"
      }
    ]
  },
  {
    "sha": "2281e9fef225379c954991a24d58cdedb128afe2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjgxZTlmZWYyMjUzNzljOTU0OTkxYTI0ZDU4Y2RlZGIxMjhhZmUy",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-02-17T02:09:41Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-02-23T20:16:35Z"
      },
      "message": "Reworked QT settings",
      "tree": {
        "sha": "9994b8718e8c34796d8893fcf761edab57462237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9994b8718e8c34796d8893fcf761edab57462237"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2281e9fef225379c954991a24d58cdedb128afe2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2281e9fef225379c954991a24d58cdedb128afe2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2281e9fef225379c954991a24d58cdedb128afe2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2281e9fef225379c954991a24d58cdedb128afe2/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a27e813af799fe2a93e3b0190b2b9105111e16a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a27e813af799fe2a93e3b0190b2b9105111e16a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a27e813af799fe2a93e3b0190b2b9105111e16a1"
      }
    ],
    "stats": {
      "total": 191,
      "additions": 138,
      "deletions": 53
    },
    "files": [
      {
        "sha": "3e695b95277edf2fe6ff431b2fff94556f6db2fb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 17,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2281e9fef225379c954991a24d58cdedb128afe2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2281e9fef225379c954991a24d58cdedb128afe2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2281e9fef225379c954991a24d58cdedb128afe2",
        "patch": "@@ -150,27 +150,15 @@ bool AppInit2(int argc, char* argv[])\n     //\n     // Parameters\n     //\n-    // If Qt is used, parameters are parsed in qt/bitcoin.cpp's main()\n+    // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n #if !defined(QT_GUI)\n     ParseParameters(argc, argv);\n-#endif\n-\n-    if (mapArgs.count(\"-datadir\"))\n+    if (!ReadConfigFile(mapArgs, mapMultiArgs))\n     {\n-        if (filesystem::is_directory(filesystem::system_complete(mapArgs[\"-datadir\"])))\n-        {\n-            filesystem::path pathDataDir = filesystem::system_complete(mapArgs[\"-datadir\"]);\n-            strlcpy(pszSetDataDir, pathDataDir.string().c_str(), sizeof(pszSetDataDir));\n-        }\n-        else\n-        {\n-            fprintf(stderr, \"Error: Specified directory does not exist\\n\");\n-            Shutdown(NULL);\n-        }\n+        fprintf(stderr, \"Error: Specified directory does not exist\\n\");\n+        Shutdown(NULL);\n     }\n-\n-\n-    ReadConfigFile(mapArgs, mapMultiArgs); // Must be done after processing datadir\n+#endif\n \n     if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n     {"
      },
      {
        "sha": "2902b8ad801649853678f755da319fb84c1699a4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 3,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2281e9fef225379c954991a24d58cdedb128afe2/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2281e9fef225379c954991a24d58cdedb128afe2/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=2281e9fef225379c954991a24d58cdedb128afe2",
        "patch": "@@ -152,8 +152,28 @@ int main(int argc, char *argv[])\n     Q_INIT_RESOURCE(bitcoin);\n     QApplication app(argc, argv);\n \n+    // Command-line options take precedence:\n     ParseParameters(argc, argv);\n \n+    // ... then bitcoin.conf:\n+    if (!ReadConfigFile(mapArgs, mapMultiArgs))\n+    {\n+        fprintf(stderr, \"Error: Specified directory does not exist\\n\");\n+        return 1;\n+    }\n+\n+    // Application identification (must be set before OptionsModel is initialized,\n+    // as it is used to locate QSettings)\n+    app.setOrganizationName(\"Bitcoin\");\n+    app.setOrganizationDomain(\"bitcoin.org\");\n+    if(GetBoolArg(\"-testnet\")) // Separate UI settings for testnet\n+        app.setApplicationName(\"Bitcoin-Qt-testnet\");\n+    else\n+        app.setApplicationName(\"Bitcoin-Qt\");\n+\n+    // ... then GUI settings:\n+    OptionsModel optionsModel;\n+\n     // Get desired locale (\"en_US\") from command line or system locale\n     QString lang_territory = QString::fromStdString(GetArg(\"-lang\", QLocale::system().name().toStdString()));\n     // Load language files for configured locale:\n@@ -180,8 +200,6 @@ int main(int argc, char *argv[])\n     if (!translator.isEmpty())\n         app.installTranslator(&translator);\n \n-    app.setApplicationName(QApplication::translate(\"main\", \"Bitcoin-Qt\"));\n-\n     QSplashScreen splash(QPixmap(\":/images/splash\"), 0);\n     splash.show();\n     splash.setAutoFillBackground(true);\n@@ -198,9 +216,11 @@ int main(int argc, char *argv[])\n             {\n                 // Put this in a block, so that BitcoinGUI is cleaned up properly before\n                 // calling Shutdown() in case of exceptions.\n+\n+                optionsModel.Upgrade(); // Must be done after AppInit2\n+\n                 BitcoinGUI window;\n                 splash.finish(&window);\n-                OptionsModel optionsModel(pwalletMain);\n                 ClientModel clientModel(&optionsModel);\n                 WalletModel walletModel(pwalletMain, &optionsModel);\n "
      },
      {
        "sha": "22e701f3919cd6db42f01cb30f7df8fd3570a0a5",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 25,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2281e9fef225379c954991a24d58cdedb128afe2/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2281e9fef225379c954991a24d58cdedb128afe2/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=2281e9fef225379c954991a24d58cdedb128afe2",
        "patch": "@@ -1,21 +1,80 @@\n #include \"optionsmodel.h\"\n #include \"bitcoinunits.h\"\n+#include <QSettings>\n \n #include \"headers.h\"\n #include \"init.h\"\n \n-OptionsModel::OptionsModel(CWallet *wallet, QObject *parent) :\n-    QAbstractListModel(parent),\n-    wallet(wallet),\n-    nDisplayUnit(BitcoinUnits::BTC),\n-    bDisplayAddresses(false)\n+OptionsModel::OptionsModel(QObject *parent) :\n+    QAbstractListModel(parent)\n {\n-    // Read our specific settings from the wallet db\n-    CWalletDB walletdb(wallet->strWalletFile);\n-    walletdb.ReadSetting(\"nDisplayUnit\", nDisplayUnit);\n-    walletdb.ReadSetting(\"bDisplayAddresses\", bDisplayAddresses);\n+    Init();\n }\n \n+void OptionsModel::Init()\n+{\n+    QSettings settings;\n+\n+    // These are QT-only settings:\n+    nDisplayUnit = settings.value(\"nDisplayUnit\", BitcoinUnits::BTC).toInt();\n+    bDisplayAddresses = settings.value(\"bDisplayAddresses\", false).toBool();\n+    fMinimizeToTray = settings.value(\"fMinimizeToTray\", false).toBool();\n+    fMinimizeOnClose = settings.value(\"fMinimizeOnClose\", false).toBool();\n+    nTransactionFee = settings.value(\"nTransactionFee\").toLongLong();\n+\n+    // These are shared with core bitcoin; we want\n+    // command-line options to override the GUI settings:\n+    if (settings.contains(\"fUseUPnP\"))\n+        SoftSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool());\n+    if (settings.contains(\"addrProxy\") && settings.value(\"fUseProxy\").toBool())\n+        SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString());\n+}\n+\n+bool OptionsModel::Upgrade()\n+{\n+    QSettings settings;\n+\n+    if (settings.contains(\"bImportFinished\"))\n+        return false; // Already upgraded\n+\n+    settings.setValue(\"bImportFinished\", true);\n+\n+    // Move settings from old wallet.dat (if any):\n+    CWalletDB walletdb(\"wallet.dat\");\n+\n+    QList<QString> intOptions;\n+    intOptions << \"nDisplayUnit\" << \"nTransactionFee\";\n+    foreach(QString key, intOptions)\n+    {\n+        int value = 0;\n+        if (walletdb.ReadSetting(key.toStdString(), value))\n+        {\n+            settings.setValue(key, value);\n+            walletdb.EraseSetting(key.toStdString());\n+        }\n+    }\n+    QList<QString> boolOptions;\n+    boolOptions << \"bDisplayAddresses\" << \"fMinimizeToTray\" << \"fMinimizeOnClose\" << \"fUseProxy\" << \"fUseUPnP\";\n+    foreach(QString key, boolOptions)\n+    {\n+        bool value = false;\n+        if (walletdb.ReadSetting(key.toStdString(), value))\n+        {\n+            settings.setValue(key, value);\n+            walletdb.EraseSetting(key.toStdString());\n+        }\n+    }\n+    if (walletdb.ReadSetting(\"addrProxy\", addrProxy))\n+    {\n+        settings.setValue(\"addrProxy\", addrProxy.ToStringIP().c_str());\n+        walletdb.EraseSetting(\"addrProxy\");\n+    }\n+    Init();\n+\n+    return true;\n+}\n+\n+\n int OptionsModel::rowCount(const QModelIndex & parent) const\n {\n     return OptionIDRowCount;\n@@ -25,18 +84,19 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n     if(role == Qt::EditRole)\n     {\n+        QSettings settings;\n         switch(index.row())\n         {\n         case StartAtStartup:\n             return QVariant(GetStartOnSystemStartup());\n         case MinimizeToTray:\n             return QVariant(fMinimizeToTray);\n         case MapPortUPnP:\n-            return QVariant(fUseUPnP);\n+            return settings.value(\"fUseUPnP\", GetBoolArg(\"-upnp\", true));\n         case MinimizeOnClose:\n             return QVariant(fMinimizeOnClose);\n         case ConnectSOCKS4:\n-            return QVariant(fUseProxy);\n+            return settings.value(\"fUseProxy\", false);\n         case ProxyIP:\n             return QVariant(QString::fromStdString(addrProxy.ToStringIP()));\n         case ProxyPort:\n@@ -59,30 +119,30 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n     bool successful = true; /* set to false on parse error */\n     if(role == Qt::EditRole)\n     {\n-        CWalletDB walletdb(wallet->strWalletFile);\n+        QSettings settings;\n         switch(index.row())\n         {\n         case StartAtStartup:\n             successful = SetStartOnSystemStartup(value.toBool());\n             break;\n         case MinimizeToTray:\n             fMinimizeToTray = value.toBool();\n-            walletdb.WriteSetting(\"fMinimizeToTray\", fMinimizeToTray);\n+            settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n             break;\n         case MapPortUPnP:\n-            fUseUPnP = value.toBool();\n-            walletdb.WriteSetting(\"fUseUPnP\", fUseUPnP);\n-#ifdef USE_UPNP\n-            MapPort(fUseUPnP);\n-#endif\n+            {\n+                bool bUseUPnP = value.toBool();\n+                settings.setValue(\"fUseUPnP\", bUseUPnP);\n+                MapPort(bUseUPnP);\n+            }\n             break;\n         case MinimizeOnClose:\n             fMinimizeOnClose = value.toBool();\n-            walletdb.WriteSetting(\"fMinimizeOnClose\", fMinimizeOnClose);\n+            settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n             break;\n         case ConnectSOCKS4:\n             fUseProxy = value.toBool();\n-            walletdb.WriteSetting(\"fUseProxy\", fUseProxy);\n+            settings.setValue(\"fUseProxy\", fUseProxy);\n             break;\n         case ProxyIP:\n             {\n@@ -91,7 +151,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n                 if (addr.IsValid())\n                 {\n                     addrProxy.SetIP(addr);\n-                    walletdb.WriteSetting(\"addrProxy\", addrProxy);\n+                    settings.setValue(\"addrProxy\", addrProxy.ToStringIP().c_str());\n                 }\n                 else\n                 {\n@@ -105,7 +165,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n                 if (nPort > 0 && nPort < std::numeric_limits<unsigned short>::max())\n                 {\n                     addrProxy.SetPort(nPort);\n-                    walletdb.WriteSetting(\"addrProxy\", addrProxy);\n+                    settings.setValue(\"addrProxy\", addrProxy.ToStringIP().c_str());\n                 }\n                 else\n                 {\n@@ -115,18 +175,18 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             break;\n         case Fee: {\n             nTransactionFee = value.toLongLong();\n-            walletdb.WriteSetting(\"nTransactionFee\", nTransactionFee);\n+            settings.setValue(\"nTransactionFee\", nTransactionFee);\n             }\n             break;\n         case DisplayUnit: {\n             int unit = value.toInt();\n             nDisplayUnit = unit;\n-            walletdb.WriteSetting(\"nDisplayUnit\", nDisplayUnit);\n+            settings.setValue(\"nDisplayUnit\", nDisplayUnit);\n             emit displayUnitChanged(unit);\n             }\n         case DisplayAddresses: {\n             bDisplayAddresses = value.toBool();\n-            walletdb.WriteSetting(\"bDisplayAddresses\", bDisplayAddresses);\n+            settings.setValue(\"bDisplayAddresses\", bDisplayAddresses);\n             }\n         default:\n             break;"
      },
      {
        "sha": "0be70f8935b493adfdfb0f71b52fe7ae151c68e8",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2281e9fef225379c954991a24d58cdedb128afe2/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2281e9fef225379c954991a24d58cdedb128afe2/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=2281e9fef225379c954991a24d58cdedb128afe2",
        "patch": "@@ -3,8 +3,6 @@\n \n #include <QAbstractListModel>\n \n-class CWallet;\n-\n /** Interface from QT to configuration data structure for bitcoin client.\n    To QT, the options are presented as a list with the different options\n    laid out vertically.\n@@ -15,7 +13,7 @@ class OptionsModel : public QAbstractListModel\n {\n     Q_OBJECT\n public:\n-    explicit OptionsModel(CWallet *wallet, QObject *parent = 0);\n+    explicit OptionsModel(QObject *parent = 0);\n \n     enum OptionID {\n         StartAtStartup, // bool\n@@ -31,6 +29,11 @@ class OptionsModel : public QAbstractListModel\n         OptionIDRowCount\n     };\n \n+    void Init();\n+\n+    /* Migrate settings from wallet.dat after app initialization */\n+    bool Upgrade(); /* returns true if settings upgraded */\n+\n     int rowCount(const QModelIndex & parent = QModelIndex()) const;\n     QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const;\n     bool setData(const QModelIndex & index, const QVariant & value, int role = Qt::EditRole);\n@@ -42,10 +45,10 @@ class OptionsModel : public QAbstractListModel\n     int getDisplayUnit();\n     bool getDisplayAddresses();\n private:\n-    // Wallet stores persistent options\n-    CWallet *wallet;\n     int nDisplayUnit;\n     bool bDisplayAddresses;\n+    bool fMinimizeToTray;\n+    bool fMinimizeOnClose;\n signals:\n     void displayUnitChanged(int unit);\n "
      },
      {
        "sha": "88d70cd38f0c89a45a114388c7010364614ead02",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2281e9fef225379c954991a24d58cdedb128afe2/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2281e9fef225379c954991a24d58cdedb128afe2/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2281e9fef225379c954991a24d58cdedb128afe2",
        "patch": "@@ -908,15 +908,28 @@ string GetConfigFile()\n     return pathConfig.string();\n }\n \n-void ReadConfigFile(map<string, string>& mapSettingsRet,\n+bool ReadConfigFile(map<string, string>& mapSettingsRet,\n                     map<string, vector<string> >& mapMultiSettingsRet)\n {\n     namespace fs = boost::filesystem;\n     namespace pod = boost::program_options::detail;\n \n+    if (mapSettingsRet.count(\"-datadir\"))\n+    {\n+        if (fs::is_directory(fs::system_complete(mapSettingsRet[\"-datadir\"])))\n+        {\n+            fs::path pathDataDir = fs::system_complete(mapSettingsRet[\"-datadir\"]);\n+            strlcpy(pszSetDataDir, pathDataDir.string().c_str(), sizeof(pszSetDataDir));\n+        }\n+        else\n+        {\n+            return false;\n+        }\n+    }\n+\n     fs::ifstream streamConfig(GetConfigFile());\n     if (!streamConfig.good())\n-        return;\n+        return true; // No bitcoin.conf file is OK\n \n     set<string> setOptions;\n     setOptions.insert(\"*\");\n@@ -933,6 +946,7 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n         }\n         mapMultiSettingsRet[strKey].push_back(it->value[0]);\n     }\n+    return true;\n }\n \n string GetPidFile()"
      },
      {
        "sha": "31d3275290e4b8432e1c469f5a9439e52a84f132",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2281e9fef225379c954991a24d58cdedb128afe2/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2281e9fef225379c954991a24d58cdedb128afe2/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=2281e9fef225379c954991a24d58cdedb128afe2",
        "patch": "@@ -151,7 +151,7 @@ void GetDataDir(char* pszDirRet);\n std::string GetConfigFile();\n std::string GetPidFile();\n void CreatePidFile(std::string pidFile, pid_t pid);\n-void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n+bool ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n #ifdef WIN32\n std::string MyGetSpecialFolderPath(int nFolder, bool fCreate);\n #endif"
      }
    ]
  }
]