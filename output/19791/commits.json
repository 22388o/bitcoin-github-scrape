[
  {
    "sha": "824bbd1ffba3df7ffa6f5bfaa31298cd484473b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjRiYmQxZmZiYTNkZjdmZmE2ZjViZmFhMzEyOThjZDQ4NDQ3M2Ix",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T14:37:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T10:13:58Z"
      },
      "message": "[move only] Collect all private members of PeerLogicValidation together\n\nWe don't have a project style for ordering class members, but it always\nmakes sense to have no more than one of each public/protected/private\nspecifier.\n\nAlso move documentation for MaybeDiscourageAndDisconnect to the header.",
      "tree": {
        "sha": "4c76bf550061e9279fe66433957c8e4d46562da9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c76bf550061e9279fe66433957c8e4d46562da9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/824bbd1ffba3df7ffa6f5bfaa31298cd484473b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/824bbd1ffba3df7ffa6f5bfaa31298cd484473b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/824bbd1ffba3df7ffa6f5bfaa31298cd484473b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/824bbd1ffba3df7ffa6f5bfaa31298cd484473b1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07087051afe9cd5a66ea3e9c0a05079b1ffff47f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07087051afe9cd5a66ea3e9c0a05079b1ffff47f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07087051afe9cd5a66ea3e9c0a05079b1ffff47f"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 13,
      "deletions": 15
    },
    "files": [
      {
        "sha": "6608aa9904bb3779b91ac2d62dbd8df93ba157a9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/824bbd1ffba3df7ffa6f5bfaa31298cd484473b1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/824bbd1ffba3df7ffa6f5bfaa31298cd484473b1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=824bbd1ffba3df7ffa6f5bfaa31298cd484473b1",
        "patch": "@@ -3795,11 +3795,6 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n     return;\n }\n \n-/** Maybe disconnect a peer and discourage future connections from its address.\n- *\n- * @param[in]   pnode     The node to check.\n- * @return                True if the peer was marked for disconnection in this function\n- */\n bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode& pnode)\n {\n     const NodeId peer_id{pnode.GetId()};"
      },
      {
        "sha": "4ba8d34b68c96719d6512e770a9eb4e56447f3d2",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/824bbd1ffba3df7ffa6f5bfaa31298cd484473b1/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/824bbd1ffba3df7ffa6f5bfaa31298cd484473b1/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=824bbd1ffba3df7ffa6f5bfaa31298cd484473b1",
        "patch": "@@ -28,15 +28,6 @@ static const bool DEFAULT_PEERBLOCKFILTERS = false;\n static const int DISCOURAGEMENT_THRESHOLD{100};\n \n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n-private:\n-    CConnman& m_connman;\n-    /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n-    BanMan* const m_banman;\n-    ChainstateManager& m_chainman;\n-    CTxMemPool& m_mempool;\n-\n-    bool MaybeDiscourageAndDisconnect(CNode& pnode);\n-\n public:\n     PeerLogicValidation(CConnman& connman, BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool);\n \n@@ -92,8 +83,20 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n                         const std::atomic<bool>& interruptMsgProc);\n \n private:\n-    int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n+    /** Maybe disconnect a peer and discourage future connections from its address.\n+     *\n+     * @param[in]   pnode     The node to check.\n+     * @return                True if the peer was marked for disconnection in this function\n+     */\n+    bool MaybeDiscourageAndDisconnect(CNode& pnode);\n \n+    CConnman& m_connman;\n+    /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n+    BanMan* const m_banman;\n+    ChainstateManager& m_chainman;\n+    CTxMemPool& m_mempool;\n+\n+    int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n };\n \n struct CNodeStateStats {"
      }
    ]
  },
  {
    "sha": "2297b26b3ce95e935c0ebb8c38dabf19965054a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjk3YjI2YjNjZTk1ZTkzNWMwZWJiOGMzOGRhYmYxOTk2NTA1NGE1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-12T10:48:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T10:13:58Z"
      },
      "message": "[net_processing] Pass chainparams to PeerLogicValidation constructor\n\nKeep a references to chainparams, rather than calling the global\nParams() function every time it's needed. This is fine, since\nglobalChainParams does not get updated once it's been set, and it's\navailable at the point of constructing the PeerLogicValidation object.",
      "tree": {
        "sha": "a82488ad7ea7001443ef6218c2ccead6a756732a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a82488ad7ea7001443ef6218c2ccead6a756732a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2297b26b3ce95e935c0ebb8c38dabf19965054a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2297b26b3ce95e935c0ebb8c38dabf19965054a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2297b26b3ce95e935c0ebb8c38dabf19965054a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2297b26b3ce95e935c0ebb8c38dabf19965054a5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "824bbd1ffba3df7ffa6f5bfaa31298cd484473b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/824bbd1ffba3df7ffa6f5bfaa31298cd484473b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/824bbd1ffba3df7ffa6f5bfaa31298cd484473b1"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 40,
      "deletions": 34
    },
    "files": [
      {
        "sha": "e496276e10d4b74a23c1f36930b8cd3afcd7e8ed",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2297b26b3ce95e935c0ebb8c38dabf19965054a5",
        "patch": "@@ -1376,7 +1376,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     node.chainman = &g_chainman;\n     ChainstateManager& chainman = *Assert(node.chainman);\n \n-    node.peer_logic.reset(new PeerLogicValidation(*node.connman, node.banman.get(), *node.scheduler, chainman, *node.mempool));\n+    node.peer_logic.reset(new PeerLogicValidation(chainparams, *node.connman, node.banman.get(), *node.scheduler, chainman, *node.mempool));\n     RegisterValidationInterface(node.peer_logic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size"
      },
      {
        "sha": "78922878779cd4247e2a84c54fffbbdb5eac937e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 23,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2297b26b3ce95e935c0ebb8c38dabf19965054a5",
        "patch": "@@ -1241,8 +1241,10 @@ static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Para\n         (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n }\n \n-PeerLogicValidation::PeerLogicValidation(CConnman& connman, BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool)\n-    : m_connman(connman),\n+PeerLogicValidation::PeerLogicValidation(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n+                                         CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool)\n+    : m_chainparams(chainparams),\n+      m_connman(connman),\n       m_banman(banman),\n       m_chainman(chainman),\n       m_mempool(pool),\n@@ -2340,7 +2342,7 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n \n void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n                                          const std::chrono::microseconds time_received,\n-                                         const CChainParams& chainparams, const std::atomic<bool>& interruptMsgProc)\n+                                         const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom.GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -2772,7 +2774,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         }\n \n         pfrom.vRecvGetData.insert(pfrom.vRecvGetData.end(), vInv.begin(), vInv.end());\n-        ProcessGetData(pfrom, chainparams, m_connman, m_mempool, interruptMsgProc);\n+        ProcessGetData(pfrom, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n         return;\n     }\n \n@@ -2825,7 +2827,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             }\n             // If pruning, don't inv blocks unless we have on disk and are likely to still have\n             // for some reasonable time window (1 hour) that block relay might require.\n-            const int nPrunedBlocksLikelyToHave = MIN_BLOCKS_TO_KEEP - 3600 / chainparams.GetConsensus().nPowTargetSpacing;\n+            const int nPrunedBlocksLikelyToHave = MIN_BLOCKS_TO_KEEP - 3600 / m_chainparams.GetConsensus().nPowTargetSpacing;\n             if (fPruneMode && (!(pindex->nStatus & BLOCK_HAVE_DATA) || pindex->nHeight <= ::ChainActive().Tip()->nHeight - nPrunedBlocksLikelyToHave))\n             {\n                 LogPrint(BCLog::NET, \" getblocks stopping, pruned or too old block at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n@@ -2886,7 +2888,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         }\n \n         CBlock block;\n-        bool ret = ReadBlockFromDisk(block, pindex, chainparams.GetConsensus());\n+        bool ret = ReadBlockFromDisk(block, pindex, m_chainparams.GetConsensus());\n         assert(ret);\n \n         SendBlockTransactions(block, req, pfrom, m_connman);\n@@ -2920,7 +2922,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n                 return;\n             }\n \n-            if (!BlockRequestAllowed(pindex, chainparams.GetConsensus())) {\n+            if (!BlockRequestAllowed(pindex, m_chainparams.GetConsensus())) {\n                 LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block header that isn't in the main chain\\n\", __func__, pfrom.GetId());\n                 return;\n             }\n@@ -3198,7 +3200,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n \n         const CBlockIndex *pindex = nullptr;\n         BlockValidationState state;\n-        if (!m_chainman.ProcessNewBlockHeaders({cmpctblock.header}, state, chainparams, &pindex)) {\n+        if (!m_chainman.ProcessNewBlockHeaders({cmpctblock.header}, state, m_chainparams, &pindex)) {\n             if (state.IsInvalid()) {\n                 MaybePunishNodeForBlock(pfrom.GetId(), state, /*via_compact_block*/ true, \"invalid header via cmpctblock\");\n                 return;\n@@ -3254,10 +3256,10 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         }\n \n         // If we're not close to tip yet, give up and let parallel block fetch work its magic\n-        if (!fAlreadyInFlight && !CanDirectFetch(chainparams.GetConsensus()))\n+        if (!fAlreadyInFlight && !CanDirectFetch(m_chainparams.GetConsensus()))\n             return;\n \n-        if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n+        if (IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n             // Don't bother trying to process compact blocks from v1 peers\n             // after segwit activates.\n             return;\n@@ -3341,16 +3343,17 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n         }\n         } // cs_main\n \n-        if (fProcessBLOCKTXN)\n-            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, time_received, chainparams, interruptMsgProc);\n+        if (fProcessBLOCKTXN) {\n+            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, time_received, interruptMsgProc);\n+        }\n \n         if (fRevertToHeaderProcessing) {\n             // Headers received from HB compact block peers are permitted to be\n             // relayed before full validation (see BIP 152), so we don't want to disconnect\n             // the peer if the header turns out to be for an invalid block.\n             // Note that if a peer tries to build on an invalid chain, that\n             // will be detected and the peer will be disconnected/discouraged.\n-            return ProcessHeadersMessage(pfrom, m_connman, m_chainman, m_mempool, {cmpctblock.header}, chainparams, /*via_compact_block=*/true);\n+            return ProcessHeadersMessage(pfrom, m_connman, m_chainman, m_mempool, {cmpctblock.header}, m_chainparams, /*via_compact_block=*/true);\n         }\n \n         if (fBlockReconstructed) {\n@@ -3370,7 +3373,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            m_chainman.ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            m_chainman.ProcessNewBlock(m_chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom.nLastBlockTime = GetTime();\n             } else {\n@@ -3460,7 +3463,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            m_chainman.ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            m_chainman.ProcessNewBlock(m_chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom.nLastBlockTime = GetTime();\n             } else {\n@@ -3493,7 +3496,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n-        return ProcessHeadersMessage(pfrom, m_connman, m_chainman, m_mempool, headers, chainparams, /*via_compact_block=*/false);\n+        return ProcessHeadersMessage(pfrom, m_connman, m_chainman, m_mempool, headers, m_chainparams, /*via_compact_block=*/false);\n     }\n \n     if (msg_type == NetMsgType::BLOCK)\n@@ -3522,7 +3525,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n             mapBlockSource.emplace(hash, std::make_pair(pfrom.GetId(), true));\n         }\n         bool fNewBlock = false;\n-        m_chainman.ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        m_chainman.ProcessNewBlock(m_chainparams, pblock, forceProcessing, &fNewBlock);\n         if (fNewBlock) {\n             pfrom.nLastBlockTime = GetTime();\n         } else {\n@@ -3751,17 +3754,17 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n     }\n \n     if (msg_type == NetMsgType::GETCFILTERS) {\n-        ProcessGetCFilters(pfrom, vRecv, chainparams, m_connman);\n+        ProcessGetCFilters(pfrom, vRecv, m_chainparams, m_connman);\n         return;\n     }\n \n     if (msg_type == NetMsgType::GETCFHEADERS) {\n-        ProcessGetCFHeaders(pfrom, vRecv, chainparams, m_connman);\n+        ProcessGetCFHeaders(pfrom, vRecv, m_chainparams, m_connman);\n         return;\n     }\n \n     if (msg_type == NetMsgType::GETCFCHECKPT) {\n-        ProcessGetCFCheckPt(pfrom, vRecv, chainparams, m_connman);\n+        ProcessGetCFCheckPt(pfrom, vRecv, m_chainparams, m_connman);\n         return;\n     }\n \n@@ -3839,7 +3842,6 @@ bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode& pnode)\n \n bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n {\n-    const CChainParams& chainparams = Params();\n     //\n     // Message format\n     //  (4) message start\n@@ -3851,7 +3853,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     bool fMoreWork = false;\n \n     if (!pfrom->vRecvGetData.empty())\n-        ProcessGetData(*pfrom, chainparams, m_connman, m_mempool, interruptMsgProc);\n+        ProcessGetData(*pfrom, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n \n     if (!pfrom->orphan_work_set.empty()) {\n         std::list<CTransactionRef> removed_txn;\n@@ -3916,7 +3918,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n \n     try {\n-        ProcessMessage(*pfrom, msg_type, vRecv, msg.m_time, chainparams, interruptMsgProc);\n+        ProcessMessage(*pfrom, msg_type, vRecv, msg.m_time, interruptMsgProc);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())"
      },
      {
        "sha": "65fabcca3d70926b757fb119c0a247172969c2ce",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=2297b26b3ce95e935c0ebb8c38dabf19965054a5",
        "patch": "@@ -29,7 +29,8 @@ static const int DISCOURAGEMENT_THRESHOLD{100};\n \n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerLogicValidation(CConnman& connman, BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool);\n+    PeerLogicValidation(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n+                        CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool);\n \n     /**\n      * Overridden from CValidationInterface.\n@@ -79,8 +80,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n \n     /** Process a single message from a peer. Public for fuzz testing */\n     void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const CChainParams& chainparams,\n-                        const std::atomic<bool>& interruptMsgProc);\n+                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n \n private:\n     /** Maybe disconnect a peer and discourage future connections from its address.\n@@ -90,6 +90,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode);\n \n+    const CChainParams& m_chainparams;\n     CConnman& m_connman;\n     /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n     BanMan* const m_banman;"
      },
      {
        "sha": "8918da6360af8f2b83b7c2202db9e2949d7bc841",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=2297b26b3ce95e935c0ebb8c38dabf19965054a5",
        "patch": "@@ -79,8 +79,9 @@ BOOST_FIXTURE_TEST_SUITE(denialofservice_tests, TestingSetup)\n // work.\n BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n {\n+    const CChainParams& chainparams = Params();\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(*connman, nullptr, *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(chainparams, *connman, nullptr, *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -149,8 +150,9 @@ static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidat\n \n BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n+    const CChainParams& chainparams = Params();\n     auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(*connman, nullptr, *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(chainparams, *connman, nullptr, *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     constexpr int max_outbound_full_relay = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS;\n@@ -221,9 +223,10 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n \n BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n+    const CChainParams& chainparams = Params();\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(*connman, banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(chainparams, *connman, banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -268,9 +271,10 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n+    const CChainParams& chainparams = Params();\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(*connman, banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(chainparams, *connman, banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     banman->ClearBanned();\n     int64_t nStartTime = GetTime();"
      },
      {
        "sha": "f94a3310d23ad80c20801fe5703d38fd91dc8eb7",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=2297b26b3ce95e935c0ebb8c38dabf19965054a5",
        "patch": "@@ -76,8 +76,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n     try {\n         g_setup->m_node.peer_logic->ProcessMessage(p2p_node, random_message_type, random_bytes_data_stream,\n-                                                   GetTime<std::chrono::microseconds>(), Params(),\n-                                                   std::atomic<bool>{false});\n+                                                   GetTime<std::chrono::microseconds>(), std::atomic<bool>{false});\n     } catch (const std::ios_base::failure&) {\n     }\n     SyncWithValidationInterfaceQueue();"
      },
      {
        "sha": "a9752f888748285f9901af413bbe91ebdbf60996",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2297b26b3ce95e935c0ebb8c38dabf19965054a5/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=2297b26b3ce95e935c0ebb8c38dabf19965054a5",
        "patch": "@@ -169,7 +169,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n-    m_node.peer_logic = MakeUnique<PeerLogicValidation>(*m_node.connman, m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    m_node.peer_logic = MakeUnique<PeerLogicValidation>(chainparams, *m_node.connman, m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n     {\n         CConnman::Options options;\n         options.m_msgproc = m_node.peer_logic.get();"
      }
    ]
  },
  {
    "sha": "58bd369b0ddd3383f7bdf7840912d18b96545f91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGJkMzY5YjBkZGQzMzgzZjdiZGY3ODQwOTEyZDE4Yjk2NTQ1Zjkx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-29T09:31:11Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T10:15:48Z"
      },
      "message": "scripted-diff: [net processing] Rename PeerLogicValidation to PeerManager\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/PeerLogicValidation/PeerManager/g' $(git grep -l PeerLogicValidation ./src ./test)\nsed -i 's/peer_logic/peerman/g' $(git grep -l peer_logic ./src ./test)\n-END VERIFY SCRIPT-\n\nPeerLogicValidation was originally net_processing's implementation to\nthe validation interface. It has since grown to contain much of\nnet_processing's logic. Therefore rename it to reflect its\nresponsibilities.\n\nSuggested in\nhttps://github.com/bitcoin/bitcoin/pull/10756#pullrequestreview-53892618.",
      "tree": {
        "sha": "53e752514c17a301f26871964924fb73394e716f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53e752514c17a301f26871964924fb73394e716f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58bd369b0ddd3383f7bdf7840912d18b96545f91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58bd369b0ddd3383f7bdf7840912d18b96545f91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58bd369b0ddd3383f7bdf7840912d18b96545f91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58bd369b0ddd3383f7bdf7840912d18b96545f91/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2297b26b3ce95e935c0ebb8c38dabf19965054a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2297b26b3ce95e935c0ebb8c38dabf19965054a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2297b26b3ce95e935c0ebb8c38dabf19965054a5"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 37,
      "deletions": 37
    },
    "files": [
      {
        "sha": "7dceef7fff4a1a4ebb6f1c99f76da3710f552a5c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=58bd369b0ddd3383f7bdf7840912d18b96545f91",
        "patch": "@@ -200,7 +200,7 @@ void Shutdown(NodeContext& node)\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n-    if (node.peer_logic) UnregisterValidationInterface(node.peer_logic.get());\n+    if (node.peerman) UnregisterValidationInterface(node.peerman.get());\n     // Follow the lock order requirements:\n     // * CheckForStaleTipAndEvictPeers locks cs_main before indirectly calling GetExtraOutboundCount\n     //   which locks cs_vNodes.\n@@ -227,7 +227,7 @@ void Shutdown(NodeContext& node)\n \n     // After the threads that potentially access these pointers have been stopped,\n     // destruct and reset all to nullptr.\n-    node.peer_logic.reset();\n+    node.peerman.reset();\n     node.connman.reset();\n     node.banman.reset();\n \n@@ -1376,8 +1376,8 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     node.chainman = &g_chainman;\n     ChainstateManager& chainman = *Assert(node.chainman);\n \n-    node.peer_logic.reset(new PeerLogicValidation(chainparams, *node.connman, node.banman.get(), *node.scheduler, chainman, *node.mempool));\n-    RegisterValidationInterface(node.peer_logic.get());\n+    node.peerman.reset(new PeerManager(chainparams, *node.connman, node.banman.get(), *node.scheduler, chainman, *node.mempool));\n+    RegisterValidationInterface(node.peerman.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n@@ -1911,7 +1911,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     connOptions.nBestHeight = chain_active_height;\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n-    connOptions.m_msgproc = node.peer_logic.get();\n+    connOptions.m_msgproc = node.peerman.get();\n     connOptions.nSendBufferMaxSize = 1000 * args.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     connOptions.nReceiveFloodSize = 1000 * args.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n     connOptions.m_added_nodes = args.GetArgs(\"-addnode\");"
      },
      {
        "sha": "c92e841bc2abb52f46f5a3623b026862f785784d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=58bd369b0ddd3383f7bdf7840912d18b96545f91",
        "patch": "@@ -869,7 +869,7 @@ void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n     if (state) state->m_last_block_announcement = time_in_seconds;\n }\n \n-void PeerLogicValidation::InitializeNode(CNode *pnode) {\n+void PeerManager::InitializeNode(CNode *pnode) {\n     CAddress addr = pnode->addr;\n     std::string addrName = pnode->GetAddrName();\n     NodeId nodeid = pnode->GetId();\n@@ -887,7 +887,7 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     }\n }\n \n-void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+void PeerManager::ReattemptInitialBroadcast(CScheduler& scheduler) const\n {\n     std::map<uint256, uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n \n@@ -907,7 +907,7 @@ void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n     scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n }\n \n-void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n+void PeerManager::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n     fUpdateConnectionTime = false;\n     LOCK(cs_main);\n     int misbehavior{0};\n@@ -1241,7 +1241,7 @@ static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Para\n         (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n }\n \n-PeerLogicValidation::PeerLogicValidation(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n+PeerManager::PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n                                          CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool)\n     : m_chainparams(chainparams),\n       m_connman(connman),\n@@ -1281,7 +1281,7 @@ PeerLogicValidation::PeerLogicValidation(const CChainParams& chainparams, CConnm\n  * Evict orphan txn pool entries (EraseOrphanTx) based on a newly connected\n  * block. Also save the time of the last tip update.\n  */\n-void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n+void PeerManager::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n {\n     {\n         LOCK(g_cs_orphans);\n@@ -1325,7 +1325,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n     }\n }\n \n-void PeerLogicValidation::BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex)\n+void PeerManager::BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex)\n {\n     // To avoid relay problems with transactions that were previously\n     // confirmed, clear our filter of recently confirmed transactions whenever\n@@ -1350,7 +1350,7 @@ static bool fWitnessesPresentInMostRecentCompactBlock GUARDED_BY(cs_most_recent_\n  * Maintain state about the best-seen block and fast-announce a compact block\n  * to compatible peers.\n  */\n-void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n+void PeerManager::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<const CBlockHeaderAndShortTxIDs> (*pblock, true);\n     const CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n \n@@ -1385,7 +1385,7 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n         if (state.fPreferHeaderAndIDs && (!fWitnessEnabled || state.fWantsCmpctWitness) &&\n                 !PeerHasHeader(&state, pindex) && PeerHasHeader(&state, pindex->pprev)) {\n \n-            LogPrint(BCLog::NET, \"%s sending header-and-ids %s to peer=%d\\n\", \"PeerLogicValidation::NewPoWValidBlock\",\n+            LogPrint(BCLog::NET, \"%s sending header-and-ids %s to peer=%d\\n\", \"PeerManager::NewPoWValidBlock\",\n                     hashBlock.ToString(), pnode->GetId());\n             m_connman.PushMessage(pnode, msgMaker.Make(NetMsgType::CMPCTBLOCK, *pcmpctblock));\n             state.pindexBestHeaderSent = pindex;\n@@ -1397,7 +1397,7 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n  * Update our best height and announce any block hashes which weren't previously\n  * in ::ChainActive() to our peers.\n  */\n-void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n+void PeerManager::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     const int nNewHeight = pindexNew->nHeight;\n     m_connman.SetBestHeight(nNewHeight);\n \n@@ -1432,7 +1432,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n  * Handle invalid block rejection and consequent peer discouragement, maintain which\n  * peers announce compact blocks.\n  */\n-void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n+void PeerManager::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n     LOCK(cs_main);\n \n     const uint256 hash(block.GetHash());\n@@ -2340,7 +2340,7 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n     connman.PushMessage(&peer, std::move(msg));\n }\n \n-void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n+void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n                                          const std::chrono::microseconds time_received,\n                                          const std::atomic<bool>& interruptMsgProc)\n {\n@@ -3798,7 +3798,7 @@ void PeerLogicValidation::ProcessMessage(CNode& pfrom, const std::string& msg_ty\n     return;\n }\n \n-bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode& pnode)\n+bool PeerManager::MaybeDiscourageAndDisconnect(CNode& pnode)\n {\n     const NodeId peer_id{pnode.GetId()};\n     PeerRef peer = GetPeerRef(peer_id);\n@@ -3840,7 +3840,7 @@ bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode& pnode)\n     return true;\n }\n \n-bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n+bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n {\n     //\n     // Message format\n@@ -3932,7 +3932,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     return fMoreWork;\n }\n \n-void PeerLogicValidation::ConsiderEviction(CNode& pto, int64_t time_in_seconds)\n+void PeerManager::ConsiderEviction(CNode& pto, int64_t time_in_seconds)\n {\n     AssertLockHeld(cs_main);\n \n@@ -3985,7 +3985,7 @@ void PeerLogicValidation::ConsiderEviction(CNode& pto, int64_t time_in_seconds)\n     }\n }\n \n-void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n+void PeerManager::EvictExtraOutboundPeers(int64_t time_in_seconds)\n {\n     // Check whether we have too many outbound peers\n     int extra_peers = m_connman.GetExtraOutboundCount();\n@@ -4044,7 +4044,7 @@ void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n     }\n }\n \n-void PeerLogicValidation::CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams)\n+void PeerManager::CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams)\n {\n     LOCK(cs_main);\n \n@@ -4086,7 +4086,7 @@ class CompareInvMempoolOrder\n };\n }\n \n-bool PeerLogicValidation::SendMessages(CNode* pto)\n+bool PeerManager::SendMessages(CNode* pto)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n "
      },
      {
        "sha": "873ee34db99729f2c8c0d1d19900798e8fd214e8",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=58bd369b0ddd3383f7bdf7840912d18b96545f91",
        "patch": "@@ -27,9 +27,9 @@ static const bool DEFAULT_PEERBLOCKFILTERS = false;\n /** Threshold for marking a node to be discouraged, e.g. disconnected and added to the discouragement filter. */\n static const int DISCOURAGEMENT_THRESHOLD{100};\n \n-class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager final : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerLogicValidation(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n+    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n                         CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool);\n \n     /**"
      },
      {
        "sha": "3228831ed14cd115538c6e241eb55773f10f95c2",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=58bd369b0ddd3383f7bdf7840912d18b96545f91",
        "patch": "@@ -16,7 +16,7 @@ class CConnman;\n class CScheduler;\n class CTxMemPool;\n class ChainstateManager;\n-class PeerLogicValidation;\n+class PeerManager;\n namespace interfaces {\n class Chain;\n class ChainClient;\n@@ -36,7 +36,7 @@ class WalletClient;\n struct NodeContext {\n     std::unique_ptr<CConnman> connman;\n     std::unique_ptr<CTxMemPool> mempool;\n-    std::unique_ptr<PeerLogicValidation> peer_logic;\n+    std::unique_ptr<PeerManager> peerman;\n     ChainstateManager* chainman{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<BanMan> banman;\n     ArgsManager* args{nullptr}; // Currently a raw pointer because the memory is not managed by this struct"
      },
      {
        "sha": "2ee0d9b7de5d30534df0e7479c92059dc5e5961b",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=58bd369b0ddd3383f7bdf7840912d18b96545f91",
        "patch": "@@ -81,7 +81,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n {\n     const CChainParams& chainparams = Params();\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(chainparams, *connman, nullptr, *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerManager>(chainparams, *connman, nullptr, *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -134,7 +134,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n }\n \n-static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic, CConnmanTest* connman)\n+static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerManager &peerLogic, CConnmanTest* connman)\n {\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n     vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", ConnectionType::OUTBOUND_FULL_RELAY));\n@@ -152,7 +152,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n     const CChainParams& chainparams = Params();\n     auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(chainparams, *connman, nullptr, *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerManager>(chainparams, *connman, nullptr, *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     constexpr int max_outbound_full_relay = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS;\n@@ -226,7 +226,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     const CChainParams& chainparams = Params();\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(chainparams, *connman, banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerManager>(chainparams, *connman, banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -274,7 +274,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     const CChainParams& chainparams = Params();\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(chainparams, *connman, banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerManager>(chainparams, *connman, banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     banman->ClearBanned();\n     int64_t nStartTime = GetTime();"
      },
      {
        "sha": "3d6947ca925cde42503b8dad12eeb119c649f4f2",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=58bd369b0ddd3383f7bdf7840912d18b96545f91",
        "patch": "@@ -73,9 +73,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     p2p_node.nVersion = PROTOCOL_VERSION;\n     p2p_node.SetSendVersion(PROTOCOL_VERSION);\n     connman.AddTestNode(p2p_node);\n-    g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+    g_setup->m_node.peerman->InitializeNode(&p2p_node);\n     try {\n-        g_setup->m_node.peer_logic->ProcessMessage(p2p_node, random_message_type, random_bytes_data_stream,\n+        g_setup->m_node.peerman->ProcessMessage(p2p_node, random_message_type, random_bytes_data_stream,\n                                                    GetTime<std::chrono::microseconds>(), std::atomic<bool>{false});\n     } catch (const std::ios_base::failure&) {\n     }"
      },
      {
        "sha": "c9433d325af1bb31a7e0ea773754adbea6351927",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=58bd369b0ddd3383f7bdf7840912d18b96545f91",
        "patch": "@@ -52,7 +52,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         p2p_node.fPauseSend = false;\n         p2p_node.nVersion = PROTOCOL_VERSION;\n         p2p_node.SetSendVersion(PROTOCOL_VERSION);\n-        g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+        g_setup->m_node.peerman->InitializeNode(&p2p_node);\n \n         connman.AddTestNode(p2p_node);\n     }"
      },
      {
        "sha": "08aff0744861ee0f491ae5833ba185c8da595809",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bd369b0ddd3383f7bdf7840912d18b96545f91/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=58bd369b0ddd3383f7bdf7840912d18b96545f91",
        "patch": "@@ -169,10 +169,10 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n-    m_node.peer_logic = MakeUnique<PeerLogicValidation>(chainparams, *m_node.connman, m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    m_node.peerman = MakeUnique<PeerManager>(chainparams, *m_node.connman, m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n     {\n         CConnman::Options options;\n-        options.m_msgproc = m_node.peer_logic.get();\n+        options.m_msgproc = m_node.peerman.get();\n         m_node.connman->Init(options);\n     }\n }"
      },
      {
        "sha": "625085c55ba7a65c1850130842ce8008ccf764ad",
        "filename": "test/sanitizer_suppressions/tsan",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bd369b0ddd3383f7bdf7840912d18b96545f91/test/sanitizer_suppressions/tsan",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bd369b0ddd3383f7bdf7840912d18b96545f91/test/sanitizer_suppressions/tsan",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/sanitizer_suppressions/tsan?ref=58bd369b0ddd3383f7bdf7840912d18b96545f91",
        "patch": "@@ -11,7 +11,7 @@ mutex:CConnman::ThreadOpenConnections\n mutex:CConnman::ThreadOpenAddedConnections\n mutex:CConnman::SocketHandler\n mutex:UpdateTip\n-mutex:PeerLogicValidation::UpdatedBlockTip\n+mutex:PeerManager::UpdatedBlockTip\n mutex:g_best_block_mutex\n # race (TODO fix)\n race:CConnman::WakeMessageHandler"
      }
    ]
  },
  {
    "sha": "64f6162651420be2f4aa1498f0378a86780bc089",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGY2MTYyNjUxNDIwYmUyZjRhYTE0OThmMDM3OGE4Njc4MGJjMDg5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-29T09:33:30Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T10:16:12Z"
      },
      "message": "[whitespace] tidy up indentation after scripted diff",
      "tree": {
        "sha": "976fee8d7253ed7bd7e658f3aed80f7684d0f31e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/976fee8d7253ed7bd7e658f3aed80f7684d0f31e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64f6162651420be2f4aa1498f0378a86780bc089",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64f6162651420be2f4aa1498f0378a86780bc089",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64f6162651420be2f4aa1498f0378a86780bc089",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64f6162651420be2f4aa1498f0378a86780bc089/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58bd369b0ddd3383f7bdf7840912d18b96545f91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58bd369b0ddd3383f7bdf7840912d18b96545f91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58bd369b0ddd3383f7bdf7840912d18b96545f91"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "048cab3e7ddab346a5fc045690fce13b46fd0866",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64f6162651420be2f4aa1498f0378a86780bc089/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64f6162651420be2f4aa1498f0378a86780bc089/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=64f6162651420be2f4aa1498f0378a86780bc089",
        "patch": "@@ -1242,7 +1242,7 @@ static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Para\n }\n \n PeerManager::PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                                         CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool)\n+                         CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool)\n     : m_chainparams(chainparams),\n       m_connman(connman),\n       m_banman(banman),"
      },
      {
        "sha": "6ffd6c4fd6387cbd3480ad3e03ed2f0669467b7e",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64f6162651420be2f4aa1498f0378a86780bc089/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64f6162651420be2f4aa1498f0378a86780bc089/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=64f6162651420be2f4aa1498f0378a86780bc089",
        "patch": "@@ -30,7 +30,7 @@ static const int DISCOURAGEMENT_THRESHOLD{100};\n class PeerManager final : public CValidationInterface, public NetEventsInterface {\n public:\n     PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                        CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool);\n+                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool);\n \n     /**\n      * Overridden from CValidationInterface."
      }
    ]
  },
  {
    "sha": "d7778351bf60a21925a97b7fc4e9df5541b6d995",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzc3ODM1MWJmNjBhMjE5MjVhOTdiN2ZjNGU5ZGY1NTQxYjZkOTk1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T14:51:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T10:16:12Z"
      },
      "message": "[net processing] Move ProcessHeadersMessage to PeerManager",
      "tree": {
        "sha": "c4f97053f593075ee768a58dbf134977ff02259b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4f97053f593075ee768a58dbf134977ff02259b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7778351bf60a21925a97b7fc4e9df5541b6d995",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7778351bf60a21925a97b7fc4e9df5541b6d995",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7778351bf60a21925a97b7fc4e9df5541b6d995",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7778351bf60a21925a97b7fc4e9df5541b6d995/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64f6162651420be2f4aa1498f0378a86780bc089",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64f6162651420be2f4aa1498f0378a86780bc089",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64f6162651420be2f4aa1498f0378a86780bc089"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 14,
      "deletions": 10
    },
    "files": [
      {
        "sha": "fac0f100d468c23392e967b1be117067bb1919f9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7778351bf60a21925a97b7fc4e9df5541b6d995/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7778351bf60a21925a97b7fc4e9df5541b6d995/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d7778351bf60a21925a97b7fc4e9df5541b6d995",
        "patch": "@@ -1856,7 +1856,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateManager& chainman, CTxMemPool& mempool, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool via_compact_block)\n+void PeerManager::ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHeader>& headers, bool via_compact_block)\n {\n     const CNetMsgMaker msgMaker(pfrom.GetSendVersion());\n     size_t nCount = headers.size();\n@@ -1882,7 +1882,7 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n         //   nUnconnectingHeaders gets reset back to 0.\n         if (!LookupBlockIndex(headers[0].hashPrevBlock) && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n             nodestate->nUnconnectingHeaders++;\n-            connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), uint256()));\n+            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), uint256()));\n             LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n                     headers[0].GetHash().ToString(),\n                     headers[0].hashPrevBlock.ToString(),\n@@ -1916,7 +1916,7 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n     }\n \n     BlockValidationState state;\n-    if (!chainman.ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n+    if (!m_chainman.ProcessNewBlockHeaders(headers, state, m_chainparams, &pindexLast)) {\n         if (state.IsInvalid()) {\n             MaybePunishNodeForBlock(pfrom.GetId(), state, via_compact_block, \"invalid header received\");\n             return;\n@@ -1947,10 +1947,10 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n             // TODO: optimize: if pindexLast is an ancestor of ::ChainActive().Tip or pindexBestHeader, continue\n             // from there instead.\n             LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom.GetId(), pfrom.nStartingHeight);\n-            connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexLast), uint256()));\n+            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexLast), uint256()));\n         }\n \n-        bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n+        bool fCanDirectFetch = CanDirectFetch(m_chainparams.GetConsensus());\n         // If this set of headers is valid and ends in a block with at least as\n         // much work as our tip, download as much as possible.\n         if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && ::ChainActive().Tip()->nChainWork <= pindexLast->nChainWork) {\n@@ -1960,7 +1960,7 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n             while (pindexWalk && !::ChainActive().Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n                         !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n-                        (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom.GetId())->fHaveWitness)) {\n+                        (!IsWitnessEnabled(pindexWalk->pprev, m_chainparams.GetConsensus()) || State(pfrom.GetId())->fHaveWitness)) {\n                     // We don't have this block, and it's not yet in flight.\n                     vToFetch.push_back(pindexWalk);\n                 }\n@@ -1984,7 +1984,7 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n                     }\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom);\n                     vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                    MarkBlockAsInFlight(mempool, pfrom.GetId(), pindex->GetBlockHash(), pindex);\n+                    MarkBlockAsInFlight(m_mempool, pfrom.GetId(), pindex->GetBlockHash(), pindex);\n                     LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom.GetId());\n                 }\n@@ -1997,7 +1997,7 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n                         // In any case, we want to download using a compact block, not a regular one\n                         vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n                     }\n-                    connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+                    m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n                 }\n             }\n         }\n@@ -3353,7 +3353,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             // the peer if the header turns out to be for an invalid block.\n             // Note that if a peer tries to build on an invalid chain, that\n             // will be detected and the peer will be disconnected/discouraged.\n-            return ProcessHeadersMessage(pfrom, m_connman, m_chainman, m_mempool, {cmpctblock.header}, m_chainparams, /*via_compact_block=*/true);\n+            return ProcessHeadersMessage(pfrom, {cmpctblock.header}, /*via_compact_block=*/true);\n         }\n \n         if (fBlockReconstructed) {\n@@ -3496,7 +3496,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n-        return ProcessHeadersMessage(pfrom, m_connman, m_chainman, m_mempool, headers, m_chainparams, /*via_compact_block=*/false);\n+        return ProcessHeadersMessage(pfrom, headers, /*via_compact_block=*/false);\n     }\n \n     if (msg_type == NetMsgType::BLOCK)"
      },
      {
        "sha": "d4793ce30371af42aa06750b4a5a39f56463fd62",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7778351bf60a21925a97b7fc4e9df5541b6d995/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7778351bf60a21925a97b7fc4e9df5541b6d995/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=d7778351bf60a21925a97b7fc4e9df5541b6d995",
        "patch": "@@ -11,6 +11,7 @@\n #include <sync.h>\n #include <validationinterface.h>\n \n+class CBlockHeader;\n class CChainParams;\n class CTxMemPool;\n class ChainstateManager;\n@@ -90,6 +91,9 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode);\n \n+    /** Process a single headers message from a peer. */\n+    void ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHeader>& headers, bool via_compact_block);\n+\n     const CChainParams& m_chainparams;\n     CConnman& m_connman;\n     /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */"
      }
    ]
  },
  {
    "sha": "b70cd890e375e904b7f36b3d959e5656f5a5cbcd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzBjZDg5MGUzNzVlOTA0YjdmMzZiM2Q5NTllNTY1NmY1YTVjYmNk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T14:56:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T10:16:12Z"
      },
      "message": "[net processing] Move MaybePunishNodeForBlock into PeerManager",
      "tree": {
        "sha": "3d8f0f93e37e9545da428157862bd878120d2808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d8f0f93e37e9545da428157862bd878120d2808"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b70cd890e375e904b7f36b3d959e5656f5a5cbcd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b70cd890e375e904b7f36b3d959e5656f5a5cbcd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b70cd890e375e904b7f36b3d959e5656f5a5cbcd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b70cd890e375e904b7f36b3d959e5656f5a5cbcd/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7778351bf60a21925a97b7fc4e9df5541b6d995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7778351bf60a21925a97b7fc4e9df5541b6d995",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7778351bf60a21925a97b7fc4e9df5541b6d995"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 17,
      "deletions": 11
    },
    "files": [
      {
        "sha": "79d1ebe3ab19aad4833b383c271b1515c2bd7def",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 11,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70cd890e375e904b7f36b3d959e5656f5a5cbcd/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70cd890e375e904b7f36b3d959e5656f5a5cbcd/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b70cd890e375e904b7f36b3d959e5656f5a5cbcd",
        "patch": "@@ -1132,17 +1132,9 @@ void Misbehaving(const NodeId pnode, const int howmuch, const std::string& messa\n     }\n }\n \n-/**\n- * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n- *\n- * @param[in] via_compact_block this bool is passed in because net_processing should\n- * punish peers differently depending on whether the data was provided in a compact\n- * block message or not. If the compact block had a valid header, but contained invalid\n- * txs, the peer should not be punished. See BIP 152.\n- *\n- * @return Returns true if the peer was punished (probably disconnected)\n- */\n-static bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state, bool via_compact_block, const std::string& message = \"\") {\n+bool PeerManager::MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n+                                          bool via_compact_block, const std::string& message)\n+{\n     switch (state.GetResult()) {\n     case BlockValidationResult::BLOCK_RESULT_UNSET:\n         break;"
      },
      {
        "sha": "c0a19f7bd2304151bfd9be7a71b7ff95f4cffb55",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b70cd890e375e904b7f36b3d959e5656f5a5cbcd/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b70cd890e375e904b7f36b3d959e5656f5a5cbcd/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=b70cd890e375e904b7f36b3d959e5656f5a5cbcd",
        "patch": "@@ -11,6 +11,7 @@\n #include <sync.h>\n #include <validationinterface.h>\n \n+class BlockValidationState;\n class CBlockHeader;\n class CChainParams;\n class CTxMemPool;\n@@ -84,6 +85,19 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n                         const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n \n private:\n+    /**\n+     * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n+     *\n+     * @param[in] via_compact_block this bool is passed in because net_processing should\n+     * punish peers differently depending on whether the data was provided in a compact\n+     * block message or not. If the compact block had a valid header, but contained invalid\n+     * txs, the peer should not be punished. See BIP 152.\n+     *\n+     * @return Returns true if the peer was punished (probably disconnected)\n+     */\n+    bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n+                                 bool via_compact_block, const std::string& message = \"\");\n+\n     /** Maybe disconnect a peer and discourage future connections from its address.\n      *\n      * @param[in]   pnode     The node to check."
      }
    ]
  },
  {
    "sha": "e662e2d42afaf9c67c898634a0f3bc200255b6ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjYyZTJkNDJhZmFmOWM2N2M4OTg2MzRhMGYzYmMyMDAyNTViNmVh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T15:36:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T10:16:12Z"
      },
      "message": "[net processing] Move ProcessOrphanTx to PeerManager",
      "tree": {
        "sha": "f555cc419553ad137c4f1d08fc30727857eae843",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f555cc419553ad137c4f1d08fc30727857eae843"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e662e2d42afaf9c67c898634a0f3bc200255b6ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e662e2d42afaf9c67c898634a0f3bc200255b6ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e662e2d42afaf9c67c898634a0f3bc200255b6ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e662e2d42afaf9c67c898634a0f3bc200255b6ea/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b70cd890e375e904b7f36b3d959e5656f5a5cbcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b70cd890e375e904b7f36b3d959e5656f5a5cbcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b70cd890e375e904b7f36b3d959e5656f5a5cbcd"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "76913bc4b0f1ea099b1bdb3f50462d3515558115",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e662e2d42afaf9c67c898634a0f3bc200255b6ea/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e662e2d42afaf9c67c898634a0f3bc200255b6ea/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e662e2d42afaf9c67c898634a0f3bc200255b6ea",
        "patch": "@@ -2030,7 +2030,7 @@ void PeerManager::ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHe\n     return;\n }\n \n-void static ProcessOrphanTx(CConnman& connman, CTxMemPool& mempool, std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans)\n+void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n@@ -2052,9 +2052,9 @@ void static ProcessOrphanTx(CConnman& connman, CTxMemPool& mempool, std::set<uin\n         TxValidationState orphan_state;\n \n         if (setMisbehaving.count(fromPeer)) continue;\n-        if (AcceptToMemoryPool(mempool, orphan_state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+        if (AcceptToMemoryPool(m_mempool, orphan_state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-            RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), connman);\n+            RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n             for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(orphanHash, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n@@ -2112,7 +2112,7 @@ void static ProcessOrphanTx(CConnman& connman, CTxMemPool& mempool, std::set<uin\n             EraseOrphanTx(orphanHash);\n             done = true;\n         }\n-        mempool.check(&::ChainstateActive().CoinsTip());\n+        m_mempool.check(&::ChainstateActive().CoinsTip());\n     }\n }\n \n@@ -3030,7 +3030,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                 m_mempool.size(), m_mempool.DynamicMemoryUsage() / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n-            ProcessOrphanTx(m_connman, m_mempool, pfrom.orphan_work_set, lRemovedTxn);\n+            ProcessOrphanTx(pfrom.orphan_work_set, lRemovedTxn);\n         }\n         else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n         {\n@@ -3850,7 +3850,7 @@ bool PeerManager::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgP\n     if (!pfrom->orphan_work_set.empty()) {\n         std::list<CTransactionRef> removed_txn;\n         LOCK2(cs_main, g_cs_orphans);\n-        ProcessOrphanTx(m_connman, m_mempool, pfrom->orphan_work_set, removed_txn);\n+        ProcessOrphanTx(pfrom->orphan_work_set, removed_txn);\n         for (const CTransactionRef& removedTx : removed_txn) {\n             AddToCompactExtraTransactions(removedTx);\n         }"
      },
      {
        "sha": "24866efd67a23897d14699bbc32cdb1f4878d361",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e662e2d42afaf9c67c898634a0f3bc200255b6ea/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e662e2d42afaf9c67c898634a0f3bc200255b6ea/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=e662e2d42afaf9c67c898634a0f3bc200255b6ea",
        "patch": "@@ -105,6 +105,8 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n      */\n     bool MaybeDiscourageAndDisconnect(CNode& pnode);\n \n+    void ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn)\n+        EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n     /** Process a single headers message from a peer. */\n     void ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHeader>& headers, bool via_compact_block);\n "
      }
    ]
  },
  {
    "sha": "3115e00f75b41d9765dcbb376e367b25f61a1d58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTE1ZTAwZjc1YjQxZDk3NjVkY2JiMzc2ZTM2N2IyNWY2MWExZDU4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T15:40:10Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T10:16:12Z"
      },
      "message": "[net processing] Move MaybePunishPeerForTx to PeerManager",
      "tree": {
        "sha": "9b317b56990980b7074ad6794a77f730e96fe8b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b317b56990980b7074ad6794a77f730e96fe8b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3115e00f75b41d9765dcbb376e367b25f61a1d58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3115e00f75b41d9765dcbb376e367b25f61a1d58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3115e00f75b41d9765dcbb376e367b25f61a1d58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3115e00f75b41d9765dcbb376e367b25f61a1d58/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e662e2d42afaf9c67c898634a0f3bc200255b6ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e662e2d42afaf9c67c898634a0f3bc200255b6ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e662e2d42afaf9c67c898634a0f3bc200255b6ea"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c99b73bd310124f2c9ca6fdd93f5a2fe1260a0ea",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3115e00f75b41d9765dcbb376e367b25f61a1d58/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3115e00f75b41d9765dcbb376e367b25f61a1d58/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3115e00f75b41d9765dcbb376e367b25f61a1d58",
        "patch": "@@ -1182,12 +1182,7 @@ bool PeerManager::MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationSt\n     return false;\n }\n \n-/**\n- * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n- *\n- * @return Returns true if the peer was punished (probably disconnected)\n- */\n-static bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\")\n+bool PeerManager::MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message)\n {\n     switch (state.GetResult()) {\n     case TxValidationResult::TX_RESULT_UNSET:"
      },
      {
        "sha": "4f350630f11baca62ab61c52a22bd18ee1758475",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3115e00f75b41d9765dcbb376e367b25f61a1d58/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3115e00f75b41d9765dcbb376e367b25f61a1d58/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=3115e00f75b41d9765dcbb376e367b25f61a1d58",
        "patch": "@@ -16,6 +16,7 @@ class CBlockHeader;\n class CChainParams;\n class CTxMemPool;\n class ChainstateManager;\n+class TxValidationState;\n \n extern RecursiveMutex cs_main;\n extern RecursiveMutex g_cs_orphans;\n@@ -98,6 +99,13 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n                                  bool via_compact_block, const std::string& message = \"\");\n \n+    /**\n+     * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n+     *\n+     * @return Returns true if the peer was punished (probably disconnected)\n+     */\n+    bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\");\n+\n     /** Maybe disconnect a peer and discourage future connections from its address.\n      *\n      * @param[in]   pnode     The node to check."
      }
    ]
  },
  {
    "sha": "aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTExNGIxYzliMDZjMmJkM2VkOTM2YmJiOWZiMzJiMzFmNzViZGIy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T15:45:46Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T10:16:12Z"
      },
      "message": "[net_processing] Move SendBlockTransactions into PeerManager",
      "tree": {
        "sha": "368ee9db84b886308c4932b09d776ee80225968b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/368ee9db84b886308c4932b09d776ee80225968b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3115e00f75b41d9765dcbb376e367b25f61a1d58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3115e00f75b41d9765dcbb376e367b25f61a1d58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3115e00f75b41d9765dcbb376e367b25f61a1d58"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "443e7c6eeaca5985a68b591dc188519816db3d96",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2",
        "patch": "@@ -1828,7 +1828,7 @@ static uint32_t GetFetchFlags(const CNode& pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_ma\n     return nFetchFlags;\n }\n \n-inline void static SendBlockTransactions(const CBlock& block, const BlockTransactionsRequest& req, CNode& pfrom, CConnman& connman) {\n+void PeerManager::SendBlockTransactions(CNode& pfrom, const CBlock& block, const BlockTransactionsRequest& req) {\n     BlockTransactions resp(req);\n     for (size_t i = 0; i < req.indexes.size(); i++) {\n         if (req.indexes[i] >= block.vtx.size()) {\n@@ -1840,7 +1840,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     LOCK(cs_main);\n     const CNetMsgMaker msgMaker(pfrom.GetSendVersion());\n     int nSendFlags = State(pfrom.GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n-    connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n+    m_connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n void PeerManager::ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHeader>& headers, bool via_compact_block)\n@@ -2845,7 +2845,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             // Unlock cs_most_recent_block to avoid cs_main lock inversion\n         }\n         if (recent_block) {\n-            SendBlockTransactions(*recent_block, req, pfrom, m_connman);\n+            SendBlockTransactions(pfrom, *recent_block, req);\n             return;\n         }\n \n@@ -2878,7 +2878,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         bool ret = ReadBlockFromDisk(block, pindex, m_chainparams.GetConsensus());\n         assert(ret);\n \n-        SendBlockTransactions(block, req, pfrom, m_connman);\n+        SendBlockTransactions(pfrom, block, req);\n         return;\n     }\n "
      },
      {
        "sha": "c89fdb601b088d3429035ded729092b33d3943f9",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2",
        "patch": "@@ -11,6 +11,7 @@\n #include <sync.h>\n #include <validationinterface.h>\n \n+class BlockTransactionsRequest;\n class BlockValidationState;\n class CBlockHeader;\n class CChainParams;\n@@ -118,6 +119,8 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     /** Process a single headers message from a peer. */\n     void ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHeader>& headers, bool via_compact_block);\n \n+    void SendBlockTransactions(CNode& pfrom, const CBlock& block, const BlockTransactionsRequest& req);\n+\n     const CChainParams& m_chainparams;\n     CConnman& m_connman;\n     /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */"
      }
    ]
  },
  {
    "sha": "bb6a32ce9983c72afa90f41a43a47ffd703ca006",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjZhMzJjZTk5ODNjNzJhZmE5MGY0MWE0M2E0N2ZmZDcwM2NhMDA2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T15:56:15Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T10:16:12Z"
      },
      "message": "[net processing] Move Misbehaving() to PeerManager",
      "tree": {
        "sha": "5623c972c02aafaeab21159052bb0e2778d62551",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5623c972c02aafaeab21159052bb0e2778d62551"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb6a32ce9983c72afa90f41a43a47ffd703ca006",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb6a32ce9983c72afa90f41a43a47ffd703ca006",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb6a32ce9983c72afa90f41a43a47ffd703ca006",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb6a32ce9983c72afa90f41a43a47ffd703ca006/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa114b1c9b06c2bd3ed936bbb9fb32b31f75bdb2"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "168a3cedea6bf32386b413a487686de7f6a8a0d1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb6a32ce9983c72afa90f41a43a47ffd703ca006/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb6a32ce9983c72afa90f41a43a47ffd703ca006/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bb6a32ce9983c72afa90f41a43a47ffd703ca006",
        "patch": "@@ -1110,11 +1110,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     return nEvicted;\n }\n \n-/**\n- * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n- * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n- */\n-void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message)\n+void PeerManager::Misbehaving(const NodeId pnode, const int howmuch, const std::string& message)\n {\n     assert(howmuch > 0);\n "
      },
      {
        "sha": "520f7489e8fd7c3a5bb708ae1ea50d4a490501f4",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb6a32ce9983c72afa90f41a43a47ffd703ca006/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb6a32ce9983c72afa90f41a43a47ffd703ca006/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=bb6a32ce9983c72afa90f41a43a47ffd703ca006",
        "patch": "@@ -86,6 +86,13 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n                         const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n \n+    /**\n+     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n+     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n+     * Public for unit testing.\n+     */\n+    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n+\n private:\n     /**\n      * Potentially mark a node discouraged based on the contents of a BlockValidationState object"
      },
      {
        "sha": "f4d2204e1c5510bff7d0a1b82401d6124cfedec9",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb6a32ce9983c72afa90f41a43a47ffd703ca006/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb6a32ce9983c72afa90f41a43a47ffd703ca006/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=bb6a32ce9983c72afa90f41a43a47ffd703ca006",
        "patch": "@@ -47,7 +47,6 @@ struct CConnmanTest : public CConnman {\n extern bool AddOrphanTx(const CTransactionRef& tx, NodeId peer);\n extern void EraseOrphansFor(NodeId peer);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n-extern void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n \n struct COrphanTx {\n     CTransactionRef tx;\n@@ -235,7 +234,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n-    Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD); // Should be discouraged\n+    peerLogic->Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n         LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n@@ -249,14 +248,14 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     peerLogic->InitializeNode(&dummyNode2);\n     dummyNode2.nVersion = 1;\n     dummyNode2.fSuccessfullyConnected = true;\n-    Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1);\n+    peerLogic->Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n         LOCK(dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n     BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not discouraged yet...\n     BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n-    Misbehaving(dummyNode2.GetId(), 1);         // 2 reaches discouragement threshold\n+    peerLogic->Misbehaving(dummyNode2.GetId(), 1, /* message */ \"\");         // 2 reaches discouragement threshold\n     {\n         LOCK(dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n@@ -287,7 +286,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.nVersion = 1;\n     dummyNode.fSuccessfullyConnected = true;\n \n-    Misbehaving(dummyNode.GetId(), DISCOURAGEMENT_THRESHOLD);\n+    peerLogic->Misbehaving(dummyNode.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\");\n     {\n         LOCK(dummyNode.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode));"
      }
    ]
  }
]