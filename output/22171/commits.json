[
  {
    "sha": "06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmZiNmM1Y2UxMzQ1ZWNkNzA4ZmUzMTEzNjczY2EwYzJkYThiYzM3",
    "commit": {
      "author": {
        "name": "baptistapedro",
        "email": "pedrojorgesbaptista@gmail.com",
        "date": "2021-06-06T16:37:35Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2021-06-06T16:37:35Z"
      },
      "message": "Create sanitizestring.cpp\n\nIsolated harness for SanitizeString(), need a little edit to fit the fuzz coding pattern, I believe the extern \"C\" int LLVMFuzzerTestOneInput() would be translated to:\r\n```\r\nFUZZ_TARGET(sanitizestring)\r\n{\r\n    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\r\n    [...]\r\n}\r\nI am not that familiar with the whole fuzz codebase pattern yet to follow with the proper syntax.\r\n\r\nThe recommended fix from @laawnj is to \" make the second argument of SanitizeString an \"SafeChars\" enum. This prevents a unhandled value from ever being passed in.\r\n\"\r\n\r\n[1] and [2] point to so some references where the second argument is not passed as an enum but there is more cases under the same conditions so I recommend to do some x-reference to double check them.",
      "tree": {
        "sha": "1e4a6ec9e554780e77db907fd098ffdff9490330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e4a6ec9e554780e77db907fd098ffdff9490330"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgvPnPCRBK7hj4Ov3rIwAA/hIIACXLlaaD8xtabjG/JULi9t39\nycaUNqcjM8HOVa/Riaid19EmcO9Dga/FDG5e+rkDeBogg4yH/oj0fGO+6L7yLmsP\nJZYdtlaR/Y4N+aJCK6TBu95bPjc2NaI7t++97zccvtSyXBIgBMsvuddEch2/XZ2x\nthUXbfGd7vJHqKX0wXtg47IET6QjqODvT5eHEUjlwsD5wMyDv/IMvdbaICkVnIe1\nY7CEucU4oPTLuHeTKDN6EovVkkOheC73ZZ/hBZY2fcTFb6fP0AhLYTq9bakiKnqq\n9DmWNxsnglBrHi+24I4zZimtqWiCdT0lD6xSw1QUkHaQlZbPlrx+l5S3xKsYOds=\n=cx+a\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 1e4a6ec9e554780e77db907fd098ffdff9490330\nparent e033ca13794699cf4744e71647db75c583a9a600\nauthor baptistapedro <pedrojorgesbaptista@gmail.com> 1622997455 +0200\ncommitter GitHub <noreply@github.com> 1622997455 +0200\n\nCreate sanitizestring.cpp\n\nIsolated harness for SanitizeString(), need a little edit to fit the fuzz coding pattern, I believe the extern \"C\" int LLVMFuzzerTestOneInput() would be translated to:\r\n```\r\nFUZZ_TARGET(sanitizestring)\r\n{\r\n    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\r\n    [...]\r\n}\r\nI am not that familiar with the whole fuzz codebase pattern yet to follow with the proper syntax.\r\n\r\nThe recommended fix from @laawnj is to \" make the second argument of SanitizeString an \"SafeChars\" enum. This prevents a unhandled value from ever being passed in.\r\n\"\r\n\r\n[1] and [2] point to so some references where the second argument is not passed as an enum but there is more cases under the same conditions so I recommend to do some x-reference to double check them."
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06fb6c5ce1345ecd708fe3113673ca0c2da8bc37/comments",
    "author": {
      "login": "baptistapedro",
      "id": 9632716,
      "node_id": "MDQ6VXNlcjk2MzI3MTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9632716?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baptistapedro",
      "html_url": "https://github.com/baptistapedro",
      "followers_url": "https://api.github.com/users/baptistapedro/followers",
      "following_url": "https://api.github.com/users/baptistapedro/following{/other_user}",
      "gists_url": "https://api.github.com/users/baptistapedro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baptistapedro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baptistapedro/subscriptions",
      "organizations_url": "https://api.github.com/users/baptistapedro/orgs",
      "repos_url": "https://api.github.com/users/baptistapedro/repos",
      "events_url": "https://api.github.com/users/baptistapedro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baptistapedro/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e033ca13794699cf4744e71647db75c583a9a600",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e033ca13794699cf4744e71647db75c583a9a600",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e033ca13794699cf4744e71647db75c583a9a600"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 90,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fa4d7c0c396f427936b04f047ba6a98662b142a2",
        "filename": "src/test/fuzz/sanitizestring.cpp",
        "status": "added",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06fb6c5ce1345ecd708fe3113673ca0c2da8bc37/src/test/fuzz/sanitizestring.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06fb6c5ce1345ecd708fe3113673ca0c2da8bc37/src/test/fuzz/sanitizestring.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/sanitizestring.cpp?ref=06fb6c5ce1345ecd708fe3113673ca0c2da8bc37",
        "patch": "@@ -0,0 +1,90 @@\n+\n+// SEGV on SanitizeString()\n+\n+// If the attacker can control the 2nd arg of SanitizeString it segfaults (reasonably)\n+// through call cross-reference, SanitizeString is  used on the codebase for printing/debugging\n+ \n+// possible attack surface where the control of the 2nd arg of SanitizeString seems to be controllable:\n+\n+// [1]\n+/* net.cpp:\n+ *   void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg) {\n+ *       size_t nMessageSize = msg.data.size();    <---------- // [ No boundary check for nMessageSize passed to SanitizeString ]\n+ *       LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId()); <----- \n+ */\n+\n+ // [2]\n+ /* net.cpp\n+  * Another method where the `message size` is passed to SanitizeString without check \n+  * std::optional<CNetMessage> V1TransportDeserializer::GetMessage(...)\n+  *\n+  */\n+\n+// NOTE: I do not know if the attacker can actually control &msg at this point, nor how to hit a breakpoint on this path. \n+//       just thought important reporting because did not see a boundary check for nMessageSize on PushMessage()\n+\n+// Find the harness and ASAn log `as PoC for [1]`\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <string.h>\n+#include <string>\n+\n+static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\n+static const std::string SAFE_CHARS[] =\n+{\n+    CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n+    CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n+    CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n+    CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n+};\n+\n+std::string SanitizeString(const std::string& str, int rule)\n+{\n+    std::string strResult;\n+    for (std::string::size_type i = 0; i < str.size(); i++)\n+    {\n+        if (SAFE_CHARS[rule].find(str[i]) != std::string::npos)\n+            strResult.push_back(str[i]);\n+    }\n+    return strResult;\n+}\n+\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n+{\n+    std::string fuzzdata(reinterpret_cast<const char*>(data), size);\n+    fuzzdata.push_back('\\0');\n+\n+    SanitizeString(fuzzdata, fuzzdata.size());\n+\n+    return 0;\n+}\n+\n+\n+/*\n+================================================================\n+==5237==ERROR: AddressSanitizer: SEGV on unknown address 0x000000e83008 (pc 0x7fb170809b42 bp 0x7ffdfe7fa3b0 sp 0x7ffdfe7fa360 T0)\n+==5237==The signal is caused by a READ memory access.\n+    #0 0x7fb170809b42 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const (/lib/x86_64-linux-gnu/libstdc++.so.6+0x144b42)\n+    #1 0x54df01 in SanitizeString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) /home/nasa/BTC/SanitizeStringFuzz.cc:24:30\n+    #2 0x54e1a1 in LLVMFuzzerTestOneInput /home/nasa/BTC/SanitizeStringFuzz.cc:36:5\n+    #3 0x458b81 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/home/nasa/BTC/sanitizeStrfuzz+0x458b81)\n+    #4 0x4582c5 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) (/home/nasa/BTC/sanitizeStrfuzz+0x4582c5)\n+    #5 0x45a567 in fuzzer::Fuzzer::MutateAndTestOne() (/home/nasa/BTC/sanitizeStrfuzz+0x45a567)\n+    #6 0x45b265 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) (/home/nasa/BTC/sanitizeStrfuzz+0x45b265)\n+    #7 0x449c1e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/home/nasa/BTC/sanitizeStrfuzz+0x449c1e)\n+    #8 0x472a62 in main (/home/nasa/BTC/sanitizeStrfuzz+0x472a62)\n+    #9 0x7fb170364cb1 in __libc_start_main csu/../csu/libc-start.c:314:16\n+    #10 0x41e99d in _start (/home/nasa/BTC/sanitizeStrfuzz+0x41e99d)\n+AddressSanitizer can not provide additional info.\n+SUMMARY: AddressSanitizer: SEGV (/lib/x86_64-linux-gnu/libstdc++.so.6+0x144b42) in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const\n+==5237==ABORTING\n+MS: 3 ChangeBinInt-ChangeBit-CrossOver-; base unit: 02f7874ec3f3cfe3af245e89dd66da30d0f0e40c\n+0x6a,0xf5,0x4a,0xff,0xff,0xa,0x0,0xff,0x86,0xc8,0x0,0xff,0xa,0xa,0xe1,0x86,0xff,0xff,0x0,0x0,0xff,0xff,0xff,0x0,0xff,0x86,0xc8,0x0,0xff,0xa,0xa,0xe1,0xe1,0xe1,0xe1,0xe1,0xe1,0xa,0xa,0x3a,0x3a,0xa,0x6a,0x6a,0xf5,0x4a,0xff,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0xff,0x0,0xa,0xa,0xff,0xa,0xa,0x4a,0x3a,0x3a,0xff,0x3a,0x3a,0x3a,0xe1,0xe1,0xe1,0xe1,0x4a,0xe1,0xe1,0x0,0x4a,0x0,0x0,0x0,0x0,0x0,0x0,\n+j\\xf5J\\xff\\xff\\x0a\\x00\\xff\\x86\\xc8\\x00\\xff\\x0a\\x0a\\xe1\\x86\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\x00\\xff\\x86\\xc8\\x00\\xff\\x0a\\x0a\\xe1\\xe1\\xe1\\xe1\\xe1\\xe1\\x0a\\x0a::\\x0ajj\\xf5J\\xff::::::::::\\xff\\x00\\x0a\\x0a\\xff\\x0a\\x0aJ::\\xff:::\\xe1\\xe1\\xe1\\xe1J\\xe1\\xe1\\x00J\\x00\\x00\\x00\\x00\\x00\\x00\n+artifact_prefix='./'; Test unit written to ./crash-8ed09a14aaf8af1af8ed70e85b5eff8b52da73be\n+Base64: avVK//8KAP+GyAD/Cgrhhv//AAD///8A/4bIAP8KCuHh4eHh4QoKOjoKamr1Sv86Ojo6Ojo6Ojo6/wAKCv8KCko6Ov86Ojrh4eHhSuHhAEoAAAAAAAA=\n+*/"
      }
    ]
  }
]