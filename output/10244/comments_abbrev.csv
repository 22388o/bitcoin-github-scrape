laanwj,2017-04-20T19:41:54Z,ClientModel and WalletModel were already meant as abstraction layer for accessing the core from the GUI. What is your rationale for adding another layer?,https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295875877,295875877,
ryanofsky,2017-04-20T19:47:08Z,"> ClientModel and WalletModel were already meant as abstraction layer for accessing the core from the GUI. What is your rationale for adding another layer?\n\nClientModel and WalletModel might have been intended to be an abstraction layer, but they are not functioning like one. There are libbitcoin functions and global variables accessed all over Qt code right now. With this change, all of these",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295877901,295877901,
jonasschnelli,2017-04-20T19:48:34Z,"I once did a similar thing,.. but stopped at some point and now I know why.\nIt's an impressive code change and I kinda like a central point (your interfaces.cpp) where communication between the node, the wallet and the GUI happens.\n\nI also agree with @laanwj that the clientmodel (node) and the walletmodal (wallet) are originally though to be that layer.\nThough, there are many violations AF",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295878426,295878426,
ryanofsky,2017-04-20T20:10:33Z,"> What would be the downsides of using the exiting layers (clientmodel / walletmodel) better?\n\nIf you look at the `ClientModel` class, you can see it is doing a lot more work than the `ipc::local::Node` class is. Similarly with `WalletModel` and `ipc::local::Wallet.` The ipc classes are just simple shims around low-level node and wallet functionality, while Qt objects implement higher level lo",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-295887270,295887270,
jonasschnelli,2017-04-21T11:09:28Z,"The general IPC interface makes sense to me. The main problem I see for any type of low latency IPC/RPC is the missing asynchronity.\nTake `getWalletTxDetails`. This IPC call may take 2-3 seconds depending on the communication protocol and database you are using. Ideally the GUI is design to handle it asynchronous (like an RPC call) otherwise this will lead to GUI thread freezes. Not sure if this",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296163518,296163518,
ryanofsky,2017-04-21T11:32:24Z,"> The main problem I see for any type of low latency IPC/RPC is the missing asynchronity.\n\nNot sure if you saw the comments about this in the other pr starting here: https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294094610\n\nThese changes are orthogonal to event processing / blocking issues in the UI. If UI blocked before, it will still block after these changes, if UI didn't bl",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296167489,296167489,
ryanofsky,2017-04-21T11:50:39Z,"Also would point out that Node and Wallet interfaces in [ipc/interfaces.h](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/ipc/interfaces.h) were mainly designed with goal of changing existing Qt code as little as possible. They aren't in any way set in stone, and I would expect them to evolve over time. Probably some calls will get consolidated, others will get broken up, calls that cu",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296170668,296170668,
jonasschnelli,2017-04-21T11:51:05Z,"Thinking again and discussing this with @sipa / @laanwj, I think we should use the existing client-/walletmodal as node/wallet abstraction (including a possible IPC abstraction).\n\nWhat's missing in the first place are better asynchronous messaging between the GUI and the wallet/node.\n\nIMO using a thread with queue for general node/wallet communication (and eventual additional threads for p",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296170774,296170774,
ryanofsky,2017-04-21T12:00:22Z,"> What's missing in the first place are better asynchronous messaging between the GUI and the wallet/node.\n\nAgain I think this is (and should be) an independent issue, but if you want to flesh out some more concrete suggestions and I would be happy to hear them.\n\n> IMO using a thread with queue for general node/wallet communication (and eventual additional threads for procedures that usual",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296172416,296172416,
laanwj,2017-04-21T12:10:28Z,"> Using QT slots/signals for all(most?) communication would be required anyways and would be beneficial even without IPC and therefor should be done first.\n\nThis was my point too. Making the GUI asynchronous would avoid ever hard-freezing the GUI. Modern operating systems assume that an application has crashed if its GUI thread is unresponsive. This is a priority for improving user experience.",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296174182,296174182,
ryanofsky,2017-04-21T12:59:01Z,"> The drawback is that it calcifies some things\n\nCould you be more concrete about this? I don't see how it is true. Direct calls before are still direct calls now. If we want to follow the RPCConsole / RPCExecutor model in other parts of Qt code, I don't see how any of the changes I've made for IPC make this more difficult.",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296183743,296183743,
ryanofsky,2017-04-21T13:32:41Z,"I had a look at discussion in IRC (https://botbot.me/freenode/bitcoin-core-dev/msg/84348426/)\n\nWith respect, what I think you guys are missing on the `WalletModel`/`ClientModel` topic is that the `ipc::local::WalletImpl` and `ipc::local::NodeImpl` classes in [ipc/local/interfaces.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/ipc/local/interfaces.cpp) are only **temporarily** ",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-296191498,296191498,
ryanofsky,2017-06-01T19:00:16Z,"@laanwj and @jonasschnelli can you let me know if you still see issues with this approach?\n\nOn the Qt model class issue, I pulled out a bunch of model methods that were just wrapping IPC calls so it should be clearer what actual work [walletmodel.cpp](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-local/src/qt/walletmodel.cpp) and [clientmodel.cpp](https://github.com/ryanofsky/bitcoin/blob/p",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-305588012,305588012,
laanwj,2017-06-15T13:38:27Z,"Concept ACK on the approach, moving things to interfaces instead of global calls is usually good as it makes it easier to see what the interface to the core is.\n",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-308731640,308731640,
jonasschnelli,2017-06-15T13:58:06Z,"Concept ACK.\nI think we could try to rebase and get this in once 0.15 has been split off",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-308738280,308738280,
ryanofsky,2017-11-01T13:14:55Z,"@promag re: https://botbot.me/freenode/bitcoin-core-dev/msg/92986206/\n\n> \<promag> to change the current wallet from widgets to qtquick would take several PR's (which would sit there for a long time)\n> \<promag> dunno if the IPC PR from ryanofsky is going forward\n> \<promag> both require lots of changes to the wallet ui code\n> \<promag> that's why I think adding IPC to glue a new wallet ",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-341102695,341102695,
ryanofsky,2017-12-01T22:37:34Z,Another IRC mention of this: https://botbot.me/freenode/bitcoin-core-dev/msg/93856775/,https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-348632889,348632889,
sipa,2018-03-09T17:29:19Z,"After reading the discussion again, Concept ACK.\n\nWhile WalletModel and ClientModel were designed as an abstraction for the ""core"", they're incomplete in that regard (many direct calls bypass the abstraction), and a bit too high level (having significant logic of their own).\n\nI guess we can see this PR as introducing a perfect abstraction, with no logic of its own.\n\n@ryanofsky What do ",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-371883024,371883024,
ryanofsky,2018-03-09T18:20:13Z,"> @ryanofsky What do you think the future responsibilities of WalletModel and ClientModel should be? Should they be turned into logic on the core signed, abstracted by the new interfaces, or just inlined into the calls sites inside the GUI?\n\nI think if model code is just calling interface functions it should probably be inlined. But if model code is doing something useful to support the gui, l",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-371900598,371900598,
meshcollider,2018-03-14T21:40:39Z,"Concept ACK, on my to-do list to review",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-373184202,373184202,
jamesob,2018-03-23T20:23:36Z,Going to hold off on testing this one until it's rebased.,https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-375787808,375787808,
ryanofsky,2018-03-23T21:48:42Z,"> Going to hold off on testing this one until it's rebased.\n\nRebased 84e80629d10cb48009b84e131ee61e0a8b9ad171 -> b39555ae6eeb205706922766463a80cfe09153be ([pr/ipc-local.59](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.59) -> [pr/ipc-local.60](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.60))\nRebased b39555ae6eeb205706922766463a80cfe09153be -> 19a268c1f500e0c8793da67",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-375807433,375807433,
jnewbery,2018-04-02T19:54:48Z,Needs rebase to fix unrelated travis failure,https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378025592,378025592,
ryanofsky,2018-04-02T20:32:17Z,"> Needs rebase to fix unrelated travis failure\n\nRebased 4bf295201d0f1059d9670329cb412fd074910319 -> e73a9f589f6ddeb0e350d887cd1f98fc55aac632 ([pr/ipc-local.66](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.66) -> [pr/ipc-local.67](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.67)). Looks like failure in mempool_persist test: https://travis-ci.org/bitcoin/bitcoin/jobs/36",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378035305,378035305,
jnewbery,2018-04-02T20:45:06Z,"> Looks like failure in mempool_persist test\n\nAh. The new linter lint-include-guards was also failing, which is what required a rebase.\n\nI think mempool_persist was broken by https://github.com/bitcoin/bitcoin/commit/cb1e319fe9e198c9c5cf5236fe9af5a3d748b9e8. Will open an issue.",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378038612,378038612,
ryanofsky,2018-04-03T18:43:49Z,"Rebased e73a9f589f6ddeb0e350d887cd1f98fc55aac632 -> 4678ff464f03c09feb0e237343f2af329293343a ([pr/ipc-local.67](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.67) -> [pr/ipc-local.68](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.68)) due to conflict with #12846.\n",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378355104,378355104,
ryanofsky,2018-04-03T18:52:54Z,"@laanwj or @jonasschnelli I wonder if it may be a good time to merge this given recent testing and discussion (https://botbot.me/freenode/bitcoin-core-dev/msg/98388625/). Review status:\n\nTested ACKs\n\n- jnewbery https://github.com/bitcoin/bitcoin/pull/10244#pullrequestreview-107372769, partial code review\n- jamesob https://github.com/bitcoin/bitcoin/pull/10244#pullrequestreview-107016963",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378357905,378357905,
jamesob,2018-04-03T19:27:04Z,"Tested ACK https://github.com/bitcoin/bitcoin/pull/10244/commits/4678ff464f03c09feb0e237343f2af329293343a\n\nRan through the same test plan I posted above earlier.",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378367728,378367728,
Sjors,2018-04-04T13:13:01Z,"Some linter unhappiness: <img width=""973"" alt=""schermafbeelding 2018-04-04 om 15 11 55"" src=""https://user-images.githubusercontent.com/10217/38309519-8e2f08b2-381a-11e8-9119-f6d0ae63db5f.png"">",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378594816,378594816,
jnewbery,2018-04-04T13:23:18Z,"> Some linter unhappiness\n\n~Rebasing on master will resolve this.~\n\nEdit: oops, not true.",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378597999,378597999,
ryanofsky,2018-04-04T21:07:41Z,Updated 4678ff464f03c09feb0e237343f2af329293343a -> 996013769711bd507cdcd6dde88cbd59fcd4fbad ([pr/ipc-local.68](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.68) -> [pr/ipc-local.69](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-local.69)) from https://github.com/jnewbery/bitcoin/commits/pr10244_fix_guards_copyright (thanks @jnewbery!). Only change is fixing the bad include guard,https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-378745529,378745529,
tmornini,2018-04-06T02:19:38Z,Congrats. 🎉 ,https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-379130038,379130038,
ken2812221,2018-04-07T05:54:23Z,"This PR broke the gitian build on windows\nhttps://bitcoin.jonasschnelli.ch/builds/559/build_win.log",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-379434756,379434756,
ryanofsky,2018-04-07T07:26:20Z,"> This PR broke the gitian build on windows\n\nError is:\n\n```c++\nqt/guiutil.cpp:235:24: error: ‘Node’ in namespace ‘::’ does not name a type\n bool isDust(interface::Node& node, const QString& address, const CAmount& amount)\n                        ^\nqt/guiutil.cpp: In function ‘bool GUIUtil::isDust(int&, const QString&, const CAmount&)’:\nqt/guiutil.cpp:240:31: error: request for me",https://github.com/bitcoin/bitcoin/pull/10244#issuecomment-379442647,379442647,
jamesob,2018-03-08T19:58:50Z,"Seems like we should be able to remove `init.h` inclusions from src/qt. I tried this removal locally and it compiles okay.\n```\n $ git grep init.h src/qt\n\nsrc/qt/bitcoin.cpp:#include <init.h>\nsrc/qt/bitcoingui.cpp:#include <init.h>\nsrc/qt/coincontroldialog.cpp:#include <init.h>\nsrc/qt/guiutil.cpp:#include <init.h>\nsrc/qt/optionsmodel.cpp:#include <init.h>\nsrc/qt/signverifymessaged",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173273761,173273761,src/qt/bitcoin.cpp
jamesob,2018-03-08T20:47:19Z,Needs `override`?,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173285690,173285690,src/interface/wallet.cpp
jamesob,2018-03-08T21:42:03Z,Unused?,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173300689,173300689,src/interface/wallet.cpp
jamesob,2018-03-09T14:48:22Z,"The naming of `nodes` is a little confusing (would expect it to be a vector of `interface::Node` instances), especially when elements of it are named `node` in the loop below. Does `node_stats` make more sense?",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173469241,173469241,src/qt/peertablemodel.cpp
jamesob,2018-03-09T15:51:57Z,"Since we're passing in nullptr for `node` here, is it worth adding `&& node` to [line 306](https://github.com/bitcoin/bitcoin/blob/9cdbd195ba85b1af12fe8c55db3880df73e107ff/src/qt/rpcconsole.cpp#L306) (or something similar) to be cautious?",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173487964,173487964,src/qt/rpcconsole.cpp
jamesob,2018-03-09T16:39:04Z,"Looks like this is already acquired as-needed in `CWallet::SetAddressBook`, but maybe this acquisition is intentional.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173501882,173501882,src/interface/wallet.cpp
jamesob,2018-03-09T18:24:32Z,Dead code?,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173528339,173528339,src/interface/node.cpp
jamesob,2018-03-09T18:37:51Z,"Could define a ctor here to avoid the `emplace_back`-related boilerplate above, but that's just minor style.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173531920,173531920,src/interface/wallet.h
jamesob,2018-03-09T18:50:59Z,Appears to be unused.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173535338,173535338,src/interface/wallet.h
jamesob,2018-03-09T19:11:58Z,"This may not be practical to change for legacy reasons, but I find the naming here confusing; it makes me think bool and not vector. Something like `my_txout_addresses` (and likewise for two others above) seems clearer.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173540820,173540820,src/interface/wallet.h
jamesob,2018-03-09T19:48:21Z,"Oops, nevermind; the include should stay in some files: \n```\n $ for i in Interrupt Shutdown ShutdownRequested InitParameter AppInit HelpMessageMode HelpMessage LicenseInfo; do git grep ""${i}*()"" src/qt | cut -d':' -f 1 | sort -u; done\n\nsrc/qt/bitcoin.cpp\nsrc/qt/bitcoingui.cpp\nsrc/qt/bitcoingui.h\nsrc/qt/splashscreen.cpp\nsrc/qt/winshutdownmonitor.cpp\nsrc/qt/utilitydialog.cpp\n```",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173550190,173550190,src/qt/bitcoin.cpp
ryanofsky,2018-03-13T15:35:47Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173528339\n\n> Dead code?\n\nThe returned_target output isn't used here but is needed a little later from `SendCoinsDialog::updateSmartFeeLabel` in the ""Remove direct bitcoin calls from qt/sendcoinsdialog.cpp"" commit.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174177885,174177885,src/interface/node.cpp
ryanofsky,2018-03-13T15:35:53Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173531920\n\n> Could define a ctor here to avoid the emplace_back-related boilerplate above, but that's just minor style.\n\nNice, done in c6bf991ce90e8c290bff56f74de900f5b27af793.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174177928,174177928,src/interface/wallet.h
ryanofsky,2018-03-13T15:35:59Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173540820\n\n> This may not be practical to change for legacy reasons, but I find the naming here confusing; it makes me think bool and not vector. Something like my_txout_addresses (and likewise for two others above) seems clearer.\n\nI think I disagree. A name like `my_txout_addresses` to me suggests a list of addresses, not a list of",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174177968,174177968,src/interface/wallet.h
ryanofsky,2018-03-13T15:36:07Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173273761\n\n> Seems like we should be able to remove init.h\n\nRemoved in a few places in d5c84fdb9d1b6863018a3206e33bb4d57ce2b3fa, 990f4e4503d5f0eaaa3b724d2d9a2396c57a6ff1, and 2da306b742c4487b1fbcee75ece66f1d14a5dfc0.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174178024,174178024,src/qt/bitcoin.cpp
ryanofsky,2018-03-13T15:36:14Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173469241\n\n> The naming of nodes is a little confusing\n\nRenamed `node` and `nodes` in 2504665640b434fd150ffe0f04f7a3aade7de8d4.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174178060,174178060,src/qt/peertablemodel.cpp
ryanofsky,2018-03-13T15:36:21Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173487964\n\n> Since we're passing in nullptr for node here, is it worth adding && node to line 306 (or something similar) to be cautious?\n\nWent with an assert in a0fa93d471a9deb986e4207dd09f679b655cae49",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174178105,174178105,src/qt/rpcconsole.cpp
ryanofsky,2018-03-13T15:38:44Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173535338\n\n> Appears to be unused.\n\nRemoved in 113a1bc44fa1df87e494b71ae5dd53567ab72f30\n\n",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174179009,174179009,src/interface/wallet.h
ryanofsky,2018-03-13T15:39:59Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173501882\n\n> Looks like this is already acquired as-needed in CWallet::SetAddressBook, but maybe this acquisition is intentional.\n\nGood catch, removed locks in setAddressBook and delAddressBook in \n7fcc6e43025fb2692acdd722dab2ef9598711377 and a25886384f7c2e3f5b2f86ef28fd86d4ccc7e3d7.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174179493,174179493,src/interface/wallet.cpp
ryanofsky,2018-03-13T15:42:18Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173300689\n\n> Unused?\n\nRemoved in 3495f5a3a1f3fe587f9013442084a77955c3564b. I think this somehow got pulled in from my changes in #10973.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174180418,174180418,src/interface/wallet.cpp
ryanofsky,2018-03-13T15:43:55Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173285690\n\n> Needs override?\n\nAdded in 2a2c549eb7c45cff1ef21a9b1b3b9a5d1d1cec37.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174181038,174181038,src/interface/wallet.cpp
jamesob,2018-03-13T20:04:43Z,"Ah sorry, what I meant was that, because of the way `CHECK_WALLET` works, it doesn't look like we'll ever make it to this line or the one below it.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174266521,174266521,src/interface/node.cpp
jamesob,2018-03-13T20:06:09Z,"Oh, you're totally right; I misunderstood the content of these vectors. Thanks for the clarification.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174266882,174266882,src/interface/wallet.h
ryanofsky,2018-03-13T20:45:36Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173528339\n\n> Ah sorry, what I meant was that, because of the way CHECK_WALLET works, it doesn't look like we'll ever make it to this line or the one below it.\n\n:man_facepalming: Good catch, fixed in 8aced6d22ddf6cf2af6ed02ad8344b583c238b9f",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174278109,174278109,src/interface/node.cpp
ryanofsky,2018-03-13T21:35:43Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r173528339\n\nPrevious comment looks a little odd in gmail. Github apparently tries to render `:man_facepalming:` as `['FACE PALM', 'ZERO WIDTH JOINER', 'MALE SIGN', 'VARIATION SELECTOR-16']` in unicode.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174292493,174292493,src/interface/node.cpp
Sjors,2018-03-14T15:36:23Z,Tested that custom config files still work.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174503950,174503950,src/interface/node.cpp
Sjors,2018-03-14T15:58:54Z,Nit: this comment disappeared?,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174512732,174512732,src/qt/bitcoin.cpp
Sjors,2018-03-14T16:02:47Z,Nice & short :-),https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174514197,174514197,src/interface/node.cpp
Sjors,2018-03-14T16:07:27Z,Since this is inside a `try {} catch` it means exceptions can bubble up through the interface. Would that be useful to document in the interface header? Or should that be obvious?,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174515903,174515903,src/qt/bitcoin.cpp
Sjors,2018-03-14T17:31:49Z,"Tested that this still behaves, i.e. parameters override QT setting.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174545814,174545814,src/qt/optionsmodel.cpp
Sjors,2018-03-14T17:39:27Z,"I didn't test, but refactor looks correct.",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174548381,174548381,src/qt/optionsmodel.cpp
Sjors,2018-03-14T17:59:03Z,Tested that `-version` and `--help` still work,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174555079,174555079,src/qt/bitcoin.cpp
Sjors,2018-03-14T18:04:46Z,"Tested that ""forgetting"" `#ifdef ENABLE_WALLET` around a `handleLoadWallet` call indeed makes the compiler fail, although it may have failed due to something else. The error isn't very clear:\n\n```\nUndefined symbols for architecture x86_64:\n  ""SplashScreen::ConnectWallet(std::__1::unique_ptr<interface::Wallet, std::__1::default_delete<interface::Wallet> >)"", referenced from:\n      std::__",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174557154,174557154,src/interface/node.cpp
Sjors,2018-03-14T18:19:58Z,Tested that IDB progress indicators still work. ,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174562060,174562060,src/interface/node.cpp
Sjors,2018-03-14T18:21:47Z,Tested that network connections count tooltip still works and that I can toggle the connection.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174562642,174562642,src/qt/bitcoingui.cpp
Sjors,2018-03-14T18:22:34Z,Tested that peers tab still shows bytes sent / received per peer.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174562926,174562926,src/interface/node.cpp
Sjors,2018-03-14T18:29:03Z,Tested that I'm able to ban and unban peers in the UI (TIL about that feature).,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174564923,174564923,src/interface/node.cpp
Sjors,2018-03-14T18:32:30Z,Did you mean to do this ban stuff in a82693c0bdda423c23aa607d9c696b9c9aeff7a2? Or is it here because banning from the RPC console interacts with the ban table UI?,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174566010,174566010,src/interface/node.cpp
Sjors,2018-03-14T18:34:28Z,Tested that console autocomplete still works.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174566638,174566638,src/qt/rpcconsole.cpp
Sjors,2018-03-14T20:09:32Z,Has anyone tested a rebased #11383 or #12610 with this?,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174594589,174594589,src/interface/node.cpp
Sjors,2018-03-14T20:30:24Z,I tested encrypting a wallet and using it to send.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174600167,174600167,src/interface/wallet.cpp
Sjors,2018-03-14T20:31:37Z,I tested bumping the fee.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174600477,174600477,src/interface/wallet.cpp
Sjors,2018-03-14T20:33:49Z,I tested abandoning a transaction (after bumping it),https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174601016,174601016,src/interface/wallet.cpp
Sjors,2018-03-14T20:36:36Z,I didn't check any of the watch-only and isMine stuff.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174601760,174601760,src/interface/wallet.cpp
Sjors,2018-03-14T20:39:49Z,Are you sure this is correct? Not sure how `::nTxConfirmTarget` relates to `getDefaultConfirmTarget`,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174602673,174602673,src/qt/sendcoinsdialog.cpp
Sjors,2018-03-14T20:43:13Z,Why is `_6` dropped here?,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174603633,174603633,src/qt/walletmodel.cpp
Sjors,2018-03-14T20:47:08Z,Tested using and deleting entries from address book. ,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174604661,174604661,src/interface/wallet.cpp
Sjors,2018-03-14T20:49:54Z,Lightly tested BIP-21 URI.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174605401,174605401,src/qt/bitcoin.cpp
ryanofsky,2018-03-15T21:06:29Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174557154\n\nIn commit ""Remove direct bitcoin calls from qt/splashscreen.cpp""\n\n> The error isn't very clear\n\nThat error isn't directly related to this code. If you disabled the same `#ifdef` on master while still including `wallet/wallet.h` you would see the error. The error is just saying that the code can't be linked because it ",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174932709,174932709,src/interface/node.cpp
ryanofsky,2018-03-15T21:07:24Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174566010\n\nIn commit ""Remove direct bitcoin calls from qt/rpcconsole.cpp""\n\n> Did you mean to do this ban stuff in a82693c? Or is it here because banning from the RPC console interacts with the ban table UI?\n\nThe `ban()` function is only called from `rpcconsole.cpp`, not `bantablemodel.cpp`, and since the changes in this PR are g",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174932937,174932937,src/interface/node.cpp
ryanofsky,2018-03-15T21:07:43Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174594589\n\nIn commit ""Remove most direct bitcoin calls from qt/walletmodel.cpp""\n\n> Has anyone tested a rebased #11383 or #12610 with this?\n\nI assume one of those PRs will be merged before this one, but this PR will work fine with either of them. This PR just replaces `CWallet` references in GUI code with `interface::Wallet` refe",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174933029,174933029,src/interface/node.cpp
ryanofsky,2018-03-15T21:09:18Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174602673\n\nIn commit ""Remove most direct bitcoin calls from qt/walletmodel.cpp""\n\n> Are you sure this is correct? Not sure how ::nTxConfirmTarget relates to getDefaultConfirmTarget\n\nYes, they are the same. Names aren't the same because I wanted the new method name to match the name of the existing global variable:\n\nhttps://gi",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174933464,174933464,src/qt/sendcoinsdialog.cpp
ryanofsky,2018-03-15T21:12:14Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174512732\n\nIn commit ""Remove direct bitcoin calls from qt/bitcoin.cpp""\n\n> Nit: this comment disappeared?\n\n `BitcoinCore::baseInitialize` is replaced by `Node::baseInitialize` and I don't think it's helpful to mention gui threads in comments outside of the gui code, so the comment is different there. I could add a comment at the ",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174934207,174934207,src/qt/bitcoin.cpp
ryanofsky,2018-03-15T21:14:08Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174603633\n\nIn commit ""Remove most direct bitcoin calls from qt/walletmodel.cpp""\n\n> Why is _6 dropped here?\n\nThe signature of `NotifyAddressBookChanged` is changed above. Instead of receiving both `WalletModel` and `CWallet` pointers, it now only receives a `WalletModel` pointer, which wraps access to the underlying wallet:\n\n",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174934730,174934730,src/qt/walletmodel.cpp
ryanofsky,2018-03-15T21:17:14Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174515903\n\nIn commit ""Remove direct bitcoin calls from qt/bitcoin.cpp""\n\n> Since this is inside a try {} catch it means exceptions can bubble up through the interface. Would that be useful to document in the interface header? Or should that be obvious?\n\nI definitely think it's useful to document when functions may throw specific ",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r174935523,174935523,src/qt/bitcoin.cpp
jamesob,2018-03-26T18:17:42Z,Tested viewing peers and associated node stats via debug window.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177186802,177186802,src/interface/node.cpp
jamesob,2018-03-26T18:19:05Z,Tested banning a peer via Debug window -> Peers.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177187217,177187217,src/interface/node.cpp
jamesob,2018-03-26T18:19:15Z,Tested unbanning a peer via Debug window -> Peers.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177187281,177187281,src/interface/node.cpp
jamesob,2018-03-26T18:19:36Z,Tested disconnecting a peer via Debug window -> Peers.,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177187405,177187405,src/interface/node.cpp
jnewbery,2018-03-27T16:39:28Z,I think this comment is now invalid `Get required locks upfront...`,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177492485,177492485,src/qt/walletmodel.cpp
jnewbery,2018-03-27T16:53:30Z,"Any reason to leave this code block in, now that `LOCK` has been removed? Also, can you just return `m_wallet->changeWalletPassphrase(oldPass, newPass)` rather than have in intermediary bool?",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177496852,177496852,src/qt/walletmodel.cpp
jnewbery,2018-03-27T17:04:53Z,"You no longer need the following includes:\n\n- consensus/validation.h\n- chain.h\n- keystore.h\n- validation.h\n- net.h\n- policy/fees.h\n- policy/rbf.h\n- sync.h\n- ui_interface.h\n- util.h\n- wallet/wallet.h\n- wallet/feebumper.h\n- wallet/walletdb.h\n\nIn fact, there are many headers that no longer need to be included in lots of the qt files. Perhaps worth adding a commit at th",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177500262,177500262,src/qt/walletmodel.cpp
jnewbery,2018-03-27T17:18:04Z,Would it make sense to update the `SetBalance()` functions to take a `WalletBalances` as their arguments?,https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177504284,177504284,src/interface/wallet.h
ryanofsky,2018-03-30T15:38:53Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177504284\n\n> Would it make sense to update the SetBalance() functions to take a WalletBalances as their arguments?\n\nDone in a415fa2845f843db2ceb6512537cbb2e63b5b474",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r178313816,178313816,src/interface/wallet.h
ryanofsky,2018-03-30T15:39:29Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177500262\n\n> You no longer need the following includes:\n\nThanks, ran IWYU in 901ffe77d75e318458dc7544b822181515498265, which got rid of everything you listed except:\n\n```diff\n+#include <ui_interface.h>                 // for ChangeType, CClientUIInterface\n+#include <util.h>                         // for ArgsManager, gArgs\",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r178313918,178313918,src/qt/walletmodel.cpp
ryanofsky,2018-03-30T15:39:37Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177492485\n\n> I think this comment is now invalid Get required locks upfront...\n\nThanks, updated comment in 21af27fce86a7332f61eaa848f1322fd895186e3.\n\n",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r178313950,178313950,src/qt/walletmodel.cpp
ryanofsky,2018-03-30T15:39:44Z,"https://github.com/bitcoin/bitcoin/pull/10244#discussion_r177496852\n\n> Any reason to leave this code block in\n\nCleaned up in b567137579942826a3dd80d0af21b651728f379e",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r178313980,178313980,src/qt/walletmodel.cpp
MarcoFalke,2018-04-04T14:07:16Z,"""wrong"" include guard. Also might want to add the usual (c) header?",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r179152418,179152418,src/interface/wallet.h
ryanofsky,2020-02-12T19:04:19Z,"In commit ""Remove most direct bitcoin calls from qt/walletmodel.cpp"" (a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3)\n\nBug here: `m_node.getNumBlocks()` should have been just `numBlocks`, see #18123",https://github.com/bitcoin/bitcoin/pull/10244#discussion_r378452145,378452145,src/qt/walletmodel.cpp
