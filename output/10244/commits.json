[
  {
    "sha": "ea73b84d2ddde22487dee0f71d7a619051e067f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTczYjg0ZDJkZGRlMjI0ODdkZWUwZjcxZDdhNjE5MDUxZTA2N2Yy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-03-27T20:55:24Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-04-03T15:52:21Z"
      },
      "message": "Add src/interface/README.md",
      "tree": {
        "sha": "faff54b33ffba4d4ce5b3275c3546fcfedb1f6ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faff54b33ffba4d4ce5b3275c3546fcfedb1f6ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea73b84d2ddde22487dee0f71d7a619051e067f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea73b84d2ddde22487dee0f71d7a619051e067f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea73b84d2ddde22487dee0f71d7a619051e067f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea73b84d2ddde22487dee0f71d7a619051e067f2/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad960f5771dc251c8e1198dd8a82e18df4562171",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad960f5771dc251c8e1198dd8a82e18df4562171",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad960f5771dc251c8e1198dd8a82e18df4562171"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e93b91d23ceadcc929bd720a5a612cf10aec845e",
        "filename": "src/interface/README.md",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea73b84d2ddde22487dee0f71d7a619051e067f2/src/interface/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea73b84d2ddde22487dee0f71d7a619051e067f2/src/interface/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/README.md?ref=ea73b84d2ddde22487dee0f71d7a619051e067f2",
        "patch": "@@ -0,0 +1,17 @@\n+# Internal c++ interfaces\n+\n+The following interfaces are defined here:\n+\n+* [`Chain`](chain.h) \u2014 used by wallet to access blockchain and mempool state. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n+\n+* [`Chain::Client`](chain.h) \u2014 used by node to start & stop `Chain` clients. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n+\n+* [`Node`](node.h) \u2014 used by GUI to start & stop bitcoin node. Added in [#10244](https://github.com/bitcoin/bitcoin/pull/10244).\n+\n+* [`Wallet`](wallet.h) \u2014 used by GUI to access wallets. Added in [#10244](https://github.com/bitcoin/bitcoin/pull/10244).\n+\n+* [`Handler`](handler.h) \u2014 returned by `handleEvent` methods on interfaces above and used to manage lifetimes of event handlers.\n+\n+* [`Init`](init.h) \u2014 used by multiprocess code to access interfaces above on startup. Added in [#10102](https://github.com/bitcoin/bitcoin/pull/10102).\n+\n+The interfaces above define boundaries between major components of bitcoin code (node, wallet, and gui), making it possible for them to run in different processes, and be tested, developed, and understood independently. These interfaces are not currently designed to be stable or to be used externally."
      }
    ]
  },
  {
    "sha": "71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWUwZDkwODc2ZWZkMTFlMmE0YWViOGYzZjgwNmM1YTFmZDU0YjQy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T17:55:43Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:37Z"
      },
      "message": "Remove direct bitcoin calls from qt/bitcoin.cpp",
      "tree": {
        "sha": "aef29169f36cb553e07ab75f27dbe87100ef0748",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aef29169f36cb553e07ab75f27dbe87100ef0748"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea73b84d2ddde22487dee0f71d7a619051e067f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea73b84d2ddde22487dee0f71d7a619051e067f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea73b84d2ddde22487dee0f71d7a619051e067f2"
      }
    ],
    "stats": {
      "total": 262,
      "additions": 215,
      "deletions": 47
    },
    "files": [
      {
        "sha": "affafaa5f9bb18d2b2e08c45a9b6101dc25d5699",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
        "patch": "@@ -104,6 +104,8 @@ BITCOIN_CORE_H = \\\n   httpserver.h \\\n   indirectmap.h \\\n   init.h \\\n+  interface/handler.h \\\n+  interface/node.h \\\n   key.h \\\n   key_io.h \\\n   keystore.h \\\n@@ -357,6 +359,8 @@ libbitcoin_util_a_SOURCES = \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\\n   fs.cpp \\\n+  interface/handler.cpp \\\n+  interface/node.cpp \\\n   random.cpp \\\n   rpc/protocol.cpp \\\n   rpc/util.cpp \\"
      },
      {
        "sha": "4b27f374f44d893ba9bd170807d162b920dab709",
        "filename": "src/interface/handler.cpp",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/interface/handler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/interface/handler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/handler.cpp?ref=71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interface/handler.h>\n+\n+#include <util.h>\n+\n+#include <boost/signals2/connection.hpp>\n+#include <memory>\n+#include <utility>\n+\n+namespace interface {\n+namespace {\n+\n+class HandlerImpl : public Handler\n+{\n+public:\n+    HandlerImpl(boost::signals2::connection connection) : m_connection(std::move(connection)) {}\n+\n+    void disconnect() override { m_connection.disconnect(); }\n+\n+    boost::signals2::scoped_connection m_connection;\n+};\n+\n+} // namespace\n+\n+std::unique_ptr<Handler> MakeHandler(boost::signals2::connection connection)\n+{\n+    return MakeUnique<HandlerImpl>(std::move(connection));\n+}\n+\n+} // namespace interface"
      },
      {
        "sha": "a76334bfbf0f2155b0973dd376dc83c4415b345d",
        "filename": "src/interface/handler.h",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/interface/handler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/interface/handler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/handler.h?ref=71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACE_HANDLER_H\n+#define BITCOIN_INTERFACE_HANDLER_H\n+\n+#include <memory>\n+\n+namespace boost {\n+namespace signals2 {\n+class connection;\n+} // namespace signals2\n+} // namespace boost\n+\n+namespace interface {\n+\n+//! Generic interface for managing an event handler or callback function\n+//! registered with another interface. Has a single disconnect method to cancel\n+//! the registration and prevent any future notifications.\n+class Handler\n+{\n+public:\n+    virtual ~Handler() {}\n+\n+    //! Disconnect the handler.\n+    virtual void disconnect() = 0;\n+};\n+\n+//! Return handler wrapping a boost signal connection.\n+std::unique_ptr<Handler> MakeHandler(boost::signals2::connection connection);\n+\n+} // namespace interface\n+\n+#endif // BITCOIN_INTERFACE_HANDLER_H"
      },
      {
        "sha": "4e3fa6ceb944b88ffeb6613ff5e83e148fac9d73",
        "filename": "src/interface/node.cpp",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interface/node.h>\n+\n+#include <chainparams.h>\n+#include <init.h>\n+#include <interface/handler.h>\n+#include <scheduler.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <warnings.h>\n+\n+#include <boost/thread/thread.hpp>\n+\n+namespace interface {\n+namespace {\n+\n+class NodeImpl : public Node\n+{\n+    void parseParameters(int argc, const char* const argv[]) override\n+    {\n+        gArgs.ParseParameters(argc, argv);\n+    }\n+    void readConfigFile(const std::string& conf_path) override { gArgs.ReadConfigFile(conf_path); }\n+    void selectParams(const std::string& network) override { SelectParams(network); }\n+    void initLogging() override { InitLogging(); }\n+    void initParameterInteraction() override { InitParameterInteraction(); }\n+    std::string getWarnings(const std::string& type) override { return GetWarnings(type); }\n+    bool baseInitialize() override\n+    {\n+        return AppInitBasicSetup() && AppInitParameterInteraction() && AppInitSanityChecks() &&\n+               AppInitLockDataDirectory();\n+    }\n+    bool appInitMain() override { return AppInitMain(); }\n+    void appShutdown() override\n+    {\n+        Interrupt();\n+        Shutdown();\n+    }\n+    void startShutdown() override { StartShutdown(); }\n+    std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.InitMessage.connect(fn));\n+    }\n+};\n+\n+} // namespace\n+\n+std::unique_ptr<Node> MakeNode() { return MakeUnique<NodeImpl>(); }\n+\n+} // namespace interface"
      },
      {
        "sha": "b69ef160a39f7d4738e18b771967f874c5c65ed9",
        "filename": "src/interface/node.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACE_NODE_H\n+#define BITCOIN_INTERFACE_NODE_H\n+\n+#include <functional>\n+#include <memory>\n+#include <string>\n+\n+namespace interface {\n+\n+class Handler;\n+\n+//! Top-level interface for a bitcoin node (bitcoind process).\n+class Node\n+{\n+public:\n+    virtual ~Node() {}\n+\n+    //! Set command line arguments.\n+    virtual void parseParameters(int argc, const char* const argv[]) = 0;\n+\n+    //! Load settings from configuration file.\n+    virtual void readConfigFile(const std::string& conf_path) = 0;\n+\n+    //! Choose network parameters.\n+    virtual void selectParams(const std::string& network) = 0;\n+\n+    //! Init logging.\n+    virtual void initLogging() = 0;\n+\n+    //! Init parameter interaction.\n+    virtual void initParameterInteraction() = 0;\n+\n+    //! Get warnings.\n+    virtual std::string getWarnings(const std::string& type) = 0;\n+\n+    //! Initialize app dependencies.\n+    virtual bool baseInitialize() = 0;\n+\n+    //! Start node.\n+    virtual bool appInitMain() = 0;\n+\n+    //! Stop node.\n+    virtual void appShutdown() = 0;\n+\n+    //! Start shutdown.\n+    virtual void startShutdown() = 0;\n+\n+    //! Register handler for init messages.\n+    using InitMessageFn = std::function<void(const std::string& message)>;\n+    virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;\n+};\n+\n+//! Return implementation of Node interface.\n+std::unique_ptr<Node> MakeNode();\n+\n+} // namespace interface\n+\n+#endif // BITCOIN_INTERFACE_NODE_H"
      },
      {
        "sha": "4ab5a891e356382f91f12d1470d0f8f1d4b38d95",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 47,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
        "patch": "@@ -27,6 +27,8 @@\n #endif\n \n #include <init.h>\n+#include <interface/handler.h>\n+#include <interface/node.h>\n #include <rpc/server.h>\n #include <ui_interface.h>\n #include <uint256.h>\n@@ -180,11 +182,7 @@ class BitcoinCore: public QObject\n {\n     Q_OBJECT\n public:\n-    explicit BitcoinCore();\n-    /** Basic initialization, before starting initialization/shutdown thread.\n-     * Return true on success.\n-     */\n-    static bool baseInitialize();\n+    explicit BitcoinCore(interface::Node& node);\n \n public Q_SLOTS:\n     void initialize();\n@@ -196,17 +194,18 @@ public Q_SLOTS:\n     void runawayException(const QString &message);\n \n private:\n-\n     /// Pass fatal exception message to UI thread\n     void handleRunawayException(const std::exception *e);\n+\n+    interface::Node& m_node;\n };\n \n /** Main Bitcoin application object */\n class BitcoinApplication: public QApplication\n {\n     Q_OBJECT\n public:\n-    explicit BitcoinApplication(int &argc, char **argv);\n+    explicit BitcoinApplication(interface::Node& node, int &argc, char **argv);\n     ~BitcoinApplication();\n \n #ifdef ENABLE_WALLET\n@@ -247,6 +246,7 @@ public Q_SLOTS:\n \n private:\n     QThread *coreThread;\n+    interface::Node& m_node;\n     OptionsModel *optionsModel;\n     ClientModel *clientModel;\n     BitcoinGUI *window;\n@@ -264,44 +264,23 @@ public Q_SLOTS:\n \n #include <qt/bitcoin.moc>\n \n-BitcoinCore::BitcoinCore():\n-    QObject()\n+BitcoinCore::BitcoinCore(interface::Node& node) :\n+    QObject(), m_node(node)\n {\n }\n \n void BitcoinCore::handleRunawayException(const std::exception *e)\n {\n     PrintExceptionContinue(e, \"Runaway exception\");\n-    Q_EMIT runawayException(QString::fromStdString(GetWarnings(\"gui\")));\n-}\n-\n-bool BitcoinCore::baseInitialize()\n-{\n-    if (!AppInitBasicSetup())\n-    {\n-        return false;\n-    }\n-    if (!AppInitParameterInteraction())\n-    {\n-        return false;\n-    }\n-    if (!AppInitSanityChecks())\n-    {\n-        return false;\n-    }\n-    if (!AppInitLockDataDirectory())\n-    {\n-        return false;\n-    }\n-    return true;\n+    Q_EMIT runawayException(QString::fromStdString(m_node.getWarnings(\"gui\")));\n }\n \n void BitcoinCore::initialize()\n {\n     try\n     {\n         qDebug() << __func__ << \": Running initialization in thread\";\n-        bool rv = AppInitMain();\n+        bool rv = m_node.appInitMain();\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n@@ -315,8 +294,7 @@ void BitcoinCore::shutdown()\n     try\n     {\n         qDebug() << __func__ << \": Running Shutdown in thread\";\n-        Interrupt();\n-        Shutdown();\n+        m_node.appShutdown();\n         qDebug() << __func__ << \": Shutdown finished\";\n         Q_EMIT shutdownResult();\n     } catch (const std::exception& e) {\n@@ -326,9 +304,10 @@ void BitcoinCore::shutdown()\n     }\n }\n \n-BitcoinApplication::BitcoinApplication(int &argc, char **argv):\n+BitcoinApplication::BitcoinApplication(interface::Node& node, int &argc, char **argv):\n     QApplication(argc, argv),\n     coreThread(0),\n+    m_node(node),\n     optionsModel(0),\n     clientModel(0),\n     window(0),\n@@ -409,7 +388,7 @@ void BitcoinApplication::startThread()\n     if(coreThread)\n         return;\n     coreThread = new QThread(this);\n-    BitcoinCore *executor = new BitcoinCore();\n+    BitcoinCore *executor = new BitcoinCore(m_node);\n     executor->moveToThread(coreThread);\n \n     /*  communication to and from thread */\n@@ -427,8 +406,8 @@ void BitcoinApplication::startThread()\n \n void BitcoinApplication::parameterSetup()\n {\n-    InitLogging();\n-    InitParameterInteraction();\n+    m_node.initLogging();\n+    m_node.initParameterInteraction();\n }\n \n void BitcoinApplication::requestInitialize()\n@@ -461,7 +440,7 @@ void BitcoinApplication::requestShutdown()\n     delete clientModel;\n     clientModel = 0;\n \n-    StartShutdown();\n+    m_node.startShutdown();\n \n     // Request shutdown from core thread\n     Q_EMIT requestedShutdown();\n@@ -555,9 +534,11 @@ int main(int argc, char *argv[])\n {\n     SetupEnvironment();\n \n+    std::unique_ptr<interface::Node> node = interface::MakeNode();\n+\n     /// 1. Parse command-line options. These take precedence over anything else.\n     // Command-line options take precedence:\n-    gArgs.ParseParameters(argc, argv);\n+    node->parseParameters(argc, argv);\n \n     // Do not refer to data directory yet, this can be overridden by Intro::pickDataDirectory\n \n@@ -571,7 +552,7 @@ int main(int argc, char *argv[])\n     Q_INIT_RESOURCE(bitcoin);\n     Q_INIT_RESOURCE(bitcoin_locale);\n \n-    BitcoinApplication app(argc, argv);\n+    BitcoinApplication app(*node, argc, argv);\n #if QT_VERSION > 0x050100\n     // Generate high-dpi pixmaps\n     QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);\n@@ -633,7 +614,7 @@ int main(int argc, char *argv[])\n         return EXIT_FAILURE;\n     }\n     try {\n-        gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+        node->readConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     } catch (const std::exception& e) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));\n@@ -648,7 +629,7 @@ int main(int argc, char *argv[])\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n-        SelectParams(ChainNameFromCommandLine());\n+        node->selectParams(ChainNameFromCommandLine());\n     } catch(std::exception &e) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME), QObject::tr(\"Error: %1\").arg(e.what()));\n         return EXIT_FAILURE;\n@@ -705,7 +686,7 @@ int main(int argc, char *argv[])\n     app.createOptionsModel(gArgs.GetBoolArg(\"-resetguisettings\", false));\n \n     // Subscribe to global signals from core\n-    uiInterface.InitMessage.connect(InitMessage);\n+    std::unique_ptr<interface::Handler> handler = node->handleInitMessage(InitMessage);\n \n     if (gArgs.GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !gArgs.GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n@@ -717,7 +698,7 @@ int main(int argc, char *argv[])\n         // Perform base initialization before spinning up initialization/shutdown thread\n         // This is acceptable because this function only contains steps that are quick to execute,\n         // so the GUI thread won't be held up.\n-        if (BitcoinCore::baseInitialize()) {\n+        if (node->baseInitialize()) {\n             app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n             WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n@@ -732,10 +713,10 @@ int main(int argc, char *argv[])\n         }\n     } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"Runaway exception\");\n-        app.handleRunawayException(QString::fromStdString(GetWarnings(\"gui\")));\n+        app.handleRunawayException(QString::fromStdString(node->getWarnings(\"gui\")));\n     } catch (...) {\n         PrintExceptionContinue(nullptr, \"Runaway exception\");\n-        app.handleRunawayException(QString::fromStdString(GetWarnings(\"gui\")));\n+        app.handleRunawayException(QString::fromStdString(node->getWarnings(\"gui\")));\n     }\n     return rv;\n }"
      }
    ]
  },
  {
    "sha": "c0f2756be517feddacd7c6b89b9faa888b3fef8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGYyNzU2YmU1MTdmZWRkYWNkN2M2Yjg5YjlmYWE4ODhiM2ZlZjhl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T18:23:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/optionsmodel.cpp",
      "tree": {
        "sha": "14986754eac1bc64cf1b409237bc1b6edc85ed26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14986754eac1bc64cf1b409237bc1b6edc85ed26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0f2756be517feddacd7c6b89b9faa888b3fef8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f2756be517feddacd7c6b89b9faa888b3fef8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0f2756be517feddacd7c6b89b9faa888b3fef8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f2756be517feddacd7c6b89b9faa888b3fef8e/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71e0d90876efd11e2a4aeb8f3f806c5a1fd54b42"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 57,
      "deletions": 27
    },
    "files": [
      {
        "sha": "877c5f57a8f0b42958a469555e6d0652d7756173",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=c0f2756be517feddacd7c6b89b9faa888b3fef8e",
        "patch": "@@ -7,6 +7,9 @@\n #include <chainparams.h>\n #include <init.h>\n #include <interface/handler.h>\n+#include <net.h>\n+#include <netaddress.h>\n+#include <netbase.h>\n #include <scheduler.h>\n #include <ui_interface.h>\n #include <util.h>\n@@ -24,6 +27,8 @@ class NodeImpl : public Node\n         gArgs.ParseParameters(argc, argv);\n     }\n     void readConfigFile(const std::string& conf_path) override { gArgs.ReadConfigFile(conf_path); }\n+    bool softSetArg(const std::string& arg, const std::string& value) override { return gArgs.SoftSetArg(arg, value); }\n+    bool softSetBoolArg(const std::string& arg, bool value) override { return gArgs.SoftSetBoolArg(arg, value); }\n     void selectParams(const std::string& network) override { SelectParams(network); }\n     void initLogging() override { InitLogging(); }\n     void initParameterInteraction() override { InitParameterInteraction(); }\n@@ -40,6 +45,16 @@ class NodeImpl : public Node\n         Shutdown();\n     }\n     void startShutdown() override { StartShutdown(); }\n+    void mapPort(bool use_upnp) override\n+    {\n+        if (use_upnp) {\n+            StartMapPort();\n+        } else {\n+            InterruptMapPort();\n+            StopMapPort();\n+        }\n+    }\n+    bool getProxy(Network net, proxyType& proxy_info) override { return GetProxy(net, proxy_info); }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {\n         return MakeHandler(::uiInterface.InitMessage.connect(fn));"
      },
      {
        "sha": "368bade28b74dbebb7fb092515f1a89ed7e91610",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=c0f2756be517feddacd7c6b89b9faa888b3fef8e",
        "patch": "@@ -5,10 +5,14 @@\n #ifndef BITCOIN_INTERFACE_NODE_H\n #define BITCOIN_INTERFACE_NODE_H\n \n+#include <netaddress.h> // For Network\n+\n #include <functional>\n #include <memory>\n #include <string>\n \n+class proxyType;\n+\n namespace interface {\n \n class Handler;\n@@ -22,6 +26,12 @@ class Node\n     //! Set command line arguments.\n     virtual void parseParameters(int argc, const char* const argv[]) = 0;\n \n+    //! Set a command line argument if it doesn't already have a value\n+    virtual bool softSetArg(const std::string& arg, const std::string& value) = 0;\n+\n+    //! Set a command line boolean argument if it doesn't already have a value\n+    virtual bool softSetBoolArg(const std::string& arg, bool value) = 0;\n+\n     //! Load settings from configuration file.\n     virtual void readConfigFile(const std::string& conf_path) = 0;\n \n@@ -49,6 +59,12 @@ class Node\n     //! Start shutdown.\n     virtual void startShutdown() = 0;\n \n+    //! Map port.\n+    virtual void mapPort(bool use_upnp) = 0;\n+\n+    //! Get proxy.\n+    virtual bool getProxy(Network net, proxyType& proxy_info) = 0;\n+\n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;\n     virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;"
      },
      {
        "sha": "3cce9d9bf6b58f5ff1c7b45f92719cd009b36703",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=c0f2756be517feddacd7c6b89b9faa888b3fef8e",
        "patch": "@@ -362,7 +362,7 @@ void BitcoinApplication::createPaymentServer()\n \n void BitcoinApplication::createOptionsModel(bool resetSettings)\n {\n-    optionsModel = new OptionsModel(nullptr, resetSettings);\n+    optionsModel = new OptionsModel(m_node, nullptr, resetSettings);\n }\n \n void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)"
      },
      {
        "sha": "d8197b6ec672db96b2db0988404c5cc2c2ae1663",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 23,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=c0f2756be517feddacd7c6b89b9faa888b3fef8e",
        "patch": "@@ -11,26 +11,21 @@\n #include <qt/bitcoinunits.h>\n #include <qt/guiutil.h>\n \n-#include <init.h>\n+#include <interface/node.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n #include <net.h>\n #include <netbase.h>\n #include <txdb.h> // for -dbcache defaults\n #include <qt/intro.h>\n \n-#ifdef ENABLE_WALLET\n-#include <wallet/wallet.h>\n-#include <wallet/walletdb.h>\n-#endif\n-\n #include <QNetworkProxy>\n #include <QSettings>\n #include <QStringList>\n \n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+OptionsModel::OptionsModel(interface::Node& node, QObject *parent, bool resetSettings) :\n+    QAbstractListModel(parent), m_node(node)\n {\n     Init(resetSettings);\n }\n@@ -93,12 +88,12 @@ void OptionsModel::Init(bool resetSettings)\n     // Main\n     if (!settings.contains(\"nDatabaseCache\"))\n         settings.setValue(\"nDatabaseCache\", (qint64)nDefaultDbCache);\n-    if (!gArgs.SoftSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString()))\n+    if (!m_node.softSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString()))\n         addOverriddenOption(\"-dbcache\");\n \n     if (!settings.contains(\"nThreadsScriptVerif\"))\n         settings.setValue(\"nThreadsScriptVerif\", DEFAULT_SCRIPTCHECK_THREADS);\n-    if (!gArgs.SoftSetArg(\"-par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString()))\n+    if (!m_node.softSetArg(\"-par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString()))\n         addOverriddenOption(\"-par\");\n \n     if (!settings.contains(\"strDataDir\"))\n@@ -108,27 +103,27 @@ void OptionsModel::Init(bool resetSettings)\n #ifdef ENABLE_WALLET\n     if (!settings.contains(\"bSpendZeroConfChange\"))\n         settings.setValue(\"bSpendZeroConfChange\", true);\n-    if (!gArgs.SoftSetBoolArg(\"-spendzeroconfchange\", settings.value(\"bSpendZeroConfChange\").toBool()))\n+    if (!m_node.softSetBoolArg(\"-spendzeroconfchange\", settings.value(\"bSpendZeroConfChange\").toBool()))\n         addOverriddenOption(\"-spendzeroconfchange\");\n #endif\n \n     // Network\n     if (!settings.contains(\"fUseUPnP\"))\n         settings.setValue(\"fUseUPnP\", DEFAULT_UPNP);\n-    if (!gArgs.SoftSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool()))\n+    if (!m_node.softSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool()))\n         addOverriddenOption(\"-upnp\");\n \n     if (!settings.contains(\"fListen\"))\n         settings.setValue(\"fListen\", DEFAULT_LISTEN);\n-    if (!gArgs.SoftSetBoolArg(\"-listen\", settings.value(\"fListen\").toBool()))\n+    if (!m_node.softSetBoolArg(\"-listen\", settings.value(\"fListen\").toBool()))\n         addOverriddenOption(\"-listen\");\n \n     if (!settings.contains(\"fUseProxy\"))\n         settings.setValue(\"fUseProxy\", false);\n     if (!settings.contains(\"addrProxy\"))\n         settings.setValue(\"addrProxy\", QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST, DEFAULT_GUI_PROXY_PORT));\n     // Only try to set -proxy, if user has enabled fUseProxy\n-    if (settings.value(\"fUseProxy\").toBool() && !gArgs.SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n+    if (settings.value(\"fUseProxy\").toBool() && !m_node.softSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n         addOverriddenOption(\"-proxy\");\n     else if(!settings.value(\"fUseProxy\").toBool() && !gArgs.GetArg(\"-proxy\", \"\").empty())\n         addOverriddenOption(\"-proxy\");\n@@ -138,15 +133,15 @@ void OptionsModel::Init(bool resetSettings)\n     if (!settings.contains(\"addrSeparateProxyTor\"))\n         settings.setValue(\"addrSeparateProxyTor\", QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST, DEFAULT_GUI_PROXY_PORT));\n     // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n-    if (settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n+    if (settings.value(\"fUseSeparateProxyTor\").toBool() && !m_node.softSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n         addOverriddenOption(\"-onion\");\n     else if(!settings.value(\"fUseSeparateProxyTor\").toBool() && !gArgs.GetArg(\"-onion\", \"\").empty())\n         addOverriddenOption(\"-onion\");\n \n     // Display\n     if (!settings.contains(\"language\"))\n         settings.setValue(\"language\", \"\");\n-    if (!gArgs.SoftSetArg(\"-lang\", settings.value(\"language\").toString().toStdString()))\n+    if (!m_node.softSetArg(\"-lang\", settings.value(\"language\").toString().toStdString()))\n         addOverriddenOption(\"-lang\");\n \n     language = settings.value(\"language\").toString();\n@@ -315,12 +310,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             break;\n         case MapPortUPnP: // core option - can be changed on-the-fly\n             settings.setValue(\"fUseUPnP\", value.toBool());\n-            if (value.toBool()) {\n-                StartMapPort();\n-            } else {\n-                InterruptMapPort();\n-                StopMapPort();\n-            }\n+            m_node.mapPort(value.toBool());\n             break;\n         case MinimizeOnClose:\n             fMinimizeOnClose = value.toBool();\n@@ -453,7 +443,7 @@ bool OptionsModel::getProxySettings(QNetworkProxy& proxy) const\n     // Directly query current base proxy, because\n     // GUI settings can be overridden with -proxy.\n     proxyType curProxy;\n-    if (GetProxy(NET_IPV4, curProxy)) {\n+    if (m_node.getProxy(NET_IPV4, curProxy)) {\n         proxy.setType(QNetworkProxy::Socks5Proxy);\n         proxy.setHostName(QString::fromStdString(curProxy.proxy.ToStringIP()));\n         proxy.setPort(curProxy.proxy.GetPort());"
      },
      {
        "sha": "1d6bc19475105336861dbf930def16c001ea1851",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=c0f2756be517feddacd7c6b89b9faa888b3fef8e",
        "patch": "@@ -9,6 +9,10 @@\n \n #include <QAbstractListModel>\n \n+namespace interface {\n+class Node;\n+}\n+\n QT_BEGIN_NAMESPACE\n class QNetworkProxy;\n QT_END_NAMESPACE\n@@ -27,7 +31,7 @@ class OptionsModel : public QAbstractListModel\n     Q_OBJECT\n \n public:\n-    explicit OptionsModel(QObject *parent = 0, bool resetSettings = false);\n+    explicit OptionsModel(interface::Node& node, QObject *parent = 0, bool resetSettings = false);\n \n     enum OptionID {\n         StartAtStartup,         // bool\n@@ -76,6 +80,7 @@ class OptionsModel : public QAbstractListModel\n     bool isRestartRequired() const;\n \n private:\n+    interface::Node& m_node;\n     /* Qt-only settings */\n     bool fHideTrayIcon;\n     bool fMinimizeToTray;"
      },
      {
        "sha": "dce32e01ba03134b6c91bd81ac6d6e475fe9117d",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=c0f2756be517feddacd7c6b89b9faa888b3fef8e",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <amount.h>\n #include <chainparams.h>\n+#include <interface/node.h>\n #include <random.h>\n #include <script/script.h>\n #include <script/standard.h>\n@@ -66,7 +67,8 @@ static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsig\n void PaymentServerTests::paymentServerTests()\n {\n     SelectParams(CBaseChainParams::MAIN);\n-    OptionsModel optionsModel;\n+    auto node = interface::MakeNode();\n+    OptionsModel optionsModel(*node);\n     PaymentServer* server = new PaymentServer(nullptr, false);\n     X509_STORE* caStore = X509_STORE_new();\n     X509_STORE_add_cert(caStore, parse_b64der_cert(caCert1_BASE64));"
      },
      {
        "sha": "ebca4b6499e309bbf52936bde60ff9c01297bd51",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f2756be517feddacd7c6b89b9faa888b3fef8e/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=c0f2756be517feddacd7c6b89b9faa888b3fef8e",
        "patch": "@@ -1,5 +1,6 @@\n #include <qt/test/wallettests.h>\n \n+#include <interface/node.h>\n #include <qt/bitcoinamountfield.h>\n #include <qt/callback.h>\n #include <qt/optionsmodel.h>\n@@ -175,7 +176,8 @@ void TestGUI()\n     std::unique_ptr<const PlatformStyle> platformStyle(PlatformStyle::instantiate(\"other\"));\n     SendCoinsDialog sendCoinsDialog(platformStyle.get());\n     TransactionView transactionView(platformStyle.get());\n-    OptionsModel optionsModel;\n+    auto node = interface::MakeNode();\n+    OptionsModel optionsModel(*node);\n     WalletModel walletModel(platformStyle.get(), &wallet, &optionsModel);\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);"
      }
    ]
  },
  {
    "sha": "3d619e9d3658e36cba4a19a5bed33e5538317b27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDYxOWU5ZDM2NThlMzZjYmE0YTE5YTViZWQzM2U1NTM4MzE3YjI3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T18:33:47Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/bitcoingui.cpp",
      "tree": {
        "sha": "5d4767f191928188fae2dc82c630da52a9cf1f28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d4767f191928188fae2dc82c630da52a9cf1f28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d619e9d3658e36cba4a19a5bed33e5538317b27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d619e9d3658e36cba4a19a5bed33e5538317b27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d619e9d3658e36cba4a19a5bed33e5538317b27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d619e9d3658e36cba4a19a5bed33e5538317b27/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0f2756be517feddacd7c6b89b9faa888b3fef8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f2756be517feddacd7c6b89b9faa888b3fef8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0f2756be517feddacd7c6b89b9faa888b3fef8e"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 45,
      "deletions": 8
    },
    "files": [
      {
        "sha": "7bfe79ed504498cb62b59878209c1df12d8e6abd",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d619e9d3658e36cba4a19a5bed33e5538317b27/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d619e9d3658e36cba4a19a5bed33e5538317b27/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=3d619e9d3658e36cba4a19a5bed33e5538317b27",
        "patch": "@@ -45,6 +45,7 @@ class NodeImpl : public Node\n         Shutdown();\n     }\n     void startShutdown() override { StartShutdown(); }\n+    bool shutdownRequested() override { return ShutdownRequested(); }\n     void mapPort(bool use_upnp) override\n     {\n         if (use_upnp) {\n@@ -59,6 +60,14 @@ class NodeImpl : public Node\n     {\n         return MakeHandler(::uiInterface.InitMessage.connect(fn));\n     }\n+    std::unique_ptr<Handler> handleMessageBox(MessageBoxFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.ThreadSafeMessageBox.connect(fn));\n+    }\n+    std::unique_ptr<Handler> handleQuestion(QuestionFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.ThreadSafeQuestion.connect(fn));\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "00304cce24990b516dd3e7316382787737d9efc5",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d619e9d3658e36cba4a19a5bed33e5538317b27/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d619e9d3658e36cba4a19a5bed33e5538317b27/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=3d619e9d3658e36cba4a19a5bed33e5538317b27",
        "patch": "@@ -59,6 +59,9 @@ class Node\n     //! Start shutdown.\n     virtual void startShutdown() = 0;\n \n+    //! Return whether shutdown was requested.\n+    virtual bool shutdownRequested() = 0;\n+\n     //! Map port.\n     virtual void mapPort(bool use_upnp) = 0;\n \n@@ -68,6 +71,18 @@ class Node\n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;\n     virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;\n+\n+    //! Register handler for message box messages.\n+    using MessageBoxFn =\n+        std::function<bool(const std::string& message, const std::string& caption, unsigned int style)>;\n+    virtual std::unique_ptr<Handler> handleMessageBox(MessageBoxFn fn) = 0;\n+\n+    //! Register handler for question messages.\n+    using QuestionFn = std::function<bool(const std::string& message,\n+        const std::string& non_interactive_message,\n+        const std::string& caption,\n+        unsigned int style)>;\n+    virtual std::unique_ptr<Handler> handleQuestion(QuestionFn fn) = 0;\n };\n \n //! Return implementation of Node interface."
      },
      {
        "sha": "aad276fd1dc26929f512b70f7382a5e65d1c6082",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d619e9d3658e36cba4a19a5bed33e5538317b27/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d619e9d3658e36cba4a19a5bed33e5538317b27/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3d619e9d3658e36cba4a19a5bed33e5538317b27",
        "patch": "@@ -367,7 +367,7 @@ void BitcoinApplication::createOptionsModel(bool resetSettings)\n \n void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n {\n-    window = new BitcoinGUI(platformStyle, networkStyle, 0);\n+    window = new BitcoinGUI(m_node, platformStyle, networkStyle, 0);\n \n     pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));"
      },
      {
        "sha": "5e590ec7d2aca8625b9f0109870e12a8228f19a0",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d619e9d3658e36cba4a19a5bed33e5538317b27/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d619e9d3658e36cba4a19a5bed33e5538317b27/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=3d619e9d3658e36cba4a19a5bed33e5538317b27",
        "patch": "@@ -30,6 +30,8 @@\n \n #include <chainparams.h>\n #include <init.h>\n+#include <interface/handler.h>\n+#include <interface/node.h>\n #include <ui_interface.h>\n #include <util.h>\n \n@@ -72,9 +74,10 @@ const std::string BitcoinGUI::DEFAULT_UIPLATFORM =\n #endif\n         ;\n \n-BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :\n+BitcoinGUI::BitcoinGUI(interface::Node& node, const PlatformStyle *_platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :\n     QMainWindow(parent),\n     enableWallet(false),\n+    m_node(node),\n     clientModel(0),\n     walletFrame(0),\n     unitDisplayControl(0),\n@@ -1149,7 +1152,7 @@ void BitcoinGUI::toggleHidden()\n \n void BitcoinGUI::detectShutdown()\n {\n-    if (ShutdownRequested())\n+    if (m_node.shutdownRequested())\n     {\n         if(rpcConsole)\n             rpcConsole->hide();\n@@ -1214,15 +1217,15 @@ static bool ThreadSafeMessageBox(BitcoinGUI *gui, const std::string& message, co\n void BitcoinGUI::subscribeToCoreSignals()\n {\n     // Connect signals to client\n-    uiInterface.ThreadSafeMessageBox.connect(boost::bind(ThreadSafeMessageBox, this, _1, _2, _3));\n-    uiInterface.ThreadSafeQuestion.connect(boost::bind(ThreadSafeMessageBox, this, _1, _3, _4));\n+    m_handler_message_box = m_node.handleMessageBox(boost::bind(ThreadSafeMessageBox, this, _1, _2, _3));\n+    m_handler_question = m_node.handleQuestion(boost::bind(ThreadSafeMessageBox, this, _1, _3, _4));\n }\n \n void BitcoinGUI::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from client\n-    uiInterface.ThreadSafeMessageBox.disconnect(boost::bind(ThreadSafeMessageBox, this, _1, _2, _3));\n-    uiInterface.ThreadSafeQuestion.disconnect(boost::bind(ThreadSafeMessageBox, this, _1, _3, _4));\n+    m_handler_message_box->disconnect();\n+    m_handler_question->disconnect();\n }\n \n void BitcoinGUI::toggleNetworkActive()"
      },
      {
        "sha": "3a4b25d80472a61d00b8040c7eb03c73d8c803bb",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d619e9d3658e36cba4a19a5bed33e5538317b27/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d619e9d3658e36cba4a19a5bed33e5538317b27/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=3d619e9d3658e36cba4a19a5bed33e5538317b27",
        "patch": "@@ -18,6 +18,8 @@\n #include <QPoint>\n #include <QSystemTrayIcon>\n \n+#include <memory>\n+\n class ClientModel;\n class NetworkStyle;\n class Notificator;\n@@ -31,6 +33,11 @@ class WalletModel;\n class HelpMessageDialog;\n class ModalOverlay;\n \n+namespace interface {\n+class Handler;\n+class Node;\n+}\n+\n QT_BEGIN_NAMESPACE\n class QAction;\n class QComboBox;\n@@ -49,7 +56,7 @@ class BitcoinGUI : public QMainWindow\n public:\n     static const std::string DEFAULT_UIPLATFORM;\n \n-    explicit BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent = 0);\n+    explicit BitcoinGUI(interface::Node& node, const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent = 0);\n     ~BitcoinGUI();\n \n     /** Set the client model.\n@@ -76,6 +83,9 @@ class BitcoinGUI : public QMainWindow\n     bool eventFilter(QObject *object, QEvent *event);\n \n private:\n+    interface::Node& m_node;\n+    std::unique_ptr<interface::Handler> m_handler_message_box;\n+    std::unique_ptr<interface::Handler> m_handler_question;\n     ClientModel *clientModel;\n     WalletFrame *walletFrame;\n "
      }
    ]
  },
  {
    "sha": "c2f672fb1960399389dea9cdd8f76d7156c2c88b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmY2NzJmYjE5NjAzOTkzODlkZWE5Y2RkOGY3NmQ3MTU2YzJjODhi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T18:40:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/utilitydialog.cpp",
      "tree": {
        "sha": "df6d5a27cc5cbc4281614991c138b33921e6fe1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df6d5a27cc5cbc4281614991c138b33921e6fe1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2f672fb1960399389dea9cdd8f76d7156c2c88b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2f672fb1960399389dea9cdd8f76d7156c2c88b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2f672fb1960399389dea9cdd8f76d7156c2c88b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2f672fb1960399389dea9cdd8f76d7156c2c88b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d619e9d3658e36cba4a19a5bed33e5538317b27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d619e9d3658e36cba4a19a5bed33e5538317b27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d619e9d3658e36cba4a19a5bed33e5538317b27"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 16,
      "deletions": 6
    },
    "files": [
      {
        "sha": "43bdfbaebc9bdf0c0e236a69ebf4ee15e2deb1e7",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=c2f672fb1960399389dea9cdd8f76d7156c2c88b",
        "patch": "@@ -55,6 +55,7 @@ class NodeImpl : public Node\n             StopMapPort();\n         }\n     }\n+    std::string helpMessage(HelpMessageMode mode) override { return HelpMessage(mode); }\n     bool getProxy(Network net, proxyType& proxy_info) override { return GetProxy(net, proxy_info); }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {"
      },
      {
        "sha": "60ef9cce1b19e8775bbe1a4cc3643d29442ee91d",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=c2f672fb1960399389dea9cdd8f76d7156c2c88b",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_INTERFACE_NODE_H\n #define BITCOIN_INTERFACE_NODE_H\n \n+#include <init.h>       // For HelpMessageMode\n #include <netaddress.h> // For Network\n \n #include <functional>\n@@ -62,6 +63,9 @@ class Node\n     //! Return whether shutdown was requested.\n     virtual bool shutdownRequested() = 0;\n \n+    //! Get help message string.\n+    virtual std::string helpMessage(HelpMessageMode mode) = 0;\n+\n     //! Map port.\n     virtual void mapPort(bool use_upnp) = 0;\n "
      },
      {
        "sha": "8ccdaff651eedd9540907fe3827e980836f0af68",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=c2f672fb1960399389dea9cdd8f76d7156c2c88b",
        "patch": "@@ -595,7 +595,7 @@ int main(int argc, char *argv[])\n     // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n     // but before showing splash screen.\n     if (HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n-        HelpMessageDialog help(nullptr, gArgs.IsArgSet(\"-version\"));\n+        HelpMessageDialog help(*node, nullptr, gArgs.IsArgSet(\"-version\"));\n         help.showOrPrint();\n         return EXIT_SUCCESS;\n     }"
      },
      {
        "sha": "b07ff230fd09c16d57f2a503a9fa80db7ec36594",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=c2f672fb1960399389dea9cdd8f76d7156c2c88b",
        "patch": "@@ -153,7 +153,7 @@ BitcoinGUI::BitcoinGUI(interface::Node& node, const PlatformStyle *_platformStyl\n #endif\n \n     rpcConsole = new RPCConsole(_platformStyle, 0);\n-    helpMessageDialog = new HelpMessageDialog(this, false);\n+    helpMessageDialog = new HelpMessageDialog(node, this, false);\n #ifdef ENABLE_WALLET\n     if(enableWallet)\n     {\n@@ -668,7 +668,7 @@ void BitcoinGUI::aboutClicked()\n     if(!clientModel)\n         return;\n \n-    HelpMessageDialog dlg(this, true);\n+    HelpMessageDialog dlg(m_node, this, true);\n     dlg.exec();\n }\n "
      },
      {
        "sha": "6114ea0de12c7f55dc9cd21d6de8002d882e52a4",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=c2f672fb1960399389dea9cdd8f76d7156c2c88b",
        "patch": "@@ -19,6 +19,7 @@\n \n #include <clientversion.h>\n #include <init.h>\n+#include <interface/node.h>\n #include <util.h>\n \n #include <stdio.h>\n@@ -31,7 +32,7 @@\n #include <QVBoxLayout>\n \n /** \"Help message\" or \"About\" dialog box */\n-HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n+HelpMessageDialog::HelpMessageDialog(interface::Node& node, QWidget *parent, bool about) :\n     QDialog(parent),\n     ui(new Ui::HelpMessageDialog)\n {\n@@ -77,7 +78,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         cursor.insertText(header);\n         cursor.insertBlock();\n \n-        std::string strUsage = HelpMessage(HelpMessageMode::BITCOIN_QT);\n+        std::string strUsage = node.helpMessage(HelpMessageMode::BITCOIN_QT);\n         const bool showDebug = gArgs.GetBoolArg(\"-help-debug\", false);\n         strUsage += HelpMessageGroup(tr(\"UI Options:\").toStdString());\n         if (showDebug) {"
      },
      {
        "sha": "e6ad7be5d089c906a8ec820c87634e60b4ea9f66",
        "filename": "src/qt/utilitydialog.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/qt/utilitydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f672fb1960399389dea9cdd8f76d7156c2c88b/src/qt/utilitydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.h?ref=c2f672fb1960399389dea9cdd8f76d7156c2c88b",
        "patch": "@@ -10,6 +10,10 @@\n \n class BitcoinGUI;\n \n+namespace interface {\n+    class Node;\n+}\n+\n namespace Ui {\n     class HelpMessageDialog;\n }\n@@ -20,7 +24,7 @@ class HelpMessageDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit HelpMessageDialog(QWidget *parent, bool about);\n+    explicit HelpMessageDialog(interface::Node& node, QWidget *parent, bool about);\n     ~HelpMessageDialog();\n \n     void printToConsole();"
      }
    ]
  },
  {
    "sha": "5fba3af21e44ab7552c57782de430c1f4cfd6697",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmJhM2FmMjFlNDRhYjc1NTJjNTc3ODJkZTQzMGMxZjRjZmQ2Njk3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T19:10:47Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/splashscreen.cpp",
      "tree": {
        "sha": "dd34ef0bbf69f24f9bd4cc2a615a0398e6cf79a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd34ef0bbf69f24f9bd4cc2a615a0398e6cf79a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fba3af21e44ab7552c57782de430c1f4cfd6697",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fba3af21e44ab7552c57782de430c1f4cfd6697",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fba3af21e44ab7552c57782de430c1f4cfd6697",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fba3af21e44ab7552c57782de430c1f4cfd6697/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2f672fb1960399389dea9cdd8f76d7156c2c88b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2f672fb1960399389dea9cdd8f76d7156c2c88b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2f672fb1960399389dea9cdd8f76d7156c2c88b"
      }
    ],
    "stats": {
      "total": 168,
      "additions": 139,
      "deletions": 29
    },
    "files": [
      {
        "sha": "605c93212039f3695cbd09a11aee98022c92fda4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "patch": "@@ -7,6 +7,7 @@ DIST_SUBDIRS = secp256k1 univalue\n AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS) $(GPROF_LDFLAGS) $(SANITIZER_LDFLAGS)\n AM_CXXFLAGS = $(HARDENED_CXXFLAGS) $(ERROR_CXXFLAGS) $(GPROF_CXXFLAGS) $(SANITIZER_CXXFLAGS)\n AM_CPPFLAGS = $(HARDENED_CPPFLAGS)\n+AM_LIBTOOLFLAGS = --preserve-dup-deps\n EXTRA_LIBRARIES =\n \n if EMBEDDED_UNIVALUE\n@@ -106,6 +107,7 @@ BITCOIN_CORE_H = \\\n   init.h \\\n   interface/handler.h \\\n   interface/node.h \\\n+  interface/wallet.h \\\n   key.h \\\n   key_io.h \\\n   keystore.h \\\n@@ -247,6 +249,7 @@ endif\n libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n+  interface/wallet.cpp \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n   wallet/feebumper.cpp \\"
      },
      {
        "sha": "38eb12ce0d463eb65d822052901228d9ed9e1da6",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "patch": "@@ -402,7 +402,7 @@ if TARGET_WINDOWS\n endif\n qt_bitcoin_qt_LDADD = qt/libbitcoinqt.a $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_UTIL) $(LIBBITCOIN_WALLET)\n endif\n if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n@@ -411,7 +411,7 @@ qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL)\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-qt_bitcoin_qt_LIBTOOLFLAGS = --tag CXX\n+qt_bitcoin_qt_LIBTOOLFLAGS = $(AM_LIBTOOLFLAGS) --tag CXX\n \n #locale/foo.ts -> locale/foo.qm\n QT_QM=$(QT_TS:.ts=.qm)"
      },
      {
        "sha": "12791521987c5b51319dea00781ecc4456f97ea4",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "patch": "@@ -52,7 +52,7 @@ nodist_qt_test_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n \n qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n-qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_UTIL) $(LIBBITCOIN_WALLET)\n endif\n if ENABLE_ZMQ\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)"
      },
      {
        "sha": "5f4f0f2fa7611a0898db7fd80ea842e29e1c48ed",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "patch": "@@ -7,6 +7,7 @@\n #include <chainparams.h>\n #include <init.h>\n #include <interface/handler.h>\n+#include <interface/wallet.h>\n #include <net.h>\n #include <netaddress.h>\n #include <netbase.h>\n@@ -15,8 +16,19 @@\n #include <util.h>\n #include <warnings.h>\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+#ifdef ENABLE_WALLET\n+#define CHECK_WALLET(x) x\n+#else\n+#define CHECK_WALLET(x) throw std::logic_error(\"Wallet function called in non-wallet build.\")\n+#endif\n+\n #include <boost/thread/thread.hpp>\n \n+class CWallet;\n+\n namespace interface {\n namespace {\n \n@@ -69,6 +81,15 @@ class NodeImpl : public Node\n     {\n         return MakeHandler(::uiInterface.ThreadSafeQuestion.connect(fn));\n     }\n+    std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.ShowProgress.connect(fn));\n+    }\n+    std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) override\n+    {\n+        CHECK_WALLET(\n+            return MakeHandler(::uiInterface.LoadWallet.connect([fn](CWallet* wallet) { fn(MakeWallet(*wallet)); })));\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "d1749871bf043fc5dc67acda554ab0786d8eeb34",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "patch": "@@ -17,6 +17,7 @@ class proxyType;\n namespace interface {\n \n class Handler;\n+class Wallet;\n \n //! Top-level interface for a bitcoin node (bitcoind process).\n class Node\n@@ -87,6 +88,14 @@ class Node\n         const std::string& caption,\n         unsigned int style)>;\n     virtual std::unique_ptr<Handler> handleQuestion(QuestionFn fn) = 0;\n+\n+    //! Register handler for progress messages.\n+    using ShowProgressFn = std::function<void(const std::string& title, int progress, bool resume_possible)>;\n+    virtual std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) = 0;\n+\n+    //! Register handler for load wallet messages.\n+    using LoadWalletFn = std::function<void(std::unique_ptr<Wallet> wallet)>;\n+    virtual std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) = 0;\n };\n \n //! Return implementation of Node interface."
      },
      {
        "sha": "01639aa37fd4068267b98be35aea6d4ca593bc89",
        "filename": "src/interface/wallet.cpp",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/interface/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/interface/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/wallet.cpp?ref=5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "patch": "@@ -0,0 +1,32 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interface/wallet.h>\n+\n+#include <interface/handler.h>\n+#include <wallet/wallet.h>\n+\n+#include <memory>\n+\n+namespace interface {\n+namespace {\n+\n+class WalletImpl : public Wallet\n+{\n+public:\n+    WalletImpl(CWallet& wallet) : m_wallet(wallet) {}\n+\n+    std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) override\n+    {\n+        return MakeHandler(m_wallet.ShowProgress.connect(fn));\n+    }\n+\n+    CWallet& m_wallet;\n+};\n+\n+} // namespace\n+\n+std::unique_ptr<Wallet> MakeWallet(CWallet& wallet) { return MakeUnique<WalletImpl>(wallet); }\n+\n+} // namespace interface"
      },
      {
        "sha": "bf68df4e7d64349b3f919f751a059b8d2ba66a41",
        "filename": "src/interface/wallet.h",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/interface/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/interface/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/wallet.h?ref=5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERFACE_WALLET_H\n+#define BITCOIN_INTERFACE_WALLET_H\n+\n+#include <functional>\n+#include <memory>\n+#include <string>\n+\n+class CWallet;\n+\n+namespace interface {\n+\n+class Handler;\n+\n+//! Interface for accessing a wallet.\n+class Wallet\n+{\n+public:\n+    virtual ~Wallet() {}\n+\n+    //! Register handler for show progress messages.\n+    using ShowProgressFn = std::function<void(const std::string& title, int progress)>;\n+    virtual std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) = 0;\n+};\n+\n+//! Return implementation of Wallet interface. This function will be undefined\n+//! in builds where ENABLE_WALLET is false.\n+std::unique_ptr<Wallet> MakeWallet(CWallet& wallet);\n+\n+} // namespace interface\n+\n+#endif // BITCOIN_INTERFACE_WALLET_H"
      },
      {
        "sha": "07fac934fbf83d94b9e945cfacea4e89415ff75d",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "patch": "@@ -375,7 +375,7 @@ void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n \n void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n {\n-    SplashScreen *splash = new SplashScreen(0, networkStyle);\n+    SplashScreen *splash = new SplashScreen(m_node, 0, networkStyle);\n     // We don't hold a direct pointer to the splash screen after creation, but the splash\n     // screen will take care of deleting itself when slotFinish happens.\n     splash->show();"
      },
      {
        "sha": "2475a82ef90cfc203f5be67f986fdc972f3cacde",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 21,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "patch": "@@ -12,22 +12,21 @@\n \n #include <clientversion.h>\n #include <init.h>\n+#include <interface/handler.h>\n+#include <interface/node.h>\n+#include <interface/wallet.h>\n #include <util.h>\n #include <ui_interface.h>\n #include <version.h>\n \n-#ifdef ENABLE_WALLET\n-#include <wallet/wallet.h>\n-#endif\n-\n #include <QApplication>\n #include <QCloseEvent>\n #include <QDesktopWidget>\n #include <QPainter>\n #include <QRadialGradient>\n \n-SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle) :\n-    QWidget(0, f), curAlignment(0)\n+SplashScreen::SplashScreen(interface::Node& node, Qt::WindowFlags f, const NetworkStyle *networkStyle) :\n+    QWidget(0, f), curAlignment(0), m_node(node)\n {\n     // set reference point, paddings\n     int paddingRight            = 50;\n@@ -143,7 +142,7 @@ bool SplashScreen::eventFilter(QObject * obj, QEvent * ev) {\n     if (ev->type() == QEvent::KeyPress) {\n         QKeyEvent *keyEvent = static_cast<QKeyEvent *>(ev);\n         if(keyEvent->text()[0] == 'q') {\n-            StartShutdown();\n+            m_node.startShutdown();\n         }\n     }\n     return QObject::eventFilter(obj, ev);\n@@ -177,35 +176,34 @@ static void ShowProgress(SplashScreen *splash, const std::string &title, int nPr\n                                 : _(\"press q to shutdown\")) +\n             strprintf(\"\\n%d\", nProgress) + \"%\");\n }\n-\n #ifdef ENABLE_WALLET\n-void SplashScreen::ConnectWallet(CWallet* wallet)\n+void SplashScreen::ConnectWallet(std::unique_ptr<interface::Wallet> wallet)\n {\n-    wallet->ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2, false));\n-    connectedWallets.push_back(wallet);\n+    m_connected_wallet_handlers.emplace_back(wallet->handleShowProgress(boost::bind(ShowProgress, this, _1, _2, false)));\n+    m_connected_wallets.emplace_back(std::move(wallet));\n }\n #endif\n \n void SplashScreen::subscribeToCoreSignals()\n {\n     // Connect signals to client\n-    uiInterface.InitMessage.connect(boost::bind(InitMessage, this, _1));\n-    uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2, _3));\n+    m_handler_init_message = m_node.handleInitMessage(boost::bind(InitMessage, this, _1));\n+    m_handler_show_progress = m_node.handleShowProgress(boost::bind(ShowProgress, this, _1, _2, _3));\n #ifdef ENABLE_WALLET\n-    uiInterface.LoadWallet.connect(boost::bind(&SplashScreen::ConnectWallet, this, _1));\n+    m_handler_load_wallet = m_node.handleLoadWallet([this](std::unique_ptr<interface::Wallet> wallet) { ConnectWallet(std::move(wallet)); });\n #endif\n }\n \n void SplashScreen::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from client\n-    uiInterface.InitMessage.disconnect(boost::bind(InitMessage, this, _1));\n-    uiInterface.ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2, _3));\n-#ifdef ENABLE_WALLET\n-    for (CWallet* const & pwallet : connectedWallets) {\n-        pwallet->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2, false));\n+    m_handler_init_message->disconnect();\n+    m_handler_show_progress->disconnect();\n+    for (auto& handler : m_connected_wallet_handlers) {\n+        handler->disconnect();\n     }\n-#endif\n+    m_connected_wallet_handlers.clear();\n+    m_connected_wallets.clear();\n }\n \n void SplashScreen::showMessage(const QString &message, int alignment, const QColor &color)\n@@ -227,6 +225,6 @@ void SplashScreen::paintEvent(QPaintEvent *event)\n \n void SplashScreen::closeEvent(QCloseEvent *event)\n {\n-    StartShutdown(); // allows an \"emergency\" shutdown during startup\n+    m_node.startShutdown(); // allows an \"emergency\" shutdown during startup\n     event->ignore();\n }"
      },
      {
        "sha": "419f36f641869607e5681f91920523de4fb1a1b5",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fba3af21e44ab7552c57782de430c1f4cfd6697/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "patch": "@@ -8,9 +8,16 @@\n #include <functional>\n #include <QSplashScreen>\n \n-class CWallet;\n+#include <memory>\n+\n class NetworkStyle;\n \n+namespace interface {\n+class Handler;\n+class Node;\n+class Wallet;\n+};\n+\n /** Class for the splashscreen with information of the running client.\n  *\n  * @note this is intentionally not a QSplashScreen. Bitcoin Core initialization\n@@ -22,7 +29,7 @@ class SplashScreen : public QWidget\n     Q_OBJECT\n \n public:\n-    explicit SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle);\n+    explicit SplashScreen(interface::Node& node, Qt::WindowFlags f, const NetworkStyle *networkStyle);\n     ~SplashScreen();\n \n protected:\n@@ -45,14 +52,19 @@ public Q_SLOTS:\n     /** Disconnect core signals to splash screen */\n     void unsubscribeFromCoreSignals();\n     /** Connect wallet signals to splash screen */\n-    void ConnectWallet(CWallet*);\n+    void ConnectWallet(std::unique_ptr<interface::Wallet> wallet);\n \n     QPixmap pixmap;\n     QString curMessage;\n     QColor curColor;\n     int curAlignment;\n \n-    QList<CWallet*> connectedWallets;\n+    interface::Node& m_node;\n+    std::unique_ptr<interface::Handler> m_handler_init_message;\n+    std::unique_ptr<interface::Handler> m_handler_show_progress;\n+    std::unique_ptr<interface::Handler> m_handler_load_wallet;\n+    std::list<std::unique_ptr<interface::Wallet>> m_connected_wallets;\n+    std::list<std::unique_ptr<interface::Handler>> m_connected_wallet_handlers;\n };\n \n #endif // BITCOIN_QT_SPLASHSCREEN_H"
      }
    ]
  },
  {
    "sha": "fe6f27e6ea68a139d3a98b30a53706008ef8b132",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTZmMjdlNmVhNjhhMTM5ZDNhOThiMzBhNTM3MDYwMDhlZjhiMTMy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T19:37:36Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/clientmodel.cpp",
      "tree": {
        "sha": "b464ec4ceb05146ccd8c2f4e7f44559546a6e72c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b464ec4ceb05146ccd8c2f4e7f44559546a6e72c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe6f27e6ea68a139d3a98b30a53706008ef8b132",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe6f27e6ea68a139d3a98b30a53706008ef8b132",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe6f27e6ea68a139d3a98b30a53706008ef8b132",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe6f27e6ea68a139d3a98b30a53706008ef8b132/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fba3af21e44ab7552c57782de430c1f4cfd6697",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fba3af21e44ab7552c57782de430c1f4cfd6697"
      }
    ],
    "stats": {
      "total": 376,
      "additions": 233,
      "deletions": 143
    },
    "files": [
      {
        "sha": "e0530800743ed6b9a169d3d4cb68a81ef2eccf43",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=fe6f27e6ea68a139d3a98b30a53706008ef8b132",
        "patch": "@@ -4,16 +4,21 @@\n \n #include <interface/node.h>\n \n+#include <chain.h>\n #include <chainparams.h>\n #include <init.h>\n #include <interface/handler.h>\n #include <interface/wallet.h>\n #include <net.h>\n #include <netaddress.h>\n #include <netbase.h>\n+#include <primitives/block.h>\n #include <scheduler.h>\n+#include <sync.h>\n+#include <txmempool.h>\n #include <ui_interface.h>\n #include <util.h>\n+#include <validation.h>\n #include <warnings.h>\n \n #if defined(HAVE_CONFIG_H)\n@@ -25,6 +30,7 @@\n #define CHECK_WALLET(x) throw std::logic_error(\"Wallet function called in non-wallet build.\")\n #endif\n \n+#include <atomic>\n #include <boost/thread/thread.hpp>\n \n class CWallet;\n@@ -69,6 +75,56 @@ class NodeImpl : public Node\n     }\n     std::string helpMessage(HelpMessageMode mode) override { return HelpMessage(mode); }\n     bool getProxy(Network net, proxyType& proxy_info) override { return GetProxy(net, proxy_info); }\n+    size_t getNodeCount(CConnman::NumConnections flags) override\n+    {\n+        return g_connman ? g_connman->GetNodeCount(flags) : 0;\n+    }\n+    int64_t getTotalBytesRecv() override { return g_connman ? g_connman->GetTotalBytesRecv() : 0; }\n+    int64_t getTotalBytesSent() override { return g_connman ? g_connman->GetTotalBytesSent() : 0; }\n+    size_t getMempoolSize() override { return ::mempool.size(); }\n+    size_t getMempoolDynamicUsage() override { return ::mempool.DynamicMemoryUsage(); }\n+    bool getHeaderTip(int& height, int64_t& block_time) override\n+    {\n+        LOCK(::cs_main);\n+        if (::pindexBestHeader) {\n+            height = ::pindexBestHeader->nHeight;\n+            block_time = ::pindexBestHeader->GetBlockTime();\n+            return true;\n+        }\n+        return false;\n+    }\n+    int getNumBlocks() override\n+    {\n+        LOCK(::cs_main);\n+        return ::chainActive.Height();\n+    }\n+    int64_t getLastBlockTime() override\n+    {\n+        LOCK(::cs_main);\n+        if (::chainActive.Tip()) {\n+            return ::chainActive.Tip()->GetBlockTime();\n+        }\n+        return Params().GenesisBlock().GetBlockTime(); // Genesis block's time of current network\n+    }\n+    double getVerificationProgress() override\n+    {\n+        const CBlockIndex* tip;\n+        {\n+            LOCK(::cs_main);\n+            tip = ::chainActive.Tip();\n+        }\n+        return GuessVerificationProgress(::Params().TxData(), tip);\n+    }\n+    bool isInitialBlockDownload() override { return IsInitialBlockDownload(); }\n+    bool getReindex() override { return ::fReindex; }\n+    bool getImporting() override { return ::fImporting; }\n+    void setNetworkActive(bool active) override\n+    {\n+        if (g_connman) {\n+            g_connman->SetNetworkActive(active);\n+        }\n+    }\n+    bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {\n         return MakeHandler(::uiInterface.InitMessage.connect(fn));\n@@ -90,6 +146,37 @@ class NodeImpl : public Node\n         CHECK_WALLET(\n             return MakeHandler(::uiInterface.LoadWallet.connect([fn](CWallet* wallet) { fn(MakeWallet(*wallet)); })));\n     }\n+    std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.NotifyNumConnectionsChanged.connect(fn));\n+    }\n+    std::unique_ptr<Handler> handleNotifyNetworkActiveChanged(NotifyNetworkActiveChangedFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.NotifyNetworkActiveChanged.connect(fn));\n+    }\n+    std::unique_ptr<Handler> handleNotifyAlertChanged(NotifyAlertChangedFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.NotifyAlertChanged.connect(fn));\n+    }\n+    std::unique_ptr<Handler> handleBannedListChanged(BannedListChangedFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.BannedListChanged.connect(fn));\n+    }\n+    std::unique_ptr<Handler> handleNotifyBlockTip(NotifyBlockTipFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.NotifyBlockTip.connect([fn](bool initial_download, const CBlockIndex* block) {\n+            fn(initial_download, block->nHeight, block->GetBlockTime(),\n+                GuessVerificationProgress(::Params().TxData(), block));\n+        }));\n+    }\n+    std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) override\n+    {\n+        return MakeHandler(\n+            ::uiInterface.NotifyHeaderTip.connect([fn](bool initial_download, const CBlockIndex* block) {\n+                fn(initial_download, block->nHeight, block->GetBlockTime(),\n+                    GuessVerificationProgress(::Params().TxData(), block));\n+            }));\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "5275030ca1c2b0128eed915ee01cc60e0ebc6999",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=fe6f27e6ea68a139d3a98b30a53706008ef8b132",
        "patch": "@@ -6,10 +6,13 @@\n #define BITCOIN_INTERFACE_NODE_H\n \n #include <init.h>       // For HelpMessageMode\n+#include <net.h>        // For CConnman::NumConnections\n #include <netaddress.h> // For Network\n \n #include <functional>\n #include <memory>\n+#include <stddef.h>\n+#include <stdint.h>\n #include <string>\n \n class proxyType;\n@@ -73,6 +76,48 @@ class Node\n     //! Get proxy.\n     virtual bool getProxy(Network net, proxyType& proxy_info) = 0;\n \n+    //! Get number of connections.\n+    virtual size_t getNodeCount(CConnman::NumConnections flags) = 0;\n+\n+    //! Get total bytes recv.\n+    virtual int64_t getTotalBytesRecv() = 0;\n+\n+    //! Get total bytes sent.\n+    virtual int64_t getTotalBytesSent() = 0;\n+\n+    //! Get mempool size.\n+    virtual size_t getMempoolSize() = 0;\n+\n+    //! Get mempool dynamic usage.\n+    virtual size_t getMempoolDynamicUsage() = 0;\n+\n+    //! Get header tip height and time.\n+    virtual bool getHeaderTip(int& height, int64_t& block_time) = 0;\n+\n+    //! Get num blocks.\n+    virtual int getNumBlocks() = 0;\n+\n+    //! Get last block time.\n+    virtual int64_t getLastBlockTime() = 0;\n+\n+    //! Get verification progress.\n+    virtual double getVerificationProgress() = 0;\n+\n+    //! Is initial block download.\n+    virtual bool isInitialBlockDownload() = 0;\n+\n+    //! Get reindex.\n+    virtual bool getReindex() = 0;\n+\n+    //! Get importing.\n+    virtual bool getImporting() = 0;\n+\n+    //! Set network active.\n+    virtual void setNetworkActive(bool active) = 0;\n+\n+    //! Get network active.\n+    virtual bool getNetworkActive() = 0;\n+\n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;\n     virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;\n@@ -96,6 +141,32 @@ class Node\n     //! Register handler for load wallet messages.\n     using LoadWalletFn = std::function<void(std::unique_ptr<Wallet> wallet)>;\n     virtual std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) = 0;\n+\n+    //! Register handler for number of connections changed messages.\n+    using NotifyNumConnectionsChangedFn = std::function<void(int new_num_connections)>;\n+    virtual std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) = 0;\n+\n+    //! Register handler for network active messages.\n+    using NotifyNetworkActiveChangedFn = std::function<void(bool network_active)>;\n+    virtual std::unique_ptr<Handler> handleNotifyNetworkActiveChanged(NotifyNetworkActiveChangedFn fn) = 0;\n+\n+    //! Register handler for notify alert messages.\n+    using NotifyAlertChangedFn = std::function<void()>;\n+    virtual std::unique_ptr<Handler> handleNotifyAlertChanged(NotifyAlertChangedFn fn) = 0;\n+\n+    //! Register handler for ban list messages.\n+    using BannedListChangedFn = std::function<void()>;\n+    virtual std::unique_ptr<Handler> handleBannedListChanged(BannedListChangedFn fn) = 0;\n+\n+    //! Register handler for block tip messages.\n+    using NotifyBlockTipFn =\n+        std::function<void(bool initial_download, int height, int64_t block_time, double verification_progress)>;\n+    virtual std::unique_ptr<Handler> handleNotifyBlockTip(NotifyBlockTipFn fn) = 0;\n+\n+    //! Register handler for header tip messages.\n+    using NotifyHeaderTipFn =\n+        std::function<void(bool initial_download, int height, int64_t block_time, double verification_progress)>;\n+    virtual std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) = 0;\n };\n \n //! Return implementation of Node interface."
      },
      {
        "sha": "ba473bb4e8bd83c8ab839bcee731069ddf15a5cd",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=fe6f27e6ea68a139d3a98b30a53706008ef8b132",
        "patch": "@@ -460,7 +460,7 @@ void BitcoinApplication::initializeResult(bool success)\n         paymentServer->setOptionsModel(optionsModel);\n #endif\n \n-        clientModel = new ClientModel(optionsModel);\n+        clientModel = new ClientModel(m_node, optionsModel);\n         window->setClientModel(clientModel);\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "dbe8d0da6970df136825132eb6b6ef8d34918417",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=fe6f27e6ea68a139d3a98b30a53706008ef8b132",
        "patch": "@@ -493,7 +493,7 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n         connect(_clientModel, SIGNAL(networkActiveChanged(bool)), this, SLOT(setNetworkActive(bool)));\n \n         modalOverlay->setKnownBestHeight(_clientModel->getHeaderTipHeight(), QDateTime::fromTime_t(_clientModel->getHeaderTipTime()));\n-        setNumBlocks(_clientModel->getNumBlocks(), _clientModel->getLastBlockDate(), _clientModel->getVerificationProgress(nullptr), false);\n+        setNumBlocks(m_node.getNumBlocks(), QDateTime::fromTime_t(m_node.getLastBlockTime()), m_node.getVerificationProgress(), false);\n         connect(_clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double,bool)), this, SLOT(setNumBlocks(int,QDateTime,double,bool)));\n \n         // Receive and report messages from client model\n@@ -751,7 +751,7 @@ void BitcoinGUI::updateNetworkState()\n \n     QString tooltip;\n \n-    if (clientModel->getNetworkActive()) {\n+    if (m_node.getNetworkActive()) {\n         tooltip = tr(\"%n active connection(s) to Bitcoin network\", \"\", count) + QString(\".<br>\") + tr(\"Click to disable network activity.\");\n     } else {\n         tooltip = tr(\"Network activity disabled.\") + QString(\"<br>\") + tr(\"Click to enable network activity again.\");\n@@ -1230,9 +1230,7 @@ void BitcoinGUI::unsubscribeFromCoreSignals()\n \n void BitcoinGUI::toggleNetworkActive()\n {\n-    if (clientModel) {\n-        clientModel->setNetworkActive(!clientModel->getNetworkActive());\n-    }\n+    m_node.setNetworkActive(!m_node.getNetworkActive());\n }\n \n UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *platformStyle) :"
      },
      {
        "sha": "213068a490d5f7a35dd7231977c0d19d5379462c",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 108,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=fe6f27e6ea68a139d3a98b30a53706008ef8b132",
        "patch": "@@ -13,6 +13,8 @@\n #include <chainparams.h>\n #include <checkpoints.h>\n #include <clientversion.h>\n+#include <interface/handler.h>\n+#include <interface/node.h>\n #include <validation.h>\n #include <net.h>\n #include <txmempool.h>\n@@ -30,8 +32,9 @@ class CBlockIndex;\n static int64_t nLastHeaderTipUpdateNotification = 0;\n static int64_t nLastBlockTipUpdateNotification = 0;\n \n-ClientModel::ClientModel(OptionsModel *_optionsModel, QObject *parent) :\n+ClientModel::ClientModel(interface::Node& node, OptionsModel *_optionsModel, QObject *parent) :\n     QObject(parent),\n+    m_node(node),\n     optionsModel(_optionsModel),\n     peerTableModel(0),\n     banTableModel(0),\n@@ -64,26 +67,19 @@ int ClientModel::getNumConnections(unsigned int flags) const\n     else if (flags == CONNECTIONS_ALL)\n         connections = CConnman::CONNECTIONS_ALL;\n \n-    if(g_connman)\n-         return g_connman->GetNodeCount(connections);\n-    return 0;\n-}\n-\n-int ClientModel::getNumBlocks() const\n-{\n-    LOCK(cs_main);\n-    return chainActive.Height();\n+    return m_node.getNodeCount(connections);\n }\n \n int ClientModel::getHeaderTipHeight() const\n {\n     if (cachedBestHeaderHeight == -1) {\n         // make sure we initially populate the cache via a cs_main lock\n         // otherwise we need to wait for a tip update\n-        LOCK(cs_main);\n-        if (pindexBestHeader) {\n-            cachedBestHeaderHeight = pindexBestHeader->nHeight;\n-            cachedBestHeaderTime = pindexBestHeader->GetBlockTime();\n+        int height;\n+        int64_t blockTime;\n+        if (m_node.getHeaderTip(height, blockTime)) {\n+            cachedBestHeaderHeight = height;\n+            cachedBestHeaderTime = blockTime;\n         }\n     }\n     return cachedBestHeaderHeight;\n@@ -92,66 +88,22 @@ int ClientModel::getHeaderTipHeight() const\n int64_t ClientModel::getHeaderTipTime() const\n {\n     if (cachedBestHeaderTime == -1) {\n-        LOCK(cs_main);\n-        if (pindexBestHeader) {\n-            cachedBestHeaderHeight = pindexBestHeader->nHeight;\n-            cachedBestHeaderTime = pindexBestHeader->GetBlockTime();\n+        int height;\n+        int64_t blockTime;\n+        if (m_node.getHeaderTip(height, blockTime)) {\n+            cachedBestHeaderHeight = height;\n+            cachedBestHeaderTime = blockTime;\n         }\n     }\n     return cachedBestHeaderTime;\n }\n \n-quint64 ClientModel::getTotalBytesRecv() const\n-{\n-    if(!g_connman)\n-        return 0;\n-    return g_connman->GetTotalBytesRecv();\n-}\n-\n-quint64 ClientModel::getTotalBytesSent() const\n-{\n-    if(!g_connman)\n-        return 0;\n-    return g_connman->GetTotalBytesSent();\n-}\n-\n-QDateTime ClientModel::getLastBlockDate() const\n-{\n-    LOCK(cs_main);\n-\n-    if (chainActive.Tip())\n-        return QDateTime::fromTime_t(chainActive.Tip()->GetBlockTime());\n-\n-    return QDateTime::fromTime_t(Params().GenesisBlock().GetBlockTime()); // Genesis block's time of current network\n-}\n-\n-long ClientModel::getMempoolSize() const\n-{\n-    return mempool.size();\n-}\n-\n-size_t ClientModel::getMempoolDynamicUsage() const\n-{\n-    return mempool.DynamicMemoryUsage();\n-}\n-\n-double ClientModel::getVerificationProgress(const CBlockIndex *tipIn) const\n-{\n-    CBlockIndex *tip = const_cast<CBlockIndex *>(tipIn);\n-    LOCK(cs_main);\n-    if (!tip)\n-    {\n-        tip = chainActive.Tip();\n-    }\n-    return GuessVerificationProgress(Params().TxData(), tip);\n-}\n-\n void ClientModel::updateTimer()\n {\n     // no locking required at this point\n     // the following calls will acquire the required lock\n-    Q_EMIT mempoolSizeChanged(getMempoolSize(), getMempoolDynamicUsage());\n-    Q_EMIT bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n+    Q_EMIT mempoolSizeChanged(m_node.getMempoolSize(), m_node.getMempoolDynamicUsage());\n+    Q_EMIT bytesChanged(m_node.getTotalBytesRecv(), m_node.getTotalBytesSent());\n }\n \n void ClientModel::updateNumConnections(int numConnections)\n@@ -169,41 +121,21 @@ void ClientModel::updateAlert()\n     Q_EMIT alertsChanged(getStatusBarWarnings());\n }\n \n-bool ClientModel::inInitialBlockDownload() const\n-{\n-    return IsInitialBlockDownload();\n-}\n-\n enum BlockSource ClientModel::getBlockSource() const\n {\n-    if (fReindex)\n+    if (m_node.getReindex())\n         return BlockSource::REINDEX;\n-    else if (fImporting)\n+    else if (m_node.getImporting())\n         return BlockSource::DISK;\n     else if (getNumConnections() > 0)\n         return BlockSource::NETWORK;\n \n     return BlockSource::NONE;\n }\n \n-void ClientModel::setNetworkActive(bool active)\n-{\n-    if (g_connman) {\n-         g_connman->SetNetworkActive(active);\n-    }\n-}\n-\n-bool ClientModel::getNetworkActive() const\n-{\n-    if (g_connman) {\n-        return g_connman->GetNetworkActive();\n-    }\n-    return false;\n-}\n-\n QString ClientModel::getStatusBarWarnings() const\n {\n-    return QString::fromStdString(GetWarnings(\"gui\"));\n+    return QString::fromStdString(m_node.getWarnings(\"gui\"));\n }\n \n OptionsModel *ClientModel::getOptionsModel()\n@@ -285,7 +217,7 @@ static void BannedListChanged(ClientModel *clientmodel)\n     QMetaObject::invokeMethod(clientmodel, \"updateBanlist\", Qt::QueuedConnection);\n }\n \n-static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CBlockIndex *pIndex, bool fHeader)\n+static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, int height, int64_t blockTime, double verificationProgress, bool fHeader)\n {\n     // lock free async UI updates in case we have a new block tip\n     // during initial sync, only update the UI if the last update\n@@ -298,16 +230,16 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n \n     if (fHeader) {\n         // cache best headers time and height to reduce future cs_main locks\n-        clientmodel->cachedBestHeaderHeight = pIndex->nHeight;\n-        clientmodel->cachedBestHeaderTime = pIndex->GetBlockTime();\n+        clientmodel->cachedBestHeaderHeight = height;\n+        clientmodel->cachedBestHeaderTime = blockTime;\n     }\n     // if we are in-sync, update the UI regardless of last update time\n     if (!initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass an async signal to the UI thread\n         QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n-                                  Q_ARG(int, pIndex->nHeight),\n-                                  Q_ARG(QDateTime, QDateTime::fromTime_t(pIndex->GetBlockTime())),\n-                                  Q_ARG(double, clientmodel->getVerificationProgress(pIndex)),\n+                                  Q_ARG(int, height),\n+                                  Q_ARG(QDateTime, QDateTime::fromTime_t(blockTime)),\n+                                  Q_ARG(double, verificationProgress),\n                                   Q_ARG(bool, fHeader));\n         nLastUpdateNotification = now;\n     }\n@@ -316,23 +248,23 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n void ClientModel::subscribeToCoreSignals()\n {\n     // Connect signals to client\n-    uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n-    uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n-    uiInterface.NotifyNetworkActiveChanged.connect(boost::bind(NotifyNetworkActiveChanged, this, _1));\n-    uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this));\n-    uiInterface.BannedListChanged.connect(boost::bind(BannedListChanged, this));\n-    uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2, false));\n-    uiInterface.NotifyHeaderTip.connect(boost::bind(BlockTipChanged, this, _1, _2, true));\n+    m_handler_show_progress = m_node.handleShowProgress(boost::bind(ShowProgress, this, _1, _2));\n+    m_handler_notify_num_connections_changed = m_node.handleNotifyNumConnectionsChanged(boost::bind(NotifyNumConnectionsChanged, this, _1));\n+    m_handler_notify_network_active_changed = m_node.handleNotifyNetworkActiveChanged(boost::bind(NotifyNetworkActiveChanged, this, _1));\n+    m_handler_notify_alert_changed = m_node.handleNotifyAlertChanged(boost::bind(NotifyAlertChanged, this));\n+    m_handler_banned_list_changed = m_node.handleBannedListChanged(boost::bind(BannedListChanged, this));\n+    m_handler_notify_block_tip = m_node.handleNotifyBlockTip(boost::bind(BlockTipChanged, this, _1, _2, _3, _4, false));\n+    m_handler_notify_header_tip = m_node.handleNotifyHeaderTip(boost::bind(BlockTipChanged, this, _1, _2, _3, _4, true));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from client\n-    uiInterface.ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n-    uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n-    uiInterface.NotifyNetworkActiveChanged.disconnect(boost::bind(NotifyNetworkActiveChanged, this, _1));\n-    uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this));\n-    uiInterface.BannedListChanged.disconnect(boost::bind(BannedListChanged, this));\n-    uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2, false));\n-    uiInterface.NotifyHeaderTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2, true));\n+    m_handler_show_progress->disconnect();\n+    m_handler_notify_num_connections_changed->disconnect();\n+    m_handler_notify_network_active_changed->disconnect();\n+    m_handler_notify_alert_changed->disconnect();\n+    m_handler_banned_list_changed->disconnect();\n+    m_handler_notify_block_tip->disconnect();\n+    m_handler_notify_header_tip->disconnect();\n }"
      },
      {
        "sha": "9faa10b87e6f882b4b657eab85ff7a0cbb32b73a",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 17,
        "deletions": 19,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=fe6f27e6ea68a139d3a98b30a53706008ef8b132",
        "patch": "@@ -9,13 +9,19 @@\n #include <QDateTime>\n \n #include <atomic>\n+#include <memory>\n \n class BanTableModel;\n class OptionsModel;\n class PeerTableModel;\n \n class CBlockIndex;\n \n+namespace interface {\n+class Handler;\n+class Node;\n+}\n+\n QT_BEGIN_NAMESPACE\n class QTimer;\n QT_END_NAMESPACE\n@@ -40,37 +46,21 @@ class ClientModel : public QObject\n     Q_OBJECT\n \n public:\n-    explicit ClientModel(OptionsModel *optionsModel, QObject *parent = 0);\n+    explicit ClientModel(interface::Node& node, OptionsModel *optionsModel, QObject *parent = 0);\n     ~ClientModel();\n \n+    interface::Node& node() const { return m_node; }\n     OptionsModel *getOptionsModel();\n     PeerTableModel *getPeerTableModel();\n     BanTableModel *getBanTableModel();\n \n     //! Return number of connections, default is in- and outbound (total)\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n-    int getNumBlocks() const;\n     int getHeaderTipHeight() const;\n     int64_t getHeaderTipTime() const;\n-    //! Return number of transactions in the mempool\n-    long getMempoolSize() const;\n-    //! Return the dynamic memory usage of the mempool\n-    size_t getMempoolDynamicUsage() const;\n-    \n-    quint64 getTotalBytesRecv() const;\n-    quint64 getTotalBytesSent() const;\n-\n-    double getVerificationProgress(const CBlockIndex *tip) const;\n-    QDateTime getLastBlockDate() const;\n-\n-    //! Return true if core is doing initial block download\n-    bool inInitialBlockDownload() const;\n+\n     //! Returns enum BlockSource of the current importing/syncing state\n     enum BlockSource getBlockSource() const;\n-    //! Return true if network activity in core is enabled\n-    bool getNetworkActive() const;\n-    //! Toggle network activity state in core\n-    void setNetworkActive(bool active);\n     //! Return warnings to be displayed in status bar\n     QString getStatusBarWarnings() const;\n \n@@ -85,6 +75,14 @@ class ClientModel : public QObject\n     mutable std::atomic<int64_t> cachedBestHeaderTime;\n \n private:\n+    interface::Node& m_node;\n+    std::unique_ptr<interface::Handler> m_handler_show_progress;\n+    std::unique_ptr<interface::Handler> m_handler_notify_num_connections_changed;\n+    std::unique_ptr<interface::Handler> m_handler_notify_network_active_changed;\n+    std::unique_ptr<interface::Handler> m_handler_notify_alert_changed;\n+    std::unique_ptr<interface::Handler> m_handler_banned_list_changed;\n+    std::unique_ptr<interface::Handler> m_handler_notify_block_tip;\n+    std::unique_ptr<interface::Handler> m_handler_notify_header_tip;\n     OptionsModel *optionsModel;\n     PeerTableModel *peerTableModel;\n     BanTableModel *banTableModel;"
      },
      {
        "sha": "d6cd9ef8ef7a240cdd631f1e488a7c59ce218d0c",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=fe6f27e6ea68a139d3a98b30a53706008ef8b132",
        "patch": "@@ -14,6 +14,7 @@\n #include <qt/platformstyle.h>\n #include <qt/walletmodel.h>\n #include <chainparams.h>\n+#include <interface/node.h>\n #include <netbase.h>\n #include <rpc/server.h>\n #include <rpc/client.h>\n@@ -566,13 +567,14 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumConnections(model->getNumConnections());\n         connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate(), model->getVerificationProgress(nullptr), false);\n+        interface::Node& node = clientModel->node();\n+        setNumBlocks(node.getNumBlocks(), QDateTime::fromTime_t(node.getLastBlockTime()), node.getVerificationProgress(), false);\n         connect(model, SIGNAL(numBlocksChanged(int,QDateTime,double,bool)), this, SLOT(setNumBlocks(int,QDateTime,double,bool)));\n \n         updateNetworkState();\n         connect(model, SIGNAL(networkActiveChanged(bool)), this, SLOT(setNetworkActive(bool)));\n \n-        updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n+        updateTrafficStats(node.getTotalBytesRecv(), node.getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n \n         connect(model, SIGNAL(mempoolSizeChanged(long,size_t)), this, SLOT(setMempoolSize(long,size_t)));\n@@ -835,7 +837,7 @@ void RPCConsole::updateNetworkState()\n     connections += tr(\"In:\") + \" \" + QString::number(clientModel->getNumConnections(CONNECTIONS_IN)) + \" / \";\n     connections += tr(\"Out:\") + \" \" + QString::number(clientModel->getNumConnections(CONNECTIONS_OUT)) + \")\";\n \n-    if(!clientModel->getNetworkActive()) {\n+    if(!clientModel->node().getNetworkActive()) {\n         connections += \" (\" + tr(\"Network activity disabled\") + \")\";\n     }\n "
      },
      {
        "sha": "ff378ed1bfb112b97ba774817fb6695f1c22f405",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=fe6f27e6ea68a139d3a98b30a53706008ef8b132",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <interface/node.h>\n #include <qt/trafficgraphwidget.h>\n #include <qt/clientmodel.h>\n \n@@ -35,8 +36,8 @@ void TrafficGraphWidget::setClientModel(ClientModel *model)\n {\n     clientModel = model;\n     if(model) {\n-        nLastBytesIn = model->getTotalBytesRecv();\n-        nLastBytesOut = model->getTotalBytesSent();\n+        nLastBytesIn = model->node().getTotalBytesRecv();\n+        nLastBytesOut = model->node().getTotalBytesSent();\n     }\n }\n \n@@ -123,8 +124,8 @@ void TrafficGraphWidget::updateRates()\n {\n     if(!clientModel) return;\n \n-    quint64 bytesIn = clientModel->getTotalBytesRecv(),\n-            bytesOut = clientModel->getTotalBytesSent();\n+    quint64 bytesIn = clientModel->node().getTotalBytesRecv(),\n+            bytesOut = clientModel->node().getTotalBytesSent();\n     float inRate = (bytesIn - nLastBytesIn) / 1024.0f * 1000 / timer->interval();\n     float outRate = (bytesOut - nLastBytesOut) / 1024.0f * 1000 / timer->interval();\n     vSamplesIn.push_front(inRate);\n@@ -169,8 +170,8 @@ void TrafficGraphWidget::clear()\n     fMax = 0.0f;\n \n     if(clientModel) {\n-        nLastBytesIn = clientModel->getTotalBytesRecv();\n-        nLastBytesOut = clientModel->getTotalBytesSent();\n+        nLastBytesIn = clientModel->node().getTotalBytesRecv();\n+        nLastBytesOut = clientModel->node().getTotalBytesSent();\n     }\n     timer->start();\n }"
      },
      {
        "sha": "e1c892f1155ce8159a9e2dfd4789fefb8e29a07c",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe6f27e6ea68a139d3a98b30a53706008ef8b132/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=fe6f27e6ea68a139d3a98b30a53706008ef8b132",
        "patch": "@@ -19,6 +19,7 @@\n #include <qt/transactionview.h>\n #include <qt/walletmodel.h>\n \n+#include <interface/node.h>\n #include <ui_interface.h>\n \n #include <QAction>\n@@ -158,7 +159,7 @@ void WalletView::setWalletModel(WalletModel *_walletModel)\n void WalletView::processNewTransaction(const QModelIndex& parent, int start, int /*end*/)\n {\n     // Prevent balloon-spam when initial block download is in progress\n-    if (!walletModel || !clientModel || clientModel->inInitialBlockDownload())\n+    if (!walletModel || !clientModel || clientModel->node().isInitialBlockDownload())\n         return;\n \n     TransactionTableModel *ttm = walletModel->getTransactionTableModel();"
      }
    ]
  },
  {
    "sha": "d7c2c9594897c39df6739b92610dfb5a7a1cb3ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkN2MyYzk1OTQ4OTdjMzlkZjY3MzliOTI2MTBkZmI1YTdhMWNiM2Vj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T19:44:10Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/intro.cpp",
      "tree": {
        "sha": "0b8355cffe4a206c43051ada4f2b796b2a6ccf2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b8355cffe4a206c43051ada4f2b796b2a6ccf2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe6f27e6ea68a139d3a98b30a53706008ef8b132",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe6f27e6ea68a139d3a98b30a53706008ef8b132",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe6f27e6ea68a139d3a98b30a53706008ef8b132"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 14,
      "deletions": 8
    },
    "files": [
      {
        "sha": "281164779dac092aebce5097387e7d1a6caffcb2",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=d7c2c9594897c39df6739b92610dfb5a7a1cb3ec",
        "patch": "@@ -113,7 +113,7 @@ class NodeImpl : public Node\n             LOCK(::cs_main);\n             tip = ::chainActive.Tip();\n         }\n-        return GuessVerificationProgress(::Params().TxData(), tip);\n+        return GuessVerificationProgress(Params().TxData(), tip);\n     }\n     bool isInitialBlockDownload() override { return IsInitialBlockDownload(); }\n     bool getReindex() override { return ::fReindex; }\n@@ -166,15 +166,15 @@ class NodeImpl : public Node\n     {\n         return MakeHandler(::uiInterface.NotifyBlockTip.connect([fn](bool initial_download, const CBlockIndex* block) {\n             fn(initial_download, block->nHeight, block->GetBlockTime(),\n-                GuessVerificationProgress(::Params().TxData(), block));\n+                GuessVerificationProgress(Params().TxData(), block));\n         }));\n     }\n     std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) override\n     {\n         return MakeHandler(\n             ::uiInterface.NotifyHeaderTip.connect([fn](bool initial_download, const CBlockIndex* block) {\n                 fn(initial_download, block->nHeight, block->GetBlockTime(),\n-                    GuessVerificationProgress(::Params().TxData(), block));\n+                    GuessVerificationProgress(Params().TxData(), block));\n             }));\n     }\n };"
      },
      {
        "sha": "279726d6dfb94161a089c306908ecb28b66ccc14",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=d7c2c9594897c39df6739b92610dfb5a7a1cb3ec",
        "patch": "@@ -602,7 +602,7 @@ int main(int argc, char *argv[])\n \n     /// 5. Now that settings and translations are available, ask user for data directory\n     // User language is set up: pick a data directory\n-    if (!Intro::pickDataDirectory())\n+    if (!Intro::pickDataDirectory(*node))\n         return EXIT_SUCCESS;\n \n     /// 6. Determine availability of data and blocks directory and parse bitcoin.conf"
      },
      {
        "sha": "4eb7482018df1b66d794dc012f1c8d8e988df431",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=d7c2c9594897c39df6739b92610dfb5a7a1cb3ec",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <qt/guiutil.h>\n \n+#include <interface/node.h>\n #include <util.h>\n \n #include <QFileDialog>\n@@ -186,7 +187,7 @@ QString Intro::getDefaultDataDirectory()\n     return GUIUtil::boostPathToQString(GetDefaultDataDir());\n }\n \n-bool Intro::pickDataDirectory()\n+bool Intro::pickDataDirectory(interface::Node& node)\n {\n     QSettings settings;\n     /* If data directory provided on command line, no need to look at settings\n@@ -233,8 +234,9 @@ bool Intro::pickDataDirectory()\n      * override -datadir in the bitcoin.conf file in the default data directory\n      * (to be consistent with bitcoind behavior)\n      */\n-    if(dataDir != getDefaultDataDirectory())\n-        gArgs.SoftSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).string()); // use OS locale for path setting\n+    if(dataDir != getDefaultDataDirectory()) {\n+        node.softSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).string()); // use OS locale for path setting\n+    }\n     return true;\n }\n "
      },
      {
        "sha": "07d2025bb614122e85c3a02e741e87492f49cdd6",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=d7c2c9594897c39df6739b92610dfb5a7a1cb3ec",
        "patch": "@@ -13,6 +13,10 @@ static const bool DEFAULT_CHOOSE_DATADIR = false;\n \n class FreespaceChecker;\n \n+namespace interface {\n+    class Node;\n+}\n+\n namespace Ui {\n     class Intro;\n }\n@@ -41,7 +45,7 @@ class Intro : public QDialog\n      * @note do NOT call global GetDataDir() before calling this function, this\n      * will cause the wrong path to be cached.\n      */\n-    static bool pickDataDirectory();\n+    static bool pickDataDirectory(interface::Node& node);\n \n     /**\n      * Determine default data directory for operating system."
      }
    ]
  },
  {
    "sha": "e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGI2NmEzYjdjNWQzYTA3OTYzNmQ2MWZjZjYxMWJiNmIzNmM3YmMx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T19:57:19Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/peertablemodel.cpp",
      "tree": {
        "sha": "4115ee48eb6dd0689d22a9029b27ecfffcdb8873",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4115ee48eb6dd0689d22a9029b27ecfffcdb8873"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7c2c9594897c39df6739b92610dfb5a7a1cb3ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7c2c9594897c39df6739b92610dfb5a7a1cb3ec"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 57,
      "deletions": 28
    },
    "files": [
      {
        "sha": "1937fe9d9b0565ccbe8b388163b40f727ee4fd38",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
        "patch": "@@ -10,6 +10,7 @@\n #include <interface/handler.h>\n #include <interface/wallet.h>\n #include <net.h>\n+#include <net_processing.h>\n #include <netaddress.h>\n #include <netbase.h>\n #include <primitives/block.h>\n@@ -79,6 +80,31 @@ class NodeImpl : public Node\n     {\n         return g_connman ? g_connman->GetNodeCount(flags) : 0;\n     }\n+    bool getNodesStats(NodesStats& stats) override\n+    {\n+        stats.clear();\n+\n+        if (g_connman) {\n+            std::vector<CNodeStats> stats_temp;\n+            g_connman->GetNodeStats(stats_temp);\n+\n+            stats.reserve(stats_temp.size());\n+            for (auto& node_stats_temp : stats_temp) {\n+                stats.emplace_back(std::move(node_stats_temp), false, CNodeStateStats());\n+            }\n+\n+            // Try to retrieve the CNodeStateStats for each node.\n+            TRY_LOCK(::cs_main, lockMain);\n+            if (lockMain) {\n+                for (auto& node_stats : stats) {\n+                    std::get<1>(node_stats) =\n+                        GetNodeStateStats(std::get<0>(node_stats).nodeid, std::get<2>(node_stats));\n+                }\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n     int64_t getTotalBytesRecv() override { return g_connman ? g_connman->GetTotalBytesRecv() : 0; }\n     int64_t getTotalBytesSent() override { return g_connman ? g_connman->GetTotalBytesSent() : 0; }\n     size_t getMempoolSize() override { return ::mempool.size(); }"
      },
      {
        "sha": "6288487032c7ebfb818ce94f78f5e92c564e14c6",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
        "patch": "@@ -14,8 +14,12 @@\n #include <stddef.h>\n #include <stdint.h>\n #include <string>\n+#include <tuple>\n+#include <vector>\n \n+class CNodeStats;\n class proxyType;\n+struct CNodeStateStats;\n \n namespace interface {\n \n@@ -79,6 +83,10 @@ class Node\n     //! Get number of connections.\n     virtual size_t getNodeCount(CConnman::NumConnections flags) = 0;\n \n+    //! Get stats for connected nodes.\n+    using NodesStats = std::vector<std::tuple<CNodeStats, bool, CNodeStateStats>>;\n+    virtual bool getNodesStats(NodesStats& stats) = 0;\n+\n     //! Get total bytes recv.\n     virtual int64_t getTotalBytesRecv() = 0;\n "
      },
      {
        "sha": "195d0d203349f544b92ee17ada38a71edc23622c",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
        "patch": "@@ -86,9 +86,9 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n };\n \n struct CNodeStateStats {\n-    int nMisbehavior;\n-    int nSyncHeight;\n-    int nCommonHeight;\n+    int nMisbehavior = 0;\n+    int nSyncHeight = -1;\n+    int nCommonHeight = -1;\n     std::vector<int> vHeightInFlight;\n };\n "
      },
      {
        "sha": "84cfb79549168432cdb5c345b35845ad9f026e3e",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
        "patch": "@@ -42,7 +42,7 @@ ClientModel::ClientModel(interface::Node& node, OptionsModel *_optionsModel, QOb\n {\n     cachedBestHeaderHeight = -1;\n     cachedBestHeaderTime = -1;\n-    peerTableModel = new PeerTableModel(this);\n+    peerTableModel = new PeerTableModel(m_node, this);\n     banTableModel = new BanTableModel(this);\n     pollTimer = new QTimer(this);\n     connect(pollTimer, SIGNAL(timeout()), this, SLOT(updateTimer()));"
      },
      {
        "sha": "f33db8e76135e6134b9a70e3b4f1cee26abad946",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 23,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
        "patch": "@@ -8,6 +8,7 @@\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n \n+#include <interface/node.h>\n #include <validation.h> // for cs_main\n #include <sync.h>\n \n@@ -56,38 +57,26 @@ class PeerTablePriv\n     std::map<NodeId, int> mapNodeRows;\n \n     /** Pull a full list of peers from vNodes into our cache */\n-    void refreshPeers()\n+    void refreshPeers(interface::Node& node)\n     {\n         {\n             cachedNodeStats.clear();\n-            std::vector<CNodeStats> vstats;\n-            if(g_connman)\n-                g_connman->GetNodeStats(vstats);\n+\n+            interface::Node::NodesStats nodes_stats;\n+            node.getNodesStats(nodes_stats);\n #if QT_VERSION >= 0x040700\n-            cachedNodeStats.reserve(vstats.size());\n+            cachedNodeStats.reserve(nodes_stats.size());\n #endif\n-            for (const CNodeStats& nodestats : vstats)\n+            for (auto& node_stats : nodes_stats)\n             {\n                 CNodeCombinedStats stats;\n-                stats.nodeStateStats.nMisbehavior = 0;\n-                stats.nodeStateStats.nSyncHeight = -1;\n-                stats.nodeStateStats.nCommonHeight = -1;\n-                stats.fNodeStateStatsAvailable = false;\n-                stats.nodeStats = nodestats;\n+                stats.nodeStats = std::get<0>(node_stats);\n+                stats.fNodeStateStatsAvailable = std::get<1>(node_stats);\n+                stats.nodeStateStats = std::get<2>(node_stats);\n                 cachedNodeStats.append(stats);\n             }\n         }\n \n-        // Try to retrieve the CNodeStateStats for each node.\n-        {\n-            TRY_LOCK(cs_main, lockMain);\n-            if (lockMain)\n-            {\n-                for (CNodeCombinedStats &stats : cachedNodeStats)\n-                    stats.fNodeStateStatsAvailable = GetNodeStateStats(stats.nodeStats.nodeid, stats.nodeStateStats);\n-            }\n-        }\n-\n         if (sortColumn >= 0)\n             // sort cacheNodeStats (use stable sort to prevent rows jumping around unnecessarily)\n             qStableSort(cachedNodeStats.begin(), cachedNodeStats.end(), NodeLessThan(sortColumn, sortOrder));\n@@ -113,8 +102,9 @@ class PeerTablePriv\n     }\n };\n \n-PeerTableModel::PeerTableModel(ClientModel *parent) :\n+PeerTableModel::PeerTableModel(interface::Node& node, ClientModel *parent) :\n     QAbstractTableModel(parent),\n+    m_node(node),\n     clientModel(parent),\n     timer(0)\n {\n@@ -235,7 +225,7 @@ const CNodeCombinedStats *PeerTableModel::getNodeStats(int idx)\n void PeerTableModel::refresh()\n {\n     Q_EMIT layoutAboutToBeChanged();\n-    priv->refreshPeers();\n+    priv->refreshPeers(m_node);\n     Q_EMIT layoutChanged();\n }\n "
      },
      {
        "sha": "3db2f347788cca2da146d32af6477f5b0210ddc9",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
        "patch": "@@ -14,6 +14,10 @@\n class ClientModel;\n class PeerTablePriv;\n \n+namespace interface {\n+class Node;\n+}\n+\n QT_BEGIN_NAMESPACE\n class QTimer;\n QT_END_NAMESPACE\n@@ -45,7 +49,7 @@ class PeerTableModel : public QAbstractTableModel\n     Q_OBJECT\n \n public:\n-    explicit PeerTableModel(ClientModel *parent = 0);\n+    explicit PeerTableModel(interface::Node& node, ClientModel *parent = 0);\n     ~PeerTableModel();\n     const CNodeCombinedStats *getNodeStats(int idx);\n     int getRowByNodeId(NodeId nodeid);\n@@ -76,6 +80,7 @@ public Q_SLOTS:\n     void refresh();\n \n private:\n+    interface::Node& m_node;\n     ClientModel *clientModel;\n     QStringList columns;\n     std::unique_ptr<PeerTablePriv> priv;"
      }
    ]
  },
  {
    "sha": "3034a462a5d30144cf0ec801d07f0c8c36d560f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDM0YTQ2MmE1ZDMwMTQ0Y2YwZWM4MDFkMDdmMGM4YzM2ZDU2MGYz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T20:02:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/bantablemodel.cpp",
      "tree": {
        "sha": "13e518ccabc2cb1e91aaab1d7edbe0d814f510ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13e518ccabc2cb1e91aaab1d7edbe0d814f510ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3034a462a5d30144cf0ec801d07f0c8c36d560f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3034a462a5d30144cf0ec801d07f0c8c36d560f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3034a462a5d30144cf0ec801d07f0c8c36d560f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3034a462a5d30144cf0ec801d07f0c8c36d560f3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0b66a3b7c5d3a079636d61fcf611bb6b36c7bc1"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 26,
      "deletions": 7
    },
    "files": [
      {
        "sha": "740878b675e34d201c5f608a9d94487f061043b0",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3034a462a5d30144cf0ec801d07f0c8c36d560f3/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3034a462a5d30144cf0ec801d07f0c8c36d560f3/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=3034a462a5d30144cf0ec801d07f0c8c36d560f3",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <interface/node.h>\n \n+#include <addrdb.h>\n #include <chain.h>\n #include <chainparams.h>\n #include <init.h>\n@@ -105,6 +106,14 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n+    bool getBanned(banmap_t& banmap) override\n+    {\n+        if (g_connman) {\n+            g_connman->GetBanned(banmap);\n+            return true;\n+        }\n+        return false;\n+    }\n     int64_t getTotalBytesRecv() override { return g_connman ? g_connman->GetTotalBytesRecv() : 0; }\n     int64_t getTotalBytesSent() override { return g_connman ? g_connman->GetTotalBytesSent() : 0; }\n     size_t getMempoolSize() override { return ::mempool.size(); }"
      },
      {
        "sha": "880232d9e72410dbe7041208ade124b50d64e80a",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3034a462a5d30144cf0ec801d07f0c8c36d560f3/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3034a462a5d30144cf0ec801d07f0c8c36d560f3/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=3034a462a5d30144cf0ec801d07f0c8c36d560f3",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_INTERFACE_NODE_H\n #define BITCOIN_INTERFACE_NODE_H\n \n+#include <addrdb.h>     // For banmap_t\n #include <init.h>       // For HelpMessageMode\n #include <net.h>        // For CConnman::NumConnections\n #include <netaddress.h> // For Network\n@@ -87,6 +88,9 @@ class Node\n     using NodesStats = std::vector<std::tuple<CNodeStats, bool, CNodeStateStats>>;\n     virtual bool getNodesStats(NodesStats& stats) = 0;\n \n+    //! Get ban map entries.\n+    virtual bool getBanned(banmap_t& banmap) = 0;\n+\n     //! Get total bytes recv.\n     virtual int64_t getTotalBytesRecv() = 0;\n "
      },
      {
        "sha": "cbd67d70ab07cb8f2fa4369a9e21865049ea5819",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3034a462a5d30144cf0ec801d07f0c8c36d560f3/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3034a462a5d30144cf0ec801d07f0c8c36d560f3/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=3034a462a5d30144cf0ec801d07f0c8c36d560f3",
        "patch": "@@ -8,6 +8,7 @@\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n \n+#include <interface/node.h>\n #include <sync.h>\n #include <utiltime.h>\n \n@@ -45,11 +46,10 @@ class BanTablePriv\n     Qt::SortOrder sortOrder;\n \n     /** Pull a full list of banned nodes from CNode into our cache */\n-    void refreshBanlist()\n+    void refreshBanlist(interface::Node& node)\n     {\n         banmap_t banMap;\n-        if(g_connman)\n-            g_connman->GetBanned(banMap);\n+        node.getBanned(banMap);\n \n         cachedBanlist.clear();\n #if QT_VERSION >= 0x040700\n@@ -82,8 +82,9 @@ class BanTablePriv\n     }\n };\n \n-BanTableModel::BanTableModel(ClientModel *parent) :\n+BanTableModel::BanTableModel(interface::Node& node, ClientModel *parent) :\n     QAbstractTableModel(parent),\n+    m_node(node),\n     clientModel(parent)\n {\n     columns << tr(\"IP/Netmask\") << tr(\"Banned Until\");\n@@ -168,7 +169,7 @@ QModelIndex BanTableModel::index(int row, int column, const QModelIndex &parent)\n void BanTableModel::refresh()\n {\n     Q_EMIT layoutAboutToBeChanged();\n-    priv->refreshBanlist();\n+    priv->refreshBanlist(m_node);\n     Q_EMIT layoutChanged();\n }\n "
      },
      {
        "sha": "fcb364d40b1938b3509d12092f7fa9f9a787a0ba",
        "filename": "src/qt/bantablemodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3034a462a5d30144cf0ec801d07f0c8c36d560f3/src/qt/bantablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3034a462a5d30144cf0ec801d07f0c8c36d560f3/src/qt/bantablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.h?ref=3034a462a5d30144cf0ec801d07f0c8c36d560f3",
        "patch": "@@ -13,6 +13,10 @@\n class ClientModel;\n class BanTablePriv;\n \n+namespace interface {\n+    class Node;\n+}\n+\n struct CCombinedBan {\n     CSubNet subnet;\n     CBanEntry banEntry;\n@@ -39,7 +43,7 @@ class BanTableModel : public QAbstractTableModel\n     Q_OBJECT\n \n public:\n-    explicit BanTableModel(ClientModel *parent = 0);\n+    explicit BanTableModel(interface::Node& node, ClientModel *parent = 0);\n     ~BanTableModel();\n     void startAutoRefresh();\n     void stopAutoRefresh();\n@@ -65,6 +69,7 @@ public Q_SLOTS:\n     void refresh();\n \n private:\n+    interface::Node& m_node;\n     ClientModel *clientModel;\n     QStringList columns;\n     std::unique_ptr<BanTablePriv> priv;"
      },
      {
        "sha": "1dbfc815b63ddc4ccac0599476dd8e39120c87d2",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3034a462a5d30144cf0ec801d07f0c8c36d560f3/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3034a462a5d30144cf0ec801d07f0c8c36d560f3/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=3034a462a5d30144cf0ec801d07f0c8c36d560f3",
        "patch": "@@ -43,7 +43,7 @@ ClientModel::ClientModel(interface::Node& node, OptionsModel *_optionsModel, QOb\n     cachedBestHeaderHeight = -1;\n     cachedBestHeaderTime = -1;\n     peerTableModel = new PeerTableModel(m_node, this);\n-    banTableModel = new BanTableModel(this);\n+    banTableModel = new BanTableModel(m_node, this);\n     pollTimer = new QTimer(this);\n     connect(pollTimer, SIGNAL(timeout()), this, SLOT(updateTimer()));\n     pollTimer->start(MODEL_UPDATE_DELAY);"
      }
    ]
  },
  {
    "sha": "582daf6d22da5394d02a12003b9542d9f5865ae2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODJkYWY2ZDIyZGE1Mzk0ZDAyYTEyMDAzYjk1NDJkOWY1ODY1YWUy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T20:38:51Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/rpcconsole.cpp",
      "tree": {
        "sha": "ba93cc572b10671ddf6aea64cf331baf2b7a1970",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba93cc572b10671ddf6aea64cf331baf2b7a1970"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/582daf6d22da5394d02a12003b9542d9f5865ae2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/582daf6d22da5394d02a12003b9542d9f5865ae2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/582daf6d22da5394d02a12003b9542d9f5865ae2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/582daf6d22da5394d02a12003b9542d9f5865ae2/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3034a462a5d30144cf0ec801d07f0c8c36d560f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3034a462a5d30144cf0ec801d07f0c8c36d560f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3034a462a5d30144cf0ec801d07f0c8c36d560f3"
      }
    ],
    "stats": {
      "total": 204,
      "additions": 137,
      "deletions": 67
    },
    "files": [
      {
        "sha": "2f0114f5e485fd79413a5f15eb6314ca92ce4a6f",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/582daf6d22da5394d02a12003b9542d9f5865ae2/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/582daf6d22da5394d02a12003b9542d9f5865ae2/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=582daf6d22da5394d02a12003b9542d9f5865ae2",
        "patch": "@@ -15,6 +15,7 @@\n #include <netaddress.h>\n #include <netbase.h>\n #include <primitives/block.h>\n+#include <rpc/server.h>\n #include <scheduler.h>\n #include <sync.h>\n #include <txmempool.h>\n@@ -34,6 +35,7 @@\n \n #include <atomic>\n #include <boost/thread/thread.hpp>\n+#include <univalue.h>\n \n class CWallet;\n \n@@ -114,6 +116,29 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n+    bool ban(const CNetAddr& net_addr, BanReason reason, int64_t ban_time_offset) override\n+    {\n+        if (g_connman) {\n+            g_connman->Ban(net_addr, reason, ban_time_offset);\n+            return true;\n+        }\n+        return false;\n+    }\n+    bool unban(const CSubNet& ip) override\n+    {\n+        if (g_connman) {\n+            g_connman->Unban(ip);\n+            return true;\n+        }\n+        return false;\n+    }\n+    bool disconnect(NodeId id) override\n+    {\n+        if (g_connman) {\n+            return g_connman->DisconnectNode(id);\n+        }\n+        return false;\n+    }\n     int64_t getTotalBytesRecv() override { return g_connman ? g_connman->GetTotalBytesRecv() : 0; }\n     int64_t getTotalBytesSent() override { return g_connman ? g_connman->GetTotalBytesSent() : 0; }\n     size_t getMempoolSize() override { return ::mempool.size(); }\n@@ -160,6 +185,17 @@ class NodeImpl : public Node\n         }\n     }\n     bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n+    UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) override\n+    {\n+        JSONRPCRequest req;\n+        req.params = params;\n+        req.strMethod = command;\n+        req.URI = uri;\n+        return ::tableRPC.execute(req);\n+    }\n+    std::vector<std::string> listRpcCommands() override { return ::tableRPC.listCommands(); }\n+    void rpcSetTimerInterfaceIfUnset(RPCTimerInterface* iface) override { RPCSetTimerInterfaceIfUnset(iface); }\n+    void rpcUnsetTimerInterface(RPCTimerInterface* iface) override { RPCUnsetTimerInterface(iface); }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {\n         return MakeHandler(::uiInterface.InitMessage.connect(fn));"
      },
      {
        "sha": "aeac1d6215a21aae5f4cfef97713e88d8f2e9270",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/582daf6d22da5394d02a12003b9542d9f5865ae2/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/582daf6d22da5394d02a12003b9542d9f5865ae2/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=582daf6d22da5394d02a12003b9542d9f5865ae2",
        "patch": "@@ -19,6 +19,8 @@\n #include <vector>\n \n class CNodeStats;\n+class RPCTimerInterface;\n+class UniValue;\n class proxyType;\n struct CNodeStateStats;\n \n@@ -91,6 +93,15 @@ class Node\n     //! Get ban map entries.\n     virtual bool getBanned(banmap_t& banmap) = 0;\n \n+    //! Ban node.\n+    virtual bool ban(const CNetAddr& net_addr, BanReason reason, int64_t ban_time_offset) = 0;\n+\n+    //! Unban node.\n+    virtual bool unban(const CSubNet& ip) = 0;\n+\n+    //! Disconnect node.\n+    virtual bool disconnect(NodeId id) = 0;\n+\n     //! Get total bytes recv.\n     virtual int64_t getTotalBytesRecv() = 0;\n \n@@ -130,6 +141,18 @@ class Node\n     //! Get network active.\n     virtual bool getNetworkActive() = 0;\n \n+    //! Execute rpc command.\n+    virtual UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) = 0;\n+\n+    //! List rpc commands.\n+    virtual std::vector<std::string> listRpcCommands() = 0;\n+\n+    //! Set RPC timer interface if unset.\n+    virtual void rpcSetTimerInterfaceIfUnset(RPCTimerInterface* iface) = 0;\n+\n+    //! Unset RPC timer interface.\n+    virtual void rpcUnsetTimerInterface(RPCTimerInterface* iface) = 0;\n+\n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;\n     virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;"
      },
      {
        "sha": "aa9f1f0071963341088148204b9799fbf9b09fcd",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/582daf6d22da5394d02a12003b9542d9f5865ae2/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/582daf6d22da5394d02a12003b9542d9f5865ae2/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=582daf6d22da5394d02a12003b9542d9f5865ae2",
        "patch": "@@ -152,7 +152,7 @@ BitcoinGUI::BitcoinGUI(interface::Node& node, const PlatformStyle *_platformStyl\n     setUnifiedTitleAndToolBarOnMac(true);\n #endif\n \n-    rpcConsole = new RPCConsole(_platformStyle, 0);\n+    rpcConsole = new RPCConsole(node, _platformStyle, 0);\n     helpMessageDialog = new HelpMessageDialog(node, this, false);\n #ifdef ENABLE_WALLET\n     if(enableWallet)"
      },
      {
        "sha": "745055b94482fb24be4e1339b7324c87f781222b",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 21,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/582daf6d22da5394d02a12003b9542d9f5865ae2/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/582daf6d22da5394d02a12003b9542d9f5865ae2/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=582daf6d22da5394d02a12003b9542d9f5865ae2",
        "patch": "@@ -84,12 +84,17 @@ const QStringList historyFilter = QStringList()\n class RPCExecutor : public QObject\n {\n     Q_OBJECT\n+public:\n+    RPCExecutor(interface::Node& node) : m_node(node) {}\n \n public Q_SLOTS:\n     void request(const QString &command, const QString &walletID);\n \n Q_SIGNALS:\n     void reply(int category, const QString &command);\n+\n+private:\n+    interface::Node& m_node;\n };\n \n /** Class for handling RPC timers\n@@ -141,13 +146,14 @@ class QtRPCTimerInterface: public RPCTimerInterface\n  *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n  *   - Within single quotes, no escaping is possible and no special interpretation takes place\n  *\n+ * @param[in]    node    optional node to execute command on\n  * @param[out]   result      stringified Result from the executed command(chain)\n  * @param[in]    strCommand  Command line to split\n  * @param[in]    fExecute    set true if you want the command to be executed\n  * @param[out]   pstrFilteredOut  Command line, filtered to remove any sensitive data\n  */\n \n-bool RPCConsole::RPCParseCommandLine(std::string &strResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut, const std::string *walletID)\n+bool RPCConsole::RPCParseCommandLine(interface::Node* node, std::string &strResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut, const std::string *walletID)\n {\n     std::vector< std::vector<std::string> > stack;\n     stack.push_back(std::vector<std::string>());\n@@ -301,16 +307,17 @@ bool RPCConsole::RPCParseCommandLine(std::string &strResult, const std::string &\n                         if (fExecute) {\n                             // Convert argument list to JSON objects in method-dependent way,\n                             // and pass it along with the method name to the dispatcher.\n-                            JSONRPCRequest req;\n-                            req.params = RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end()));\n-                            req.strMethod = stack.back()[0];\n+                            UniValue params = RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end()));\n+                            std::string method = stack.back()[0];\n+                            std::string uri;\n #ifdef ENABLE_WALLET\n                             if (walletID && !walletID->empty()) {\n                                 QByteArray encodedName = QUrl::toPercentEncoding(QString::fromStdString(*walletID));\n-                                req.URI = \"/wallet/\"+std::string(encodedName.constData(), encodedName.length());\n+                                uri = \"/wallet/\"+std::string(encodedName.constData(), encodedName.length());\n                             }\n #endif\n-                            lastResult = tableRPC.execute(req);\n+                            assert(node);\n+                            lastResult = node->executeRpc(method, params, uri);\n                         }\n \n                         state = STATE_COMMAND_EXECUTED;\n@@ -417,7 +424,7 @@ void RPCExecutor::request(const QString &command, const QString &walletID)\n             return;\n         }\n         std::string wallet_id = walletID.toStdString();\n-        if(!RPCConsole::RPCExecuteCommandLine(result, executableCommand, nullptr, &wallet_id))\n+        if(!RPCConsole::RPCExecuteCommandLine(m_node, result, executableCommand, nullptr, &wallet_id))\n         {\n             Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n             return;\n@@ -444,8 +451,9 @@ void RPCExecutor::request(const QString &command, const QString &walletID)\n     }\n }\n \n-RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n+RPCConsole::RPCConsole(interface::Node& node, const PlatformStyle *_platformStyle, QWidget *parent) :\n     QWidget(parent),\n+    m_node(node),\n     ui(new Ui::RPCConsole),\n     clientModel(0),\n     historyPtr(0),\n@@ -494,7 +502,7 @@ RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n     rpcTimerInterface = new QtRPCTimerInterface();\n     // avoid accidentally overwriting an existing, non QTThread\n     // based timer interface\n-    RPCSetTimerInterfaceIfUnset(rpcTimerInterface);\n+    m_node.rpcSetTimerInterfaceIfUnset(rpcTimerInterface);\n \n     setTrafficGraphRange(INITIAL_TRAFFIC_GRAPH_MINS);\n \n@@ -509,7 +517,7 @@ RPCConsole::~RPCConsole()\n {\n     QSettings settings;\n     settings.setValue(\"RPCConsoleWindowGeometry\", saveGeometry());\n-    RPCUnsetTimerInterface(rpcTimerInterface);\n+    m_node.rpcUnsetTimerInterface(rpcTimerInterface);\n     delete rpcTimerInterface;\n     delete ui;\n }\n@@ -669,7 +677,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n \n         //Setup autocomplete and attach it\n         QStringList wordList;\n-        std::vector<std::string> commandList = tableRPC.listCommands();\n+        std::vector<std::string> commandList = m_node.listRpcCommands();\n         for (size_t i = 0; i < commandList.size(); ++i)\n         {\n             wordList << commandList[i].c_str();\n@@ -884,7 +892,7 @@ void RPCConsole::on_lineEdit_returnPressed()\n         std::string strFilteredCmd;\n         try {\n             std::string dummy;\n-            if (!RPCParseCommandLine(dummy, cmd.toStdString(), false, &strFilteredCmd)) {\n+            if (!RPCParseCommandLine(nullptr, dummy, cmd.toStdString(), false, &strFilteredCmd)) {\n                 // Failed to parse command, so we cannot even filter it for the history\n                 throw std::runtime_error(\"Invalid command line\");\n             }\n@@ -957,7 +965,7 @@ void RPCConsole::browseHistory(int offset)\n \n void RPCConsole::startExecutor()\n {\n-    RPCExecutor *executor = new RPCExecutor();\n+    RPCExecutor *executor = new RPCExecutor(m_node);\n     executor->moveToThread(&thread);\n \n     // Replies from executor object must go to this object\n@@ -1183,24 +1191,21 @@ void RPCConsole::showBanTableContextMenu(const QPoint& point)\n \n void RPCConsole::disconnectSelectedNode()\n {\n-    if(!g_connman)\n-        return;\n-\n     // Get selected peer addresses\n     QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, PeerTableModel::NetNodeId);\n     for(int i = 0; i < nodes.count(); i++)\n     {\n         // Get currently selected peer address\n         NodeId id = nodes.at(i).data().toLongLong();\n         // Find the node, disconnect it and clear the selected node\n-        if(g_connman->DisconnectNode(id))\n+        if(m_node.disconnect(id))\n             clearSelectedNode();\n     }\n }\n \n void RPCConsole::banSelectedNode(int bantime)\n {\n-    if (!clientModel || !g_connman)\n+    if (!clientModel)\n         return;\n \n     // Get selected peer addresses\n@@ -1218,7 +1223,7 @@ void RPCConsole::banSelectedNode(int bantime)\n \t// Find possible nodes, ban it and clear the selected node\n \tconst CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n \tif(stats) {\n-\t    g_connman->Ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n+            m_node.ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n \t}\n     }\n     clearSelectedNode();\n@@ -1239,9 +1244,8 @@ void RPCConsole::unbanSelectedNode()\n         CSubNet possibleSubnet;\n \n         LookupSubNet(strNode.toStdString().c_str(), possibleSubnet);\n-        if (possibleSubnet.IsValid() && g_connman)\n+        if (possibleSubnet.IsValid() && m_node.unban(possibleSubnet))\n         {\n-            g_connman->Unban(possibleSubnet);\n             clientModel->getBanTableModel()->refresh();\n         }\n     }"
      },
      {
        "sha": "8381301759f14ba8bc82bb8d8ef9ca5fe58c5723",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/582daf6d22da5394d02a12003b9542d9f5865ae2/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/582daf6d22da5394d02a12003b9542d9f5865ae2/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=582daf6d22da5394d02a12003b9542d9f5865ae2",
        "patch": "@@ -19,6 +19,10 @@ class PlatformStyle;\n class RPCTimerInterface;\n class WalletModel;\n \n+namespace interface {\n+    class Node;\n+}\n+\n namespace Ui {\n     class RPCConsole;\n }\n@@ -34,12 +38,12 @@ class RPCConsole: public QWidget\n     Q_OBJECT\n \n public:\n-    explicit RPCConsole(const PlatformStyle *platformStyle, QWidget *parent);\n+    explicit RPCConsole(interface::Node& node, const PlatformStyle *platformStyle, QWidget *parent);\n     ~RPCConsole();\n \n-    static bool RPCParseCommandLine(std::string &strResult, const std::string &strCommand, bool fExecute, std::string * const pstrFilteredOut = nullptr, const std::string *walletID = nullptr);\n-    static bool RPCExecuteCommandLine(std::string &strResult, const std::string &strCommand, std::string * const pstrFilteredOut = nullptr, const std::string *walletID = nullptr) {\n-        return RPCParseCommandLine(strResult, strCommand, true, pstrFilteredOut, walletID);\n+    static bool RPCParseCommandLine(interface::Node* node, std::string &strResult, const std::string &strCommand, bool fExecute, std::string * const pstrFilteredOut = nullptr, const std::string *walletID = nullptr);\n+    static bool RPCExecuteCommandLine(interface::Node& node, std::string &strResult, const std::string &strCommand, std::string * const pstrFilteredOut = nullptr, const std::string *walletID = nullptr) {\n+        return RPCParseCommandLine(&node, strResult, strCommand, true, pstrFilteredOut, walletID);\n     }\n \n     void setClientModel(ClientModel *model);\n@@ -140,6 +144,7 @@ public Q_SLOTS:\n \n     };\n \n+    interface::Node& m_node;\n     Ui::RPCConsole *ui;\n     ClientModel *clientModel;\n     QStringList history;"
      },
      {
        "sha": "467107dc4c47701942f883265f01d0581fe17440",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 41,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/582daf6d22da5394d02a12003b9542d9f5865ae2/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/582daf6d22da5394d02a12003b9542d9f5865ae2/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=582daf6d22da5394d02a12003b9542d9f5865ae2",
        "patch": "@@ -7,6 +7,7 @@\n #include <chainparams.h>\n #include <consensus/validation.h>\n #include <fs.h>\n+#include <interface/node.h>\n #include <validation.h>\n #include <rpc/register.h>\n #include <rpc/server.h>\n@@ -45,89 +46,90 @@ void RPCNestedTests::rpcNestedTests()\n     std::string result;\n     std::string result2;\n     std::string filtered;\n-    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()[chain]\", &filtered); //simple result filtering with path\n+    auto node = interface::MakeNode();\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()[chain]\", &filtered); //simple result filtering with path\n     QVERIFY(result==\"main\");\n     QVERIFY(filtered == \"getblockchaininfo()[chain]\");\n \n-    RPCConsole::RPCExecuteCommandLine(result, \"getblock(getbestblockhash())\"); //simple 2 level nesting\n-    RPCConsole::RPCExecuteCommandLine(result, \"getblock(getblock(getbestblockhash())[hash], true)\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock(getbestblockhash())\"); //simple 2 level nesting\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock(getblock(getbestblockhash())[hash], true)\");\n \n-    RPCConsole::RPCExecuteCommandLine(result, \"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)\"); //4 level nesting with whitespace, filtering path and boolean parameter\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)\"); //4 level nesting with whitespace, filtering path and boolean parameter\n \n-    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo\");\n     QVERIFY(result.substr(0,1) == \"{\");\n \n-    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()\");\n     QVERIFY(result.substr(0,1) == \"{\");\n \n-    RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo \"); //whitespace at the end will be tolerated\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo \"); //whitespace at the end will be tolerated\n     QVERIFY(result.substr(0,1) == \"{\");\n \n-    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()[\\\"chain\\\"]\")); //Quote path identifier are allowed, but look after a child containing the quotes in the key\n+    (RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()[\\\"chain\\\"]\")); //Quote path identifier are allowed, but look after a child containing the quotes in the key\n     QVERIFY(result == \"null\");\n \n-    (RPCConsole::RPCExecuteCommandLine(result, \"createrawtransaction [] {} 0\")); //parameter not in brackets are allowed\n-    (RPCConsole::RPCExecuteCommandLine(result2, \"createrawtransaction([],{},0)\")); //parameter in brackets are allowed\n+    (RPCConsole::RPCExecuteCommandLine(*node, result, \"createrawtransaction [] {} 0\")); //parameter not in brackets are allowed\n+    (RPCConsole::RPCExecuteCommandLine(*node, result2, \"createrawtransaction([],{},0)\")); //parameter in brackets are allowed\n     QVERIFY(result == result2);\n-    (RPCConsole::RPCExecuteCommandLine(result2, \"createrawtransaction( [],  {} , 0   )\")); //whitespace between parameters is allowed\n+    (RPCConsole::RPCExecuteCommandLine(*node, result2, \"createrawtransaction( [],  {} , 0   )\")); //whitespace between parameters is allowed\n     QVERIFY(result == result2);\n \n-    RPCConsole::RPCExecuteCommandLine(result, \"getblock(getbestblockhash())[tx][0]\", &filtered);\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock(getbestblockhash())[tx][0]\", &filtered);\n     QVERIFY(result == \"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\");\n     QVERIFY(filtered == \"getblock(getbestblockhash())[tx][0]\");\n \n-    RPCConsole::RPCParseCommandLine(result, \"importprivkey\", false, &filtered);\n+    RPCConsole::RPCParseCommandLine(nullptr, result, \"importprivkey\", false, &filtered);\n     QVERIFY(filtered == \"importprivkey(\u2026)\");\n-    RPCConsole::RPCParseCommandLine(result, \"signmessagewithprivkey abc\", false, &filtered);\n+    RPCConsole::RPCParseCommandLine(nullptr, result, \"signmessagewithprivkey abc\", false, &filtered);\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n-    RPCConsole::RPCParseCommandLine(result, \"signmessagewithprivkey abc,def\", false, &filtered);\n+    RPCConsole::RPCParseCommandLine(nullptr, result, \"signmessagewithprivkey abc,def\", false, &filtered);\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n-    RPCConsole::RPCParseCommandLine(result, \"signrawtransactionwithkey(abc)\", false, &filtered);\n+    RPCConsole::RPCParseCommandLine(nullptr, result, \"signrawtransactionwithkey(abc)\", false, &filtered);\n     QVERIFY(filtered == \"signrawtransactionwithkey(\u2026)\");\n-    RPCConsole::RPCParseCommandLine(result, \"walletpassphrase(help())\", false, &filtered);\n+    RPCConsole::RPCParseCommandLine(nullptr, result, \"walletpassphrase(help())\", false, &filtered);\n     QVERIFY(filtered == \"walletpassphrase(\u2026)\");\n-    RPCConsole::RPCParseCommandLine(result, \"walletpassphrasechange(help(walletpassphrasechange(abc)))\", false, &filtered);\n+    RPCConsole::RPCParseCommandLine(nullptr, result, \"walletpassphrasechange(help(walletpassphrasechange(abc)))\", false, &filtered);\n     QVERIFY(filtered == \"walletpassphrasechange(\u2026)\");\n-    RPCConsole::RPCParseCommandLine(result, \"help(encryptwallet(abc, def))\", false, &filtered);\n+    RPCConsole::RPCParseCommandLine(nullptr, result, \"help(encryptwallet(abc, def))\", false, &filtered);\n     QVERIFY(filtered == \"help(encryptwallet(\u2026))\");\n-    RPCConsole::RPCParseCommandLine(result, \"help(importprivkey())\", false, &filtered);\n+    RPCConsole::RPCParseCommandLine(nullptr, result, \"help(importprivkey())\", false, &filtered);\n     QVERIFY(filtered == \"help(importprivkey(\u2026))\");\n-    RPCConsole::RPCParseCommandLine(result, \"help(importprivkey(help()))\", false, &filtered);\n+    RPCConsole::RPCParseCommandLine(nullptr, result, \"help(importprivkey(help()))\", false, &filtered);\n     QVERIFY(filtered == \"help(importprivkey(\u2026))\");\n-    RPCConsole::RPCParseCommandLine(result, \"help(importprivkey(abc), walletpassphrase(def))\", false, &filtered);\n+    RPCConsole::RPCParseCommandLine(nullptr, result, \"help(importprivkey(abc), walletpassphrase(def))\", false, &filtered);\n     QVERIFY(filtered == \"help(importprivkey(\u2026), walletpassphrase(\u2026))\");\n \n-    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest\");\n     QVERIFY(result == \"[]\");\n-    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest ''\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest ''\");\n     QVERIFY(result == \"[\\\"\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest \\\"\\\"\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest \\\"\\\"\");\n     QVERIFY(result == \"[\\\"\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest '' abc\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest '' abc\");\n     QVERIFY(result == \"[\\\"\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest abc '' abc\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc '' abc\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest abc  abc\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc  abc\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest abc\\t\\tabc\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc\\t\\tabc\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc )\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc )\");\n     QVERIFY(result == \"[\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest( abc )\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest( abc )\");\n     QVERIFY(result == \"[\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(   abc   ,   cba )\");\n+    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(   abc   ,   cba )\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"cba\\\"]\");\n \n #if QT_VERSION >= 0x050300\n     // do the QVERIFY_EXCEPTION_THROWN checks only with Qt5.3 and higher (QVERIFY_EXCEPTION_THROWN was introduced in Qt5.3)\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n-    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n-    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()()()\")); //tolerate non command brackts\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo(True)\"), UniValue); //invalid argument\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"a(getblockchaininfo(True))\"), UniValue); //method not found\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n+    (RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n+    (RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()()()\")); //tolerate non command brackts\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo(True)\"), UniValue); //invalid argument\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"a(getblockchaininfo(True))\"), UniValue); //method not found\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n #endif\n }"
      }
    ]
  },
  {
    "sha": "90d4640b7eff3154a0750c5acb52d39bd41e0bbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGQ0NjQwYjdlZmYzMTU0YTA3NTBjNWFjYjUyZDM5YmQ0MWUwYmJi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T20:43:47Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/optionsdialog.cpp",
      "tree": {
        "sha": "514691c9e9e6b52d6f866030a800681ca0554376",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/514691c9e9e6b52d6f866030a800681ca0554376"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90d4640b7eff3154a0750c5acb52d39bd41e0bbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90d4640b7eff3154a0750c5acb52d39bd41e0bbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90d4640b7eff3154a0750c5acb52d39bd41e0bbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90d4640b7eff3154a0750c5acb52d39bd41e0bbb/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "582daf6d22da5394d02a12003b9542d9f5865ae2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/582daf6d22da5394d02a12003b9542d9f5865ae2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/582daf6d22da5394d02a12003b9542d9f5865ae2"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "438e9e70f121a2094b57e602e35b272f9380b267",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90d4640b7eff3154a0750c5acb52d39bd41e0bbb/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90d4640b7eff3154a0750c5acb52d39bd41e0bbb/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=90d4640b7eff3154a0750c5acb52d39bd41e0bbb",
        "patch": "@@ -13,6 +13,7 @@\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n \n+#include <interface/node.h>\n #include <validation.h> // for DEFAULT_SCRIPTCHECK_THREADS and MAX_SCRIPTCHECK_THREADS\n #include <netbase.h>\n #include <txdb.h> // for -dbcache defaults\n@@ -313,17 +314,17 @@ void OptionsDialog::updateDefaultProxyNets()\n     std::string strProxy;\n     QString strDefaultProxyGUI;\n \n-    GetProxy(NET_IPV4, proxy);\n+    model->node().getProxy(NET_IPV4, proxy);\n     strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n     strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n     (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachIPv4->setChecked(true) : ui->proxyReachIPv4->setChecked(false);\n \n-    GetProxy(NET_IPV6, proxy);\n+    model->node().getProxy(NET_IPV6, proxy);\n     strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n     strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n     (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachIPv6->setChecked(true) : ui->proxyReachIPv6->setChecked(false);\n \n-    GetProxy(NET_TOR, proxy);\n+    model->node().getProxy(NET_TOR, proxy);\n     strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n     strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n     (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachTor->setChecked(true) : ui->proxyReachTor->setChecked(false);"
      },
      {
        "sha": "96c6b8fa45307b9a8fb59b176820c2633c658fbf",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90d4640b7eff3154a0750c5acb52d39bd41e0bbb/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90d4640b7eff3154a0750c5acb52d39bd41e0bbb/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=90d4640b7eff3154a0750c5acb52d39bd41e0bbb",
        "patch": "@@ -79,6 +79,8 @@ class OptionsModel : public QAbstractListModel\n     void setRestartRequired(bool fRequired);\n     bool isRestartRequired() const;\n \n+    interface::Node& node() const { return m_node; }\n+\n private:\n     interface::Node& m_node;\n     /* Qt-only settings */"
      }
    ]
  },
  {
    "sha": "a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDcwNGE4OTk2YmI5NTBhZTNjNGQ1YjVhMzBlOWRmZTM0Y2RlMWQz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T22:56:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove most direct bitcoin calls from qt/walletmodel.cpp",
      "tree": {
        "sha": "d7dc5b382640f965bdff98baa1aa4e21a7af5d20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7dc5b382640f965bdff98baa1aa4e21a7af5d20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90d4640b7eff3154a0750c5acb52d39bd41e0bbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90d4640b7eff3154a0750c5acb52d39bd41e0bbb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90d4640b7eff3154a0750c5acb52d39bd41e0bbb"
      }
    ],
    "stats": {
      "total": 912,
      "additions": 585,
      "deletions": 327
    },
    "files": [
      {
        "sha": "db03cc0627c63adfe62bfe4d428541b91af3ecd7",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -5,6 +5,7 @@\n #include <interface/node.h>\n \n #include <addrdb.h>\n+#include <amount.h>\n #include <chain.h>\n #include <chainparams.h>\n #include <init.h>\n@@ -28,6 +29,7 @@\n #include <config/bitcoin-config.h>\n #endif\n #ifdef ENABLE_WALLET\n+#include <wallet/wallet.h>\n #define CHECK_WALLET(x) x\n #else\n #define CHECK_WALLET(x) throw std::logic_error(\"Wallet function called in non-wallet build.\")\n@@ -37,8 +39,6 @@\n #include <boost/thread/thread.hpp>\n #include <univalue.h>\n \n-class CWallet;\n-\n namespace interface {\n namespace {\n \n@@ -185,6 +185,8 @@ class NodeImpl : public Node\n         }\n     }\n     bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n+    unsigned int getTxConfirmTarget() override { CHECK_WALLET(return ::nTxConfirmTarget); }\n+    CAmount getMaxTxFee() override { return ::maxTxFee; }\n     UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) override\n     {\n         JSONRPCRequest req;\n@@ -196,6 +198,18 @@ class NodeImpl : public Node\n     std::vector<std::string> listRpcCommands() override { return ::tableRPC.listCommands(); }\n     void rpcSetTimerInterfaceIfUnset(RPCTimerInterface* iface) override { RPCSetTimerInterfaceIfUnset(iface); }\n     void rpcUnsetTimerInterface(RPCTimerInterface* iface) override { RPCUnsetTimerInterface(iface); }\n+    std::vector<std::unique_ptr<Wallet>> getWallets() override\n+    {\n+#ifdef ENABLE_WALLET\n+        std::vector<std::unique_ptr<Wallet>> wallets;\n+        for (CWalletRef wallet : ::vpwallets) {\n+            wallets.emplace_back(MakeWallet(*wallet));\n+        }\n+        return wallets;\n+#else\n+        throw std::logic_error(\"Node::getWallets() called in non-wallet build.\");\n+#endif\n+    }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {\n         return MakeHandler(::uiInterface.InitMessage.connect(fn));"
      },
      {
        "sha": "b0d435695ec4b2f28d9f9ff040eaaa43cb3a69ba",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_INTERFACE_NODE_H\n \n #include <addrdb.h>     // For banmap_t\n+#include <amount.h>     // For CAmount\n #include <init.h>       // For HelpMessageMode\n #include <net.h>        // For CConnman::NumConnections\n #include <netaddress.h> // For Network\n@@ -141,6 +142,12 @@ class Node\n     //! Get network active.\n     virtual bool getNetworkActive() = 0;\n \n+    //! Get tx confirm target.\n+    virtual unsigned int getTxConfirmTarget() = 0;\n+\n+    //! Get max tx fee.\n+    virtual CAmount getMaxTxFee() = 0;\n+\n     //! Execute rpc command.\n     virtual UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) = 0;\n \n@@ -153,6 +160,9 @@ class Node\n     //! Unset RPC timer interface.\n     virtual void rpcUnsetTimerInterface(RPCTimerInterface* iface) = 0;\n \n+    //! Return interfaces for accessing wallets (if any).\n+    virtual std::vector<std::unique_ptr<Wallet>> getWallets() = 0;\n+\n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;\n     virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;"
      },
      {
        "sha": "8dae7ac547dcfef24698f66dde1f21c618991869",
        "filename": "src/interface/wallet.cpp",
        "status": "modified",
        "additions": 212,
        "deletions": 0,
        "changes": 212,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/interface/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/interface/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/wallet.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -4,23 +4,235 @@\n \n #include <interface/wallet.h>\n \n+#include <amount.h>\n+#include <chain.h>\n+#include <consensus/validation.h>\n #include <interface/handler.h>\n+#include <net.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/ismine.h>\n+#include <script/standard.h>\n+#include <support/allocators/secure.h>\n+#include <sync.h>\n+#include <ui_interface.h>\n+#include <uint256.h>\n+#include <validation.h>\n+#include <wallet/feebumper.h>\n #include <wallet/wallet.h>\n \n #include <memory>\n \n namespace interface {\n namespace {\n \n+class PendingWalletTxImpl : public PendingWalletTx\n+{\n+public:\n+    PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}\n+\n+    const CTransaction& get() override { return *m_tx; }\n+\n+    int64_t getVirtualSize() override { return GetVirtualTransactionSize(*m_tx); }\n+\n+    bool commit(WalletValueMap value_map,\n+        WalletOrderForm order_form,\n+        std::string from_account,\n+        std::string& reject_reason) override\n+    {\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n+        CValidationState state;\n+        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), std::move(from_account), m_key, g_connman.get(), state)) {\n+            reject_reason = state.GetRejectReason();\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    CTransactionRef m_tx;\n+    CWallet& m_wallet;\n+    CReserveKey m_key;\n+};\n+\n class WalletImpl : public Wallet\n {\n public:\n     WalletImpl(CWallet& wallet) : m_wallet(wallet) {}\n \n+    bool encryptWallet(const SecureString& wallet_passphrase) override\n+    {\n+        return m_wallet.EncryptWallet(wallet_passphrase);\n+    }\n+    bool isCrypted() override { return m_wallet.IsCrypted(); }\n+    bool lock() override { return m_wallet.Lock(); }\n+    bool unlock(const SecureString& wallet_passphrase) override { return m_wallet.Unlock(wallet_passphrase); }\n+    bool isLocked() override { return m_wallet.IsLocked(); }\n+    bool changeWalletPassphrase(const SecureString& old_wallet_passphrase,\n+        const SecureString& new_wallet_passphrase) override\n+    {\n+        return m_wallet.ChangeWalletPassphrase(old_wallet_passphrase, new_wallet_passphrase);\n+    }\n+    bool backupWallet(const std::string& filename) override { return m_wallet.BackupWallet(filename); }\n+    std::string getWalletName() override { return m_wallet.GetName(); }\n+    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet.GetPubKey(address, pub_key); }\n+    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet.GetKey(address, key); }\n+    bool isSpendable(const CTxDestination& dest) override { return IsMine(m_wallet, dest) & ISMINE_SPENDABLE; }\n+    bool haveWatchOnly() override { return m_wallet.HaveWatchOnly(); };\n+    bool setAddressBook(const CTxDestination& dest, const std::string& name, const std::string& purpose) override\n+    {\n+        return m_wallet.SetAddressBook(dest, name, purpose);\n+    }\n+    bool getAddress(const CTxDestination& dest, std::string* name, isminetype* is_mine) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        auto it = m_wallet.mapAddressBook.find(dest);\n+        if (it == m_wallet.mapAddressBook.end()) {\n+            return false;\n+        }\n+        if (name) {\n+            *name = it->second.name;\n+        }\n+        if (is_mine) {\n+            *is_mine = IsMine(m_wallet, dest);\n+        }\n+        return true;\n+    }\n+    bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        return m_wallet.AddDestData(dest, key, value);\n+    }\n+    bool eraseDestData(const CTxDestination& dest, const std::string& key) override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        return m_wallet.EraseDestData(dest, key);\n+    }\n+    std::vector<std::string> getDestValues(const std::string& prefix) override\n+    {\n+        return m_wallet.GetDestValues(prefix);\n+    }\n+    void lockCoin(const COutPoint& output) override\n+    {\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n+        return m_wallet.LockCoin(output);\n+    }\n+    void unlockCoin(const COutPoint& output) override\n+    {\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n+        return m_wallet.UnlockCoin(output);\n+    }\n+    bool isLockedCoin(const COutPoint& output) override\n+    {\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n+        return m_wallet.IsLockedCoin(output.hash, output.n);\n+    }\n+    void listLockedCoins(std::vector<COutPoint>& outputs) override\n+    {\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n+        return m_wallet.ListLockedCoins(outputs);\n+    }\n+    std::unique_ptr<PendingWalletTx> createTransaction(const std::vector<CRecipient>& recipients,\n+        const CCoinControl& coin_control,\n+        bool sign,\n+        int& change_pos,\n+        CAmount& fee,\n+        std::string& fail_reason) override\n+    {\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n+        auto pending = MakeUnique<PendingWalletTxImpl>(m_wallet);\n+        if (!m_wallet.CreateTransaction(recipients, pending->m_tx, pending->m_key, fee, change_pos,\n+                fail_reason, coin_control, sign)) {\n+            return {};\n+        }\n+        return std::move(pending);\n+    }\n+    bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet.TransactionCanBeAbandoned(txid); }\n+    bool abandonTransaction(const uint256& txid) override\n+    {\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n+        return m_wallet.AbandonTransaction(txid);\n+    }\n+    bool transactionCanBeBumped(const uint256& txid) override\n+    {\n+        return feebumper::TransactionCanBeBumped(&m_wallet, txid);\n+    }\n+    bool createBumpTransaction(const uint256& txid,\n+        const CCoinControl& coin_control,\n+        CAmount total_fee,\n+        std::vector<std::string>& errors,\n+        CAmount& old_fee,\n+        CAmount& new_fee,\n+        CMutableTransaction& mtx) override\n+    {\n+        return feebumper::CreateTransaction(&m_wallet, txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n+               feebumper::Result::OK;\n+    }\n+    bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(&m_wallet, mtx); }\n+    bool commitBumpTransaction(const uint256& txid,\n+        CMutableTransaction&& mtx,\n+        std::vector<std::string>& errors,\n+        uint256& bumped_txid) override\n+    {\n+        return feebumper::CommitTransaction(&m_wallet, txid, std::move(mtx), errors, bumped_txid) ==\n+               feebumper::Result::OK;\n+    }\n+    WalletBalances getBalances() override\n+    {\n+        WalletBalances result;\n+        result.balance = m_wallet.GetBalance();\n+        result.unconfirmed_balance = m_wallet.GetUnconfirmedBalance();\n+        result.immature_balance = m_wallet.GetImmatureBalance();\n+        result.have_watch_only = m_wallet.HaveWatchOnly();\n+        if (result.have_watch_only) {\n+            result.watch_only_balance = m_wallet.GetWatchOnlyBalance();\n+            result.unconfirmed_watch_only_balance = m_wallet.GetUnconfirmedWatchOnlyBalance();\n+            result.immature_watch_only_balance = m_wallet.GetImmatureWatchOnlyBalance();\n+        }\n+        return result;\n+    }\n+    bool tryGetBalances(WalletBalances& balances, int& num_blocks) override\n+    {\n+        TRY_LOCK(cs_main, locked_chain);\n+        if (!locked_chain) return false;\n+        TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n+        if (!locked_wallet) {\n+            return false;\n+        }\n+        balances = getBalances();\n+        num_blocks = ::chainActive.Height();\n+        return true;\n+    }\n+    CAmount getBalance() override { return m_wallet.GetBalance(); }\n+    CAmount getAvailableBalance(const CCoinControl& coin_control) override\n+    {\n+        return m_wallet.GetAvailableBalance(&coin_control);\n+    }\n+    bool hdEnabled() override { return m_wallet.IsHDEnabled(); }\n+    OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }\n+    OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }\n     std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) override\n     {\n         return MakeHandler(m_wallet.ShowProgress.connect(fn));\n     }\n+    std::unique_ptr<Handler> handleStatusChanged(StatusChangedFn fn) override\n+    {\n+        return MakeHandler(m_wallet.NotifyStatusChanged.connect([fn](CCryptoKeyStore*) { fn(); }));\n+    }\n+    std::unique_ptr<Handler> handleAddressBookChanged(AddressBookChangedFn fn) override\n+    {\n+        return MakeHandler(m_wallet.NotifyAddressBookChanged.connect(\n+            [fn](CWallet*, const CTxDestination& address, const std::string& label, bool is_mine,\n+                const std::string& purpose, ChangeType status) { fn(address, label, is_mine, purpose, status); }));\n+    }\n+    std::unique_ptr<Handler> handleTransactionChanged(TransactionChangedFn fn) override\n+    {\n+        return MakeHandler(m_wallet.NotifyTransactionChanged.connect(\n+            [fn, this](CWallet*, const uint256& txid, ChangeType status) { fn(txid, status); }));\n+    }\n+    std::unique_ptr<Handler> handleWatchOnlyChanged(WatchOnlyChangedFn fn) override\n+    {\n+        return MakeHandler(m_wallet.NotifyWatchonlyChanged.connect(fn));\n+    }\n \n     CWallet& m_wallet;\n };"
      },
      {
        "sha": "317b5c683c25a4d35c7895b9e0863688938a14f8",
        "filename": "src/interface/wallet.h",
        "status": "modified",
        "additions": 200,
        "deletions": 0,
        "changes": 200,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/interface/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/interface/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/wallet.h?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -5,25 +5,225 @@\n #ifndef BITCOIN_INTERFACE_WALLET_H\n #define BITCOIN_INTERFACE_WALLET_H\n \n+#include <amount.h>                    // For CAmount\n+#include <script/ismine.h>             // For isminefilter, isminetype\n+#include <script/standard.h>           // For CTxDestination\n+#include <support/allocators/secure.h> // For SecureString\n+#include <ui_interface.h>              // For ChangeType\n+\n #include <functional>\n+#include <map>\n #include <memory>\n+#include <stdint.h>\n #include <string>\n+#include <utility>\n+#include <vector>\n \n+class CCoinControl;\n+class CKey;\n class CWallet;\n+enum class OutputType;\n+struct CRecipient;\n \n namespace interface {\n \n class Handler;\n+class PendingWalletTx;\n+struct WalletBalances;\n+\n+using WalletOrderForm = std::vector<std::pair<std::string, std::string>>;\n+using WalletValueMap = std::map<std::string, std::string>;\n \n //! Interface for accessing a wallet.\n class Wallet\n {\n public:\n     virtual ~Wallet() {}\n \n+    //! Encrypt wallet.\n+    virtual bool encryptWallet(const SecureString& wallet_passphrase) = 0;\n+\n+    //! Return whether wallet is encrypted.\n+    virtual bool isCrypted() = 0;\n+\n+    //! Lock wallet.\n+    virtual bool lock() = 0;\n+\n+    //! Unlock wallet.\n+    virtual bool unlock(const SecureString& wallet_passphrase) = 0;\n+\n+    //! Return whether wallet is locked.\n+    virtual bool isLocked() = 0;\n+\n+    //! Change wallet passphrase.\n+    virtual bool changeWalletPassphrase(const SecureString& old_wallet_passphrase,\n+        const SecureString& new_wallet_passphrase) = 0;\n+\n+    //! Back up wallet.\n+    virtual bool backupWallet(const std::string& filename) = 0;\n+\n+    //! Get wallet name.\n+    virtual std::string getWalletName() = 0;\n+\n+    //! Get public key.\n+    virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n+\n+    //! Get private key.\n+    virtual bool getPrivKey(const CKeyID& address, CKey& key) = 0;\n+\n+    //! Return whether wallet has private key.\n+    virtual bool isSpendable(const CTxDestination& dest) = 0;\n+\n+    //! Return whether wallet has watch only keys.\n+    virtual bool haveWatchOnly() = 0;\n+\n+    //! Add or update address.\n+    virtual bool setAddressBook(const CTxDestination& dest, const std::string& name, const std::string& purpose) = 0;\n+\n+    //! Look up address in wallet, return whether exists.\n+    virtual bool getAddress(const CTxDestination& dest,\n+        std::string* name = nullptr,\n+        isminetype* is_mine = nullptr) = 0;\n+\n+    //! Add dest data.\n+    virtual bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) = 0;\n+\n+    //! Erase dest data.\n+    virtual bool eraseDestData(const CTxDestination& dest, const std::string& key) = 0;\n+\n+    //! Get dest values with prefix.\n+    virtual std::vector<std::string> getDestValues(const std::string& prefix) = 0;\n+\n+    //! Lock coin.\n+    virtual void lockCoin(const COutPoint& output) = 0;\n+\n+    //! Unlock coin.\n+    virtual void unlockCoin(const COutPoint& output) = 0;\n+\n+    //! Return whether coin is locked.\n+    virtual bool isLockedCoin(const COutPoint& output) = 0;\n+\n+    //! List locked coins.\n+    virtual void listLockedCoins(std::vector<COutPoint>& outputs) = 0;\n+\n+    //! Create transaction.\n+    virtual std::unique_ptr<PendingWalletTx> createTransaction(const std::vector<CRecipient>& recipients,\n+        const CCoinControl& coin_control,\n+        bool sign,\n+        int& change_pos,\n+        CAmount& fee,\n+        std::string& fail_reason) = 0;\n+\n+    //! Return whether transaction can be abandoned.\n+    virtual bool transactionCanBeAbandoned(const uint256& txid) = 0;\n+\n+    //! Abandon transaction.\n+    virtual bool abandonTransaction(const uint256& txid) = 0;\n+\n+    //! Return whether transaction can be bumped.\n+    virtual bool transactionCanBeBumped(const uint256& txid) = 0;\n+\n+    //! Create bump transaction.\n+    virtual bool createBumpTransaction(const uint256& txid,\n+        const CCoinControl& coin_control,\n+        CAmount total_fee,\n+        std::vector<std::string>& errors,\n+        CAmount& old_fee,\n+        CAmount& new_fee,\n+        CMutableTransaction& mtx) = 0;\n+\n+    //! Sign bump transaction.\n+    virtual bool signBumpTransaction(CMutableTransaction& mtx) = 0;\n+\n+    //! Commit bump transaction.\n+    virtual bool commitBumpTransaction(const uint256& txid,\n+        CMutableTransaction&& mtx,\n+        std::vector<std::string>& errors,\n+        uint256& bumped_txid) = 0;\n+\n+    //! Get balances.\n+    virtual WalletBalances getBalances() = 0;\n+\n+    //! Get balances if possible without blocking.\n+    virtual bool tryGetBalances(WalletBalances& balances, int& num_blocks) = 0;\n+\n+    //! Get balance.\n+    virtual CAmount getBalance() = 0;\n+\n+    //! Get available balance.\n+    virtual CAmount getAvailableBalance(const CCoinControl& coin_control) = 0;\n+\n+    // Return whether HD enabled.\n+    virtual bool hdEnabled() = 0;\n+\n+    // Get default address type.\n+    virtual OutputType getDefaultAddressType() = 0;\n+\n+    // Get default change type.\n+    virtual OutputType getDefaultChangeType() = 0;\n+\n     //! Register handler for show progress messages.\n     using ShowProgressFn = std::function<void(const std::string& title, int progress)>;\n     virtual std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) = 0;\n+\n+    //! Register handler for status changed messages.\n+    using StatusChangedFn = std::function<void()>;\n+    virtual std::unique_ptr<Handler> handleStatusChanged(StatusChangedFn fn) = 0;\n+\n+    //! Register handler for address book changed messages.\n+    using AddressBookChangedFn = std::function<void(const CTxDestination& address,\n+        const std::string& label,\n+        bool is_mine,\n+        const std::string& purpose,\n+        ChangeType status)>;\n+    virtual std::unique_ptr<Handler> handleAddressBookChanged(AddressBookChangedFn fn) = 0;\n+\n+    //! Register handler for transaction changed messages.\n+    using TransactionChangedFn = std::function<void(const uint256& txid, ChangeType status)>;\n+    virtual std::unique_ptr<Handler> handleTransactionChanged(TransactionChangedFn fn) = 0;\n+\n+    //! Register handler for watchonly changed messages.\n+    using WatchOnlyChangedFn = std::function<void(bool have_watch_only)>;\n+    virtual std::unique_ptr<Handler> handleWatchOnlyChanged(WatchOnlyChangedFn fn) = 0;\n+};\n+\n+//! Tracking object returned by CreateTransaction and passed to CommitTransaction.\n+class PendingWalletTx\n+{\n+public:\n+    virtual ~PendingWalletTx() {}\n+\n+    //! Get transaction data.\n+    virtual const CTransaction& get() = 0;\n+\n+    //! Get virtual transaction size.\n+    virtual int64_t getVirtualSize() = 0;\n+\n+    //! Send pending transaction and commit to wallet.\n+    virtual bool commit(WalletValueMap value_map,\n+        WalletOrderForm order_form,\n+        std::string from_account,\n+        std::string& reject_reason) = 0;\n+};\n+\n+//! Collection of wallet balances.\n+struct WalletBalances\n+{\n+    CAmount balance = 0;\n+    CAmount unconfirmed_balance = 0;\n+    CAmount immature_balance = 0;\n+    bool have_watch_only = false;\n+    CAmount watch_only_balance = 0;\n+    CAmount unconfirmed_watch_only_balance = 0;\n+    CAmount immature_watch_only_balance = 0;\n+\n+    bool balanceChanged(const WalletBalances& prev) const\n+    {\n+        return balance != prev.balance || unconfirmed_balance != prev.unconfirmed_balance ||\n+               immature_balance != prev.immature_balance || watch_only_balance != prev.watch_only_balance ||\n+               unconfirmed_watch_only_balance != prev.unconfirmed_watch_only_balance ||\n+               immature_watch_only_balance != prev.immature_watch_only_balance;\n+    }\n };\n \n //! Return implementation of Wallet interface. This function will be undefined"
      },
      {
        "sha": "33a5fe80151da4f3193c26f00b8fcf96a822daa6",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -465,8 +465,10 @@ void BitcoinApplication::initializeResult(bool success)\n \n #ifdef ENABLE_WALLET\n         bool fFirstWallet = true;\n-        for (CWalletRef pwallet : vpwallets) {\n-            WalletModel * const walletModel = new WalletModel(platformStyle, pwallet, optionsModel);\n+        auto wallets = m_node.getWallets();\n+        auto cwallet = ::vpwallets.begin();\n+        for (auto& wallet : wallets) {\n+            WalletModel * const walletModel = new WalletModel(std::move(wallet), m_node, platformStyle, *cwallet++, optionsModel);\n \n             window->addWallet(walletModel);\n             if (fFirstWallet) {"
      },
      {
        "sha": "63a2a200b2de174173eab1efb1bb1248e590db3a",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -1010,7 +1010,7 @@ void BitcoinGUI::incomingTransaction(const QString& date, int unit, const CAmoun\n     // On new transaction, make an info balloon\n     QString msg = tr(\"Date: %1\\n\").arg(date) +\n                   tr(\"Amount: %1\\n\").arg(BitcoinUnits::formatWithUnit(unit, amount, true));\n-    if (WalletModel::isMultiwallet() && !walletName.isEmpty()) {\n+    if (m_node.getWallets().size() > 1 && !walletName.isEmpty()) {\n         msg += tr(\"Wallet: %1\\n\").arg(walletName);\n     }\n     msg += tr(\"Type: %1\\n\").arg(type);\n@@ -1116,7 +1116,7 @@ void BitcoinGUI::updateWalletStatus()\n     }\n     WalletModel * const walletModel = walletView->getWalletModel();\n     setEncryptionStatus(walletModel->getEncryptionStatus());\n-    setHDStatus(walletModel->hdEnabled());\n+    setHDStatus(walletModel->wallet().hdEnabled());\n }\n #endif // ENABLE_WALLET\n "
      },
      {
        "sha": "0a656a6f9bebcfa138013b82b0fb0a2d2c1d6324",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -209,7 +209,7 @@ void CoinControlDialog::showMenu(const QPoint &point)\n         if (item->text(COLUMN_TXHASH).length() == 64) // transaction hash is 64 characters (this means it is a child node, so it is not a parent node in tree mode)\n         {\n             copyTransactionHashAction->setEnabled(true);\n-            if (model->isLockedCoin(uint256S(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt()))\n+            if (model->wallet().isLockedCoin(COutPoint(uint256S(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt())))\n             {\n                 lockAction->setEnabled(false);\n                 unlockAction->setEnabled(true);\n@@ -269,7 +269,7 @@ void CoinControlDialog::lockCoin()\n         contextMenuItem->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n \n     COutPoint outpt(uint256S(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n-    model->lockCoin(outpt);\n+    model->wallet().lockCoin(outpt);\n     contextMenuItem->setDisabled(true);\n     contextMenuItem->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n     updateLabelLocked();\n@@ -279,7 +279,7 @@ void CoinControlDialog::lockCoin()\n void CoinControlDialog::unlockCoin()\n {\n     COutPoint outpt(uint256S(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n-    model->unlockCoin(outpt);\n+    model->wallet().unlockCoin(outpt);\n     contextMenuItem->setDisabled(false);\n     contextMenuItem->setIcon(COLUMN_CHECKBOX, QIcon());\n     updateLabelLocked();\n@@ -405,7 +405,7 @@ void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)\n void CoinControlDialog::updateLabelLocked()\n {\n     std::vector<COutPoint> vOutpts;\n-    model->listLockedCoins(vOutpts);\n+    model->wallet().listLockedCoins(vOutpts);\n     if (vOutpts.size() > 0)\n     {\n        ui->labelLocked->setText(tr(\"(%1 locked)\").arg(vOutpts.size()));\n@@ -479,7 +479,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CPubKey pubkey;\n             CKeyID *keyid = boost::get<CKeyID>(&address);\n-            if (keyid && model->getPubKey(*keyid, pubkey))\n+            if (keyid && model->wallet().getPubKey(*keyid, pubkey))\n             {\n                 nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);\n             }\n@@ -706,7 +706,7 @@ void CoinControlDialog::updateView()\n             itemOutput->setText(COLUMN_VOUT_INDEX, QString::number(out.i));\n \n              // disable locked coins\n-            if (model->isLockedCoin(txhash, out.i))\n+            if (model->wallet().isLockedCoin(COutPoint(txhash, out.i)))\n             {\n                 COutPoint outpt(txhash, out.i);\n                 coinControl()->UnSelect(outpt); // just to be sure"
      },
      {
        "sha": "aaea6501413dc4c5929b5968d687a42faf51aafb",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -231,13 +231,15 @@ void OverviewPage::setWalletModel(WalletModel *model)\n         ui->listTransactions->setModelColumn(TransactionTableModel::ToAddress);\n \n         // Keep up to date with wallet\n-        setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(),\n-                   model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n+        interface::Wallet& wallet = model->wallet();\n+        interface::WalletBalances balances = wallet.getBalances();\n+        setBalance(balances.balance, balances.unconfirmed_balance, balances.immature_balance,\n+                   balances.watch_only_balance, balances.unconfirmed_watch_only_balance, balances.immature_watch_only_balance);\n         connect(model, SIGNAL(balanceChanged(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)), this, SLOT(setBalance(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)));\n \n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n-        updateWatchOnlyLabels(model->haveWatchOnly());\n+        updateWatchOnlyLabels(wallet.haveWatchOnly());\n         connect(model, SIGNAL(notifyWatchonlyChanged(bool)), this, SLOT(updateWatchOnlyLabels(bool)));\n     }\n "
      },
      {
        "sha": "70e11f0296273c9edb753ee5bbd448509516eb91",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -95,13 +95,13 @@ void ReceiveCoinsDialog::setModel(WalletModel *_model)\n         columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, AMOUNT_MINIMUM_COLUMN_WIDTH, DATE_COLUMN_WIDTH, this);\n \n         // configure bech32 checkbox, disable if launched with legacy as default:\n-        if (model->getDefaultAddressType() == OutputType::BECH32) {\n+        if (model->wallet().getDefaultAddressType() == OutputType::BECH32) {\n             ui->useBech32->setCheckState(Qt::Checked);\n         } else {\n             ui->useBech32->setCheckState(Qt::Unchecked);\n         }\n \n-        ui->useBech32->setVisible(model->getDefaultAddressType() != OutputType::LEGACY);\n+        ui->useBech32->setVisible(model->wallet().getDefaultAddressType() != OutputType::LEGACY);\n     }\n }\n \n@@ -144,7 +144,7 @@ void ReceiveCoinsDialog::on_receiveButton_clicked()\n     QString address;\n     QString label = ui->reqLabel->text();\n     /* Generate new receiving address */\n-    OutputType address_type = model->getDefaultAddressType();\n+    OutputType address_type = model->wallet().getDefaultAddressType();\n     if (address_type != OutputType::LEGACY) {\n         address_type = ui->useBech32->isChecked() ? OutputType::BECH32 : OutputType::P2SH_SEGWIT;\n     }"
      },
      {
        "sha": "98f08bbc59c8ce2de637d83a7fdf30e66c79ccdb",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -15,6 +15,7 @@\n #include <qt/sendcoinsentry.h>\n \n #include <chainparams.h>\n+#include <interface/node.h>\n #include <key_io.h>\n #include <wallet/coincontrol.h>\n #include <validation.h> // mempool and minRelayTxFee\n@@ -149,8 +150,9 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n             }\n         }\n \n-        setBalance(_model->getBalance(), _model->getUnconfirmedBalance(), _model->getImmatureBalance(),\n-                   _model->getWatchBalance(), _model->getWatchUnconfirmedBalance(), _model->getWatchImmatureBalance());\n+        interface::WalletBalances balances = _model->wallet().getBalances();\n+        setBalance(balances.balance, balances.unconfirmed_balance, balances.immature_balance,\n+                   balances.watch_only_balance, balances.unconfirmed_watch_only_balance, balances.immature_watch_only_balance);\n         connect(_model, SIGNAL(balanceChanged(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)), this, SLOT(setBalance(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)));\n         connect(_model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n         updateDisplayUnit();\n@@ -193,7 +195,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n             settings.remove(\"nSmartFeeSliderPosition\");\n         }\n         if (settings.value(\"nConfTarget\").toInt() == 0)\n-            ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(model->getDefaultConfirmTarget()));\n+            ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(model->node().getTxConfirmTarget()));\n         else\n             ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(settings.value(\"nConfTarget\").toInt()));\n     }\n@@ -372,7 +374,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         accept();\n         CoinControlDialog::coinControl()->UnSelectAll();\n         coinControlUpdateLabels();\n-        Q_EMIT coinsSent(currentTransaction.getTransaction()->GetHash());\n+        Q_EMIT coinsSent(currentTransaction.getWtx()->get().GetHash());\n     }\n     fNewRecipientAllowed = true;\n }\n@@ -532,7 +534,7 @@ void SendCoinsDialog::setBalance(const CAmount& balance, const CAmount& unconfir\n \n void SendCoinsDialog::updateDisplayUnit()\n {\n-    setBalance(model->getBalance(), 0, 0, 0, 0, 0);\n+    setBalance(model->wallet().getBalance(), 0, 0, 0, 0, 0);\n     ui->customFee->setDisplayUnit(model->getOptionsModel()->getDisplayUnit());\n     updateMinFeeLabel();\n     updateSmartFeeLabel();\n@@ -618,7 +620,7 @@ void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n     }\n \n     // Calculate available amount to send.\n-    CAmount amount = model->getBalance(&coin_control);\n+    CAmount amount = model->wallet().getAvailableBalance(coin_control);\n     for (int i = 0; i < ui->entries->count(); ++i) {\n         SendCoinsEntry* e = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n         if (e && !e->isHidden() && e != entry) {\n@@ -814,7 +816,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n         }\n         else // Valid address\n         {\n-            if (!model->IsSpendable(dest)) {\n+            if (!model->wallet().isSpendable(dest)) {\n                 ui->labelCoinControlChangeLabel->setText(tr(\"Warning: Unknown change address\"));\n \n                 // confirmation dialog"
      },
      {
        "sha": "94a3ad7987b713e902f56e992a92e3ab9fafc7fb",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -140,7 +140,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     }\n \n     CKey key;\n-    if (!model->getPrivKey(*keyID, key))\n+    if (!model->wallet().getPrivKey(*keyID, key))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));"
      },
      {
        "sha": "d28d4bd7e6de2f7ee1af2272a60034254a3a788a",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -178,7 +178,9 @@ void TestGUI()\n     TransactionView transactionView(platformStyle.get());\n     auto node = interface::MakeNode();\n     OptionsModel optionsModel(*node);\n-    WalletModel walletModel(platformStyle.get(), &wallet, &optionsModel);\n+    vpwallets.insert(vpwallets.begin(), &wallet);\n+    WalletModel walletModel(std::move(node->getWallets()[0]), *node, platformStyle.get(), &wallet, &optionsModel);\n+    vpwallets.erase(vpwallets.begin());\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);\n \n@@ -203,7 +205,7 @@ void TestGUI()\n     QLabel* balanceLabel = overviewPage.findChild<QLabel*>(\"labelBalance\");\n     QString balanceText = balanceLabel->text();\n     int unit = walletModel.getOptionsModel()->getDisplayUnit();\n-    CAmount balance = walletModel.getBalance();\n+    CAmount balance = walletModel.wallet().getBalance();\n     QString balanceComparison = BitcoinUnits::formatWithUnit(unit, balance, false, BitcoinUnits::separatorAlways);\n     QCOMPARE(balanceText, balanceComparison);\n "
      },
      {
        "sha": "aa6444245a9875c70fbf11c898745de5ddbd2d55",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -254,7 +254,7 @@ void TransactionView::setModel(WalletModel *_model)\n         }\n \n         // show/hide column Watch-only\n-        updateWatchOnlyColumn(_model->haveWatchOnly());\n+        updateWatchOnlyColumn(_model->wallet().haveWatchOnly());\n \n         // Watch-only signal\n         connect(_model, SIGNAL(notifyWatchonlyChanged(bool)), this, SLOT(updateWatchOnlyColumn(bool)));\n@@ -364,7 +364,7 @@ void TransactionView::exportClicked()\n     // name, column, role\n     writer.setModel(transactionProxyModel);\n     writer.addColumn(tr(\"Confirmed\"), 0, TransactionTableModel::ConfirmedRole);\n-    if (model->haveWatchOnly())\n+    if (model->wallet().haveWatchOnly())\n         writer.addColumn(tr(\"Watch-only\"), TransactionTableModel::Watchonly);\n     writer.addColumn(tr(\"Date\"), 0, TransactionTableModel::DateRole);\n     writer.addColumn(tr(\"Type\"), TransactionTableModel::Type, Qt::EditRole);\n@@ -393,8 +393,8 @@ void TransactionView::contextualMenu(const QPoint &point)\n     // check if transaction can be abandoned, disable context menu action in case it doesn't\n     uint256 hash;\n     hash.SetHex(selection.at(0).data(TransactionTableModel::TxHashRole).toString().toStdString());\n-    abandonAction->setEnabled(model->transactionCanBeAbandoned(hash));\n-    bumpFeeAction->setEnabled(model->transactionCanBeBumped(hash));\n+    abandonAction->setEnabled(model->wallet().transactionCanBeAbandoned(hash));\n+    bumpFeeAction->setEnabled(model->wallet().transactionCanBeBumped(hash));\n \n     if(index.isValid())\n     {\n@@ -414,7 +414,7 @@ void TransactionView::abandonTx()\n     hash.SetHex(hashQStr.toStdString());\n \n     // Abandon the wallet transaction over the walletModel\n-    model->abandonTransaction(hash);\n+    model->wallet().abandonTransaction(hash);\n \n     // Update the table\n     model->getTransactionTableModel()->updateTransaction(hashQStr, CT_UPDATED, false);"
      },
      {
        "sha": "7a19773cf7a176fa2081c0a71d6fd32538418c38",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 230,
        "changes": 306,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -15,6 +15,8 @@\n #include <qt/transactiontablemodel.h>\n \n #include <chain.h>\n+#include <interface/handler.h>\n+#include <interface/node.h>\n #include <key_io.h>\n #include <keystore.h>\n #include <validation.h>\n@@ -37,21 +39,19 @@\n #include <QTimer>\n \n \n-WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *_wallet, OptionsModel *_optionsModel, QObject *parent) :\n-    QObject(parent), wallet(_wallet), optionsModel(_optionsModel), addressTableModel(0),\n+WalletModel::WalletModel(std::unique_ptr<interface::Wallet> wallet, interface::Node& node, const PlatformStyle *platformStyle, CWallet *_wallet, OptionsModel *_optionsModel, QObject *parent) :\n+    QObject(parent), m_wallet(std::move(wallet)), m_node(node), cwallet(_wallet), optionsModel(_optionsModel), addressTableModel(0),\n     transactionTableModel(0),\n     recentRequestsTableModel(0),\n-    cachedBalance(0), cachedUnconfirmedBalance(0), cachedImmatureBalance(0),\n-    cachedWatchOnlyBalance{0}, cachedWatchUnconfBalance{0}, cachedWatchImmatureBalance{0},\n     cachedEncryptionStatus(Unencrypted),\n     cachedNumBlocks(0)\n {\n-    fHaveWatchOnly = wallet->HaveWatchOnly();\n+    fHaveWatchOnly = m_wallet->haveWatchOnly();\n     fForceCheckBalanceChanged = false;\n \n-    addressTableModel = new AddressTableModel(wallet, this);\n-    transactionTableModel = new TransactionTableModel(platformStyle, wallet, this);\n-    recentRequestsTableModel = new RecentRequestsTableModel(wallet, this);\n+    addressTableModel = new AddressTableModel(cwallet, this);\n+    transactionTableModel = new TransactionTableModel(platformStyle, cwallet, this);\n+    recentRequestsTableModel = new RecentRequestsTableModel(cwallet, this);\n \n     // This timer will be fired repeatedly to update the balance\n     pollTimer = new QTimer(this);\n@@ -66,46 +66,6 @@ WalletModel::~WalletModel()\n     unsubscribeFromCoreSignals();\n }\n \n-CAmount WalletModel::getBalance(const CCoinControl *coinControl) const\n-{\n-    if (coinControl)\n-    {\n-        return wallet->GetAvailableBalance(coinControl);\n-    }\n-\n-    return wallet->GetBalance();\n-}\n-\n-CAmount WalletModel::getUnconfirmedBalance() const\n-{\n-    return wallet->GetUnconfirmedBalance();\n-}\n-\n-CAmount WalletModel::getImmatureBalance() const\n-{\n-    return wallet->GetImmatureBalance();\n-}\n-\n-bool WalletModel::haveWatchOnly() const\n-{\n-    return fHaveWatchOnly;\n-}\n-\n-CAmount WalletModel::getWatchBalance() const\n-{\n-    return wallet->GetWatchOnlyBalance();\n-}\n-\n-CAmount WalletModel::getWatchUnconfirmedBalance() const\n-{\n-    return wallet->GetUnconfirmedWatchOnlyBalance();\n-}\n-\n-CAmount WalletModel::getWatchImmatureBalance() const\n-{\n-    return wallet->GetImmatureWatchOnlyBalance();\n-}\n-\n void WalletModel::updateStatus()\n {\n     EncryptionStatus newEncryptionStatus = getEncryptionStatus();\n@@ -117,55 +77,34 @@ void WalletModel::updateStatus()\n \n void WalletModel::pollBalanceChanged()\n {\n-    // Get required locks upfront. This avoids the GUI from getting stuck on\n-    // periodical polls if the core is holding the locks for a longer time -\n-    // for example, during a wallet rescan.\n-    TRY_LOCK(cs_main, lockMain);\n-    if(!lockMain)\n-        return;\n-    TRY_LOCK(wallet->cs_wallet, lockWallet);\n-    if(!lockWallet)\n+    // Try to get balances and return early if locks can't be acquired. This\n+    // avoids the GUI from getting stuck on periodical polls if the core is\n+    // holding the locks for a longer time - for example, during a wallet\n+    // rescan.\n+    interface::WalletBalances new_balances;\n+    int numBlocks = -1;\n+    if (!m_wallet->tryGetBalances(new_balances, numBlocks)) {\n         return;\n+    }\n \n-    if(fForceCheckBalanceChanged || chainActive.Height() != cachedNumBlocks)\n+    if(fForceCheckBalanceChanged || m_node.getNumBlocks() != cachedNumBlocks)\n     {\n         fForceCheckBalanceChanged = false;\n \n         // Balance and number of transactions might have changed\n-        cachedNumBlocks = chainActive.Height();\n+        cachedNumBlocks = m_node.getNumBlocks();\n \n-        checkBalanceChanged();\n+        checkBalanceChanged(new_balances);\n         if(transactionTableModel)\n             transactionTableModel->updateConfirmations();\n     }\n }\n \n-void WalletModel::checkBalanceChanged()\n+void WalletModel::checkBalanceChanged(const interface::WalletBalances& new_balances)\n {\n-    CAmount newBalance = getBalance();\n-    CAmount newUnconfirmedBalance = getUnconfirmedBalance();\n-    CAmount newImmatureBalance = getImmatureBalance();\n-    CAmount newWatchOnlyBalance = 0;\n-    CAmount newWatchUnconfBalance = 0;\n-    CAmount newWatchImmatureBalance = 0;\n-    if (haveWatchOnly())\n-    {\n-        newWatchOnlyBalance = getWatchBalance();\n-        newWatchUnconfBalance = getWatchUnconfirmedBalance();\n-        newWatchImmatureBalance = getWatchImmatureBalance();\n-    }\n-\n-    if(cachedBalance != newBalance || cachedUnconfirmedBalance != newUnconfirmedBalance || cachedImmatureBalance != newImmatureBalance ||\n-        cachedWatchOnlyBalance != newWatchOnlyBalance || cachedWatchUnconfBalance != newWatchUnconfBalance || cachedWatchImmatureBalance != newWatchImmatureBalance)\n-    {\n-        cachedBalance = newBalance;\n-        cachedUnconfirmedBalance = newUnconfirmedBalance;\n-        cachedImmatureBalance = newImmatureBalance;\n-        cachedWatchOnlyBalance = newWatchOnlyBalance;\n-        cachedWatchUnconfBalance = newWatchUnconfBalance;\n-        cachedWatchImmatureBalance = newWatchImmatureBalance;\n-        Q_EMIT balanceChanged(newBalance, newUnconfirmedBalance, newImmatureBalance,\n-                            newWatchOnlyBalance, newWatchUnconfBalance, newWatchImmatureBalance);\n+    if(new_balances.balanceChanged(m_cached_balances)) {\n+        m_cached_balances = new_balances;\n+        Q_EMIT balanceChanged(new_balances.balance, new_balances.unconfirmed_balance, new_balances.immature_balance, new_balances.watch_only_balance, new_balances.unconfirmed_watch_only_balance, new_balances.immature_watch_only_balance);\n     }\n }\n \n@@ -260,30 +199,25 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         return DuplicateAddress;\n     }\n \n-    CAmount nBalance = getBalance(&coinControl);\n+    CAmount nBalance = m_wallet->getAvailableBalance(coinControl);\n \n     if(total > nBalance)\n     {\n         return AmountExceedsBalance;\n     }\n \n     {\n-        LOCK2(cs_main, wallet->cs_wallet);\n-\n-        transaction.newPossibleKeyChange(wallet);\n-\n         CAmount nFeeRequired = 0;\n         int nChangePosRet = -1;\n         std::string strFailReason;\n \n-        CTransactionRef& newTx = transaction.getTransaction();\n-        CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        bool fCreated = wallet->CreateTransaction(vecSend, newTx, *keyChange, nFeeRequired, nChangePosRet, strFailReason, coinControl);\n+        auto& newTx = transaction.getWtx();\n+        newTx = m_wallet->createTransaction(vecSend, coinControl, true /* sign */, nChangePosRet, nFeeRequired, strFailReason);\n         transaction.setTransactionFee(nFeeRequired);\n-        if (fSubtractFeeFromAmount && fCreated)\n+        if (fSubtractFeeFromAmount && newTx)\n             transaction.reassignAmounts(nChangePosRet);\n \n-        if(!fCreated)\n+        if(!newTx)\n         {\n             if(!fSubtractFeeFromAmount && (total + nFeeRequired) > nBalance)\n             {\n@@ -297,7 +231,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         // reject absurdly high fee. (This can never happen because the\n         // wallet caps the fee at maxTxFee. This merely serves as a\n         // belt-and-suspenders check)\n-        if (nFeeRequired > maxTxFee)\n+        if (nFeeRequired > m_node.getMaxTxFee())\n             return AbsurdFee;\n     }\n \n@@ -309,8 +243,6 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n     QByteArray transaction_array; /* store serialized transaction */\n \n     {\n-        LOCK2(cs_main, wallet->cs_wallet);\n-\n         std::vector<std::pair<std::string, std::string>> vOrderForm;\n         for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n         {\n@@ -330,14 +262,13 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n                 vOrderForm.emplace_back(\"Message\", rcp.message.toStdString());\n         }\n \n-        CTransactionRef& newTx = transaction.getTransaction();\n-        CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        CValidationState state;\n-        if (!wallet->CommitTransaction(newTx, {} /* mapValue */, std::move(vOrderForm), {} /* fromAccount */, *keyChange, g_connman.get(), state))\n-            return SendCoinsReturn(TransactionCommitFailed, QString::fromStdString(state.GetRejectReason()));\n+        auto& newTx = transaction.getWtx();\n+        std::string rejectReason;\n+        if (!newTx->commit({} /* mapValue */, std::move(vOrderForm), {} /* fromAccount */, rejectReason))\n+            return SendCoinsReturn(TransactionCommitFailed, QString::fromStdString(rejectReason));\n \n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-        ssTx << newTx;\n+        ssTx << newTx->get();\n         transaction_array.append(&(ssTx[0]), ssTx.size());\n     }\n \n@@ -352,24 +283,22 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n             CTxDestination dest = DecodeDestination(strAddress);\n             std::string strLabel = rcp.label.toStdString();\n             {\n-                LOCK(wallet->cs_wallet);\n-\n-                std::map<CTxDestination, CAddressBookData>::iterator mi = wallet->mapAddressBook.find(dest);\n-\n                 // Check if we have a new address or an updated label\n-                if (mi == wallet->mapAddressBook.end())\n+                std::string name;\n+                if (!m_wallet->getAddress(dest, &name))\n                 {\n-                    wallet->SetAddressBook(dest, strLabel, \"send\");\n+                    m_wallet->setAddressBook(dest, strLabel, \"send\");\n                 }\n-                else if (mi->second.name != strLabel)\n+                else if (name != strLabel)\n                 {\n-                    wallet->SetAddressBook(dest, strLabel, \"\"); // \"\" means don't change purpose\n+                    m_wallet->setAddressBook(dest, strLabel, \"\"); // \"\" means don't change purpose\n                 }\n             }\n         }\n-        Q_EMIT coinsSent(wallet, rcp, transaction_array);\n+        Q_EMIT coinsSent(cwallet, rcp, transaction_array);\n     }\n-    checkBalanceChanged(); // update balance immediately, otherwise there could be a short noticeable delay until pollBalanceChanged hits\n+\n+    checkBalanceChanged(m_wallet->getBalances()); // update balance immediately, otherwise there could be a short noticeable delay until pollBalanceChanged hits\n \n     return SendCoinsReturn(OK);\n }\n@@ -396,11 +325,11 @@ RecentRequestsTableModel *WalletModel::getRecentRequestsTableModel()\n \n WalletModel::EncryptionStatus WalletModel::getEncryptionStatus() const\n {\n-    if(!wallet->IsCrypted())\n+    if(!m_wallet->isCrypted())\n     {\n         return Unencrypted;\n     }\n-    else if(wallet->IsLocked())\n+    else if(m_wallet->isLocked())\n     {\n         return Locked;\n     }\n@@ -415,7 +344,7 @@ bool WalletModel::setWalletEncrypted(bool encrypted, const SecureString &passphr\n     if(encrypted)\n     {\n         // Encrypt\n-        return wallet->EncryptWallet(passphrase);\n+        return m_wallet->encryptWallet(passphrase);\n     }\n     else\n     {\n@@ -429,39 +358,29 @@ bool WalletModel::setWalletLocked(bool locked, const SecureString &passPhrase)\n     if(locked)\n     {\n         // Lock\n-        return wallet->Lock();\n+        return m_wallet->lock();\n     }\n     else\n     {\n         // Unlock\n-        return wallet->Unlock(passPhrase);\n+        return m_wallet->unlock(passPhrase);\n     }\n }\n \n bool WalletModel::changePassphrase(const SecureString &oldPass, const SecureString &newPass)\n {\n-    bool retval;\n-    {\n-        LOCK(wallet->cs_wallet);\n-        wallet->Lock(); // Make sure wallet is locked before attempting pass change\n-        retval = wallet->ChangeWalletPassphrase(oldPass, newPass);\n-    }\n-    return retval;\n-}\n-\n-bool WalletModel::backupWallet(const QString &filename)\n-{\n-    return wallet->BackupWallet(filename.toLocal8Bit().data());\n+    m_wallet->lock(); // Make sure wallet is locked before attempting pass change\n+    return m_wallet->changeWalletPassphrase(oldPass, newPass);\n }\n \n // Handlers for core signals\n-static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel, CCryptoKeyStore *wallet)\n+static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel)\n {\n     qDebug() << \"NotifyKeyStoreStatusChanged\";\n     QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n }\n \n-static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,\n+static void NotifyAddressBookChanged(WalletModel *walletmodel,\n         const CTxDestination &address, const std::string &label, bool isMine,\n         const std::string &purpose, ChangeType status)\n {\n@@ -478,9 +397,8 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,\n                               Q_ARG(int, status));\n }\n \n-static void NotifyTransactionChanged(WalletModel *walletmodel, CWallet *wallet, const uint256 &hash, ChangeType status)\n+static void NotifyTransactionChanged(WalletModel *walletmodel, const uint256 &hash, ChangeType status)\n {\n-    Q_UNUSED(wallet);\n     Q_UNUSED(hash);\n     Q_UNUSED(status);\n     QMetaObject::invokeMethod(walletmodel, \"updateTransaction\", Qt::QueuedConnection);\n@@ -503,21 +421,21 @@ static void NotifyWatchonlyChanged(WalletModel *walletmodel, bool fHaveWatchonly\n void WalletModel::subscribeToCoreSignals()\n {\n     // Connect signals to wallet\n-    wallet->NotifyStatusChanged.connect(boost::bind(&NotifyKeyStoreStatusChanged, this, _1));\n-    wallet->NotifyAddressBookChanged.connect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4, _5, _6));\n-    wallet->NotifyTransactionChanged.connect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n-    wallet->ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n-    wallet->NotifyWatchonlyChanged.connect(boost::bind(NotifyWatchonlyChanged, this, _1));\n+    m_handler_status_changed = m_wallet->handleStatusChanged(boost::bind(&NotifyKeyStoreStatusChanged, this));\n+    m_handler_address_book_changed = m_wallet->handleAddressBookChanged(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4, _5));\n+    m_handler_transaction_changed = m_wallet->handleTransactionChanged(boost::bind(NotifyTransactionChanged, this, _1, _2));\n+    m_handler_show_progress = m_wallet->handleShowProgress(boost::bind(ShowProgress, this, _1, _2));\n+    m_handler_watch_only_changed = m_wallet->handleWatchOnlyChanged(boost::bind(NotifyWatchonlyChanged, this, _1));\n }\n \n void WalletModel::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from wallet\n-    wallet->NotifyStatusChanged.disconnect(boost::bind(&NotifyKeyStoreStatusChanged, this, _1));\n-    wallet->NotifyAddressBookChanged.disconnect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4, _5, _6));\n-    wallet->NotifyTransactionChanged.disconnect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n-    wallet->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n-    wallet->NotifyWatchonlyChanged.disconnect(boost::bind(NotifyWatchonlyChanged, this, _1));\n+    m_handler_status_changed->disconnect();\n+    m_handler_address_book_changed->disconnect();\n+    m_handler_transaction_changed->disconnect();\n+    m_handler_show_progress->disconnect();\n+    m_handler_watch_only_changed->disconnect();\n }\n \n // WalletModel::UnlockContext implementation\n@@ -557,29 +475,14 @@ void WalletModel::UnlockContext::CopyFrom(const UnlockContext& rhs)\n     rhs.relock = false;\n }\n \n-bool WalletModel::getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n-{\n-    return wallet->GetPubKey(address, vchPubKeyOut);\n-}\n-\n-bool WalletModel::IsSpendable(const CTxDestination& dest) const\n-{\n-    return IsMine(*wallet, dest) & ISMINE_SPENDABLE;\n-}\n-\n-bool WalletModel::getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const\n-{\n-    return wallet->GetKey(address, vchPrivKeyOut);\n-}\n-\n // returns a list of COutputs from COutPoints\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n+    LOCK2(cs_main, cwallet->cs_wallet);\n     for (const COutPoint& outpoint : vOutpoints)\n     {\n-        auto it = wallet->mapWallet.find(outpoint.hash);\n-        if (it == wallet->mapWallet.end()) continue;\n+        auto it = cwallet->mapWallet.find(outpoint.hash);\n+        if (it == cwallet->mapWallet.end()) continue;\n         int nDepth = it->second.GetDepthInMainChain();\n         if (nDepth < 0) continue;\n         COutput out(&it->second, outpoint.n, nDepth, true /* spendable */, true /* solvable */, true /* safe */);\n@@ -589,48 +492,24 @@ void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vect\n \n bool WalletModel::isSpent(const COutPoint& outpoint) const\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n-    return wallet->IsSpent(outpoint.hash, outpoint.n);\n+    LOCK2(cs_main, cwallet->cs_wallet);\n+    return cwallet->IsSpent(outpoint.hash, outpoint.n);\n }\n \n // AvailableCoins + LockedCoins grouped by wallet address (put change in one group with wallet address)\n void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const\n {\n-    for (auto& group : wallet->ListCoins()) {\n+    for (auto& group : cwallet->ListCoins()) {\n         auto& resultGroup = mapCoins[QString::fromStdString(EncodeDestination(group.first))];\n         for (auto& coin : group.second) {\n             resultGroup.emplace_back(std::move(coin));\n         }\n     }\n }\n \n-bool WalletModel::isLockedCoin(uint256 hash, unsigned int n) const\n-{\n-    LOCK2(cs_main, wallet->cs_wallet);\n-    return wallet->IsLockedCoin(hash, n);\n-}\n-\n-void WalletModel::lockCoin(COutPoint& output)\n-{\n-    LOCK2(cs_main, wallet->cs_wallet);\n-    wallet->LockCoin(output);\n-}\n-\n-void WalletModel::unlockCoin(COutPoint& output)\n-{\n-    LOCK2(cs_main, wallet->cs_wallet);\n-    wallet->UnlockCoin(output);\n-}\n-\n-void WalletModel::listLockedCoins(std::vector<COutPoint>& vOutpts)\n-{\n-    LOCK2(cs_main, wallet->cs_wallet);\n-    wallet->ListLockedCoins(vOutpts);\n-}\n-\n void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)\n {\n-    vReceiveRequests = wallet->GetDestValues(\"rr\"); // receive request\n+    vReceiveRequests = m_wallet->getDestValues(\"rr\"); // receive request\n }\n \n bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest)\n@@ -641,27 +520,10 @@ bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t\n     ss << nId;\n     std::string key = \"rr\" + ss.str(); // \"rr\" prefix = \"receive request\" in destdata\n \n-    LOCK(wallet->cs_wallet);\n     if (sRequest.empty())\n-        return wallet->EraseDestData(dest, key);\n+        return m_wallet->eraseDestData(dest, key);\n     else\n-        return wallet->AddDestData(dest, key, sRequest);\n-}\n-\n-bool WalletModel::transactionCanBeAbandoned(uint256 hash) const\n-{\n-    return wallet->TransactionCanBeAbandoned(hash);\n-}\n-\n-bool WalletModel::abandonTransaction(uint256 hash) const\n-{\n-    LOCK2(cs_main, wallet->cs_wallet);\n-    return wallet->AbandonTransaction(hash);\n-}\n-\n-bool WalletModel::transactionCanBeBumped(uint256 hash) const\n-{\n-    return feebumper::TransactionCanBeBumped(wallet, hash);\n+        return m_wallet->addDestData(dest, key, sRequest);\n }\n \n bool WalletModel::bumpFee(uint256 hash)\n@@ -672,7 +534,7 @@ bool WalletModel::bumpFee(uint256 hash)\n     CAmount old_fee;\n     CAmount new_fee;\n     CMutableTransaction mtx;\n-    if (feebumper::CreateTransaction(wallet, hash, coin_control, 0 /* totalFee */, errors, old_fee, new_fee, mtx) != feebumper::Result::OK) {\n+    if (!m_wallet->createBumpTransaction(hash, coin_control, 0 /* totalFee */, errors, old_fee, new_fee, mtx)) {\n         QMessageBox::critical(0, tr(\"Fee bump error\"), tr(\"Increasing transaction fee failed\") + \"<br />(\" +\n             (errors.size() ? QString::fromStdString(errors[0]) : \"\") +\")\");\n          return false;\n@@ -711,13 +573,13 @@ bool WalletModel::bumpFee(uint256 hash)\n     }\n \n     // sign bumped transaction\n-    if (!feebumper::SignTransaction(wallet, mtx)) {\n+    if (!m_wallet->signBumpTransaction(mtx)) {\n         QMessageBox::critical(0, tr(\"Fee bump error\"), tr(\"Can't sign transaction.\"));\n         return false;\n     }\n     // commit the bumped transaction\n     uint256 txid;\n-    if (feebumper::CommitTransaction(wallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n+    if(!m_wallet->commitBumpTransaction(hash, std::move(mtx), errors, txid)) {\n         QMessageBox::critical(0, tr(\"Fee bump error\"), tr(\"Could not commit transaction\") + \"<br />(\" +\n             QString::fromStdString(errors[0])+\")\");\n          return false;\n@@ -730,28 +592,12 @@ bool WalletModel::isWalletEnabled()\n    return !gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET);\n }\n \n-bool WalletModel::hdEnabled() const\n-{\n-    return wallet->IsHDEnabled();\n-}\n-\n-OutputType WalletModel::getDefaultAddressType() const\n-{\n-    return wallet->m_default_address_type;\n-}\n-\n-int WalletModel::getDefaultConfirmTarget() const\n-{\n-    return nTxConfirmTarget;\n-}\n-\n QString WalletModel::getWalletName() const\n {\n-    LOCK(wallet->cs_wallet);\n-    return QString::fromStdString(wallet->GetName());\n+    return QString::fromStdString(m_wallet->getWalletName());\n }\n \n bool WalletModel::isMultiwallet()\n {\n-    return gArgs.GetArgs(\"-wallet\").size() > 1;\n+    return m_node.getWallets().size() > 1;\n }"
      },
      {
        "sha": "8ff19f4ae5713e17217b11d907cfba0dab6ab5ba",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 20,
        "deletions": 39,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -13,6 +13,7 @@\n #include <qt/paymentrequestplus.h>\n #include <qt/walletmodeltransaction.h>\n \n+#include <interface/wallet.h>\n #include <support/allocators/secure.h>\n \n #include <map>\n@@ -34,9 +35,12 @@ class CKeyID;\n class COutPoint;\n class COutput;\n class CPubKey;\n-class CWallet;\n class uint256;\n \n+namespace interface {\n+class Node;\n+} // namespace interface\n+\n QT_BEGIN_NAMESPACE\n class QTimer;\n QT_END_NAMESPACE\n@@ -107,7 +111,7 @@ class WalletModel : public QObject\n     Q_OBJECT\n \n public:\n-    explicit WalletModel(const PlatformStyle *platformStyle, CWallet *wallet, OptionsModel *optionsModel, QObject *parent = 0);\n+    explicit WalletModel(std::unique_ptr<interface::Wallet> wallet, interface::Node& node, const PlatformStyle *platformStyle, CWallet *cwallet, OptionsModel *optionsModel, QObject *parent = 0);\n     ~WalletModel();\n \n     enum StatusCode // Returned by sendCoins\n@@ -136,15 +140,6 @@ class WalletModel : public QObject\n     TransactionTableModel *getTransactionTableModel();\n     RecentRequestsTableModel *getRecentRequestsTableModel();\n \n-    CWallet *getWallet() const { return wallet; };\n-\n-    CAmount getBalance(const CCoinControl *coinControl = nullptr) const;\n-    CAmount getUnconfirmedBalance() const;\n-    CAmount getImmatureBalance() const;\n-    bool haveWatchOnly() const;\n-    CAmount getWatchBalance() const;\n-    CAmount getWatchUnconfirmedBalance() const;\n-    CAmount getWatchImmatureBalance() const;\n     EncryptionStatus getEncryptionStatus() const;\n \n     // Check address for validity\n@@ -173,8 +168,6 @@ class WalletModel : public QObject\n     // Passphrase only needed when unlocking\n     bool setWalletLocked(bool locked, const SecureString &passPhrase=SecureString());\n     bool changePassphrase(const SecureString &oldPass, const SecureString &newPass);\n-    // Wallet backup\n-    bool backupWallet(const QString &filename);\n \n     // RAI object for unlocking wallet, returned by requestUnlock()\n     class UnlockContext\n@@ -198,40 +191,33 @@ class WalletModel : public QObject\n \n     UnlockContext requestUnlock();\n \n-    bool getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-    bool IsSpendable(const CTxDestination& dest) const;\n-    bool getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n     bool isSpent(const COutPoint& outpoint) const;\n     void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;\n \n-    bool isLockedCoin(uint256 hash, unsigned int n) const;\n-    void lockCoin(COutPoint& output);\n-    void unlockCoin(COutPoint& output);\n-    void listLockedCoins(std::vector<COutPoint>& vOutpts);\n-\n     void loadReceiveRequests(std::vector<std::string>& vReceiveRequests);\n     bool saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest);\n \n-    bool transactionCanBeAbandoned(uint256 hash) const;\n-    bool abandonTransaction(uint256 hash) const;\n-\n-    bool transactionCanBeBumped(uint256 hash) const;\n     bool bumpFee(uint256 hash);\n \n     static bool isWalletEnabled();\n \n-    bool hdEnabled() const;\n-\n-    OutputType getDefaultAddressType() const;\n-\n-    int getDefaultConfirmTarget() const;\n+    interface::Node& node() const { return m_node; }\n+    interface::Wallet& wallet() const { return *m_wallet; }\n \n     QString getWalletName() const;\n \n-    static bool isMultiwallet();\n+    bool isMultiwallet();\n private:\n-    CWallet *wallet;\n+    std::unique_ptr<interface::Wallet> m_wallet;\n+    std::unique_ptr<interface::Handler> m_handler_status_changed;\n+    std::unique_ptr<interface::Handler> m_handler_address_book_changed;\n+    std::unique_ptr<interface::Handler> m_handler_transaction_changed;\n+    std::unique_ptr<interface::Handler> m_handler_show_progress;\n+    std::unique_ptr<interface::Handler> m_handler_watch_only_changed;\n+    interface::Node& m_node;\n+\n+    CWallet *cwallet;\n     bool fHaveWatchOnly;\n     bool fForceCheckBalanceChanged;\n \n@@ -244,20 +230,15 @@ class WalletModel : public QObject\n     RecentRequestsTableModel *recentRequestsTableModel;\n \n     // Cache some values to be able to detect changes\n-    CAmount cachedBalance;\n-    CAmount cachedUnconfirmedBalance;\n-    CAmount cachedImmatureBalance;\n-    CAmount cachedWatchOnlyBalance;\n-    CAmount cachedWatchUnconfBalance;\n-    CAmount cachedWatchImmatureBalance;\n+    interface::WalletBalances m_cached_balances;\n     EncryptionStatus cachedEncryptionStatus;\n     int cachedNumBlocks;\n \n     QTimer *pollTimer;\n \n     void subscribeToCoreSignals();\n     void unsubscribeFromCoreSignals();\n-    void checkBalanceChanged();\n+    void checkBalanceChanged(const interface::WalletBalances& new_balances);\n \n Q_SIGNALS:\n     // Signal that balance in wallet changed"
      },
      {
        "sha": "21bdfe38180c9bf6cadfc53962443ba94572de91",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -4,12 +4,11 @@\n \n #include <qt/walletmodeltransaction.h>\n \n+#include <interface/node.h>\n #include <policy/policy.h>\n-#include <wallet/wallet.h>\n \n WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &_recipients) :\n     recipients(_recipients),\n-    walletTransaction(0),\n     fee(0)\n {\n }\n@@ -19,14 +18,14 @@ QList<SendCoinsRecipient> WalletModelTransaction::getRecipients() const\n     return recipients;\n }\n \n-CTransactionRef& WalletModelTransaction::getTransaction()\n+std::unique_ptr<interface::PendingWalletTx>& WalletModelTransaction::getWtx()\n {\n-    return walletTransaction;\n+    return wtx;\n }\n \n unsigned int WalletModelTransaction::getTransactionSize()\n {\n-    return (!walletTransaction ? 0 : ::GetVirtualTransactionSize(*walletTransaction));\n+    return wtx ? wtx->getVirtualSize() : 0;\n }\n \n CAmount WalletModelTransaction::getTransactionFee() const\n@@ -41,6 +40,7 @@ void WalletModelTransaction::setTransactionFee(const CAmount& newFee)\n \n void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n {\n+    const CTransaction* walletTransaction = &wtx->get();\n     int i = 0;\n     for (QList<SendCoinsRecipient>::iterator it = recipients.begin(); it != recipients.end(); ++it)\n     {\n@@ -80,13 +80,3 @@ CAmount WalletModelTransaction::getTotalTransactionAmount() const\n     }\n     return totalTransactionAmount;\n }\n-\n-void WalletModelTransaction::newPossibleKeyChange(CWallet *wallet)\n-{\n-    keyChange.reset(new CReserveKey(wallet));\n-}\n-\n-CReserveKey *WalletModelTransaction::getPossibleKeyChange()\n-{\n-    return keyChange.get();\n-}"
      },
      {
        "sha": "52efafaf62f1e2139f48095e56c096fc3c66a1e0",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -11,9 +11,10 @@\n \n class SendCoinsRecipient;\n \n-class CReserveKey;\n-class CWallet;\n-class CWalletTx;\n+namespace interface {\n+class Node;\n+class PendingWalletTx;\n+}\n \n /** Data model for a walletmodel transaction. */\n class WalletModelTransaction\n@@ -23,23 +24,19 @@ class WalletModelTransaction\n \n     QList<SendCoinsRecipient> getRecipients() const;\n \n-    CTransactionRef& getTransaction();\n+    std::unique_ptr<interface::PendingWalletTx>& getWtx();\n     unsigned int getTransactionSize();\n \n     void setTransactionFee(const CAmount& newFee);\n     CAmount getTransactionFee() const;\n \n     CAmount getTotalTransactionAmount() const;\n \n-    void newPossibleKeyChange(CWallet *wallet);\n-    CReserveKey *getPossibleKeyChange();\n-\n     void reassignAmounts(int nChangePosRet); // needed for the subtract-fee-from-amount feature\n \n private:\n     QList<SendCoinsRecipient> recipients;\n-    CTransactionRef walletTransaction;\n-    std::unique_ptr<CReserveKey> keyChange;\n+    std::unique_ptr<interface::PendingWalletTx> wtx;\n     CAmount fee;\n };\n "
      },
      {
        "sha": "1505557244b7ac534f5432a1519672ca59a97fd5",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "patch": "@@ -258,7 +258,7 @@ void WalletView::backupWallet()\n     if (filename.isEmpty())\n         return;\n \n-    if (!walletModel->backupWallet(filename)) {\n+    if (!walletModel->wallet().backupWallet(filename.toLocal8Bit().data())) {\n         Q_EMIT message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to %1.\").arg(filename),\n             CClientUIInterface::MSG_ERROR);\n         }"
      }
    ]
  },
  {
    "sha": "827de038ab6fa58aa3d46151eb2f8dc6add7743e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjdkZTAzOGFiNmZhNThhYTNkNDYxNTFlYjJmOGRjNmFkZDc3NDNl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-17T23:46:08Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/coincontroldialog.cpp",
      "tree": {
        "sha": "f468c36b2f2b8a8e6f34c1ad1fc0dd4dfa275089",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f468c36b2f2b8a8e6f34c1ad1fc0dd4dfa275089"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/827de038ab6fa58aa3d46151eb2f8dc6add7743e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/827de038ab6fa58aa3d46151eb2f8dc6add7743e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/827de038ab6fa58aa3d46151eb2f8dc6add7743e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/827de038ab6fa58aa3d46151eb2f8dc6add7743e/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0704a8996bb950ae3c4d5b5a30e9dfe34cde1d3"
      }
    ],
    "stats": {
      "total": 210,
      "additions": 140,
      "deletions": 70
    },
    "files": [
      {
        "sha": "1bd7e48b05495dbfa4278df5118f5460177f997c",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=827de038ab6fa58aa3d46151eb2f8dc6add7743e",
        "patch": "@@ -15,6 +15,9 @@\n #include <net_processing.h>\n #include <netaddress.h>\n #include <netbase.h>\n+#include <policy/feerate.h>\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n #include <primitives/block.h>\n #include <rpc/server.h>\n #include <scheduler.h>\n@@ -29,6 +32,7 @@\n #include <config/bitcoin-config.h>\n #endif\n #ifdef ENABLE_WALLET\n+#include <wallet/fees.h>\n #include <wallet/wallet.h>\n #define CHECK_WALLET(x) x\n #else\n@@ -186,7 +190,31 @@ class NodeImpl : public Node\n     }\n     bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n     unsigned int getTxConfirmTarget() override { CHECK_WALLET(return ::nTxConfirmTarget); }\n+    CAmount getRequiredFee(unsigned int tx_bytes) override { CHECK_WALLET(return GetRequiredFee(tx_bytes)); }\n+    CAmount getMinimumFee(unsigned int tx_bytes,\n+        const CCoinControl& coin_control,\n+        int* returned_target,\n+        FeeReason* reason) override\n+    {\n+        FeeCalculation fee_calc;\n+        CAmount result;\n+        CHECK_WALLET(result = GetMinimumFee(tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc));\n+        if (returned_target) *returned_target = fee_calc.returnedTarget;\n+        if (reason) *reason = fee_calc.reason;\n+        return result;\n+    }\n     CAmount getMaxTxFee() override { return ::maxTxFee; }\n+    CFeeRate estimateSmartFee(int num_blocks, bool conservative, int* returned_target = nullptr) override\n+    {\n+        FeeCalculation fee_calc;\n+        CFeeRate result = ::feeEstimator.estimateSmartFee(num_blocks, &fee_calc, conservative);\n+        if (returned_target) {\n+            *returned_target = fee_calc.returnedTarget;\n+        }\n+        return result;\n+    }\n+    CFeeRate getDustRelayFee() override { return ::dustRelayFee; }\n+    CFeeRate getPayTxFee() override { CHECK_WALLET(return ::payTxFee); }\n     UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) override\n     {\n         JSONRPCRequest req;"
      },
      {
        "sha": "606d1238e070e8511e1bcca1fa23687931233d3a",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=827de038ab6fa58aa3d46151eb2f8dc6add7743e",
        "patch": "@@ -19,10 +19,13 @@\n #include <tuple>\n #include <vector>\n \n+class CCoinControl;\n+class CFeeRate;\n class CNodeStats;\n class RPCTimerInterface;\n class UniValue;\n class proxyType;\n+enum class FeeReason;\n struct CNodeStateStats;\n \n namespace interface {\n@@ -145,9 +148,27 @@ class Node\n     //! Get tx confirm target.\n     virtual unsigned int getTxConfirmTarget() = 0;\n \n+    //! Get required fee.\n+    virtual CAmount getRequiredFee(unsigned int tx_bytes) = 0;\n+\n+    //! Get minimum fee.\n+    virtual CAmount getMinimumFee(unsigned int tx_bytes,\n+        const CCoinControl& coin_control,\n+        int* returned_target,\n+        FeeReason* reason) = 0;\n+\n     //! Get max tx fee.\n     virtual CAmount getMaxTxFee() = 0;\n \n+    //! Estimate smart fee.\n+    virtual CFeeRate estimateSmartFee(int num_blocks, bool conservative, int* returned_target = nullptr) = 0;\n+\n+    //! Get dust relay fee.\n+    virtual CFeeRate getDustRelayFee() = 0;\n+\n+    //! Get pay tx fee.\n+    virtual CFeeRate getPayTxFee() = 0;\n+\n     //! Execute rpc command.\n     virtual UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) = 0;\n "
      },
      {
        "sha": "cbf30f49bc7e679eb7b4201da882db7a6e72127b",
        "filename": "src/interface/wallet.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/interface/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/interface/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/wallet.cpp?ref=827de038ab6fa58aa3d46151eb2f8dc6add7743e",
        "patch": "@@ -54,6 +54,17 @@ class PendingWalletTxImpl : public PendingWalletTx\n     CReserveKey m_key;\n };\n \n+//! Construct wallet TxOut struct.\n+WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth)\n+{\n+    WalletTxOut result;\n+    result.txout = wtx.tx->vout[n];\n+    result.time = wtx.GetTxTime();\n+    result.depth_in_main_chain = depth;\n+    result.is_spent = wallet.IsSpent(wtx.GetHash(), n);\n+    return result;\n+}\n+\n class WalletImpl : public Wallet\n {\n public:\n@@ -207,6 +218,36 @@ class WalletImpl : public Wallet\n     {\n         return m_wallet.GetAvailableBalance(&coin_control);\n     }\n+    CoinsList listCoins() override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        CoinsList result;\n+        for (const auto& entry : m_wallet.ListCoins()) {\n+            auto& group = result[entry.first];\n+            for (const auto& coin : entry.second) {\n+                group.emplace_back(\n+                    COutPoint(coin.tx->GetHash(), coin.i), MakeWalletTxOut(m_wallet, *coin.tx, coin.i, coin.nDepth));\n+            }\n+        }\n+        return result;\n+    }\n+    std::vector<WalletTxOut> getCoins(const std::vector<COutPoint>& outputs) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        std::vector<WalletTxOut> result;\n+        result.reserve(outputs.size());\n+        for (const auto& output : outputs) {\n+            result.emplace_back();\n+            auto it = m_wallet.mapWallet.find(output.hash);\n+            if (it != m_wallet.mapWallet.end()) {\n+                int depth = it->second.GetDepthInMainChain();\n+                if (depth >= 0) {\n+                    result.back() = MakeWalletTxOut(m_wallet, it->second, output.n, depth);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n     bool hdEnabled() override { return m_wallet.IsHDEnabled(); }\n     OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }"
      },
      {
        "sha": "6cc196fd94840e30058695ff4ba00e521842c46d",
        "filename": "src/interface/wallet.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/interface/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/interface/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/wallet.h?ref=827de038ab6fa58aa3d46151eb2f8dc6add7743e",
        "patch": "@@ -16,6 +16,7 @@\n #include <memory>\n #include <stdint.h>\n #include <string>\n+#include <tuple>\n #include <utility>\n #include <vector>\n \n@@ -30,6 +31,7 @@ namespace interface {\n class Handler;\n class PendingWalletTx;\n struct WalletBalances;\n+struct WalletTxOut;\n \n using WalletOrderForm = std::vector<std::pair<std::string, std::string>>;\n using WalletValueMap = std::map<std::string, std::string>;\n@@ -153,6 +155,14 @@ class Wallet\n     //! Get available balance.\n     virtual CAmount getAvailableBalance(const CCoinControl& coin_control) = 0;\n \n+    //! Return AvailableCoins + LockedCoins grouped by wallet address.\n+    //! (put change in one group with wallet address)\n+    using CoinsList = std::map<CTxDestination, std::vector<std::tuple<COutPoint, WalletTxOut>>>;\n+    virtual CoinsList listCoins() = 0;\n+\n+    //! Return wallet transaction output information.\n+    virtual std::vector<WalletTxOut> getCoins(const std::vector<COutPoint>& outputs) = 0;\n+\n     // Return whether HD enabled.\n     virtual bool hdEnabled() = 0;\n \n@@ -226,6 +236,15 @@ struct WalletBalances\n     }\n };\n \n+//! Wallet transaction output.\n+struct WalletTxOut\n+{\n+    CTxOut txout;\n+    int64_t time;\n+    int depth_in_main_chain = -1;\n+    bool is_spent = false;\n+};\n+\n //! Return implementation of Wallet interface. This function will be undefined\n //! in builds where ENABLE_WALLET is false.\n std::unique_ptr<Wallet> MakeWallet(CWallet& wallet);"
      },
      {
        "sha": "2081d6ca08b8326089a7025b4f675af0a2d8f279",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 34,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=827de038ab6fa58aa3d46151eb2f8dc6add7743e",
        "patch": "@@ -14,7 +14,7 @@\n #include <qt/walletmodel.h>\n \n #include <wallet/coincontrol.h>\n-#include <init.h>\n+#include <interface/node.h>\n #include <key_io.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n@@ -431,7 +431,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CTxOut txout(amount, static_cast<CScript>(std::vector<unsigned char>(24, 0)));\n             txDummy.vout.push_back(txout);\n-            fDust |= IsDust(txout, ::dustRelayFee);\n+            fDust |= IsDust(txout, model->node().getDustRelayFee());\n         }\n     }\n \n@@ -445,16 +445,16 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     bool fWitness               = false;\n \n     std::vector<COutPoint> vCoinControl;\n-    std::vector<COutput>   vOutputs;\n     coinControl()->ListSelected(vCoinControl);\n-    model->getOutputs(vCoinControl, vOutputs);\n \n-    for (const COutput& out : vOutputs) {\n+    size_t i = 0;\n+    for (const auto& out : model->wallet().getCoins(vCoinControl)) {\n+        if (out.depth_in_main_chain < 0) continue;\n+\n         // unselect already spent, very unlikely scenario, this could happen\n         // when selected are spent elsewhere, like rpc or another computer\n-        uint256 txhash = out.tx->GetHash();\n-        COutPoint outpt(txhash, out.i);\n-        if (model->isSpent(outpt))\n+        const COutPoint& outpt = vCoinControl[i++];\n+        if (out.is_spent)\n         {\n             coinControl()->UnSelect(outpt);\n             continue;\n@@ -464,18 +464,18 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         nQuantity++;\n \n         // Amount\n-        nAmount += out.tx->tx->vout[out.i].nValue;\n+        nAmount += out.txout.nValue;\n \n         // Bytes\n         CTxDestination address;\n         int witnessversion = 0;\n         std::vector<unsigned char> witnessprogram;\n-        if (out.tx->tx->vout[out.i].scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram))\n+        if (out.txout.scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram))\n         {\n             nBytesInputs += (32 + 4 + 1 + (107 / WITNESS_SCALE_FACTOR) + 4);\n             fWitness = true;\n         }\n-        else if(ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, address))\n+        else if(ExtractDestination(out.txout.scriptPubKey, address))\n         {\n             CPubKey pubkey;\n             CKeyID *keyid = boost::get<CKeyID>(&address);\n@@ -509,7 +509,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = GetMinimumFee(nBytes, *coinControl(), ::mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        nPayFee = model->node().getMinimumFee(nBytes, *coinControl(), nullptr /* returned_target */, nullptr /* reason */);\n \n         if (nPayAmount > 0)\n         {\n@@ -521,7 +521,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n                 CTxOut txout(nChange, static_cast<CScript>(std::vector<unsigned char>(24, 0)));\n-                if (IsDust(txout, ::dustRelayFee))\n+                if (IsDust(txout, model->node().getDustRelayFee()))\n                 {\n                     nPayFee += nChange;\n                     nChange = 0;\n@@ -621,13 +621,10 @@ void CoinControlDialog::updateView()\n \n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n \n-    std::map<QString, std::vector<COutput> > mapCoins;\n-    model->listCoins(mapCoins);\n-\n-    for (const std::pair<QString, std::vector<COutput>>& coins : mapCoins) {\n+    for (const auto& coins : model->wallet().listCoins()) {\n         CCoinControlWidgetItem *itemWalletAddress = new CCoinControlWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n-        QString sWalletAddress = coins.first;\n+        QString sWalletAddress = QString::fromStdString(EncodeDestination(coins.first));\n         QString sWalletLabel = model->getAddressTableModel()->labelForAddress(sWalletAddress);\n         if (sWalletLabel.isEmpty())\n             sWalletLabel = tr(\"(no label)\");\n@@ -649,8 +646,10 @@ void CoinControlDialog::updateView()\n \n         CAmount nSum = 0;\n         int nChildren = 0;\n-        for (const COutput& out : coins.second) {\n-            nSum += out.tx->tx->vout[out.i].nValue;\n+        for (const auto& outpair : coins.second) {\n+            const COutPoint& output = std::get<0>(outpair);\n+            const interface::WalletTxOut& out = std::get<1>(outpair);\n+            nSum += out.txout.nValue;\n             nChildren++;\n \n             CCoinControlWidgetItem *itemOutput;\n@@ -662,7 +661,7 @@ void CoinControlDialog::updateView()\n             // address\n             CTxDestination outputAddress;\n             QString sAddress = \"\";\n-            if(ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, outputAddress))\n+            if(ExtractDestination(out.txout.scriptPubKey, outputAddress))\n             {\n                 sAddress = QString::fromStdString(EncodeDestination(outputAddress));\n \n@@ -687,35 +686,33 @@ void CoinControlDialog::updateView()\n             }\n \n             // amount\n-            itemOutput->setText(COLUMN_AMOUNT, BitcoinUnits::format(nDisplayUnit, out.tx->tx->vout[out.i].nValue));\n-            itemOutput->setData(COLUMN_AMOUNT, Qt::UserRole, QVariant((qlonglong)out.tx->tx->vout[out.i].nValue)); // padding so that sorting works correctly\n+            itemOutput->setText(COLUMN_AMOUNT, BitcoinUnits::format(nDisplayUnit, out.txout.nValue));\n+            itemOutput->setData(COLUMN_AMOUNT, Qt::UserRole, QVariant((qlonglong)out.txout.nValue)); // padding so that sorting works correctly\n \n             // date\n-            itemOutput->setText(COLUMN_DATE, GUIUtil::dateTimeStr(out.tx->GetTxTime()));\n-            itemOutput->setData(COLUMN_DATE, Qt::UserRole, QVariant((qlonglong)out.tx->GetTxTime()));\n+            itemOutput->setText(COLUMN_DATE, GUIUtil::dateTimeStr(out.time));\n+            itemOutput->setData(COLUMN_DATE, Qt::UserRole, QVariant((qlonglong)out.time));\n \n             // confirmations\n-            itemOutput->setText(COLUMN_CONFIRMATIONS, QString::number(out.nDepth));\n-            itemOutput->setData(COLUMN_CONFIRMATIONS, Qt::UserRole, QVariant((qlonglong)out.nDepth));\n+            itemOutput->setText(COLUMN_CONFIRMATIONS, QString::number(out.depth_in_main_chain));\n+            itemOutput->setData(COLUMN_CONFIRMATIONS, Qt::UserRole, QVariant((qlonglong)out.depth_in_main_chain));\n \n             // transaction hash\n-            uint256 txhash = out.tx->GetHash();\n-            itemOutput->setText(COLUMN_TXHASH, QString::fromStdString(txhash.GetHex()));\n+            itemOutput->setText(COLUMN_TXHASH, QString::fromStdString(output.hash.GetHex()));\n \n             // vout index\n-            itemOutput->setText(COLUMN_VOUT_INDEX, QString::number(out.i));\n+            itemOutput->setText(COLUMN_VOUT_INDEX, QString::number(output.n));\n \n              // disable locked coins\n-            if (model->wallet().isLockedCoin(COutPoint(txhash, out.i)))\n+            if (model->wallet().isLockedCoin(output))\n             {\n-                COutPoint outpt(txhash, out.i);\n-                coinControl()->UnSelect(outpt); // just to be sure\n+                coinControl()->UnSelect(output); // just to be sure\n                 itemOutput->setDisabled(true);\n                 itemOutput->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n             }\n \n             // set checkbox\n-            if (coinControl()->IsSelected(COutPoint(txhash, out.i)))\n+            if (coinControl()->IsSelected(output))\n                 itemOutput->setCheckState(COLUMN_CHECKBOX, Qt::Checked);\n         }\n "
      },
      {
        "sha": "8010b6097ea7f0c0f67b81a874469d5c591f5957",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=827de038ab6fa58aa3d46151eb2f8dc6add7743e",
        "patch": "@@ -475,38 +475,6 @@ void WalletModel::UnlockContext::CopyFrom(const UnlockContext& rhs)\n     rhs.relock = false;\n }\n \n-// returns a list of COutputs from COutPoints\n-void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n-{\n-    LOCK2(cs_main, cwallet->cs_wallet);\n-    for (const COutPoint& outpoint : vOutpoints)\n-    {\n-        auto it = cwallet->mapWallet.find(outpoint.hash);\n-        if (it == cwallet->mapWallet.end()) continue;\n-        int nDepth = it->second.GetDepthInMainChain();\n-        if (nDepth < 0) continue;\n-        COutput out(&it->second, outpoint.n, nDepth, true /* spendable */, true /* solvable */, true /* safe */);\n-        vOutputs.push_back(out);\n-    }\n-}\n-\n-bool WalletModel::isSpent(const COutPoint& outpoint) const\n-{\n-    LOCK2(cs_main, cwallet->cs_wallet);\n-    return cwallet->IsSpent(outpoint.hash, outpoint.n);\n-}\n-\n-// AvailableCoins + LockedCoins grouped by wallet address (put change in one group with wallet address)\n-void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const\n-{\n-    for (auto& group : cwallet->ListCoins()) {\n-        auto& resultGroup = mapCoins[QString::fromStdString(EncodeDestination(group.first))];\n-        for (auto& coin : group.second) {\n-            resultGroup.emplace_back(std::move(coin));\n-        }\n-    }\n-}\n-\n void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)\n {\n     vReceiveRequests = m_wallet->getDestValues(\"rr\"); // receive request"
      },
      {
        "sha": "6a4974e957e1e72a2f1d716e9a4ca6091d70d21b",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/827de038ab6fa58aa3d46151eb2f8dc6add7743e/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=827de038ab6fa58aa3d46151eb2f8dc6add7743e",
        "patch": "@@ -191,10 +191,6 @@ class WalletModel : public QObject\n \n     UnlockContext requestUnlock();\n \n-    void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n-    bool isSpent(const COutPoint& outpoint) const;\n-    void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;\n-\n     void loadReceiveRequests(std::vector<std::string>& vReceiveRequests);\n     bool saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest);\n "
      }
    ]
  },
  {
    "sha": "3ec2ebcd9b4beb4277f1f4791c6acbc538784f70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWMyZWJjZDliNGJlYjQyNzdmMWY0NzkxYzZhY2JjNTM4Nzg0Zjcw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-18T17:01:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/addresstablemodel.cpp",
      "tree": {
        "sha": "c86c3c7b5d346e6f2460426de31f753b949dd3e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c86c3c7b5d346e6f2460426de31f753b949dd3e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "827de038ab6fa58aa3d46151eb2f8dc6add7743e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/827de038ab6fa58aa3d46151eb2f8dc6add7743e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/827de038ab6fa58aa3d46151eb2f8dc6add7743e"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 78,
      "deletions": 37
    },
    "files": [
      {
        "sha": "efc9946fb690b79b99d72efa27356cddd25a6119",
        "filename": "src/interface/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70/src/interface/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70/src/interface/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/wallet.cpp?ref=3ec2ebcd9b4beb4277f1f4791c6acbc538784f70",
        "patch": "@@ -85,6 +85,10 @@ class WalletImpl : public Wallet\n     }\n     bool backupWallet(const std::string& filename) override { return m_wallet.BackupWallet(filename); }\n     std::string getWalletName() override { return m_wallet.GetName(); }\n+    bool getKeyFromPool(bool internal, CPubKey& pub_key) override\n+    {\n+        return m_wallet.GetKeyFromPool(pub_key, internal);\n+    }\n     bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet.GetPubKey(address, pub_key); }\n     bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet.GetKey(address, key); }\n     bool isSpendable(const CTxDestination& dest) override { return IsMine(m_wallet, dest) & ISMINE_SPENDABLE; }\n@@ -93,6 +97,10 @@ class WalletImpl : public Wallet\n     {\n         return m_wallet.SetAddressBook(dest, name, purpose);\n     }\n+    bool delAddressBook(const CTxDestination& dest) override\n+    {\n+        return m_wallet.DelAddressBook(dest);\n+    }\n     bool getAddress(const CTxDestination& dest, std::string* name, isminetype* is_mine) override\n     {\n         LOCK(m_wallet.cs_wallet);\n@@ -108,6 +116,16 @@ class WalletImpl : public Wallet\n         }\n         return true;\n     }\n+    std::vector<WalletAddress> getAddresses() override\n+    {\n+        LOCK(m_wallet.cs_wallet);\n+        std::vector<WalletAddress> result;\n+        for (const auto& item : m_wallet.mapAddressBook) {\n+            result.emplace_back(item.first, IsMine(m_wallet, item.first), item.second.name, item.second.purpose);\n+        }\n+        return result;\n+    }\n+    void learnRelatedScripts(const CPubKey& key, OutputType type) override { m_wallet.LearnRelatedScripts(key, type); }\n     bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n     {\n         LOCK(m_wallet.cs_wallet);"
      },
      {
        "sha": "4510276446fcb7226741e3699e6208cbac1349e5",
        "filename": "src/interface/wallet.h",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70/src/interface/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70/src/interface/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/wallet.h?ref=3ec2ebcd9b4beb4277f1f4791c6acbc538784f70",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_INTERFACE_WALLET_H\n \n #include <amount.h>                    // For CAmount\n+#include <pubkey.h>                    // For CTxDestination (CKeyID and CScriptID)\n #include <script/ismine.h>             // For isminefilter, isminetype\n #include <script/standard.h>           // For CTxDestination\n #include <support/allocators/secure.h> // For SecureString\n@@ -30,6 +31,7 @@ namespace interface {\n \n class Handler;\n class PendingWalletTx;\n+struct WalletAddress;\n struct WalletBalances;\n struct WalletTxOut;\n \n@@ -67,6 +69,9 @@ class Wallet\n     //! Get wallet name.\n     virtual std::string getWalletName() = 0;\n \n+    // Get key from pool.\n+    virtual bool getKeyFromPool(bool internal, CPubKey& pub_key) = 0;\n+\n     //! Get public key.\n     virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n \n@@ -82,11 +87,21 @@ class Wallet\n     //! Add or update address.\n     virtual bool setAddressBook(const CTxDestination& dest, const std::string& name, const std::string& purpose) = 0;\n \n+    // Remove address.\n+    virtual bool delAddressBook(const CTxDestination& dest) = 0;\n+\n     //! Look up address in wallet, return whether exists.\n     virtual bool getAddress(const CTxDestination& dest,\n         std::string* name = nullptr,\n         isminetype* is_mine = nullptr) = 0;\n \n+    //! Get wallet address list.\n+    virtual std::vector<WalletAddress> getAddresses() = 0;\n+\n+    //! Add scripts to key store so old so software versions opening the wallet\n+    //! database can detect payments to newer address types.\n+    virtual void learnRelatedScripts(const CPubKey& key, OutputType type) = 0;\n+\n     //! Add dest data.\n     virtual bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) = 0;\n \n@@ -216,6 +231,20 @@ class PendingWalletTx\n         std::string& reject_reason) = 0;\n };\n \n+//! Information about one wallet address.\n+struct WalletAddress\n+{\n+    CTxDestination dest;\n+    isminetype is_mine;\n+    std::string name;\n+    std::string purpose;\n+\n+    WalletAddress(CTxDestination dest, isminetype is_mine, std::string name, std::string purpose)\n+        : dest(std::move(dest)), is_mine(is_mine), name(std::move(name)), purpose(std::move(purpose))\n+    {\n+    }\n+};\n+\n //! Collection of wallet balances.\n struct WalletBalances\n {"
      },
      {
        "sha": "a9408895d91945d7fd3b9c75221d7986431dbb3c",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 33,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=3ec2ebcd9b4beb4277f1f4791c6acbc538784f70",
        "patch": "@@ -7,6 +7,7 @@\n #include <qt/guiutil.h>\n #include <qt/walletmodel.h>\n \n+#include <interface/node.h>\n #include <key_io.h>\n #include <wallet/wallet.h>\n \n@@ -67,28 +68,23 @@ static AddressTableEntry::Type translateTransactionType(const QString &strPurpos\n class AddressTablePriv\n {\n public:\n-    CWallet *wallet;\n     QList<AddressTableEntry> cachedAddressTable;\n     AddressTableModel *parent;\n \n-    AddressTablePriv(CWallet *_wallet, AddressTableModel *_parent):\n-        wallet(_wallet), parent(_parent) {}\n+    AddressTablePriv(AddressTableModel *_parent):\n+        parent(_parent) {}\n \n-    void refreshAddressTable()\n+    void refreshAddressTable(interface::Wallet& wallet)\n     {\n         cachedAddressTable.clear();\n         {\n-            LOCK(wallet->cs_wallet);\n-            for (const std::pair<CTxDestination, CAddressBookData>& item : wallet->mapAddressBook)\n+            for (const auto& address : wallet.getAddresses())\n             {\n-                const CTxDestination& address = item.first;\n-                bool fMine = IsMine(*wallet, address);\n                 AddressTableEntry::Type addressType = translateTransactionType(\n-                        QString::fromStdString(item.second.purpose), fMine);\n-                const std::string& strName = item.second.name;\n+                        QString::fromStdString(address.purpose), address.is_mine);\n                 cachedAddressTable.append(AddressTableEntry(addressType,\n-                                  QString::fromStdString(strName),\n-                                  QString::fromStdString(EncodeDestination(address))));\n+                                  QString::fromStdString(address.name),\n+                                  QString::fromStdString(EncodeDestination(address.dest))));\n             }\n         }\n         // qLowerBound() and qUpperBound() require our cachedAddressTable list to be sorted in asc order\n@@ -162,12 +158,12 @@ class AddressTablePriv\n     }\n };\n \n-AddressTableModel::AddressTableModel(CWallet *_wallet, WalletModel *parent) :\n-    QAbstractTableModel(parent),walletModel(parent),wallet(_wallet),priv(0)\n+AddressTableModel::AddressTableModel(WalletModel *parent) :\n+    QAbstractTableModel(parent),walletModel(parent),priv(0)\n {\n     columns << tr(\"Label\") << tr(\"Address\");\n-    priv = new AddressTablePriv(wallet, this);\n-    priv->refreshAddressTable();\n+    priv = new AddressTablePriv(this);\n+    priv->refreshAddressTable(parent->wallet());\n }\n \n AddressTableModel::~AddressTableModel()\n@@ -244,7 +240,6 @@ bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value,\n \n     if(role == Qt::EditRole)\n     {\n-        LOCK(wallet->cs_wallet); /* For SetAddressBook / DelAddressBook */\n         CTxDestination curAddress = DecodeDestination(rec->address.toStdString());\n         if(index.column() == Label)\n         {\n@@ -254,7 +249,7 @@ bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value,\n                 editStatus = NO_CHANGES;\n                 return false;\n             }\n-            wallet->SetAddressBook(curAddress, value.toString().toStdString(), strPurpose);\n+            walletModel->wallet().setAddressBook(curAddress, value.toString().toStdString(), strPurpose);\n         } else if(index.column() == Address) {\n             CTxDestination newAddress = DecodeDestination(value.toString().toStdString());\n             // Refuse to set invalid address, set error status and return false\n@@ -271,7 +266,7 @@ bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value,\n             }\n             // Check for duplicate addresses to prevent accidental deletion of addresses, if you try\n             // to paste an existing address over another address (with a different label)\n-            else if(wallet->mapAddressBook.count(newAddress))\n+            if (walletModel->wallet().getAddress(newAddress))\n             {\n                 editStatus = DUPLICATE_ADDRESS;\n                 return false;\n@@ -280,9 +275,9 @@ bool AddressTableModel::setData(const QModelIndex &index, const QVariant &value,\n             else if(rec->type == AddressTableEntry::Sending)\n             {\n                 // Remove old entry\n-                wallet->DelAddressBook(curAddress);\n+                walletModel->wallet().delAddressBook(curAddress);\n                 // Add new entry with new address\n-                wallet->SetAddressBook(newAddress, rec->label.toStdString(), strPurpose);\n+                walletModel->wallet().setAddressBook(newAddress, value.toString().toStdString(), strPurpose);\n             }\n         }\n         return true;\n@@ -356,8 +351,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n         }\n         // Check for duplicate addresses\n         {\n-            LOCK(wallet->cs_wallet);\n-            if(wallet->mapAddressBook.count(DecodeDestination(strAddress)))\n+            if(walletModel->wallet().getAddress(DecodeDestination(strAddress)))\n             {\n                 editStatus = DUPLICATE_ADDRESS;\n                 return QString();\n@@ -368,7 +362,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     {\n         // Generate a new address to associate with given label\n         CPubKey newKey;\n-        if(!wallet->GetKeyFromPool(newKey))\n+        if(!walletModel->wallet().getKeyFromPool(false /* internal */, newKey))\n         {\n             WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n             if(!ctx.isValid())\n@@ -377,13 +371,13 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n                 editStatus = WALLET_UNLOCK_FAILURE;\n                 return QString();\n             }\n-            if(!wallet->GetKeyFromPool(newKey))\n+            if(!walletModel->wallet().getKeyFromPool(false /* internal */, newKey))\n             {\n                 editStatus = KEY_GENERATION_FAILURE;\n                 return QString();\n             }\n         }\n-        wallet->LearnRelatedScripts(newKey, address_type);\n+        walletModel->wallet().learnRelatedScripts(newKey, address_type);\n         strAddress = EncodeDestination(GetDestinationForKey(newKey, address_type));\n     }\n     else\n@@ -392,7 +386,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     }\n \n     // Add entry\n-    wallet->SetAddressBook(DecodeDestination(strAddress), strLabel,\n+    walletModel->wallet().setAddressBook(DecodeDestination(strAddress), strLabel,\n                            (type == Send ? \"send\" : \"receive\"));\n     return QString::fromStdString(strAddress);\n }\n@@ -407,7 +401,7 @@ bool AddressTableModel::removeRows(int row, int count, const QModelIndex &parent\n         // Also refuse to remove receiving addresses.\n         return false;\n     }\n-    wallet->DelAddressBook(DecodeDestination(rec->address.toStdString()));\n+    walletModel->wallet().delAddressBook(DecodeDestination(rec->address.toStdString()));\n     return true;\n }\n \n@@ -416,12 +410,11 @@ bool AddressTableModel::removeRows(int row, int count, const QModelIndex &parent\n QString AddressTableModel::labelForAddress(const QString &address) const\n {\n     {\n-        LOCK(wallet->cs_wallet);\n         CTxDestination destination = DecodeDestination(address.toStdString());\n-        std::map<CTxDestination, CAddressBookData>::iterator mi = wallet->mapAddressBook.find(destination);\n-        if (mi != wallet->mapAddressBook.end())\n+        std::string name;\n+        if (walletModel->wallet().getAddress(destination, &name))\n         {\n-            return QString::fromStdString(mi->second.name);\n+            return QString::fromStdString(name);\n         }\n     }\n     return QString();\n@@ -441,7 +434,7 @@ int AddressTableModel::lookupAddress(const QString &address) const\n     }\n }\n \n-OutputType AddressTableModel::GetDefaultAddressType() const { return wallet->m_default_address_type; };\n+OutputType AddressTableModel::GetDefaultAddressType() const { return walletModel->wallet().getDefaultAddressType(); };\n \n void AddressTableModel::emitDataChanged(int idx)\n {"
      },
      {
        "sha": "954f0f593ef55d97d001d8cc61bdf6cc9ec9d3ba",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=3ec2ebcd9b4beb4277f1f4791c6acbc538784f70",
        "patch": "@@ -13,7 +13,9 @@ enum class OutputType;\n class AddressTablePriv;\n class WalletModel;\n \n-class CWallet;\n+namespace interface {\n+class Wallet;\n+}\n \n /**\n    Qt model of the address book in the core. This allows views to access and modify the address book.\n@@ -23,7 +25,7 @@ class AddressTableModel : public QAbstractTableModel\n     Q_OBJECT\n \n public:\n-    explicit AddressTableModel(CWallet *wallet, WalletModel *parent = 0);\n+    explicit AddressTableModel(WalletModel *parent = 0);\n     ~AddressTableModel();\n \n     enum ColumnIndex {\n@@ -80,7 +82,6 @@ class AddressTableModel : public QAbstractTableModel\n \n private:\n     WalletModel *walletModel;\n-    CWallet *wallet;\n     AddressTablePriv *priv;\n     QStringList columns;\n     EditStatus editStatus;"
      },
      {
        "sha": "06409ca29f26d079519fd12ec4b54fd06f9b98d8",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=3ec2ebcd9b4beb4277f1f4791c6acbc538784f70",
        "patch": "@@ -49,7 +49,7 @@ WalletModel::WalletModel(std::unique_ptr<interface::Wallet> wallet, interface::N\n     fHaveWatchOnly = m_wallet->haveWatchOnly();\n     fForceCheckBalanceChanged = false;\n \n-    addressTableModel = new AddressTableModel(cwallet, this);\n+    addressTableModel = new AddressTableModel(this);\n     transactionTableModel = new TransactionTableModel(platformStyle, cwallet, this);\n     recentRequestsTableModel = new RecentRequestsTableModel(cwallet, this);\n "
      }
    ]
  },
  {
    "sha": "3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2FiMmNlNWY5ZTE1OWFkNWEyZTllZDY4MmYyODEyMWI1MjQ4NTgw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-23T21:14:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/paymentserver.cpp",
      "tree": {
        "sha": "950fa12e412b37d37e9df5e0487b70ee162c6ea6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/950fa12e412b37d37e9df5e0487b70ee162c6ea6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ec2ebcd9b4beb4277f1f4791c6acbc538784f70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ec2ebcd9b4beb4277f1f4791c6acbc538784f70"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 29,
      "deletions": 26
    },
    "files": [
      {
        "sha": "0e6bc4a785cb0f6c67036e2e532a7fe75567a667",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
        "patch": "@@ -56,6 +56,7 @@ class NodeImpl : public Node\n     bool softSetArg(const std::string& arg, const std::string& value) override { return gArgs.SoftSetArg(arg, value); }\n     bool softSetBoolArg(const std::string& arg, bool value) override { return gArgs.SoftSetBoolArg(arg, value); }\n     void selectParams(const std::string& network) override { SelectParams(network); }\n+    std::string getNetwork() override { return Params().NetworkIDString(); }\n     void initLogging() override { InitLogging(); }\n     void initParameterInteraction() override { InitParameterInteraction(); }\n     std::string getWarnings(const std::string& type) override { return GetWarnings(type); }"
      },
      {
        "sha": "a31105f6f8d903628444629da3d51f666eab4d54",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
        "patch": "@@ -54,6 +54,9 @@ class Node\n     //! Choose network parameters.\n     virtual void selectParams(const std::string& network) = 0;\n \n+    //! Get network name.\n+    virtual std::string getNetwork() = 0;\n+\n     //! Init logging.\n     virtual void initLogging() = 0;\n "
      },
      {
        "sha": "a60f361dd1a17f15bfcafd431a1591ba1e550cee",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
        "patch": "@@ -476,8 +476,8 @@ void BitcoinApplication::initializeResult(bool success)\n                 fFirstWallet = false;\n             }\n \n-            connect(walletModel, SIGNAL(coinsSent(CWallet*,SendCoinsRecipient,QByteArray)),\n-                             paymentServer, SLOT(fetchPaymentACK(CWallet*,const SendCoinsRecipient&,QByteArray)));\n+            connect(walletModel, SIGNAL(coinsSent(WalletModel*,SendCoinsRecipient,QByteArray)),\n+                             paymentServer, SLOT(fetchPaymentACK(WalletModel*,const SendCoinsRecipient&,QByteArray)));\n \n             m_wallet_models.push_back(walletModel);\n         }\n@@ -638,7 +638,7 @@ int main(int argc, char *argv[])\n     }\n #ifdef ENABLE_WALLET\n     // Parse URIs on command line -- this can affect Params()\n-    PaymentServer::ipcParseCommandLine(argc, argv);\n+    PaymentServer::ipcParseCommandLine(*node, argc, argv);\n #endif\n \n     QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));"
      },
      {
        "sha": "5262999d8a0733480c36935b305f2c214e3bda7f",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
        "patch": "@@ -9,6 +9,7 @@\n #include <qt/optionsmodel.h>\n \n #include <chainparams.h>\n+#include <interface/node.h>\n #include <policy/policy.h>\n #include <key_io.h>\n #include <ui_interface.h>\n@@ -199,7 +200,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n // Warning: ipcSendCommandLine() is called early in init,\n // so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n //\n-void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n+void PaymentServer::ipcParseCommandLine(interface::Node& node, int argc, char* argv[])\n {\n     for (int i = 1; i < argc; i++)\n     {\n@@ -221,11 +222,11 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n                 auto tempChainParams = CreateChainParams(CBaseChainParams::MAIN);\n \n                 if (IsValidDestinationString(r.address.toStdString(), *tempChainParams)) {\n-                    SelectParams(CBaseChainParams::MAIN);\n+                    node.selectParams(CBaseChainParams::MAIN);\n                 } else {\n                     tempChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n                     if (IsValidDestinationString(r.address.toStdString(), *tempChainParams)) {\n-                        SelectParams(CBaseChainParams::TESTNET);\n+                        node.selectParams(CBaseChainParams::TESTNET);\n                     }\n                 }\n             }\n@@ -239,11 +240,11 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             {\n                 if (request.getDetails().network() == \"main\")\n                 {\n-                    SelectParams(CBaseChainParams::MAIN);\n+                    node.selectParams(CBaseChainParams::MAIN);\n                 }\n                 else if (request.getDetails().network() == \"test\")\n                 {\n-                    SelectParams(CBaseChainParams::TESTNET);\n+                    node.selectParams(CBaseChainParams::TESTNET);\n                 }\n             }\n         }\n@@ -526,7 +527,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n \n     if (request.IsInitialized()) {\n         // Payment request network matches client network?\n-        if (!verifyNetwork(request.getDetails())) {\n+        if (!verifyNetwork(optionsModel->node(), request.getDetails())) {\n             Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n@@ -583,7 +584,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n-        if (IsDust(txOut, ::dustRelayFee)) {\n+        if (IsDust(txOut, optionsModel->node().getDustRelayFee())) {\n             Q_EMIT message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);\n@@ -621,7 +622,7 @@ void PaymentServer::fetchRequest(const QUrl& url)\n     netManager->get(netRequest);\n }\n \n-void PaymentServer::fetchPaymentACK(CWallet* wallet, const SendCoinsRecipient& recipient, QByteArray transaction)\n+void PaymentServer::fetchPaymentACK(WalletModel* walletModel, const SendCoinsRecipient& recipient, QByteArray transaction)\n {\n     const payments::PaymentDetails& details = recipient.paymentRequest.getDetails();\n     if (!details.has_payment_url())\n@@ -640,17 +641,17 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, const SendCoinsRecipient& r\n \n     // Create a new refund address, or re-use:\n     CPubKey newKey;\n-    if (wallet->GetKeyFromPool(newKey)) {\n+    if (walletModel->wallet().getKeyFromPool(false /* internal */, newKey)) {\n         // BIP70 requests encode the scriptPubKey directly, so we are not restricted to address\n         // types supported by the receiver. As a result, we choose the address format we also\n         // use for change. Despite an actual payment and not change, this is a close match:\n         // it's the output type we use subject to privacy issues, but not restricted by what\n         // other software supports.\n-        const OutputType change_type = wallet->m_default_change_type != OutputType::NONE ? wallet->m_default_change_type : wallet->m_default_address_type;\n-        wallet->LearnRelatedScripts(newKey, change_type);\n+        const OutputType change_type = walletModel->wallet().getDefaultChangeType() != OutputType::NONE ? walletModel->wallet().getDefaultChangeType() : walletModel->wallet().getDefaultAddressType();\n+        walletModel->wallet().learnRelatedScripts(newKey, change_type);\n         CTxDestination dest = GetDestinationForKey(newKey, change_type);\n         std::string label = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant).toStdString();\n-        wallet->SetAddressBook(dest, label, \"refund\");\n+        walletModel->wallet().setAddressBook(dest, label, \"refund\");\n \n         CScript s = GetScriptForDestination(dest);\n         payments::Output* refund_to = payment.add_refund_to();\n@@ -758,14 +759,14 @@ void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n     Q_EMIT message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n }\n \n-bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails)\n+bool PaymentServer::verifyNetwork(interface::Node& node, const payments::PaymentDetails& requestDetails)\n {\n-    bool fVerified = requestDetails.network() == Params().NetworkIDString();\n+    bool fVerified = requestDetails.network() == node.getNetwork();\n     if (!fVerified) {\n         qWarning() << QString(\"PaymentServer::%1: Payment request network \\\"%2\\\" doesn't match client network \\\"%3\\\".\")\n             .arg(__func__)\n             .arg(QString::fromStdString(requestDetails.network()))\n-            .arg(QString::fromStdString(Params().NetworkIDString()));\n+            .arg(QString::fromStdString(node.getNetwork()));\n     }\n     return fVerified;\n }"
      },
      {
        "sha": "e139899e22c167449017b4c4345042f072eb5024",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
        "patch": "@@ -40,8 +40,6 @@\n \n class OptionsModel;\n \n-class CWallet;\n-\n QT_BEGIN_NAMESPACE\n class QApplication;\n class QByteArray;\n@@ -62,7 +60,7 @@ class PaymentServer : public QObject\n public:\n     // Parse URIs on command line\n     // Returns false on error\n-    static void ipcParseCommandLine(int argc, char *argv[]);\n+    static void ipcParseCommandLine(interface::Node& node, int argc, char *argv[]);\n \n     // Returns true if there were URIs on the command line\n     // which were successfully sent to an already-running\n@@ -89,7 +87,7 @@ class PaymentServer : public QObject\n     void setOptionsModel(OptionsModel *optionsModel);\n \n     // Verify that the payment request network matches the client network\n-    static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n+    static bool verifyNetwork(interface::Node& node, const payments::PaymentDetails& requestDetails);\n     // Verify if the payment request is expired\n     static bool verifyExpired(const payments::PaymentDetails& requestDetails);\n     // Verify the payment request size is valid as per BIP70\n@@ -113,7 +111,7 @@ public Q_SLOTS:\n     void uiReady();\n \n     // Submit Payment message to a merchant, get back PaymentACK:\n-    void fetchPaymentACK(CWallet* wallet, const SendCoinsRecipient& recipient, QByteArray transaction);\n+    void fetchPaymentACK(WalletModel* walletModel, const SendCoinsRecipient& recipient, QByteArray transaction);\n \n     // Handle an incoming URI, URI with local file scheme or file\n     void handleURIOrFile(const QString& s);"
      },
      {
        "sha": "46e9d4d0a4c922a414faf8205fadfe55ecb015f1",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
        "patch": "@@ -147,7 +147,7 @@ void PaymentServerTests::paymentServerTests()\n     // Ensure the request is initialized, because network \"main\" is default, even for\n     // uninitialized payment requests and that will fail our test here.\n     QVERIFY(r.paymentRequest.IsInitialized());\n-    QCOMPARE(PaymentServer::verifyNetwork(r.paymentRequest.getDetails()), false);\n+    QCOMPARE(PaymentServer::verifyNetwork(*node, r.paymentRequest.getDetails()), false);\n \n     // Expired payment request (expires is set to 1 = 1970-01-01 00:00:01):\n     data = DecodeBase64(paymentrequest2_cert2_BASE64);"
      },
      {
        "sha": "79e1c834df7ac1d56ba41a816105b5a2f4fd6e97",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
        "patch": "@@ -295,7 +295,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n                 }\n             }\n         }\n-        Q_EMIT coinsSent(cwallet, rcp, transaction_array);\n+        Q_EMIT coinsSent(this, rcp, transaction_array);\n     }\n \n     checkBalanceChanged(m_wallet->getBalances()); // update balance immediately, otherwise there could be a short noticeable delay until pollBalanceChanged hits"
      },
      {
        "sha": "331c1c2a787ce7a096d8fdb2de22db3a7fd59c5b",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cab2ce5f9e159ad5a2e9ed682f28121b5248580/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
        "patch": "@@ -253,7 +253,7 @@ class WalletModel : public QObject\n     void message(const QString &title, const QString &message, unsigned int style);\n \n     // Coins sent: from wallet, to recipient, in (serialized) transaction:\n-    void coinsSent(CWallet* wallet, SendCoinsRecipient recipient, QByteArray transaction);\n+    void coinsSent(WalletModel* wallet, SendCoinsRecipient recipient, QByteArray transaction);\n \n     // Show progress dialog e.g. for rescan\n     void showProgress(const QString &title, int nProgress);"
      }
    ]
  },
  {
    "sha": "58845587e11140e81f087a74c3db76a4d1fc3a1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODg0NTU4N2UxMTE0MGU4MWYwODdhNzRjM2RiNzZhNGQxZmMzYTFh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-18T20:42:30Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt transaction table files",
      "tree": {
        "sha": "9a150957bd523137b38de0909e8ae1ab5e7b9984",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a150957bd523137b38de0909e8ae1ab5e7b9984"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58845587e11140e81f087a74c3db76a4d1fc3a1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58845587e11140e81f087a74c3db76a4d1fc3a1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58845587e11140e81f087a74c3db76a4d1fc3a1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58845587e11140e81f087a74c3db76a4d1fc3a1a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cab2ce5f9e159ad5a2e9ed682f28121b5248580",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cab2ce5f9e159ad5a2e9ed682f28121b5248580"
      }
    ],
    "stats": {
      "total": 620,
      "additions": 410,
      "deletions": 210
    },
    "files": [
      {
        "sha": "a8ed275dc5b955a9d5a14b3cd93d8171445b036e",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -60,6 +60,7 @@ class NodeImpl : public Node\n     void initLogging() override { InitLogging(); }\n     void initParameterInteraction() override { InitParameterInteraction(); }\n     std::string getWarnings(const std::string& type) override { return GetWarnings(type); }\n+    uint32_t getLogCategories() override { return ::logCategories; }\n     bool baseInitialize() override\n     {\n         return AppInitBasicSetup() && AppInitParameterInteraction() && AppInitSanityChecks() &&\n@@ -227,6 +228,11 @@ class NodeImpl : public Node\n     std::vector<std::string> listRpcCommands() override { return ::tableRPC.listCommands(); }\n     void rpcSetTimerInterfaceIfUnset(RPCTimerInterface* iface) override { RPCSetTimerInterfaceIfUnset(iface); }\n     void rpcUnsetTimerInterface(RPCTimerInterface* iface) override { RPCUnsetTimerInterface(iface); }\n+    bool getUnspentOutput(const COutPoint& output, Coin& coin) override\n+    {\n+        LOCK(::cs_main);\n+        return ::pcoinsTip->GetCoin(output, coin);\n+    }\n     std::vector<std::unique_ptr<Wallet>> getWallets() override\n     {\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "c73f45a1b01e9d1db7a7382926f7a018a7190328",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -22,6 +22,7 @@\n class CCoinControl;\n class CFeeRate;\n class CNodeStats;\n+class Coin;\n class RPCTimerInterface;\n class UniValue;\n class proxyType;\n@@ -66,6 +67,9 @@ class Node\n     //! Get warnings.\n     virtual std::string getWarnings(const std::string& type) = 0;\n \n+    // Get log flags.\n+    virtual uint32_t getLogCategories() = 0;\n+\n     //! Initialize app dependencies.\n     virtual bool baseInitialize() = 0;\n \n@@ -184,6 +188,9 @@ class Node\n     //! Unset RPC timer interface.\n     virtual void rpcUnsetTimerInterface(RPCTimerInterface* iface) = 0;\n \n+    //! Get unspent outputs associated with a transaction.\n+    virtual bool getUnspentOutput(const COutPoint& output, Coin& coin) = 0;\n+\n     //! Return interfaces for accessing wallets (if any).\n     virtual std::vector<std::unique_ptr<Wallet>> getWallets() = 0;\n "
      },
      {
        "sha": "a6bce7d3de5bd433dcacb8fe490a8128946ebef6",
        "filename": "src/interface/wallet.cpp",
        "status": "modified",
        "additions": 138,
        "deletions": 0,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/interface/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/interface/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/wallet.cpp?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -15,6 +15,7 @@\n #include <script/standard.h>\n #include <support/allocators/secure.h>\n #include <sync.h>\n+#include <timedata.h>\n #include <ui_interface.h>\n #include <uint256.h>\n #include <validation.h>\n@@ -54,6 +55,54 @@ class PendingWalletTxImpl : public PendingWalletTx\n     CReserveKey m_key;\n };\n \n+//! Construct wallet tx struct.\n+WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n+{\n+    WalletTx result;\n+    result.tx = wtx.tx;\n+    result.txin_is_mine.reserve(wtx.tx->vin.size());\n+    for (const auto& txin : wtx.tx->vin) {\n+        result.txin_is_mine.emplace_back(wallet.IsMine(txin));\n+    }\n+    result.txout_is_mine.reserve(wtx.tx->vout.size());\n+    result.txout_address.reserve(wtx.tx->vout.size());\n+    result.txout_address_is_mine.reserve(wtx.tx->vout.size());\n+    for (const auto& txout : wtx.tx->vout) {\n+        result.txout_is_mine.emplace_back(wallet.IsMine(txout));\n+        result.txout_address.emplace_back();\n+        result.txout_address_is_mine.emplace_back(ExtractDestination(txout.scriptPubKey, result.txout_address.back()) ?\n+                                                      IsMine(wallet, result.txout_address.back()) :\n+                                                      ISMINE_NO);\n+    }\n+    result.credit = wtx.GetCredit(ISMINE_ALL);\n+    result.debit = wtx.GetDebit(ISMINE_ALL);\n+    result.change = wtx.GetChange();\n+    result.time = wtx.GetTxTime();\n+    result.value_map = wtx.mapValue;\n+    result.is_coinbase = wtx.IsCoinBase();\n+    return result;\n+}\n+\n+//! Construct wallet tx status struct.\n+WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n+{\n+    WalletTxStatus result;\n+    auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n+    CBlockIndex* block = mi != ::mapBlockIndex.end() ? mi->second : nullptr;\n+    result.block_height = (block ? block->nHeight : std::numeric_limits<int>::max()),\n+    result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n+    result.depth_in_main_chain = wtx.GetDepthInMainChain();\n+    result.request_count = wtx.GetRequestCount();\n+    result.time_received = wtx.nTimeReceived;\n+    result.lock_time = wtx.tx->nLockTime;\n+    result.is_final = CheckFinalTx(*wtx.tx);\n+    result.is_trusted = wtx.IsTrusted();\n+    result.is_abandoned = wtx.isAbandoned();\n+    result.is_coinbase = wtx.IsCoinBase();\n+    result.is_in_main_chain = wtx.IsInMainChain();\n+    return result;\n+}\n+\n //! Construct wallet TxOut struct.\n WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth)\n {\n@@ -205,6 +254,75 @@ class WalletImpl : public Wallet\n         return feebumper::CommitTransaction(&m_wallet, txid, std::move(mtx), errors, bumped_txid) ==\n                feebumper::Result::OK;\n     }\n+    CTransactionRef getTx(const uint256& txid) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi != m_wallet.mapWallet.end()) {\n+            return mi->second.tx;\n+        }\n+        return {};\n+    }\n+    WalletTx getWalletTx(const uint256& txid) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi != m_wallet.mapWallet.end()) {\n+            return MakeWalletTx(m_wallet, mi->second);\n+        }\n+        return {};\n+    }\n+    std::vector<WalletTx> getWalletTxs() override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        std::vector<WalletTx> result;\n+        result.reserve(m_wallet.mapWallet.size());\n+        for (const auto& entry : m_wallet.mapWallet) {\n+            result.emplace_back(MakeWalletTx(m_wallet, entry.second));\n+        }\n+        return result;\n+    }\n+    bool tryGetTxStatus(const uint256& txid,\n+        interface::WalletTxStatus& tx_status,\n+        int& num_blocks,\n+        int64_t& adjusted_time) override\n+    {\n+        TRY_LOCK(::cs_main, locked_chain);\n+        if (!locked_chain) {\n+            return false;\n+        }\n+        TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n+        if (!locked_wallet) {\n+            return false;\n+        }\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi == m_wallet.mapWallet.end()) {\n+            return false;\n+        }\n+        num_blocks = ::chainActive.Height();\n+        adjusted_time = GetAdjustedTime();\n+        tx_status = MakeWalletTxStatus(mi->second);\n+        return true;\n+    }\n+    WalletTx getWalletTxDetails(const uint256& txid,\n+        WalletTxStatus& tx_status,\n+        WalletOrderForm& order_form,\n+        bool& in_mempool,\n+        int& num_blocks,\n+        int64_t& adjusted_time) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        auto mi = m_wallet.mapWallet.find(txid);\n+        if (mi != m_wallet.mapWallet.end()) {\n+            num_blocks = ::chainActive.Height();\n+            adjusted_time = GetAdjustedTime();\n+            in_mempool = mi->second.InMempool();\n+            order_form = mi->second.vOrderForm;\n+            tx_status = MakeWalletTxStatus(mi->second);\n+            return MakeWalletTx(m_wallet, mi->second);\n+        }\n+        return {};\n+    }\n     WalletBalances getBalances() override\n     {\n         WalletBalances result;\n@@ -236,6 +354,26 @@ class WalletImpl : public Wallet\n     {\n         return m_wallet.GetAvailableBalance(&coin_control);\n     }\n+    isminetype txinIsMine(const CTxIn& txin) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.IsMine(txin);\n+    }\n+    isminetype txoutIsMine(const CTxOut& txout) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.IsMine(txout);\n+    }\n+    CAmount getDebit(const CTxIn& txin, isminefilter filter) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.GetDebit(txin, filter);\n+    }\n+    CAmount getCredit(const CTxOut& txout, isminefilter filter) override\n+    {\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n+        return m_wallet.GetCredit(txout, filter);\n+    }\n     CoinsList listCoins() override\n     {\n         LOCK2(::cs_main, m_wallet.cs_wallet);"
      },
      {
        "sha": "b66ed63398f981103ed74ff380901ead56225a81",
        "filename": "src/interface/wallet.h",
        "status": "modified",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/interface/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/interface/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/wallet.h?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -33,7 +33,9 @@ class Handler;\n class PendingWalletTx;\n struct WalletAddress;\n struct WalletBalances;\n+struct WalletTx;\n struct WalletTxOut;\n+struct WalletTxStatus;\n \n using WalletOrderForm = std::vector<std::pair<std::string, std::string>>;\n using WalletValueMap = std::map<std::string, std::string>;\n@@ -158,6 +160,29 @@ class Wallet\n         std::vector<std::string>& errors,\n         uint256& bumped_txid) = 0;\n \n+    //! Get a transaction.\n+    virtual CTransactionRef getTx(const uint256& txid) = 0;\n+\n+    //! Get transaction information.\n+    virtual WalletTx getWalletTx(const uint256& txid) = 0;\n+\n+    //! Get list of all wallet transactions.\n+    virtual std::vector<WalletTx> getWalletTxs() = 0;\n+\n+    //! Try to get updated status for a particular transaction, if possible without blocking.\n+    virtual bool tryGetTxStatus(const uint256& txid,\n+        WalletTxStatus& tx_status,\n+        int& num_blocks,\n+        int64_t& adjusted_time) = 0;\n+\n+    //! Get transaction details.\n+    virtual WalletTx getWalletTxDetails(const uint256& txid,\n+        WalletTxStatus& tx_status,\n+        WalletOrderForm& order_form,\n+        bool& in_mempool,\n+        int& num_blocks,\n+        int64_t& adjusted_time) = 0;\n+\n     //! Get balances.\n     virtual WalletBalances getBalances() = 0;\n \n@@ -170,6 +195,18 @@ class Wallet\n     //! Get available balance.\n     virtual CAmount getAvailableBalance(const CCoinControl& coin_control) = 0;\n \n+    //! Return whether transaction input belongs to wallet.\n+    virtual isminetype txinIsMine(const CTxIn& txin) = 0;\n+\n+    //! Return whether transaction output belongs to wallet.\n+    virtual isminetype txoutIsMine(const CTxOut& txout) = 0;\n+\n+    //! Return debit amount if transaction input belongs to wallet.\n+    virtual CAmount getDebit(const CTxIn& txin, isminefilter filter) = 0;\n+\n+    //! Return credit amount if transaction input belongs to wallet.\n+    virtual CAmount getCredit(const CTxOut& txout, isminefilter filter) = 0;\n+\n     //! Return AvailableCoins + LockedCoins grouped by wallet address.\n     //! (put change in one group with wallet address)\n     using CoinsList = std::map<CTxDestination, std::vector<std::tuple<COutPoint, WalletTxOut>>>;\n@@ -265,6 +302,38 @@ struct WalletBalances\n     }\n };\n \n+// Wallet transaction information.\n+struct WalletTx\n+{\n+    CTransactionRef tx;\n+    std::vector<isminetype> txin_is_mine;\n+    std::vector<isminetype> txout_is_mine;\n+    std::vector<CTxDestination> txout_address;\n+    std::vector<isminetype> txout_address_is_mine;\n+    CAmount credit;\n+    CAmount debit;\n+    CAmount change;\n+    int64_t time;\n+    std::map<std::string, std::string> value_map;\n+    bool is_coinbase;\n+};\n+\n+//! Updated transaction status.\n+struct WalletTxStatus\n+{\n+    int block_height;\n+    int blocks_to_maturity;\n+    int depth_in_main_chain;\n+    int request_count;\n+    unsigned int time_received;\n+    uint32_t lock_time;\n+    bool is_final;\n+    bool is_trusted;\n+    bool is_abandoned;\n+    bool is_coinbase;\n+    bool is_in_main_chain;\n+};\n+\n //! Wallet transaction output.\n struct WalletTxOut\n {"
      },
      {
        "sha": "54e7404b5506f260832c5e7fbc5c2860c860fa5f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -37,7 +37,6 @@\n \n #ifdef ENABLE_WALLET\n #include <wallet/init.h>\n-#include <wallet/wallet.h>\n #endif\n #include <walletinitinterface.h>\n \n@@ -466,9 +465,8 @@ void BitcoinApplication::initializeResult(bool success)\n #ifdef ENABLE_WALLET\n         bool fFirstWallet = true;\n         auto wallets = m_node.getWallets();\n-        auto cwallet = ::vpwallets.begin();\n         for (auto& wallet : wallets) {\n-            WalletModel * const walletModel = new WalletModel(std::move(wallet), m_node, platformStyle, *cwallet++, optionsModel);\n+            WalletModel * const walletModel = new WalletModel(std::move(wallet), m_node, platformStyle, optionsModel);\n \n             window->addWallet(walletModel);\n             if (fFirstWallet) {"
      },
      {
        "sha": "1c910926d4ddf313982cfac75990736a0b630db4",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -12,10 +12,9 @@\n #include <streams.h>\n \n \n-RecentRequestsTableModel::RecentRequestsTableModel(CWallet *wallet, WalletModel *parent) :\n+RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :\n     QAbstractTableModel(parent), walletModel(parent)\n {\n-    Q_UNUSED(wallet);\n     nReceiveRequestsMaxId = 0;\n \n     // Load entries from wallet"
      },
      {
        "sha": "80c7834a196db80e0919b76d9e896d8813a06b64",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -11,8 +11,6 @@\n #include <QStringList>\n #include <QDateTime>\n \n-class CWallet;\n-\n class RecentRequestEntry\n {\n public:\n@@ -60,7 +58,7 @@ class RecentRequestsTableModel: public QAbstractTableModel\n     Q_OBJECT\n \n public:\n-    explicit RecentRequestsTableModel(CWallet *wallet, WalletModel *parent);\n+    explicit RecentRequestsTableModel(WalletModel *parent);\n     ~RecentRequestsTableModel();\n \n     enum ColumnIndex {"
      },
      {
        "sha": "b266789595b6d97b8d30afb801c7c111c6986aa5",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -179,7 +179,7 @@ void TestGUI()\n     auto node = interface::MakeNode();\n     OptionsModel optionsModel(*node);\n     vpwallets.insert(vpwallets.begin(), &wallet);\n-    WalletModel walletModel(std::move(node->getWallets()[0]), *node, platformStyle.get(), &wallet, &optionsModel);\n+    WalletModel walletModel(std::move(node->getWallets()[0]), *node, platformStyle.get(), &optionsModel);\n     vpwallets.erase(vpwallets.begin());\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);"
      },
      {
        "sha": "409835592f7f79282fee614cc6f7a98b681e65b8",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 61,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -10,6 +10,7 @@\n #include <qt/transactionrecord.h>\n \n #include <consensus/consensus.h>\n+#include <interface/node.h>\n #include <key_io.h>\n #include <validation.h>\n #include <script/script.h>\n@@ -22,47 +23,52 @@\n #include <stdint.h>\n #include <string>\n \n-QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n+QString TransactionDesc::FormatTxStatus(const interface::WalletTx& wtx, const interface::WalletTxStatus& status, bool inMempool, int numBlocks, int64_t adjustedTime)\n {\n-    AssertLockHeld(cs_main);\n-    if (!CheckFinalTx(*wtx.tx))\n+    if (!status.is_final)\n     {\n         if (wtx.tx->nLockTime < LOCKTIME_THRESHOLD)\n-            return tr(\"Open for %n more block(s)\", \"\", wtx.tx->nLockTime - chainActive.Height());\n+            return tr(\"Open for %n more block(s)\", \"\", wtx.tx->nLockTime - numBlocks);\n         else\n             return tr(\"Open until %1\").arg(GUIUtil::dateTimeStr(wtx.tx->nLockTime));\n     }\n     else\n     {\n-        int nDepth = wtx.GetDepthInMainChain();\n+        int nDepth = status.depth_in_main_chain;\n         if (nDepth < 0)\n             return tr(\"conflicted with a transaction with %1 confirmations\").arg(-nDepth);\n-        else if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n+        else if (adjustedTime - status.time_received > 2 * 60 && status.request_count == 0)\n             return tr(\"%1/offline\").arg(nDepth);\n         else if (nDepth == 0)\n-            return tr(\"0/unconfirmed, %1\").arg((wtx.InMempool() ? tr(\"in memory pool\") : tr(\"not in memory pool\"))) + (wtx.isAbandoned() ? \", \"+tr(\"abandoned\") : \"\");\n+            return tr(\"0/unconfirmed, %1\").arg((inMempool ? tr(\"in memory pool\") : tr(\"not in memory pool\"))) + (status.is_abandoned ? \", \"+tr(\"abandoned\") : \"\");\n         else if (nDepth < 6)\n             return tr(\"%1/unconfirmed\").arg(nDepth);\n         else\n             return tr(\"%1 confirmations\").arg(nDepth);\n     }\n }\n \n-QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionRecord *rec, int unit)\n+QString TransactionDesc::toHTML(interface::Node& node, interface::Wallet& wallet, TransactionRecord *rec, int unit)\n {\n+    int numBlocks;\n+    int64_t adjustedTime;\n+    interface::WalletTxStatus status;\n+    interface::WalletOrderForm orderForm;\n+    bool inMempool;\n+    interface::WalletTx wtx = wallet.getWalletTxDetails(rec->hash, status, orderForm, inMempool, numBlocks, adjustedTime);\n+\n     QString strHTML;\n \n-    LOCK2(cs_main, wallet->cs_wallet);\n     strHTML.reserve(4000);\n     strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n-    int64_t nTime = wtx.GetTxTime();\n-    CAmount nCredit = wtx.GetCredit(ISMINE_ALL);\n-    CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n+    int64_t nTime = wtx.time;\n+    CAmount nCredit = wtx.credit;\n+    CAmount nDebit = wtx.debit;\n     CAmount nNet = nCredit - nDebit;\n \n-    strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx);\n-    int nRequests = wtx.GetRequestCount();\n+    strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx, status, inMempool, numBlocks, adjustedTime);\n+    int nRequests = status.request_count;\n     if (nRequests != -1)\n     {\n         if (nRequests == 0)\n@@ -77,14 +83,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     //\n     // From\n     //\n-    if (wtx.IsCoinBase())\n+    if (wtx.is_coinbase)\n     {\n         strHTML += \"<b>\" + tr(\"Source\") + \":</b> \" + tr(\"Generated\") + \"<br>\";\n     }\n-    else if (wtx.mapValue.count(\"from\") && !wtx.mapValue[\"from\"].empty())\n+    else if (wtx.value_map.count(\"from\") && !wtx.value_map[\"from\"].empty())\n     {\n         // Online transaction\n-        strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + GUIUtil::HtmlEscape(wtx.mapValue[\"from\"]) + \"<br>\";\n+        strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + GUIUtil::HtmlEscape(wtx.value_map[\"from\"]) + \"<br>\";\n     }\n     else\n     {\n@@ -94,14 +100,16 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             // Credit\n             CTxDestination address = DecodeDestination(rec->address);\n             if (IsValidDestination(address)) {\n-                if (wallet->mapAddressBook.count(address))\n+                std::string name;\n+                isminetype ismine;\n+                if (wallet.getAddress(address, &name, &ismine))\n                 {\n                     strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"unknown\") + \"<br>\";\n                     strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n                     strHTML += GUIUtil::HtmlEscape(rec->address);\n-                    QString addressOwned = (::IsMine(*wallet, address) == ISMINE_SPENDABLE) ? tr(\"own address\") : tr(\"watch-only\");\n-                    if (!wallet->mapAddressBook[address].name.empty())\n-                        strHTML += \" (\" + addressOwned + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \")\";\n+                    QString addressOwned = ismine == ISMINE_SPENDABLE ? tr(\"own address\") : tr(\"watch-only\");\n+                    if (!name.empty())\n+                        strHTML += \" (\" + addressOwned + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(name) + \")\";\n                     else\n                         strHTML += \" (\" + addressOwned + \")\";\n                     strHTML += \"<br>\";\n@@ -113,31 +121,32 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     //\n     // To\n     //\n-    if (wtx.mapValue.count(\"to\") && !wtx.mapValue[\"to\"].empty())\n+    if (wtx.value_map.count(\"to\") && !wtx.value_map[\"to\"].empty())\n     {\n         // Online transaction\n-        std::string strAddress = wtx.mapValue[\"to\"];\n+        std::string strAddress = wtx.value_map[\"to\"];\n         strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n         CTxDestination dest = DecodeDestination(strAddress);\n-        if (wallet->mapAddressBook.count(dest) && !wallet->mapAddressBook[dest].name.empty())\n-            strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[dest].name) + \" \";\n+        std::string name;\n+        if (wallet.getAddress(dest, &name) && !name.empty())\n+            strHTML += GUIUtil::HtmlEscape(name) + \" \";\n         strHTML += GUIUtil::HtmlEscape(strAddress) + \"<br>\";\n     }\n \n     //\n     // Amount\n     //\n-    if (wtx.IsCoinBase() && nCredit == 0)\n+    if (wtx.is_coinbase && nCredit == 0)\n     {\n         //\n         // Coinbase\n         //\n         CAmount nUnmatured = 0;\n         for (const CTxOut& txout : wtx.tx->vout)\n-            nUnmatured += wallet->GetCredit(txout, ISMINE_ALL);\n+            nUnmatured += wallet.getCredit(txout, ISMINE_ALL);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n-        if (wtx.IsInMainChain())\n-            strHTML += BitcoinUnits::formatHtmlWithUnit(unit, nUnmatured)+ \" (\" + tr(\"matures in %n more block(s)\", \"\", wtx.GetBlocksToMaturity()) + \")\";\n+        if (status.is_in_main_chain)\n+            strHTML += BitcoinUnits::formatHtmlWithUnit(unit, nUnmatured)+ \" (\" + tr(\"matures in %n more block(s)\", \"\", status.blocks_to_maturity) + \")\";\n         else\n             strHTML += \"(\" + tr(\"not accepted\") + \")\";\n         strHTML += \"<br>\";\n@@ -152,16 +161,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     else\n     {\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        for (const CTxIn& txin : wtx.tx->vin)\n+        for (isminetype mine : wtx.txin_is_mine)\n         {\n-            isminetype mine = wallet->IsMine(txin);\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        for (const CTxOut& txout : wtx.tx->vout)\n+        for (isminetype mine : wtx.txout_is_mine)\n         {\n-            isminetype mine = wallet->IsMine(txout);\n             if(fAllToMe > mine) fAllToMe = mine;\n         }\n \n@@ -173,22 +180,24 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             // Debit\n             //\n+            auto mine = wtx.txout_is_mine.begin();\n             for (const CTxOut& txout : wtx.tx->vout)\n             {\n                 // Ignore change\n-                isminetype toSelf = wallet->IsMine(txout);\n+                isminetype toSelf = *(mine++);\n                 if ((toSelf == ISMINE_SPENDABLE) && (fAllFromMe == ISMINE_SPENDABLE))\n                     continue;\n \n-                if (!wtx.mapValue.count(\"to\") || wtx.mapValue[\"to\"].empty())\n+                if (!wtx.value_map.count(\"to\") || wtx.value_map[\"to\"].empty())\n                 {\n                     // Offline transaction\n                     CTxDestination address;\n                     if (ExtractDestination(txout.scriptPubKey, address))\n                     {\n                         strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n-                        if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].name.empty())\n-                            strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \" \";\n+                        std::string name;\n+                        if (wallet.getAddress(address, &name) && !name.empty())\n+                            strHTML += GUIUtil::HtmlEscape(name) + \" \";\n                         strHTML += GUIUtil::HtmlEscape(EncodeDestination(address));\n                         if(toSelf == ISMINE_SPENDABLE)\n                             strHTML += \" (own address)\";\n@@ -206,7 +215,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             if (fAllToMe)\n             {\n                 // Payment to self\n-                CAmount nChange = wtx.GetChange();\n+                CAmount nChange = wtx.change;\n                 CAmount nValue = nCredit - nChange;\n                 strHTML += \"<b>\" + tr(\"Total debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nValue) + \"<br>\";\n                 strHTML += \"<b>\" + tr(\"Total credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, nValue) + \"<br>\";\n@@ -221,12 +230,18 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             // Mixed debit transaction\n             //\n-            for (const CTxIn& txin : wtx.tx->vin)\n-                if (wallet->IsMine(txin))\n-                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n-            for (const CTxOut& txout : wtx.tx->vout)\n-                if (wallet->IsMine(txout))\n-                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n+            auto mine = wtx.txin_is_mine.begin();\n+            for (const CTxIn& txin : wtx.tx->vin) {\n+                if (*(mine++)) {\n+                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet.getDebit(txin, ISMINE_ALL)) + \"<br>\";\n+                }\n+            }\n+            mine = wtx.txout_is_mine.begin();\n+            for (const CTxOut& txout : wtx.tx->vout) {\n+                if (*(mine++)) {\n+                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet.getCredit(txout, ISMINE_ALL)) + \"<br>\";\n+                }\n+            }\n         }\n     }\n \n@@ -235,25 +250,25 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     //\n     // Message\n     //\n-    if (wtx.mapValue.count(\"message\") && !wtx.mapValue[\"message\"].empty())\n-        strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(wtx.mapValue[\"message\"], true) + \"<br>\";\n-    if (wtx.mapValue.count(\"comment\") && !wtx.mapValue[\"comment\"].empty())\n-        strHTML += \"<br><b>\" + tr(\"Comment\") + \":</b><br>\" + GUIUtil::HtmlEscape(wtx.mapValue[\"comment\"], true) + \"<br>\";\n+    if (wtx.value_map.count(\"message\") && !wtx.value_map[\"message\"].empty())\n+        strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(wtx.value_map[\"message\"], true) + \"<br>\";\n+    if (wtx.value_map.count(\"comment\") && !wtx.value_map[\"comment\"].empty())\n+        strHTML += \"<br><b>\" + tr(\"Comment\") + \":</b><br>\" + GUIUtil::HtmlEscape(wtx.value_map[\"comment\"], true) + \"<br>\";\n \n     strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + rec->getTxHash() + \"<br>\";\n     strHTML += \"<b>\" + tr(\"Transaction total size\") + \":</b> \" + QString::number(wtx.tx->GetTotalSize()) + \" bytes<br>\";\n     strHTML += \"<b>\" + tr(\"Transaction virtual size\") + \":</b> \" + QString::number(GetVirtualTransactionSize(*wtx.tx)) + \" bytes<br>\";\n     strHTML += \"<b>\" + tr(\"Output index\") + \":</b> \" + QString::number(rec->getOutputIndex()) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    for (const std::pair<std::string, std::string>& r : wtx.vOrderForm)\n+    for (const std::pair<std::string, std::string>& r : orderForm)\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n     //\n     // PaymentRequest info:\n     //\n-    for (const std::pair<std::string, std::string>& r : wtx.vOrderForm)\n+    for (const std::pair<std::string, std::string>& r : orderForm)\n     {\n         if (r.first == \"PaymentRequest\")\n         {\n@@ -265,7 +280,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         }\n     }\n \n-    if (wtx.IsCoinBase())\n+    if (wtx.is_coinbase)\n     {\n         quint32 numBlocksToMaturity = COINBASE_MATURITY +  1;\n         strHTML += \"<br>\" + tr(\"Generated coins must mature %1 blocks before they can be spent. When you generated this block, it was broadcast to the network to be added to the block chain. If it fails to get into the chain, its state will change to \\\"not accepted\\\" and it won't be spendable. This may occasionally happen if another node generates a block within a few seconds of yours.\").arg(QString::number(numBlocksToMaturity)) + \"<br>\";\n@@ -274,15 +289,15 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     //\n     // Debug view\n     //\n-    if (logCategories != BCLog::NONE)\n+    if (node.getLogCategories() != BCLog::NONE)\n     {\n         strHTML += \"<hr><br>\" + tr(\"Debug information\") + \"<br><br>\";\n         for (const CTxIn& txin : wtx.tx->vin)\n-            if(wallet->IsMine(txin))\n-                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n+            if(wallet.txinIsMine(txin))\n+                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet.getDebit(txin, ISMINE_ALL)) + \"<br>\";\n         for (const CTxOut& txout : wtx.tx->vout)\n-            if(wallet->IsMine(txout))\n-                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n+            if(wallet.txoutIsMine(txout))\n+                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet.getCredit(txout, ISMINE_ALL)) + \"<br>\";\n \n         strHTML += \"<br><b>\" + tr(\"Transaction\") + \":</b><br>\";\n         strHTML += GUIUtil::HtmlEscape(wtx.tx->ToString(), true);\n@@ -295,21 +310,22 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             COutPoint prevout = txin.prevout;\n \n             Coin prev;\n-            if(pcoinsTip->GetCoin(prevout, prev))\n+            if(node.getUnspentOutput(prevout, prev))\n             {\n                 {\n                     strHTML += \"<li>\";\n                     const CTxOut &vout = prev.out;\n                     CTxDestination address;\n                     if (ExtractDestination(vout.scriptPubKey, address))\n                     {\n-                        if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].name.empty())\n-                            strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \" \";\n+                        std::string name;\n+                        if (wallet.getAddress(address, &name) && !name.empty())\n+                            strHTML += GUIUtil::HtmlEscape(name) + \" \";\n                         strHTML += QString::fromStdString(EncodeDestination(address));\n                     }\n                     strHTML = strHTML + \" \" + tr(\"Amount\") + \"=\" + BitcoinUnits::formatHtmlWithUnit(unit, vout.nValue);\n-                    strHTML = strHTML + \" IsMine=\" + (wallet->IsMine(vout) & ISMINE_SPENDABLE ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n-                    strHTML = strHTML + \" IsWatchOnly=\" + (wallet->IsMine(vout) & ISMINE_WATCH_ONLY ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n+                    strHTML = strHTML + \" IsMine=\" + (wallet.txoutIsMine(vout) & ISMINE_SPENDABLE ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n+                    strHTML = strHTML + \" IsWatchOnly=\" + (wallet.txoutIsMine(vout) & ISMINE_WATCH_ONLY ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n                 }\n             }\n         }"
      },
      {
        "sha": "ea9ab28ee391a8efb657357710f182a87c04f526",
        "filename": "src/qt/transactiondesc.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactiondesc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactiondesc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.h?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -10,8 +10,12 @@\n \n class TransactionRecord;\n \n-class CWallet;\n-class CWalletTx;\n+namespace interface {\n+class Node;\n+class Wallet;\n+struct WalletTx;\n+struct WalletTxStatus;\n+}\n \n /** Provide a human-readable extended HTML description of a transaction.\n  */\n@@ -20,12 +24,12 @@ class TransactionDesc: public QObject\n     Q_OBJECT\n \n public:\n-    static QString toHTML(CWallet *wallet, CWalletTx &wtx, TransactionRecord *rec, int unit);\n+    static QString toHTML(interface::Node& node, interface::Wallet& wallet, TransactionRecord *rec, int unit);\n \n private:\n     TransactionDesc() {}\n \n-    static QString FormatTxStatus(const CWalletTx& wtx);\n+    static QString FormatTxStatus(const interface::WalletTx& wtx, const interface::WalletTxStatus& status, bool inMempool, int numBlocks, int64_t adjustedTime);\n };\n \n #endif // BITCOIN_QT_TRANSACTIONDESC_H"
      },
      {
        "sha": "60ab2d57d7515de14db10c850b180cc5b8d26b60",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 47,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -5,17 +5,17 @@\n #include <qt/transactionrecord.h>\n \n #include <consensus/consensus.h>\n+#include <interface/wallet.h>\n #include <key_io.h>\n-#include <validation.h>\n #include <timedata.h>\n-#include <wallet/wallet.h>\n+#include <validation.h>\n \n #include <stdint.h>\n \n \n /* Return positive answer if transaction should be shown in list.\n  */\n-bool TransactionRecord::showTransaction(const CWalletTx &wtx)\n+bool TransactionRecord::showTransaction()\n {\n     // There are currently no cases where we hide transactions, but\n     // we may want to use this in the future for things like RBF.\n@@ -25,45 +25,45 @@ bool TransactionRecord::showTransaction(const CWalletTx &wtx)\n /*\n  * Decompose CWallet transaction to model transaction records.\n  */\n-QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *wallet, const CWalletTx &wtx)\n+QList<TransactionRecord> TransactionRecord::decomposeTransaction(const interface::WalletTx& wtx)\n {\n     QList<TransactionRecord> parts;\n-    int64_t nTime = wtx.GetTxTime();\n-    CAmount nCredit = wtx.GetCredit(ISMINE_ALL);\n-    CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n+    int64_t nTime = wtx.time;\n+    CAmount nCredit = wtx.credit;\n+    CAmount nDebit = wtx.debit;\n     CAmount nNet = nCredit - nDebit;\n-    uint256 hash = wtx.GetHash();\n-    std::map<std::string, std::string> mapValue = wtx.mapValue;\n+    uint256 hash = wtx.tx->GetHash();\n+    std::map<std::string, std::string> mapValue = wtx.value_map;\n \n-    if (nNet > 0 || wtx.IsCoinBase())\n+    if (nNet > 0 || wtx.is_coinbase)\n     {\n         //\n         // Credit\n         //\n         for(unsigned int i = 0; i < wtx.tx->vout.size(); i++)\n         {\n             const CTxOut& txout = wtx.tx->vout[i];\n-            isminetype mine = wallet->IsMine(txout);\n+            isminetype mine = wtx.txout_is_mine[i];\n             if(mine)\n             {\n                 TransactionRecord sub(hash, nTime);\n                 CTxDestination address;\n                 sub.idx = i; // vout index\n                 sub.credit = txout.nValue;\n                 sub.involvesWatchAddress = mine & ISMINE_WATCH_ONLY;\n-                if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n+                if (wtx.txout_address_is_mine[i])\n                 {\n                     // Received by Bitcoin Address\n                     sub.type = TransactionRecord::RecvWithAddress;\n-                    sub.address = EncodeDestination(address);\n+                    sub.address = EncodeDestination(wtx.txout_address[i]);\n                 }\n                 else\n                 {\n                     // Received by IP connection (deprecated features), or a multisignature or other non-simple transaction\n                     sub.type = TransactionRecord::RecvFromOther;\n                     sub.address = mapValue[\"from\"];\n                 }\n-                if (wtx.IsCoinBase())\n+                if (wtx.is_coinbase)\n                 {\n                     // Generated\n                     sub.type = TransactionRecord::Generated;\n@@ -77,25 +77,23 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     {\n         bool involvesWatchAddress = false;\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        for (const CTxIn& txin : wtx.tx->vin)\n+        for (isminetype mine : wtx.txin_is_mine)\n         {\n-            isminetype mine = wallet->IsMine(txin);\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        for (const CTxOut& txout : wtx.tx->vout)\n+        for (isminetype mine : wtx.txout_is_mine)\n         {\n-            isminetype mine = wallet->IsMine(txout);\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllToMe > mine) fAllToMe = mine;\n         }\n \n         if (fAllFromMe && fAllToMe)\n         {\n             // Payment to self\n-            CAmount nChange = wtx.GetChange();\n+            CAmount nChange = wtx.change;\n \n             parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n                             -(nDebit - nChange), nCredit - nChange));\n@@ -115,19 +113,18 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 sub.idx = nOut;\n                 sub.involvesWatchAddress = involvesWatchAddress;\n \n-                if(wallet->IsMine(txout))\n+                if(wtx.txout_is_mine[nOut])\n                 {\n                     // Ignore parts sent to self, as this is usually the change\n                     // from a transaction sent back to our own address.\n                     continue;\n                 }\n \n-                CTxDestination address;\n-                if (ExtractDestination(txout.scriptPubKey, address))\n+                if (!boost::get<CNoDestination>(&wtx.txout_address[nOut]))\n                 {\n                     // Sent to Bitcoin Address\n                     sub.type = TransactionRecord::SendToAddress;\n-                    sub.address = EncodeDestination(address);\n+                    sub.address = EncodeDestination(wtx.txout_address[nOut]);\n                 }\n                 else\n                 {\n@@ -161,50 +158,46 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     return parts;\n }\n \n-void TransactionRecord::updateStatus(const CWalletTx &wtx)\n+void TransactionRecord::updateStatus(const interface::WalletTxStatus& wtx, int numBlocks, int64_t adjustedTime)\n {\n-    AssertLockHeld(cs_main);\n     // Determine transaction status\n \n-    // Find the block the tx is in\n-    const CBlockIndex* pindex = LookupBlockIndex(wtx.hashBlock);\n-\n     // Sort order, unrecorded transactions sort to the top\n     status.sortKey = strprintf(\"%010d-%01d-%010u-%03d\",\n-        (pindex ? pindex->nHeight : std::numeric_limits<int>::max()),\n-        (wtx.IsCoinBase() ? 1 : 0),\n-        wtx.nTimeReceived,\n+        wtx.block_height,\n+        wtx.is_coinbase ? 1 : 0,\n+        wtx.time_received,\n         idx);\n-    status.countsForBalance = wtx.IsTrusted() && !(wtx.GetBlocksToMaturity() > 0);\n-    status.depth = wtx.GetDepthInMainChain();\n-    status.cur_num_blocks = chainActive.Height();\n+    status.countsForBalance = wtx.is_trusted && !(wtx.blocks_to_maturity > 0);\n+    status.depth = wtx.depth_in_main_chain;\n+    status.cur_num_blocks = numBlocks;\n \n-    if (!CheckFinalTx(*wtx.tx))\n+    if (!wtx.is_final)\n     {\n-        if (wtx.tx->nLockTime < LOCKTIME_THRESHOLD)\n+        if (wtx.lock_time < LOCKTIME_THRESHOLD)\n         {\n             status.status = TransactionStatus::OpenUntilBlock;\n-            status.open_for = wtx.tx->nLockTime - chainActive.Height();\n+            status.open_for = wtx.lock_time - numBlocks;\n         }\n         else\n         {\n             status.status = TransactionStatus::OpenUntilDate;\n-            status.open_for = wtx.tx->nLockTime;\n+            status.open_for = wtx.lock_time;\n         }\n     }\n     // For generated transactions, determine maturity\n     else if(type == TransactionRecord::Generated)\n     {\n-        if (wtx.GetBlocksToMaturity() > 0)\n+        if (wtx.blocks_to_maturity > 0)\n         {\n             status.status = TransactionStatus::Immature;\n \n-            if (wtx.IsInMainChain())\n+            if (wtx.is_in_main_chain)\n             {\n-                status.matures_in = wtx.GetBlocksToMaturity();\n+                status.matures_in = wtx.blocks_to_maturity;\n \n                 // Check if the block was requested by anyone\n-                if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n+                if (adjustedTime - wtx.time_received > 2 * 60 && wtx.request_count == 0)\n                     status.status = TransactionStatus::MaturesWarning;\n             }\n             else\n@@ -223,14 +216,14 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n         {\n             status.status = TransactionStatus::Conflicted;\n         }\n-        else if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n+        else if (adjustedTime - wtx.time_received > 2 * 60 && wtx.request_count == 0)\n         {\n             status.status = TransactionStatus::Offline;\n         }\n         else if (status.depth == 0)\n         {\n             status.status = TransactionStatus::Unconfirmed;\n-            if (wtx.isAbandoned())\n+            if (wtx.is_abandoned)\n                 status.status = TransactionStatus::Abandoned;\n         }\n         else if (status.depth < RecommendedNumConfirmations)\n@@ -245,10 +238,9 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     status.needsUpdate = false;\n }\n \n-bool TransactionRecord::statusUpdateNeeded() const\n+bool TransactionRecord::statusUpdateNeeded(int numBlocks) const\n {\n-    AssertLockHeld(cs_main);\n-    return status.cur_num_blocks != chainActive.Height() || status.needsUpdate;\n+    return status.cur_num_blocks != numBlocks || status.needsUpdate;\n }\n \n QString TransactionRecord::getTxHash() const"
      },
      {
        "sha": "c653584b5235dc0ed6f37cdf7780860c4069fd89",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -11,8 +11,12 @@\n #include <QList>\n #include <QString>\n \n-class CWallet;\n-class CWalletTx;\n+namespace interface {\n+class Node;\n+class Wallet;\n+struct WalletTx;\n+struct WalletTxStatus;\n+}\n \n /** UI model for transaction status. The transaction status is the part of a transaction that will change over time.\n  */\n@@ -106,8 +110,8 @@ class TransactionRecord\n \n     /** Decompose CWallet transaction to model transaction records.\n      */\n-    static bool showTransaction(const CWalletTx &wtx);\n-    static QList<TransactionRecord> decomposeTransaction(const CWallet *wallet, const CWalletTx &wtx);\n+    static bool showTransaction();\n+    static QList<TransactionRecord> decomposeTransaction(const interface::WalletTx& wtx);\n \n     /** @name Immutable transaction attributes\n       @{*/\n@@ -136,11 +140,11 @@ class TransactionRecord\n \n     /** Update status from core wallet tx.\n      */\n-    void updateStatus(const CWalletTx &wtx);\n+    void updateStatus(const interface::WalletTxStatus& wtx, int numBlocks, int64_t adjustedTime);\n \n     /** Return whether a status update is needed.\n      */\n-    bool statusUpdateNeeded() const;\n+    bool statusUpdateNeeded(int numBlocks) const;\n };\n \n #endif // BITCOIN_QT_TRANSACTIONRECORD_H"
      },
      {
        "sha": "2148ff172868c78f8c5e010135e0beb871574743",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 62,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -14,11 +14,12 @@\n #include <qt/walletmodel.h>\n \n #include <core_io.h>\n+#include <interface/handler.h>\n+#include <interface/node.h>\n #include <validation.h>\n #include <sync.h>\n #include <uint256.h>\n #include <util.h>\n-#include <wallet/wallet.h>\n \n #include <QColor>\n #include <QDateTime>\n@@ -57,13 +58,11 @@ struct TxLessThan\n class TransactionTablePriv\n {\n public:\n-    TransactionTablePriv(CWallet *_wallet, TransactionTableModel *_parent) :\n-        wallet(_wallet),\n+    TransactionTablePriv(TransactionTableModel *_parent) :\n         parent(_parent)\n     {\n     }\n \n-    CWallet *wallet;\n     TransactionTableModel *parent;\n \n     /* Local cache of wallet.\n@@ -74,16 +73,15 @@ class TransactionTablePriv\n \n     /* Query entire wallet anew from core.\n      */\n-    void refreshWallet()\n+    void refreshWallet(interface::Wallet& wallet)\n     {\n         qDebug() << \"TransactionTablePriv::refreshWallet\";\n         cachedWallet.clear();\n         {\n-            LOCK2(cs_main, wallet->cs_wallet);\n-            for (const auto& entry : wallet->mapWallet)\n-            {\n-                if (TransactionRecord::showTransaction(entry.second))\n-                    cachedWallet.append(TransactionRecord::decomposeTransaction(wallet, entry.second));\n+            for (const auto& wtx : wallet.getWalletTxs()) {\n+                if (TransactionRecord::showTransaction()) {\n+                    cachedWallet.append(TransactionRecord::decomposeTransaction(wtx));\n+                }\n             }\n         }\n     }\n@@ -93,7 +91,7 @@ class TransactionTablePriv\n \n        Call with transaction that was added, removed or changed.\n      */\n-    void updateWallet(const uint256 &hash, int status, bool showTransaction)\n+    void updateWallet(interface::Wallet& wallet, const uint256 &hash, int status, bool showTransaction)\n     {\n         qDebug() << \"TransactionTablePriv::updateWallet: \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n \n@@ -128,17 +126,16 @@ class TransactionTablePriv\n             }\n             if(showTransaction)\n             {\n-                LOCK2(cs_main, wallet->cs_wallet);\n                 // Find transaction in wallet\n-                std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n-                if(mi == wallet->mapWallet.end())\n+                interface::WalletTx wtx = wallet.getWalletTx(hash);\n+                if(!wtx.tx)\n                 {\n                     qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is not in wallet\";\n                     break;\n                 }\n                 // Added -- insert at the right position\n                 QList<TransactionRecord> toInsert =\n-                        TransactionRecord::decomposeTransaction(wallet, mi->second);\n+                        TransactionRecord::decomposeTransaction(wtx);\n                 if(!toInsert.isEmpty()) /* only if something to insert */\n                 {\n                     parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex+toInsert.size()-1);\n@@ -179,7 +176,7 @@ class TransactionTablePriv\n         return cachedWallet.size();\n     }\n \n-    TransactionRecord *index(int idx)\n+    TransactionRecord *index(interface::Wallet& wallet, int idx)\n     {\n         if(idx >= 0 && idx < cachedWallet.size())\n         {\n@@ -192,61 +189,42 @@ class TransactionTablePriv\n             // If a status update is needed (blocks came in since last check),\n             //  update the status of this transaction from the wallet. Otherwise,\n             // simply re-use the cached status.\n-            TRY_LOCK(cs_main, lockMain);\n-            if(lockMain)\n-            {\n-                TRY_LOCK(wallet->cs_wallet, lockWallet);\n-                if(lockWallet && rec->statusUpdateNeeded())\n-                {\n-                    std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n-\n-                    if(mi != wallet->mapWallet.end())\n-                    {\n-                        rec->updateStatus(mi->second);\n-                    }\n-                }\n+            interface::WalletTxStatus wtx;\n+            int numBlocks;\n+            int64_t adjustedTime;\n+            if (wallet.tryGetTxStatus(rec->hash, wtx, numBlocks, adjustedTime) && rec->statusUpdateNeeded(numBlocks)) {\n+                rec->updateStatus(wtx, numBlocks, adjustedTime);\n             }\n             return rec;\n         }\n         return 0;\n     }\n \n-    QString describe(TransactionRecord *rec, int unit)\n+    QString describe(interface::Node& node, interface::Wallet& wallet, TransactionRecord *rec, int unit)\n     {\n-        {\n-            LOCK2(cs_main, wallet->cs_wallet);\n-            std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n-            if(mi != wallet->mapWallet.end())\n-            {\n-                return TransactionDesc::toHTML(wallet, mi->second, rec, unit);\n-            }\n-        }\n-        return QString();\n+        return TransactionDesc::toHTML(node, wallet, rec, unit);\n     }\n \n-    QString getTxHex(TransactionRecord *rec)\n+    QString getTxHex(interface::Wallet& wallet, TransactionRecord *rec)\n     {\n-        LOCK2(cs_main, wallet->cs_wallet);\n-        std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n-        if(mi != wallet->mapWallet.end())\n-        {\n-            std::string strHex = EncodeHexTx(*mi->second.tx);\n+        auto tx = wallet.getTx(rec->hash);\n+        if (tx) {\n+            std::string strHex = EncodeHexTx(*tx);\n             return QString::fromStdString(strHex);\n         }\n         return QString();\n     }\n };\n \n-TransactionTableModel::TransactionTableModel(const PlatformStyle *_platformStyle, CWallet* _wallet, WalletModel *parent):\n+TransactionTableModel::TransactionTableModel(const PlatformStyle *_platformStyle, WalletModel *parent):\n         QAbstractTableModel(parent),\n-        wallet(_wallet),\n         walletModel(parent),\n-        priv(new TransactionTablePriv(_wallet, this)),\n+        priv(new TransactionTablePriv(this)),\n         fProcessingQueuedTransactions(false),\n         platformStyle(_platformStyle)\n {\n     columns << QString() << QString() << tr(\"Date\") << tr(\"Type\") << tr(\"Label\") << BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n-    priv->refreshWallet();\n+    priv->refreshWallet(walletModel->wallet());\n \n     connect(walletModel->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n@@ -271,7 +249,7 @@ void TransactionTableModel::updateTransaction(const QString &hash, int status, b\n     uint256 updated;\n     updated.SetHex(hash.toStdString());\n \n-    priv->updateWallet(updated, status, showTransaction);\n+    priv->updateWallet(walletModel->wallet(), updated, status, showTransaction);\n }\n \n void TransactionTableModel::updateConfirmations()\n@@ -608,7 +586,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case WatchonlyDecorationRole:\n         return txWatchonlyDecoration(rec);\n     case LongDescriptionRole:\n-        return priv->describe(rec, walletModel->getOptionsModel()->getDisplayUnit());\n+        return priv->describe(walletModel->node(), walletModel->wallet(), rec, walletModel->getOptionsModel()->getDisplayUnit());\n     case AddressRole:\n         return QString::fromStdString(rec->address);\n     case LabelRole:\n@@ -618,7 +596,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case TxHashRole:\n         return rec->getTxHash();\n     case TxHexRole:\n-        return priv->getTxHex(rec);\n+        return priv->getTxHex(walletModel->wallet(), rec);\n     case TxPlainTextRole:\n         {\n             QString details;\n@@ -694,10 +672,10 @@ QVariant TransactionTableModel::headerData(int section, Qt::Orientation orientat\n QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex &parent) const\n {\n     Q_UNUSED(parent);\n-    TransactionRecord *data = priv->index(row);\n+    TransactionRecord *data = priv->index(walletModel->wallet(), row);\n     if(data)\n     {\n-        return createIndex(row, column, priv->index(row));\n+        return createIndex(row, column, priv->index(walletModel->wallet(), row));\n     }\n     return QModelIndex();\n }\n@@ -735,13 +713,11 @@ struct TransactionNotification\n static bool fQueueNotifications = false;\n static std::vector< TransactionNotification > vQueueNotifications;\n \n-static void NotifyTransactionChanged(TransactionTableModel *ttm, CWallet *wallet, const uint256 &hash, ChangeType status)\n+static void NotifyTransactionChanged(TransactionTableModel *ttm, const uint256 &hash, ChangeType status)\n {\n     // Find transaction in wallet\n-    std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n     // Determine whether to show transaction or not (determine this here so that no relocking is needed in GUI thread)\n-    bool inWallet = mi != wallet->mapWallet.end();\n-    bool showTransaction = (inWallet && TransactionRecord::showTransaction(mi->second));\n+    bool showTransaction = TransactionRecord::showTransaction();\n \n     TransactionNotification notification(hash, status, showTransaction);\n \n@@ -777,13 +753,13 @@ static void ShowProgress(TransactionTableModel *ttm, const std::string &title, i\n void TransactionTableModel::subscribeToCoreSignals()\n {\n     // Connect signals to wallet\n-    wallet->NotifyTransactionChanged.connect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n-    wallet->ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n+    m_handler_transaction_changed = walletModel->wallet().handleTransactionChanged(boost::bind(NotifyTransactionChanged, this, _1, _2));\n+    m_handler_show_progress = walletModel->wallet().handleShowProgress(boost::bind(ShowProgress, this, _1, _2));\n }\n \n void TransactionTableModel::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from wallet\n-    wallet->NotifyTransactionChanged.disconnect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n-    wallet->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n+    m_handler_transaction_changed->disconnect();\n+    m_handler_show_progress->disconnect();\n }"
      },
      {
        "sha": "57566db638c0e95dd7774ddb20c0fdb856aded66",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -10,21 +10,25 @@\n #include <QAbstractTableModel>\n #include <QStringList>\n \n+#include <memory>\n+\n+namespace interface {\n+class Handler;\n+}\n+\n class PlatformStyle;\n class TransactionRecord;\n class TransactionTablePriv;\n class WalletModel;\n \n-class CWallet;\n-\n /** UI model for the transaction table of a wallet.\n  */\n class TransactionTableModel : public QAbstractTableModel\n {\n     Q_OBJECT\n \n public:\n-    explicit TransactionTableModel(const PlatformStyle *platformStyle, CWallet* wallet, WalletModel *parent = 0);\n+    explicit TransactionTableModel(const PlatformStyle *platformStyle, WalletModel *parent = 0);\n     ~TransactionTableModel();\n \n     enum ColumnIndex {\n@@ -80,8 +84,9 @@ class TransactionTableModel : public QAbstractTableModel\n     bool processingQueuedTransactions() const { return fProcessingQueuedTransactions; }\n \n private:\n-    CWallet* wallet;\n     WalletModel *walletModel;\n+    std::unique_ptr<interface::Handler> m_handler_transaction_changed;\n+    std::unique_ptr<interface::Handler> m_handler_show_progress;\n     QStringList columns;\n     TransactionTablePriv *priv;\n     bool fProcessingQueuedTransactions;"
      },
      {
        "sha": "9e7955e9e37a582b27bc1869454b8a1bea6ede3e",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 15,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -5,31 +5,20 @@\n #include <qt/walletmodel.h>\n \n #include <qt/addresstablemodel.h>\n-#include <consensus/validation.h>\n #include <qt/guiconstants.h>\n-#include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n #include <qt/paymentserver.h>\n #include <qt/recentrequeststablemodel.h>\n #include <qt/sendcoinsdialog.h>\n #include <qt/transactiontablemodel.h>\n \n-#include <chain.h>\n #include <interface/handler.h>\n #include <interface/node.h>\n #include <key_io.h>\n-#include <keystore.h>\n-#include <validation.h>\n-#include <net.h> // for g_connman\n-#include <policy/fees.h>\n-#include <policy/rbf.h>\n-#include <sync.h>\n #include <ui_interface.h>\n #include <util.h> // for GetBoolArg\n #include <wallet/coincontrol.h>\n-#include <wallet/feebumper.h>\n #include <wallet/wallet.h>\n-#include <wallet/walletdb.h> // for BackupWallet\n \n #include <stdint.h>\n \n@@ -39,8 +28,8 @@\n #include <QTimer>\n \n \n-WalletModel::WalletModel(std::unique_ptr<interface::Wallet> wallet, interface::Node& node, const PlatformStyle *platformStyle, CWallet *_wallet, OptionsModel *_optionsModel, QObject *parent) :\n-    QObject(parent), m_wallet(std::move(wallet)), m_node(node), cwallet(_wallet), optionsModel(_optionsModel), addressTableModel(0),\n+WalletModel::WalletModel(std::unique_ptr<interface::Wallet> wallet, interface::Node& node, const PlatformStyle *platformStyle, OptionsModel *_optionsModel, QObject *parent) :\n+    QObject(parent), m_wallet(std::move(wallet)), m_node(node), optionsModel(_optionsModel), addressTableModel(0),\n     transactionTableModel(0),\n     recentRequestsTableModel(0),\n     cachedEncryptionStatus(Unencrypted),\n@@ -50,8 +39,8 @@ WalletModel::WalletModel(std::unique_ptr<interface::Wallet> wallet, interface::N\n     fForceCheckBalanceChanged = false;\n \n     addressTableModel = new AddressTableModel(this);\n-    transactionTableModel = new TransactionTableModel(platformStyle, cwallet, this);\n-    recentRequestsTableModel = new RecentRequestsTableModel(cwallet, this);\n+    transactionTableModel = new TransactionTableModel(platformStyle, this);\n+    recentRequestsTableModel = new RecentRequestsTableModel(this);\n \n     // This timer will be fired repeatedly to update the balance\n     pollTimer = new QTimer(this);"
      },
      {
        "sha": "cf757fd2b3c17f7394ac9fddc6c2f73ca594cefe",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58845587e11140e81f087a74c3db76a4d1fc3a1a/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "patch": "@@ -111,7 +111,7 @@ class WalletModel : public QObject\n     Q_OBJECT\n \n public:\n-    explicit WalletModel(std::unique_ptr<interface::Wallet> wallet, interface::Node& node, const PlatformStyle *platformStyle, CWallet *cwallet, OptionsModel *optionsModel, QObject *parent = 0);\n+    explicit WalletModel(std::unique_ptr<interface::Wallet> wallet, interface::Node& node, const PlatformStyle *platformStyle, OptionsModel *optionsModel, QObject *parent = 0);\n     ~WalletModel();\n \n     enum StatusCode // Returned by sendCoins\n@@ -213,7 +213,6 @@ class WalletModel : public QObject\n     std::unique_ptr<interface::Handler> m_handler_watch_only_changed;\n     interface::Node& m_node;\n \n-    CWallet *cwallet;\n     bool fHaveWatchOnly;\n     bool fForceCheckBalanceChanged;\n "
      }
    ]
  },
  {
    "sha": "e872c93ee87477130fb877da1a536b4c693bbab9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODcyYzkzZWU4NzQ3NzEzMGZiODc3ZGExYTUzNmI0YzY5M2JiYWI5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-18T21:06:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin access from qt/guiutil.cpp",
      "tree": {
        "sha": "b6628020b9d5775ccb1f009852ad692ff2633d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6628020b9d5775ccb1f009852ad692ff2633d96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e872c93ee87477130fb877da1a536b4c693bbab9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e872c93ee87477130fb877da1a536b4c693bbab9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e872c93ee87477130fb877da1a536b4c693bbab9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e872c93ee87477130fb877da1a536b4c693bbab9/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58845587e11140e81f087a74c3db76a4d1fc3a1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58845587e11140e81f087a74c3db76a4d1fc3a1a"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3501f97908c4c0dfeea96aae484d144314ee2657",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e872c93ee87477130fb877da1a536b4c693bbab9/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e872c93ee87477130fb877da1a536b4c693bbab9/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=e872c93ee87477130fb877da1a536b4c693bbab9",
        "patch": "@@ -13,7 +13,7 @@\n #include <chainparams.h>\n #include <primitives/transaction.h>\n #include <key_io.h>\n-#include <init.h>\n+#include <interface/node.h>\n #include <policy/policy.h>\n #include <protocol.h>\n #include <script/script.h>\n@@ -232,12 +232,12 @@ QString formatBitcoinURI(const SendCoinsRecipient &info)\n     return ret;\n }\n \n-bool isDust(const QString& address, const CAmount& amount)\n+bool isDust(interface::Node& node, const QString& address, const CAmount& amount)\n {\n     CTxDestination dest = DecodeDestination(address.toStdString());\n     CScript script = GetScriptForDestination(dest);\n     CTxOut txOut(amount, script);\n-    return IsDust(txOut, ::dustRelayFee);\n+    return IsDust(txOut, node.getDustRelayFee());\n }\n \n QString HtmlEscape(const QString& str, bool fMultiLine)"
      },
      {
        "sha": "40037edb9dd6a398aec05f91baaaa75afb5c2608",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e872c93ee87477130fb877da1a536b4c693bbab9/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e872c93ee87477130fb877da1a536b4c693bbab9/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=e872c93ee87477130fb877da1a536b4c693bbab9",
        "patch": "@@ -20,6 +20,11 @@\n class QValidatedLineEdit;\n class SendCoinsRecipient;\n \n+namespace interface\n+{\n+    class Node;\n+}\n+\n QT_BEGIN_NAMESPACE\n class QAbstractItemView;\n class QDateTime;\n@@ -49,7 +54,7 @@ namespace GUIUtil\n     QString formatBitcoinURI(const SendCoinsRecipient &info);\n \n     // Returns true if given address+amount meets \"dust\" definition\n-    bool isDust(const QString& address, const CAmount& amount);\n+    bool isDust(interface::Node& node, const QString& address, const CAmount& amount);\n \n     // HTML escaping for rich text controls\n     QString HtmlEscape(const QString& str, bool fMultiLine=false);"
      },
      {
        "sha": "2363154115e22796470c5ffc0a0fe72eedb27138",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e872c93ee87477130fb877da1a536b4c693bbab9/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e872c93ee87477130fb877da1a536b4c693bbab9/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=e872c93ee87477130fb877da1a536b4c693bbab9",
        "patch": "@@ -226,7 +226,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n         if(entry)\n         {\n-            if(entry->validate())\n+            if(entry->validate(model->node()))\n             {\n                 recipients.append(entry->getValue());\n             }"
      },
      {
        "sha": "6a961d83ea5e7fba54a7aa1aa068be46a9abddbc",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e872c93ee87477130fb877da1a536b4c693bbab9/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e872c93ee87477130fb877da1a536b4c693bbab9/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=e872c93ee87477130fb877da1a536b4c693bbab9",
        "patch": "@@ -127,7 +127,7 @@ void SendCoinsEntry::useAvailableBalanceClicked()\n     Q_EMIT useAvailableBalance(this);\n }\n \n-bool SendCoinsEntry::validate()\n+bool SendCoinsEntry::validate(interface::Node& node)\n {\n     if (!model)\n         return false;\n@@ -158,7 +158,7 @@ bool SendCoinsEntry::validate()\n     }\n \n     // Reject dust outputs:\n-    if (retval && GUIUtil::isDust(ui->payTo->text(), ui->payAmount->value())) {\n+    if (retval && GUIUtil::isDust(node, ui->payTo->text(), ui->payAmount->value())) {\n         ui->payAmount->setValid(false);\n         retval = false;\n     }"
      },
      {
        "sha": "715f4cfde5efa1b9536eeda507f5e6682fdc075f",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e872c93ee87477130fb877da1a536b4c693bbab9/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e872c93ee87477130fb877da1a536b4c693bbab9/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=e872c93ee87477130fb877da1a536b4c693bbab9",
        "patch": "@@ -30,7 +30,7 @@ class SendCoinsEntry : public QStackedWidget\n     ~SendCoinsEntry();\n \n     void setModel(WalletModel *model);\n-    bool validate();\n+    bool validate(interface::Node& node);\n     SendCoinsRecipient getValue();\n \n     /** Return whether the entry is still empty and unedited */"
      }
    ]
  },
  {
    "sha": "56f33ca349b3721a15fce3bf0b6d4fd7fd788970",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmYzM2NhMzQ5YjM3MjFhMTVmY2UzYmYwYjZkNGZkN2ZkNzg4OTcw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-04-20T16:28:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:40Z"
      },
      "message": "Remove direct bitcoin calls from qt/sendcoinsdialog.cpp",
      "tree": {
        "sha": "61c2199706747b7d2bb9581de073b09162e21b32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61c2199706747b7d2bb9581de073b09162e21b32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56f33ca349b3721a15fce3bf0b6d4fd7fd788970",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56f33ca349b3721a15fce3bf0b6d4fd7fd788970",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56f33ca349b3721a15fce3bf0b6d4fd7fd788970",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56f33ca349b3721a15fce3bf0b6d4fd7fd788970/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e872c93ee87477130fb877da1a536b4c693bbab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e872c93ee87477130fb877da1a536b4c693bbab9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e872c93ee87477130fb877da1a536b4c693bbab9"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 17,
      "deletions": 9
    },
    "files": [
      {
        "sha": "f04da4e17625f5e76c4b947c062a66dc65e9c3b2",
        "filename": "src/interface/node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56f33ca349b3721a15fce3bf0b6d4fd7fd788970/src/interface/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56f33ca349b3721a15fce3bf0b6d4fd7fd788970/src/interface/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.cpp?ref=56f33ca349b3721a15fce3bf0b6d4fd7fd788970",
        "patch": "@@ -216,7 +216,9 @@ class NodeImpl : public Node\n         return result;\n     }\n     CFeeRate getDustRelayFee() override { return ::dustRelayFee; }\n+    CFeeRate getFallbackFee() override { CHECK_WALLET(return CWallet::fallbackFee); }\n     CFeeRate getPayTxFee() override { CHECK_WALLET(return ::payTxFee); }\n+    void setPayTxFee(CFeeRate rate) override { CHECK_WALLET(::payTxFee = rate); }\n     UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) override\n     {\n         JSONRPCRequest req;"
      },
      {
        "sha": "6ae7f9e46c6045a11bdc8ac127f3e6c2015458e5",
        "filename": "src/interface/node.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56f33ca349b3721a15fce3bf0b6d4fd7fd788970/src/interface/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56f33ca349b3721a15fce3bf0b6d4fd7fd788970/src/interface/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interface/node.h?ref=56f33ca349b3721a15fce3bf0b6d4fd7fd788970",
        "patch": "@@ -173,9 +173,15 @@ class Node\n     //! Get dust relay fee.\n     virtual CFeeRate getDustRelayFee() = 0;\n \n+    //! Get fallback fee.\n+    virtual CFeeRate getFallbackFee() = 0;\n+\n     //! Get pay tx fee.\n     virtual CFeeRate getPayTxFee() = 0;\n \n+    //! Set pay tx fee.\n+    virtual void setPayTxFee(CFeeRate rate) = 0;\n+\n     //! Execute rpc command.\n     virtual UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) = 0;\n "
      },
      {
        "sha": "498bbf546602d7355bc9c7cb2842c3029f113807",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56f33ca349b3721a15fce3bf0b6d4fd7fd788970/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56f33ca349b3721a15fce3bf0b6d4fd7fd788970/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=56f33ca349b3721a15fce3bf0b6d4fd7fd788970",
        "patch": "@@ -18,7 +18,6 @@\n #include <interface/node.h>\n #include <key_io.h>\n #include <wallet/coincontrol.h>\n-#include <validation.h> // mempool and minRelayTxFee\n #include <ui_interface.h>\n #include <txmempool.h>\n #include <policy/fees.h>\n@@ -177,7 +176,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n-        ui->customFee->setSingleStep(GetRequiredFee(1000));\n+        ui->customFee->setSingleStep(model->node().getRequiredFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n         updateSmartFeeLabel();\n@@ -575,7 +574,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n     case WalletModel::AbsurdFee:\n-        msgParams.first = tr(\"A fee higher than %1 is considered an absurdly high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), maxTxFee));\n+        msgParams.first = tr(\"A fee higher than %1 is considered an absurdly high fee.\").arg(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), model->node().getMaxTxFee()));\n         break;\n     case WalletModel::PaymentRequestExpired:\n         msgParams.first = tr(\"Payment request expired.\");\n@@ -638,7 +637,7 @@ void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n \n void SendCoinsDialog::setMinimumFee()\n {\n-    ui->customFee->setValue(GetRequiredFee(1000));\n+    ui->customFee->setValue(model->node().getRequiredFee(1000));\n }\n \n void SendCoinsDialog::updateFeeSectionControls()\n@@ -670,7 +669,7 @@ void SendCoinsDialog::updateMinFeeLabel()\n {\n     if (model && model->getOptionsModel())\n         ui->checkBoxMinimumFee->setText(tr(\"Pay only the required fee of %1\").arg(\n-            BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), GetRequiredFee(1000)) + \"/kB\")\n+            BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), model->node().getRequiredFee(1000)) + \"/kB\")\n         );\n }\n \n@@ -694,12 +693,13 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     CCoinControl coin_control;\n     updateCoinControlState(coin_control);\n     coin_control.m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n-    FeeCalculation feeCalc;\n-    CFeeRate feeRate = CFeeRate(GetMinimumFee(1000, coin_control, ::mempool, ::feeEstimator, &feeCalc));\n+    int returned_target;\n+    FeeReason reason;\n+    CFeeRate feeRate = CFeeRate(model->node().getMinimumFee(1000, coin_control, &returned_target, &reason));\n \n     ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n \n-    if (feeCalc.reason == FeeReason::FALLBACK) {\n+    if (reason == FeeReason::FALLBACK) {\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)\n         ui->labelFeeEstimation->setText(\"\");\n         ui->fallbackFeeWarningLabel->setVisible(true);\n@@ -711,7 +711,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     else\n     {\n         ui->labelSmartFee2->hide();\n-        ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", feeCalc.returnedTarget));\n+        ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", returned_target));\n         ui->fallbackFeeWarningLabel->setVisible(false);\n     }\n "
      }
    ]
  },
  {
    "sha": "9a61eed1fcc16ddcedc315045f470e1958b0760b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTYxZWVkMWZjYzE2ZGRjZWRjMzE1MDQ1ZjQ3MGUxOTU4YjA3NjBi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-31T10:41:33Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:41Z"
      },
      "message": "Use WalletBalances struct in Qt\n\nSuggested by John Newbery <john@johnnewbery.com>\nhttps://github.com/bitcoin/bitcoin/pull/10244#discussion_r177504284",
      "tree": {
        "sha": "9cdebba8a3d35617f02b70dcf09ad0d8e277db94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cdebba8a3d35617f02b70dcf09ad0d8e277db94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a61eed1fcc16ddcedc315045f470e1958b0760b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a61eed1fcc16ddcedc315045f470e1958b0760b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a61eed1fcc16ddcedc315045f470e1958b0760b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a61eed1fcc16ddcedc315045f470e1958b0760b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56f33ca349b3721a15fce3bf0b6d4fd7fd788970",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56f33ca349b3721a15fce3bf0b6d4fd7fd788970",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56f33ca349b3721a15fce3bf0b6d4fd7fd788970"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 32,
      "deletions": 56
    },
    "files": [
      {
        "sha": "76d02206482e0eca668d80524acbc03e32270df7",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 29,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=9a61eed1fcc16ddcedc315045f470e1958b0760b",
        "patch": "@@ -21,6 +21,8 @@\n #define DECORATION_SIZE 54\n #define NUM_ITEMS 5\n \n+Q_DECLARE_METATYPE(interface::WalletBalances)\n+\n class TxViewDelegate : public QAbstractItemDelegate\n {\n     Q_OBJECT\n@@ -113,16 +115,12 @@ OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent)\n     ui(new Ui::OverviewPage),\n     clientModel(0),\n     walletModel(0),\n-    currentBalance(-1),\n-    currentUnconfirmedBalance(-1),\n-    currentImmatureBalance(-1),\n-    currentWatchOnlyBalance(-1),\n-    currentWatchUnconfBalance(-1),\n-    currentWatchImmatureBalance(-1),\n     txdelegate(new TxViewDelegate(platformStyle, this))\n {\n     ui->setupUi(this);\n \n+    m_balances.balance = -1;\n+\n     // use a SingleColorIcon for the \"out of sync warning\" icon\n     QIcon icon = platformStyle->SingleColorIcon(\":/icons/warning\");\n     icon.addPixmap(icon.pixmap(QSize(64,64), QIcon::Normal), QIcon::Disabled); // also set the disabled icon because we are using a disabled QPushButton to work around missing HiDPI support of QLabel (https://bugreports.qt.io/browse/QTBUG-42503)\n@@ -159,28 +157,23 @@ OverviewPage::~OverviewPage()\n     delete ui;\n }\n \n-void OverviewPage::setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance, const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance)\n+void OverviewPage::setBalance(const interface::WalletBalances& balances)\n {\n     int unit = walletModel->getOptionsModel()->getDisplayUnit();\n-    currentBalance = balance;\n-    currentUnconfirmedBalance = unconfirmedBalance;\n-    currentImmatureBalance = immatureBalance;\n-    currentWatchOnlyBalance = watchOnlyBalance;\n-    currentWatchUnconfBalance = watchUnconfBalance;\n-    currentWatchImmatureBalance = watchImmatureBalance;\n-    ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balance, false, BitcoinUnits::separatorAlways));\n-    ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, unconfirmedBalance, false, BitcoinUnits::separatorAlways));\n-    ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, immatureBalance, false, BitcoinUnits::separatorAlways));\n-    ui->labelTotal->setText(BitcoinUnits::formatWithUnit(unit, balance + unconfirmedBalance + immatureBalance, false, BitcoinUnits::separatorAlways));\n-    ui->labelWatchAvailable->setText(BitcoinUnits::formatWithUnit(unit, watchOnlyBalance, false, BitcoinUnits::separatorAlways));\n-    ui->labelWatchPending->setText(BitcoinUnits::formatWithUnit(unit, watchUnconfBalance, false, BitcoinUnits::separatorAlways));\n-    ui->labelWatchImmature->setText(BitcoinUnits::formatWithUnit(unit, watchImmatureBalance, false, BitcoinUnits::separatorAlways));\n-    ui->labelWatchTotal->setText(BitcoinUnits::formatWithUnit(unit, watchOnlyBalance + watchUnconfBalance + watchImmatureBalance, false, BitcoinUnits::separatorAlways));\n+    m_balances = balances;\n+    ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balances.balance, false, BitcoinUnits::separatorAlways));\n+    ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_balance, false, BitcoinUnits::separatorAlways));\n+    ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_balance, false, BitcoinUnits::separatorAlways));\n+    ui->labelTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.balance + balances.unconfirmed_balance + balances.immature_balance, false, BitcoinUnits::separatorAlways));\n+    ui->labelWatchAvailable->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance, false, BitcoinUnits::separatorAlways));\n+    ui->labelWatchPending->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+    ui->labelWatchImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+    ui->labelWatchTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance + balances.unconfirmed_watch_only_balance + balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n \n     // only show immature (newly mined) balance if it's non-zero, so as not to complicate things\n     // for the non-mining users\n-    bool showImmature = immatureBalance != 0;\n-    bool showWatchOnlyImmature = watchImmatureBalance != 0;\n+    bool showImmature = balances.immature_balance != 0;\n+    bool showWatchOnlyImmature = balances.immature_watch_only_balance != 0;\n \n     // for symmetry reasons also show immature label when the watch-only one is shown\n     ui->labelImmature->setVisible(showImmature || showWatchOnlyImmature);\n@@ -233,9 +226,8 @@ void OverviewPage::setWalletModel(WalletModel *model)\n         // Keep up to date with wallet\n         interface::Wallet& wallet = model->wallet();\n         interface::WalletBalances balances = wallet.getBalances();\n-        setBalance(balances.balance, balances.unconfirmed_balance, balances.immature_balance,\n-                   balances.watch_only_balance, balances.unconfirmed_watch_only_balance, balances.immature_watch_only_balance);\n-        connect(model, SIGNAL(balanceChanged(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)), this, SLOT(setBalance(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)));\n+        setBalance(balances);\n+        connect(model, SIGNAL(balanceChanged(interface::WalletBalances)), this, SLOT(setBalance(interface::WalletBalances)));\n \n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n@@ -251,9 +243,9 @@ void OverviewPage::updateDisplayUnit()\n {\n     if(walletModel && walletModel->getOptionsModel())\n     {\n-        if(currentBalance != -1)\n-            setBalance(currentBalance, currentUnconfirmedBalance, currentImmatureBalance,\n-                       currentWatchOnlyBalance, currentWatchUnconfBalance, currentWatchImmatureBalance);\n+        if (m_balances.balance != -1) {\n+            setBalance(m_balances);\n+        }\n \n         // Update txdelegate->unit with the current unit\n         txdelegate->unit = walletModel->getOptionsModel()->getDisplayUnit();"
      },
      {
        "sha": "36333536e550fd2763468860459e8131f7e21017",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=9a61eed1fcc16ddcedc315045f470e1958b0760b",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_OVERVIEWPAGE_H\n #define BITCOIN_QT_OVERVIEWPAGE_H\n \n-#include <amount.h>\n+#include <interface/wallet.h>\n \n #include <QWidget>\n #include <memory>\n@@ -38,8 +38,7 @@ class OverviewPage : public QWidget\n     void showOutOfSyncWarning(bool fShow);\n \n public Q_SLOTS:\n-    void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n-                    const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n+    void setBalance(const interface::WalletBalances& balances);\n \n Q_SIGNALS:\n     void transactionClicked(const QModelIndex &index);\n@@ -49,12 +48,7 @@ public Q_SLOTS:\n     Ui::OverviewPage *ui;\n     ClientModel *clientModel;\n     WalletModel *walletModel;\n-    CAmount currentBalance;\n-    CAmount currentUnconfirmedBalance;\n-    CAmount currentImmatureBalance;\n-    CAmount currentWatchOnlyBalance;\n-    CAmount currentWatchUnconfBalance;\n-    CAmount currentWatchImmatureBalance;\n+    interface::WalletBalances m_balances;\n \n     TxViewDelegate *txdelegate;\n     std::unique_ptr<TransactionFilterProxy> filter;"
      },
      {
        "sha": "b4c1471a4f223238d0e06ebee1b158457ad42d6e",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=9a61eed1fcc16ddcedc315045f470e1958b0760b",
        "patch": "@@ -150,9 +150,8 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         }\n \n         interface::WalletBalances balances = _model->wallet().getBalances();\n-        setBalance(balances.balance, balances.unconfirmed_balance, balances.immature_balance,\n-                   balances.watch_only_balance, balances.unconfirmed_watch_only_balance, balances.immature_watch_only_balance);\n-        connect(_model, SIGNAL(balanceChanged(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)), this, SLOT(setBalance(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)));\n+        setBalance(balances);\n+        connect(_model, SIGNAL(balanceChanged(interface::WalletBalances)), this, SLOT(setBalance(interface::WalletBalances)));\n         connect(_model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n         updateDisplayUnit();\n \n@@ -516,24 +515,17 @@ bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)\n     return true;\n }\n \n-void SendCoinsDialog::setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n-                                 const CAmount& watchBalance, const CAmount& watchUnconfirmedBalance, const CAmount& watchImmatureBalance)\n+void SendCoinsDialog::setBalance(const interface::WalletBalances& balances)\n {\n-    Q_UNUSED(unconfirmedBalance);\n-    Q_UNUSED(immatureBalance);\n-    Q_UNUSED(watchBalance);\n-    Q_UNUSED(watchUnconfirmedBalance);\n-    Q_UNUSED(watchImmatureBalance);\n-\n     if(model && model->getOptionsModel())\n     {\n-        ui->labelBalance->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), balance));\n+        ui->labelBalance->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), balances.balance));\n     }\n }\n \n void SendCoinsDialog::updateDisplayUnit()\n {\n-    setBalance(model->wallet().getBalance(), 0, 0, 0, 0, 0);\n+    setBalance(model->wallet().getBalances());\n     ui->customFee->setDisplayUnit(model->getOptionsModel()->getDisplayUnit());\n     updateMinFeeLabel();\n     updateSmartFeeLabel();"
      },
      {
        "sha": "43757e3186d40e5f0d2cbd8892eca5da721bac3e",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=9a61eed1fcc16ddcedc315045f470e1958b0760b",
        "patch": "@@ -51,8 +51,7 @@ public Q_SLOTS:\n     void accept();\n     SendCoinsEntry *addEntry();\n     void updateTabsAndLabels();\n-    void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n-                    const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n+    void setBalance(const interface::WalletBalances& balances);\n \n Q_SIGNALS:\n     void coinsSent(const uint256& txid);"
      },
      {
        "sha": "d9db437dc5f7739e4ffcb6d32b24c85b65f3c081",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=9a61eed1fcc16ddcedc315045f470e1958b0760b",
        "patch": "@@ -93,7 +93,7 @@ void WalletModel::checkBalanceChanged(const interface::WalletBalances& new_balan\n {\n     if(new_balances.balanceChanged(m_cached_balances)) {\n         m_cached_balances = new_balances;\n-        Q_EMIT balanceChanged(new_balances.balance, new_balances.unconfirmed_balance, new_balances.immature_balance, new_balances.watch_only_balance, new_balances.unconfirmed_watch_only_balance, new_balances.immature_watch_only_balance);\n+        Q_EMIT balanceChanged(new_balances);\n     }\n }\n "
      },
      {
        "sha": "bc409b10eeaa1d41b93b42ca8f6a252756b81b45",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a61eed1fcc16ddcedc315045f470e1958b0760b/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=9a61eed1fcc16ddcedc315045f470e1958b0760b",
        "patch": "@@ -237,8 +237,7 @@ class WalletModel : public QObject\n \n Q_SIGNALS:\n     // Signal that balance in wallet changed\n-    void balanceChanged(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n-                        const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n+    void balanceChanged(const interface::WalletBalances& balances);\n \n     // Encryption status of wallet changed\n     void encryptionStatusChanged();"
      }
    ]
  },
  {
    "sha": "996013769711bd507cdcd6dde88cbd59fcd4fbad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTYwMTM3Njk3MTFiZDUwN2NkY2Q2ZGRlODhjYmQ1OWZjZDRmYmFk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-04-02T16:16:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-04T20:52:41Z"
      },
      "message": "Add developer notes about blocking GUI code",
      "tree": {
        "sha": "bf83bb5660f492c91f5a2291a9e9858a080b2940",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf83bb5660f492c91f5a2291a9e9858a080b2940"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/996013769711bd507cdcd6dde88cbd59fcd4fbad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/996013769711bd507cdcd6dde88cbd59fcd4fbad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/996013769711bd507cdcd6dde88cbd59fcd4fbad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/996013769711bd507cdcd6dde88cbd59fcd4fbad/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a61eed1fcc16ddcedc315045f470e1958b0760b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a61eed1fcc16ddcedc315045f470e1958b0760b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a61eed1fcc16ddcedc315045f470e1958b0760b"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b00cceb9875fdb0fbf1d859f703c89d976a31798",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/996013769711bd507cdcd6dde88cbd59fcd4fbad/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/996013769711bd507cdcd6dde88cbd59fcd4fbad/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=996013769711bd507cdcd6dde88cbd59fcd4fbad",
        "patch": "@@ -625,6 +625,19 @@ GUI\n     should not interact with the user. That's where View classes come in. The converse also\n     holds: try to not directly access core data structures from Views.\n \n+- Avoid adding slow or blocking code in the GUI thread. In particular do not\n+  add new `interface::Node` and `interface::Wallet` method calls, even if they\n+  may be fast now, in case they are changed to lock or communicate across\n+  processes in the future.\n+\n+  Prefer to offload work from the GUI thread to worker threads (see\n+  `RPCExecutor` in console code as an example) or take other steps (see\n+  https://doc.qt.io/archives/qq/qq27-responsive-guis.html) to keep the GUI\n+  responsive.\n+\n+  - *Rationale*: Blocking the GUI thread can increase latency, and lead to\n+    hangs and deadlocks.\n+\n Subtrees\n ----------\n "
      }
    ]
  }
]