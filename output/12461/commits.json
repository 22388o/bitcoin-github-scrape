[
  {
    "sha": "47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzEwMWJiYjI3ZDBlMTNlYTJiNDBjZTFjN2ZmMGRiYTkwMzBmMzY5",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-12T20:30:04Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-03-04T09:30:29Z"
      },
      "message": "scripted-diff: Rename CPubKey and CKey::*_KEY_SIZE and COMPRESSED_*_KEY_SIZE\n\nTo SIZE and COMPRESSED_SIZE\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/PRIVATE_KEY_SIZE/SIZE/g' src/*.h src/*.cpp src/**/*.h src/**/*.cpp\nsed -i 's/COMPRESSED_PRIVATE_KEY_SIZE/COMPRESSED_SIZE/g' src/*.h src/**/*.cpp src/**/*.h src/**/*.cpp\nsed -i 's/PUBLIC_KEY_SIZE/SIZE/g' src/*.h src/*.cpp src/**/*.h src/**/*.cpp\nsed -i 's/COMPRESSED_PUBLIC_KEY_SIZE/COMPRESSED_SIZE/g' src/*.h src/*.cpp src/**/*.h src/**/*.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "40bfd19c015a4e23c39d0ecc4af56f1101735288",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40bfd19c015a4e23c39d0ecc4af56f1101735288"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlx88DYACgkQTYykuhgE\nCQZkUxAAhghAVTkhOcuAvGreW5QSPzG7Zjo30ErfVJMkzDerwz87KJ4ORXQKloSE\nZIUmD3Xc6iM2gLG74HOC5JJYW3MCCmLb51/WEg1oYl0q78rbQVVFaGEMQkSFnxGA\nAN1bL+r9EKfnrTn233Ci2ozltyoFNIX33OVMi0RJqNOga05yJKPTwdzOiME+cq5C\nwAYPF5KJ7XMD6vlT5+0/1UPCsugQsf4LSZgfyN1om/Ex7h0QTVs0ajSoBgyJxDro\n7ESIhY/xNZaAweAHBTC/oL+dT5h7AyJ8azEfaNFTs/mHnhh4fHxgDMTizcVYdIlm\nFcUeAj4LcdDEfyshEOlND1KJIDwdo+zOCCg8Xw+i0afjqrJ9Tm1fn4qEI0yXQUtt\nh7iOMEw6wrHzNuW7XPcxnUx9mFmSpVrTLGKpVGgvTt21gKPLCX3v7NjyOgYZ+lqD\nxI+2YNe2u1SrvOkmEvpCtvrkJ9xyjpziMw1Ezzv+ry5JgpYkpDMrU3QNU6q+t3gG\nvWsFTkMLznLUD+46DtDtDJFxryzli9x5rEdReQ8yPZ1bUgnHZSgg7k0FE/y65QqY\n2Uu6KxQ3PJNcXjBG43ZGKNNCVzViQHKbZ7IIuPot4qRjhMB+DQUMkWS3yJFGHaSd\nQM0PlHE0wV+lOeF/l8ogwiHTPKJ3CK7/XDuUtBuBKQg3NlC+L4U=\n=nF8u\n-----END PGP SIGNATURE-----",
        "payload": "tree 40bfd19c015a4e23c39d0ecc4af56f1101735288\nparent 2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e\nauthor Ben Woosley <ben.woosley@gmail.com> 1523565004 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1551691829 -0800\n\nscripted-diff: Rename CPubKey and CKey::*_KEY_SIZE and COMPRESSED_*_KEY_SIZE\n\nTo SIZE and COMPRESSED_SIZE\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/PRIVATE_KEY_SIZE/SIZE/g' src/*.h src/*.cpp src/**/*.h src/**/*.cpp\nsed -i 's/COMPRESSED_PRIVATE_KEY_SIZE/COMPRESSED_SIZE/g' src/*.h src/**/*.cpp src/**/*.h src/**/*.cpp\nsed -i 's/PUBLIC_KEY_SIZE/SIZE/g' src/*.h src/*.cpp src/**/*.h src/**/*.cpp\nsed -i 's/COMPRESSED_PUBLIC_KEY_SIZE/COMPRESSED_SIZE/g' src/*.h src/*.cpp src/**/*.h src/**/*.cpp\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 43,
      "deletions": 43
    },
    "files": [
      {
        "sha": "652041f4fbfe8d0577c00594aacddc0a18e706b0",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
        "patch": "@@ -84,13 +84,13 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n  * <http://www.secg.org/sec1-v2.pdf>. The optional parameters and publicKey fields are\n  * included.\n  *\n- * privkey must point to an output buffer of length at least CKey::PRIVATE_KEY_SIZE bytes.\n+ * privkey must point to an output buffer of length at least CKey::SIZE bytes.\n  * privkeylen must initially be set to the size of the privkey buffer. Upon return it\n  * will be set to the number of bytes used in the buffer.\n  * key32 must point to a 32-byte raw private key.\n  */\n static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, bool compressed) {\n-    assert(*privkeylen >= CKey::PRIVATE_KEY_SIZE);\n+    assert(*privkeylen >= CKey::SIZE);\n     secp256k1_pubkey pubkey;\n     size_t pubkeylen = 0;\n     if (!secp256k1_ec_pubkey_create(ctx, &pubkey, key32)) {\n@@ -116,11 +116,11 @@ static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *pr\n         memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n         memcpy(ptr, key32, 32); ptr += 32;\n         memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n-        pubkeylen = CPubKey::COMPRESSED_PUBLIC_KEY_SIZE;\n+        pubkeylen = CPubKey::COMPRESSED_SIZE;\n         secp256k1_ec_pubkey_serialize(ctx, ptr, &pubkeylen, &pubkey, SECP256K1_EC_COMPRESSED);\n         ptr += pubkeylen;\n         *privkeylen = ptr - privkey;\n-        assert(*privkeylen == CKey::COMPRESSED_PRIVATE_KEY_SIZE);\n+        assert(*privkeylen == CKey::COMPRESSED_SIZE);\n     } else {\n         static const unsigned char begin[] = {\n             0x30,0x82,0x01,0x13,0x02,0x01,0x01,0x04,0x20\n@@ -142,11 +142,11 @@ static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *pr\n         memcpy(ptr, begin, sizeof(begin)); ptr += sizeof(begin);\n         memcpy(ptr, key32, 32); ptr += 32;\n         memcpy(ptr, middle, sizeof(middle)); ptr += sizeof(middle);\n-        pubkeylen = CPubKey::PUBLIC_KEY_SIZE;\n+        pubkeylen = CPubKey::SIZE;\n         secp256k1_ec_pubkey_serialize(ctx, ptr, &pubkeylen, &pubkey, SECP256K1_EC_UNCOMPRESSED);\n         ptr += pubkeylen;\n         *privkeylen = ptr - privkey;\n-        assert(*privkeylen == CKey::PRIVATE_KEY_SIZE);\n+        assert(*privkeylen == CKey::SIZE);\n     }\n     return 1;\n }\n@@ -168,8 +168,8 @@ CPrivKey CKey::GetPrivKey() const {\n     CPrivKey privkey;\n     int ret;\n     size_t privkeylen;\n-    privkey.resize(PRIVATE_KEY_SIZE);\n-    privkeylen = PRIVATE_KEY_SIZE;\n+    privkey.resize(SIZE);\n+    privkeylen = SIZE;\n     ret = ec_privkey_export_der(secp256k1_context_sign, privkey.data(), &privkeylen, begin(), fCompressed);\n     assert(ret);\n     privkey.resize(privkeylen);\n@@ -179,7 +179,7 @@ CPrivKey CKey::GetPrivKey() const {\n CPubKey CKey::GetPubKey() const {\n     assert(fValid);\n     secp256k1_pubkey pubkey;\n-    size_t clen = CPubKey::PUBLIC_KEY_SIZE;\n+    size_t clen = CPubKey::SIZE;\n     CPubKey result;\n     int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());\n     assert(ret);\n@@ -271,7 +271,7 @@ bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const\n     std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     if ((nChild >> 31) == 0) {\n         CPubKey pubkey = GetPubKey();\n-        assert(pubkey.size() == CPubKey::COMPRESSED_PUBLIC_KEY_SIZE);\n+        assert(pubkey.size() == CPubKey::COMPRESSED_SIZE);\n         BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, vout.data());\n     } else {\n         assert(size() == 32);"
      },
      {
        "sha": "3a935d70f1a1b5973f00a59bc4353a30532601a8",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
        "patch": "@@ -19,7 +19,7 @@\n /**\n  * secure_allocator is defined in allocators.h\n  * CPrivKey is a serialized private key, with all parameters included\n- * (PRIVATE_KEY_SIZE bytes)\n+ * (SIZE bytes)\n  */\n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n \n@@ -30,15 +30,15 @@ class CKey\n     /**\n      * secp256k1:\n      */\n-    static const unsigned int PRIVATE_KEY_SIZE            = 279;\n-    static const unsigned int COMPRESSED_PRIVATE_KEY_SIZE = 214;\n+    static const unsigned int SIZE            = 279;\n+    static const unsigned int COMPRESSED_SIZE = 214;\n     /**\n      * see www.keylength.com\n      * script supports up to 75 for single byte push\n      */\n     static_assert(\n-        PRIVATE_KEY_SIZE >= COMPRESSED_PRIVATE_KEY_SIZE,\n-        \"COMPRESSED_PRIVATE_KEY_SIZE is larger than PRIVATE_KEY_SIZE\");\n+        SIZE >= COMPRESSED_SIZE,\n+        \"COMPRESSED_SIZE is larger than SIZE\");\n \n private:\n     //! Whether this private key is valid. We check for correctness when modifying the key"
      },
      {
        "sha": "99a56b3b3d0d90c00149eb3902b0070bedf3936f",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
        "patch": "@@ -165,7 +165,7 @@ struct PSBTInput\n                 case PSBT_IN_PARTIAL_SIG:\n                 {\n                     // Make sure that the key is the size of pubkey + 1\n-                    if (key.size() != CPubKey::PUBLIC_KEY_SIZE + 1 && key.size() != CPubKey::COMPRESSED_PUBLIC_KEY_SIZE + 1) {\n+                    if (key.size() != CPubKey::SIZE + 1 && key.size() != CPubKey::COMPRESSED_SIZE + 1) {\n                         throw std::ios_base::failure(\"Size of key was not the expected size for the type partial signature pubkey\");\n                     }\n                     // Read in the pubkey from key"
      },
      {
        "sha": "10953adc3529104ea7647824663dea1a405a3bc4",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
        "patch": "@@ -196,8 +196,8 @@ bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned cha\n     if (!secp256k1_ecdsa_recover(secp256k1_context_verify, &pubkey, &sig, hash.begin())) {\n         return false;\n     }\n-    unsigned char pub[PUBLIC_KEY_SIZE];\n-    size_t publen = PUBLIC_KEY_SIZE;\n+    unsigned char pub[SIZE];\n+    size_t publen = SIZE;\n     secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, fComp ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n     Set(pub, pub + publen);\n     return true;\n@@ -217,8 +217,8 @@ bool CPubKey::Decompress() {\n     if (!secp256k1_ec_pubkey_parse(secp256k1_context_verify, &pubkey, vch, size())) {\n         return false;\n     }\n-    unsigned char pub[PUBLIC_KEY_SIZE];\n-    size_t publen = PUBLIC_KEY_SIZE;\n+    unsigned char pub[SIZE];\n+    size_t publen = SIZE;\n     secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, SECP256K1_EC_UNCOMPRESSED);\n     Set(pub, pub + publen);\n     return true;\n@@ -227,7 +227,7 @@ bool CPubKey::Decompress() {\n bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {\n     assert(IsValid());\n     assert((nChild >> 31) == 0);\n-    assert(size() == COMPRESSED_PUBLIC_KEY_SIZE);\n+    assert(size() == COMPRESSED_SIZE);\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild.begin(), out+32, 32);\n@@ -238,8 +238,8 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChi\n     if (!secp256k1_ec_pubkey_tweak_add(secp256k1_context_verify, &pubkey, out)) {\n         return false;\n     }\n-    unsigned char pub[COMPRESSED_PUBLIC_KEY_SIZE];\n-    size_t publen = COMPRESSED_PUBLIC_KEY_SIZE;\n+    unsigned char pub[COMPRESSED_SIZE];\n+    size_t publen = COMPRESSED_SIZE;\n     secp256k1_ec_pubkey_serialize(secp256k1_context_verify, pub, &publen, &pubkey, SECP256K1_EC_COMPRESSED);\n     pubkeyChild.Set(pub, pub + publen);\n     return true;\n@@ -251,8 +251,8 @@ void CExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n     code[7] = (nChild >>  8) & 0xFF; code[8] = (nChild >>  0) & 0xFF;\n     memcpy(code+9, chaincode.begin(), 32);\n-    assert(pubkey.size() == CPubKey::COMPRESSED_PUBLIC_KEY_SIZE);\n-    memcpy(code+41, pubkey.begin(), CPubKey::COMPRESSED_PUBLIC_KEY_SIZE);\n+    assert(pubkey.size() == CPubKey::COMPRESSED_SIZE);\n+    memcpy(code+41, pubkey.begin(), CPubKey::COMPRESSED_SIZE);\n }\n \n void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {"
      },
      {
        "sha": "918aba273f4ecd91b41013b3b004ecdf7d7afaea",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
        "patch": "@@ -33,33 +33,33 @@ class CPubKey\n     /**\n      * secp256k1:\n      */\n-    static constexpr unsigned int PUBLIC_KEY_SIZE             = 65;\n-    static constexpr unsigned int COMPRESSED_PUBLIC_KEY_SIZE  = 33;\n+    static constexpr unsigned int SIZE             = 65;\n+    static constexpr unsigned int COMPRESSED_SIZE  = 33;\n     static constexpr unsigned int SIGNATURE_SIZE              = 72;\n     static constexpr unsigned int COMPACT_SIGNATURE_SIZE      = 65;\n     /**\n      * see www.keylength.com\n      * script supports up to 75 for single byte push\n      */\n     static_assert(\n-        PUBLIC_KEY_SIZE >= COMPRESSED_PUBLIC_KEY_SIZE,\n-        \"COMPRESSED_PUBLIC_KEY_SIZE is larger than PUBLIC_KEY_SIZE\");\n+        SIZE >= COMPRESSED_SIZE,\n+        \"COMPRESSED_SIZE is larger than SIZE\");\n \n private:\n \n     /**\n      * Just store the serialized data.\n      * Its length can very cheaply be computed from the first byte.\n      */\n-    unsigned char vch[PUBLIC_KEY_SIZE];\n+    unsigned char vch[SIZE];\n \n     //! Compute the length of a pubkey with a given first byte.\n     unsigned int static GetLen(unsigned char chHeader)\n     {\n         if (chHeader == 2 || chHeader == 3)\n-            return COMPRESSED_PUBLIC_KEY_SIZE;\n+            return COMPRESSED_SIZE;\n         if (chHeader == 4 || chHeader == 6 || chHeader == 7)\n-            return PUBLIC_KEY_SIZE;\n+            return SIZE;\n         return 0;\n     }\n \n@@ -140,7 +140,7 @@ class CPubKey\n     void Unserialize(Stream& s)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n-        if (len <= PUBLIC_KEY_SIZE) {\n+        if (len <= SIZE) {\n             s.read((char*)vch, len);\n         } else {\n             // invalid pubkey, skip available data\n@@ -179,7 +179,7 @@ class CPubKey\n     //! Check whether this is a compressed public key.\n     bool IsCompressed() const\n     {\n-        return size() == COMPRESSED_PUBLIC_KEY_SIZE;\n+        return size() == COMPRESSED_SIZE;\n     }\n \n     /**"
      },
      {
        "sha": "7f9db59c454967236453530d1e3bb39a0bfa82cd",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
        "patch": "@@ -61,17 +61,17 @@ static inline void popstack(std::vector<valtype>& stack)\n }\n \n bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n-    if (vchPubKey.size() < CPubKey::COMPRESSED_PUBLIC_KEY_SIZE) {\n+    if (vchPubKey.size() < CPubKey::COMPRESSED_SIZE) {\n         //  Non-canonical public key: too short\n         return false;\n     }\n     if (vchPubKey[0] == 0x04) {\n-        if (vchPubKey.size() != CPubKey::PUBLIC_KEY_SIZE) {\n+        if (vchPubKey.size() != CPubKey::SIZE) {\n             //  Non-canonical public key: invalid length for uncompressed key\n             return false;\n         }\n     } else if (vchPubKey[0] == 0x02 || vchPubKey[0] == 0x03) {\n-        if (vchPubKey.size() != CPubKey::COMPRESSED_PUBLIC_KEY_SIZE) {\n+        if (vchPubKey.size() != CPubKey::COMPRESSED_SIZE) {\n             //  Non-canonical public key: invalid length for compressed key\n             return false;\n         }\n@@ -83,7 +83,7 @@ bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n }\n \n bool static IsCompressedPubKey(const valtype &vchPubKey) {\n-    if (vchPubKey.size() != CPubKey::COMPRESSED_PUBLIC_KEY_SIZE) {\n+    if (vchPubKey.size() != CPubKey::COMPRESSED_SIZE) {\n         //  Non-canonical public key: invalid length for compressed key\n         return false;\n     }"
      },
      {
        "sha": "ed65397d6bce0724ebc2f1a74fd3fd0d4e9e126c",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
        "patch": "@@ -168,7 +168,7 @@ template<typename Stream>\n void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std::map<CPubKey, KeyOriginInfo>& hd_keypaths)\n {\n     // Make sure that the key is the size of pubkey + 1\n-    if (key.size() != CPubKey::PUBLIC_KEY_SIZE + 1 && key.size() != CPubKey::COMPRESSED_PUBLIC_KEY_SIZE + 1) {\n+    if (key.size() != CPubKey::SIZE + 1 && key.size() != CPubKey::COMPRESSED_SIZE + 1) {\n         throw std::ios_base::failure(\"Size of key was not the expected size for the type BIP32 keypath\");\n     }\n     // Read in the pubkey from key"
      },
      {
        "sha": "eb704ebb191447d73b296164f806133aadd7a383",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
        "patch": "@@ -43,12 +43,12 @@ const char* GetTxnOutputType(txnouttype t)\n \n static bool MatchPayToPubkey(const CScript& script, valtype& pubkey)\n {\n-    if (script.size() == CPubKey::PUBLIC_KEY_SIZE + 2 && script[0] == CPubKey::PUBLIC_KEY_SIZE && script.back() == OP_CHECKSIG) {\n-        pubkey = valtype(script.begin() + 1, script.begin() + CPubKey::PUBLIC_KEY_SIZE + 1);\n+    if (script.size() == CPubKey::SIZE + 2 && script[0] == CPubKey::SIZE && script.back() == OP_CHECKSIG) {\n+        pubkey = valtype(script.begin() + 1, script.begin() + CPubKey::SIZE + 1);\n         return CPubKey::ValidSize(pubkey);\n     }\n-    if (script.size() == CPubKey::COMPRESSED_PUBLIC_KEY_SIZE + 2 && script[0] == CPubKey::COMPRESSED_PUBLIC_KEY_SIZE && script.back() == OP_CHECKSIG) {\n-        pubkey = valtype(script.begin() + 1, script.begin() + CPubKey::COMPRESSED_PUBLIC_KEY_SIZE + 1);\n+    if (script.size() == CPubKey::COMPRESSED_SIZE + 2 && script[0] == CPubKey::COMPRESSED_SIZE && script.back() == OP_CHECKSIG) {\n+        pubkey = valtype(script.begin() + 1, script.begin() + CPubKey::COMPRESSED_SIZE + 1);\n         return CPubKey::ValidSize(pubkey);\n     }\n     return false;"
      }
    ]
  },
  {
    "sha": "0580f86bb48004b797d4cb6273e7ffee0b0a0584",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTgwZjg2YmI0ODAwNGI3OTdkNGNiNjI3M2U3ZmZlZTBiMGEwNTg0",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-03-04T09:26:31Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-03-04T09:30:36Z"
      },
      "message": "Fixup whitespace",
      "tree": {
        "sha": "4e9b273dda1609fd2fbff56264a9cbb596d954fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e9b273dda1609fd2fbff56264a9cbb596d954fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0580f86bb48004b797d4cb6273e7ffee0b0a0584",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlx88DwACgkQTYykuhgE\nCQZCUhAAnQMosbVU5Q6ceIKPQvjySccGQHJ+X2lxfNi4XVkP1DsMWd2PBzAyIWTA\nvXrC0Ur0T1FjGhu/W27rNU4dFLQZvFyWDixnzIN4orSjRwI3k6ToDaeuKsNqqimo\nUgjOT9QFZOJ7IkSqe9H8e0x/tl7fCUk0bah8o2/om7blV6pTDVM126j8mRmDsZoe\nKOZtOl7/fpILHCVv9r7KucHaxi01qLKlqRtr3aS5wCg3YAHvU3bkNA7vYSwEgls2\nJ5g92Ta48/N2MHxA4/CgEqu3P+2s4C+2Liuz1YEAKUT8fLjbCcH5tgiNbfI2bIa8\n1eMRTSuenieglZ5TtOeBge1R9UkqNrTTk8CQA33pwcwXvYCNIZF9pkb37MjeHCby\no09Vm7NC6ZUKC/hqQaRe8yz1vj8N35Lm0udUJu2RrMiS/dyI39CKEbf9i386i8pl\n/yQjvRoDppGzx/i1rKb4x4uyVn6ncwS4o5GWXTXn8BAVLwimcwZonCka4+GIMfDc\nFjRc/GZl8j2ziba2cTOqjI93ZA5TFhonSwlhMxmN7OsnzovynoxZwZRwAW36Lpfw\nNZpdVfUPBy8pyXaNgmlB2WUYbg9gZi4zmkdtaRaLPd0sPvcUgJfdpu0j/GxE/CcM\nE022AhLVukZ+TyObw4P0gCOwJj+yPqhj8NNz2IhmdSYYe8IZ2ZA=\n=/ih0\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e9b273dda1609fd2fbff56264a9cbb596d954fd\nparent 47101bbb27d0e13ea2b40ce1c7ff0dba9030f369\nauthor Ben Woosley <ben.woosley@gmail.com> 1551691591 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1551691836 -0800\n\nFixup whitespace\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0580f86bb48004b797d4cb6273e7ffee0b0a0584",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0580f86bb48004b797d4cb6273e7ffee0b0a0584",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0580f86bb48004b797d4cb6273e7ffee0b0a0584/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47101bbb27d0e13ea2b40ce1c7ff0dba9030f369"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c2900f0b079e80ff1a7981d734fe0116c78de397",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0580f86bb48004b797d4cb6273e7ffee0b0a0584/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0580f86bb48004b797d4cb6273e7ffee0b0a0584/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=0580f86bb48004b797d4cb6273e7ffee0b0a0584",
        "patch": "@@ -33,10 +33,10 @@ class CPubKey\n     /**\n      * secp256k1:\n      */\n-    static constexpr unsigned int SIZE             = 65;\n-    static constexpr unsigned int COMPRESSED_SIZE  = 33;\n-    static constexpr unsigned int SIGNATURE_SIZE              = 72;\n-    static constexpr unsigned int COMPACT_SIGNATURE_SIZE      = 65;\n+    static constexpr unsigned int SIZE                   = 65;\n+    static constexpr unsigned int COMPRESSED_SIZE        = 33;\n+    static constexpr unsigned int SIGNATURE_SIZE         = 72;\n+    static constexpr unsigned int COMPACT_SIGNATURE_SIZE = 65;\n     /**\n      * see www.keylength.com\n      * script supports up to 75 for single byte push"
      }
    ]
  }
]