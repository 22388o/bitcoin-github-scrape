[
  {
    "sha": "fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIzYTA1YTIxYjY1YWNlNjkzYjNjMmJhYWY0ZjhjOGQ3NWJjNTJi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-19T19:44:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-19T19:47:55Z"
      },
      "message": "[qa] Use print() in rpc tests",
      "tree": {
        "sha": "52a8218afa4dd5178577806e25e3f4ab66c19881",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52a8218afa4dd5178577806e25e3f4ab66c19881"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29e1131c4642459349a0ed4737121fb1902f8a47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e1131c4642459349a0ed4737121fb1902f8a47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29e1131c4642459349a0ed4737121fb1902f8a47"
      }
    ],
    "stats": {
      "total": 234,
      "additions": 117,
      "deletions": 117
    },
    "files": [
      {
        "sha": "066b9e75783959f34cec9df4bbc9466965e94156",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -78,7 +78,7 @@\n \n #Disable Windows tests by default\n if EXEEXT == \".exe\" and \"-win\" not in opts:\n-    print \"Win tests currently disabled.  Use -win option to enable\"\n+    print(\"Win tests currently disabled.  Use -win option to enable\")\n     sys.exit(0)\n \n #Tests\n@@ -197,7 +197,7 @@ def runtests():\n             coverage.cleanup()\n \n     else:\n-        print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n+        print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n \n \n class RPCCoverage(object):"
      },
      {
        "sha": "1de3c256caa6ea34277ae6d422ca93fb7e5693ee",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -145,9 +145,9 @@ def run_test(self):\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         newbalance = self.nodes[0].getbalance()\n         #assert(newbalance == balance - Decimal(\"10\"))\n-        print \"If balance has not declined after invalidateblock then out of mempool wallet tx which is no longer\"\n-        print \"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\"\n-        print balance , \" -> \" , newbalance , \" ?\"\n+        print(\"If balance has not declined after invalidateblock then out of mempool wallet tx which is no longer\")\n+        print(\"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\")\n+        print(balance , \" -> \" , newbalance , \" ?\")\n \n if __name__ == '__main__':\n     AbandonConflictTest().main()"
      },
      {
        "sha": "6d1c4e0bc4a9e466adf190063518059d8fe1e60f",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -33,20 +33,20 @@ def run_test(self):\n         # Generate some coins\n         self.nodes[0].generate(110)\n \n-        print \"Running test disable flag\"\n+        print(\"Running test disable flag\")\n         self.test_disable_flag()\n \n-        print \"Running test sequence-lock-confirmed-inputs\"\n+        print(\"Running test sequence-lock-confirmed-inputs\")\n         self.test_sequence_lock_confirmed_inputs()\n \n-        print \"Running test sequence-lock-unconfirmed-inputs\"\n+        print(\"Running test sequence-lock-unconfirmed-inputs\")\n         self.test_sequence_lock_unconfirmed_inputs()\n \n         # This test needs to change when BIP68 becomes consensus\n-        print \"Running test BIP68 not consensus\"\n+        print(\"Running test BIP68 not consensus\")\n         self.test_bip68_not_consensus()\n \n-        print \"Passed\\n\"\n+        print(\"Passed\\n\")\n \n     # Test that BIP68 is not in effect if tx version is 1, or if\n     # the first sequence bit is set."
      },
      {
        "sha": "dff85586c74feba1751d48a352763964c27f5204",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -25,7 +25,7 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test(self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n \n         min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "0b26b26c9ce2bcd056efdd9f55f60b95971d49de",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -49,7 +49,7 @@ class GetBlockTemplateLPTest(BitcoinTestFramework):\n     '''\n \n     def run_test(self):\n-        print \"Warning: this test will take about 70 seconds in the best case. Be patient.\"\n+        print(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)\n         templat = self.nodes[0].getblocktemplate()\n         longpollid = templat['longpollid']"
      },
      {
        "sha": "690b471406c45a4f417878a2bf73218eb895cf28",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -25,46 +25,46 @@ def setup_network(self):\n         self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n         \n     def run_test(self):\n-        print \"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\"\n-        print \"Mine 4 blocks on Node 0\"\n+        print(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n+        print(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generate(4)\n         assert(self.nodes[0].getblockcount() == 4)\n         besthash = self.nodes[0].getbestblockhash()\n \n-        print \"Mine competing 6 blocks on Node 1\"\n+        print(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generate(6)\n         assert(self.nodes[1].getblockcount() == 6)\n \n-        print \"Connect nodes to force a reorg\"\n+        print(\"Connect nodes to force a reorg\")\n         connect_nodes_bi(self.nodes,0,1)\n         sync_blocks(self.nodes[0:2])\n         assert(self.nodes[0].getblockcount() == 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n-        print \"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\"\n+        print(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n         newheight = self.nodes[0].getblockcount()\n         newhash = self.nodes[0].getbestblockhash()\n         if (newheight != 4 or newhash != besthash):\n             raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n \n-        print \"\\nMake sure we won't reorg to a lower work chain:\"\n+        print(\"\\nMake sure we won't reorg to a lower work chain:\")\n         connect_nodes_bi(self.nodes,1,2)\n-        print \"Sync node 2 to node 1 so both have 6 blocks\"\n+        print(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n         assert(self.nodes[2].getblockcount() == 6)\n-        print \"Invalidate block 5 on node 1 so its tip is now at 4\"\n+        print(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n         assert(self.nodes[1].getblockcount() == 4)\n-        print \"Invalidate block 3 on node 2, so its tip is now 2\"\n+        print(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n         assert(self.nodes[2].getblockcount() == 2)\n-        print \"..and then mine a block\"\n+        print(\"..and then mine a block\")\n         self.nodes[2].generate(1)\n-        print \"Verify all nodes are at the right height\"\n+        print(\"Verify all nodes are at the right height\")\n         time.sleep(5)\n         for i in xrange(3):\n-            print i,self.nodes[i].getblockcount()\n+            print(i,self.nodes[i].getblockcount())\n         assert(self.nodes[2].getblockcount() == 3)\n         assert(self.nodes[0].getblockcount() == 4)\n         node1height = self.nodes[1].getblockcount()"
      },
      {
        "sha": "7de6b78792f95578b7b6093db23da670a8ff3bc0",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -67,9 +67,9 @@ def run(self):\n                             raise AssertionError(\"Error, test failed: block %064x requested more than once\" % key)\n                 if total_requests > MAX_REQUESTS:\n                     raise AssertionError(\"Error, too many blocks (%d) requested\" % total_requests)\n-                print \"Round %d: success (total requests: %d)\" % (count, total_requests)\n+                print(\"Round %d: success (total requests: %d)\" % (count, total_requests))\n         except AssertionError as e:\n-            print \"TEST FAILED: \", e.args\n+            print(\"TEST FAILED: \", e.args)\n \n         self.disconnectOkay = True\n         self.connection.disconnect_node()\n@@ -82,7 +82,7 @@ def add_options(self, parser):\n                           help=\"Binary to test max block requests behavior\")\n \n     def setup_chain(self):\n-        print \"Initializing test directory \"+self.options.tmpdir\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 1)\n \n     def setup_network(self):"
      },
      {
        "sha": "25aefe2288bd5369f1e617e96a772532454e3110",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -194,7 +194,7 @@ def run_test(self):\n             test_nodes[0].send_message(getdata_request)\n         test_nodes[0].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n-        print \"Peer 0 disconnected after downloading old block too many times\"\n+        print(\"Peer 0 disconnected after downloading old block too many times\")\n \n         # Requesting the current block on test_nodes[1] should succeed indefinitely,\n         # even when over the max upload target.\n@@ -205,17 +205,17 @@ def run_test(self):\n             test_nodes[1].sync_with_ping()\n             assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n \n-        print \"Peer 1 able to repeatedly download new block\"\n+        print(\"Peer 1 able to repeatedly download new block\")\n \n         # But if test_nodes[1] tries for an old block, it gets disconnected too.\n         getdata_request.inv = [CInv(2, big_old_block)]\n         test_nodes[1].send_message(getdata_request)\n         test_nodes[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 1)\n \n-        print \"Peer 1 disconnected after trying to download old block\"\n+        print(\"Peer 1 disconnected after trying to download old block\")\n \n-        print \"Advancing system time on node to clear counters...\"\n+        print(\"Advancing system time on node to clear counters...\")\n \n         # If we advance the time by 24 hours, then the counters should reset,\n         # and test_nodes[2] should be able to retrieve the old block.\n@@ -225,12 +225,12 @@ def run_test(self):\n         test_nodes[2].sync_with_ping()\n         assert_equal(test_nodes[2].block_receive_map[big_old_block], 1)\n \n-        print \"Peer 2 able to download old block\"\n+        print(\"Peer 2 able to download old block\")\n \n         [c.disconnect_node() for c in connections]\n \n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n-        print \"Restarting nodes with -whitelist=127.0.0.1\"\n+        print(\"Restarting nodes with -whitelist=127.0.0.1\")\n         stop_node(self.nodes[0], 0)\n         self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n@@ -258,7 +258,7 @@ def run_test(self):\n         test_nodes[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 3) #node is still connected because of the whitelist\n \n-        print \"Peer 1 still connected after trying to download old block (whitelisted)\"\n+        print(\"Peer 1 still connected after trying to download old block (whitelisted)\")\n \n         [c.disconnect_node() for c in connections]\n "
      },
      {
        "sha": "157ef26eaae64d694dbbf05847e1347bd58c15a8",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -84,7 +84,7 @@ def run_test(self):\n         try:\n             self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n         except JSONRPCException as e:\n-            print \"too-long-ancestor-chain successfully rejected\"\n+            print(\"too-long-ancestor-chain successfully rejected\")\n \n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n@@ -134,9 +134,9 @@ def run_test(self):\n                     mempool = self.nodes[0].getrawmempool(True)\n                     assert_equal(mempool[parent_transaction]['descendantcount'], MAX_DESCENDANTS)\n             except JSONRPCException as e:\n-                print e.error['message']\n+                print(e.error['message'])\n                 assert_equal(i, MAX_DESCENDANTS - 1)\n-                print \"tx that would create too large descendant package successfully rejected\"\n+                print(\"tx that would create too large descendant package successfully rejected\")\n \n         # TODO: check that node1's mempool is as expected\n "
      },
      {
        "sha": "9bff555613cdd6d5ccf32e86e4085a83a519284b",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -32,7 +32,7 @@ def setup_network(self):\n         self.sync_all()\n \n     def run_test(self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n         self.nodes[0].generate(105)\n         self.sync_all()\n "
      },
      {
        "sha": "0603f0dc3bf513f7620d3d0bcb57a4157b10d559",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -161,7 +161,7 @@ def run_test(self):\n         [ x.sync_with_ping() for x in [test_node, white_node] ]\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n-        print \"First height 2 block accepted by both nodes\"\n+        print(\"First height 2 block accepted by both nodes\")\n \n         # 3. Send another block that builds on the original tip.\n         blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n@@ -180,7 +180,7 @@ def run_test(self):\n             if x['hash'] == blocks_h2f[1].hash:\n                 assert_equal(x['status'], \"valid-headers\")\n \n-        print \"Second height 2 block accepted only from whitelisted peer\"\n+        print(\"Second height 2 block accepted only from whitelisted peer\")\n \n         # 4. Now send another block that builds on the forking chain.\n         blocks_h3 = []\n@@ -200,13 +200,13 @@ def run_test(self):\n         # But this block should be accepted by node0 since it has more work.\n         try:\n             self.nodes[0].getblock(blocks_h3[0].hash)\n-            print \"Unrequested more-work block accepted from non-whitelisted peer\"\n+            print(\"Unrequested more-work block accepted from non-whitelisted peer\")\n         except:\n             raise AssertionError(\"Unrequested more work block was not processed\")\n \n         # Node1 should have accepted and reorged.\n         assert_equal(self.nodes[1].getblockcount(), 3)\n-        print \"Successfully reorged to length 3 chain from whitelisted peer\"\n+        print(\"Successfully reorged to length 3 chain from whitelisted peer\")\n \n         # 4b. Now mine 288 more blocks and deliver; all should be processed but\n         # the last (height-too-high) on node0.  Node1 should process the tip if\n@@ -233,7 +233,7 @@ def run_test(self):\n                     raise AssertionError(\"Unrequested block too far-ahead should have been ignored\")\n             except:\n                 if x == all_blocks[287]:\n-                    print \"Unrequested block too far-ahead not processed\"\n+                    print(\"Unrequested block too far-ahead not processed\")\n                 else:\n                     raise AssertionError(\"Unrequested block with more work should have been accepted\")\n \n@@ -243,7 +243,7 @@ def run_test(self):\n         try:\n             white_node.sync_with_ping()\n             self.nodes[1].getblock(tips[1].hash)\n-            print \"Unrequested block far ahead of tip accepted from whitelisted peer\"\n+            print(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n         except:\n             raise AssertionError(\"Unrequested block from whitelisted peer not accepted\")\n \n@@ -259,7 +259,7 @@ def run_test(self):\n         # a getdata request for this block.\n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n-        print \"Unrequested block that would complete more-work chain was ignored\"\n+        print(\"Unrequested block that would complete more-work chain was ignored\")\n \n         # 6. Try to get node to request the missing block.\n         # Poke the node with an inv for block at height 3 and see if that\n@@ -275,14 +275,14 @@ def run_test(self):\n \n         # Check that the getdata includes the right block\n         assert_equal(getdata.inv[0].hash, blocks_h2f[0].sha256)\n-        print \"Inv at tip triggered getdata for unprocessed block\"\n+        print(\"Inv at tip triggered getdata for unprocessed block\")\n \n         # 7. Send the missing block for the third time (now it is requested)\n         test_node.send_message(msg_block(blocks_h2f[0]))\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n-        print \"Successfully reorged to longer chain from non-whitelisted peer\"\n+        print(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n         [ c.disconnect_node() for c in connections ]\n "
      },
      {
        "sha": "e72d65dc7138d6960d131c9445fa0241a818a51d",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -61,7 +61,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n \n         mempool = self.nodes[0].getrawmempool()\n-        print \"Assert that prioritised transaction was mined\"\n+        print(\"Assert that prioritised transaction was mined\")\n         assert(txids[0][0] not in mempool)\n         assert(txids[0][1] in mempool)\n \n@@ -93,7 +93,7 @@ def run_test(self):\n         # High fee transaction should not have been mined, but other high fee rate\n         # transactions should have been.\n         mempool = self.nodes[0].getrawmempool()\n-        print \"Assert that de-prioritised transaction is still in mempool\"\n+        print(\"Assert that de-prioritised transaction is still in mempool\")\n         assert(high_fee_tx in mempool)\n         for x in txids[2]:\n             if (x != high_fee_tx):\n@@ -135,7 +135,7 @@ def run_test(self):\n         # accepted.\n         self.nodes[0].prioritisetransaction(tx2_id, 0, int(self.relayfee*COIN))\n \n-        print \"Assert that prioritised free transaction is accepted to mempool\"\n+        print(\"Assert that prioritised free transaction is accepted to mempool\")\n         assert_equal(self.nodes[0].sendrawtransaction(tx2_hex), tx2_id)\n         assert(tx2_id in self.nodes[0].getrawmempool())\n "
      },
      {
        "sha": "2facd9b0c5bd5432d7277840e89a92d5ea29bf56",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -65,9 +65,9 @@ def create_big_chain(self):\n     def test_height_min(self):\n         if not os.path.isfile(self.prunedir+\"blk00000.dat\"):\n             raise AssertionError(\"blk00000.dat is missing, pruning too early\")\n-        print \"Success\"\n-        print \"Though we're already using more than 550MB, current usage:\", calc_usage(self.prunedir)\n-        print \"Mining 25 more blocks should cause the first block file to be pruned\"\n+        print(\"Success\")\n+        print(\"Though we're already using more than 550MB, current usage:\", calc_usage(self.prunedir))\n+        print(\"Mining 25 more blocks should cause the first block file to be pruned\")\n         # Pruning doesn't run until we're allocating another chunk, 20 full blocks past the height cutoff will ensure this\n         for i in xrange(25):\n             self.mine_full_block(self.nodes[0],self.address[0])\n@@ -78,15 +78,15 @@ def test_height_min(self):\n             if time.time() - waitstart > 10:\n                 raise AssertionError(\"blk00000.dat not pruned when it should be\")\n \n-        print \"Success\"\n+        print(\"Success\")\n         usage = calc_usage(self.prunedir)\n-        print \"Usage should be below target:\", usage\n+        print(\"Usage should be below target:\", usage)\n         if (usage > 550):\n             raise AssertionError(\"Pruning target not being met\")\n \n     def create_chain_with_staleblocks(self):\n         # Create stale blocks in manageable sized chunks\n-        print \"Mine 24 (stale) blocks on Node 1, followed by 25 (main chain) block reorg from Node 0, for 12 rounds\"\n+        print(\"Mine 24 (stale) blocks on Node 1, followed by 25 (main chain) block reorg from Node 0, for 12 rounds\")\n \n         for j in xrange(12):\n             # Disconnect node 0 so it can mine a longer reorg chain without knowing about node 1's soon-to-be-stale chain\n@@ -112,7 +112,7 @@ def create_chain_with_staleblocks(self):\n             connect_nodes(self.nodes[2], 0)\n             sync_blocks(self.nodes[0:3])\n \n-        print \"Usage can be over target because of high stale rate:\", calc_usage(self.prunedir)\n+        print(\"Usage can be over target because of high stale rate:\", calc_usage(self.prunedir))\n \n     def reorg_test(self):\n         # Node 1 will mine a 300 block chain starting 287 blocks back from Node 0 and Node 2's tip\n@@ -123,11 +123,11 @@ def reorg_test(self):\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n-        print \"Current block height:\", height\n+        print(\"Current block height:\", height)\n \n         invalidheight = height-287\n         badhash = self.nodes[1].getblockhash(invalidheight)\n-        print \"Invalidating block at height:\",invalidheight,badhash\n+        print(\"Invalidating block at height:\",invalidheight,badhash)\n         self.nodes[1].invalidateblock(badhash)\n \n         # We've now switched to our previously mined-24 block fork on node 1, but thats not what we want\n@@ -139,29 +139,29 @@ def reorg_test(self):\n             curhash = self.nodes[1].getblockhash(invalidheight - 1)\n \n         assert(self.nodes[1].getblockcount() == invalidheight - 1)\n-        print \"New best height\", self.nodes[1].getblockcount()\n+        print(\"New best height\", self.nodes[1].getblockcount())\n \n         # Reboot node1 to clear those giant tx's from mempool\n         stop_node(self.nodes[1],1)\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-debug\",\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n-        print \"Generating new longer chain of 300 more blocks\"\n+        print(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n \n-        print \"Reconnect nodes\"\n+        print(\"Reconnect nodes\")\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[2], 1)\n         sync_blocks(self.nodes[0:3])\n \n-        print \"Verify height on node 2:\",self.nodes[2].getblockcount()\n-        print \"Usage possibly still high bc of stale blocks in block files:\", calc_usage(self.prunedir)\n+        print(\"Verify height on node 2:\",self.nodes[2].getblockcount())\n+        print(\"Usage possibly still high bc of stale blocks in block files:\", calc_usage(self.prunedir))\n \n-        print \"Mine 220 more blocks so we have requisite history (some blocks will be big and cause pruning of previous chain)\"\n+        print(\"Mine 220 more blocks so we have requisite history (some blocks will be big and cause pruning of previous chain)\")\n         self.nodes[0].generate(220) #node 0 has many large tx's in its mempool from the disconnects\n         sync_blocks(self.nodes[0:3])\n \n         usage = calc_usage(self.prunedir)\n-        print \"Usage should be below target:\", usage\n+        print(\"Usage should be below target:\", usage)\n         if (usage > 550):\n             raise AssertionError(\"Pruning target not being met\")\n \n@@ -173,7 +173,7 @@ def reorg_back(self):\n             self.nodes[2].getblock(self.forkhash)\n             raise AssertionError(\"Old block wasn't pruned so can't test redownload\")\n         except JSONRPCException as e:\n-            print \"Will need to redownload block\",self.forkheight\n+            print(\"Will need to redownload block\",self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n         # Although this is more than 288 blocks, because this chain was written more recently\n@@ -197,14 +197,14 @@ def reorg_back(self):\n         # At this point node 2 is within 288 blocks of the fork point so it will preserve its ability to reorg\n         if self.nodes[2].getblockcount() < self.mainchainheight:\n             blocks_to_mine = first_reorg_height + 1 - self.mainchainheight\n-            print \"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed:\", blocks_to_mine\n+            print(\"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed:\", blocks_to_mine)\n             self.nodes[0].invalidateblock(curchainhash)\n             assert(self.nodes[0].getblockcount() == self.mainchainheight)\n             assert(self.nodes[0].getbestblockhash() == self.mainchainhash2)\n             goalbesthash = self.nodes[0].generate(blocks_to_mine)[-1]\n             goalbestheight = first_reorg_height + 1\n \n-        print \"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\"\n+        print(\"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\")\n         waitstart = time.time()\n         while self.nodes[2].getblockcount() < goalbestheight:\n             time.sleep(0.1)\n@@ -241,8 +241,8 @@ def mine_full_block(self, node, address):\n \n \n     def run_test(self):\n-        print \"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\"\n-        print \"Mining a big blockchain of 995 blocks\"\n+        print(\"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\")\n+        print(\"Mining a big blockchain of 995 blocks\")\n         self.create_big_chain()\n         # Chain diagram key:\n         # *   blocks on main chain\n@@ -253,12 +253,12 @@ def run_test(self):\n         # Start by mining a simple chain that all nodes have\n         # N0=N1=N2 **...*(995)\n \n-        print \"Check that we haven't started pruning yet because we're below PruneAfterHeight\"\n+        print(\"Check that we haven't started pruning yet because we're below PruneAfterHeight\")\n         self.test_height_min()\n         # Extend this chain past the PruneAfterHeight\n         # N0=N1=N2 **...*(1020)\n \n-        print \"Check that we'll exceed disk space target if we have a very high stale block rate\"\n+        print(\"Check that we'll exceed disk space target if we have a very high stale block rate\")\n         self.create_chain_with_staleblocks()\n         # Disconnect N0\n         # And mine a 24 block chain on N1 and a separate 25 block chain on N0\n@@ -282,7 +282,7 @@ def run_test(self):\n         self.mainchainheight = self.nodes[2].getblockcount()   #1320\n         self.mainchainhash2 = self.nodes[2].getblockhash(self.mainchainheight)\n \n-        print \"Check that we can survive a 288 block reorg still\"\n+        print(\"Check that we can survive a 288 block reorg still\")\n         (self.forkheight,self.forkhash) = self.reorg_test() #(1033, )\n         # Now create a 288 block reorg by mining a longer chain on N1\n         # First disconnect N1\n@@ -315,7 +315,7 @@ def run_test(self):\n         #                                 \\\n         #                                  *...**(1320)\n \n-        print \"Test that we can rerequest a block we previously pruned if needed for a reorg\"\n+        print(\"Test that we can rerequest a block we previously pruned if needed for a reorg\")\n         self.reorg_back()\n         # Verify that N2 still has block 1033 on current chain (@), but not on main chain (*)\n         # Invalidate 1033 on current chain (@) on N2 and we should be able to reorg to\n@@ -335,7 +335,7 @@ def run_test(self):\n         #\n         # N1 doesn't change because 1033 on main chain (*) is invalid\n \n-        print \"Done\"\n+        print(\"Done\")\n \n if __name__ == '__main__':\n     PruneTest().main()"
      },
      {
        "sha": "6664feb6adce4baa31fc4863f135273ea4e27300",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -26,7 +26,7 @@ def run_test(self):\n         wait_bitcoinds()\n         self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\", \"-reindex\", \"-checkblockindex=1\"])\n         assert_equal(self.nodes[0].getblockcount(), 3)\n-        print \"Success\"\n+        print(\"Success\")\n \n if __name__ == '__main__':\n     ReindexTest().main()"
      },
      {
        "sha": "f7e1266cef1950dbe26dc1b3d3bad46f08d830f3",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -88,34 +88,34 @@ def setup_network(self):\n     def run_test(self):\n         make_utxo(self.nodes[0], 1*COIN)\n \n-        print \"Running test simple doublespend...\"\n+        print(\"Running test simple doublespend...\")\n         self.test_simple_doublespend()\n \n-        print \"Running test doublespend chain...\"\n+        print(\"Running test doublespend chain...\")\n         self.test_doublespend_chain()\n \n-        print \"Running test doublespend tree...\"\n+        print(\"Running test doublespend tree...\")\n         self.test_doublespend_tree()\n \n-        print \"Running test replacement feeperkb...\"\n+        print(\"Running test replacement feeperkb...\")\n         self.test_replacement_feeperkb()\n \n-        print \"Running test spends of conflicting outputs...\"\n+        print(\"Running test spends of conflicting outputs...\")\n         self.test_spends_of_conflicting_outputs()\n \n-        print \"Running test new unconfirmed inputs...\"\n+        print(\"Running test new unconfirmed inputs...\")\n         self.test_new_unconfirmed_inputs()\n \n-        print \"Running test too many replacements...\"\n+        print(\"Running test too many replacements...\")\n         self.test_too_many_replacements()\n \n-        print \"Running test opt-in...\"\n+        print(\"Running test opt-in...\")\n         self.test_opt_in()\n \n-        print \"Running test prioritised transactions...\"\n+        print(\"Running test prioritised transactions...\")\n         self.test_prioritised_transactions()\n \n-        print \"Passed\\n\"\n+        print(\"Passed\\n\")\n \n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n@@ -465,7 +465,7 @@ def test_opt_in(self):\n         except JSONRPCException as exp:\n             assert_equal(exp.error['code'], -26)\n         else:\n-            print tx1b_txid\n+            print(tx1b_txid)\n             assert(False)\n \n         tx1_outpoint = make_utxo(self.nodes[0], 1.1*COIN)"
      },
      {
        "sha": "814da5526f0c595d7f1adbd5a731713cbad7d1e3",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -67,7 +67,7 @@ def setup_network(self, split=False):\n \n     def run_test(self):\n         url = urlparse.urlparse(self.nodes[0].url)\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n \n         self.nodes[0].generate(1)\n         self.sync_all()"
      },
      {
        "sha": "d1958a5e344eea503095b765deac18dd6db4b065",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -266,7 +266,7 @@ def run_test(self):\n \n         # PART 1\n         # 1. Mine a block; expect inv announcements each time\n-        print \"Part 1: headers don't start before sendheaders message...\"\n+        print(\"Part 1: headers don't start before sendheaders message...\")\n         for i in xrange(4):\n             old_tip = tip\n             tip = self.mine_blocks(1)\n@@ -297,8 +297,8 @@ def run_test(self):\n                 inv_node.clear_last_announcement()\n                 test_node.clear_last_announcement()\n \n-        print \"Part 1: success!\"\n-        print \"Part 2: announce blocks with headers after sendheaders message...\"\n+        print(\"Part 1: success!\")\n+        print(\"Part 2: announce blocks with headers after sendheaders message...\")\n         # PART 2\n         # 2. Send a sendheaders message and test that headers announcements\n         # commence and keep working.\n@@ -360,9 +360,9 @@ def run_test(self):\n                 height += 1\n                 block_time += 1\n \n-        print \"Part 2: success!\"\n+        print(\"Part 2: success!\")\n \n-        print \"Part 3: headers announcements can stop after large reorg, and resume after headers/inv from peer...\"\n+        print(\"Part 3: headers announcements can stop after large reorg, and resume after headers/inv from peer...\")\n \n         # PART 3.  Headers announcements can stop after large reorg, and resume after\n         # getheaders or inv from peer.\n@@ -424,9 +424,9 @@ def run_test(self):\n             assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n             assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n \n-        print \"Part 3: success!\"\n+        print(\"Part 3: success!\")\n \n-        print \"Part 4: Testing direct fetch behavior...\"\n+        print(\"Part 4: Testing direct fetch behavior...\")\n         tip = self.mine_blocks(1)\n         height = self.nodes[0].getblockcount() + 1\n         last_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time']\n@@ -507,7 +507,7 @@ def run_test(self):\n         with mininode_lock:\n             assert_equal(test_node.last_getdata, None)\n \n-        print \"Part 4: success!\"\n+        print(\"Part 4: success!\")\n \n         # Finally, check that the inv node never received a getdata request,\n         # throughout the test"
      },
      {
        "sha": "320d44b892066babd37abc17a813380d28069eaf",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -66,7 +66,7 @@ def add_block(self, block):\n         try:\n             self.blockDB[repr(block.sha256)] = bytes(block.serialize())\n         except TypeError as e:\n-            print \"Unexpected error: \", sys.exc_info()[0], e.args\n+            print(\"Unexpected error: \", sys.exc_info()[0], e.args)\n         self.currentBlock = block.sha256\n         self.headers_map[block.sha256] = CBlockHeader(block)\n \n@@ -126,7 +126,7 @@ def add_transaction(self, tx):\n         try:\n             self.txDB[repr(tx.sha256)] = bytes(tx.serialize())\n         except TypeError as e:\n-            print \"Unexpected error: \", sys.exc_info()[0], e.args\n+            print(\"Unexpected error: \", sys.exc_info()[0], e.args)\n \n     def get_transactions(self, inv):\n         responses = []"
      },
      {
        "sha": "1d5463264c920d1d8733b8e0c7f5f70bb4d7247b",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -269,10 +269,10 @@ def check_results(self, blockhash, outcome):\n                     if c.cb.bestblockhash == blockhash:\n                         return False\n                     if blockhash not in c.cb.block_reject_map:\n-                        print 'Block not in reject map: %064x' % (blockhash)\n+                        print('Block not in reject map: %064x' % (blockhash))\n                         return False\n                     if not outcome.match(c.cb.block_reject_map[blockhash]):\n-                        print 'Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash)\n+                        print('Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash))\n                         return False\n                 elif ((c.cb.bestblockhash == blockhash) != outcome):\n                     # print c.cb.bestblockhash, blockhash, outcome\n@@ -297,10 +297,10 @@ def check_mempool(self, txhash, outcome):\n                     if txhash in c.cb.lastInv:\n                         return False\n                     if txhash not in c.cb.tx_reject_map:\n-                        print 'Tx not in reject map: %064x' % (txhash)\n+                        print('Tx not in reject map: %064x' % (txhash))\n                         return False\n                     if not outcome.match(c.cb.tx_reject_map[txhash]):\n-                        print 'Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash)\n+                        print('Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash))\n                         return False\n                 elif ((txhash in c.cb.lastInv) != outcome):\n                     # print c.rpc.getrawmempool(), c.cb.lastInv\n@@ -403,7 +403,7 @@ def run(self):\n                 if (not self.check_mempool(tx.sha256, tx_outcome)):\n                     raise AssertionError(\"Mempool test failed at test %d\" % test_number)\n \n-            print \"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ]\n+            print(\"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ])\n             test_number += 1\n \n         [ c.disconnect_node() for c in self.connections ]"
      },
      {
        "sha": "b73f8d9055c4bd1e519cc5f0d75756db97fdfca8",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -1046,8 +1046,8 @@ def deliver(self, conn, message):\n             try:\n                 getattr(self, 'on_' + message.command)(conn, message)\n             except:\n-                print \"ERROR delivering %s (%s)\" % (repr(message),\n-                                                    sys.exc_info()[0])\n+                print(\"ERROR delivering %s (%s)\" % (repr(message),\n+                                                    sys.exc_info()[0]))\n \n     def on_version(self, conn, message):\n         if message.nVersion >= 209:\n@@ -1137,8 +1137,8 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n         vt.addrFrom.ip = \"0.0.0.0\"\n         vt.addrFrom.port = 0\n         self.send_message(vt, True)\n-        print 'MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n-            + str(dstport)\n+        print('MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n+            + str(dstport))\n \n         try:\n             self.connect((dstaddr, dstport))"
      },
      {
        "sha": "3cb12c095e90435c9fc40bb8fc4a95a975c2857a",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -186,7 +186,7 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_chain(self):\n-        print \"Initializing test directory \"+self.options.tmpdir\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n \n     def setup_network(self):"
      },
      {
        "sha": "035df3d3c7c067a1c0ba7b928d1d8c2702174181",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -156,11 +156,11 @@ def initialize_chain(test_dir):\n                 args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n             bitcoind_processes[i] = subprocess.Popen(args)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n+                print(\"initialize_chain: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\")\n             subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir,\n                                     \"-rpcwait\", \"getblockcount\"], stdout=devnull)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: bitcoin-cli -rpcwait getblockcount completed\"\n+                print(\"initialize_chain: bitcoin-cli -rpcwait getblockcount completed\")\n         devnull.close()\n \n         rpcs = []\n@@ -245,12 +245,12 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     bitcoind_processes[i] = subprocess.Popen(args)\n     devnull = open(os.devnull, \"w\")\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n+        print(\"start_node: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\")\n     subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir] +\n                           _rpchost_to_args(rpchost)  +\n                           [\"-rpcwait\", \"getblockcount\"], stdout=devnull)\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: calling bitcoin-cli -rpcwait getblockcount returned\"\n+        print(\"start_node: calling bitcoin-cli -rpcwait getblockcount returned\")\n     devnull.close()\n     url = \"http://rt:rt@%s:%d\" % (rpchost or '127.0.0.1', rpc_port(i))\n "
      },
      {
        "sha": "99fb3a9ab5decb1485bdcd96ef734d4d5af93ae1",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -32,7 +32,7 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test (self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n \n         self.nodes[0].generate(1)\n \n@@ -276,7 +276,7 @@ def run_test (self):\n             '-salvagewallet',\n         ]\n         for m in maintenance:\n-            print \"check \" + m\n+            print(\"check \" + m)\n             stop_nodes(self.nodes)\n             wait_bitcoinds()\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)"
      },
      {
        "sha": "10c8f508f689384ad3c4d6bd2bf648acd0bced22",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -22,7 +22,7 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test (self):\n-        print \"Mining blocks...\"\n+        print(\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.sync_all()\n         self.nodes[1].generate(101)"
      },
      {
        "sha": "8937f0a3bd508b466e0af2cf040de8a211796307",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=fab3a05a21b65ace693b3c2baaf4f8c8d75bc52b",
        "patch": "@@ -44,7 +44,7 @@ def run_test(self):\n         genhashes = self.nodes[0].generate(1)\n         self.sync_all()\n \n-        print \"listen...\"\n+        print(\"listen...\")\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = str(msg[0])\n         body = msg[1]"
      }
    ]
  }
]