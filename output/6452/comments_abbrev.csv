sipa,2015-07-17T18:30:03Z,"Untested ACK. I was thinking about implementing something like this myself while working on the mempool limitation.\n\nGiven the false positive rate and the amount of memory usage, I think this approach is better than #6450.\n",https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-122366525,122366525,
ajweiss,2015-07-17T20:48:59Z,"If I've done the math right, I think it would only take about a million rejects to push the false positive rate on this near 98%.  At 1000 txn/sec, this is somewhere on the order of 20 minutes.  It only takes a few hundred thousand to push it into low, yet still problematic double digit false positive territory.\n\nI also don't fully understand the comment in the code that claims this uses 1.7MB. ",https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-122410352,122410352,
ajweiss,2015-07-17T21:03:47Z,"Ahh, I see nevermind.  I didn't catch that the rolling stuff allocates filters at 2x size, and rotates them when they're half full making the fprate never go above the specified value (1e-6).  \n\nThe sizes add up now too...\n\nLooks good.\n",https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-122415126,122415126,
laanwj,2015-07-18T07:19:42Z,utACK apart from randomness nit.\n\nEdit: as using randomness during static initialization seems error prone.\n,https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-122507976,122507976,
petertodd,2015-07-19T20:26:17Z,"@laanwj As per @sipa's suggestion I added a reset() method that resets nTweak as well, and went even further to change the CRollingBloomFilter to handle setting nTweak for you. This is a bigger patch that changes addrKnown a bit as well, but overall this should simplify all uses by ensuring the default behavior is a secure RNG source.\n",https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-122701364,122701364,
sipa,2015-07-24T18:33:54Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-124612703,124612703,
morcos,2015-07-27T15:46:30Z,"See comments [here](https://github.com/morcos/bitcoin/commit/cfaef8a5ccd67f7e6c94ccf304352916c48f5689#commitcomment-12357761), I'll just rebase #6470 on this when it's merged and/or finished.\n",https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-125250364,125250364,
sipa,2015-07-27T17:26:54Z,Some suggested changes: https://github.com/sipa/bitcoin/commits/recent-rejects-rolling-bloom\n,https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-125279981,125279981,
laanwj,2015-07-28T09:03:25Z,Code review ACK on sipa's changes\n,https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-125511115,125511115,
petertodd,2015-07-28T19:53:32Z,"ACK sipa's changes as well, updated this pull-req to them.\n\nI'll note there is a chance that https://github.com/petertodd/bitcoin/commit/d741371d7d27e228aa64c618c50b23fb5449c3e1 could lead to intermittent unit test failures.\n",https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-125735059,125735059,
jtimon,2015-07-29T11:21:52Z,I still don't understand why can't we reuse the same cache for rejections and #6077 (what I wanted to do in https://github.com/jtimon/bitcoin/commit/935ee1ec875308f27339418363c787ec061d335f to make 0-size mempools safe).\nDoes anybody have any answer (I failed to get it on IRC)?\n,https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-125922766,125922766,
laanwj,2015-07-31T10:08:19Z,Error in Travis during the Python unit tests:\n\n```\nbitcoind: /home/travis/build/bitcoin/bitcoin/depends/i686-pc-linux-gnu/include/boost/smart_ptr/scoped_ptr.hpp:99: T* boost::scoped_ptr<T>::operator->() const [with T = CRollingBloomFilter]: Assertion `px != 0' failed.\nUnexpected exception caught during testing: ''\n```\n\n> I'll note there is a chance that petertodd@d741371 could lead to inter,https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-126632925,126632925,
laanwj,2015-07-31T12:29:16Z,"This can be solved by moving\n\n``` c++\n    // Initialize global variables that cannot be constructed at startup.\n    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n```\n\n~~to _before_ `if (!reIndex) {...`~~\n\nEdit: Hm no... that doesn't do it either. It needs to go _all the way_ to the beginning of the function, after locking cs_main.\n",https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-126675348,126675348,
laanwj,2015-07-31T16:32:01Z,Continued in #6498\n,https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-126745889,126745889,
dcousens,2015-10-04T23:28:36Z,**edit:** moved comments to #6498 \n,https://github.com/bitcoin/bitcoin/pull/6452#issuecomment-145401028,145401028,
laanwj,2015-07-18T07:18:12Z,"Not sure if this should be insecure_rand. insecure_rand is meant for high-performance low-security use. \n- No performance constraints: this is done once, at initialization time\n- If this value could be guessed by an adversary, there is additional DoS risk. \n- Also, the spread between nodes should be as uniform as possible to make sure that if false positives happen, they are at least as non-con",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945357,34945357,src/main.cpp
petertodd,2015-07-18T07:46:58Z,"Changed to GetRand()\n\nThe other CRollingBloom filter use is in net.cpp, which also uses insecure_rand() - might be worth it to fix that too.\n\nRe: static global initialization, it'd be possible to change the seed here every time the bloom filter is cleared; dunno what's the best way to actually do that in C++ though.\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945564,34945564,src/main.cpp
laanwj,2015-07-18T07:59:17Z,"GetRand() relies on openssl being initialized, so something very bad could happen if things are executed in the wrong order.\nThus I'd prefer an explicit initialization. Possibly make recentRejects a pointer and explicitly allocate/deallocate it.\nSetting a new tweak every time the filter is cleared may be overkill, I don't know.\nAgree re: net.cpp, although that structure is per-peer so there's n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945638,34945638,src/main.cpp
petertodd,2015-07-18T08:12:33Z,"At what point can we actually guarantee OpenSSL is initialized? Remember that the capcity of the filter has to be pretty large - 120,000 transactions - so it could take a long time before it gets rolled over if a bad initialization is an issue.\n\nRegardless of how it gets initialized, only 1/1,000,000 txs will be affected. Sure an attacker might be able to pick-and-choose that subset, but I can't",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34945720,34945720,src/main.cpp
morcos,2015-07-20T00:53:48Z,"I didn't realize you changed this.  For whatever reason the previous behavior was to relay transactions we rejected (even for reasons other than we already had them) if we received them from a white listed peer.  It might be better to leave this unchanged.  Although orphan transactions are already not relayed, so its not quite consistent as is.\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34964825,34964825,src/main.cpp
petertodd,2015-07-20T11:25:55Z,"Given that relaying invalid txs can get you banned, seems like a vulnerability waiting to be exploited... Sure this is for whitelisted peers only, but there's many shades of grey in white. :)\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r34985672,34985672,src/main.cpp
laanwj,2015-07-20T14:37:21Z,"I think there are some companies that rely on the current behavior that peers that have you whitelisted relay all your transactions. E.g. they use a bitcoin node as border router.\nAgree that it's a grey area, but changing this without announcement is a bad idea.\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35000921,35000921,src/main.cpp
sipa,2015-07-20T15:13:53Z,I wonder whether claiming that a 32-bit random integer can be cryptographically secure...\n,https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35005273,35005273,src/bloom.h
sipa,2015-07-20T15:15:45Z,"If a global CRollingBloomFilter object is constructed, this GetRand() call will still happen before the OpenSSL PRNG is initialized.\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35005485,35005485,src/bloom.cpp
sipa,2015-07-20T15:21:02Z,"I think the behaviour should be to relay every valid transaction received from a whitelisted peer (including when it was in the mempool already).\n\nI don't think we should relay invalid transactions from whitelisted peers (especially not things tha would otherwise trigger DoS score), but instead yell loudly that some whitelisted peer is broken.\n\nConcept ACK here, though.\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006141,35006141,src/main.cpp
petertodd,2015-07-20T15:21:20Z,Fair enough - reverted and added a FIXME for a future patch to fix.\n,https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006175,35006175,src/main.cpp
petertodd,2015-07-20T15:22:58Z,"Well yes! It's cryptographically secure if there are 32-bits of randomness unknown to the attacker; the point is the attacker has no insight into what the value is, which is what we need for this application.\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006422,35006422,src/bloom.h
sipa,2015-07-20T15:25:13Z,Fair enough.\n,https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35006721,35006721,src/bloom.h
petertodd,2015-07-20T15:31:34Z,"Perhaps, but that sounds like a fundemental API flaw in GetRand() - it should fail hard under that circumstance. \n\nAccording to https://www.openssl.org/docs/crypto/RAND_bytes.html ""An error occurs if the PRNG has not been seeded with enough randomness to ensure an unpredictable byte sequence."", and we do check that the underlying RAND_bytes() returns success. If we trust OpenSSL, then the fact t",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35007521,35007521,src/bloom.cpp
sipa,2015-07-20T15:37:58Z,I'd say it's a fundamental flaw in C++ wrt initialization of globals.\n,https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35008282,35008282,src/bloom.cpp
sipa,2015-07-20T15:39:24Z,"Oh, I'm not talking about OpenSSL giving out bad randomness. I'm more talking about having the proper thread locking in place for OpenSSL to not cause crashes, or other startup things we do there.\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35008492,35008492,src/bloom.cpp
laanwj,2015-07-20T15:42:33Z,"Right - 32 bit seems to be enough for this application. Trying to somehow enumerate them by probing for false positives would require a ton of probing, and be a DoS in the first place, which should be handled by other means.\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35008872,35008872,src/bloom.h
petertodd,2015-07-20T15:42:44Z,"Notice how rust is designed such that no code is executed prior to main()...\n\nRight, so you're worried that I may have introduced an occasional crashing bug or something? Maybe we need a GetRandButItsOkIfSometimesItDoesntWork() that doesn't crash if RAND_bytes() fails :/\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35008888,35008888,src/bloom.cpp
petertodd,2015-07-20T16:19:30Z,"Equally, would it be fair to say that by the time recentRejects actually gets used after startup, we can safely assume that OpenSSL has been initialized?\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35012971,35012971,src/bloom.cpp
sipa,2015-07-20T16:25:57Z,"Yes.\n\nYou could just fail at insert() when no tweak was passed at creation, and no reset was called yet.\n\nOr we could not bother, because it won't hurt in practice with the above code...\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35013713,35013713,src/bloom.cpp
petertodd,2015-07-20T17:16:44Z,"By ""not bother"", you mean leave the code exactly as it is and wait to see if there's a platform where OpenSSL crashes on us? It'll at least be a pretty clear failure...\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35019056,35019056,src/bloom.cpp
sipa,2015-07-24T18:01:38Z,"By not bother, I mean that I am reasonably confident that the current code will not cause any problems, as the global initialization is done single-threaded.\n\nDespite that, I think it's cleaner to not consume randomness in the constructor.\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35448784,35448784,src/bloom.cpp
petertodd,2015-07-24T18:18:36Z,Randomness isn't something that is consumed with well-designed PRNGs; it's not like calling GetRand() makes subsequent calls to GetRand() return secrets that are more knowable to the attacker.\n,https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35450518,35450518,src/bloom.cpp
sipa,2015-07-24T18:21:48Z,I fully agree.\n\ns/consume randomness/call GetRand()/\n,https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35450888,35450888,src/bloom.cpp
sipa,2015-07-24T18:23:27Z,"I'm not saying this is a problem, only that calling a random 32-bit number cryptographic is a bit grey area. I would just call it secure, because something of cryptographic strength isn't necessary here.\n",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35451113,35451113,src/bloom.h
laanwj,2015-07-27T11:35:05Z,I don't like using 0 as a special marker value here - wouldn't 0 be a perfectly good tweak value?\nMaybe add an explicit method `resetWithRandomTweak()` (or even move the use of randomness to the caller site)?\n,https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35526823,35526823,src/bloom.cpp
petertodd,2015-07-27T12:10:51Z,"On Mon, Jul 27, 2015 at 04:35:45AM -0700, Wladimir J. van der Laan wrote:\n\n> >  {\n> > -    b1.clear();\n> > -    b2.clear();\n> > -    if (nInsertions < nBloomSize / 2) {\n> > -        return b2.contains(hash);\n> > -    }\n> > -    return b1.contains(hash);\n> >   +}\n> >   +\n> >   +void CRollingBloomFilter::reset(unsigned int nNewTweak)\n> >   +{\n> > -    if (!nNewTweak)\n> > -        nNewT",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35528838,35528838,src/bloom.cpp
laanwj,2015-07-27T15:07:34Z,"I've been bitten in the past by these kind of 'special values' unexpectedly turning up, so I'm just cautious and trying to avoid technical debt. \nIf it's really only for testing, maybe the method that takes an explicit tweak should be the explicitly named one. Eg.\n\n``` c++\nvoid CRollingBloomFilter::reset()\n{\n    resetWithTweak(GetRand(std::numeric_limits<unsigned int>::max()));\n}\nvoid CRol",https://github.com/bitcoin/bitcoin/pull/6452#discussion_r35546191,35546191,src/bloom.cpp
