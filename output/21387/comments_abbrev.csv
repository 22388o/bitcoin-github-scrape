jonatack,2021-03-08 11:20:05,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-792687216,792687216,
practicalswift,2021-03-08 17:46:12,"Concept ACK\n\nThanks for improving `FuzzedSock` with `connect`, `getsockopt` and `MSG_PEEK` (`recv`)  support! :)\n\nVery happy to see the I2P code being thoroughly fuzzed before landing in a release! ""Fuzz before release"" is a nice high bar I think we should try to aim for going forward for new features :)",https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-792944472,792944472,
DrahtBot,2021-03-08 19:23:21,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21506 (p2p, refactor: make NetPermissionFlags an enum class by jonatack)\n\nIf you consider this pull request important, ",https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-793009873,793009873,
vasild,2021-03-09 09:53:22,`a6c20d2b8...933d181a8`: avoid calling `memcpy()` with `NULL` argument even if `size` is `0`,https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-793642544,793642544,
jonatack,2021-03-10 12:17:48,"Saw this OOM error three times, but only with  `../qa-assets/fuzz_seed_corpus/` (git pulled the latest head)\n\n<details><summary>fuzz output</summary><p>\n\n```\n$ FUZZ=i2p src/test/fuzz/fuzz ../qa-assets/fuzz_seed_corpus/\nINFO: Seed: 2309095707\nINFO: Loaded 1 modules   (642728 inline 8-bit counters): 642728 [0x55bbf8e17668, 0x55bbf8eb4510), \nINFO: Loaded 1 PC tables (642728 PCs): 6427",https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-795334306,795334306,
jonatack,2021-03-11 19:23:50,"Had the same OOM issue today with another fuzz PR, so I'm proceeding on the assumption that it's a regression that is not related to this PR.",https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-796982444,796982444,
vasild,2021-03-12 08:12:20,"> Had the same OOM issue today with another fuzz PR\n\nCan you reproduce it? E.g. `FUZZ=i2p src/test/fuzz/fuzz ./oom-da39a3ee5e6b4b0d3255bfef95601890afd80709`",https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-797314843,797314843,
jonatack,2021-03-12 13:32:24,"```\nINFO: Seed: 3949145381\nINFO: Loaded 1 modules   (643885 inline 8-bit counters): 643885 [0x56188117c288, 0x5618812195b5), \nINFO: Loaded 1 PC tables (643885 PCs): 643885 [0x5618812195b8,0x561881bec888), \nsrc/test/fuzz/fuzz: Running 1 inputs 1 time(s) each.\nRunning: oom-da39a3ee5e6b4b0d3255bfef95601890afd80709\nExecuted oom-da39a3ee5e6b4b0d3255bfef95601890afd80709 in 0 ms\n***\n*** N",https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-797492455,797492455,
vasild,2021-03-12 17:07:25,`933d181a8...7c6fc2de5`: address suggestions and also fuzz the `IsConnected()` method of `Sock` / `FuzzedSock`.,https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-797627661,797627661,
vasild,2021-03-12 17:20:58,`7c6fc2de5...23c861d6f`: fix Windows CI,https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-797636166,797636166,
jonatack,2021-03-12 18:50:54,re-ACK 23c861d6ff995b7e6034d4bec6af2f6a3d595dca,https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-797680919,797680919,
vasild,2021-03-16 14:02:18,"`23c861d6f...40316a37c`:\n\n* rebase due to conflicts\n* expect that `Sock` methods `RecvUntilTerminator()` and `SendComplete()` could throw an exception when using fuzzed socket. After all a fuzzed socket may return an error at any time.\n* add a regression test for the bug fixed in https://github.com/bitcoin/bitcoin/pull/21407.",https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-800283578,800283578,
practicalswift,2021-03-20 23:31:16,"Tested ACK 40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5\n\nGreat fuzzing work @vasild!",https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-803478375,803478375,
MarcoFalke,2021-03-22 06:55:36,"(Changed title, because this is not test-only)",https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-803812017,803812017,
MarcoFalke,2021-03-22 06:55:42,Concept ACK 40316a37cb,https://github.com/bitcoin/bitcoin/pull/21387#issuecomment-803812074,803812074,
vasild,2021-03-08 11:23:56,"Note to reviewers: this old code was inconsistent with the events it requested depending on which function was used - it requested ""in"" or ""out"" (`POLLIN | POLLOUT`) when using `poll()` but only ""out"" when using `select()` (did not pass `fdset` as 2'nd arg to `select()`).\n\nThis is now replaced by `Sock::Wait(..., requested Sock::RECV | Sock::SEND)` which, if ends up calling `select()`, will as",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r589351441,589351441,src/netbase.cpp
MarcoFalke,2021-03-08 11:37:43,"style-nit in the first commit: Wouldn't it be better to change `private` to `protected`? This would allow other tests to mock `m_socket` without having to enumerate all ""friend"" test classes here",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r589358838,589358838,src/util/sock.h
MarcoFalke,2021-03-08 11:41:33,"it might be good to split the non-fuzz ""refactors"" out into their own pull",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r589360815,589360815,src/netbase.cpp
vasild,2021-03-08 12:43:30,"Lets see which are the non-fuzz refactors:\n\n```\n[7] i2p: add fuzz tests on the I2P Session public interface\n[6] i2p: use pointers to Sock to accommodate mocking\n[5] net: change ConnectSocketDirectly() to take a Sock argument\n[4] net: add connect() and getsockopt() wrappers to Sock\n[3] fuzz: avoid FuzzedSock::Recv() repeated errors with EAGAIN\n[2] fuzz: extend FuzzedSock::Recv() to ",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r589393703,589393703,src/netbase.cpp
vasild,2021-03-08 12:43:43,Done.,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r589393794,589393794,src/util/sock.h
vasild,2021-03-08 12:52:19,Either this should be `mutable` or the `const` qualifier should be removed from `Sock::Recv()` (and `Sock::Send()` for consistency). I don't have a strong opinion. I chose `mutable` because it is a smaller change and did not require modifying existing code.,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r589398727,589398727,src/test/fuzz/util.h
jonatack,2021-03-08 18:53:22,"Builds cleanly at a6c20d2b88ea92, but I'm seeing a UBSan runtime error when starting the fuzzer (same error for each of 3 times):\n\n ```\n$ clang --version\nclang version 9.0.1-16 \nTarget: x86_64-pc-linux-gnu\nThread model: posix\n\n$ FUZZ=i2p src/test/fuzz/fuzz ../qa-assets/fuzz_seed_corpus/\nINFO: Seed: 3673367385\nINFO: Loaded 1 modules   (642733 inline 8-bit counters): 642733 [0x55",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r589667320,589667320,src/test/fuzz/util.h
vasild,2021-03-09 09:52:11,"Fixed, thanks! I did not see this because my `memcpy()` does not have the nonnull attribute.\n\nOff-topic: the nonnull attribute has this speciality - the compiler assumes that the parameter will never be null and may eliminate branches in the function that check for that. For example:\n\n```cpp\nvoid func(char* buf) __nonnull(1)\n{\n    if (buf == nullptr) {\n        // take action\n    ",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r590150134,590150134,src/test/fuzz/util.h
jonatack,2021-03-10 12:09:51,Yes. Runs without the error now.,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r591426204,591426204,src/test/fuzz/util.h
jonatack,2021-03-11 19:53:28,"e944970 nit, can alternatively omit the `count` argument with an initializer list\n```suggestion\n            random_bytes.assign({m_peek_data.value()});\n```",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r592677389,592677389,src/test/fuzz/util.h
jonatack,2021-03-11 20:16:40,"3e5afb3b\n\nmember function naming: `s/Getsockopt/GetSockOpt/`\n\nnit, in the Doxygen docs: `s/unit-tested/unit tested/` lines 95 and 102\n",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r592691628,592691628,src/util/sock.h
jonatack,2021-03-11 20:23:23,"3e5afb3bf0db02ad3fc00afe431f64f3dcd0d3b1\n```suggestion\n    int Connect(const sockaddr* addr, socklen_t addr_len) const override\n```",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r592695756,592695756,src/test/fuzz/util.h
jonatack,2021-03-11 20:47:14,"34c199db11b36eee91e56cdd046c090f62da18d6\n```suggestion\n    if (sock.Connect(reinterpret_cast<struct sockaddr*>(&sockaddr), len) == SOCKET_ERROR)\n```",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r592710461,592710461,src/netbase.cpp
jonatack,2021-03-11 20:56:11,"34c199db11b36eee91e56cdd046c090f62da18d6\n```suggestion\n            if (sock.Getsockopt(SOL_SOCKET, SO_ERROR, static_cast<sockopt_arg_type>(&sockerr), &sockerr_len) ==\n```\n",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r592715679,592715679,src/netbase.cpp
jonatack,2021-03-11 20:59:33,34c199db11b36eee91e56cdd046c090f62da18d6 Should `sockerr` be initialized with a value?,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r592717790,592717790,src/netbase.cpp
jonatack,2021-03-12 14:04:57,5ac2bc1 Verified this line and line 352 compile when replaced with explicit typing and braced initialization `std::unique_ptr<Sock> sock{Hello()};` (which would save people time in looking up the type),https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593196080,593196080,src/i2p.cpp
jonatack,2021-03-12 14:14:44,"933d181a nit, `sam_proxy` here and `to` on line 43 below can both be `const` (to show intention)",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593203017,593203017,src/test/fuzz/i2p.cpp
vasild,2021-03-12 17:00:08,Done.,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593322760,593322760,src/test/fuzz/util.h
vasild,2021-03-12 17:00:18,Done.,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593322872,593322872,src/util/sock.h
vasild,2021-03-12 17:04:16,"Why? It is a bit shorter without the parameter names. Omitting parameter names if they are not used I think is a good practice because it makes it obvious that they are not used.\n\nAlso, specifying parameter names and not using those parameters in the function will produce a compiler warning with `-Wunused-parameter` (which is explicitly disabled in Bitcoin Core, I guess because of so many func",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593325238,593325238,src/test/fuzz/util.h
vasild,2021-03-12 17:04:30,Done.,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593325381,593325381,src/netbase.cpp
vasild,2021-03-12 17:04:38,Done.,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593325452,593325452,src/netbase.cpp
vasild,2021-03-12 17:06:00,I don't think so - `getsockopt()` will set it (if it returns `0`). The previous code abused `nRet` which contained a leftover value from the call to `select()`.,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593326447,593326447,src/netbase.cpp
vasild,2021-03-12 17:06:25,Done.,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593326687,593326687,src/test/fuzz/i2p.cpp
vasild,2021-03-12 17:20:34,"Broke the windows build. Reverted.\n```\nnetbase.cpp:663:81: error: invalid static_cast from type ‘int*’ to type ‘sockopt_arg_type’ {aka ‘char*’}\n  663 |                     SOL_SOCKET, SO_ERROR, static_cast<sockopt_arg_type>(&sockerr), &sockerr_len) ==\n      |                                                                                 ^\n```",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593335641,593335641,src/netbase.cpp
vasild,2021-03-12 17:44:33,"Removing `const` is not feasible (an avalanche of changes, not worth it).",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593350667,593350667,src/test/fuzz/util.h
jonatack,2021-03-12 17:58:17,We should probably use `reinterpret_cast` to signal that this is an ugly and non-portable cast (based on typedefs in `compat.h`). It doesn't have to be done in this PR. There are related cases.,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593358721,593358721,src/netbase.cpp
jonatack,2021-03-12 17:58:56,Thanks for the explanation.,https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593359156,593359156,src/test/fuzz/util.h
jonatack,2021-03-12 18:48:52,"Yes, it looks like `getsockopt` will set both `sockerr` and `sockerr_len`. I was curious what `sizeof` would return on an uninitialized `int` on my implementation/compiler:\n\n\n```c++\n#include <iostream>\n#include <sys/socket.h>\n\nint main()\n{\n    int sockerr;\n    socklen_t sockerr_len{sizeof(sockerr)};\n\n    std::cout << ""sockerr: "" << sockerr << '\n';\n    std::cout << ""size_",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593376959,593376959,src/netbase.cpp
vasild,2021-03-13 05:33:21,"`sizeof()` does not read the value, can be used safely without triggering any ubsan or valgrind warnings on uninitialized variables.",https://github.com/bitcoin/bitcoin/pull/21387#discussion_r593615829,593615829,src/netbase.cpp
