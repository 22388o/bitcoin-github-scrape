[
  {
    "sha": "9b05c49ade729311a0f4388a109530ff8d0ed1f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjA1YzQ5YWRlNzI5MzExYTBmNDM4OGExMDk1MzBmZjhkMGVkMWY5",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-04T15:05:33Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-16T12:53:25Z"
      },
      "message": "fuzz: implement unimplemented FuzzedSock methods\n\nWe want `Get()` to always return the same value, otherwise it will look\nlike the `FuzzedSock` implementation itself is broken. So assign\n`m_socket` a random number in the `FuzzedSock` constructor.\n\nThere is nothing to fuzz about the `Get()` and `Release()` methods, so\nuse the ones from the base class `Sock`.\n\n`Reset()` is just setting our socket to `INVALID_SOCKET`. We don't want\nto use the base `Reset()` because it will close `m_socket` and given\nthat our `m_socket` is just a random number it may end up closing a real\nopened file descriptor if it coincides with our random `m_socket`.",
      "tree": {
        "sha": "a1c7de169f42543e66144f3c6b9bcb6cae97e72a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1c7de169f42543e66144f3c6b9bcb6cae97e72a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b05c49ade729311a0f4388a109530ff8d0ed1f9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmBQqkUACgkQVN8G9ktV\ny7+8jh/+NzkKXPjaJ+ZIIKUULB+lg9KdA9cl7TrMQtImPbUqTqUs8BJYOQYxXO06\nm/9EnrV0wAE4sQ0Q76d89qEtOoZhX5Xuiyu4hhLKdcVEO96f4aUSmn7hsSyzK9AS\n9WCcQ5DNwIr/73H6iMvO25fyFVYKDS88aQwLTcjYQLv30wqK9QijKL5X2jUmYJUU\nLX+acl+qUXzdJXrAV7ts01ejaWMHzYNZ95PiEY+oKI5CN2SdSq4NfiRqFiUgt+ZE\nPz+/3wdcCaSVA9amNmm+INbZUdZW/QveyRqW05aOOB/+yEEAJ8sjR3evnOAab2ym\n9J7cptxJ5bHgixznA3MW6B+LN2rCOnZx+s2PnmjUJbP3n07ROvAARKXZZ+ibRsB8\nSu6EXXO38ulte71Gvnqy5LDCpF0i2Mgn2G7v/8vjdHMWMfzGIxxx/IVkjr+CrmGC\nbdYZhJXXCIZ7/giCjKSmPjeZBhL3wzcB3nUJCb2Duty+hz/CsdCAQpIfLfKg/L6W\nSP3A+yc6Jvi4Mkj15K6ZgQuHfYn5IywH25EL4zs/K+t6a9RwTmNrHRZ7TxS+PCPk\noGtPeoaYwH/V+A1u+z2FgRjkSchx8hdrMkXLbDSlyciz4oZo8UeAxRQdp8cZWqXI\n8IUs7P3Dkb8uURsK/JRCjNUal8fs7dbRTgtigj83harovDDlWRF7E8RPGV2iTBbw\n/TF9hGokUS1qhsY9qcATwQdfm9Ww1H7qlr4uNn023ZT8gQ+I7GwNYiZtkjk1WhUO\ntfftMJ+iDKiMCjv0aDleDAlBvt/anaMl7mg8uRx41dfl0HRzwjLM5hmSdgoZ6OSm\nXrfl0/A0bOmhqvok+I+opZZtMdIwAgUnprNmIzv69E/gU+25+vTTKGoRF4x5d4Gl\nvqxSi/NPKZBGku6j0kDgQ3RoDp3MZWmlNWlnU/cj51YmSbv/L6uEt4ovn0Po17XF\nCS7YI3hrDVSeSt+KEU+0A90Hp+tnbl6UMYm/urq8noDPX526pu5rsn88fWmeNn64\noIq50pfGDbZFvgDmZOgY9gzPVh9AfShhSEBcbxBnrWAzP1WUhNLfg6M4+icXbxij\nP9O/M9t+oXUy1sIMeN+lBJFRCMPAIlcopQS0oFSPRYFX6UeARvhQA1LrW9SHgoHV\nFzvO3r5CHbPumCZZDbjPBKDFwLAW5xOJjbnKHlg5JWt89aVgnoCZrTo3bm+3464i\nB0yaqErHi7lq3iUcOl0OVzd26jWHtE61CMLjIPPdnq9x4EbeEPv1G8P96FqrjgR5\nVjhJuwyxofopgYvZZFdbXns2vUs08mgHL7Jil13LyRzvzpFMy0rngCX/pauqL/qb\nV1sjVGZz8rxX9eIgV+axpzJk8g/V7A==\n=pEdS\n-----END PGP SIGNATURE-----",
        "payload": "tree a1c7de169f42543e66144f3c6b9bcb6cae97e72a\nparent 1b6c463e033f861561d1a46ccf7eec069bbac09f\nauthor Vasil Dimov <vd@FreeBSD.org> 1614870333 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1615899205 +0100\n\nfuzz: implement unimplemented FuzzedSock methods\n\nWe want `Get()` to always return the same value, otherwise it will look\nlike the `FuzzedSock` implementation itself is broken. So assign\n`m_socket` a random number in the `FuzzedSock` constructor.\n\nThere is nothing to fuzz about the `Get()` and `Release()` methods, so\nuse the ones from the base class `Sock`.\n\n`Reset()` is just setting our socket to `INVALID_SOCKET`. We don't want\nto use the base `Reset()` because it will close `m_socket` and given\nthat our `m_socket` is just a random number it may end up closing a real\nopened file descriptor if it coincides with our random `m_socket`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b05c49ade729311a0f4388a109530ff8d0ed1f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b05c49ade729311a0f4388a109530ff8d0ed1f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b05c49ade729311a0f4388a109530ff8d0ed1f9/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b6c463e033f861561d1a46ccf7eec069bbac09f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b6c463e033f861561d1a46ccf7eec069bbac09f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b6c463e033f861561d1a46ccf7eec069bbac09f"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 17,
      "deletions": 15
    },
    "files": [
      {
        "sha": "818246f73f7fa4d50bbaaa95b969061cd80e0f26",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b05c49ade729311a0f4388a109530ff8d0ed1f9/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b05c49ade729311a0f4388a109530ff8d0ed1f9/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=9b05c49ade729311a0f4388a109530ff8d0ed1f9",
        "patch": "@@ -558,33 +558,27 @@ class FuzzedSock : public Sock\n public:\n     explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n     {\n+          m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();\n     }\n \n     ~FuzzedSock() override\n     {\n+        // Sock::~Sock() will be called after FuzzedSock::~FuzzedSock() and it will call\n+        // Sock::Reset() (not FuzzedSock::Reset()!) which will call CloseSocket(m_socket).\n+        // Avoid closing an arbitrary file descriptor (m_socket is just a random number which\n+        // may concide with a real opened file descriptor).\n+        Reset();\n     }\n \n     FuzzedSock& operator=(Sock&& other) override\n     {\n-        assert(false && \"Not implemented yet.\");\n+        assert(false && \"Move of Sock into FuzzedSock not allowed.\");\n         return *this;\n     }\n \n-    SOCKET Get() const override\n-    {\n-        assert(false && \"Not implemented yet.\");\n-        return INVALID_SOCKET;\n-    }\n-\n-    SOCKET Release() override\n-    {\n-        assert(false && \"Not implemented yet.\");\n-        return INVALID_SOCKET;\n-    }\n-\n     void Reset() override\n     {\n-        assert(false && \"Not implemented yet.\");\n+        m_socket = INVALID_SOCKET;\n     }\n \n     ssize_t Send(const void* data, size_t len, int flags) const override\n@@ -667,6 +661,14 @@ class FuzzedSock : public Sock\n     {\n         return m_fuzzed_data_provider.ConsumeBool();\n     }\n+\n+    bool IsConnected(std::string& errmsg) const override {\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            return true;\n+        }\n+        errmsg = \"disconnected at random by the fuzzer\";\n+        return false;\n+    }\n };\n \n [[nodiscard]] inline FuzzedSock ConsumeSock(FuzzedDataProvider& fuzzed_data_provider)"
      },
      {
        "sha": "d923de531f5ebb20c0b2c6ebfa1659c9cd2f62fb",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b05c49ade729311a0f4388a109530ff8d0ed1f9/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b05c49ade729311a0f4388a109530ff8d0ed1f9/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=9b05c49ade729311a0f4388a109530ff8d0ed1f9",
        "patch": "@@ -153,7 +153,7 @@ class Sock\n      */\n     virtual bool IsConnected(std::string& errmsg) const;\n \n-private:\n+protected:\n     /**\n      * Contained socket. `INVALID_SOCKET` designates the object is empty.\n      */"
      }
    ]
  },
  {
    "sha": "3088f83d016e7ebb6e6aa559e6326fa0ef0d6282",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDg4ZjgzZDAxNmU3ZWJiNmU2YWE1NTllNjMyNmZhMGVmMGQ2Mjgy",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-05T13:50:49Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-16T12:53:25Z"
      },
      "message": "fuzz: extend FuzzedSock::Recv() to support MSG_PEEK\n\nA conforming `recv(2)` call is supposed to return the same data on a\ncall following `recv(..., MSG_PEEK)`. Extend `FuzzedSock::Recv()` to do\nthat.\n\nFor simplicity we only return 1 byte when `MSG_PEEK` is used. If we\nwould return a buffer of N bytes, then we would have to keep track how\nmany of them were consumed on subsequent non-`MSG_PEEK` calls.",
      "tree": {
        "sha": "adc9fcd476361d270d69c237b5eda97e08edf6dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adc9fcd476361d270d69c237b5eda97e08edf6dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3088f83d016e7ebb6e6aa559e6326fa0ef0d6282",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmBQqkUACgkQVN8G9ktV\ny78hwR/+LNNAIMlQZ0x/pKF3GB9Ua2uKcLNhd78a7tpmWIkrJ0BYziwhzfYRU3ok\nsKKZwcvlxHJKO3XUOrxGaCttk2SV9bUQ6iDFNm1R8Y9T0yLhharEBKFaPgIHOF0W\njw7oolp+vbynysOhSzxJNPjaVO4YSM4uNaMhbPagCRJljn8Re/930hY3cGszHc36\n0LTw+ZcU4YyVe8uJcuiv9EVtTSymK6DDsbgIbS5TvS4bec+wKmgKAFdH3yg8xK7i\nKOfTUWqVmq7fTNFX5YmTkQjImKdtSxdmEX7OOd10Je8hXiupyCE6cIYEToIaTqcb\nb61DKq72e4eQwIuFs8RHMTtlLuT7KSQtbKkdC8zoi+hUFZyJnWQfMKX3t39GCvml\ne0KVmyvHac8IXI4zbMWQpyp/bauZQZaH2MlayPbZVabJozyTNpDWuowL1UJdMI+m\nhTm7ygYwAYCvedVL6gxpwr6A/DksQCL9tO228BstVyf3PjX0sKP1BZ0TJaDk6Iln\n8zRJnmFyKgluYy0vJSBMoXSNbO65y/GPjqVKB+Irhp7fa1nOvIh85lrm3DmQ9Wpj\nUA/x3rP1fiK1kmXblsmppS24Gv6EDsr79wZD2WNi5M77KlLA06Z777euaX6aaO2k\nXhJf89rOwPUAQTSAahfUPtEnYTPY28ZPjYruTbRggn9yG6hP/JnasliwWfVNmDgM\n+l3J0DbMFdizwKbLxDSEQUC8wylOZj0PbaMiojEOkJvoS0SF1ZFjIV5HNWP23tl4\nfisWKWK54g8iiQc19DRtTEbtl880CR2QknVCetj3l2iTxqzooYslk8yBFjdFu3R0\nUABp+oIYlDTvp/8GKn8CAXoawJ3d9FE+rLHRuMNpzN8Rru48GtJs4er+l7hEHu6M\nY9HqBeoHvTN/LpTtKi1ZlTKCcFn0RvhJrMVYyZQCvBKNjjvkUGFqH+uJQmY8teWI\nrpmKCt75LZUO8C8lwEWHQNZCcLkF+ivwWVH9qItk6JKz16A0WTca3u3Yrzb89hmO\nLBCdDHuiqrQ3rafd7V+NG5vbg6hTh9DN9+UvS4JxxDdH0b5bAg9B+7uQu72oISgz\nLoZ93z3w/7qGyGByFByFj2CI71mtbsUfi/n42H+h6rNrnBLy+PlSsZqnoi4ITj6y\nImKGl3EWyehIzowiRtiGgv8Cs3ozVUFRGpnUm/Uu2SEp2PBRpD8A6/SK5szonbNp\nvTKXLHtW76F+2zBxmYQVIDYTl0bHUwGL8ImNJRPlWFdrLu8TX3c6/qWvyQb5VQ7b\ntvs8GTuQ2X2hLu9BxKjvCLiZKr9p/eLD7OyUDJD2KqyYJQOtJ2QCNzTDNXcx1Esd\n2eitTwVZnM2Lz8jY+JTT0M89ICodfg==\n=suIT\n-----END PGP SIGNATURE-----",
        "payload": "tree adc9fcd476361d270d69c237b5eda97e08edf6dc\nparent 9b05c49ade729311a0f4388a109530ff8d0ed1f9\nauthor Vasil Dimov <vd@FreeBSD.org> 1614952249 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1615899205 +0100\n\nfuzz: extend FuzzedSock::Recv() to support MSG_PEEK\n\nA conforming `recv(2)` call is supposed to return the same data on a\ncall following `recv(..., MSG_PEEK)`. Extend `FuzzedSock::Recv()` to do\nthat.\n\nFor simplicity we only return 1 byte when `MSG_PEEK` is used. If we\nwould return a buffer of N bytes, then we would have to keep track how\nmany of them were consumed on subsequent non-`MSG_PEEK` calls.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3088f83d016e7ebb6e6aa559e6326fa0ef0d6282",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3088f83d016e7ebb6e6aa559e6326fa0ef0d6282",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3088f83d016e7ebb6e6aa559e6326fa0ef0d6282/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b05c49ade729311a0f4388a109530ff8d0ed1f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b05c49ade729311a0f4388a109530ff8d0ed1f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b05c49ade729311a0f4388a109530ff8d0ed1f9"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 28,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4f44394d2b315d3a253edc76e25ba6600909ccf8",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 28,
        "deletions": 3,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3088f83d016e7ebb6e6aa559e6326fa0ef0d6282/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3088f83d016e7ebb6e6aa559e6326fa0ef0d6282/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=3088f83d016e7ebb6e6aa559e6326fa0ef0d6282",
        "patch": "@@ -555,6 +555,13 @@ class FuzzedSock : public Sock\n {\n     FuzzedDataProvider& m_fuzzed_data_provider;\n \n+    /**\n+     * Data to return when `MSG_PEEK` is used as a `Recv()` flag.\n+     * If `MSG_PEEK` is used, then our `Recv()` returns some random data as usual, but on the next\n+     * `Recv()` call we must return the same data, thus we remember it here.\n+     */\n+    mutable std::optional<uint8_t> m_peek_data;\n+\n public:\n     explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n     {\n@@ -635,8 +642,26 @@ class FuzzedSock : public Sock\n             }\n             return r;\n         }\n-        const std::vector<uint8_t> random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(\n-            m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, len));\n+        std::vector<uint8_t> random_bytes;\n+        bool pad_to_len_bytes{m_fuzzed_data_provider.ConsumeBool()};\n+        if (m_peek_data.has_value()) {\n+            // `MSG_PEEK` was used in the preceding `Recv()` call, return `m_peek_data`.\n+            random_bytes.assign({m_peek_data.value()});\n+            if ((flags & MSG_PEEK) == 0) {\n+                m_peek_data.reset();\n+            }\n+            pad_to_len_bytes = false;\n+        } else if ((flags & MSG_PEEK) != 0) {\n+            // New call with `MSG_PEEK`.\n+            random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(1);\n+            if (!random_bytes.empty()) {\n+                m_peek_data = random_bytes[0];\n+                pad_to_len_bytes = false;\n+            }\n+        } else {\n+            random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(\n+                m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, len));\n+        }\n         if (random_bytes.empty()) {\n             const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n             if (r == -1) {\n@@ -645,7 +670,7 @@ class FuzzedSock : public Sock\n             return r;\n         }\n         std::memcpy(buf, random_bytes.data(), random_bytes.size());\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\n+        if (pad_to_len_bytes) {\n             if (len > random_bytes.size()) {\n                 std::memset((char*)buf + random_bytes.size(), 0, len - random_bytes.size());\n             }"
      }
    ]
  },
  {
    "sha": "5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTg4N2Q0OWIyYjM5ZTU5ZDdjY2U4ZTlkNWI4OWMyMWFkNjk0Zjhi",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-08T10:42:24Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-16T12:53:26Z"
      },
      "message": "fuzz: avoid FuzzedSock::Recv() repeated errors with EAGAIN\n\nIf `recv(2)` returns an error (`-1`) and sets `errno` to a temporary\nerror like `EAGAIN` a proper application code is expected to retry the\noperation.\n\nIf the fuzz data is exhausted, then `FuzzedSock::Recv()` will keep\nreturning `-1` and setting `errno` to the first element of\n`recv_errnos[]` which happened to be `EAGAIN`. This may continue forever\nor cause the fuzz test to run for a long time before some higher level\napplication \"receive timeout\" is triggered.\n\nThus, put `ECONNREFUSED` as first element of `recv_errnos[]`.",
      "tree": {
        "sha": "f2150d6983ae652da621ed6ef2b396838ca5be45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2150d6983ae652da621ed6ef2b396838ca5be45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmBQqkYACgkQVN8G9ktV\ny7+GiCAApqXP6VeHe+x5qzFmOCvZqGSMJ71M2ftAc7W6rQkbSguT0fMi1sZyc/MU\nB7XL5So22ibBLmIn3e81kkf3oMuCQKmJkDn6uYGrZYvI2Sqr8mEkGH4Yl85SvV7N\nJpg51CSXt482fMKFTHb3bR15XMJpw49YYuBGX4HtPJW7DM7uS9uhcB8ktbV/BD4G\nS8hHu63q1ujwLw+LLZ6mcJ3Ak8c6zfaguVi2xrS/NnRuuiVimrqR/MYJoILWAWTT\n1jEHd0fI893hs/kW7hZvOp8Ph9sKFRrnJ0Pga+k0bRxdhiTnI4tp4a/uo/9D3aTR\nHiThPCaJd1hkuDz3ptORH0dBnAT0hziaAVYVlDV/TJqeNRsCnajY+uLizCEKjMoq\n+agNusHbGOvfXhJWnmb1bfOdftCC4wBQCQJ6E6QzoOJTdZzwRpCWPYZupsud5zdn\nspl3AG/qjJjJnpBZd/3G/ezOL5Ys4vDfKSdWSzMgT8q4lu60Ywza4gWbj9WT5V47\ndFbVHIQpi3PTC4fquvJuU0IvsXgTaR0UKAEJ0Qn5iNK81KGBxc8s4SRsWJWSbCuD\nb1xjzb/KqpEnWlXvn/VnntnfTls7qpPkq9aHuJG1Yo9jFDn2cMXd/fi4dJ5iSB2W\nt2YU8wHbb/vXVxbvqGYhXCZjFgmE/+GXE1Hp8HLFY18H71JJ3golVOLiNXaiHtiJ\n2QGafcKGBoU3LWOjlgaBn+o2wwzVt0/8sbH3yPimFOzQp8hYHy89W+CJT5H/wTVF\neSDhCuCbiCNAEapQ6bnSZfBIZN7Dtk1WRxFkB/VF0LimSn28hYYKaR5feFDXQ8iS\nZhGLWqNb+FNJhrfUSPs3GhA3IA2t0VEAW61or+m6Y1yJbtfaTleDrejjDnc/zI0j\n5/+QJD5SM0V4RqYdXC1tmS54f4fvtIwo7fvrlRCfYq/50w5o4/OmOpMWykMK+NOb\nZEq+WW7XGMjnoKzWK/AL4zHlLdBIUhaNPkNCLv8jhJOgiDS4k9YZlwK7n3v5IKos\n7s+QrvQeGcGf4P8ofIHtzmDpObonbUDl20sJYb50+fDH1m/r3akobxyWJLWUMSjK\nvMWZxWHLCoqGKXmgRNeJDZWMvXSjeiFCpp3inSCfAUkiaGRjWZXh6KJp4jKmZ7mt\nlG2yY7s4JfUfqP8b48m9l338+11H0FhDBYTFCNT3+GT7eCmzghJDX6whrSo+GyY8\nhx1v3wPVGftNSGGh4cXelibKfoVTYRLF9m/nXlmt3upTuz6cLBLChM5bxQmUdQ0p\nEAE9RRmsmGH86acGjDr16udyB7Le/mJs+H8rPDt84FJRkcCLIEqfCrIBSQtiy+Pq\nCLaErKlKRynYUXNVkp1+yPAddIlefw==\n=nKzq\n-----END PGP SIGNATURE-----",
        "payload": "tree f2150d6983ae652da621ed6ef2b396838ca5be45\nparent 3088f83d016e7ebb6e6aa559e6326fa0ef0d6282\nauthor Vasil Dimov <vd@FreeBSD.org> 1615200144 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1615899206 +0100\n\nfuzz: avoid FuzzedSock::Recv() repeated errors with EAGAIN\n\nIf `recv(2)` returns an error (`-1`) and sets `errno` to a temporary\nerror like `EAGAIN` a proper application code is expected to retry the\noperation.\n\nIf the fuzz data is exhausted, then `FuzzedSock::Recv()` will keep\nreturning `-1` and setting `errno` to the first element of\n`recv_errnos[]` which happened to be `EAGAIN`. This may continue forever\nor cause the fuzz test to run for a long time before some higher level\napplication \"receive timeout\" is triggered.\n\nThus, put `ECONNREFUSED` as first element of `recv_errnos[]`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3088f83d016e7ebb6e6aa559e6326fa0ef0d6282",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3088f83d016e7ebb6e6aa559e6326fa0ef0d6282",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3088f83d016e7ebb6e6aa559e6326fa0ef0d6282"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "db399abcf1dc050730d6388cfb654dba9c0b4acc",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b",
        "patch": "@@ -622,10 +622,13 @@ class FuzzedSock : public Sock\n \n     ssize_t Recv(void* buf, size_t len, int flags) const override\n     {\n+        // Have a permanent error at recv_errnos[0] because when the fuzzed data is exhausted\n+        // SetFuzzedErrNo() will always return the first element and we want to avoid Recv()\n+        // returning -1 and setting errno to EAGAIN repeatedly.\n         constexpr std::array recv_errnos{\n+            ECONNREFUSED,\n             EAGAIN,\n             EBADF,\n-            ECONNREFUSED,\n             EFAULT,\n             EINTR,\n             EINVAL,"
      }
    ]
  },
  {
    "sha": "b5861100f85fef77b00f55dcdf01ffb4a2a112d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTg2MTEwMGY4NWZlZjc3YjAwZjU1ZGNkZjAxZmZiNGEyYTExMmQ4",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-05T15:29:43Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-16T12:53:26Z"
      },
      "message": "net: add connect() and getsockopt() wrappers to Sock\n\nExtend the `Sock` class with wrappers to `connect()` and `getsockopt()`.\n\nThis will make it possible to mock code which uses those.",
      "tree": {
        "sha": "1dfc171b9c334247cd65a994bb771a2f58468b44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dfc171b9c334247cd65a994bb771a2f58468b44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5861100f85fef77b00f55dcdf01ffb4a2a112d8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmBQqkYACgkQVN8G9ktV\ny78aNx//TwLoLk9MQ12lEDFHaOw8XXHy8YwdsRa2NDSR2nUM8BKgNWOy1IkkIxHN\ncyH+4T7YKu9sQIKOq8d3x+UK+/zW82Y0s4DX2lJ/ooFpMMk17lJw41ye0y4gCcR+\nR0FRsiy+ywAyZ9zk7/trnvM2gpnMlwDKJPeVAdzYQ3enCU/7bssByo9rXQqXYmNp\npl11heTGyGhXZb4xxZvdAIokUL7q2qoPFEsGKqylEZCLoWrJ/4viah+9txswL7qu\nmgK4lkJOABwo3v4RE2D0/8ocHDzx+0dn/gWQfuMTsCyF1aRCctUF6L5ZdePoDi7q\n5mYT0DUTtzyyhSGqTe6jM4oSiX2OqruFSVASiHpDNazC+wvlTspcT53y/xxVwKwP\nafuYHeqCwm/OBYLsjDUFrxcl2zuD1wesh6uCQ+MI4A0A6pDD1mQeucmoicmt6bT0\n+ZPKX8GypP9IdmfCOypc+op7ey8Y09waiSndwKdXDBtmSsVReLnm8w+oH614RJEs\naGbhYxjuTTrumj9hzK5R/Co1HMfOsjsfLGj+bI4mxI5QsyBIoxl5jrUh1gT1n5WD\nr4dub5kbhpmuaogLbVZoJGahPlyIVMPxB9L47KuJiGgBVYoEkAPHwB9LfW3X+kei\n/PXK97vR5brdfUEsOrdWyxEBlU3NG1QFujfph4H8t3gedeSxNvmSOflSjwWX/FOr\nnL+s94oiWuw6uHvNy72s1jzWsh0DI8sxEZWz8LC4PQwQ1fbo+L0XWMi7uKEjNUz2\nj6VWsBAVaLsxWH3SDcE3TNHL2bn4KlTp2qBahf3eTouTF5LiptZEodpSDMfX9Qj2\n6KeG4+aoq33mWz/A5MgbGvkt3NUSMkWXUWnFooC3EuCk28Vaqgk8/MvvQ5/rWff4\nQa76npTqqWU3sAo+6UCZZSV9eYr8V/dyLe9z9WZTTEJrvIZBY5tW3giRUuo50Ar4\nnKqg4TPATHyblOBb9gwKxNNWLChI8YEL0vjtvognapmhX+JcZJMP9oepAwBMZ13/\nY7NGzASOGccH+fDxuODcmZegoV1qWUtwBAlX4uGPKbwkdwPqdIRaJJDxja2ANi5X\neHMlPqxBJFO1gL6Ur0GxyJ5iqsBqcR/jGoBXAErTBifBsnkKrtx1MiYW6oEcSt8F\nHWn1BUAPnyiqBcrWxoi+DTHcGlNbveIw/+O6SwkKltkoIYzsdr6F8r3Eg1aEZrAI\nTungxh7n1BmSt7cKm0bbaiwreAS06btTajM1s6BPyO34klWmw4AnCOQqgFDRM4ZD\nCyqdjpeXrEmfmbjJrdKQY5DfAGaRT/5vjcM+hhJpZlD4k4pspKF0zrFQwfV8TBwk\nPKmCeGX3HW4EowUJoMFzyKd3ihg3Mw==\n=7nSN\n-----END PGP SIGNATURE-----",
        "payload": "tree 1dfc171b9c334247cd65a994bb771a2f58468b44\nparent 5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b\nauthor Vasil Dimov <vd@FreeBSD.org> 1614958183 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1615899206 +0100\n\nnet: add connect() and getsockopt() wrappers to Sock\n\nExtend the `Sock` class with wrappers to `connect()` and `getsockopt()`.\n\nThis will make it possible to mock code which uses those.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5861100f85fef77b00f55dcdf01ffb4a2a112d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5861100f85fef77b00f55dcdf01ffb4a2a112d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5861100f85fef77b00f55dcdf01ffb4a2a112d8/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a887d49b2b39e59d7cce8e9d5b89c21ad694f8b"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 66,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5294adf48e4908b560df0025b5255176e9d18097",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5861100f85fef77b00f55dcdf01ffb4a2a112d8/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5861100f85fef77b00f55dcdf01ffb4a2a112d8/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=b5861100f85fef77b00f55dcdf01ffb4a2a112d8",
        "patch": "@@ -685,6 +685,47 @@ class FuzzedSock : public Sock\n         return random_bytes.size();\n     }\n \n+    int Connect(const sockaddr*, socklen_t) const override\n+    {\n+        // Have a permanent error at connect_errnos[0] because when the fuzzed data is exhausted\n+        // SetFuzzedErrNo() will always return the first element and we want to avoid Connect()\n+        // returning -1 and setting errno to EAGAIN repeatedly.\n+        constexpr std::array connect_errnos{\n+            ECONNREFUSED,\n+            EAGAIN,\n+            ECONNRESET,\n+            EHOSTUNREACH,\n+            EINPROGRESS,\n+            EINTR,\n+            ENETUNREACH,\n+            ETIMEDOUT,\n+        };\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            SetFuzzedErrNo(m_fuzzed_data_provider, connect_errnos);\n+            return -1;\n+        }\n+        return 0;\n+    }\n+\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n+    {\n+        constexpr std::array getsockopt_errnos{\n+            ENOMEM,\n+            ENOBUFS,\n+        };\n+        if (m_fuzzed_data_provider.ConsumeBool()) {\n+            SetFuzzedErrNo(m_fuzzed_data_provider, getsockopt_errnos);\n+            return -1;\n+        }\n+        if (opt_val == nullptr) {\n+            return 0;\n+        }\n+        std::memcpy(opt_val,\n+                    ConsumeFixedLengthByteVector(m_fuzzed_data_provider, *opt_len).data(),\n+                    *opt_len);\n+        return 0;\n+    }\n+\n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override\n     {\n         return m_fuzzed_data_provider.ConsumeBool();"
      },
      {
        "sha": "0bc9795db3d577c4fcffc385f4c56f49a7da1054",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5861100f85fef77b00f55dcdf01ffb4a2a112d8/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5861100f85fef77b00f55dcdf01ffb4a2a112d8/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=b5861100f85fef77b00f55dcdf01ffb4a2a112d8",
        "patch": "@@ -66,6 +66,16 @@ ssize_t Sock::Recv(void* buf, size_t len, int flags) const\n     return recv(m_socket, static_cast<char*>(buf), len, flags);\n }\n \n+int Sock::Connect(const sockaddr* addr, socklen_t addr_len) const\n+{\n+    return connect(m_socket, addr, addr_len);\n+}\n+\n+int Sock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n+{\n+    return getsockopt(m_socket, level, opt_name, static_cast<char*>(opt_val), opt_len);\n+}\n+\n bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n #ifdef USE_POLL"
      },
      {
        "sha": "c4ad0cbc437ca8d044cf3eba3645a89e609c731c",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5861100f85fef77b00f55dcdf01ffb4a2a112d8/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5861100f85fef77b00f55dcdf01ffb4a2a112d8/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=b5861100f85fef77b00f55dcdf01ffb4a2a112d8",
        "patch": "@@ -80,16 +80,29 @@ class Sock\n \n     /**\n      * send(2) wrapper. Equivalent to `send(this->Get(), data, len, flags);`. Code that uses this\n-     * wrapper can be unit-tested if this method is overridden by a mock Sock implementation.\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n      */\n     virtual ssize_t Send(const void* data, size_t len, int flags) const;\n \n     /**\n      * recv(2) wrapper. Equivalent to `recv(this->Get(), buf, len, flags);`. Code that uses this\n-     * wrapper can be unit-tested if this method is overridden by a mock Sock implementation.\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n      */\n     virtual ssize_t Recv(void* buf, size_t len, int flags) const;\n \n+    /**\n+     * connect(2) wrapper. Equivalent to `connect(this->Get(), addr, addrlen)`. Code that uses this\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n+     */\n+    virtual int Connect(const sockaddr* addr, socklen_t addr_len) const;\n+\n+    /**\n+     * getsockopt(2) wrapper. Equivalent to\n+     * `getsockopt(this->Get(), level, opt_name, opt_val, opt_len)`. Code that uses this\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n+     */\n+    virtual int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const;\n+\n     using Event = uint8_t;\n \n     /**"
      }
    ]
  },
  {
    "sha": "82d360b5a88d9057b6c09b61cd69e426c7a2412d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmQzNjBiNWE4OGQ5MDU3YjZjMDliNjFjZDY5ZTQyNmM3YTI0MTJk",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-05T16:01:59Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-16T12:58:23Z"
      },
      "message": "net: change ConnectSocketDirectly() to take a Sock argument\n\nChange `ConnectSocketDirectly()` to take a `Sock` argument instead of a\nbare `SOCKET`. With this, use the `Sock`'s (possibly mocked) methods\n`Connect()`, `Wait()` and `GetSockOpt()` instead of calling the OS\nfunctions directly.",
      "tree": {
        "sha": "8a60f973c2155fa870c30e7919e869cdaee36d0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a60f973c2155fa870c30e7919e869cdaee36d0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82d360b5a88d9057b6c09b61cd69e426c7a2412d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmBQq3IACgkQVN8G9ktV\ny7/Gux//VmnlmUbFlabKWQStusMa4ymDQHSj0qoIPvbQ5Xc5r47tU1F+XJa7RZ3Q\nmyG/E84HU7+iT+SwV8LvnAL4+9/PtIufe9jblqVSOZKt1Mk0XXcLLwFOdV2i4lh3\ne5p4+PMXqmA10dwwVCzg+crs1fcHWduzBiGmuWL/9efTxrjOnEzorREeJ1nHjkIc\nzB7ntX+eGzxF5Iv78/24TcGQyvgaXHTVx2miwuq8WcM7E2AmkjtrppW6FHtQLJop\nzSea1UNszkZd9/GGluUR5HWiEdGpjkFlsuNNxfeSWOt3zCAcYl254x3+pw9WU9vn\n7jm0vOZzliXACYwJorO2+95Sv3gWztcPjBTqwA448pB0xStz+jrUFa5AizTONchh\n/c2Y+0+IO1IZLm3NHBecBECw5ex59qMgFf7Yxa/i0jXevMmLcOHHHDvYEEKWV/xE\nhGSO1DbHUZI240g691URxrotCXKAAavve+8L3Kdemm5I/L88dj8vvtU1BnmPCQa6\nYxYlmOGIUCgiwdFY8eaVgZ3z+87RoH+Os4g09+EaWggsJd/3mkDQ2pzQ//TyIMGs\nfflQ2c8uk4RPBC3yZv0j1/gys7L61Z+/txG7h7q7bpcYJRDyJlAHDLhioh62cM6W\nLfJnXw983MRiogbhV4aWdfOs0w3dmFcwM0yR91AkqxEINByw9/0+KaTBtC9GhJlY\nUu90G6F+YHnWGCUm7Zfibh+8rQ4WgnqP6THsC56BP2ClGE6ojtcGjdpccaQ/R85T\nwubywL7YiTCZnz9sIUz+ADOCPeTWihu+AmG9IEYbUV7FkBo5tAxOuRvQlXvYByzZ\nDQ0GYlsXNn7rwxgFs+pEtuPHlui1K4R/7ZEsjQnolMb+ftH1nP+DTbeZz8jtGs5C\nYx7fGmxK2Sr6dFkUzKX0B1VGJ13gLQnCHAV8/rouw4OqR8UoFFBjJwjYIwGiwy0d\nv7H0e86hhbyzXOV1KT3o40eYsZZQAflmZ5uzxUNbg8fs861R2Ok+hhfVTg8IdO8I\n5lhG4Ar+zA5mu94O2fytnkFKtXkUJqPiHdTOqNCGPC0WzCdwkT1xTMk/hvWfmduC\n7CYjNebQw1x4mBzLeuTRRYaOENpOeMUYHcPSrLXnU1Nv8L9FzMykdwvqDaduyRyv\na5BFmKKJ2aZWRlY/iEwmgyi4M2CS7T7tlinmTVGMhzkydbMKXh/677ziCugiXhQV\nlm5YzVOPdhE+nUDk4pwiLsbV70KP73utdCwPs+aGCUxf208U67dHe/m/4RyjaMff\nGQvagVRKQ0i2IsLLYqI7T1SXCcFjvUjlBU2bl9Wl0rP3/AXPTiJgCs8cF8aiQmyi\nYg3qkJ1FPKn2Hj8/xWxaezN6kInfJA==\n=SMaC\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a60f973c2155fa870c30e7919e869cdaee36d0c\nparent b5861100f85fef77b00f55dcdf01ffb4a2a112d8\nauthor Vasil Dimov <vd@FreeBSD.org> 1614960119 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1615899503 +0100\n\nnet: change ConnectSocketDirectly() to take a Sock argument\n\nChange `ConnectSocketDirectly()` to take a `Sock` argument instead of a\nbare `SOCKET`. With this, use the `Sock`'s (possibly mocked) methods\n`Connect()`, `Wait()` and `GetSockOpt()` instead of calling the OS\nfunctions directly.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82d360b5a88d9057b6c09b61cd69e426c7a2412d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82d360b5a88d9057b6c09b61cd69e426c7a2412d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82d360b5a88d9057b6c09b61cd69e426c7a2412d/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5861100f85fef77b00f55dcdf01ffb4a2a112d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5861100f85fef77b00f55dcdf01ffb4a2a112d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5861100f85fef77b00f55dcdf01ffb4a2a112d8"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 27,
      "deletions": 40
    },
    "files": [
      {
        "sha": "13e7ce3515c1c834915ce527fc49a3946efedc45",
        "filename": "src/i2p.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d360b5a88d9057b6c09b61cd69e426c7a2412d/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d360b5a88d9057b6c09b61cd69e426c7a2412d/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=82d360b5a88d9057b6c09b61cd69e426c7a2412d",
        "patch": "@@ -279,7 +279,7 @@ Sock Session::Hello() const\n         throw std::runtime_error(\"Cannot create socket\");\n     }\n \n-    if (!ConnectSocketDirectly(m_control_host, sock->Get(), nConnectTimeout, true)) {\n+    if (!ConnectSocketDirectly(m_control_host, *sock, nConnectTimeout, true)) {\n         throw std::runtime_error(strprintf(\"Cannot connect to %s\", m_control_host.ToString()));\n     }\n "
      },
      {
        "sha": "36065118d7e892f24ac22043d26c8ab835fbfd3a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d360b5a88d9057b6c09b61cd69e426c7a2412d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d360b5a88d9057b6c09b61cd69e426c7a2412d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=82d360b5a88d9057b6c09b61cd69e426c7a2412d",
        "patch": "@@ -448,7 +448,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             if (!sock) {\n                 return nullptr;\n             }\n-            connected = ConnectSocketDirectly(addrConnect, sock->Get(), nConnectTimeout,\n+            connected = ConnectSocketDirectly(addrConnect, *sock, nConnectTimeout,\n                                               conn_type == ConnectionType::MANUAL);\n         }\n         if (!proxyConnectionFailed) {"
      },
      {
        "sha": "462fa719bcf3851057391e0b66df86006d3fb1d1",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 36,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d360b5a88d9057b6c09b61cd69e426c7a2412d/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d360b5a88d9057b6c09b61cd69e426c7a2412d/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=82d360b5a88d9057b6c09b61cd69e426c7a2412d",
        "patch": "@@ -537,12 +537,12 @@ static void LogConnectFailure(bool manual_connection, const char* fmt, const Arg\n     }\n }\n \n-bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, int nTimeout, bool manual_connection)\n+bool ConnectSocketDirectly(const CService &addrConnect, const Sock& sock, int nTimeout, bool manual_connection)\n {\n     // Create a sockaddr from the specified service.\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n-    if (hSocket == INVALID_SOCKET) {\n+    if (sock.Get() == INVALID_SOCKET) {\n         LogPrintf(\"Cannot connect to %s: invalid socket\\n\", addrConnect.ToString());\n         return false;\n     }\n@@ -552,55 +552,42 @@ bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, i\n     }\n \n     // Connect to the addrConnect service on the hSocket socket.\n-    if (connect(hSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n-    {\n+    if (sock.Connect(reinterpret_cast<struct sockaddr*>(&sockaddr), len) == SOCKET_ERROR) {\n         int nErr = WSAGetLastError();\n         // WSAEINVAL is here because some legacy version of winsock uses it\n         if (nErr == WSAEINPROGRESS || nErr == WSAEWOULDBLOCK || nErr == WSAEINVAL)\n         {\n             // Connection didn't actually fail, but is being established\n             // asynchronously. Thus, use async I/O api (select/poll)\n             // synchronously to check for successful connection with a timeout.\n-#ifdef USE_POLL\n-            struct pollfd pollfd = {};\n-            pollfd.fd = hSocket;\n-            pollfd.events = POLLIN | POLLOUT;\n-            int nRet = poll(&pollfd, 1, nTimeout);\n-#else\n-            struct timeval timeout = MillisToTimeval(nTimeout);\n-            fd_set fdset;\n-            FD_ZERO(&fdset);\n-            FD_SET(hSocket, &fdset);\n-            int nRet = select(hSocket + 1, nullptr, &fdset, nullptr, &timeout);\n-#endif\n-            // Upon successful completion, both select and poll return the total\n-            // number of file descriptors that have been selected. A value of 0\n-            // indicates that the call timed out and no file descriptors have\n-            // been selected.\n-            if (nRet == 0)\n-            {\n-                LogPrint(BCLog::NET, \"connection to %s timeout\\n\", addrConnect.ToString());\n+            const Sock::Event requested = Sock::RECV | Sock::SEND;\n+            Sock::Event occurred;\n+            if (!sock.Wait(std::chrono::milliseconds{nTimeout}, requested, &occurred)) {\n+                LogPrintf(\"wait for connect to %s failed: %s\\n\",\n+                          addrConnect.ToString(),\n+                          NetworkErrorString(WSAGetLastError()));\n                 return false;\n-            }\n-            if (nRet == SOCKET_ERROR)\n-            {\n-                LogPrintf(\"select() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n+            } else if (occurred == 0) {\n+                LogPrint(BCLog::NET, \"connection attempt to %s timed out\\n\", addrConnect.ToString());\n                 return false;\n             }\n \n-            // Even if the select/poll was successful, the connect might not\n+            // Even if the wait was successful, the connect might not\n             // have been successful. The reason for this failure is hidden away\n             // in the SO_ERROR for the socket in modern systems. We read it into\n-            // nRet here.\n-            socklen_t nRetSize = sizeof(nRet);\n-            if (getsockopt(hSocket, SOL_SOCKET, SO_ERROR, (sockopt_arg_type)&nRet, &nRetSize) == SOCKET_ERROR)\n-            {\n+            // sockerr here.\n+            int sockerr;\n+            socklen_t sockerr_len = sizeof(sockerr);\n+            if (sock.GetSockOpt(SOL_SOCKET, SO_ERROR, (sockopt_arg_type)&sockerr, &sockerr_len) ==\n+                SOCKET_ERROR) {\n                 LogPrintf(\"getsockopt() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n                 return false;\n             }\n-            if (nRet != 0)\n-            {\n-                LogConnectFailure(manual_connection, \"connect() to %s failed after select(): %s\", addrConnect.ToString(), NetworkErrorString(nRet));\n+            if (sockerr != 0) {\n+                LogConnectFailure(manual_connection,\n+                                  \"connect() to %s failed after wait: %s\",\n+                                  addrConnect.ToString(),\n+                                  NetworkErrorString(sockerr));\n                 return false;\n             }\n         }\n@@ -668,7 +655,7 @@ bool IsProxy(const CNetAddr &addr) {\n bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, int port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed)\n {\n     // first connect to proxy server\n-    if (!ConnectSocketDirectly(proxy.proxy, sock.Get(), nTimeout, true)) {\n+    if (!ConnectSocketDirectly(proxy.proxy, sock, nTimeout, true)) {\n         outProxyConnectionFailed = true;\n         return false;\n     }"
      },
      {
        "sha": "dc9a952d4fac8afc97b6c51b6514c00b1e237e1e",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d360b5a88d9057b6c09b61cd69e426c7a2412d/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d360b5a88d9057b6c09b61cd69e426c7a2412d/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=82d360b5a88d9057b6c09b61cd69e426c7a2412d",
        "patch": "@@ -194,15 +194,15 @@ extern std::function<std::unique_ptr<Sock>(const CService&)> CreateSock;\n  * Try to connect to the specified service on the specified socket.\n  *\n  * @param addrConnect The service to which to connect.\n- * @param hSocket The socket on which to connect.\n+ * @param sock The socket on which to connect.\n  * @param nTimeout Wait this many milliseconds for the connection to be\n  *                 established.\n  * @param manual_connection Whether or not the connection was manually requested\n  *                          (e.g. through the addnode RPC)\n  *\n  * @returns Whether or not a connection was successfully made.\n  */\n-bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocket, int nTimeout, bool manual_connection);\n+bool ConnectSocketDirectly(const CService &addrConnect, const Sock& sock, int nTimeout, bool manual_connection);\n \n /**\n  * Connect to a specified destination service through a SOCKS5 proxy by first"
      }
    ]
  },
  {
    "sha": "9947e44de0cbd79e99d883443a9ac441d8c69713",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTQ3ZTQ0ZGUwY2JkNzllOTlkODgzNDQzYTlhYzQ0MWQ4YzY5NzEz",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-04T13:31:49Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-16T12:59:18Z"
      },
      "message": "i2p: use pointers to Sock to accommodate mocking\n\nChange the types of `i2p::Connection::sock` and\n`i2p::sam::Session::m_control_sock` from `Sock` to\n`std::unique_ptr<Sock>`.\n\nUsing pointers would allow us to sneak `FuzzedSock` instead of `Sock`\nand have the methods of the former called.\n\nAfter this change a test only needs to replace `CreateSock()` with\na function that returns `FuzzedSock`.",
      "tree": {
        "sha": "8d60e4c979aa3fe1cf383e108a4b35b42df63614",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d60e4c979aa3fe1cf383e108a4b35b42df63614"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9947e44de0cbd79e99d883443a9ac441d8c69713",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmBQq6kACgkQVN8G9ktV\ny78XIB//V36BwAW4aXgxblNUZrArXeP7YGKm7Th12wMcF5EGBW9OooATgxcaLLIX\nA0Wxs+OJLMUlrBgNB4WFzLIzUAdoTBwIvhewmyqy630tI5YshsNg6l2sv4yVrT2+\nfawn20pkvzucR4pfSEeW1jymWOryuivIQ1U4NPsYykCMWi6ol9GshsQfyKWdMUtX\nLENkg5q4orq9Z6aNFtXHQB0n0oTKOK/n/JWWp8543Fbf/XPWXxqN67qTwu+yLL5k\nyhUa/ZG0jRKp+jt8xIlrFINDxIvJVOEWNt07lUZEOyAvBznzyz6bE8gEe6ggz2wY\nZtPiN81BfnF9t/VIgDmLpd8q6WSnw7fHjlOyYXlL6ugNd6m/gDom+S3ZW0Bi48h7\n98Rst4IdXYz4dI5Gj2RJUlamThmfgghRjTYYcXInHwtd4XwBtkeY0do2jqpa5Uuw\ngeVqlqGXkb2fNUT+Z0HF+S/db9mvT3imXoJgpSmbFikhRvhyux7R18eU6cQ9ViQn\nxI1l/8UgdVIO54JKCfDw4er1jbs73HPxL2AU9r8FEmoKrcNv3q0JbBLB8RbOHYq9\nu89C/GzBfoQZ5FHmtQXKkJb6JhQgyan19Jjeeyj1PDw7fFDQzQ88ZJjqbqvGYz0q\nW+fnt614n5gut/iMvd8nkz19E6HxHbBWxPO4s4s4ZKuMVWLqXzh+GMOOHnXuhB/K\niQUz+ZsjDhTavFdUpc9QnjWhSbwsVTz2/DRROeGVuj+hTW4x+ahgrG2SwBC1iCUE\nMwFWjLlxze+cLYs9Eo9e7YJ7UGjtsqxVB0VYVxM90XAcJNIMvGgWNY9pGnC8gUsi\nM1rP3oJeBgTaafUusdlyIpo3m0N5zCbopqWP3yx7+00pQ9swJkbhFKoEZChlSDBk\n5nw/IJST/Mmqxg9bzWhWIDBIHK77bTc9/zP86GUBoEFaDzGKHFNyM5Rx7bTXpwkM\nQ3X8YkXBDuX2u8dP4BWLNqFi2AbR605W46/s9RfUWEHQomOj4B4tiG946hh/5IHL\npZVO3o0UEvlDEM5PNdiffXVz0jInfhMV0oNH571d43nsjzPlk3ugFvGaWk0mUEXf\nzeL3yk/f3rWwVmFLD9rUZTA/7zFs3KsHhTSne/opz9CI/7GAJB7uZwwLgtcsebNB\nj6lWbUQN+ird4/v7dml5PRnGhFJPWhVMBeVwyYKH8yYYh5cFbT79aofu76hG8dMb\nAH7JdVKk69Q4dW+ZTJRFk0/zqzetJ3IEk8sGjvybZQzFZW1kNTqI3NJmkOzMRjvD\nvqgGcwxllM6kuERNmVHUlFxOix7wewgMQCPpY5e3SNJo1W+5N7gV4Rlt5iUoBL12\nfCUNlz2saUs8g10f7AwHTWXVfGM9RQ==\n=KjJg\n-----END PGP SIGNATURE-----",
        "payload": "tree 8d60e4c979aa3fe1cf383e108a4b35b42df63614\nparent 82d360b5a88d9057b6c09b61cd69e426c7a2412d\nauthor Vasil Dimov <vd@FreeBSD.org> 1614864709 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1615899558 +0100\n\ni2p: use pointers to Sock to accommodate mocking\n\nChange the types of `i2p::Connection::sock` and\n`i2p::sam::Session::m_control_sock` from `Sock` to\n`std::unique_ptr<Sock>`.\n\nUsing pointers would allow us to sneak `FuzzedSock` instead of `Sock`\nand have the methods of the former called.\n\nAfter this change a test only needs to replace `CreateSock()` with\na function that returns `FuzzedSock`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9947e44de0cbd79e99d883443a9ac441d8c69713",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9947e44de0cbd79e99d883443a9ac441d8c69713",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9947e44de0cbd79e99d883443a9ac441d8c69713/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82d360b5a88d9057b6c09b61cd69e426c7a2412d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82d360b5a88d9057b6c09b61cd69e426c7a2412d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82d360b5a88d9057b6c09b61cd69e426c7a2412d"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 30,
      "deletions": 26
    },
    "files": [
      {
        "sha": "a44f09f0436b06b1b2094148f96722a102a7adcb",
        "filename": "src/i2p.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 19,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9947e44de0cbd79e99d883443a9ac441d8c69713/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9947e44de0cbd79e99d883443a9ac441d8c69713/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=9947e44de0cbd79e99d883443a9ac441d8c69713",
        "patch": "@@ -20,6 +20,7 @@\n #include <util/system.h>\n \n #include <chrono>\n+#include <memory>\n #include <stdexcept>\n #include <string>\n \n@@ -115,7 +116,8 @@ namespace sam {\n Session::Session(const fs::path& private_key_file,\n                  const CService& control_host,\n                  CThreadInterrupt* interrupt)\n-    : m_private_key_file(private_key_file), m_control_host(control_host), m_interrupt(interrupt)\n+    : m_private_key_file(private_key_file), m_control_host(control_host), m_interrupt(interrupt),\n+      m_control_sock(std::make_unique<Sock>(INVALID_SOCKET))\n {\n }\n \n@@ -145,15 +147,15 @@ bool Session::Accept(Connection& conn)\n     try {\n         while (!*m_interrupt) {\n             Sock::Event occurred;\n-            conn.sock.Wait(MAX_WAIT_FOR_IO, Sock::RECV, &occurred);\n+            conn.sock->Wait(MAX_WAIT_FOR_IO, Sock::RECV, &occurred);\n \n             if ((occurred & Sock::RECV) == 0) {\n                 // Timeout, no incoming connections within MAX_WAIT_FOR_IO.\n                 continue;\n             }\n \n             const std::string& peer_dest =\n-                conn.sock.RecvUntilTerminator('\\n', MAX_WAIT_FOR_IO, *m_interrupt, MAX_MSG_SIZE);\n+                conn.sock->RecvUntilTerminator('\\n', MAX_WAIT_FOR_IO, *m_interrupt, MAX_MSG_SIZE);\n \n             conn.peer = CService(DestB64ToAddr(peer_dest), Params().GetDefaultPort());\n \n@@ -171,7 +173,7 @@ bool Session::Connect(const CService& to, Connection& conn, bool& proxy_error)\n     proxy_error = true;\n \n     std::string session_id;\n-    Sock sock;\n+    std::unique_ptr<Sock> sock;\n     conn.peer = to;\n \n     try {\n@@ -184,12 +186,12 @@ bool Session::Connect(const CService& to, Connection& conn, bool& proxy_error)\n         }\n \n         const Reply& lookup_reply =\n-            SendRequestAndGetReply(sock, strprintf(\"NAMING LOOKUP NAME=%s\", to.ToStringIP()));\n+            SendRequestAndGetReply(*sock, strprintf(\"NAMING LOOKUP NAME=%s\", to.ToStringIP()));\n \n         const std::string& dest = lookup_reply.Get(\"VALUE\");\n \n         const Reply& connect_reply = SendRequestAndGetReply(\n-            sock, strprintf(\"STREAM CONNECT ID=%s DESTINATION=%s SILENT=false\", session_id, dest),\n+            *sock, strprintf(\"STREAM CONNECT ID=%s DESTINATION=%s SILENT=false\", session_id, dest),\n             false);\n \n         const std::string& result = connect_reply.Get(\"RESULT\");\n@@ -271,7 +273,7 @@ Session::Reply Session::SendRequestAndGetReply(const Sock& sock,\n     return reply;\n }\n \n-Sock Session::Hello() const\n+std::unique_ptr<Sock> Session::Hello() const\n {\n     auto sock = CreateSock(m_control_host);\n \n@@ -285,15 +287,15 @@ Sock Session::Hello() const\n \n     SendRequestAndGetReply(*sock, \"HELLO VERSION MIN=3.1 MAX=3.1\");\n \n-    return std::move(*sock);\n+    return sock;\n }\n \n void Session::CheckControlSock()\n {\n     LOCK(m_mutex);\n \n     std::string errmsg;\n-    if (!m_control_sock.IsConnected(errmsg)) {\n+    if (!m_control_sock->IsConnected(errmsg)) {\n         Log(\"Control socket error: %s\", errmsg);\n         Disconnect();\n     }\n@@ -341,26 +343,26 @@ Binary Session::MyDestination() const\n void Session::CreateIfNotCreatedAlready()\n {\n     std::string errmsg;\n-    if (m_control_sock.IsConnected(errmsg)) {\n+    if (m_control_sock->IsConnected(errmsg)) {\n         return;\n     }\n \n     Log(\"Creating SAM session with %s\", m_control_host.ToString());\n \n-    Sock sock = Hello();\n+    auto sock = Hello();\n \n     const auto& [read_ok, data] = ReadBinaryFile(m_private_key_file);\n     if (read_ok) {\n         m_private_key.assign(data.begin(), data.end());\n     } else {\n-        GenerateAndSavePrivateKey(sock);\n+        GenerateAndSavePrivateKey(*sock);\n     }\n \n     const std::string& session_id = GetRandHash().GetHex().substr(0, 10); // full is an overkill, too verbose in the logs\n     const std::string& private_key_b64 = SwapBase64(EncodeBase64(m_private_key));\n \n-    SendRequestAndGetReply(sock, strprintf(\"SESSION CREATE STYLE=STREAM ID=%s DESTINATION=%s\",\n-                                           session_id, private_key_b64));\n+    SendRequestAndGetReply(*sock, strprintf(\"SESSION CREATE STYLE=STREAM ID=%s DESTINATION=%s\",\n+                                            session_id, private_key_b64));\n \n     m_my_addr = CService(DestBinToAddr(MyDestination()), Params().GetDefaultPort());\n     m_session_id = session_id;\n@@ -370,12 +372,12 @@ void Session::CreateIfNotCreatedAlready()\n               m_my_addr.ToString());\n }\n \n-Sock Session::StreamAccept()\n+std::unique_ptr<Sock> Session::StreamAccept()\n {\n-    Sock sock = Hello();\n+    auto sock = Hello();\n \n     const Reply& reply = SendRequestAndGetReply(\n-        sock, strprintf(\"STREAM ACCEPT ID=%s SILENT=false\", m_session_id), false);\n+        *sock, strprintf(\"STREAM ACCEPT ID=%s SILENT=false\", m_session_id), false);\n \n     const std::string& result = reply.Get(\"RESULT\");\n \n@@ -393,14 +395,14 @@ Sock Session::StreamAccept()\n \n void Session::Disconnect()\n {\n-    if (m_control_sock.Get() != INVALID_SOCKET) {\n+    if (m_control_sock->Get() != INVALID_SOCKET) {\n         if (m_session_id.empty()) {\n             Log(\"Destroying incomplete session\");\n         } else {\n             Log(\"Destroying session %s\", m_session_id);\n         }\n     }\n-    m_control_sock.Reset();\n+    m_control_sock->Reset();\n     m_session_id.clear();\n }\n } // namespace sam"
      },
      {
        "sha": "cb2efedba8b24d310543d4d7e37a4ef5c3750d40",
        "filename": "src/i2p.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9947e44de0cbd79e99d883443a9ac441d8c69713/src/i2p.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9947e44de0cbd79e99d883443a9ac441d8c69713/src/i2p.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.h?ref=9947e44de0cbd79e99d883443a9ac441d8c69713",
        "patch": "@@ -12,6 +12,7 @@\n #include <threadinterrupt.h>\n #include <util/sock.h>\n \n+#include <memory>\n #include <optional>\n #include <string>\n #include <unordered_map>\n@@ -29,7 +30,7 @@ using Binary = std::vector<uint8_t>;\n  */\n struct Connection {\n     /** Connected socket. */\n-    Sock sock;\n+    std::unique_ptr<Sock> sock;\n \n     /** Our I2P address. */\n     CService me;\n@@ -166,7 +167,7 @@ class Session\n      * @return a connected socket\n      * @throws std::runtime_error if an error occurs\n      */\n-    Sock Hello() const EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n+    std::unique_ptr<Sock> Hello() const EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n \n     /**\n      * Check the control socket for errors and possibly disconnect.\n@@ -204,10 +205,11 @@ class Session\n \n     /**\n      * Open a new connection to the SAM proxy and issue \"STREAM ACCEPT\" request using the existing\n-     * session id. Return the idle socket that is waiting for a peer to connect to us.\n+     * session id.\n+     * @return the idle socket that is waiting for a peer to connect to us\n      * @throws std::runtime_error if an error occurs\n      */\n-    Sock StreamAccept() EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n+    std::unique_ptr<Sock> StreamAccept() EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n \n     /**\n      * Destroy the session, closing the internally used sockets.\n@@ -248,7 +250,7 @@ class Session\n      * connections and make outgoing ones.\n      * See https://geti2p.net/en/docs/api/samv3\n      */\n-    Sock m_control_sock GUARDED_BY(m_mutex);\n+    std::unique_ptr<Sock> m_control_sock GUARDED_BY(m_mutex);\n \n     /**\n      * Our .b32.i2p address."
      },
      {
        "sha": "6ff51057b158cce3d0917171487f5136eefc2bf8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9947e44de0cbd79e99d883443a9ac441d8c69713/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9947e44de0cbd79e99d883443a9ac441d8c69713/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9947e44de0cbd79e99d883443a9ac441d8c69713",
        "patch": "@@ -432,7 +432,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             i2p::Connection conn;\n             if (m_i2p_sam_session->Connect(addrConnect, conn, proxyConnectionFailed)) {\n                 connected = true;\n-                sock = std::make_unique<Sock>(std::move(conn.sock));\n+                sock = std::move(conn.sock);\n                 addr_bind = CAddress{conn.me, NODE_NONE};\n             }\n         } else if (GetProxy(addrConnect.GetNetwork(), proxy)) {\n@@ -2221,7 +2221,7 @@ void CConnman::ThreadI2PAcceptIncoming()\n             continue;\n         }\n \n-        CreateNodeFromAcceptedSocket(conn.sock.Release(), NetPermissionFlags::PF_NONE,\n+        CreateNodeFromAcceptedSocket(conn.sock->Release(), NetPermissionFlags::PF_NONE,\n                                      CAddress{conn.me, NODE_NONE}, CAddress{conn.peer, NODE_NONE});\n     }\n }"
      }
    ]
  },
  {
    "sha": "2d8ac779708322e1235e823edfc9c8f6e2dd65e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDhhYzc3OTcwODMyMmUxMjM1ZTgyM2VkZmM5YzhmNmUyZGQ2NWU0",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-04T14:32:11Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-16T13:58:38Z"
      },
      "message": "fuzz: add tests for the I2P Session public interface",
      "tree": {
        "sha": "a9e4f8fafdac51d85a708a2de9331e243a07874e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9e4f8fafdac51d85a708a2de9331e243a07874e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d8ac779708322e1235e823edfc9c8f6e2dd65e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmBQuY4ACgkQVN8G9ktV\ny79RGSAApSCukeAp7RJ9sgvzgx9FSQAh/Ku74BdPseTZpJeryhDd+n4qE2TuzocH\n8mNC+9Zqnig64BgZ+RYn3WG1f+W3fE3GTzbm/bL0wPa9mYR3rNz1n0jAvQWnLhj/\nrLWhtoevsIEpH1/F46pcWrW79OxFcwsEDDtUyANvgPPJS5csTPbn/wGHaXJ3cnN9\nTARwl2VnT/hgrPAavJNYxpE+Fg3gp4aOOmYycgFyat8FIRN6m/xLzD9C8ifR6B96\nBBmMP+rs4nRNtH+MYeliu+SshINCZk1IHQadh+TX0A2lXcnXWDlV9ogr8Bp8SHFO\nYfzXmPL1FaP8qwFkSEFGoPunB2xvnKaKQXOVcznbbhDs0I2kRbLFfyZEXKTHcmRd\nNWDGwZl/zx1GNZsM/TuyZwj0SbhX0/kkrB2ljhaRTEby1MiulfBaX8kJ5L0MIEd0\niKpYjLXun3jVkr+WMoF28KMRqLIuL8/MtzAL/1iNb/qlbsgz1tyJhjhZfBtl5hLk\nLY20nZIOaA7IBjQGeE5iRJcXYwnj59oU3EG6qHjf1Dy7nmvWcuZskwM3Wr0iMjaz\nF51FVCJ/rLVDUGxUnlyARDMRjdpYV6PxlV6lU87FaRLuz9nucnDhydauYI0LPRCO\nCaDxDKoxZUuhH6U7Tqno+lXIbDPBFuA/P48iCA+crdBoh13SlJ8ITIGcFhmQ8D0d\nescee1giv5VDH3xYbrRReFoD/IC7zXEJTSjYW8aELWa0pnqdM/W9rpCko291VMQL\nwltDTjMlCN6KnWdc/gpoJbWBj8doRObo68Ixp3X1MAiT6+FxMeqYq3Uv3sCvza03\nYphouly5Nxz12A9Ce7YZX/t2dLLdkFadqBKU4gSDROVRVggKukgxQOTe9KTPYqP2\nX+KHcePgwg/tWGdljQJJHHfbR97zdQEW14V4mXJaBeV/r8yhZnws3w6VFpdKK7if\nTaI/nJIrpfXgPqhGFF+YPJxXBjuv9SVAOzkSeoUuzQIxAILReDD3BuOKf/FFocDm\nrdTlH06Tv7kQzK2CsdP1xmc7xuNF3gUeR7EBBNnd4y0yewk/ns/kzup+7wgXlSXC\n2vD5Q2eqt5Y1RxNn/yYTaHbbyfP1Ae0gFRDjmOOkLdVCCYdPHBvs7EfPNhfGZC4S\nDAOnFbcMEvfEVjiCN1vEoAYthTREg6fSU7jUwFlLWq5etPin8yRZPcfHQG9dScDD\nBQhDFsTfeGPzipdJAvaI96e9paYKm8HVsQzwkyTgO6RGyIvHqR1yRik2M8H+hAMK\ncJRkiw5JzUINNH4O01BjDO/DoBxgZEXpekmq5EORnkxAU0H7IhxC/WsfBsKgvvaV\nLyOZ+UOkSnyfYlnQKOh08daoJ+NT1A==\n=RbV1\n-----END PGP SIGNATURE-----",
        "payload": "tree a9e4f8fafdac51d85a708a2de9331e243a07874e\nparent 9947e44de0cbd79e99d883443a9ac441d8c69713\nauthor Vasil Dimov <vd@FreeBSD.org> 1614868331 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1615903118 +0100\n\nfuzz: add tests for the I2P Session public interface\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8ac779708322e1235e823edfc9c8f6e2dd65e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d8ac779708322e1235e823edfc9c8f6e2dd65e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8ac779708322e1235e823edfc9c8f6e2dd65e4/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9947e44de0cbd79e99d883443a9ac441d8c69713",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9947e44de0cbd79e99d883443a9ac441d8c69713",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9947e44de0cbd79e99d883443a9ac441d8c69713"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 58,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f461a989b8666124729e9792ec3bdbeece4402f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d8ac779708322e1235e823edfc9c8f6e2dd65e4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d8ac779708322e1235e823edfc9c8f6e2dd65e4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=2d8ac779708322e1235e823edfc9c8f6e2dd65e4",
        "patch": "@@ -239,6 +239,7 @@ test_fuzz_fuzz_SOURCES = \\\n  test/fuzz/golomb_rice.cpp \\\n  test/fuzz/hex.cpp \\\n  test/fuzz/http_request.cpp \\\n+ test/fuzz/i2p.cpp \\\n  test/fuzz/integer.cpp \\\n  test/fuzz/key.cpp \\\n  test/fuzz/key_io.cpp \\"
      },
      {
        "sha": "345d68502adea231611d446bb17a09ba7e0c1196",
        "filename": "src/test/fuzz/i2p.cpp",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d8ac779708322e1235e823edfc9c8f6e2dd65e4/src/test/fuzz/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d8ac779708322e1235e823edfc9c8f6e2dd65e4/src/test/fuzz/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/i2p.cpp?ref=2d8ac779708322e1235e823edfc9c8f6e2dd65e4",
        "patch": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <i2p.h>\n+#include <netaddress.h>\n+#include <netbase.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+#include <threadinterrupt.h>\n+#include <util/system.h>\n+\n+void initialize_i2p()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<>();\n+}\n+\n+FUZZ_TARGET_INIT(i2p, initialize_i2p)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    // Mock CreateSock() to create FuzzedSock.\n+    auto CreateSockOrig = CreateSock;\n+    CreateSock = [&fuzzed_data_provider](const CService&) {\n+        return std::make_unique<FuzzedSock>(fuzzed_data_provider);\n+    };\n+\n+    const CService sam_proxy;\n+    CThreadInterrupt interrupt;\n+\n+    i2p::sam::Session sess{GetDataDir() / \"fuzzed_i2p_private_key\", sam_proxy, &interrupt};\n+\n+    i2p::Connection conn;\n+\n+    if (sess.Listen(conn)) {\n+        if (sess.Accept(conn)) {\n+            try {\n+                conn.sock->RecvUntilTerminator('\\n', 10ms, interrupt, i2p::sam::MAX_MSG_SIZE);\n+            } catch (const std::runtime_error&) {\n+            }\n+        }\n+    }\n+\n+    const CService to;\n+    bool proxy_error;\n+\n+    if (sess.Connect(to, conn, proxy_error)) {\n+        try {\n+            conn.sock->SendComplete(\"verack\\n\", 10ms, interrupt);\n+        } catch (const std::runtime_error&) {\n+        }\n+    }\n+\n+    CreateSock = CreateSockOrig;\n+}"
      }
    ]
  },
  {
    "sha": "40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDMxNmEzN2NiMDJjZjhhOWE4YjJjYmQ0ZDcxNTNmZmE1N2U3ZWM1",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-11T15:27:22Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-16T13:58:38Z"
      },
      "message": "test: add I2P test for a runaway SAM proxy\n\nAdd a regression test for https://github.com/bitcoin/bitcoin/pull/21407.\n\nThe test creates a socket that, upon read, returns some data, but never\nthe expected terminator `\\n`, injects that socket into the I2P code and\nexpects `i2p::sam::Session::Connect()` to fail, printing a specific\nerror message to the log.",
      "tree": {
        "sha": "19db70f0951663b02a31139f8afe47cc1d2c7f0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19db70f0951663b02a31139f8afe47cc1d2c7f0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmBQuY4ACgkQVN8G9ktV\ny7/Y+R//YZ95D+Cvt45oTQ9KjquL8aAxEyMAMAGYVhEw7Vtq/vPShj4LPFIE43dx\nfQQ1TBU9Ny7nns0jHjfGKy2SZdZMrJJDlejN4K6EWNjN+h0yrvTDlVlGXJKd9xEw\noXt44XEXzntnGoYJ4nTEyIDZTJB+9P3YBSa2CSOotrY8za2afnkVLRG8bCil/i7/\niPbgRNj89cFJCyRscmqi4EZs0jFJVZVqpvcBqFSHVDCOewr8DDohUAxBWf1x2jqO\n0hxBms4ZTVrftANfXl56AbuGdpTozECiYxYW4c0atYkKCR7ZBmus8KjErKbiysxY\n0s2twTNy0BBRnWgFBtkFvmFrrm0xVGpsRXFVSIdwH5RIYVMs7u3p8GJzEU59R2Fw\nU+fg9quNEd0+scI6Ngm7yz08VRfE3jrvyjD/hWeCWQfEh5ZTWf9IvmW1J7W7fn1t\nK8w6v3+LTHrHZTnZUIA7/8g7nMN941Kahh0aTNcJSKW5QEEdbKlYLi1kXRNqxKBb\n4x0p4NDLEP19bX0m/JDPStYSTe95WA3U33I89XmF/jVoQFILmGK78oKVcA8ZMRSx\nTliDH5bZMF0wKuwa1/B1FKBN5Pc5NnXKHE2zRGrNTeeTSSb/JfZaVdI0ekDR0xqJ\nAyTy9Ge3ut46c7+Yi2F7p9l9ChubDF989z7dt4e/NoVaVcFGAAb5KyXtc1IB2ctf\nBIvGlX8cR7kIG3XENOahZdIYdPQovOwIOSpIqjY5vn02HV/l9+COhdtWyXj/pYwp\nv5SYryVykUdmZXXlnlJxtSZiStua7DtqZ4aNuoBCfyL0NuJ6MdmwvBYaRu7PUHC6\nDPpBEObxslIROCSZ6O46jrfRblt4bhAgHg6E5Ad2BZ35JkVUpHii/1+2pq0hGEwI\nXAODBJRx0i8RRGrew0iduhbsIbxbVFRuv4N6wrbGfX9hDDP0Ht1L4XA771ZFlfUf\n/gGO+ppwUc1PaXc7FXuDZykWXa44jlu/fZ3fI4l8WMMSKFG2/XojOE7tndSLdGXi\neqJZ0Ch+hjKtSyyZwoe+FeftvZv56EUT5jjKx6gLqJqW0440HPVzlwfXnubc8Vke\nW5vm3/Txk/2rPm+rE4hf6Go2TEt2A6WLQXSa9PlnSQ4YR84MQusAl0XB2jaVmriX\n6OZ+O3EZSSeWw6eRuy7WjcbJO6ITkxl1PW1QsaSrQ8m3+qAIQJOkYXBqQUQWPs+w\no+j8S01VTuBOVsP2NCjTX3gH/mVlZySJAFLKY6tYtvi3ImQFrCvW2Y7QRbs2hx/O\n0ewTAFVQ6YCIv9mQm90hbRdnXytDmpBHrtjxHbNIRZxM+p23MAM5w9AqlBeZ+5qe\nE4cDvKBiN+lP/VeLqYRhmQCcBGkISg==\n=Nski\n-----END PGP SIGNATURE-----",
        "payload": "tree 19db70f0951663b02a31139f8afe47cc1d2c7f0f\nparent 2d8ac779708322e1235e823edfc9c8f6e2dd65e4\nauthor Vasil Dimov <vd@FreeBSD.org> 1615476442 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1615903118 +0100\n\ntest: add I2P test for a runaway SAM proxy\n\nAdd a regression test for https://github.com/bitcoin/bitcoin/pull/21407.\n\nThe test creates a socket that, upon read, returns some data, but never\nthe expected terminator `\\n`, injects that socket into the I2P code and\nexpects `i2p::sam::Session::Connect()` to fail, printing a specific\nerror message to the log.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d8ac779708322e1235e823edfc9c8f6e2dd65e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8ac779708322e1235e823edfc9c8f6e2dd65e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d8ac779708322e1235e823edfc9c8f6e2dd65e4"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 114,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cf7f65e177c4de52113a83dbea51d4169263a3d2",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5",
        "patch": "@@ -90,6 +90,7 @@ BITCOIN_TESTS =\\\n   test/fs_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n+  test/i2p_tests.cpp \\\n   test/interfaces_tests.cpp \\\n   test/key_io_tests.cpp \\\n   test/key_tests.cpp \\"
      },
      {
        "sha": "334f71106c66ce6e5fccdcbb84c9dce7fcd34625",
        "filename": "src/test/i2p_tests.cpp",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5/src/test/i2p_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5/src/test/i2p_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/i2p_tests.cpp?ref=40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5",
        "patch": "@@ -0,0 +1,44 @@\n+// Copyright (c) 2021-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <i2p.h>\n+#include <netaddress.h>\n+#include <test/util/logging.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <threadinterrupt.h>\n+#include <util/system.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <memory>\n+#include <string>\n+\n+BOOST_FIXTURE_TEST_SUITE(i2p_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(unlimited_recv)\n+{\n+    auto CreateSockOrig = CreateSock;\n+\n+    // Mock CreateSock() to create MockSock.\n+    CreateSock = [](const CService&) {\n+        return std::make_unique<StaticContentsSock>(std::string(i2p::sam::MAX_MSG_SIZE + 1, 'a'));\n+    };\n+\n+    CThreadInterrupt interrupt;\n+    i2p::sam::Session session(GetDataDir() / \"test_i2p_private_key\", CService{}, &interrupt);\n+\n+    {\n+        ASSERT_DEBUG_LOG(\"Creating SAM session\");\n+        ASSERT_DEBUG_LOG(\"too many bytes without a terminator\");\n+\n+        i2p::Connection conn;\n+        bool proxy_error;\n+        BOOST_REQUIRE(!session.Connect(CService{}, conn, proxy_error));\n+    }\n+\n+    CreateSock = CreateSockOrig;\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "2b7988413f897de1b004008ef54fecbac229c83c",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=40316a37cb02cf8a9a8b2cbd4d7153ffa57e7ec5",
        "patch": "@@ -5,7 +5,13 @@\n #ifndef BITCOIN_TEST_UTIL_NET_H\n #define BITCOIN_TEST_UTIL_NET_H\n \n+#include <compat.h>\n #include <net.h>\n+#include <util/sock.h>\n+\n+#include <cassert>\n+#include <cstring>\n+#include <string>\n \n struct ConnmanTestMsg : public CConnman {\n     using CConnman::CConnman;\n@@ -61,4 +67,67 @@ constexpr ConnectionType ALL_CONNECTION_TYPES[]{\n     ConnectionType::ADDR_FETCH,\n };\n \n+/**\n+ * A mocked Sock alternative that returns a statically contained data upon read and succeeds\n+ * and ignores all writes. The data to be returned is given to the constructor and when it is\n+ * exhausted an EOF is returned by further reads.\n+ */\n+class StaticContentsSock : public Sock\n+{\n+public:\n+    explicit StaticContentsSock(const std::string& contents) : m_contents{contents}, m_consumed{0}\n+    {\n+        // Just a dummy number that is not INVALID_SOCKET.\n+        static_assert(INVALID_SOCKET != 1000);\n+        m_socket = 1000;\n+    }\n+\n+    ~StaticContentsSock() override { Reset(); }\n+\n+    StaticContentsSock& operator=(Sock&& other) override\n+    {\n+        assert(false && \"Move of Sock into MockSock not allowed.\");\n+        return *this;\n+    }\n+\n+    void Reset() override\n+    {\n+        m_socket = INVALID_SOCKET;\n+    }\n+\n+    ssize_t Send(const void*, size_t len, int) const override { return len; }\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override\n+    {\n+        const size_t consume_bytes{std::min(len, m_contents.size() - m_consumed)};\n+        std::memcpy(buf, m_contents.data() + m_consumed, consume_bytes);\n+        if ((flags & MSG_PEEK) == 0) {\n+            m_consumed += consume_bytes;\n+        }\n+        return consume_bytes;\n+    }\n+\n+    int Connect(const sockaddr*, socklen_t) const override { return 0; }\n+\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n+    {\n+        std::memset(opt_val, 0x0, *opt_len);\n+        return 0;\n+    }\n+\n+    bool Wait(std::chrono::milliseconds timeout,\n+              Event requested,\n+              Event* occurred = nullptr) const override\n+    {\n+        if (occurred != nullptr) {\n+            *occurred = requested;\n+        }\n+        return true;\n+    }\n+\n+private:\n+    const std::string m_contents;\n+    mutable size_t m_consumed;\n+};\n+\n #endif // BITCOIN_TEST_UTIL_NET_H"
      }
    ]
  }
]