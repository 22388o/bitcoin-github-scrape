[
  {
    "sha": "fac05ccdade8b34c969b9cd9b37b355bc0aabf9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWMwNWNjZGFkZThiMzRjOTY5YjljZDliMzdiMzU1YmMwYWFiZjlj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-18T14:14:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-21T18:29:29Z"
      },
      "message": "wallet: [refactor] Pass ArgsManager to WalletAppInit",
      "tree": {
        "sha": "6eea8226ce5e4cb22fa23cb0ef1e9074ff4e9ba0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6eea8226ce5e4cb22fa23cb0ef1e9074ff4e9ba0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac05ccdade8b34c969b9cd9b37b355bc0aabf9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGyBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi34Qv41aMqwwCUdZDwyJhm05FA4F2UJL44gab+lALCKj2MzMw2FKzLsKqLfSOR\nBnRn5BFPCzb6g8McYyjIKjly1Z5s8csDtKjEIT0HRzJxgYyxvA9pOb46OOx29dvu\n9QBxR+e0xtHm7CvDFUBnROkGvdoxTfDkLUrhNCS942zouIRgZ6KED7AL0WVBcRhF\n5U6AQ2kU8SSkcf6ZPaKz2cMU15OBMJ1nsV/nLeJSWH63eJEGLk0fWov72dV+lrYu\nfqeV0se6fpRGmeBe9dwPDY56nRkYMMO6MMtCToN2MYN0A0b0YBM8sAEsZiTrTs1H\njt3YOU0ChSGp7hCd30Io1vl/RulxSrLo5M0KdPeXgavlmakKWqnowMGs2YsBf1kR\negVuPrF8BzQlC8wfIi+jsxlgGrMWUZg7n+amIfsr9ZG3ATkoch9KB9ONJGQ67YQV\ntbLRRE9+sZ2ukEHM8W63b2flc27jWHvWkXmV1l4bSRclHqJu6WShml7DHEJ9GpwB\nCo+0TAw=\n=Q54z\n-----END PGP SIGNATURE-----",
        "payload": "tree 6eea8226ce5e4cb22fa23cb0ef1e9074ff4e9ba0\nparent 7f653c3b22f0a5267822eec017aea6a16752c597\nauthor MarcoFalke <falke.marco@gmail.com> 1608300848 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1611253769 +0100\n\nwallet: [refactor] Pass ArgsManager to WalletAppInit\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac05ccdade8b34c969b9cd9b37b355bc0aabf9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac05ccdade8b34c969b9cd9b37b355bc0aabf9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac05ccdade8b34c969b9cd9b37b355bc0aabf9c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f653c3b22f0a5267822eec017aea6a16752c597",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f653c3b22f0a5267822eec017aea6a16752c597",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f653c3b22f0a5267822eec017aea6a16752c597"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 21,
      "deletions": 20
    },
    "files": [
      {
        "sha": "435bf289b4431078d04f281daa7442dae008751e",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 20,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac05ccdade8b34c969b9cd9b37b355bc0aabf9c/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac05ccdade8b34c969b9cd9b37b355bc0aabf9c/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=fac05ccdade8b34c969b9cd9b37b355bc0aabf9c",
        "patch": "@@ -40,52 +40,53 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"createfromdump\", \"Create new wallet file from dumped records\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n }\n \n-static bool WalletAppInit(int argc, char* argv[])\n+static bool WalletAppInit(ArgsManager& args, int argc, char* argv[])\n {\n-    SetupWalletToolArgs(gArgs);\n+    SetupWalletToolArgs(args);\n     std::string error_message;\n-    if (!gArgs.ParseParameters(argc, argv, error_message)) {\n+    if (!args.ParseParameters(argc, argv, error_message)) {\n         tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error_message);\n         return false;\n     }\n-    if (argc < 2 || HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n+    if (argc < 2 || HelpRequested(args) || args.IsArgSet(\"-version\")) {\n         std::string strUsage = strprintf(\"%s bitcoin-wallet version\", PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\";\n-            if (!gArgs.IsArgSet(\"-version\")) {\n-                strUsage += \"\\n\"\n-                    \"bitcoin-wallet is an offline tool for creating and interacting with \" PACKAGE_NAME \" wallet files.\\n\"\n-                    \"By default bitcoin-wallet will act on wallets in the default mainnet wallet directory in the datadir.\\n\"\n-                    \"To change the target wallet, use the -datadir, -wallet and -testnet/-regtest arguments.\\n\\n\"\n-                    \"Usage:\\n\"\n-                    \"  bitcoin-wallet [options] <command>\\n\";\n-                strUsage += \"\\n\" + gArgs.GetHelpMessage();\n-            }\n+        if (!args.IsArgSet(\"-version\")) {\n+            strUsage += \"\\n\"\n+                        \"bitcoin-wallet is an offline tool for creating and interacting with \" PACKAGE_NAME \" wallet files.\\n\"\n+                        \"By default bitcoin-wallet will act on wallets in the default mainnet wallet directory in the datadir.\\n\"\n+                        \"To change the target wallet, use the -datadir, -wallet and -testnet/-regtest arguments.\\n\\n\"\n+                        \"Usage:\\n\"\n+                        \"  bitcoin-wallet [options] <command>\\n\";\n+            strUsage += \"\\n\" + args.GetHelpMessage();\n+        }\n         tfm::format(std::cout, \"%s\", strUsage);\n         return false;\n     }\n \n     // check for printtoconsole, allow -debug\n-    LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", gArgs.GetBoolArg(\"-debug\", false));\n+    LogInstance().m_print_to_console = args.GetBoolArg(\"-printtoconsole\", args.GetBoolArg(\"-debug\", false));\n \n     if (!CheckDataDirOption()) {\n-        tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\"));\n+        tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", args.GetArg(\"-datadir\", \"\"));\n         return false;\n     }\n     // Check for chain settings (Params() calls are only valid after this clause)\n-    SelectParams(gArgs.GetChainName());\n+    SelectParams(args.GetChainName());\n \n     return true;\n }\n \n int main(int argc, char* argv[])\n {\n+    ArgsManager& args = gArgs;\n #ifdef WIN32\n     util::WinCmdLineArgs winArgs;\n     std::tie(argc, argv) = winArgs.get();\n #endif\n     SetupEnvironment();\n     RandomInit();\n     try {\n-        if (!WalletAppInit(argc, argv)) return EXIT_FAILURE;\n+        if (!WalletAppInit(args, argc, argv)) return EXIT_FAILURE;\n     } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"WalletAppInit()\");\n         return EXIT_FAILURE;\n@@ -111,16 +112,16 @@ int main(int argc, char* argv[])\n     }\n \n     // A name must be provided when creating a file\n-    if (method == \"create\" && !gArgs.IsArgSet(\"-wallet\")) {\n+    if (method == \"create\" && !args.IsArgSet(\"-wallet\")) {\n         tfm::format(std::cerr, \"Wallet name must be provided when creating a new wallet.\\n\");\n         return EXIT_FAILURE;\n     }\n \n-    std::string name = gArgs.GetArg(\"-wallet\", \"\");\n+    std::string name = args.GetArg(\"-wallet\", \"\");\n \n     ECCVerifyHandle globalVerifyHandle;\n     ECC_Start();\n-    if (!WalletTool::ExecuteWalletToolFunc(gArgs, method, name)) {\n+    if (!WalletTool::ExecuteWalletToolFunc(args, method, name)) {\n         return EXIT_FAILURE;\n     }\n     ECC_Stop();"
      }
    ]
  },
  {
    "sha": "fa06bce4ac17f93decd4ee38c956e7aa55983f0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA2YmNlNGFjMTdmOTNkZWNkNGVlMzhjOTU2ZTdhYTU1OTgzZjBk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-21T12:57:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-21T18:29:58Z"
      },
      "message": "test: Add tests",
      "tree": {
        "sha": "20564a18777fb0bdf9d19eefb63d483ce560fefb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20564a18777fb0bdf9d19eefb63d483ce560fefb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa06bce4ac17f93decd4ee38c956e7aa55983f0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgNYgwAm3GAZX2G5/mhqtzv+3QbKajVwsPyh4/FiE5E4lBUttKHs+RQwRUPepDZ\nwSqPnMgVNxSi+DLXvCpL3i068Iy56TWEKBe2ehvn329EC+itcpchKCoFyDRQOduj\np8Yj+cULku+7UyPxT3Klve898zmFGZPtovu1Q5/JsUKIMXAkNGhnIUj2PPMk8A02\ngKLeua1RFuboCp5I4XNRSXtOjbZX/lCiK2bxsZRJUSKMQMvPe6mdnogmmFDje3ed\nGlyGfUik1jfiqkpJcpkr7r1LDJx//d2fUbJDVNnJZGvWN8EzBSiZ9mtPC++2Y+NR\nbnhUQElT7l8ihoyjQOSuYOXOpaNkZH6CptYYEK8H291igasqdEmJpxDoM2AibCfN\neGC5EFF1L4bDQAcdWFAAfNYTZE3lmKMIHWaGEyz/73nwpZxGItPIOyPIrnHCpT7J\no237KaPqzi1cstu+8qf2Arrl5I0iRRe7TxnDNk4MfhBe3v/20aBOfcOhxmrbk7o+\nvi/le+/u\n=73Wq\n-----END PGP SIGNATURE-----",
        "payload": "tree 20564a18777fb0bdf9d19eefb63d483ce560fefb\nparent fac05ccdade8b34c969b9cd9b37b355bc0aabf9c\nauthor MarcoFalke <falke.marco@gmail.com> 1611233879 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1611253798 +0100\n\ntest: Add tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa06bce4ac17f93decd4ee38c956e7aa55983f0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa06bce4ac17f93decd4ee38c956e7aa55983f0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa06bce4ac17f93decd4ee38c956e7aa55983f0d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fac05ccdade8b34c969b9cd9b37b355bc0aabf9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac05ccdade8b34c969b9cd9b37b355bc0aabf9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fac05ccdade8b34c969b9cd9b37b355bc0aabf9c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cbc6feaa0e0ab5532e28416c76bc2d51f60e6fa9",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa06bce4ac17f93decd4ee38c956e7aa55983f0d/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa06bce4ac17f93decd4ee38c956e7aa55983f0d/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=fa06bce4ac17f93decd4ee38c956e7aa55983f0d",
        "patch": "@@ -188,6 +188,8 @@ def test_invalid_tool_commands_and_args(self):\n         self.assert_raises_tool_error('Invalid command: help', 'help')\n         self.assert_raises_tool_error('Error: two methods provided (info and create). Only one method should be provided.', 'info', 'create')\n         self.assert_raises_tool_error('Error parsing command line arguments: Invalid parameter -foo', '-foo')\n+        self.assert_raises_tool_error('No method provided. Run `bitcoin-wallet -help` for valid methods.')\n+        self.assert_raises_tool_error('Wallet name must be provided when creating a new wallet.', 'create')\n         locked_dir = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\")\n         error = 'Error initializing wallet database environment \"{}\"!'.format(locked_dir)\n         if self.options.descriptors:"
      }
    ]
  },
  {
    "sha": "7777105a24a36b62df35d12ecf6c6370671568c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Nzc3MTA1YTI0YTM2YjYyZGYzNWQxMmVjZjZjNjM3MDY3MTU2OGM4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-21T12:59:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-21T18:30:34Z"
      },
      "message": "refactor: Move all command dependend checks to ExecuteWalletToolFunc",
      "tree": {
        "sha": "e8f4aa39f657696134b09ff4d18c469616f3a412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8f4aa39f657696134b09ff4d18c469616f3a412"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7777105a24a36b62df35d12ecf6c6370671568c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhXxAwAncD78N6EKzksOsfo9IACk+XPSUofXmDh58SGNQrw0LDqx8/sYfozfL4P\ns/zeLZX64df3S8cFdtXNPlBEvAUEVVt48vJIrLogMvjQ5rkoI9Yfs3qft7kBCd/c\nGfGbsrw7/Bc2WevJLd8+OdGG8cHfEG+8vrfwr7LwBLVFkRMmtuc++OgoyhdZETej\nU5HdbhpDTb9Hhcyba1lpz3PBz8C+pmUFSRqnkk4pHhrV/mUvmDicQ4tyt88bNpe0\nLHqSqNK9znu0DIkSCXDM0aHvhFkgB9oQj+LcTU+4yuCIqdyDNxOS1vsIgK8NwYUq\ndOL1Sc0joB3m4FDsGh41iTTbiQHrmtMc0fxcx4W2hW43T5KdCYIU8WqhdhLErBcx\n1QsO+ejRfcSaZ1JMkUDu6DvjIyJPmBscYamC3yyvSCUOQS3qPft0tZ8qwQivMTCN\nfs/TwQdrhjSMeBRH+AXXwZt5ed7SGHvYHzmWM+SJ9TzKYoR0Xo739r1YgooHkQv8\nJNQUAItV\n=Vrqo\n-----END PGP SIGNATURE-----",
        "payload": "tree e8f4aa39f657696134b09ff4d18c469616f3a412\nparent fa06bce4ac17f93decd4ee38c956e7aa55983f0d\nauthor MarcoFalke <falke.marco@gmail.com> 1611233989 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1611253834 +0100\n\nrefactor: Move all command dependend checks to ExecuteWalletToolFunc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7777105a24a36b62df35d12ecf6c6370671568c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7777105a24a36b62df35d12ecf6c6370671568c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7777105a24a36b62df35d12ecf6c6370671568c8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa06bce4ac17f93decd4ee38c956e7aa55983f0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa06bce4ac17f93decd4ee38c956e7aa55983f0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa06bce4ac17f93decd4ee38c956e7aa55983f0d"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 9,
      "deletions": 13
    },
    "files": [
      {
        "sha": "0b55b587fdab1b684bce24568350c9b475fac977",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777105a24a36b62df35d12ecf6c6370671568c8/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777105a24a36b62df35d12ecf6c6370671568c8/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=7777105a24a36b62df35d12ecf6c6370671568c8",
        "patch": "@@ -111,17 +111,9 @@ int main(int argc, char* argv[])\n         return EXIT_FAILURE;\n     }\n \n-    // A name must be provided when creating a file\n-    if (method == \"create\" && !args.IsArgSet(\"-wallet\")) {\n-        tfm::format(std::cerr, \"Wallet name must be provided when creating a new wallet.\\n\");\n-        return EXIT_FAILURE;\n-    }\n-\n-    std::string name = args.GetArg(\"-wallet\", \"\");\n-\n     ECCVerifyHandle globalVerifyHandle;\n     ECC_Start();\n-    if (!WalletTool::ExecuteWalletToolFunc(args, method, name)) {\n+    if (!WalletTool::ExecuteWalletToolFunc(args, method)) {\n         return EXIT_FAILURE;\n     }\n     ECC_Stop();"
      },
      {
        "sha": "b2cb0bf4792a1a518ca757440616deca2640d1bc",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777105a24a36b62df35d12ecf6c6370671568c8/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777105a24a36b62df35d12ecf6c6370671568c8/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=7777105a24a36b62df35d12ecf6c6370671568c8",
        "patch": "@@ -103,10 +103,8 @@ static void WalletShowInfo(CWallet* wallet_instance)\n     tfm::format(std::cout, \"Address Book: %zu\\n\", wallet_instance->m_address_book.size());\n }\n \n-bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command, const std::string& name)\n+bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n {\n-    const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), name);\n-\n     if (args.IsArgSet(\"-format\") && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n         return false;\n@@ -119,6 +117,12 @@ bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command,\n         tfm::format(std::cerr, \"The -descriptors option can only be used with the 'create' command.\\n\");\n         return false;\n     }\n+    if (command == \"create\" && !args.IsArgSet(\"-wallet\")) {\n+        tfm::format(std::cerr, \"Wallet name must be provided when creating a new wallet.\\n\");\n+        return false;\n+    }\n+    const std::string name = args.GetArg(\"-wallet\", \"\");\n+    const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), name);\n \n     if (command == \"create\") {\n         DatabaseOptions options;"
      },
      {
        "sha": "f4516bb5bc88f85620095bd9e27504be5cfd8e65",
        "filename": "src/wallet/wallettool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7777105a24a36b62df35d12ecf6c6370671568c8/src/wallet/wallettool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7777105a24a36b62df35d12ecf6c6370671568c8/src/wallet/wallettool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.h?ref=7777105a24a36b62df35d12ecf6c6370671568c8",
        "patch": "@@ -10,7 +10,7 @@\n namespace WalletTool {\n \n void WalletShowInfo(CWallet* wallet_instance);\n-bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command, const std::string& file);\n+bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command);\n \n } // namespace WalletTool\n "
      }
    ]
  },
  {
    "sha": "fa61b9d1a68820758f9540653920deaeae6abe79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTYxYjlkMWE2ODgyMDc1OGY5NTQwNjUzOTIwZGVhZWFlNmFiZTc5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-13T08:00:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-21T18:31:28Z"
      },
      "message": "util: Add ArgsManager::GetCommand() and use it in bitcoin-wallet\n\nCo-Authored-by: Anthony Towns <aj@erisian.com.au>",
      "tree": {
        "sha": "805bb5c0993d8c69ed269d41ed8d796edbdd2af9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/805bb5c0993d8c69ed269d41ed8d796edbdd2af9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa61b9d1a68820758f9540653920deaeae6abe79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYEACgkQzit1aX5p\npUjtHgwAjQ94qHYPBJDi6bMaJJt7qS7iBKuxaDa1P9hurieo0gRpTOEKBY7wvckA\nDSg8Jb3poC14DbzRoUItio1SLwt6KuSpj4M1p7SDU+v0C3d8+RBAVA9BpewOkHeT\nc/Y7id6r0mthE2Wcse6aM8LVnWkdRNA6Q34Twe5bavZ011Fz8SN2Jz30bzU/C5yt\nfLHJxWFdLcsgBsNu/wVNluh4cZW4jzovRYyjkWhn1jMN7+JN34guVevnuRxpGPxM\nhs38ymGedrK3q8vFse23rkjpiZTmeKNKzXOzp1AY2Mm1+Mpm94vLvechxF/qeb6t\n7ij5zWTvH7XtiM2MLx3FyGyn2A4bjSizB3kxnF8qy4OqpDDIbcn7dr4DNXZg/COY\najxpK2iIQWf+Fm5xWBaWGXP0q6qycR+N7ELeReC8HyL+2jWfnyJhb2hVCj0C0RP1\n2bi2eakQaFGytYQLwZ7Xjr3ut/pGyDEVDHzVd3DQ0Pv6indLJXbyy4hi+zeJk/Sg\nY6j5QVZt\n=GXdU\n-----END PGP SIGNATURE-----",
        "payload": "tree 805bb5c0993d8c69ed269d41ed8d796edbdd2af9\nparent 7777105a24a36b62df35d12ecf6c6370671568c8\nauthor MarcoFalke <falke.marco@gmail.com> 1610524843 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1611253888 +0100\n\nutil: Add ArgsManager::GetCommand() and use it in bitcoin-wallet\n\nCo-Authored-by: Anthony Towns <aj@erisian.com.au>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa61b9d1a68820758f9540653920deaeae6abe79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa61b9d1a68820758f9540653920deaeae6abe79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa61b9d1a68820758f9540653920deaeae6abe79/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7777105a24a36b62df35d12ecf6c6370671568c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7777105a24a36b62df35d12ecf6c6370671568c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7777105a24a36b62df35d12ecf6c6370671568c8"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 89,
      "deletions": 24
    },
    "files": [
      {
        "sha": "b84d909b07ee5ed6844ac94e82be7369a08897ba",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 18,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa61b9d1a68820758f9540653920deaeae6abe79/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa61b9d1a68820758f9540653920deaeae6abe79/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=fa61b9d1a68820758f9540653920deaeae6abe79",
        "patch": "@@ -33,11 +33,11 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n-    argsman.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    argsman.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    argsman.AddArg(\"salvage\", \"Attempt to recover private keys from a corrupt wallet. Warning: 'salvage' is experimental.\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    argsman.AddArg(\"dump\", \"Print out all of the wallet key-value records\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n-    argsman.AddArg(\"createfromdump\", \"Create new wallet file from dumped records\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    argsman.AddCommand(\"info\", \"Get wallet info\", OptionsCategory::COMMANDS);\n+    argsman.AddCommand(\"create\", \"Create new wallet file\", OptionsCategory::COMMANDS);\n+    argsman.AddCommand(\"salvage\", \"Attempt to recover private keys from a corrupt wallet. Warning: 'salvage' is experimental.\", OptionsCategory::COMMANDS);\n+    argsman.AddCommand(\"dump\", \"Print out all of the wallet key-value records\", OptionsCategory::COMMANDS);\n+    argsman.AddCommand(\"createfromdump\", \"Create new wallet file from dumped records\", OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(ArgsManager& args, int argc, char* argv[])\n@@ -95,25 +95,19 @@ int main(int argc, char* argv[])\n         return EXIT_FAILURE;\n     }\n \n-    std::string method {};\n-    for(int i = 1; i < argc; ++i) {\n-        if (!IsSwitchChar(argv[i][0])) {\n-            if (!method.empty()) {\n-                tfm::format(std::cerr, \"Error: two methods provided (%s and %s). Only one method should be provided.\\n\", method, argv[i]);\n-                return EXIT_FAILURE;\n-            }\n-            method = argv[i];\n-        }\n-    }\n-\n-    if (method.empty()) {\n+    const auto command = args.GetCommand();\n+    if (!command) {\n         tfm::format(std::cerr, \"No method provided. Run `bitcoin-wallet -help` for valid methods.\\n\");\n         return EXIT_FAILURE;\n     }\n+    if (command->args.size() != 0) {\n+        tfm::format(std::cerr, \"Error: Additional arguments provided (%s). Methods do not take arguments. Please refer to `-help`.\\n\", Join(command->args, \", \"));\n+        return EXIT_FAILURE;\n+    }\n \n     ECCVerifyHandle globalVerifyHandle;\n     ECC_Start();\n-    if (!WalletTool::ExecuteWalletToolFunc(args, method)) {\n+    if (!WalletTool::ExecuteWalletToolFunc(args, command->command)) {\n         return EXIT_FAILURE;\n     }\n     ECC_Stop();"
      },
      {
        "sha": "3621702e4584692ea1793842e1455cc2eda33bad",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa61b9d1a68820758f9540653920deaeae6abe79/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa61b9d1a68820758f9540653920deaeae6abe79/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=fa61b9d1a68820758f9540653920deaeae6abe79",
        "patch": "@@ -54,7 +54,7 @@ FUZZ_TARGET(system)\n                 if (args_manager.GetArgFlags(argument_name) != nullopt) {\n                     return;\n                 }\n-                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeIntegral<unsigned int>(), options_category);\n+                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND, options_category);\n             },\n             [&] {\n                 // Avoid hitting:"
      },
      {
        "sha": "9fe9d6741150072da864cf348e3101ea714a36ef",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 2,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa61b9d1a68820758f9540653920deaeae6abe79/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa61b9d1a68820758f9540653920deaeae6abe79/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=fa61b9d1a68820758f9540653920deaeae6abe79",
        "patch": "@@ -3,14 +3,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <sync.h>\n #include <util/system.h>\n \n #ifdef HAVE_BOOST_PROCESS\n #include <boost/process.hpp>\n #endif // HAVE_BOOST_PROCESS\n \n #include <chainparamsbase.h>\n+#include <sync.h>\n+#include <util/check.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n #include <util/translation.h>\n@@ -310,8 +311,22 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n             key[0] = '-';\n #endif\n \n-        if (key[0] != '-')\n+        if (key[0] != '-') {\n+            if (!m_accept_any_command && m_command.empty()) {\n+                // The first non-dash arg is a registered command\n+                Optional<unsigned int> flags = GetArgFlags(key);\n+                if (!flags || !(*flags & ArgsManager::COMMAND)) {\n+                    error = strprintf(\"Invalid command '%s'\", argv[i]);\n+                    return false;\n+                }\n+            }\n+            m_command.push_back(key);\n+            while (++i < argc) {\n+                // The remaining args are command args\n+                m_command.push_back(argv[i]);\n+            }\n             break;\n+        }\n \n         // Transform --foo to -foo\n         if (key.length() > 1 && key[1] == '-')\n@@ -359,6 +374,26 @@ Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n     return nullopt;\n }\n \n+std::optional<const ArgsManager::Command> ArgsManager::GetCommand() const\n+{\n+    Command ret;\n+    LOCK(cs_args);\n+    auto it = m_command.begin();\n+    if (it == m_command.end()) {\n+        // No command was passed\n+        return std::nullopt;\n+    }\n+    if (!m_accept_any_command) {\n+        // The registered command\n+        ret.command = *(it++);\n+    }\n+    while (it != m_command.end()) {\n+        // The unregistered command and args (if any)\n+        ret.args.push_back(*(it++));\n+    }\n+    return ret;\n+}\n+\n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n     std::vector<std::string> result;\n@@ -504,8 +539,22 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n     m_settings.forced_settings[SettingName(strArg)] = strValue;\n }\n \n+void ArgsManager::AddCommand(const std::string& cmd, const std::string& help, const OptionsCategory& cat)\n+{\n+    Assert(cmd.find('=') == std::string::npos);\n+    Assert(cmd.at(0) != '-');\n+\n+    LOCK(cs_args);\n+    m_accept_any_command = false; // latch to false\n+    std::map<std::string, Arg>& arg_map = m_available_args[cat];\n+    auto ret = arg_map.emplace(cmd, Arg{\"\", help, ArgsManager::COMMAND});\n+    Assert(ret.second); // Fail on duplicate commands\n+}\n+\n void ArgsManager::AddArg(const std::string& name, const std::string& help, unsigned int flags, const OptionsCategory& cat)\n {\n+    Assert((flags & ArgsManager::COMMAND) == 0); // use AddCommand\n+\n     // Split arg name from its help param\n     size_t eq_index = name.find('=');\n     if (eq_index == std::string::npos) {"
      },
      {
        "sha": "e8e1fab333828bb49c9faf686b76fc6d8c581b44",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa61b9d1a68820758f9540653920deaeae6abe79/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa61b9d1a68820758f9540653920deaeae6abe79/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=fa61b9d1a68820758f9540653920deaeae6abe79",
        "patch": "@@ -183,6 +183,7 @@ class ArgsManager\n         NETWORK_ONLY = 0x200,\n         // This argument's value is sensitive (such as a password).\n         SENSITIVE = 0x400,\n+        COMMAND = 0x800,\n     };\n \n protected:\n@@ -195,9 +196,11 @@ class ArgsManager\n \n     mutable RecursiveMutex cs_args;\n     util::Settings m_settings GUARDED_BY(cs_args);\n+    std::vector<std::string> m_command GUARDED_BY(cs_args);\n     std::string m_network GUARDED_BY(cs_args);\n     std::set<std::string> m_network_only_args GUARDED_BY(cs_args);\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n+    bool m_accept_any_command GUARDED_BY(cs_args){true};\n     std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n \n     [[nodiscard]] bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n@@ -248,6 +251,20 @@ class ArgsManager\n      */\n     const std::list<SectionInfo> GetUnrecognizedSections() const;\n \n+    struct Command {\n+        /** The command (if one has been registered with AddCommand), or empty */\n+        std::string command;\n+        /**\n+         * If command is non-empty: Any args that followed it\n+         * If command is empty: The unregistered command and any args that followed it\n+         */\n+        std::vector<std::string> args;\n+    };\n+    /**\n+     * Get the command and command args (returns std::nullopt if no command provided)\n+     */\n+    std::optional<const Command> GetCommand() const;\n+\n     /**\n      * Return a vector of strings of the given argument\n      *\n@@ -333,6 +350,11 @@ class ArgsManager\n      */\n     void AddArg(const std::string& name, const std::string& help, unsigned int flags, const OptionsCategory& cat);\n \n+    /**\n+     * Add subcommand\n+     */\n+    void AddCommand(const std::string& cmd, const std::string& help, const OptionsCategory& cat);\n+\n     /**\n      * Add many hidden arguments\n      */"
      },
      {
        "sha": "cca984b29271c5fc351adea478dc980eac52fc45",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa61b9d1a68820758f9540653920deaeae6abe79/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa61b9d1a68820758f9540653920deaeae6abe79/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=fa61b9d1a68820758f9540653920deaeae6abe79",
        "patch": "@@ -183,10 +183,10 @@ def do_tool_createfromdump(self, wallet_name, dumpfile, file_format=None):\n \n     def test_invalid_tool_commands_and_args(self):\n         self.log.info('Testing that various invalid commands raise with specific error messages')\n-        self.assert_raises_tool_error('Invalid command: foo', 'foo')\n+        self.assert_raises_tool_error(\"Error parsing command line arguments: Invalid command 'foo'\", 'foo')\n         # `bitcoin-wallet help` raises an error. Use `bitcoin-wallet -help`.\n-        self.assert_raises_tool_error('Invalid command: help', 'help')\n-        self.assert_raises_tool_error('Error: two methods provided (info and create). Only one method should be provided.', 'info', 'create')\n+        self.assert_raises_tool_error(\"Error parsing command line arguments: Invalid command 'help'\", 'help')\n+        self.assert_raises_tool_error('Error: Additional arguments provided (create). Methods do not take arguments. Please refer to `-help`.', 'info', 'create')\n         self.assert_raises_tool_error('Error parsing command line arguments: Invalid parameter -foo', '-foo')\n         self.assert_raises_tool_error('No method provided. Run `bitcoin-wallet -help` for valid methods.')\n         self.assert_raises_tool_error('Wallet name must be provided when creating a new wallet.', 'create')"
      }
    ]
  }
]