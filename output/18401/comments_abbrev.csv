DrahtBot,2020-03-22 10:39:34,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18071 (Refactoring CHashWriter & Get{Prevouts,Sequence,Outputs}Hash to SHA256 by JeremyRubin)\n* #17479 (Return BlockVali",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-602178488,602178488,
sipa,2020-03-26 00:20:37,"Concept ACK, of course.",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-604157411,604157411,
sipa,2020-03-28 01:18:12,"Code review ACK, post squash, and for 0.21.",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-605373777,605373777,
jnewbery,2020-03-28 03:06:53,Squashed commits. No code changes.,https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-605386019,605386019,
fjahr,2020-04-01 16:13:53,"Code-review ACK b409b611eb0fc6c71f107b5313ab79ecaf57f479\n\nAlso ran tests locally. ",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-607345424,607345424,
sipa,2020-04-01 21:20:30,"@jnewbery I guess this calls for splitting up CheckInputScripts into two separate functions (one looking up inputs and initializing txdata, and one doing the rest). I suggest keeping that for a future improvement, though.",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-607495449,607495449,
jnewbery,2020-04-01 21:31:53,"@sipa \n> ... this calls for splitting up CheckInputScripts...\n\nSounds sensible now that it has a potentially unexpected side-effect of initializing the txdata. I agree that we should save that for later.\n\nWould you prefer to leave the assert in this commit, or revert to not having it?",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-607500436,607500436,
sipa,2020-04-01 21:50:13,"> Would you prefer to leave the assert in this commit, or revert to not having it?\n\nNo opinion either way.",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-607507491,607507491,
MarcoFalke,2020-04-02 18:02:50,Does this speed up IBD?,https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-608015586,608015586,
sipa,2020-04-02 18:07:05,"@MarcoFalke Probably slightly, as it avoids constructing precomputed tx data in the assumevalid range.",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-608017924,608017924,
jnewbery,2020-04-12 01:33:11,Squashed commits,https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-612548298,612548298,
jonatack,2020-04-14 18:59:41,Re-ACK f63dec1  `git diff 851908d f63dec1` shows no change since last ACK.,https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-613623360,613623360,
jnewbery,2020-04-15 00:25:29,I think this should be ready for merge if @sipa @fjahr @theStack reACK.,https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-613746892,613746892,
sipa,2020-04-15 06:48:55,utACK f63dec189c3c8eee1ab2187681d5d0b2513b1b2e,https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-613850858,613850858,
theStack,2020-04-15 10:31:20,"re-ACK f63dec189c3c8eee1ab2187681d5d0b2513b1b2e\nVerified that since my last ACK only minor changes happened that didn't change the overall logic (s/ready/m_ready/, conditional call of `.Init()` method in `CheckInputScripts()`, minor reordering of conditions and added `assert()` in `.Init()`)",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-613957702,613957702,
jnewbery,2020-04-15 14:11:35,"> As far as I can tell, we're going to compute ""midstate"" even if validation fail before signature verification (like a script spending a coin already spent), instead of hashing-at-first-use ? (not sure if ternary in SignatureHash are currently exercised)\n\nNo. Coins checks are done in `MemPoolAccept::PreChecks()`, which is called before `PrecomputedTransactionData` is instantiated (both before",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-614064114,614064114,
fjahr,2020-04-15 14:42:58,"Re-ACK f63dec189c3c8eee1ab2187681d5d0b2513b1b2e\n\nOnly changes since my last ACK were minor improvements addressing review comments and squash of commits.",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-614081723,614081723,
ariard,2020-04-15 18:27:18,"> No. Coins checks are done in MemPoolAccept::PreChecks(), which is called before PrecomputedTransactionData is instantiated (both before and after this PR).\n\nCoin checks was just a (bad) example, you may have a `scriptpubkey` without any sigops or script may fail before first one.\n\n> Because those fields aren't hashed before going into the sighash message. hashPrevouts, hashSequence and h",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-614203687,614203687,
jnewbery,2020-04-15 18:55:54,"> Coin checks was just a (bad) example, you may have a scriptpubkey without any sigops or script may fail before first one.\n\nWe need the precomputed transaction data to be cached _before_ any script checking because in the ConnectBlock case, each input script validation is parallelized separately. If the cache was filled during script execution, you'd need locking between those threads to ensu",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-614219361,614219361,
ariard,2020-04-15 19:32:17,"> We need the precomputed transaction data to be cached before any script checking because in the ConnectBlock case\n\nRight but not in the mempool case. Thanks for answer, will update comment with this insight in a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-614237752,614237752,
MarcoFalke,2020-04-24 14:40:36,"I did some more benchmarking and this should speed up CreateNewBlock by a factor inversely related to the number of transactions in the block.\n\nSo a block with one transaction (beside the coinbase tx) should be generated about twice as fast. Whereas a block with 1000 txs (beside the coinbase tx) should be generated at a slight but almost no speedup.",https://github.com/bitcoin/bitcoin/pull/18401#issuecomment-619052277,619052277,
promag,2020-03-22 23:21:23,"nit, above could do `std::vector<PrecomputedTransactionData> txdata{block.vtx.size()};` and remove this,",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r396158493,396158493,src/validation.cpp
promag,2020-03-22 23:49:13,"nit, early return in L1284 `if (ready) return;`?",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r396162129,396162129,src/script/interpreter.cpp
jnewbery,2020-03-23 17:37:49,"Done, and expanded the comment on why this vector is necessary.",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r396633566,396633566,src/validation.cpp
jnewbery,2020-03-23 17:57:19,"The later commits in 17977 can't return early, because we may need to cache the hash of the amounts spent in this transaction (see https://github.com/bitcoin/bitcoin/pull/17977/commits/607843e0e1e8e09f11192e6489ecb22b6acdae79#diff-be2905e2f5218ecdbe4e55637dac75f3R1308). However, I think we can return early for non-witness transactions, so I've implemented that.",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r396646585,396646585,src/script/interpreter.cpp
sipa,2020-03-25 22:27:28,"For now that's ok, but https://github.com/bitcoin/bitcoin/pull/17977/commits/dd0622b8e2f8a324fdf73eb476f136ee556f3e68 relies on storing the spent UTXOs in txdata, even for non-witness outputs (it makes validation use the scriptPubKeys from there, to avoid duplicating them).",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r398208486,398208486,src/script/interpreter.cpp
jnewbery,2020-03-25 22:39:56,"I think the function can be re-ordered to first store the spent UTXOs for all transactions, and then do the witness-specific logic later (and exit early for non-witness txs).",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r398214147,398214147,src/script/interpreter.cpp
sipa,2020-03-26 00:18:44,Sure; just clarifying why it wasn't done in the original commit. This is a triviality that can always be changed.,https://github.com/bitcoin/bitcoin/pull/18401#discussion_r398247542,398247542,src/script/interpreter.cpp
sipa,2020-03-26 00:20:20,"Supernit: `ready` is faster to check than `HasWitness`, so maybe you want it first (or check `HasWitness`) inside the `!ready` branch.",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r398248050,398248050,src/script/interpreter.cpp
jnewbery,2020-03-26 14:44:44,"My preferred form after taproot would be:\n\n```\ntemplate <class T>\nvoid PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n{\n    // Save spent outputs for all transactions (not just those with witnesses)\n    if (m_spent_outputs.empty()) m_spent_outputs = std::move(spent_outputs);\n\n    // Transactions without witnesses don't need a cache\n    if (!t",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r398628790,398628790,src/script/interpreter.cpp
sipa,2020-03-26 18:05:00,"Heh, I missed this comment, and made this exact change just now in the taproot branch (except a comment).",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r398782711,398782711,src/script/interpreter.cpp
instagibbs,2020-04-01 14:18:42,"while we're touching this code can we make `ready` be something more self-explanatory? Especially if we're expanding condition checks in the future. e.g., `m_amounts_spent_ready`",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401651400,401651400,src/script/interpreter.cpp
jonatack,2020-04-01 17:21:40,"Suggestion here or for a follow-up: write and use the word `control` here in a way that indicates more clearly that it's not just the word ""control"".",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401782364,401782364,src/validation.cpp
instagibbs,2020-04-01 17:35:54,small bonus is that precompute data isn't computed unless `fScriptChecks` is true,https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401791139,401791139,src/validation.cpp
instagibbs,2020-04-01 17:40:35,I think we should keep around the note not to have create any new allocations to avoid pointer invalidation.,https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401793948,401793948,src/validation.cpp
jonatack,2020-04-01 18:04:05,"> I think we should keep around the note not to have create any new allocations to avoid pointer invalidation.\n\nSeconded.",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401808139,401808139,src/validation.cpp
sipa,2020-04-01 18:05:09,"Oh, that's great. I never realized that.",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401808755,401808755,src/validation.cpp
jkczyz,2020-04-01 18:11:25,"This interface allows for (mistakenly) calling `Init` on the same object with different inputs. i.e., once `ready` is set, any further calls to `Init` would be a no-op (at least in this commit). So it leaves open the potential for misuse. Could we design the interface in such away that makes this impossible?",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401812158,401812158,src/script/interpreter.cpp
sipa,2020-04-01 18:14:40,Maybe assert fail when you're trying to re-Init?,https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401814025,401814025,src/script/interpreter.cpp
instagibbs,2020-04-01 18:19:59,"alternative is to simply use a C array or heap-based `std::unique_ptr<PrecomputedTransactionData[]> txsdata(new PrecomputedTransactionData[block.vtx.size()]);`? One less footgun maybe?\n",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401817201,401817201,src/validation.cpp
jnewbery,2020-04-01 19:57:13,That is a nice bonus. That's millions of hashes saved over the course of an IBD. Not sure how meaningful that is.,https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401872749,401872749,src/validation.cpp
instagibbs,2020-04-01 19:58:38,freebie is free,https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401873578,401873578,src/validation.cpp
jnewbery,2020-04-01 20:03:15,"This, plus the discussion here: https://github.com/bitcoin/bitcoin/pull/18401/files#r401812158 has made me think that there shouldn't be two different ready bools in the final taproot implementation, since we only ever want to initialize the object once. I've changed this to `m_ready` and made some minor changes to the `Init` function.",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401876047,401876047,src/script/interpreter.cpp
jnewbery,2020-04-01 20:03:43,Added backticks to it's more obviously referring to the code.,https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401876281,401876281,src/validation.cpp
jnewbery,2020-04-01 20:04:29,I'll just update the comment for now.,https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401876719,401876719,src/validation.cpp
jkczyz,2020-04-01 20:42:25,Could the vector be removed entirely if `CScriptCheck` owned the `PrecomputedTransactionData` rather than taking a pointer?,https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401896789,401896789,src/validation.cpp
jnewbery,2020-04-01 20:47:51,Done,https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401899649,401899649,src/script/interpreter.cpp
instagibbs,2020-04-01 20:51:38,"@jkczyz let's punt on changing ownership for a future PR, discuss offline maybe",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401901579,401901579,src/validation.cpp
sipa,2020-04-01 20:52:16,"That could work, but it'd need something like a shared_ptr (there is one PrecomputedTransactionData per *transaction*, but a CScriptCheck per *txin*). So I think that's perhaps an unreasonable overhead.",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401901913,401901913,src/validation.cpp
jnewbery,2020-04-01 20:54:50,"@jkczyz - that was my first thought when I started looking into this, but my conclusion was also to punt :)",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401903277,401903277,src/validation.cpp
jkczyz,2020-04-01 20:55:15,@sipa Was this suppose to be in response to https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401896789?,https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401903508,401903508,src/validation.cpp
sipa,2020-04-01 21:07:21,"Oops, yes.",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401909983,401909983,src/validation.cpp
jkczyz,2020-04-01 21:24:55,"SGTM\n\nFor posterity, see https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401901913 by @sipa for why this might be not that simple.",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401918783,401918783,src/validation.cpp
vasild,2020-04-02 09:01:06,"Why move `m_ready = true;` outside of the `if`? This makes it possible to end up in a weird state where `m_ready` is `true`, but the member variables are not initialized (if `txTo.HasWitness()` is `false`).",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r402158973,402158973,src/script/interpreter.cpp
jnewbery,2020-04-02 13:51:06,"Because `m_ready` now means 'is this object initialized' (see conversation at https://github.com/bitcoin/bitcoin/pull/18401#discussion_r401812158). A future commit in #17977 changes `PrecomputedTransactionData` to store data even for non-segwit transactions (https://github.com/bitcoin/bitcoin/pull/17977/commits/6dcc85e3347fe8a0c5e3e578176fd38fa093df39), so `m_ready` would need to be set outside th",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r402328905,402328905,src/script/interpreter.cpp
jonatack,2020-04-02 17:18:19,"Verified that bitcoind and tests abort on the assert sans the new conditional.\n```\nbitcoind: script/interpreter.cpp:1284: void PrecomputedTransactionData::Init(const T&)\n                                       [with T = CTransaction]: Assertion `!m_ready' failed.\nAborted\n```",https://github.com/bitcoin/bitcoin/pull/18401#discussion_r402478696,402478696,src/validation.cpp
