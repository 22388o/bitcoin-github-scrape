madars,2021-10-26 22:31:05,"Could you PR the benchmark used for this? It would be interesting to compare it with bit-twiddling approaches; e.g. g++/clang will SSE-vectorize code that uses something like\n```\n    *it++ = ((v >> 4) < 10 ? '0' + (v >> 4) : 'a' + (v >> 4) - 10);\n    *it++ = ((v & 0xF) < 10 ? '0' + (v & 0xF) : 'a' + (v & 0xF) - 10);\n```\n(I'm clearly assuming ASCII here, but so does the current implementa",https://github.com/bitcoin/bitcoin/pull/23364#issuecomment-952378024,952378024,
sipa,2021-10-26 22:32:27,"I'm not entirely sure, but my intuition says that accessing a char array through a uint16_t pointer is undefined behavior.",https://github.com/bitcoin/bitcoin/pull/23364#issuecomment-952378664,952378664,
denis2342,2021-10-26 23:29:52,"> Could you PR the benchmark used for this? It would be interesting to compare it with bit-twiddling approaches; e.g. g++/clang will SSE-vectorize code that uses something like\n> \n> ```\n>     *it++ = ((v >> 4) < 10 ? '0' + (v >> 4) : 'a' + (v >> 4) - 10);\n>     *it++ = ((v & 0xF) < 10 ? '0' + (v & 0xF) : 'a' + (v & 0xF) - 10);\n> ```\n> \n> (I'm clearly assuming ASCII here, but so does ",https://github.com/bitcoin/bitcoin/pull/23364#issuecomment-952407624,952407624,
denis2342,2021-10-27 00:46:54,"> Could you PR the benchmark used for this?\n\nThe times from the commit log where measured with a clock_gettime(CLOCK_MONOTONIC_RAW) in the test. To be sure I patched roc/blockchain.cpp to measure the getblock non verbose call. For a 1.6MB block (706,813 ) unpatched it needed 1.7ms average and 1.2ms average with the new code.",https://github.com/bitcoin/bitcoin/pull/23364#issuecomment-952441807,952441807,
theuni,2021-10-27 02:08:09,"> modifying is undefined behavior.\n\n`memcpy` would make this defined while still likely aggressively optimized by a modern compiler, no?",https://github.com/bitcoin/bitcoin/pull/23364#issuecomment-952474285,952474285,
laanwj,2021-10-27 06:31:41,"Thanks for your contribution. However, from a risk perspective I'd prefer to keep this function as is instead of push boundaries on C++ undefined behavior here. Sorry (I also don't think particular improvements in micro-benchmarks here are as important to the big picture.)\n\nEdit: the test is very welcome though!",https://github.com/bitcoin/bitcoin/pull/23364#issuecomment-952584167,952584167,
martinus,2021-10-27 07:17:36,"I've run the benchmark `BlockToJsonVerbose` on this and master on my CPU. Just for interest I also tried the non-lookuptable version from @madars, and a fixed variant that shouldn't have any alignment issues:\n\n```cpp\nstd::string HexStr(const Span<const uint8_t> s)\n{\n    std::string rv(s.size() * 2, '\0');\n    static const char* hexmap =\n        ""000102030405060708090a0b0c0d0e0f101112",https://github.com/bitcoin/bitcoin/pull/23364#issuecomment-952610764,952610764,
denis2342,2021-10-27 09:43:45,"BlockToJsonVerbose tests a lot of code which is not part of this PR. Maybe there should be a benchmark which is more like getblock(). I made a benchmark like this:\n\n```\nstatic void BlockToHex(benchmark::Bench& bench)\n{\n    TestBlockAndIndex data;\n    CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n    ssBlock << data.block;\n    bench.run([&] {\n        auto univalue = HexStr(s",https://github.com/bitcoin/bitcoin/pull/23364#issuecomment-952736550,952736550,
martinus,2021-10-27 11:50:41,"@denis2342 Ah, I didn't know that full blocks are also converted to hex. Makes sense to add a benchmark for that.",https://github.com/bitcoin/bitcoin/pull/23364#issuecomment-952843089,952843089,
laanwj,2021-11-26 15:59:36,"> memcpy would make this defined while still likely aggressively optimized by a modern compiler, no?\n\nWe can try this, at least it would help move this forward. As it is now it cannot be merged.",https://github.com/bitcoin/bitcoin/pull/23364#issuecomment-980075962,980075962,
laanwj,2021-10-27 06:34:25,Please don't do this. You can't assume `.data()` is 16-bit aligned.,https://github.com/bitcoin/bitcoin/pull/23364#discussion_r737146888,737146888,src/util/strencodings.cpp
