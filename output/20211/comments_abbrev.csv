practicalswift,2020-10-21 12:48:57,"Concept ACK: `-Wswitch` is good, and termination via `assert(false);` is better than UB :)\n\nFrom the standard: ""Flowing off the end of a function is equivalent to a return with no value; this results in undefined behavior in a value-returning function."" (C++11,  [stmt.return])\n",https://github.com/bitcoin/bitcoin/pull/20211#issuecomment-713544637,713544637,
jonatack,2020-10-21 18:49:43,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20211#issuecomment-713800218,713800218,
hebasto,2020-11-12 15:14:20,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20211#issuecomment-726140180,726140180,
DrahtBot,2020-11-21 05:36:11,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20286 (rpc: deprecate `addresses` and `reqSigs` from rpc outputs by mjdietzx)\n\nIf you consider this pull request import",https://github.com/bitcoin/bitcoin/pull/20211#issuecomment-731512528,731512528,
MarcoFalke,2020-11-23 16:48:03,"> We do switch (dest.which()) { in a few places as well. This seems pretty similar, and I'm wondering if this should be refactored as well? (Probably in a different PR though?)\n\nWhat do you suggest? `which` decays the `enum class` into an integer. The compiler can't do `-Wswitch` static analysis on those switch statements.",https://github.com/bitcoin/bitcoin/pull/20211#issuecomment-732284198,732284198,
mjdietzx,2020-11-23 18:18:59,"Well once we have (would require https://github.com/bitcoin/bitcoin/pull/20286):\n\n```c++\nbool ExtractDestination(const CScript& scriptPubKey, TxoutType& typeRet, CTxDestination& addressRet);\n```\n\nCould we do something like:\n```c++\nTxoutType type;\nCTxDestination dest;\nExtractDestination(m_script, type, dest);\nswitch (type) {\ncase TxoutType::PUBKEYHASH:\ncase TxoutType::SCRI",https://github.com/bitcoin/bitcoin/pull/20211#issuecomment-732339151,732339151,
MarcoFalke,2020-11-23 18:22:51,"> would require #20286\n\nLet's discuss this in the other pull then",https://github.com/bitcoin/bitcoin/pull/20211#issuecomment-732341339,732341339,
practicalswift,2021-02-11 08:55:18,cr ACK fa650ca7f19307a9237e64ac311488c8947fc12a: patch looks correct and `assert(false);` is better than UB :),https://github.com/bitcoin/bitcoin/pull/20211#issuecomment-777288744,777288744,
hebasto,2020-11-12 15:24:58,"I understand that RPC code shouldn't terminate the server regardless of user's input. But `TxoutType` is an `enum class`, and its set of values does not depend on user's input. Therefore, I think the usual `assert(false);` should be used here.",https://github.com/bitcoin/bitcoin/pull/20211#discussion_r522190271,522190271,src/wallet/rpcdump.cpp
MarcoFalke,2020-11-12 15:51:05,"What is the difference in practise? This is dead code either way, so it doesn't matter what it does as long as it ensures that the function doesn't return normally when the dead code is executed (for whatever reason).",https://github.com/bitcoin/bitcoin/pull/20211#discussion_r522211211,522211211,src/wallet/rpcdump.cpp
hebasto,2020-11-12 15:56:37,The only difference is a uniform approach through the repo.,https://github.com/bitcoin/bitcoin/pull/20211#discussion_r522215520,522215520,src/wallet/rpcdump.cpp
MarcoFalke,2020-11-12 16:21:23,The rpc code has a linter to check for a uniform `CHECK_NONFATAL` in all rpc code ;),https://github.com/bitcoin/bitcoin/pull/20211#discussion_r522234994,522234994,src/wallet/rpcdump.cpp
