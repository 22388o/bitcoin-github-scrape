[
  {
    "sha": "4a85e067502a5df340e1b8c49df21e4c30a0de68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTg1ZTA2NzUwMmE1ZGYzNDBlMWI4YzQ5ZGYyMWU0YzMwYTBkZTY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-08T14:26:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-09T07:44:57Z"
      },
      "message": "Allow mining RPCs with --disable-wallet\n\nThe following mining-related RPC calls don't use the wallet:\n\n- getnetworkhashps\n- getmininginfo\n- getblocktemplate\n- submitblock\n\nEnable them when compiling with --disable-wallet.",
      "tree": {
        "sha": "e036991e5f02c9d5017e9230cceace4433f1d297",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e036991e5f02c9d5017e9230cceace4433f1d297"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a85e067502a5df340e1b8c49df21e4c30a0de68",
      "comment_count": 3,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a85e067502a5df340e1b8c49df21e4c30a0de68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a85e067502a5df340e1b8c49df21e4c30a0de68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a85e067502a5df340e1b8c49df21e4c30a0de68/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70370ae502df8756f3a067a00ccd61b9fc819581",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70370ae502df8756f3a067a00ccd61b9fc819581",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70370ae502df8756f3a067a00ccd61b9fc819581"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 44,
      "deletions": 20
    },
    "files": [
      {
        "sha": "6cf88edffbd25a01bebfd71fc68c528ac1183a03",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a85e067502a5df340e1b8c49df21e4c30a0de68/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a85e067502a5df340e1b8c49df21e4c30a0de68/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=4a85e067502a5df340e1b8c49df21e4c30a0de68",
        "patch": "@@ -187,3 +187,7 @@ disable-wallet mode with:\n     ./configure --disable-wallet\n \n In this case there is no dependency on Berkeley DB 4.8.\n+\n+Mining is also possible in disable-wallet mode, but only using the `getblocktemplate` RPC\n+call not `getwork`.\n+"
      },
      {
        "sha": "62dd63abef2f0d0875692da7a9e9c0024d88daee",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a85e067502a5df340e1b8c49df21e4c30a0de68/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a85e067502a5df340e1b8c49df21e4c30a0de68/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4a85e067502a5df340e1b8c49df21e4c30a0de68",
        "patch": "@@ -48,9 +48,11 @@ libbitcoin_server_a_SOURCES = \\\n   keystore.cpp \\\n   leveldbwrapper.cpp \\\n   main.cpp \\\n+  miner.cpp \\\n   net.cpp \\\n   noui.cpp \\\n   rpcblockchain.cpp \\\n+  rpcmining.cpp \\\n   rpcnet.cpp \\\n   rpcrawtransaction.cpp \\\n   txdb.cpp \\\n@@ -61,9 +63,7 @@ libbitcoin_server_a_SOURCES = \\\n libbitcoin_wallet_a_SOURCES = \\\n   db.cpp \\\n   crypter.cpp \\\n-  miner.cpp \\\n   rpcdump.cpp \\\n-  rpcmining.cpp \\\n   rpcwallet.cpp \\\n   wallet.cpp \\\n   walletdb.cpp \\"
      },
      {
        "sha": "f4424b6ba5fa2b1243f751df28a55aa4fed5015c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a85e067502a5df340e1b8c49df21e4c30a0de68/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a85e067502a5df340e1b8c49df21e4c30a0de68/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4a85e067502a5df340e1b8c49df21e4c30a0de68",
        "patch": "@@ -113,8 +113,8 @@ void Shutdown()\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n     StopRPCThreads();\n-#ifdef ENABLE_WALLET\n     ShutdownRPCMining();\n+#ifdef ENABLE_WALLET\n     if (pwalletMain)\n         bitdb.Flush(false);\n     GenerateBitcoins(false, NULL, 0);\n@@ -1041,10 +1041,8 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n #endif\n \n     StartNode(threadGroup);\n-#ifdef ENABLE_WALLET\n     // InitRPCMining is needed here so getwork/getblocktemplate in the GUI debug console works properly.\n     InitRPCMining();\n-#endif\n     if (fServer)\n         StartRPCThreads();\n "
      },
      {
        "sha": "384ebd27cf659b26685b5523ad9c6d73cbf6202f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a85e067502a5df340e1b8c49df21e4c30a0de68/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a85e067502a5df340e1b8c49df21e4c30a0de68/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4a85e067502a5df340e1b8c49df21e4c30a0de68",
        "patch": "@@ -10,8 +10,11 @@\n #include \"net.h\"\n #include \"wallet.h\"\n \n+#ifdef ENABLE_WALLET\n+// These globals are only used by the built-in miner\n double dHashesPerSec = 0.0;\n int64_t nHPSTimerStart = 0;\n+#endif\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -381,6 +384,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     return pblocktemplate.release();\n }\n \n+#ifdef ENABLE_WALLET\n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n {\n     CPubKey pubkey;\n@@ -390,6 +394,7 @@ CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n     CScript scriptPubKey = CScript() << pubkey << OP_CHECKSIG;\n     return CreateNewBlock(scriptPubKey);\n }\n+#endif\n \n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n@@ -454,7 +459,7 @@ void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash\n     memcpy(phash1, &tmp.hash1, 64);\n }\n \n-\n+#ifdef ENABLE_WALLET\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n {\n     uint256 hash = pblock->GetHash();\n@@ -665,5 +670,5 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n         minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet));\n }\n \n-\n+#endif\n "
      },
      {
        "sha": "b81433120ed875dc74e6db9cd2ce2b566ddc6149",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a85e067502a5df340e1b8c49df21e4c30a0de68/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a85e067502a5df340e1b8c49df21e4c30a0de68/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=4a85e067502a5df340e1b8c49df21e4c30a0de68",
        "patch": "@@ -20,7 +20,8 @@\n using namespace json_spirit;\n using namespace std;\n \n-// Key used by getwork/getblocktemplate miners.\n+#ifdef ENABLE_WALLET\n+// Key used by getwork miners.\n // Allocated in InitRPCMining, free'd in ShutdownRPCMining\n static CReserveKey* pMiningKey = NULL;\n \n@@ -40,6 +41,14 @@ void ShutdownRPCMining()\n \n     delete pMiningKey; pMiningKey = NULL;\n }\n+#else\n+void InitRPCMining()\n+{\n+}\n+void ShutdownRPCMining()\n+{\n+}\n+#endif\n \n // Return average network hashes per second based on the last 'lookup' blocks,\n // or from the last difficulty change if 'lookup' is nonpositive.\n@@ -99,7 +108,7 @@ Value getnetworkhashps(const Array& params, bool fHelp)\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n-\n+#ifdef ENABLE_WALLET\n Value getgenerate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -197,7 +206,6 @@ Value setgenerate(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n-\n Value gethashespersec(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -216,6 +224,7 @@ Value gethashespersec(const Array& params, bool fHelp)\n         return (boost::int64_t)0;\n     return (boost::int64_t)dHashesPerSec;\n }\n+#endif\n \n \n Value getmininginfo(const Array& params, bool fHelp)\n@@ -248,16 +257,19 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"generate\",         getgenerate(params, false)));\n     obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n-    obj.push_back(Pair(\"hashespersec\",     gethashespersec(params, false)));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          TestNet()));\n+#ifdef ENABLE_WALLET\n+    obj.push_back(Pair(\"generate\",         getgenerate(params, false)));\n+    obj.push_back(Pair(\"hashespersec\",     gethashespersec(params, false)));\n+#endif\n     return obj;\n }\n \n \n+#ifdef ENABLE_WALLET\n Value getwork(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n@@ -381,7 +393,7 @@ Value getwork(const Array& params, bool fHelp)\n         return CheckWork(pblock, *pwalletMain, *pMiningKey);\n     }\n }\n-\n+#endif\n \n Value getblocktemplate(const Array& params, bool fHelp)\n {"
      },
      {
        "sha": "c95f450c8292b1a33555816e440c35fe9545a609",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a85e067502a5df340e1b8c49df21e4c30a0de68/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a85e067502a5df340e1b8c49df21e4c30a0de68/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=4a85e067502a5df340e1b8c49df21e4c30a0de68",
        "patch": "@@ -248,12 +248,14 @@ static const CRPCCommand vRPCCommands[] =\n     { \"gettxout\",               &gettxout,               true,      false,      false },\n     { \"verifychain\",            &verifychain,            true,      false,      false },\n \n-#ifdef ENABLE_WALLET\n+    /* Mining */\n     { \"getnetworkhashps\",       &getnetworkhashps,       true,      false,      false },\n-    { \"getgenerate\",            &getgenerate,            true,      false,      false },\n-    { \"setgenerate\",            &setgenerate,            true,      true,       false },\n-    { \"gethashespersec\",        &gethashespersec,        true,      false,      false },\n     { \"getmininginfo\",          &getmininginfo,          true,      false,      false },\n+    { \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },\n+    { \"submitblock\",            &submitblock,            false,     false,      false },\n+\n+#ifdef ENABLE_WALLET\n+    /* Wallet */\n     { \"getnewaddress\",          &getnewaddress,          true,      false,      true },\n     { \"getaccountaddress\",      &getaccountaddress,      true,      false,      true },\n     { \"getrawchangeaddress\",    &getrawchangeaddress,    true,      false,      true },\n@@ -283,10 +285,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listaddressgroupings\",   &listaddressgroupings,   false,     false,      true },\n     { \"signmessage\",            &signmessage,            false,     false,      true },\n     { \"verifymessage\",          &verifymessage,          false,     false,      false },\n-    { \"getwork\",                &getwork,                true,      false,      true },\n     { \"listaccounts\",           &listaccounts,           false,     false,      true },\n-    { \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },\n-    { \"submitblock\",            &submitblock,            false,     false,      false },\n     { \"listsinceblock\",         &listsinceblock,         false,     false,      true },\n     { \"dumpprivkey\",            &dumpprivkey,            true,      false,      true },\n     { \"dumpwallet\",             &dumpwallet,             true,      false,      true },\n@@ -295,6 +294,12 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listunspent\",            &listunspent,            false,     false,      true },\n     { \"lockunspent\",            &lockunspent,            false,     false,      true },\n     { \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n+\n+    /* Wallet-enabled mining */\n+    { \"getgenerate\",            &getgenerate,            true,      false,      false },\n+    { \"setgenerate\",            &setgenerate,            true,      true,       false },\n+    { \"gethashespersec\",        &gethashespersec,        true,      false,      false },\n+    { \"getwork\",                &getwork,                true,      false,      true },\n #endif // ENABLE_WALLET\n };\n "
      }
    ]
  },
  {
    "sha": "acfa03337e8224ef778d4a5b2177271611f74593",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2ZhMDMzMzdlODIyNGVmNzc4ZDRhNWIyMTc3MjcxNjExZjc0NTkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-09T07:55:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-09T07:55:56Z"
      },
      "message": "Move internal miner functionality together",
      "tree": {
        "sha": "40972f13b08f7435bb291e4707cbf90eea76d7ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40972f13b08f7435bb291e4707cbf90eea76d7ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acfa03337e8224ef778d4a5b2177271611f74593",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acfa03337e8224ef778d4a5b2177271611f74593",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acfa03337e8224ef778d4a5b2177271611f74593",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acfa03337e8224ef778d4a5b2177271611f74593/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a85e067502a5df340e1b8c49df21e4c30a0de68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a85e067502a5df340e1b8c49df21e4c30a0de68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a85e067502a5df340e1b8c49df21e4c30a0de68"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 52,
      "deletions": 53
    },
    "files": [
      {
        "sha": "49f6ec6b957db05e23efe7a710531c473dae198d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 53,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acfa03337e8224ef778d4a5b2177271611f74593/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acfa03337e8224ef778d4a5b2177271611f74593/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=acfa03337e8224ef778d4a5b2177271611f74593",
        "patch": "@@ -10,12 +10,6 @@\n #include \"net.h\"\n #include \"wallet.h\"\n \n-#ifdef ENABLE_WALLET\n-// These globals are only used by the built-in miner\n-double dHashesPerSec = 0.0;\n-int64_t nHPSTimerStart = 0;\n-#endif\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // BitcoinMiner\n@@ -57,41 +51,6 @@ void SHA256Transform(void* pstate, void* pinput, const void* pinit)\n         ((uint32_t*)pstate)[i] = ctx.h[i];\n }\n \n-//\n-// ScanHash scans nonces looking for a hash with at least some zero bits.\n-// It operates on big endian data.  Caller does the byte reversing.\n-// All input buffers are 16-byte aligned.  nNonce is usually preserved\n-// between calls, but periodically or if nNonce is 0xffff0000 or above,\n-// the block is rebuilt and nNonce starts over at zero.\n-//\n-unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)\n-{\n-    unsigned int& nNonce = *(unsigned int*)(pdata + 12);\n-    for (;;)\n-    {\n-        // Crypto++ SHA256\n-        // Hash pdata using pmidstate as the starting state into\n-        // pre-formatted buffer phash1, then hash phash1 into phash\n-        nNonce++;\n-        SHA256Transform(phash1, pdata, pmidstate);\n-        SHA256Transform(phash, phash1, pSHA256InitState);\n-\n-        // Return the nonce if the hash has at least some zero bits,\n-        // caller will check if it has enough to reach the target\n-        if (((unsigned short*)phash)[14] == 0)\n-            return nNonce;\n-\n-        // If nothing found after trying for a while, return -1\n-        if ((nNonce & 0xffff) == 0)\n-        {\n-            nHashesDone = 0xffff+1;\n-            return (unsigned int) -1;\n-        }\n-        if ((nNonce & 0xfff) == 0)\n-            boost::this_thread::interruption_point();\n-    }\n-}\n-\n // Some explaining would be appreciated\n class COrphan\n {\n@@ -384,18 +343,6 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     return pblocktemplate.release();\n }\n \n-#ifdef ENABLE_WALLET\n-CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n-{\n-    CPubKey pubkey;\n-    if (!reservekey.GetReservedKey(pubkey))\n-        return NULL;\n-\n-    CScript scriptPubKey = CScript() << pubkey << OP_CHECKSIG;\n-    return CreateNewBlock(scriptPubKey);\n-}\n-#endif\n-\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n@@ -460,6 +407,58 @@ void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash\n }\n \n #ifdef ENABLE_WALLET\n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// Internal miner\n+//\n+double dHashesPerSec = 0.0;\n+int64_t nHPSTimerStart = 0;\n+\n+//\n+// ScanHash scans nonces looking for a hash with at least some zero bits.\n+// It operates on big endian data.  Caller does the byte reversing.\n+// All input buffers are 16-byte aligned.  nNonce is usually preserved\n+// between calls, but periodically or if nNonce is 0xffff0000 or above,\n+// the block is rebuilt and nNonce starts over at zero.\n+//\n+unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)\n+{\n+    unsigned int& nNonce = *(unsigned int*)(pdata + 12);\n+    for (;;)\n+    {\n+        // Crypto++ SHA256\n+        // Hash pdata using pmidstate as the starting state into\n+        // pre-formatted buffer phash1, then hash phash1 into phash\n+        nNonce++;\n+        SHA256Transform(phash1, pdata, pmidstate);\n+        SHA256Transform(phash, phash1, pSHA256InitState);\n+\n+        // Return the nonce if the hash has at least some zero bits,\n+        // caller will check if it has enough to reach the target\n+        if (((unsigned short*)phash)[14] == 0)\n+            return nNonce;\n+\n+        // If nothing found after trying for a while, return -1\n+        if ((nNonce & 0xffff) == 0)\n+        {\n+            nHashesDone = 0xffff+1;\n+            return (unsigned int) -1;\n+        }\n+        if ((nNonce & 0xfff) == 0)\n+            boost::this_thread::interruption_point();\n+    }\n+}\n+\n+CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n+{\n+    CPubKey pubkey;\n+    if (!reservekey.GetReservedKey(pubkey))\n+        return NULL;\n+\n+    CScript scriptPubKey = CScript() << pubkey << OP_CHECKSIG;\n+    return CreateNewBlock(scriptPubKey);\n+}\n+\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n {\n     uint256 hash = pblock->GetHash();"
      }
    ]
  },
  {
    "sha": "fbc7a96d03200e55021c9e04f7fa9114272e6960",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmM3YTk2ZDAzMjAwZTU1MDIxYzllMDRmN2ZhOTExNDI3MmU2OTYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-09T08:22:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-09T08:25:10Z"
      },
      "message": "Re-enable miner tests in --disable-wallet mode\n\nUse a fixed script instead of a CReserveKey from the wallet.\nThis does not affect the functionality or result of the tests as they never\ncheck the state of the wallet in the first place.",
      "tree": {
        "sha": "fd313e48fab02e44a5e1aed20f086bb8caf09b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd313e48fab02e44a5e1aed20f086bb8caf09b3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbc7a96d03200e55021c9e04f7fa9114272e6960",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc7a96d03200e55021c9e04f7fa9114272e6960",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbc7a96d03200e55021c9e04f7fa9114272e6960",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc7a96d03200e55021c9e04f7fa9114272e6960/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acfa03337e8224ef778d4a5b2177271611f74593",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acfa03337e8224ef778d4a5b2177271611f74593",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acfa03337e8224ef778d4a5b2177271611f74593"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 14,
      "deletions": 15
    },
    "files": [
      {
        "sha": "ccc8da1690e39458b5bd24a0a2a8913e83d078cf",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc7a96d03200e55021c9e04f7fa9114272e6960/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc7a96d03200e55021c9e04f7fa9114272e6960/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=fbc7a96d03200e55021c9e04f7fa9114272e6960",
        "patch": "@@ -31,14 +31,14 @@ test_bitcoin_SOURCES = alert_tests.cpp \\\n   allocator_tests.cpp base32_tests.cpp base58_tests.cpp base64_tests.cpp \\\n   bignum_tests.cpp bloom_tests.cpp canonical_tests.cpp checkblock_tests.cpp \\\n   Checkpoints_tests.cpp compress_tests.cpp DoS_tests.cpp getarg_tests.cpp \\\n-  key_tests.cpp mruset_tests.cpp multisig_tests.cpp \\\n+  key_tests.cpp miner_tests.cpp mruset_tests.cpp multisig_tests.cpp \\\n   netbase_tests.cpp pmt_tests.cpp rpc_tests.cpp script_P2SH_tests.cpp \\\n   script_tests.cpp serialize_tests.cpp sigopcount_tests.cpp test_bitcoin.cpp \\\n   transaction_tests.cpp uint160_tests.cpp uint256_tests.cpp util_tests.cpp \\\n   sighash_tests.cpp $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n \n if ENABLE_WALLET\n-test_bitcoin_SOURCES += accounting_tests.cpp wallet_tests.cpp miner_tests.cpp rpc_wallet_tests.cpp\n+test_bitcoin_SOURCES += accounting_tests.cpp wallet_tests.cpp rpc_wallet_tests.cpp\n endif\n \n nodist_test_bitcoin_SOURCES = $(BUILT_SOURCES)"
      },
      {
        "sha": "ea6abb7e9afc2771612a1bbdcb5b04c8a5ff447e",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc7a96d03200e55021c9e04f7fa9114272e6960/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc7a96d03200e55021c9e04f7fa9114272e6960/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=fbc7a96d03200e55021c9e04f7fa9114272e6960",
        "patch": "@@ -8,7 +8,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-extern CWallet* pwalletMain;\n extern void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n \n BOOST_AUTO_TEST_SUITE(miner_tests)\n@@ -51,7 +50,7 @@ struct {\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n-    CReserveKey reservekey(pwalletMain);\n+    CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;\n     CTransaction tx;\n     CScript script;\n@@ -60,7 +59,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     LOCK(cs_main);\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n@@ -86,7 +85,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     delete pblocktemplate;\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n \n     // block sigops > limit: 1000 CHECKMULTISIG + 1\n@@ -104,7 +103,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -124,14 +123,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // orphan in mempool\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -149,7 +148,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -160,7 +159,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -178,7 +177,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -192,17 +191,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // subsidy changing\n     int nHeight = chainActive.Height();\n     chainActive.Tip()->nHeight = 209999;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = 210000;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = nHeight;\n "
      }
    ]
  }
]