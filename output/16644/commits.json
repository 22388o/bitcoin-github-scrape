[
  {
    "sha": "01de86f7e61a9917644d0d919874d170b35e0c8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWRlODZmN2U2MWE5OTE3NjQ0ZDBkOTE5ODc0ZDE3MGIzNWUwYzhl",
    "commit": {
      "author": {
        "name": "Chuf",
        "email": "42591821+GChuf@users.noreply.github.com",
        "date": "2019-08-18T16:18:43Z"
      },
      "committer": {
        "name": "gapeman",
        "email": "gasper.cefarin@gmail.com",
        "date": "2019-08-19T15:01:12Z"
      },
      "message": "scripts: attempt to fix some translations in update-translations.py\n\nThe script now tries to fix some of the translations which would otherwise be omitted - that is translations of strings containing format specifiers.\nAlso added a counter for some statistics about translations fixed and languages removed due to minimum translated strings requirement.",
      "tree": {
        "sha": "5c0c495f8239ec5633f9d9290d2c7b0164dc9d47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c0c495f8239ec5633f9d9290d2c7b0164dc9d47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01de86f7e61a9917644d0d919874d170b35e0c8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01de86f7e61a9917644d0d919874d170b35e0c8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01de86f7e61a9917644d0d919874d170b35e0c8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01de86f7e61a9917644d0d919874d170b35e0c8e/comments",
    "author": {
      "login": "GChuf",
      "id": 42591821,
      "node_id": "MDQ6VXNlcjQyNTkxODIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42591821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GChuf",
      "html_url": "https://github.com/GChuf",
      "followers_url": "https://api.github.com/users/GChuf/followers",
      "following_url": "https://api.github.com/users/GChuf/following{/other_user}",
      "gists_url": "https://api.github.com/users/GChuf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GChuf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GChuf/subscriptions",
      "organizations_url": "https://api.github.com/users/GChuf/orgs",
      "repos_url": "https://api.github.com/users/GChuf/repos",
      "events_url": "https://api.github.com/users/GChuf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GChuf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "GChuf",
      "id": 42591821,
      "node_id": "MDQ6VXNlcjQyNTkxODIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42591821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GChuf",
      "html_url": "https://github.com/GChuf",
      "followers_url": "https://api.github.com/users/GChuf/followers",
      "following_url": "https://api.github.com/users/GChuf/following{/other_user}",
      "gists_url": "https://api.github.com/users/GChuf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GChuf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GChuf/subscriptions",
      "organizations_url": "https://api.github.com/users/GChuf/orgs",
      "repos_url": "https://api.github.com/users/GChuf/repos",
      "events_url": "https://api.github.com/users/GChuf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GChuf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1124be6111d6ef0f0324bccd0642b17b86bcd213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1124be6111d6ef0f0324bccd0642b17b86bcd213",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1124be6111d6ef0f0324bccd0642b17b86bcd213"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 73,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4f441be7af9d99e81b244e24eb4ea960006367bc",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 73,
        "deletions": 13,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01de86f7e61a9917644d0d919874d170b35e0c8e/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01de86f7e61a9917644d0d919874d170b35e0c8e/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=01de86f7e61a9917644d0d919874d170b35e0c8e",
        "patch": "@@ -6,11 +6,11 @@\n Run this script from the root of the repository to update all translations from\n transifex.\n It will do the following automatically:\n-\n-- fetch all translations using the tx tool\n+- fetch all translations using the tx tool (https://github.com/transifex/transifex-client)\n - post-process them into valid and committable format\n   - remove invalid control characters\n   - remove location tags (makes diffs less noisy)\n+  - attempt to fix some translations\n \n TODO:\n - auto-add new translations to the build system according to the translation process\n@@ -81,7 +81,11 @@ def sanitize_string(s):\n     '''Sanitize string for printing'''\n     return s.replace('\\n',' ')\n \n+def fix_string(s):\n+    return s.replace('% 1','%1').replace('1%','%1').replace('&1','%1').replace('2%','%2').replace('% s','%s').replace('&s','%s').replace('s%','%s').replace('n%','%n').replace('n%','%n').replace('&n','%n').replace('% n','%n').replace('% d','%d').replace('%S','%s').replace('$1','%1')\n+\n def check_format_specifiers(source, translation, errors, numerus):\n+    global source_f\n     source_f = split_format_specifiers(find_format_specifiers(source))\n     # assert that no source messages contain both Qt and strprintf format specifiers\n     # if this fails, go change the source as this is hacky and confusing!\n@@ -131,6 +135,10 @@ def contains_bitcoin_addr(text, errors):\n     return False\n \n def postprocess_translations(reduce_diff_hacks=False):\n+    global source_f\n+    global tf #translations fixed\n+    global lr #languages removed\n+    tf = lr = 0\n     print('Checking and postprocessing...')\n \n     if reduce_diff_hacks:\n@@ -172,27 +180,77 @@ def postprocess_translations(reduce_diff_hacks=False):\n \n                     for error in errors:\n                         print('%s: %s' % (filename, error))\n-\n-                    if not valid: # set type to unfinished and clear string if invalid\n-                        translation_node.clear()\n-                        translation_node.set('type', 'unfinished')\n-                        have_errors = True\n+\t\t\t\t\t\t\n+                    # check if translation can be fixed\n+                    if not valid:\n+                       if translation_node.text != None: # only attempt to fix if translation is not a NoneType object\n+                           translation_node.text = fix_string(translation_node.text) #fix most common mistakes by replacing symbols\n+                           translation_f = split_format_specifiers(find_format_specifiers(translation_node.text))\n+                           if source_f == translation_f: # check if translation is acceptable after fixing it. if not, try to fix more.\n+                               # if the translation seems okay, add spaces before % if needed - only if certain strings are not found, and if '%' is not the first symbol in a string.\n+                               if translation_node.text[0] != \"%\" and translation_node.text.find(' %') == -1 and translation_node.text.find('(%') == -1 and translation_node.text.find('\\'%') == -1 and translation_node.text.find('\\\"%') == -1:\n+                                   translation_node.text = translation_node.text.replace('%',' %')\n+                               tf = tf + 1\t\n+                               print('Translation #', tf, 'fixed:', translation_node.text)\n+                               print('')\n+                           # check if translation contains '%' and if source contains '&'\n+                           # check if translation contains '%1' and if source contains '%n'\n+                           # If so, replace accordingly.\n+                           elif translation_node.text.find('%') >= 0 and source.find('&') >= 0:\n+                               translation_node.text = translation_node.text.replace('%', '&')\n+                               translation_f = split_format_specifiers(find_format_specifiers(translation_node.text))\n+                               if source_f == translation_f:\n+                                   tf = tf + 1\n+                                   print('Translation #', tf, 'fixed:', translation_node.text)\n+                                   print('')\n+                               else:\n+                                   print('Translation could not be fixed')\n+                                   print('')\n+                                   translation_node.clear()\n+                                   translation_node.set('type', 'unfinished')\n+                                   have_errors = True\t\n+                           elif translation_node.text.find('%1') >= 0 and source.find('%n') >= 0:\n+                               translation_node.text = translation_node.text.replace('%1', '%n')\n+                               translation_f = split_format_specifiers(find_format_specifiers(translation_node.text))\n+                               if source_f == translation_f:\n+                                   tf = tf + 1\n+                                   print('Translation #', tf, 'fixed:', translation_node.text)\n+                                   print('')\n+                               else:\n+                                   print('Translation could not be fixed')\n+                                   print('')\n+                                   translation_node.clear()\n+                                   translation_node.set('type', 'unfinished')\n+                                   have_errors = True\n+                           else:\n+                               print('Translation could not be fixed')\n+                               print('')\n+                               translation_node.clear()\n+                               translation_node.set('type', 'unfinished')\n+                               have_errors = True\t\n+                       else:\n+                           print('TypeNone object, cannot try to fix this string.')\n+                           print('')\n+                           translation_node.clear()\n+                           translation_node.set('type', 'unfinished')\n+                           have_errors = True\t\n+\t\t\t\t\t\t   \n+                # Remove entire message if it is an unfinished translation\n+                if translation_node.get('type') == 'unfinished':\n+                    context.remove(message)\n \n                 # Remove location tags\n                 for location in message.findall('location'):\n                     message.remove(location)\n \n-                # Remove entire message if it is an unfinished translation\n-                if translation_node.get('type') == 'unfinished':\n-                    context.remove(message)\n-\n         # check if document is (virtually) empty, and remove it if so\n         num_messages = 0\n         for context in root.findall('context'):\n             for message in context.findall('message'):\n                 num_messages += 1\n         if num_messages < MIN_NUM_MESSAGES:\n-            print('Removing %s, as it contains only %i messages' % (filepath, num_messages))\n+            print('#', lr, ': Removing %s, as it contains only %i messages' % (filepath, num_messages))\n+            lr=lr+1\n             continue\n \n         # write fixed-up tree\n@@ -212,4 +270,6 @@ def postprocess_translations(reduce_diff_hacks=False):\n     check_at_repository_root()\n     fetch_all_translations()\n     postprocess_translations()\n-\n+    print('')\n+    print('Total translations fixed:', tf)\n+    print('Total languages removed:', lr)"
      }
    ]
  }
]