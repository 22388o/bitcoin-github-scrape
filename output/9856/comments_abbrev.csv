sipa,2017-02-25T05:44:55Z,"```\n./prevector.h:178:21: error: ‘get_new_handler’ is not a member of ‘std’\n\n                     std::get_new_handler()();\n```",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282462441,282462441,
theuni,2017-02-25T05:52:16Z,"@sipa grr, works for me locally. I'll try adding the include, but I'm guessing that libstdc++ didn't support it for 4.8 :(",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282462801,282462801,
JeremyRubin,2017-02-25T06:48:49Z,"Why not make prevector throw std::bad_alloc or std::length_error? That way it's at least recoverable in future code, and makes it a bit more ""API Consistent"" with std::vector...",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282465282,282465282,
theuni,2017-02-25T07:21:08Z,"@JeremyRubin The issue in #9854 is that exactly that bad_alloc is thrown but not handled correctly. We don't actually attempt to catch bad_alloc specifically anywhere. And logically it doesn't make sense to... if we've got an allocation problem, we need to shut down.",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282466640,282466640,
luke-jr,2017-02-25T07:30:31Z,"The default action of exceptions is to abort the program, no? So we must be catching it at least indirectly... Why not just add an explicit catch for bad_alloc there? (or ideally, be specific about what exceptions we want to catch..)",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282467056,282467056,
laanwj,2017-02-25T07:36:40Z,"ACK on the assert() in prevector.\n\nI really don't like setting this global handler that crashes the program. I hope this is a temporary measure for 0.14?",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282467342,282467342,
laanwj,2017-02-25T07:38:38Z,"Thinking of it, no, using assert for error handling is a bad idea. We should support compiling without assertions at some point.\nIf you really want to terminate the program immediatelly please log a message and call abort or so () :/\n",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282467422,282467422,
TheBlueMatt,2017-02-25T08:00:36Z,"@laanwj I hope we do keep this longer-term, actually...std::bad_alloc, in the design of our entire codebase, seems massively dangerous to me (and I've wished we could do something like this for a while - just didn't know it existed). I'm happy if we remove it later, but the amount of auditing we'd have to do to check everywhere we call new, even through stl, seems like a rather significant effort.",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282468358,282468358,
laanwj,2017-02-25T08:32:18Z,"@TheBlueMatt okay, yes, after discussion IRC I agree seems the least bad solution for now :/\n\nEdit: so to be clear, my concern with a jackhammer solution like this is that not all allocations are created equal. An allocation of a 4 GB buffer somewhere in the program may fail, but that may be perfectly fine if it can continue with a smaller buffer. It doesn't mean the rest of the application, w",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282469812,282469812,
JeremyRubin,2017-02-25T09:10:14Z,"Ah, I see. I was going to suggest get_new_handler, then I actually read the above discussion ;)\n\nI'm mostly just uncomfortable with using assert for error handling.\n\nCan we not implement something similar to get_new_handler ourselves for unsupported platforms?\n",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282471576,282471576,
TheBlueMatt,2017-02-25T17:38:14Z,"@laanwj yea, I totally agree there are places we don't want this (mostly deserialization comes to mind), but I believe we mostly fixed that by now? \n\nOn February 25, 2017 4:10:18 AM EST, Jeremy Rubin <notifications@github.com> wrote:\n>Ah, I see. I was going to suggest get_new_handler, then I actually read\n>the above discussion ;)\n>\n>I'm mostly just uncomfortable with using assert for error h",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282499273,282499273,
sdaftuar,2017-02-27T15:30:46Z,"nit: Perhaps we should add a comment to the `assert` lines introduced in prevector, mentioning their purpose/rationale?  (I'm pretty sure if I were reading the code in the future and hadn't seen this discussion, I'd definitely overlook the significance and implications.)",https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282753017,282753017,
sipa,2017-02-28T08:37:31Z,utACK,https://github.com/bitcoin/bitcoin/pull/9856#issuecomment-282976505,282976505,
kallewoof,2017-02-26T01:45:13Z,"Before this attempt, you could do `fputs(stderr, ""Error: Out of memory. Terminating.\n"");` which, I believe, does not call `malloc`. At least it didn't when I wrote my own `malloc` a few years ago, but it may be different per platform. A nice to have for when a node goes down with no log entries about why.",https://github.com/bitcoin/bitcoin/pull/9856#discussion_r103093216,103093216,src/init.cpp
JeremyRubin,2017-02-26T11:36:50Z,"I don't think this is threadsafe (ie, a concurrent OOM could cause it to terminate in the middle of a LogPrintf or print two LogPrintfs). I would make the handler have some `switch(atomic counter++)`. Then it is both re-entrant and threadsafe. (note that set_new_handler is threadsafe itself, just is threadsafe in this usage)\n\nI think this sort of implementation should be ok:\n\n```c++\nstat",https://github.com/bitcoin/bitcoin/pull/9856#discussion_r103102209,103102209,src/init.cpp
theuni,2017-02-27T19:41:01Z,"Those are both reasonable suggestions, but imo they're overthinking this a bit. If we OOM, the important thing is to shutdown, logging should be best-effort. I'd rather not complicate this too much.",https://github.com/bitcoin/bitcoin/pull/9856#discussion_r103293043,103293043,src/init.cpp
