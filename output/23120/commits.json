[
  {
    "sha": "fa4676805910bfea5549f5b51460c8456bc8945c",
    "node_id": "C_kwDOABII59oAKGZhNDY3NjgwNTkxMGJmZWE1NTQ5ZjViNTE0NjBjODQ1NmJjODk0NWM",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-28T13:48:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-28T13:46:57Z"
      },
      "message": "test: Remove unused and confusing main parameter from script_util\n\nBitcoin script opcodes are equal on all chains (main and test) anyway.\n\nCan be reviewed with \"--word-diff-regex=.\".",
      "tree": {
        "sha": "d97bd2c8c3e8418f882e60b25a1dbd9284d4fb37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d97bd2c8c3e8418f882e60b25a1dbd9284d4fb37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4676805910bfea5549f5b51460c8456bc8945c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhRbgv6Axv7Yt0sLLNguZQWPt6WlTPRpKUn2sV1O0Lp4rvZW6DobqTjWxPlpZED\nDEIKmZBddl1deXfjrb996pALcHoVJ7zdHZB4vF2EZFmgyIbJMBiqkhCYVmDlNnzP\nJVBWPy3nhtaSNHRMGxw/znfQN1VWvtwh3ea76Tu9mzDqzN3gMuufdih0/EEWThaR\nBPD8iErT+ErmM4uHiYNuyE5+Ht1oo2BpyjrA7zZ+ml/0UqDA6OglAkavbWer4pzq\nflFQxo72kstckOqjJ7fvJwdQaruTnI+kWxnj9LHvc6SiJWnOIlr5uhVs+LtfplNS\nzic/OET9/1F5qidoK76zVYYwWTf6ErVQ3G3wup6pDnMO5B3jAWoGIxoXItffHyRP\nEFlmuBaGvHRaCtxkhjA4Tl1CWdz28K0eo2L44vmIAgNNePhaRttReVorWmIdtjDo\nZm60IUcPWA7YC+MK1w6fyn48BqRDZrLuGir+N6G81XsrOt5iefKpXrOFMq69CnDG\nJxt346P1\n=Y3ep\n-----END PGP SIGNATURE-----",
        "payload": "tree d97bd2c8c3e8418f882e60b25a1dbd9284d4fb37\nparent a9d0cec4991ab057557af9992daa4c8146a9b9d0\nauthor MarcoFalke <falke.marco@gmail.com> 1632836885 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1632836817 +0200\n\ntest: Remove unused and confusing main parameter from script_util\n\nBitcoin script opcodes are equal on all chains (main and test) anyway.\n\nCan be reviewed with \"--word-diff-regex=.\".\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4676805910bfea5549f5b51460c8456bc8945c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4676805910bfea5549f5b51460c8456bc8945c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4676805910bfea5549f5b51460c8456bc8945c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9d0cec4991ab057557af9992daa4c8146a9b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9d0cec4991ab057557af9992daa4c8146a9b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9d0cec4991ab057557af9992daa4c8146a9b9d0"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "30631f3671c0c82a0cf92e1f0f0e7034c3432720",
        "filename": "test/functional/test_framework/script_util.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4676805910bfea5549f5b51460c8456bc8945c/test/functional/test_framework/script_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4676805910bfea5549f5b51460c8456bc8945c/test/functional/test_framework/script_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script_util.py?ref=fa4676805910bfea5549f5b51460c8456bc8945c",
        "patch": "@@ -25,47 +25,47 @@\n DUMMY_P2WPKH_SCRIPT = CScript([b'a' * 21])\n DUMMY_2_P2WPKH_SCRIPT = CScript([b'b' * 21])\n \n-def keyhash_to_p2pkh_script(hash, main = False):\n+def keyhash_to_p2pkh_script(hash):\n     assert len(hash) == 20\n     return CScript([OP_DUP, OP_HASH160, hash, OP_EQUALVERIFY, OP_CHECKSIG])\n \n-def scripthash_to_p2sh_script(hash, main = False):\n+def scripthash_to_p2sh_script(hash):\n     assert len(hash) == 20\n     return CScript([OP_HASH160, hash, OP_EQUAL])\n \n-def key_to_p2pkh_script(key, main = False):\n+def key_to_p2pkh_script(key):\n     key = check_key(key)\n-    return keyhash_to_p2pkh_script(hash160(key), main)\n+    return keyhash_to_p2pkh_script(hash160(key))\n \n-def script_to_p2sh_script(script, main = False):\n+def script_to_p2sh_script(script):\n     script = check_script(script)\n-    return scripthash_to_p2sh_script(hash160(script), main)\n+    return scripthash_to_p2sh_script(hash160(script))\n \n-def key_to_p2sh_p2wpkh_script(key, main = False):\n+def key_to_p2sh_p2wpkh_script(key):\n     key = check_key(key)\n     p2shscript = CScript([OP_0, hash160(key)])\n-    return script_to_p2sh_script(p2shscript, main)\n+    return script_to_p2sh_script(p2shscript)\n \n-def program_to_witness_script(version, program, main = False):\n+def program_to_witness_script(version, program):\n     if isinstance(program, str):\n         program = bytes.fromhex(program)\n     assert 0 <= version <= 16\n     assert 2 <= len(program) <= 40\n     assert version > 0 or len(program) in [20, 32]\n     return CScript([version, program])\n \n-def script_to_p2wsh_script(script, main = False):\n+def script_to_p2wsh_script(script):\n     script = check_script(script)\n-    return program_to_witness_script(0, sha256(script), main)\n+    return program_to_witness_script(0, sha256(script))\n \n-def key_to_p2wpkh_script(key, main = False):\n+def key_to_p2wpkh_script(key):\n     key = check_key(key)\n-    return program_to_witness_script(0, hash160(key), main)\n+    return program_to_witness_script(0, hash160(key))\n \n-def script_to_p2sh_p2wsh_script(script, main = False):\n+def script_to_p2sh_p2wsh_script(script):\n     script = check_script(script)\n     p2shscript = CScript([OP_0, sha256(script)])\n-    return script_to_p2sh_script(p2shscript, main)\n+    return script_to_p2sh_script(p2shscript)\n \n def check_key(key):\n     if isinstance(key, str):"
      }
    ]
  },
  {
    "sha": "fa54efda9bc8f8f742dacbc3673516d88d9d601d",
    "node_id": "C_kwDOABII59oAKGZhNTRlZmRhOWJjOGY4Zjc0MmRhY2JjMzY3MzUxNmQ4OGQ5ZDYwMWQ",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-28T13:51:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-28T13:48:55Z"
      },
      "message": "test: pep-8 touched test\n\nCan be reviewed with \"--word-diff-regex=.\".",
      "tree": {
        "sha": "dab454a904956bb4d416a2d95c9c14dc231e848c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dab454a904956bb4d416a2d95c9c14dc231e848c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa54efda9bc8f8f742dacbc3673516d88d9d601d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjH4gv/fF2qWgeLD9XJ6sNhcNy+TdM86SJe6Fw4xX9FPDaKCHnBe3TrOnGBOH9S\n/jM15HK2xgtxcsK0h48dgnYfde6Dj10fWL5mpV+XwN9xwt3FyJmKceQEY6BMQ9VP\nTIplljbPlCXoIWqVjGA3doMtBvlsfCET3dkRon6cUYTVxfwKQ5X+C1bUFe511WGs\nvXbk6ykJLkBv41DsuQFO/OWGVGZRpg9i2x1v1mgsR6xb/qZzRZNY29Atw86BC3i7\nUmhO6WNtGYx5SiwbzsbYLCPCNvy5xXpKTR4b96ceKZvScW6d7ia01IDqKBad1WP+\nUHAdovXz5AW7aVgIQdw1rat26b1BJqp0oYhXBVIGwrKzI+CB/EKP6pgaL+923Urh\nb7grbopfz7lOgFxVxtez+Z03FWTvhJId4fk+bOuW3bjo2AuW+Gn4GcqnL8BUxdTs\njsfPSDEAeAtmp/4h7zy9KL1Ba3FcjhikVE1Nn77druuzxqjL4TVWEuimtqoWLu/y\nZYRNlHEF\n=MCEA\n-----END PGP SIGNATURE-----",
        "payload": "tree dab454a904956bb4d416a2d95c9c14dc231e848c\nparent fa4676805910bfea5549f5b51460c8456bc8945c\nauthor MarcoFalke <falke.marco@gmail.com> 1632837067 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1632836935 +0200\n\ntest: pep-8 touched test\n\nCan be reviewed with \"--word-diff-regex=.\".\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa54efda9bc8f8f742dacbc3673516d88d9d601d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa54efda9bc8f8f742dacbc3673516d88d9d601d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa54efda9bc8f8f742dacbc3673516d88d9d601d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa4676805910bfea5549f5b51460c8456bc8945c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4676805910bfea5549f5b51460c8456bc8945c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4676805910bfea5549f5b51460c8456bc8945c"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 24,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e0dfce4c2f71d9653e4d43cddb2e74c3387f1d7b",
        "filename": "test/functional/test_framework/script_util.py",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa54efda9bc8f8f742dacbc3673516d88d9d601d/test/functional/test_framework/script_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa54efda9bc8f8f742dacbc3673516d88d9d601d/test/functional/test_framework/script_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script_util.py?ref=fa54efda9bc8f8f742dacbc3673516d88d9d601d",
        "patch": "@@ -3,7 +3,17 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Useful Script constants and utils.\"\"\"\n-from test_framework.script import CScript, hash160, sha256, OP_0, OP_DUP, OP_HASH160, OP_CHECKSIG, OP_EQUAL, OP_EQUALVERIFY\n+from test_framework.script import (\n+    CScript,\n+    hash160,\n+    sha256,\n+    OP_0,\n+    OP_DUP,\n+    OP_HASH160,\n+    OP_CHECKSIG,\n+    OP_EQUAL,\n+    OP_EQUALVERIFY,\n+)\n \n # To prevent a \"tx-size-small\" policy rule error, a transaction has to have a\n # non-witness size of at least 82 bytes (MIN_STANDARD_TX_NONWITNESS_SIZE in\n@@ -25,27 +35,33 @@\n DUMMY_P2WPKH_SCRIPT = CScript([b'a' * 21])\n DUMMY_2_P2WPKH_SCRIPT = CScript([b'b' * 21])\n \n+\n def keyhash_to_p2pkh_script(hash):\n     assert len(hash) == 20\n     return CScript([OP_DUP, OP_HASH160, hash, OP_EQUALVERIFY, OP_CHECKSIG])\n \n+\n def scripthash_to_p2sh_script(hash):\n     assert len(hash) == 20\n     return CScript([OP_HASH160, hash, OP_EQUAL])\n \n+\n def key_to_p2pkh_script(key):\n     key = check_key(key)\n     return keyhash_to_p2pkh_script(hash160(key))\n \n+\n def script_to_p2sh_script(script):\n     script = check_script(script)\n     return scripthash_to_p2sh_script(hash160(script))\n \n+\n def key_to_p2sh_p2wpkh_script(key):\n     key = check_key(key)\n     p2shscript = CScript([OP_0, hash160(key)])\n     return script_to_p2sh_script(p2shscript)\n \n+\n def program_to_witness_script(version, program):\n     if isinstance(program, str):\n         program = bytes.fromhex(program)\n@@ -54,29 +70,34 @@ def program_to_witness_script(version, program):\n     assert version > 0 or len(program) in [20, 32]\n     return CScript([version, program])\n \n+\n def script_to_p2wsh_script(script):\n     script = check_script(script)\n     return program_to_witness_script(0, sha256(script))\n \n+\n def key_to_p2wpkh_script(key):\n     key = check_key(key)\n     return program_to_witness_script(0, hash160(key))\n \n+\n def script_to_p2sh_p2wsh_script(script):\n     script = check_script(script)\n     p2shscript = CScript([OP_0, sha256(script)])\n     return script_to_p2sh_script(p2shscript)\n \n+\n def check_key(key):\n     if isinstance(key, str):\n-        key = bytes.fromhex(key) # Assuming this is hex string\n+        key = bytes.fromhex(key)  # Assuming this is hex string\n     if isinstance(key, bytes) and (len(key) == 33 or len(key) == 65):\n         return key\n     assert False\n \n+\n def check_script(script):\n     if isinstance(script, str):\n-        script = bytes.fromhex(script) # Assuming this is hex string\n+        script = bytes.fromhex(script)  # Assuming this is hex string\n     if isinstance(script, bytes) or isinstance(script, CScript):\n         return script\n     assert False"
      }
    ]
  }
]