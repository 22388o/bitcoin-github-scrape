[
  {
    "sha": "b312cd770701aa806e9b264154646f481d212c1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzEyY2Q3NzA3MDFhYTgwNmU5YjI2NDE1NDY0NmY0ODFkMjEyYzFj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-08T13:34:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-28T08:36:25Z"
      },
      "message": "Add missing locking annotations",
      "tree": {
        "sha": "9af528d611dc89b32712f9fd201eda743eeaa6d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9af528d611dc89b32712f9fd201eda743eeaa6d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b312cd770701aa806e9b264154646f481d212c1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b312cd770701aa806e9b264154646f481d212c1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b312cd770701aa806e9b264154646f481d212c1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b312cd770701aa806e9b264154646f481d212c1c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "600b85bb417295f4d9c7d5b9fd8502f3c8f113e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/600b85bb417295f4d9c7d5b9fd8502f3c8f113e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/600b85bb417295f4d9c7d5b9fd8502f3c8f113e3"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 24,
      "deletions": 33
    },
    "files": [
      {
        "sha": "1e6375986626cf6d35c9a82673bdfb6516fd06a4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 12,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b312cd770701aa806e9b264154646f481d212c1c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b312cd770701aa806e9b264154646f481d212c1c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b312cd770701aa806e9b264154646f481d212c1c",
        "patch": "@@ -82,8 +82,8 @@ bool fDiscover = true;\n bool fListen = true;\n bool fRelayTxes = true;\n CCriticalSection cs_mapLocalHost;\n-std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n-static bool vfLimited[NET_MAX] = {};\n+std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n+static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n@@ -874,16 +874,7 @@ const uint256& CNetMessage::GetMessageHash() const\n     return data_hash;\n }\n \n-\n-\n-\n-\n-\n-\n-\n-\n-// requires LOCK(cs_vSend)\n-size_t CConnman::SocketSendData(CNode *pnode) const\n+size_t CConnman::SocketSendData(CNode *pnode) const EXCLUSIVE_LOCKS_REQUIRED(pnode->cs_vSend)\n {\n     auto it = pnode->vSendMsg.begin();\n     size_t nSentSize = 0;"
      },
      {
        "sha": "a059d32c89d6c47b22a742a3c10b0dcef7e5b40d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b312cd770701aa806e9b264154646f481d212c1c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b312cd770701aa806e9b264154646f481d212c1c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b312cd770701aa806e9b264154646f481d212c1c",
        "patch": "@@ -400,12 +400,12 @@ class CConnman\n \n     std::vector<ListenSocket> vhListenSocket;\n     std::atomic<bool> fNetworkActive;\n-    banmap_t setBanned;\n+    banmap_t setBanned GUARDED_BY(cs_setBanned);\n     CCriticalSection cs_setBanned;\n-    bool setBannedIsDirty;\n+    bool setBannedIsDirty GUARDED_BY(cs_setBanned);\n     bool fAddressesInitialized;\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots;\n+    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n     CCriticalSection cs_vOneShots;\n     std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n     CCriticalSection cs_vAddedNodes;\n@@ -540,7 +540,7 @@ struct LocalServiceInfo {\n };\n \n extern CCriticalSection cs_mapLocalHost;\n-extern std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n+extern std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n typedef std::map<std::string, uint64_t> mapMsgCmdSize; //command, total bytes\n \n class CNodeStats\n@@ -630,23 +630,23 @@ class CNode\n public:\n     // socket\n     std::atomic<ServiceFlags> nServices;\n-    SOCKET hSocket;\n+    SOCKET hSocket GUARDED_BY(cs_hSocket);\n     size_t nSendSize; // total size of all vSendMsg entries\n     size_t nSendOffset; // offset inside the first vSendMsg already sent\n-    uint64_t nSendBytes;\n-    std::deque<std::vector<unsigned char>> vSendMsg;\n+    uint64_t nSendBytes GUARDED_BY(cs_vSend);\n+    std::deque<std::vector<unsigned char>> vSendMsg GUARDED_BY(cs_vSend);\n     CCriticalSection cs_vSend;\n     CCriticalSection cs_hSocket;\n     CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n-    std::list<CNetMessage> vProcessMsg;\n+    std::list<CNetMessage> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n     size_t nProcessQueueSize;\n \n     CCriticalSection cs_sendProcessing;\n \n     std::deque<CInv> vRecvGetData;\n-    uint64_t nRecvBytes;\n+    uint64_t nRecvBytes GUARDED_BY(cs_vRecv);\n     std::atomic<int> nRecvVersion;\n \n     std::atomic<int64_t> nLastSend;\n@@ -662,7 +662,7 @@ class CNode\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n     // the network or wire types and the cleaned string used when displayed or logged.\n-    std::string strSubVer, cleanSubVer;\n+    std::string strSubVer GUARDED_BY(cs_SubVer), cleanSubVer GUARDED_BY(cs_SubVer);\n     CCriticalSection cs_SubVer; // used for both cleanSubVer and strSubVer\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n@@ -681,7 +681,7 @@ class CNode\n     bool fSentAddr;\n     CSemaphoreGrant grantOutbound;\n     mutable CCriticalSection cs_filter;\n-    std::unique_ptr<CBloomFilter> pfilter;\n+    std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter);\n     std::atomic<int> nRefCount;\n \n     const uint64_t nKeyedNetGroup;\n@@ -690,7 +690,7 @@ class CNode\n protected:\n \n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n-    mapMsgCmdSize mapRecvBytesPerMsgCmd;\n+    mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);\n \n public:\n     uint256 hashContinue;\n@@ -701,18 +701,18 @@ class CNode\n     CRollingBloomFilter addrKnown;\n     bool fGetAddr;\n     std::set<uint256> setKnown;\n-    int64_t nNextAddrSend;\n-    int64_t nNextLocalAddrSend;\n+    int64_t nNextAddrSend GUARDED_BY(cs_sendProcessing);\n+    int64_t nNextLocalAddrSend GUARDED_BY(cs_sendProcessing);\n \n     // inventory based relay\n-    CRollingBloomFilter filterInventoryKnown;\n+    CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_inventory);\n     // Set of transaction ids we still have to announce.\n     // They are sorted by the mempool before relay, so the order is not important.\n     std::set<uint256> setInventoryTxToSend;\n     // List of block ids we still have announce.\n     // There is no final sorting before sending, as they are always sent immediately\n     // and in the order requested.\n-    std::vector<uint256> vInventoryBlockToSend;\n+    std::vector<uint256> vInventoryBlockToSend GUARDED_BY(cs_inventory);\n     CCriticalSection cs_inventory;\n     std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n@@ -741,7 +741,7 @@ class CNode\n     // Whether a ping is requested.\n     std::atomic<bool> fPingQueued;\n     // Minimum fee rate with which to filter inv's to this node\n-    CAmount minFeeFilter;\n+    CAmount minFeeFilter GUARDED_BY(cs_feeFilter);\n     CCriticalSection cs_feeFilter;\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n@@ -761,10 +761,10 @@ class CNode\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n \n     mutable CCriticalSection cs_addrName;\n-    std::string addrName;\n+    std::string addrName GUARDED_BY(cs_addrName);\n \n     // Our address, as reported by the peer\n-    CService addrLocal;\n+    CService addrLocal GUARDED_BY(cs_addrLocal);\n     mutable CCriticalSection cs_addrLocal;\n public:\n "
      },
      {
        "sha": "1c043fc981aa60a9496344d678705f5320466317",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b312cd770701aa806e9b264154646f481d212c1c/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b312cd770701aa806e9b264154646f481d212c1c/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=b312cd770701aa806e9b264154646f481d212c1c",
        "patch": "@@ -26,9 +26,9 @@\n #endif\n \n // Settings\n-static proxyType proxyInfo[NET_MAX];\n-static proxyType nameProxy;\n static CCriticalSection cs_proxyInfos;\n+static proxyType proxyInfo[NET_MAX] GUARDED_BY(cs_proxyInfos);\n+static proxyType nameProxy GUARDED_BY(cs_proxyInfos);\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n bool fNameLookup = DEFAULT_NAME_LOOKUP;\n "
      }
    ]
  },
  {
    "sha": "4894133dc5095ed971bf98d695384e7cbb16e54c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODk0MTMzZGM1MDk1ZWQ5NzFiZjk4ZDY5NTM4NGU3Y2JiMTZlNTRj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-08T13:33:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-28T08:36:25Z"
      },
      "message": "Add missing lock in CNode::copyStats(...)",
      "tree": {
        "sha": "36061eb178672988fb416d8e051f9d30136b9237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36061eb178672988fb416d8e051f9d30136b9237"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4894133dc5095ed971bf98d695384e7cbb16e54c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4894133dc5095ed971bf98d695384e7cbb16e54c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4894133dc5095ed971bf98d695384e7cbb16e54c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4894133dc5095ed971bf98d695384e7cbb16e54c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b312cd770701aa806e9b264154646f481d212c1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b312cd770701aa806e9b264154646f481d212c1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b312cd770701aa806e9b264154646f481d212c1c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b85a8c2c1d997b7180e91bf19b63125a652a804e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4894133dc5095ed971bf98d695384e7cbb16e54c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4894133dc5095ed971bf98d695384e7cbb16e54c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4894133dc5095ed971bf98d695384e7cbb16e54c",
        "patch": "@@ -715,7 +715,10 @@ void CNode::copyStats(CNodeStats &stats)\n         X(nRecvBytes);\n     }\n     X(fWhitelisted);\n-    X(minFeeFilter);\n+    {\n+        LOCK(cs_feeFilter);\n+        X(minFeeFilter);\n+    }\n \n     // It is common for nodes with good ping times to suddenly become lagged,\n     // due to a new block arriving or other large transfer."
      }
    ]
  }
]