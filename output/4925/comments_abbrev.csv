christophebiocca,2014-09-15T20:47:19Z,"> This means removing the check that someone might have inserted an unconfirmed transaction in your wallet and making it look like a confirmed one.\n\nJust for clarity, are we talking about someone with write access to the wallet file?\n",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-55656057,55656057,
theymos,2014-09-16T01:03:31Z,"Satoshi intended the Merkle branches to be useful if one day a super-lightweight mode of Bitcoin never downloaded blocks at all. I think that the idea was that these lightweight nodes would send the input transactions and their Merkle branches along with any sent transactions to prove to other lightweight nodes that the transaction is OK, and then the recipient would download full Merkle trees for",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-55681967,55681967,
dgenr8,2014-09-16T15:19:51Z,"@mikehearn as someone invested in both, any comment on how this would affect core wallet in a comparison to bitcoinj-based wallets?\n",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-55759441,55759441,
mikehearn,2014-09-16T15:37:41Z,"bitcoinj doesn't store merkle branches for transactions in its wallet. Exactly why the Bitcoin Core wallet does is one of the codebase's many mysteries, I've never located a use case for this data. Proving a transaction exists can be useful in some specialised protocols but because you have no idea if the outputs are spent or not, it ends up being not that useful.\n",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-55762411,55762411,
jgarzik,2014-09-16T15:51:36Z,"Proof-of-TX-existence in this manner is useful for embedding block headers of side chains, and then proving that with another lightweight client.  It is useful for more generic timestamping applications outside the currency realm.\n",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-55764777,55764777,
sipa,2014-09-16T16:20:01Z,"As long as we don't prune the full blockchain, the merkle branches can\nalways be recreated (we store the index into the block still with this PR),\nand if there's a need for providing such branches to some peers, we can\nalways add the code back.\n\nAlso, even if we want to turn the Bitcoin Core wallet into SPV, this is not\nnecessary. You verify the branches when received, and don't accept it in",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-55769396,55769396,
mikehearn,2014-09-16T16:32:09Z,Yes indeed. The logic for removing it is sound.\n,https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-55771163,55771163,
sipa,2014-09-16T16:55:41Z,"Oh, this also makes the wallet file incompatible with older releases, as they will consider all transactions as unconfirmed (as if they were ""injected""), but for a major release like 0.10 that is probably acceptable.\n",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-55774634,55774634,
laanwj,2014-09-17T06:47:45Z,"If we are to break the wallet format in an incompatible way, I'd rather do it once and switch to a better format which is, for example, not reliant on berkeleydb. \n\nI like cleaning up unused code, but I can see this causing user frustration and support work for very little gain.\n",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-55855277,55855277,
cozz,2014-09-18T01:39:31Z,"I vote for merging this, I was always wondering about those merkle branches...\n\nAs for incompatibility, isn't this what minVersion is there for? So that the users will get this error message:\n""Error loading wallet.dat: Wallet requires newer version of Bitcoin Core"".\nThe code comments say, we already did that in the past with 0.4.0 and 0.6.0.\n",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-55985158,55985158,
laanwj,2014-09-18T07:42:32Z,"I've been thinking about this. In principle the transactions in the wallet aren't very important, they can always be reconstructed (ie, through zapwallettxes). So this provides a downgrade possibility, it just has to be documented in the release notes.\n",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-56005114,56005114,
petertodd,2014-09-18T18:05:43Z,"@jgarzik For instance I was looking into using CMerkleTx for a colored coin library I'm working on. However it looks like using CMerkleBlock is strictly superior due to the increased efficiency when multiple transactions in the same block needed to be proved.\n\nre: this pull-req, I have no strong opinions one way or the other, although if it ain't broke, don't fix it...\n",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-56078623,56078623,
TheBlueMatt,2014-09-18T20:22:58Z,"I would very much like to see this merged...but I have to agree with @laanwj...if we're gonna break wallet compat, we should really break wallet compat (which needs to happen eventually anyway, preferably sooner rather than later).\n",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-56096545,56096545,
BitcoinPullTester,2014-09-22T20:13:04Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/p4925_a6b1443e3f48f2a43c4746c2bb1e950858d6aa36/ for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/p",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-56434717,56434717,
sipa,2014-10-02T02:33:58Z,"Needs significant changes now, closing. I may redo after #4926.\n",https://github.com/bitcoin/bitcoin/pull/4925#issuecomment-57573299,57573299,
