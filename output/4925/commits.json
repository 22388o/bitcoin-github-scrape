[
  {
    "sha": "a6b1443e3f48f2a43c4746c2bb1e950858d6aa36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmIxNDQzZTNmNDhmMmE0M2M0NzQ2YzJiYjFlOTUwODU4ZDZhYTM2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-15T20:33:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-22T19:57:35Z"
      },
      "message": "Get rid of stored merkle branches.\n\nDo not store merkle branches inside the wallet. This means removing the check\nthat someone might have inserted an unconfirmed transaction in your wallet and\nmaking it look like a confirmed one.\n\nThis means we don't need to keep the merkle branch in wallets (which takes up to\nhalf a kilobyte per transactions), we don't need to validate it (which requires\na dozen sha256 operation per wallet transaction), remove the need to keep the\nmerkle tree in blocks (the case where it's needed is done separately in\nCPartialMerkleTree), and simplifies the merkle root computation.",
      "tree": {
        "sha": "45f3f730d832235644f9b023bed782f09e8c9f2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45f3f730d832235644f9b023bed782f09e8c9f2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb9871194a7fffe8bc0a53ea820b1a395e79e283"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 15,
      "deletions": 71
    },
    "files": [
      {
        "sha": "849377b1de448e7255299d4ed0fac88c5ed4459f",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 45,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=a6b1443e3f48f2a43c4746c2bb1e950858d6aa36",
        "patch": "@@ -234,51 +234,18 @@ uint256 CBlock::BuildMerkleTree() const\n     // use something different; don't just copy-and-paste this code without\n     // understanding the problem first.\n     vMerkleTree.clear();\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n+    vMerkleTree.reserve(vtx.size());\n+    BOOST_FOREACH(const CTransaction& tx, vtx) {\n         vMerkleTree.push_back(tx.GetHash());\n-    int j = 0;\n-    for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n-    {\n-        for (int i = 0; i < nSize; i += 2)\n-        {\n-            int i2 = std::min(i+1, nSize-1);\n-            vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n-                                       BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n-        }\n-        j += nSize;\n-    }\n-    return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n-}\n-\n-std::vector<uint256> CBlock::GetMerkleBranch(int nIndex) const\n-{\n-    if (vMerkleTree.empty())\n-        BuildMerkleTree();\n-    std::vector<uint256> vMerkleBranch;\n-    int j = 0;\n-    for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n-    {\n-        int i = std::min(nIndex^1, nSize-1);\n-        vMerkleBranch.push_back(vMerkleTree[j+i]);\n-        nIndex >>= 1;\n-        j += nSize;\n     }\n-    return vMerkleBranch;\n-}\n-\n-uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n-{\n-    if (nIndex == -1)\n-        return 0;\n-    BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n-    {\n-        if (nIndex & 1)\n-            hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));\n-        else\n-            hash = Hash(BEGIN(hash), END(hash), BEGIN(otherside), END(otherside));\n-        nIndex >>= 1;\n+    for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2) {\n+        for (int i = 0; i < nSize; i += 2) {\n+            int i2 = std::min(i + 1, nSize - 1);\n+            vMerkleTree[i / 2] = Hash(BEGIN(vMerkleTree[i]),  END(vMerkleTree[i]),\n+                                      BEGIN(vMerkleTree[i2]), END(vMerkleTree[i2]));\n+        }\n     }\n-    return hash;\n+    return (vMerkleTree.empty() ? 0 : vMerkleTree.front());\n }\n \n std::string CBlock::ToString() const\n@@ -295,9 +262,6 @@ std::string CBlock::ToString() const\n     {\n         s << \"  \" << vtx[i].ToString() << \"\\n\";\n     }\n-    s << \"  vMerkleTree: \";\n-    for (unsigned int i = 0; i < vMerkleTree.size(); i++)\n-        s << \" \" << vMerkleTree[i].ToString();\n     s << \"\\n\";\n     return s.str();\n }"
      },
      {
        "sha": "8c8573c0014cdab97c38827627c7a7f0c24368b6",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=a6b1443e3f48f2a43c4746c2bb1e950858d6aa36",
        "patch": "@@ -487,9 +487,6 @@ class CBlock : public CBlockHeader\n     // network and disk\n     std::vector<CTransaction> vtx;\n \n-    // memory only\n-    mutable std::vector<uint256> vMerkleTree;\n-\n     CBlock()\n     {\n         SetNull();\n@@ -513,7 +510,6 @@ class CBlock : public CBlockHeader\n     {\n         CBlockHeader::SetNull();\n         vtx.clear();\n-        vMerkleTree.clear();\n     }\n \n     CBlockHeader GetBlockHeader() const\n@@ -530,8 +526,6 @@ class CBlock : public CBlockHeader\n \n     uint256 BuildMerkleTree() const;\n \n-    std::vector<uint256> GetMerkleBranch(int nIndex) const;\n-    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex);\n     std::string ToString() const;\n };\n "
      },
      {
        "sha": "27bd03ae5d4e869e9ef211abce311d8aebef648f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 13,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a6b1443e3f48f2a43c4746c2bb1e950858d6aa36",
        "patch": "@@ -592,9 +592,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n                 wtx.hashBlock = wtxIn.hashBlock;\n                 fUpdated = true;\n             }\n-            if (wtxIn.nIndex != -1 && (wtxIn.vMerkleBranch != wtx.vMerkleBranch || wtxIn.nIndex != wtx.nIndex))\n+            if (wtxIn.nIndex != -1 && wtxIn.nIndex != wtx.nIndex)\n             {\n-                wtx.vMerkleBranch = wtxIn.vMerkleBranch;\n                 wtx.nIndex = wtxIn.nIndex;\n                 fUpdated = true;\n             }\n@@ -2249,9 +2248,6 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n         return 0;\n     }\n \n-    // Fill in merkle branch\n-    vMerkleBranch = block.GetMerkleBranch(nIndex);\n-\n     // Is the tx in a block that's in the main chain\n     BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n     if (mi == mapBlockIndex.end())\n@@ -2277,14 +2273,6 @@ int CMerkleTx::GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const\n     if (!pindex || !chainActive.Contains(pindex))\n         return 0;\n \n-    // Make sure the merkle branch connects to this block\n-    if (!fMerkleVerified)\n-    {\n-        if (CBlock::CheckMerkleBranch(GetHash(), vMerkleBranch, nIndex) != pindex->hashMerkleRoot)\n-            return 0;\n-        fMerkleVerified = true;\n-    }\n-\n     pindexRet = pindex;\n     return chainActive.Height() - pindex->nHeight + 1;\n }"
      },
      {
        "sha": "f59ce59cdc8b3b6d0bbb250251b7601d141f1f63",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b1443e3f48f2a43c4746c2bb1e950858d6aa36/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=a6b1443e3f48f2a43c4746c2bb1e950858d6aa36",
        "patch": "@@ -469,13 +469,8 @@ class CMerkleTx : public CTransaction\n \n public:\n     uint256 hashBlock;\n-    std::vector<uint256> vMerkleBranch;\n     int nIndex;\n \n-    // memory only\n-    mutable bool fMerkleVerified;\n-\n-\n     CMerkleTx()\n     {\n         Init();\n@@ -490,7 +485,6 @@ class CMerkleTx : public CTransaction\n     {\n         hashBlock = 0;\n         nIndex = -1;\n-        fMerkleVerified = false;\n     }\n \n     ADD_SERIALIZE_METHODS;\n@@ -500,7 +494,11 @@ class CMerkleTx : public CTransaction\n         READWRITE(*(CTransaction*)this);\n         nVersion = this->nVersion;\n         READWRITE(hashBlock);\n-        READWRITE(vMerkleBranch);\n+        {\n+            // Ignore merkle branch.\n+            std::vector<uint256> vMerkleBranch;\n+            READWRITE(vMerkleBranch);\n+        }\n         READWRITE(nIndex);\n     }\n "
      }
    ]
  }
]