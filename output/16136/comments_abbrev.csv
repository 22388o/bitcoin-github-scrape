ajtowns,2019-06-03 01:40:48,"If you're running the CHECK no matter what, could consider making the failure configurable at runtime (could default to not abort on mainnet, but to abort on testnet/regtest maybe?). Something like:\n\n    do {\n         if (g_abort_on_check_fail) {\n              fprintf(stderr, ...); std::abort();\n         } else {\n              LogPrintf(...);\n         }\n    } while(0)",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-498086171,498086171,
practicalswift,2019-06-03 07:23:51,@ajtowns I like the idea of making the default depend on the network. I'll let others chime in regarding how to choose the defaults and how to override it and then update based on the feedback :-),https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-498142949,498142949,
sdaftuar,2019-06-06 15:51:39,Concept ACK -- I often want something that's like an assert but wouldn't cause cascading failure on the network if I'm wrong.,https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-499554853,499554853,
morcos,2019-06-07 12:17:10,"Concept ACK, but I also really like the idea of LogPrinting these (either no matter what or at least if some level of debug logging is on).   Part of the benefit would be in catching rare conditions that might not occur in regular testing but would show up occasionally among thousands of real world users.  The LogPrint could direct the user to report the error on GitHub.",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-499862751,499862751,
MarcoFalke,2019-06-07 12:31:45,The link could even prefill all the additional debug information. E.g. https://github.com/bitcoin/bitcoin/issues/new?title=file_name.cpp:LINE_NR%20CHECK%20failed%20bla&body=more%20bla,https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-499866876,499866876,
Empact,2019-06-10 02:27:00,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-500271507,500271507,
ryanofsky,2019-06-13 16:36:17,"This change seems good, but I'd suggest calling the macro `DCHECK` instead of `CHECK` because:\n\n- It would suggest that the macro has different behavior in debug vs release builds.\n- It would allow us to create a corresponding `CHECK` macro in the future to replace our current non-standard usages of `assert` (in standard c++, asserts are compiled out of release builds, but not in bitcoin c++",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-501779934,501779934,
MarcoFalke,2019-10-10 18:06:00,Why was this closed?,https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-540704522,540704522,
practicalswift,2019-10-10 18:28:42,@MarcoFalke I try to limit the number of PR:s I have opened and it seemed like this had a low probability of being merged. Seems I was wrong: now re-opened :),https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-540713739,540713739,
practicalswift,2019-10-10 18:48:47,"Rebased and renamed back from `DCHECK` to the originally suggested name `CHECK` (as first suggested by @sipa in #4576).\n\nI find `DCHECK` somewhat unintuitive: I prefer `CHECK` or `ASSUME`. Let's bikeshed! :)",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-540722915,540722915,
ryanofsky,2019-10-24 15:34:53,"> Rebased and renamed back from `DCHECK` to the originally suggested name `CHECK` (as first suggested by @sipa in #4576).\n> \n> I find `DCHECK` somewhat unintuitive: I prefer `CHECK` or `ASSUME`. Let's bikeshed! :)\n\nNot interested in bikeshedding and this is fine if other reviewers want it, but I'll just point out that as of b1eba5575b53dda9bb7765701d4a6305d07faa74 this PR makes `assert` an",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-545975343,545975343,
practicalswift,2019-10-24 15:43:28,@ryanofsky What about `ASSUME`? :),https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-545979040,545979040,
ryanofsky,2019-10-24 16:18:06,"> @ryanofsky What about `ASSUME`? :)\n\nSeems fine, and I personally don't care about the name. I'm trying to say that if you add a macro that aborts and reports errors in debug builds only, it would be good to have a corresponding macro that does the same thing in all builds, and that naming I've seen before for this is CHECK/DCHECK.\n\nTaking a step back, the only reason I have interest in t",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-545993867,545993867,
MarcoFalke,2019-10-28 16:35:16,Should be moved to the existing `util/check.h`,https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547033145,547033145,
practicalswift,2019-10-28 23:21:34,@MarcoFalke Good idea: addressed! Please re-review.,https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547188017,547188017,
MarcoFalke,2019-10-29 12:52:39,"Would it make sense to add a wrapper around our current `assert`, which always aborts when false (even in production, with debug disabled)?\n\nWe have vague error reports like #17298, that obviously lack details in the debug log, because logging wasn't enabled. Maybe an wrapper around our current assert that still aborts the program, but also dumps a full `-debug=1` log for the last `n` (lets sa",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547404311,547404311,
practicalswift,2019-10-29 13:05:51,"@MarcoFalke That could be nifty to have. I would like to keep this PR and `ASSUME(…)` as simple as possible, so I'll leave that for a future PR.\n\nMy suggestion is that we start with something super simple in and then we can iterate from that as we gain experience with the different use cases :)",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547409378,547409378,
MarcoFalke,2019-10-29 19:46:22,"> @MarcoFalke That could be nifty to have. I would like to keep this PR and ASSUME(…) as simple as possible, so I'll leave that for a future PR.\n\nFine, but at the very least we should decide on naming. I guess, given that this patch does not use the `CHECK`/`DCHECK` naming, your proposed naming would be `ASSERT`/`ASSUME`?",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547597970,547597970,
practicalswift,2019-10-29 22:08:20,"@MarcoFalke I think `ASSERT` and `ASSUME` are fine, but I'm happy to change that to whatever the consensus opinion is :)\n\nI've encountered a few places where `ASSUME` would be handy when fuzzing: places where I want the program to abort when running under a fuzzer but where the error condition is not severe enough to warrant aborting in production. So for me getting the macro in is the importa",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547651308,547651308,
MarcoFalke,2019-10-30 00:45:15,"ACK 674f9d59ba4c1a1d4662e79467cc417a2988cf15, didn't look at the configure changes",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547690626,547690626,
practicalswift,2020-03-10 08:12:14,Closing due to lack of interest :),https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-596957089,596957089,
ajtowns,2020-03-12 19:11:43,"We have `CHECK_NONFATAL(cond)` in `util/check.h` now, which is always compiled, always evaluated, but only throws an exception rather than aborting the program. Probably best to see how that works for a while",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-598368328,598368328,
MarcoFalke,2020-03-12 19:45:49,"I think `ASSUME` serves a different use case than `CHECK_NONFATAL`, but it might be best to introduce it when it is actually used in the code.",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-598381082,598381082,
MarcoFalke,2020-10-12 21:06:03,Revived in #20138 with an actual use-case (I hope),https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-707345773,707345773,
hebasto,2020-10-30 22:03:31,"> Revived in #20138 with an actual use-case (I hope)\n\nActually,  #20255 :)",https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-719820313,719820313,
MarcoFalke,2019-06-13 16:03:52,"Looks like you are using this wrong. This should be an assert, since it is dereferenced later on.",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293458154,293458154,src/net_processing.cpp
MarcoFalke,2019-06-13 16:04:45,"Shorter without loss of precision:\n\n```suggestion\n// * otherwise:\n```",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293458551,293458551,src/check.h
MarcoFalke,2019-06-13 16:06:02,This is missing an explanation when to use it. How is it different from `assert` or `std::logic_error`? Where should it be used in net or in consensus/validation code?,https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293459112,293459112,src/check.h
practicalswift,2019-06-13 18:36:21,I agree it is not an optimal example: `assert(…);` would obviously be the more appropriate choice for cases where we want an unconditional `abort` if the assumption does not hold. I'll remove this example.,https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293521769,293521769,src/net_processing.cpp
practicalswift,2019-06-13 20:21:57,Good point! Fixed!,https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293560403,293560403,src/check.h
MarcoFalke,2019-06-13 21:07:16,"```suggestion\n// Bitcoin Core is always compiled with assertions enabled. assert(...)\n```",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293577017,293577017,src/check.h
MarcoFalke,2019-06-13 21:08:03,"```suggestion\n        tfm::format(std::cerr, ""%s:%d: %s: DCHECK(%s) failed.\n"", \\n```",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293577281,293577281,src/check.h
practicalswift,2019-06-13 21:23:02,Added additional documentation. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293582542,293582542,src/check.h
ryanofsky,2019-06-13 21:23:10,"It's possible I misunderstood part of the intent of this PR, but I don't think the expression should be evaluated in non-debug builds. Few reasons:\n\n- It would encourage putting code that has external side effects in DCHECK macros, which would make it easier not to notice the effects of invoking code, and be bad for readability.\n- It would encourage general misuse of the DCHECK macro. Like I",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293582577,293582577,src/check.h
practicalswift,2019-06-13 21:31:48,"It seemed like the consensus in #4576 was to make the expression evaluated also in non-debug builds. FWIW, that is consistent with how `CHECK(…)` works in `secp256k1`.\n\nI don't have a strong opinion here: I'll let others chime in and adjust the code to meet consensus.",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293585322,293585322,src/check.h
practicalswift,2019-06-13 21:35:17,Changed!,https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293586310,293586310,src/check.h
practicalswift,2019-06-13 21:35:27,Fixed!,https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293586376,293586376,src/check.h
MarcoFalke,2019-06-14 18:35:13,"```suggestion\n        tfm::format(std::cerr, ""%s:%d: %s: DCHECK(%s) failed. You may report this issue here: %s.\n"", \\n        ...\n        PACKAGE_BUGREPORT)\n```",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293929417,293929417,src/check.h
practicalswift,2019-06-14 21:15:34,Added!,https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293990122,293990122,src/check.h
ajtowns,2019-06-15 10:47:03,"Seems like clarifying the intent of the PR would be a good first step...\n\nI think there's four things we could have:\n\n * `assert(chk)` -- always evaluate, always abort if it failes\n * `CHECK(chk)` -- always evaluate, but only abort if in regtest or similar; maybe log errors if not aborting.\n * `debug_assert(chk)` -- evaluate condition only when invoked with a special option like `-debu",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r294043004,294043004,src/check.h
ajtowns,2019-10-25 01:23:23,"""false""",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r338853579,338853579,src/assume.h
ajtowns,2019-10-25 01:33:34,"I'm still not sure it wouldn't be better unconditionally log (independent of compile flags) something like `%s:%d: ASSUME(%s) failed` and change the testing harnesses to emit a failure if that happens? If we continue fine when running release versions anyway, wouldn't it make more sense to capture all the failures while testing to reduce the number of restarts needed?\n\nMy inclination would be ",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r338855020,338855020,src/assume.h
ajtowns,2019-10-25 01:43:43,"It's not really clear to me when you should choose `assert`  vs `ASSUME` -- neither is any quicker because both always run the test, and if the assumptions you had when writing the code were wrong, how confident can you really be that continuing won't cause horrible corruption to decide that continuing is okay?",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r338856437,338856437,src/assume.h
MarcoFalke,2019-10-29 13:13:55,Shouldn't this be logged even if the debug flag is not set at compile time?,https://github.com/bitcoin/bitcoin/pull/16136#discussion_r340065001,340065001,src/util/check.h
practicalswift,2019-10-29 13:23:02,"That's not how I intended it to work, but now that you suggest it there is perhaps no downside in logging it also in non-debug/non-fuzz mode? Since we're only writing to stderr (and not to disk) it should be safe. I'll update.",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r340069709,340069709,src/util/check.h
MarcoFalke,2019-10-29 19:43:45,"has been fixed, I believe",https://github.com/bitcoin/bitcoin/pull/16136#discussion_r340287925,340287925,src/assume.h
