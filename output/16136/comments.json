[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/498086171",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-498086171",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 498086171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODA4NjE3MQ==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-03T01:40:48Z",
    "updated_at": "2019-06-03T01:40:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "If you're running the CHECK no matter what, could consider making the failure configurable at runtime (could default to not abort on mainnet, but to abort on testnet/regtest maybe?). Something like:\r\n\r\n    do {\r\n         if (g_abort_on_check_fail) {\r\n              fprintf(stderr, ...); std::abort();\r\n         } else {\r\n              LogPrintf(...);\r\n         }\r\n    } while(0)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/498086171/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/498142949",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-498142949",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 498142949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODE0Mjk0OQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-03T07:23:51Z",
    "updated_at": "2019-06-03T07:23:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ajtowns I like the idea of making the default depend on the network. I'll let others chime in regarding how to choose the defaults and how to override it and then update based on the feedback :-)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/498142949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/499554853",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-499554853",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 499554853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTU1NDg1Mw==",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-06T15:51:39Z",
    "updated_at": "2019-06-06T15:51:39Z",
    "author_association": "MEMBER",
    "body": "Concept ACK -- I often want something that's like an assert but wouldn't cause cascading failure on the network if I'm wrong.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/499554853/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/499862751",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-499862751",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 499862751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTg2Mjc1MQ==",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?u=b7dd63827227d69794b5fe28797b1bd107b930dd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-07T12:17:10Z",
    "updated_at": "2019-06-07T12:17:10Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, but I also really like the idea of LogPrinting these (either no matter what or at least if some level of debug logging is on).   Part of the benefit would be in catching rare conditions that might not occur in regular testing but would show up occasionally among thousands of real world users.  The LogPrint could direct the user to report the error on GitHub.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/499862751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/499866876",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-499866876",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 499866876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTg2Njg3Ng==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-07T12:31:45Z",
    "updated_at": "2019-06-07T12:31:45Z",
    "author_association": "MEMBER",
    "body": "The link could even prefill all the additional debug information. E.g. https://github.com/bitcoin/bitcoin/issues/new?title=file_name.cpp:LINE_NR%20CHECK%20failed%20bla&body=more%20bla",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/499866876/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/500271507",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-500271507",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 500271507,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDI3MTUwNw==",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?u=a1574ca2038ff1dfaa9a7764c59ea5ff4f305b5d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-10T02:27:00Z",
    "updated_at": "2019-06-10T02:27:00Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/500271507/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/501779934",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-501779934",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 501779934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTc3OTkzNA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T16:36:17Z",
    "updated_at": "2019-06-13T16:36:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "This change seems good, but I'd suggest calling the macro `DCHECK` instead of `CHECK` because:\r\n\r\n- It would suggest that the macro has different behavior in debug vs release builds.\r\n- It would allow us to create a corresponding `CHECK` macro in the future to replace our current non-standard usages of `assert` (in standard c++, asserts are compiled out of release builds, but not in bitcoin c++).\r\n- It would be more consistent with other support libraries ([glog](https://github.com/google/glog/blob/ba8a9f6952d04d1403b97df24e6836227751454e/src/glog/logging.h.in#L582-L586), [folly](https://github.com/facebook/folly/blob/5a68ed6f9cfbe634af578b573e092a16b038c02e/folly/logging/xlog.h#L387-L395)) which use `CHECK` to abort unconditionally and `DCHECK` to only abort in debug builds.\r\n\r\nFor reference:\r\n\r\n|                                                                                                                                   | Condition is compiled | Condition is evaluated | Program is aborted   |\r\n|-----------------------------------------------------------------------------------------------------------------------------------|-----------------------|------------------------|----------------------|\r\n| C++ standard `assert`                                                                                                             | if `NDEBUG` is unset  | if `NDEBUG` is unset   | if `NDEBUG` is unset |\r\n| Bitcoin `assert`                                                                                                                  | always                | always                 | always               |\r\n| glog [`CHECK`](https://github.com/google/glog/blob/ba8a9f6952d04d1403b97df24e6836227751454e/src/glog/logging.h.in#L582-L586)      | always                | always                 | always               |\r\n| glog [`DCHECK`](https://github.com/google/glog/blob/ba8a9f6952d04d1403b97df24e6836227751454e/src/glog/logging.h.in#L1034-L1038)   | always                | if `NDEBUG` is unset   | if `NDEBUG` is unset |\r\n| folly [`XCHECK`](https://github.com/facebook/folly/blob/5a68ed6f9cfbe634af578b573e092a16b038c02e/folly/logging/xlog.h#L387-L395)  | always                | always                 | always               |\r\n| folly [`XDCHECK`](https://github.com/facebook/folly/blob/5a68ed6f9cfbe634af578b573e092a16b038c02e/folly/logging/xlog.h#L445-L457) | if `NDEBUG` is unset  | if `NDEBUG` is unset   | if `NDEBUG` is unset |\r\n\r\nRe: https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-499862751 and https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-499866876 I think what Marco and Alex are asking for is useful but out of scope for an assert or check macro. I think asserts and checks are best for succinctly conveying assumptions made by the code author that in no cases should ever be violated, and conveying at a very coarse level how crucial those assumptions are (abort-worthy or not). The main point of asserts and checks should be to make code more readable and communicate how to think about it.\r\n\r\nOnce you're in the realm of conditions that you think should never happen, but are more complicated and might end up happening anyway, you are really better off writing an actual log print with text that would put the error into context. You may also want to abort in these cases, which is why logging frameworks support `FATAL` and `DFATAL` severity levels.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/501779934/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540704522",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-540704522",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 540704522,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDcwNDUyMg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-10T18:06:00Z",
    "updated_at": "2019-10-10T18:06:00Z",
    "author_association": "MEMBER",
    "body": "Why was this closed?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540704522/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540713739",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-540713739",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 540713739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDcxMzczOQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-10T18:28:42Z",
    "updated_at": "2019-10-10T18:28:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke I try to limit the number of PR:s I have opened and it seemed like this had a low probability of being merged. Seems I was wrong: now re-opened :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540713739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540722915",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-540722915",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 540722915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDcyMjkxNQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-10T18:48:47Z",
    "updated_at": "2019-10-10T18:48:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and renamed back from `DCHECK` to the originally suggested name `CHECK` (as first suggested by @sipa in #4576).\r\n\r\nI find `DCHECK` somewhat unintuitive: I prefer `CHECK` or `ASSUME`. Let's bikeshed! :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540722915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545975343",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-545975343",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 545975343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTk3NTM0Mw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-24T15:34:53Z",
    "updated_at": "2019-10-24T15:34:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Rebased and renamed back from `DCHECK` to the originally suggested name `CHECK` (as first suggested by @sipa in #4576).\r\n> \r\n> I find `DCHECK` somewhat unintuitive: I prefer `CHECK` or `ASSUME`. Let's bikeshed! :)\r\n\r\nNot interested in bikeshedding and this is fine if other reviewers want it, but I'll just point out that as of b1eba5575b53dda9bb7765701d4a6305d07faa74 this PR makes `assert` and `CHECK` mean the exact opposite things they mean in other C++ codebases, where `CHECK` aborts in all builds and `assert` aborts in debug builds only (examples in table above https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-501779934).\r\n\r\nA good way to provide more clarity, I think, would be to follow convention used in other libraries and add a pair of `CHECK`/`DCHECK` macros instead of a single macro, avoiding use of any assert. An advantage of doing this is that both macros could do extra things like log to `debug.log` or capture stack traces before aborting, which aren't so easily possible with `assert`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545975343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545979040",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-545979040",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 545979040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTk3OTA0MA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-24T15:43:28Z",
    "updated_at": "2019-10-24T15:43:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ryanofsky What about `ASSUME`? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545979040/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545993867",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-545993867",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 545993867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTk5Mzg2Nw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-24T16:18:06Z",
    "updated_at": "2019-10-24T16:24:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @ryanofsky What about `ASSUME`? :)\r\n\r\nSeems fine, and I personally don't care about the name. I'm trying to say that if you add a macro that aborts and reports errors in debug builds only, it would be good to have a corresponding macro that does the same thing in all builds, and that naming I've seen before for this is CHECK/DCHECK.\r\n\r\nTaking a step back, the only reason I have interest in this PR is that I think current `assert` macro sucks, and that it's be nice to have a better macro that can do things like log to debug.log, capture stack traces, suggest bug reporting, etc.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545993867/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547033145",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547033145",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 547033145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzAzMzE0NQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-28T16:35:16Z",
    "updated_at": "2019-10-28T16:35:16Z",
    "author_association": "MEMBER",
    "body": "Should be moved to the existing `util/check.h`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547033145/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547188017",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547188017",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 547188017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzE4ODAxNw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-28T23:21:34Z",
    "updated_at": "2019-10-28T23:21:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke Good idea: addressed! Please re-review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547188017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547404311",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547404311",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 547404311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzQwNDMxMQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-29T12:52:39Z",
    "updated_at": "2019-10-29T12:52:39Z",
    "author_association": "MEMBER",
    "body": "Would it make sense to add a wrapper around our current `assert`, which always aborts when false (even in production, with debug disabled)?\r\n\r\nWe have vague error reports like #17298, that obviously lack details in the debug log, because logging wasn't enabled. Maybe an wrapper around our current assert that still aborts the program, but also dumps a full `-debug=1` log for the last `n` (lets say 10 or 100) lines of debug log?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547404311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547409378",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547409378",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 547409378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzQwOTM3OA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-29T13:05:51Z",
    "updated_at": "2019-10-29T13:05:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke That could be nifty to have. I would like to keep this PR and `ASSUME(\u2026)` as simple as possible, so I'll leave that for a future PR.\r\n\r\nMy suggestion is that we start with something super simple in and then we can iterate from that as we gain experience with the different use cases :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547409378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547597970",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547597970",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 547597970,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzU5Nzk3MA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-29T19:46:22Z",
    "updated_at": "2019-10-29T19:46:22Z",
    "author_association": "MEMBER",
    "body": "> @MarcoFalke That could be nifty to have. I would like to keep this PR and ASSUME(\u2026) as simple as possible, so I'll leave that for a future PR.\r\n\r\nFine, but at the very least we should decide on naming. I guess, given that this patch does not use the `CHECK`/`DCHECK` naming, your proposed naming would be `ASSERT`/`ASSUME`?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547597970/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547651308",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547651308",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 547651308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzY1MTMwOA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-29T22:08:20Z",
    "updated_at": "2019-10-29T22:08:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke I think `ASSERT` and `ASSUME` are fine, but I'm happy to change that to whatever the consensus opinion is :)\r\n\r\nI've encountered a few places where `ASSUME` would be handy when fuzzing: places where I want the program to abort when running under a fuzzer but where the error condition is not severe enough to warrant aborting in production. So for me getting the macro in is the important thing -- I can live with any name :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547651308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547690626",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-547690626",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 547690626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzY5MDYyNg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T00:45:15Z",
    "updated_at": "2019-10-30T00:45:15Z",
    "author_association": "MEMBER",
    "body": "ACK 674f9d59ba4c1a1d4662e79467cc417a2988cf15, didn't look at the configure changes",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547690626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596957089",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-596957089",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 596957089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Njk1NzA4OQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-10T08:12:14Z",
    "updated_at": "2020-03-10T08:12:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing due to lack of interest :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596957089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598368328",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-598368328",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 598368328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODM2ODMyOA==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-12T19:11:43Z",
    "updated_at": "2020-03-12T19:11:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "We have `CHECK_NONFATAL(cond)` in `util/check.h` now, which is always compiled, always evaluated, but only throws an exception rather than aborting the program. Probably best to see how that works for a while",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598368328/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598381082",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-598381082",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 598381082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODM4MTA4Mg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-12T19:45:49Z",
    "updated_at": "2020-03-12T19:45:49Z",
    "author_association": "MEMBER",
    "body": "I think `ASSUME` serves a different use case than `CHECK_NONFATAL`, but it might be best to introduce it when it is actually used in the code.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598381082/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/707345773",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-707345773",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 707345773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzM0NTc3Mw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-12T21:06:03Z",
    "updated_at": "2020-10-12T21:06:03Z",
    "author_association": "MEMBER",
    "body": "Revived in #20138 with an actual use-case (I hope)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/707345773/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719820313",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-719820313",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16136",
    "id": 719820313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxOTgyMDMxMw==",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?u=7297e8aaf9188c0cb98bc549a8a02a1dc8d59e4c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-30T22:03:31Z",
    "updated_at": "2020-10-30T22:03:31Z",
    "author_association": "MEMBER",
    "body": "> Revived in #20138 with an actual use-case (I hope)\r\n\r\nActually,  #20255 :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719820313/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293458154",
    "pull_request_review_id": 249452060,
    "id": 293458154,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzQ1ODE1NA==",
    "diff_hunk": "@@ -1691,6 +1692,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                 }\n                 pindexWalk = pindexWalk->pprev;\n             }\n+            CHECK(pindexWalk);",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "d720388339dba45db9049dc01492770e47d27bee",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Looks like you are using this wrong. This should be an assert, since it is dereferenced later on.",
    "created_at": "2019-06-13T16:03:52Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293458154",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293458154"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293458154"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293458154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1695,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293458551",
    "pull_request_review_id": 249452060,
    "id": 293458551,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzQ1ODU1MQ==",
    "diff_hunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// CHECK(expression)\n+// =================\n+// * If compiled with -DABORT_ON_FAILED_CHECK (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * If compiled without -DABORT_ON_FAILED_CHECK:",
    "path": "src/check.h",
    "position": null,
    "original_position": 17,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "d720388339dba45db9049dc01492770e47d27bee",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Shorter without loss of precision:\r\n\r\n```suggestion\r\n// * otherwise:\r\n```",
    "created_at": "2019-06-13T16:04:45Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293458551",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293458551"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293458551"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293458551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293459112",
    "pull_request_review_id": 249452060,
    "id": 293459112,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzQ1OTExMg==",
    "diff_hunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// CHECK(expression)\n+// =================\n+// * If compiled with -DABORT_ON_FAILED_CHECK (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * If compiled without -DABORT_ON_FAILED_CHECK:\n+//   Evaluate expression and continue execution.\n+//\n+// Example\n+// =======\n+// int main(void) {\n+//     CHECK(IsFoo());\n+//     ...\n+// }\n+//\n+// If !IsFoo() and -DABORT_ON_FAILED_CHECK, then:\n+//     filename.cpp:123: main: CHECK(IsFoo()) failed.\n+//     Aborted\n+// Otherwise the execution continues.\n+\n+#ifdef ABORT_ON_FAILED_CHECK\n+#define CHECK_FAILURE(expression, file, line, func)       \\\n+    do {                                                  \\\n+        fprintf(stderr, \"%s:%d: %s: CHECK(%s) failed.\\n\", \\\n+            file, line, func, expression);                \\\n+        std::abort();                                     \\\n+    } while (false)\n+#else\n+#define CHECK_FAILURE(expression, file, line, func) ((void)0)\n+#endif\n+\n+#define CHECK(expression)                                             \\",
    "path": "src/check.h",
    "position": null,
    "original_position": 43,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "d720388339dba45db9049dc01492770e47d27bee",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is missing an explanation when to use it. How is it different from `assert` or `std::logic_error`? Where should it be used in net or in consensus/validation code?",
    "created_at": "2019-06-13T16:06:02Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293459112",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293459112"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293459112"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293459112/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293521769",
    "pull_request_review_id": 249532952,
    "id": 293521769,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzUyMTc2OQ==",
    "diff_hunk": "@@ -1691,6 +1692,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                 }\n                 pindexWalk = pindexWalk->pprev;\n             }\n+            CHECK(pindexWalk);",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "d720388339dba45db9049dc01492770e47d27bee",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree it is not an optimal example: `assert(\u2026);` would obviously be the more appropriate choice for cases where we want an unconditional `abort` if the assumption does not hold. I'll remove this example.",
    "created_at": "2019-06-13T18:36:21Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293521769",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293521769"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293521769"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293521769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1695,
    "side": "RIGHT",
    "in_reply_to_id": 293458154
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293560403",
    "pull_request_review_id": 249583810,
    "id": 293560403,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU2MDQwMw==",
    "diff_hunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// CHECK(expression)\n+// =================\n+// * If compiled with -DABORT_ON_FAILED_CHECK (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * If compiled without -DABORT_ON_FAILED_CHECK:",
    "path": "src/check.h",
    "position": null,
    "original_position": 17,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "d720388339dba45db9049dc01492770e47d27bee",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point! Fixed!",
    "created_at": "2019-06-13T20:21:57Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293560403",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293560403"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293560403"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293560403/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 293458551
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293577017",
    "pull_request_review_id": 249605573,
    "id": 293577017,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU3NzAxNw==",
    "diff_hunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// DCHECK(expression)\n+// ==================\n+// DCHECK(...) is used to document assumptions.\n+//\n+// Bitcoin is always compiled with assertions enabled. assert(...)",
    "path": "src/check.h",
    "position": null,
    "original_position": 16,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "a32e448b0021d4041e68760f1cb1225d00fd8575",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n// Bitcoin Core is always compiled with assertions enabled. assert(...)\r\n```",
    "created_at": "2019-06-13T21:07:16Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293577017",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293577017"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293577017"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293577017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 16,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293577281",
    "pull_request_review_id": 249605573,
    "id": 293577281,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU3NzI4MQ==",
    "diff_hunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// DCHECK(expression)\n+// ==================\n+// DCHECK(...) is used to document assumptions.\n+//\n+// Bitcoin is always compiled with assertions enabled. assert(...)\n+// is thus only appropriate for documenting critical assumptions\n+// where a failed assumption should lead to immediate abortion also\n+// in production environments.\n+//\n+// DCHECK(...) works like assert(...) if -DABORT_ON_FAILED_DCHECK\n+// and is side-effect safe.\n+//\n+// More specifically:\n+//\n+// * If compiled with -DABORT_ON_FAILED_DCHECK (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * Otherwise:\n+//   Evaluate expression and continue execution.\n+//\n+// ABORT_ON_FAILED_DCHECK should not be set in production environments.\n+//\n+// Example\n+// =======\n+// int main(void) {\n+//     DCHECK(IsFoo());\n+//     ...\n+// }\n+//\n+// If !IsFoo() and -DABORT_ON_FAILED_DCHECK, then:\n+//     filename.cpp:123: main: DCHECK(IsFoo()) failed.\n+//     Aborted\n+// Otherwise the execution continues.\n+\n+#ifdef ABORT_ON_FAILED_DCHECK\n+#define DCHECK_FAILURE(expression, file, line, func)       \\\n+    do {                                                  \\\n+        fprintf(stderr, \"%s:%d: %s: DCHECK(%s) failed.\\n\", \\",
    "path": "src/check.h",
    "position": null,
    "original_position": 49,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "a32e448b0021d4041e68760f1cb1225d00fd8575",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        tfm::format(std::cerr, \"%s:%d: %s: DCHECK(%s) failed.\\n\", \\\r\n```",
    "created_at": "2019-06-13T21:08:03Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293577281",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293577281"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293577281"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293577281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 49,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293582542",
    "pull_request_review_id": 249612578,
    "id": 293582542,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU4MjU0Mg==",
    "diff_hunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// CHECK(expression)\n+// =================\n+// * If compiled with -DABORT_ON_FAILED_CHECK (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * If compiled without -DABORT_ON_FAILED_CHECK:\n+//   Evaluate expression and continue execution.\n+//\n+// Example\n+// =======\n+// int main(void) {\n+//     CHECK(IsFoo());\n+//     ...\n+// }\n+//\n+// If !IsFoo() and -DABORT_ON_FAILED_CHECK, then:\n+//     filename.cpp:123: main: CHECK(IsFoo()) failed.\n+//     Aborted\n+// Otherwise the execution continues.\n+\n+#ifdef ABORT_ON_FAILED_CHECK\n+#define CHECK_FAILURE(expression, file, line, func)       \\\n+    do {                                                  \\\n+        fprintf(stderr, \"%s:%d: %s: CHECK(%s) failed.\\n\", \\\n+            file, line, func, expression);                \\\n+        std::abort();                                     \\\n+    } while (false)\n+#else\n+#define CHECK_FAILURE(expression, file, line, func) ((void)0)\n+#endif\n+\n+#define CHECK(expression)                                             \\",
    "path": "src/check.h",
    "position": null,
    "original_position": 43,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "d720388339dba45db9049dc01492770e47d27bee",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added additional documentation. Please re-review :-)",
    "created_at": "2019-06-13T21:23:02Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293582542",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293582542"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293582542"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293582542/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 293459112
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293582577",
    "pull_request_review_id": 249611606,
    "id": 293582577,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU4MjU3Nw==",
    "diff_hunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// DCHECK(expression)\n+// ==================\n+// DCHECK(...) is used to document assumptions.\n+//\n+// Bitcoin is always compiled with assertions enabled. assert(...)\n+// is thus only appropriate for documenting critical assumptions\n+// where a failed assumption should lead to immediate abortion also\n+// in production environments.\n+//\n+// DCHECK(...) works like assert(...) if -DABORT_ON_FAILED_DCHECK\n+// and is side-effect safe.\n+//\n+// More specifically:\n+//\n+// * If compiled with -DABORT_ON_FAILED_DCHECK (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * Otherwise:\n+//   Evaluate expression and continue execution.\n+//\n+// ABORT_ON_FAILED_DCHECK should not be set in production environments.\n+//\n+// Example\n+// =======\n+// int main(void) {\n+//     DCHECK(IsFoo());\n+//     ...\n+// }\n+//\n+// If !IsFoo() and -DABORT_ON_FAILED_DCHECK, then:\n+//     filename.cpp:123: main: DCHECK(IsFoo()) failed.\n+//     Aborted\n+// Otherwise the execution continues.\n+\n+#ifdef ABORT_ON_FAILED_DCHECK\n+#define DCHECK_FAILURE(expression, file, line, func)       \\\n+    do {                                                  \\\n+        fprintf(stderr, \"%s:%d: %s: DCHECK(%s) failed.\\n\", \\\n+            file, line, func, expression);                \\\n+        std::abort();                                     \\\n+    } while (false)\n+#else\n+#define DCHECK_FAILURE(expression, file, line, func) ((void)0)\n+#endif\n+\n+#define DCHECK(expression)                                             \\\n+    do {                                                              \\\n+        if (!(expression)) {                                          \\",
    "path": "src/check.h",
    "position": null,
    "original_position": 59,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "a32e448b0021d4041e68760f1cb1225d00fd8575",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's possible I misunderstood part of the intent of this PR, but I don't think the expression should be evaluated in non-debug builds. Few reasons:\r\n\r\n- It would encourage putting code that has external side effects in DCHECK macros, which would make it easier not to notice the effects of invoking code, and be bad for readability.\r\n- It would encourage general misuse of the DCHECK macro. Like I wrote in my earlier comment I think the best use of DCHECK is just to state basic assumptions that code makes so it is more readable, and to help catch simple bugs during development. It shouldn't be used as lazy way to handle errors in release builds and avoid having to write readable error messages that put errors into context.\r\n- It could potentially make release code less efficient.\r\n- It would be inconsistent with other DCHECK implementations. Neither the glog nor folly DCHECK macros have side effects in release builds (see https://github.com/bitcoin/bitcoin/pull/16136#issuecomment-501779934) .\r\n\r\nMy suggestion would be to rename `ABORT_ON_FAILED_DCHECK` to `ENABLE_DCHECK` and when it's not defined either make `DCHECK` a no-op like folly, or make it compile the condition expression without executing it like glog.",
    "created_at": "2019-06-13T21:23:10Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293582577",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293582577"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293582577"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293582577/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293585322",
    "pull_request_review_id": 249616164,
    "id": 293585322,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU4NTMyMg==",
    "diff_hunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// DCHECK(expression)\n+// ==================\n+// DCHECK(...) is used to document assumptions.\n+//\n+// Bitcoin is always compiled with assertions enabled. assert(...)\n+// is thus only appropriate for documenting critical assumptions\n+// where a failed assumption should lead to immediate abortion also\n+// in production environments.\n+//\n+// DCHECK(...) works like assert(...) if -DABORT_ON_FAILED_DCHECK\n+// and is side-effect safe.\n+//\n+// More specifically:\n+//\n+// * If compiled with -DABORT_ON_FAILED_DCHECK (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * Otherwise:\n+//   Evaluate expression and continue execution.\n+//\n+// ABORT_ON_FAILED_DCHECK should not be set in production environments.\n+//\n+// Example\n+// =======\n+// int main(void) {\n+//     DCHECK(IsFoo());\n+//     ...\n+// }\n+//\n+// If !IsFoo() and -DABORT_ON_FAILED_DCHECK, then:\n+//     filename.cpp:123: main: DCHECK(IsFoo()) failed.\n+//     Aborted\n+// Otherwise the execution continues.\n+\n+#ifdef ABORT_ON_FAILED_DCHECK\n+#define DCHECK_FAILURE(expression, file, line, func)       \\\n+    do {                                                  \\\n+        fprintf(stderr, \"%s:%d: %s: DCHECK(%s) failed.\\n\", \\\n+            file, line, func, expression);                \\\n+        std::abort();                                     \\\n+    } while (false)\n+#else\n+#define DCHECK_FAILURE(expression, file, line, func) ((void)0)\n+#endif\n+\n+#define DCHECK(expression)                                             \\\n+    do {                                                              \\\n+        if (!(expression)) {                                          \\",
    "path": "src/check.h",
    "position": null,
    "original_position": 59,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "a32e448b0021d4041e68760f1cb1225d00fd8575",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It seemed like the consensus in #4576 was to make the expression evaluated also in non-debug builds. FWIW, that is consistent with how `CHECK(\u2026)` works in `secp256k1`.\r\n\r\nI don't have a strong opinion here: I'll let others chime in and adjust the code to meet consensus.",
    "created_at": "2019-06-13T21:31:48Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293585322",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293585322"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293585322"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293585322/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT",
    "in_reply_to_id": 293582577
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293586310",
    "pull_request_review_id": 249617506,
    "id": 293586310,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU4NjMxMA==",
    "diff_hunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// DCHECK(expression)\n+// ==================\n+// DCHECK(...) is used to document assumptions.\n+//\n+// Bitcoin is always compiled with assertions enabled. assert(...)\n+// is thus only appropriate for documenting critical assumptions\n+// where a failed assumption should lead to immediate abortion also\n+// in production environments.\n+//\n+// DCHECK(...) works like assert(...) if -DABORT_ON_FAILED_DCHECK\n+// and is side-effect safe.\n+//\n+// More specifically:\n+//\n+// * If compiled with -DABORT_ON_FAILED_DCHECK (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * Otherwise:\n+//   Evaluate expression and continue execution.\n+//\n+// ABORT_ON_FAILED_DCHECK should not be set in production environments.\n+//\n+// Example\n+// =======\n+// int main(void) {\n+//     DCHECK(IsFoo());\n+//     ...\n+// }\n+//\n+// If !IsFoo() and -DABORT_ON_FAILED_DCHECK, then:\n+//     filename.cpp:123: main: DCHECK(IsFoo()) failed.\n+//     Aborted\n+// Otherwise the execution continues.\n+\n+#ifdef ABORT_ON_FAILED_DCHECK\n+#define DCHECK_FAILURE(expression, file, line, func)       \\\n+    do {                                                  \\\n+        fprintf(stderr, \"%s:%d: %s: DCHECK(%s) failed.\\n\", \\",
    "path": "src/check.h",
    "position": null,
    "original_position": 49,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "a32e448b0021d4041e68760f1cb1225d00fd8575",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Changed!",
    "created_at": "2019-06-13T21:35:17Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293586310",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293586310"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293586310"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293586310/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 49,
    "side": "RIGHT",
    "in_reply_to_id": 293577281
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293586376",
    "pull_request_review_id": 249617575,
    "id": 293586376,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU4NjM3Ng==",
    "diff_hunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// DCHECK(expression)\n+// ==================\n+// DCHECK(...) is used to document assumptions.\n+//\n+// Bitcoin is always compiled with assertions enabled. assert(...)",
    "path": "src/check.h",
    "position": null,
    "original_position": 16,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "a32e448b0021d4041e68760f1cb1225d00fd8575",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed!",
    "created_at": "2019-06-13T21:35:27Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293586376",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293586376"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293586376"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293586376/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 16,
    "side": "RIGHT",
    "in_reply_to_id": 293577017
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293929417",
    "pull_request_review_id": 250061305,
    "id": 293929417,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzkyOTQxNw==",
    "diff_hunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <tinyformat.h>\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// DCHECK(expression)\n+// ==================\n+// DCHECK(...) is used to document assumptions.\n+//\n+// Bitcoin Core is always compiled with assertions enabled. assert(...)\n+// is thus only appropriate for documenting critical assumptions\n+// where a failed assumption should lead to immediate abortion also\n+// in production environments.\n+//\n+// DCHECK(...) works like assert(...) if -DABORT_ON_FAILED_DCHECK\n+// and is side-effect safe.\n+//\n+// More specifically:\n+//\n+// * If compiled with -DABORT_ON_FAILED_DCHECK (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * Otherwise:\n+//   Evaluate expression and continue execution.\n+//\n+// ABORT_ON_FAILED_DCHECK should not be set in production environments.\n+//\n+// Example\n+// =======\n+// int main(void) {\n+//     DCHECK(IsFoo());\n+//     ...\n+// }\n+//\n+// If !IsFoo() and -DABORT_ON_FAILED_DCHECK, then:\n+//     filename.cpp:123: main: DCHECK(IsFoo()) failed.\n+//     Aborted\n+// Otherwise the execution continues.\n+\n+#ifdef ABORT_ON_FAILED_DCHECK\n+#define DCHECK_FAILURE(expression, file, line, func)              \\\n+    do {                                                          \\\n+        tfm::format(std::cerr, \"%s:%d: %s: DCHECK(%s) failed.\\n\", \\",
    "path": "src/check.h",
    "position": null,
    "original_position": 51,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "d7406f1d2758bc9dc48145d59d80747876145499",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        tfm::format(std::cerr, \"%s:%d: %s: DCHECK(%s) failed. You may report this issue here: %s.\\n\", \\\r\n        ...\r\n        PACKAGE_BUGREPORT)\r\n```",
    "created_at": "2019-06-14T18:35:13Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293929417",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293929417"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293929417"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293929417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293990122",
    "pull_request_review_id": 250131799,
    "id": 293990122,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5Mzk5MDEyMg==",
    "diff_hunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <tinyformat.h>\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// DCHECK(expression)\n+// ==================\n+// DCHECK(...) is used to document assumptions.\n+//\n+// Bitcoin Core is always compiled with assertions enabled. assert(...)\n+// is thus only appropriate for documenting critical assumptions\n+// where a failed assumption should lead to immediate abortion also\n+// in production environments.\n+//\n+// DCHECK(...) works like assert(...) if -DABORT_ON_FAILED_DCHECK\n+// and is side-effect safe.\n+//\n+// More specifically:\n+//\n+// * If compiled with -DABORT_ON_FAILED_DCHECK (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * Otherwise:\n+//   Evaluate expression and continue execution.\n+//\n+// ABORT_ON_FAILED_DCHECK should not be set in production environments.\n+//\n+// Example\n+// =======\n+// int main(void) {\n+//     DCHECK(IsFoo());\n+//     ...\n+// }\n+//\n+// If !IsFoo() and -DABORT_ON_FAILED_DCHECK, then:\n+//     filename.cpp:123: main: DCHECK(IsFoo()) failed.\n+//     Aborted\n+// Otherwise the execution continues.\n+\n+#ifdef ABORT_ON_FAILED_DCHECK\n+#define DCHECK_FAILURE(expression, file, line, func)              \\\n+    do {                                                          \\\n+        tfm::format(std::cerr, \"%s:%d: %s: DCHECK(%s) failed.\\n\", \\",
    "path": "src/check.h",
    "position": null,
    "original_position": 51,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "d7406f1d2758bc9dc48145d59d80747876145499",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added!",
    "created_at": "2019-06-14T21:15:34Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293990122",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293990122"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r293990122"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293990122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT",
    "in_reply_to_id": 293929417
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294043004",
    "pull_request_review_id": 250188262,
    "id": 294043004,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDA0MzAwNA==",
    "diff_hunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHECK_H\n+#define BITCOIN_CHECK_H\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+// DCHECK(expression)\n+// ==================\n+// DCHECK(...) is used to document assumptions.\n+//\n+// Bitcoin is always compiled with assertions enabled. assert(...)\n+// is thus only appropriate for documenting critical assumptions\n+// where a failed assumption should lead to immediate abortion also\n+// in production environments.\n+//\n+// DCHECK(...) works like assert(...) if -DABORT_ON_FAILED_DCHECK\n+// and is side-effect safe.\n+//\n+// More specifically:\n+//\n+// * If compiled with -DABORT_ON_FAILED_DCHECK (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * Otherwise:\n+//   Evaluate expression and continue execution.\n+//\n+// ABORT_ON_FAILED_DCHECK should not be set in production environments.\n+//\n+// Example\n+// =======\n+// int main(void) {\n+//     DCHECK(IsFoo());\n+//     ...\n+// }\n+//\n+// If !IsFoo() and -DABORT_ON_FAILED_DCHECK, then:\n+//     filename.cpp:123: main: DCHECK(IsFoo()) failed.\n+//     Aborted\n+// Otherwise the execution continues.\n+\n+#ifdef ABORT_ON_FAILED_DCHECK\n+#define DCHECK_FAILURE(expression, file, line, func)       \\\n+    do {                                                  \\\n+        fprintf(stderr, \"%s:%d: %s: DCHECK(%s) failed.\\n\", \\\n+            file, line, func, expression);                \\\n+        std::abort();                                     \\\n+    } while (false)\n+#else\n+#define DCHECK_FAILURE(expression, file, line, func) ((void)0)\n+#endif\n+\n+#define DCHECK(expression)                                             \\\n+    do {                                                              \\\n+        if (!(expression)) {                                          \\",
    "path": "src/check.h",
    "position": null,
    "original_position": 59,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "a32e448b0021d4041e68760f1cb1225d00fd8575",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Seems like clarifying the intent of the PR would be a good first step...\r\n\r\nI think there's four things we could have:\r\n\r\n * `assert(chk)` -- always evaluate, always abort if it failes\r\n * `CHECK(chk)` -- always evaluate, but only abort if in regtest or similar; maybe log errors if not aborting.\r\n * `debug_assert(chk)` -- evaluate condition only when invoked with a special option like `-debugchecks=1`, which is always off by default, and can be disabled at compile time, allowing the code to dropped out. these checks could be slow and heavyweight. they probably wouldn't be run in travis.\r\n * `traditional_assert(chk)` -- evaluate for test builds, but don't evaluate in release builds\r\n\r\nI think the `traditional_assert` style probably makes test and release builds different in ways that are hard to ensure are correct (in Haskell or Rust maybe we could ensure that chk is side effect free via the type-system, but that doesn't seem plausible in C++), so I don't think that's a good idea.\r\n\r\nI could see any of the others being reasonable though.",
    "created_at": "2019-06-15T10:47:03Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r294043004",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294043004"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r294043004"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294043004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT",
    "in_reply_to_id": 293582577
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338853579",
    "pull_request_review_id": 306942042,
    "id": 338853579,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODg1MzU3OQ==",
    "diff_hunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ASSUME_H\n+#define BITCOIN_ASSUME_H\n+\n+#include <tinyformat.h>\n+\n+// ASSUME(expression)\n+// ==================\n+// ASSUME(...) is used to document assumptions.\n+//\n+// Bitcoin Core is always compiled with assertions enabled. assert(...)\n+// is thus only appropriate for documenting critical assumptions\n+// where a failed assumption should lead to immediate abortion also\n+// in production environments.\n+//\n+// ASSUME(...) works like assert(...) if -DABORT_ON_FAILED_ASSUME\n+// and is side-effect safe.\n+//\n+// More specifically:\n+//\n+// * If compiled with -DABORT_ON_FAILED_ASSUME (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.",
    "path": "src/assume.h",
    "position": null,
    "original_position": 25,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "7ab1498652a50bc49f6f0b3b232943814e43bfed",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\"false\"",
    "created_at": "2019-10-25T01:23:23Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r338853579",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338853579"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r338853579"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338853579/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 25,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338855020",
    "pull_request_review_id": 306942042,
    "id": 338855020,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODg1NTAyMA==",
    "diff_hunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ASSUME_H\n+#define BITCOIN_ASSUME_H\n+\n+#include <tinyformat.h>\n+\n+// ASSUME(expression)\n+// ==================\n+// ASSUME(...) is used to document assumptions.\n+//\n+// Bitcoin Core is always compiled with assertions enabled. assert(...)\n+// is thus only appropriate for documenting critical assumptions\n+// where a failed assumption should lead to immediate abortion also\n+// in production environments.\n+//\n+// ASSUME(...) works like assert(...) if -DABORT_ON_FAILED_ASSUME\n+// and is side-effect safe.\n+//\n+// More specifically:\n+//\n+// * If compiled with -DABORT_ON_FAILED_ASSUME (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * Otherwise:\n+//   Evaluate expression and continue execution.\n+//\n+// ABORT_ON_FAILED_ASSUME should not be set in production environments.\n+//\n+// Example\n+// =======\n+// int main(void) {\n+//     ASSUME(IsFoo());\n+//     ...\n+// }\n+//\n+// If !IsFoo() and -DABORT_ON_FAILED_ASSUME, then:\n+//     filename.cpp:123: main: ASSUME(IsFoo()) failed.\n+//     Aborted\n+// Otherwise the execution continues.\n+\n+#ifdef ABORT_ON_FAILED_ASSUME\n+#define ASSUME_FAILED(expression, file, line, func)                                                  \\\n+    do {                                                                                             \\\n+        tfm::format(std::cerr, \"%s:%d: %s: ASSUME(%s) failed. You may report this issue here: %s\\n\", \\\n+            file, line, func, expression, PACKAGE_BUGREPORT);                                        \\\n+        std::abort();                                                                                \\\n+    } while (false)\n+#else\n+#define ASSUME_FAILED(expression, file, line, func) ((void)0)\n+#endif",
    "path": "src/assume.h",
    "position": null,
    "original_position": 53,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "7ab1498652a50bc49f6f0b3b232943814e43bfed",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm still not sure it wouldn't be better unconditionally log (independent of compile flags) something like `%s:%d: ASSUME(%s) failed` and change the testing harnesses to emit a failure if that happens? If we continue fine when running release versions anyway, wouldn't it make more sense to capture all the failures while testing to reduce the number of restarts needed?\r\n\r\nMy inclination would be more along the lines of:\r\n\r\n```\r\nif (!(expression)) {\r\n    LogPrintf(\"Assumption failed %s:%d: %s\", __FILE__,__LINE__, #expression);\r\n    if (!Params().IsTestChain()) std::abort();\r\n}\r\n```\r\n\r\n(or have the `std::abort()` always happen if a compile time flag is set, if that's helpful for static analysis)",
    "created_at": "2019-10-25T01:33:34Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r338855020",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338855020"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r338855020"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338855020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 53,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338856437",
    "pull_request_review_id": 306942042,
    "id": 338856437,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODg1NjQzNw==",
    "diff_hunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ASSUME_H\n+#define BITCOIN_ASSUME_H\n+\n+#include <tinyformat.h>\n+\n+// ASSUME(expression)\n+// ==================\n+// ASSUME(...) is used to document assumptions.\n+//\n+// Bitcoin Core is always compiled with assertions enabled. assert(...)\n+// is thus only appropriate for documenting critical assumptions\n+// where a failed assumption should lead to immediate abortion also\n+// in production environments.",
    "path": "src/assume.h",
    "position": null,
    "original_position": 17,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "7ab1498652a50bc49f6f0b3b232943814e43bfed",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's not really clear to me when you should choose `assert`  vs `ASSUME` -- neither is any quicker because both always run the test, and if the assumptions you had when writing the code were wrong, how confident can you really be that continuing won't cause horrible corruption to decide that continuing is okay?",
    "created_at": "2019-10-25T01:43:43Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r338856437",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338856437"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r338856437"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338856437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340065001",
    "pull_request_review_id": 308496336,
    "id": 340065001,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDA2NTAwMQ==",
    "diff_hunk": "@@ -38,4 +39,59 @@ class NonFatalCheckError : public std::runtime_error\n         }                                                         \\\n     } while (false)\n \n+/**\n+ * ASSUME(expression)\n+ *\n+ * ASSUME(...) is used to document assumptions.\n+ *\n+ * Bitcoin Core is always compiled with assertions enabled. assert(...)\n+ * is thus only appropriate for documenting critical assumptions\n+ * where a failed assumption should lead to immediate abortion also\n+ * in production environments.\n+ *\n+ * ASSUME(...) works like assert(...) if -DABORT_ON_FAILED_ASSUME\n+ * and is side-effect safe.\n+ *\n+ * More specifically:\n+ *\n+ * * If compiled with -DABORT_ON_FAILED_ASSUME (set by --enable-debug\n+ *   and --enable-fuzz): Evaluate expression and abort if expression is\n+ *   false.\n+ *\n+ * * Otherwise:\n+ *   Evaluate expression and continue execution.\n+ *\n+ * ABORT_ON_FAILED_ASSUME should not be set in production environments.\n+ *\n+ * Example\n+ * =======\n+ * int main(void) {\n+ *     ASSUME(IsFoo());\n+ *     ...\n+ * }\n+ *\n+ * If !IsFoo() and -DABORT_ON_FAILED_ASSUME, then:\n+ *     filename.cpp:123: main: ASSUME(IsFoo()) failed.\n+ *     Aborted\n+ * Otherwise the execution continues.\n+ */\n+\n+#ifdef ABORT_ON_FAILED_ASSUME\n+#define ASSUME_FAILED(expression, file, line, func)                                                  \\\n+    do {                                                                                             \\\n+        tfm::format(std::cerr, \"%s:%d: %s: ASSUME(%s) failed. You may report this issue here: %s\\n\", \\\n+            file, line, func, expression, PACKAGE_BUGREPORT);                                        \\",
    "path": "src/util/check.h",
    "position": null,
    "original_position": 53,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "2812b0decfb2cc9b15eafe23b6a3138cb90f328c",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Shouldn't this be logged even if the debug flag is not set at compile time?",
    "created_at": "2019-10-29T13:13:55Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r340065001",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340065001"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r340065001"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340065001/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 83,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340069709",
    "pull_request_review_id": 308502421,
    "id": 340069709,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDA2OTcwOQ==",
    "diff_hunk": "@@ -38,4 +39,59 @@ class NonFatalCheckError : public std::runtime_error\n         }                                                         \\\n     } while (false)\n \n+/**\n+ * ASSUME(expression)\n+ *\n+ * ASSUME(...) is used to document assumptions.\n+ *\n+ * Bitcoin Core is always compiled with assertions enabled. assert(...)\n+ * is thus only appropriate for documenting critical assumptions\n+ * where a failed assumption should lead to immediate abortion also\n+ * in production environments.\n+ *\n+ * ASSUME(...) works like assert(...) if -DABORT_ON_FAILED_ASSUME\n+ * and is side-effect safe.\n+ *\n+ * More specifically:\n+ *\n+ * * If compiled with -DABORT_ON_FAILED_ASSUME (set by --enable-debug\n+ *   and --enable-fuzz): Evaluate expression and abort if expression is\n+ *   false.\n+ *\n+ * * Otherwise:\n+ *   Evaluate expression and continue execution.\n+ *\n+ * ABORT_ON_FAILED_ASSUME should not be set in production environments.\n+ *\n+ * Example\n+ * =======\n+ * int main(void) {\n+ *     ASSUME(IsFoo());\n+ *     ...\n+ * }\n+ *\n+ * If !IsFoo() and -DABORT_ON_FAILED_ASSUME, then:\n+ *     filename.cpp:123: main: ASSUME(IsFoo()) failed.\n+ *     Aborted\n+ * Otherwise the execution continues.\n+ */\n+\n+#ifdef ABORT_ON_FAILED_ASSUME\n+#define ASSUME_FAILED(expression, file, line, func)                                                  \\\n+    do {                                                                                             \\\n+        tfm::format(std::cerr, \"%s:%d: %s: ASSUME(%s) failed. You may report this issue here: %s\\n\", \\\n+            file, line, func, expression, PACKAGE_BUGREPORT);                                        \\",
    "path": "src/util/check.h",
    "position": null,
    "original_position": 53,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "2812b0decfb2cc9b15eafe23b6a3138cb90f328c",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That's not how I intended it to work, but now that you suggest it there is perhaps no downside in logging it also in non-debug/non-fuzz mode? Since we're only writing to stderr (and not to disk) it should be safe. I'll update.",
    "created_at": "2019-10-29T13:23:02Z",
    "updated_at": "2019-10-29T18:52:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r340069709",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340069709"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r340069709"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340069709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 83,
    "side": "RIGHT",
    "in_reply_to_id": 340065001
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340287925",
    "pull_request_review_id": 308785370,
    "id": 340287925,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDI4NzkyNQ==",
    "diff_hunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ASSUME_H\n+#define BITCOIN_ASSUME_H\n+\n+#include <tinyformat.h>\n+\n+// ASSUME(expression)\n+// ==================\n+// ASSUME(...) is used to document assumptions.\n+//\n+// Bitcoin Core is always compiled with assertions enabled. assert(...)\n+// is thus only appropriate for documenting critical assumptions\n+// where a failed assumption should lead to immediate abortion also\n+// in production environments.\n+//\n+// ASSUME(...) works like assert(...) if -DABORT_ON_FAILED_ASSUME\n+// and is side-effect safe.\n+//\n+// More specifically:\n+//\n+// * If compiled with -DABORT_ON_FAILED_ASSUME (set by --enable-debug):\n+//   Evaluate expression and abort if expression is falsy.\n+//\n+// * Otherwise:\n+//   Evaluate expression and continue execution.\n+//\n+// ABORT_ON_FAILED_ASSUME should not be set in production environments.\n+//\n+// Example\n+// =======\n+// int main(void) {\n+//     ASSUME(IsFoo());\n+//     ...\n+// }\n+//\n+// If !IsFoo() and -DABORT_ON_FAILED_ASSUME, then:\n+//     filename.cpp:123: main: ASSUME(IsFoo()) failed.\n+//     Aborted\n+// Otherwise the execution continues.\n+\n+#ifdef ABORT_ON_FAILED_ASSUME\n+#define ASSUME_FAILED(expression, file, line, func)                                                  \\\n+    do {                                                                                             \\\n+        tfm::format(std::cerr, \"%s:%d: %s: ASSUME(%s) failed. You may report this issue here: %s\\n\", \\\n+            file, line, func, expression, PACKAGE_BUGREPORT);                                        \\\n+        std::abort();                                                                                \\\n+    } while (false)\n+#else\n+#define ASSUME_FAILED(expression, file, line, func) ((void)0)\n+#endif",
    "path": "src/assume.h",
    "position": null,
    "original_position": 53,
    "commit_id": "674f9d59ba4c1a1d4662e79467cc417a2988cf15",
    "original_commit_id": "7ab1498652a50bc49f6f0b3b232943814e43bfed",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "has been fixed, I believe",
    "created_at": "2019-10-29T19:43:45Z",
    "updated_at": "2019-10-29T19:43:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r340287925",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340287925"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16136#discussion_r340287925"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16136"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340287925/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 53,
    "side": "RIGHT",
    "in_reply_to_id": 338855020
  }
]