[
  {
    "sha": "e4d0b44373c75a597c21a0e93698364fc33fb79d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGQwYjQ0MzczYzc1YTU5N2MyMWEwZTkzNjk4MzY0ZmMzM2ZiNzlk",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-18T13:58:13Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-18T22:43:12Z"
      },
      "message": "Consistently log CValidationState on failure\n\nSeems providing at least minimal visibility to the failure is a good practice.\n\nThe only remaining ignored state is in LoadExternalBlockFile, where logging\nwould likely be spammy.",
      "tree": {
        "sha": "0c952fb20dbe102e0014617af79e453c6d4f6587",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c952fb20dbe102e0014617af79e453c6d4f6587"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4d0b44373c75a597c21a0e93698364fc33fb79d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJa18oDAAoJEG7l83hfeLNFqLMH/iusi70bJByVoCWHo/a1rBWx\nEwzf8UM+Zz9vKgv89N62hJE8hcQNSD/dZ5po5zCkClQ8gtzSeTR0n93rOeTOaXNW\n9w6j2QLxroQEn8Z21PlUXMGgMR/WbcKrdsgk9akn/M1up1S6cDP2YOPU1egs3Mqp\n+D86ruq4Ir/Piu9hC0aEAOIgOAGZPF7cSrQXnfZL462cGh9Gi+hFPC8uWirK31Lj\nh7t0VIdeZPCsaQyCvO1XfVj0CAliRGZ4o4TOf4U3tqXFfatfHWC7eXR0Bgr9dHxA\nbyFC3Rgdg393vlBe/gaTkBZHn/rjv/YODm3N9YnTCRGncO7VbRbyUr685VVDeR4=\n=q47V\n-----END PGP SIGNATURE-----",
        "payload": "tree 0c952fb20dbe102e0014617af79e453c6d4f6587\nparent 615f7c288414a89cd1dec1d67e0f84abe2fb4c6d\nauthor Ben Woosley <ben.woosley@gmail.com> 1524059893 -0400\ncommitter Ben Woosley <ben.woosley@gmail.com> 1524091392 -0400\n\nConsistently log CValidationState on failure\n\nSeems providing at least minimal visibility to the failure is a good practice.\n\nThe only remaining ignored state is in LoadExternalBlockFile, where logging\nwould likely be spammy.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4d0b44373c75a597c21a0e93698364fc33fb79d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4d0b44373c75a597c21a0e93698364fc33fb79d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4d0b44373c75a597c21a0e93698364fc33fb79d/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "615f7c288414a89cd1dec1d67e0f84abe2fb4c6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/615f7c288414a89cd1dec1d67e0f84abe2fb4c6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/615f7c288414a89cd1dec1d67e0f84abe2fb4c6d"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 29,
      "deletions": 15
    },
    "files": [
      {
        "sha": "f403f90b084b1f437ee5e66f7ad38b1c1b1fb374",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4d0b44373c75a597c21a0e93698364fc33fb79d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4d0b44373c75a597c21a0e93698364fc33fb79d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e4d0b44373c75a597c21a0e93698364fc33fb79d",
        "patch": "@@ -684,7 +684,7 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n     CValidationState state;\n     if (!ActivateBestChain(state, chainparams)) {\n-        LogPrintf(\"Failed to connect best block\\n\");\n+        LogPrintf(\"Failed to connect best block (%s)\\n\", FormatStateMessage(state));\n         StartShutdown();\n         return;\n     }"
      },
      {
        "sha": "ee4e9e61bc05e7565a34862d80357e1d49a30eb6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4d0b44373c75a597c21a0e93698364fc33fb79d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4d0b44373c75a597c21a0e93698364fc33fb79d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e4d0b44373c75a597c21a0e93698364fc33fb79d",
        "patch": "@@ -1100,8 +1100,10 @@ void static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensus\n         }\n     } // release cs_main before calling ActivateBestChain\n     if (need_activate_chain) {\n-        CValidationState dummy;\n-        ActivateBestChain(dummy, Params(), a_recent_block);\n+        CValidationState state;\n+        if (!ActivateBestChain(state, Params(), a_recent_block)) {\n+            LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", FormatStateMessage(state));\n+        }\n     }\n \n     LOCK(cs_main);\n@@ -1992,8 +1994,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 LOCK(cs_most_recent_block);\n                 a_recent_block = most_recent_block;\n             }\n-            CValidationState dummy;\n-            ActivateBestChain(dummy, Params(), a_recent_block);\n+            CValidationState state;\n+            if (!ActivateBestChain(state, Params(), a_recent_block)) {\n+                LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", FormatStateMessage(state));\n+            }\n         }\n \n         LOCK(cs_main);"
      },
      {
        "sha": "e9873f45269fc931de64700f9c09cb8079664275",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4d0b44373c75a597c21a0e93698364fc33fb79d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4d0b44373c75a597c21a0e93698364fc33fb79d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=e4d0b44373c75a597c21a0e93698364fc33fb79d",
        "patch": "@@ -85,7 +85,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         {\n             CValidationState state;\n             if (!ActivateBestChain(state, chainparams)) {\n-                throw std::runtime_error(\"ActivateBestChain failed.\");\n+                throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", FormatStateMessage(state)));\n             }\n         }\n         nScriptCheckThreads = 3;"
      },
      {
        "sha": "2390dac5709087e8b80e5620b365debeca1ded4b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 9,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4d0b44373c75a597c21a0e93698364fc33fb79d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4d0b44373c75a597c21a0e93698364fc33fb79d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e4d0b44373c75a597c21a0e93698364fc33fb79d",
        "patch": "@@ -2181,14 +2181,18 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n void FlushStateToDisk() {\n     CValidationState state;\n     const CChainParams& chainparams = Params();\n-    FlushStateToDisk(chainparams, state, FlushStateMode::ALWAYS);\n+    if (!FlushStateToDisk(chainparams, state, FlushStateMode::ALWAYS)) {\n+        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, FormatStateMessage(state));\n+    }\n }\n \n void PruneAndFlush() {\n     CValidationState state;\n     fCheckForPruning = true;\n     const CChainParams& chainparams = Params();\n-    FlushStateToDisk(chainparams, state, FlushStateMode::NONE);\n+    if (!FlushStateToDisk(chainparams, state, FlushStateMode::NONE)) {\n+        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, FormatStateMessage(state));\n+    }\n }\n \n static void DoWarning(const std::string& strWarning)\n@@ -3489,15 +3493,15 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.GetDebugMessage());\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n         }\n     }\n \n     NotifyHeaderTip();\n \n     CValidationState state; // Only used to report errors, not invalidity - ignore it\n     if (!g_chainstate.ActivateBestChain(state, chainparams, pblock))\n-        return error(\"%s: ActivateBestChain failed\", __func__);\n+        return error(\"%s: ActivateBestChain failed (%s)\", __func__, FormatStateMessage(state));\n \n     return true;\n }\n@@ -3615,7 +3619,9 @@ void PruneBlockFilesManual(int nManualPruneHeight)\n {\n     CValidationState state;\n     const CChainParams& chainparams = Params();\n-    FlushStateToDisk(chainparams, state, FlushStateMode::NONE, nManualPruneHeight);\n+    if (!FlushStateToDisk(chainparams, state, FlushStateMode::NONE, nManualPruneHeight)) {\n+        LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, FormatStateMessage(state));\n+    }\n }\n \n /**\n@@ -3869,6 +3875,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n         LogPrintf(\"%s: Connecting genesis block...\\n\", __func__);\n         CValidationState state;\n         if (!ActivateBestChain(state, chainparams)) {\n+            LogPrintf(\"%s: failed to activate chain (%s)\\n\", __func__, FormatStateMessage(state));\n             return false;\n         }\n     }\n@@ -3983,7 +3990,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             if (!g_chainstate.ConnectBlock(block, state, pindex, coins, chainparams))\n-                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)\", pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         }\n     }\n \n@@ -4110,11 +4117,13 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n             break;\n         }\n         if (!DisconnectTip(state, params, nullptr)) {\n-            return error(\"RewindBlockIndex: unable to disconnect block at height %i\", pindex->nHeight);\n+            return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", pindex->nHeight, FormatStateMessage(state));\n         }\n         // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC))\n+        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n+            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n             return false;\n+        }\n     }\n \n     // Reduce validity flag and have-data flags.\n@@ -4180,6 +4189,7 @@ bool RewindBlockIndex(const CChainParams& params) {\n         // it'll get called a bunch real soon.\n         CValidationState state;\n         if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n+            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n             return false;\n         }\n     }\n@@ -4266,7 +4276,7 @@ bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n         CBlockIndex *pindex = AddToBlockIndex(block);\n         CValidationState state;\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos, chainparams.GetConsensus()))\n-            return error(\"%s: genesis block not accepted\", __func__);\n+            return error(\"%s: genesis block not accepted (%s)\", __func__, FormatStateMessage(state));\n     } catch (const std::runtime_error& e) {\n         return error(\"%s: failed to write genesis block: %s\", __func__, e.what());\n     }"
      }
    ]
  }
]