[
  {
    "sha": "9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzhlY2E3NzA0ZTg4YjNmNGVlMzhjZjg1YmVmMGYxZmViYzQ0MGU1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-08T17:50:46Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-08T17:50:46Z"
      },
      "message": "Split up key and script metadata for better type safety\n\nSuggested by Matt Corallo <git@bluematt.me>\nhttps://github.com/bitcoin/bitcoin/pull/11403#discussion_r155599383\n\nCombining the maps was probably never a good arrangement but is more\nproblematic now in presence of WitnessV0ScriptHash and WitnessV0KeyHash types.",
      "tree": {
        "sha": "65a5fb461a02112b1e167e3ecfa522cffcdc4414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65a5fb461a02112b1e167e3ecfa522cffcdc4414"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ef4dfebbc07d93d72899f60e01ca77a280c9122",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef4dfebbc07d93d72899f60e01ca77a280c9122",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ef4dfebbc07d93d72899f60e01ca77a280c9122"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 48,
      "deletions": 34
    },
    "files": [
      {
        "sha": "327af2e237347303231e18dcf7bdfadfcb13e373",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
        "patch": "@@ -187,17 +187,24 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n         }\n         if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n-            const CKeyID *keyID = boost::get<CKeyID>(&dest);\n-            auto it = keyID ? meta.find(*keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n+            const CKeyMetadata* meta = nullptr;\n+            if (const CKeyID* key_id = boost::get<CKeyID>(&dest)) {\n+                auto it = pwallet->mapKeyMetadata.find(*key_id);\n+                if (it != pwallet->mapKeyMetadata.end()) {\n+                    meta = &it->second;\n+                }\n+            }\n+            if (!meta) {\n+                auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n+                if (it != pwallet->m_script_metadata.end()) {\n+                    meta = &it->second;\n+                }\n             }\n-            if (it != meta.end()) {\n-                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n-                if (!it->second.hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n+            if (meta) {\n+                ret.push_back(Pair(\"timestamp\", meta->nCreateTime));\n+                if (!meta->hdKeypath.empty()) {\n+                    ret.push_back(Pair(\"hdkeypath\", meta->hdKeypath));\n+                    ret.push_back(Pair(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex()));\n                 }\n             }\n         }"
      },
      {
        "sha": "ed1d67b6f652e90dd244ba2a4b2100a19d2074ad",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
        "patch": "@@ -284,14 +284,22 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     }\n }\n \n-bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)\n+bool CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     UpdateTimeFirstKey(meta.nCreateTime);\n     mapKeyMetadata[keyID] = meta;\n     return true;\n }\n \n+bool CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &meta)\n+{\n+    AssertLockHeld(cs_wallet); // m_script_metadata\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    m_script_metadata[script_id] = meta;\n+    return true;\n+}\n+\n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n@@ -340,15 +348,15 @@ bool CWallet::AddWatchOnly(const CScript& dest)\n {\n     if (!CCryptoKeyStore::AddWatchOnly(dest))\n         return false;\n-    const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n+    const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n     UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n     return CWalletDB(*dbw).WriteWatchOnly(dest, meta);\n }\n \n bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n {\n-    mapKeyMetadata[CScriptID(dest)].nCreateTime = nCreateTime;\n+    m_script_metadata[CScriptID(dest)].nCreateTime = nCreateTime;\n     return AddWatchOnly(dest);\n }\n "
      },
      {
        "sha": "93d1857c7fbea62e9a76157a7ef196687febf8b3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
        "patch": "@@ -761,9 +761,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n \n-    // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n-    // key metadata.\n-    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n+    // Map from Key ID to key metadata.\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+\n+    // Map from Script ID to key metadata (for watch-only keys).\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -874,7 +876,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n+    bool LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime);"
      },
      {
        "sha": "efc50f72ebd6776dcbfa3da8d89bb084d72f9c73",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8eca7704e88b3f4ee38cf85bef0f1febc440e5/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=9c8eca7704e88b3f4ee38cf85bef0f1febc440e5",
        "patch": "@@ -423,27 +423,23 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             }\n             wss.fIsEncrypted = true;\n         }\n-        else if (strType == \"keymeta\" || strType == \"watchmeta\")\n+        else if (strType == \"keymeta\")\n         {\n-            CTxDestination keyID;\n-            if (strType == \"keymeta\")\n-            {\n-              CPubKey vchPubKey;\n-              ssKey >> vchPubKey;\n-              keyID = vchPubKey.GetID();\n-            }\n-            else if (strType == \"watchmeta\")\n-            {\n-              CScript script;\n-              ssKey >> script;\n-              keyID = CScriptID(script);\n-            }\n-\n+            CPubKey vchPubKey;\n+            ssKey >> vchPubKey;\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n-\n-            pwallet->LoadKeyMetadata(keyID, keyMeta);\n+            pwallet->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+        }\n+        else if (strType == \"watchmeta\")\n+        {\n+            CScript script;\n+            ssKey >> script;\n+            CKeyMetadata keyMeta;\n+            ssValue >> keyMeta;\n+            wss.nKeyMeta++;\n+            pwallet->LoadScriptMetadata(CScriptID(script), keyMeta);\n         }\n         else if (strType == \"defaultkey\")\n         {"
      }
    ]
  }
]