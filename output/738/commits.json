[
  {
    "sha": "a75d7066b824eb1e70fb5b0e0e7c3c122e00c4b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzVkNzA2NmI4MjRlYjFlNzBmYjViMGUwZTdjM2MxMjJlMDBjNGI2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-01-03T00:28:15Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-01-03T01:01:56Z"
      },
      "message": "Fix some address-handling deadlocks\n\nMade three critical blocks for cs_mapAddresses smaller, and moved\nwriting to the database out of them. This should also improve the\nconcurrency of the code.",
      "tree": {
        "sha": "015258f1f9fa32724ab7b9a19d87da9e5c285b85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/015258f1f9fa32724ab7b9a19d87da9e5c285b85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a75d7066b824eb1e70fb5b0e0e7c3c122e00c4b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a75d7066b824eb1e70fb5b0e0e7c3c122e00c4b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a75d7066b824eb1e70fb5b0e0e7c3c122e00c4b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a75d7066b824eb1e70fb5b0e0e7c3c122e00c4b6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "625b56de6491170ad6a2e45c57d974fca6160750",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/625b56de6491170ad6a2e45c57d974fca6160750",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/625b56de6491170ad6a2e45c57d974fca6160750"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 33,
      "deletions": 26
    },
    "files": [
      {
        "sha": "c204cb2d0c807095d6a9c8c6b48e001e607f8400",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 26,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a75d7066b824eb1e70fb5b0e0e7c3c122e00c4b6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a75d7066b824eb1e70fb5b0e0e7c3c122e00c4b6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a75d7066b824eb1e70fb5b0e0e7c3c122e00c4b6",
        "patch": "@@ -496,21 +496,25 @@ bool AddAddress(CAddress addr, int64 nTimePenalty, CAddrDB *pAddrDB)\n \n void AddressCurrentlyConnected(const CAddress& addr)\n {\n+    CAddress *paddrFound = NULL;\n+\n     CRITICAL_BLOCK(cs_mapAddresses)\n     {\n         // Only if it's been published already\n         map<vector<unsigned char>, CAddress>::iterator it = mapAddresses.find(addr.GetKey());\n         if (it != mapAddresses.end())\n+            paddrFound = &(*it).second;\n+    }\n+\n+    if (paddrFound)\n+    {\n+        int64 nUpdateInterval = 20 * 60;\n+        if (paddrFound->nTime < GetAdjustedTime() - nUpdateInterval)\n         {\n-            CAddress& addrFound = (*it).second;\n-            int64 nUpdateInterval = 20 * 60;\n-            if (addrFound.nTime < GetAdjustedTime() - nUpdateInterval)\n-            {\n-                // Periodically update most recently seen time\n-                addrFound.nTime = GetAdjustedTime();\n-                CAddrDB addrdb;\n-                addrdb.WriteAddress(addrFound);\n-            }\n+            // Periodically update most recently seen time\n+            paddrFound->nTime = GetAdjustedTime();\n+            CAddrDB addrdb;\n+            addrdb.WriteAddress(*paddrFound);\n         }\n     }\n }\n@@ -1271,13 +1275,13 @@ void ThreadDNSAddressSeed2(void* parg)\n     if (!fTestNet)\n     {\n         printf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n-        CAddrDB addrDB;\n-        addrDB.TxnBegin();\n \n         for (int seed_idx = 0; seed_idx < ARRAYLEN(strDNSSeed); seed_idx++) {\n             vector<CAddress> vaddr;\n             if (Lookup(strDNSSeed[seed_idx], vaddr, NODE_NETWORK, -1, true))\n             {\n+                CAddrDB addrDB;\n+                addrDB.TxnBegin();\n                 BOOST_FOREACH (CAddress& addr, vaddr)\n                 {\n                     if (addr.GetByte(3) != 127)\n@@ -1287,10 +1291,9 @@ void ThreadDNSAddressSeed2(void* parg)\n                         found++;\n                     }\n                 }\n+                addrDB.TxnCommit();  // Save addresses (it's ok if this fails)\n             }\n         }\n-\n-        addrDB.TxnCommit();  // Save addresses (it's ok if this fails)\n     }\n \n     printf(\"%d addresses found from DNS seeds\\n\", found);\n@@ -1462,28 +1465,32 @@ void ThreadOpenConnections2(void* parg)\n         if (fShutdown)\n             return;\n \n+        bool fAddSeeds = false;\n+\n         CRITICAL_BLOCK(cs_mapAddresses)\n         {\n             // Add seed nodes if IRC isn't working\n             bool fTOR = (fUseProxy && addrProxy.port == htons(9050));\n             if (mapAddresses.empty() && (GetTime() - nStart > 60 || fTOR) && !fTestNet)\n+                fAddSeeds = true;\n+        }\n+\n+        if (fAddSeeds)\n+        {\n+            for (int i = 0; i < ARRAYLEN(pnSeed); i++)\n             {\n-                for (int i = 0; i < ARRAYLEN(pnSeed); i++)\n-                {\n-                    // It'll only connect to one or two seed nodes because once it connects,\n-                    // it'll get a pile of addresses with newer timestamps.\n-                    // Seed nodes are given a random 'last seen time' of between one and two\n-                    // weeks ago.\n-                    const int64 nOneWeek = 7*24*60*60;\n-                    CAddress addr;\n-                    addr.ip = pnSeed[i];\n-                    addr.nTime = GetTime()-GetRand(nOneWeek)-nOneWeek;\n-                    AddAddress(addr);\n-                }\n+                // It'll only connect to one or two seed nodes because once it connects,\n+                // it'll get a pile of addresses with newer timestamps.\n+                // Seed nodes are given a random 'last seen time' of between one and two\n+                // weeks ago.\n+                const int64 nOneWeek = 7*24*60*60;\n+                CAddress addr;\n+                addr.ip = pnSeed[i];\n+                addr.nTime = GetTime()-GetRand(nOneWeek)-nOneWeek;\n+                AddAddress(addr);\n             }\n         }\n \n-\n         //\n         // Choose an address to connect to based on most recently seen\n         //"
      }
    ]
  }
]