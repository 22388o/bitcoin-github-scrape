[
  {
    "sha": "d362f19355b36531a4a82094e0259f7f3db500a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzYyZjE5MzU1YjM2NTMxYTRhODIwOTRlMDI1OWY3ZjNkYjUwMGE3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-22T21:41:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T19:39:34Z"
      },
      "message": "doc: list support for BIP 339 in doc/bips.md",
      "tree": {
        "sha": "674e74bd2955c70f8157b507d23169bf8fa0f163",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/674e74bd2955c70f8157b507d23169bf8fa0f163"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d362f19355b36531a4a82094e0259f7f3db500a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d362f19355b36531a4a82094e0259f7f3db500a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d362f19355b36531a4a82094e0259f7f3db500a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d362f19355b36531a4a82094e0259f7f3db500a7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edec7f7c254294cd5c46ae5cf304353d458bb852",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edec7f7c254294cd5c46ae5cf304353d458bb852",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edec7f7c254294cd5c46ae5cf304353d458bb852"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "456fea7a5a128c00182261ae3cadcb3f920377d5",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d362f19355b36531a4a82094e0259f7f3db500a7/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d362f19355b36531a4a82094e0259f7f3db500a7/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=d362f19355b36531a4a82094e0259f7f3db500a7",
        "patch": "@@ -1,4 +1,4 @@\n-BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.19.0**):\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.21.0**):\n \n * [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))\n * [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n@@ -42,3 +42,4 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.19.0**):\n * [`BIP 173`](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki): Bech32 addresses for native Segregated Witness outputs are supported as of **v0.16.0** ([PR 11167](https://github.com/bitcoin/bitcoin/pull/11167)). Bech32 addresses are generated by default as of **v0.20.0** ([PR 16884](https://github.com/bitcoin/bitcoin/pull/16884)).\n * [`BIP 174`](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki): RPCs to operate on Partially Signed Bitcoin Transactions (PSBT) are present as of **v0.17.0** ([PR 13557](https://github.com/bitcoin/bitcoin/pull/13557)).\n * [`BIP 176`](https://github.com/bitcoin/bips/blob/master/bip-0176.mediawiki): Bits Denomination [QT only] is supported as of **v0.16.0** ([PR 12035](https://github.com/bitcoin/bitcoin/pull/12035)).\n+* [`BIP 339`](https://github.com/bitcoin/bips/blob/master/bip-0339.mediawiki): Relay of transactions by wtxid is supported as of **v0.21.0** ([PR 18044](https://github.com/bitcoin/bitcoin/pull/18044))."
      }
    ]
  },
  {
    "sha": "9efd86a908cf09d9ddbadd3195f202635117d505",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWZkODZhOTA4Y2YwOWQ5ZGRiYWRkMzE5NWYyMDI2MzUxMTdkNTA1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-23T00:17:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:44:54Z"
      },
      "message": "refactor: add GenTxid (=txid or wtxid) type and use it for tx request logic",
      "tree": {
        "sha": "ec801408297a936d5602b9fa1438a44accf7d4b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec801408297a936d5602b9fa1438a44accf7d4b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9efd86a908cf09d9ddbadd3195f202635117d505",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9efd86a908cf09d9ddbadd3195f202635117d505",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9efd86a908cf09d9ddbadd3195f202635117d505",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9efd86a908cf09d9ddbadd3195f202635117d505/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d362f19355b36531a4a82094e0259f7f3db500a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d362f19355b36531a4a82094e0259f7f3db500a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d362f19355b36531a4a82094e0259f7f3db500a7"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 42,
      "deletions": 17
    },
    "files": [
      {
        "sha": "5f8a73ceceef76ac99e6a56df78e89276237c3f3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9efd86a908cf09d9ddbadd3195f202635117d505/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9efd86a908cf09d9ddbadd3195f202635117d505/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9efd86a908cf09d9ddbadd3195f202635117d505",
        "patch": "@@ -398,7 +398,7 @@ struct CNodeState {\n         /* Track when to attempt download of announced transactions (process\n          * time in micros -> txid)\n          */\n-        std::multimap<std::chrono::microseconds, uint256> m_tx_process_time;\n+        std::multimap<std::chrono::microseconds, GenTxid> m_tx_process_time;\n \n         //! Store all the transactions a peer has recently announced\n         std::set<uint256> m_tx_announced;\n@@ -797,23 +797,23 @@ std::chrono::microseconds CalculateTxGetDataTime(const uint256& txid, std::chron\n     return process_time;\n }\n \n-void RequestTx(CNodeState* state, const uint256& txid, std::chrono::microseconds current_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void RequestTx(CNodeState* state, const GenTxid& gtxid, std::chrono::microseconds current_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CNodeState::TxDownloadState& peer_download_state = state->m_tx_download;\n     if (peer_download_state.m_tx_announced.size() >= MAX_PEER_TX_ANNOUNCEMENTS ||\n             peer_download_state.m_tx_process_time.size() >= MAX_PEER_TX_ANNOUNCEMENTS ||\n-            peer_download_state.m_tx_announced.count(txid)) {\n+            peer_download_state.m_tx_announced.count(gtxid.GetHash())) {\n         // Too many queued announcements from this peer, or we already have\n         // this announcement\n         return;\n     }\n-    peer_download_state.m_tx_announced.insert(txid);\n+    peer_download_state.m_tx_announced.insert(gtxid.GetHash());\n \n     // Calculate the time to try requesting this transaction. Use\n     // fPreferredDownload as a proxy for outbound peers.\n-    const auto process_time = CalculateTxGetDataTime(txid, current_time, !state->fPreferredDownload, !state->m_wtxid_relay && g_wtxid_relay_peers > 0);\n+    const auto process_time = CalculateTxGetDataTime(gtxid.GetHash(), current_time, !state->fPreferredDownload, !state->m_wtxid_relay && g_wtxid_relay_peers > 0);\n \n-    peer_download_state.m_tx_process_time.emplace(process_time, txid);\n+    peer_download_state.m_tx_process_time.emplace(process_time, gtxid);\n }\n \n } // namespace\n@@ -2678,7 +2678,7 @@ void ProcessMessage(\n                     pfrom.fDisconnect = true;\n                     return;\n                 } else if (!fAlreadyHave && !chainman.ActiveChainstate().IsInitialBlockDownload()) {\n-                    RequestTx(State(pfrom.GetId()), inv.hash, current_time);\n+                    RequestTx(State(pfrom.GetId()), ToGenTxid(inv), current_time);\n                 }\n             }\n         }\n@@ -2994,7 +2994,7 @@ void ProcessMessage(\n                         // protocol for getting all unconfirmed parents.\n                         CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n                         pfrom.AddKnownTx(txin.prevout.hash);\n-                        if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom.GetId()), _inv.hash, current_time);\n+                        if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom.GetId()), ToGenTxid(_inv), current_time);\n                     }\n                 }\n                 AddOrphanTx(ptx, pfrom.GetId());\n@@ -4529,24 +4529,24 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n         auto& tx_process_time = state.m_tx_download.m_tx_process_time;\n         while (!tx_process_time.empty() && tx_process_time.begin()->first <= current_time && state.m_tx_download.m_tx_in_flight.size() < MAX_PEER_TX_IN_FLIGHT) {\n-            const uint256 txid = tx_process_time.begin()->second;\n+            const GenTxid gtxid = tx_process_time.begin()->second;\n             // Erase this entry from tx_process_time (it may be added back for\n             // processing at a later time, see below)\n             tx_process_time.erase(tx_process_time.begin());\n-            CInv inv(state.m_wtxid_relay ? MSG_WTX : (MSG_TX | GetFetchFlags(*pto)), txid);\n+            CInv inv(gtxid.IsWtxid() ? MSG_WTX : (MSG_TX | GetFetchFlags(*pto)), gtxid.GetHash());\n             if (!AlreadyHave(inv, m_mempool)) {\n                 // If this transaction was last requested more than 1 minute ago,\n                 // then request.\n-                const auto last_request_time = GetTxRequestTime(inv.hash);\n+                const auto last_request_time = GetTxRequestTime(gtxid.GetHash());\n                 if (last_request_time <= current_time - GETDATA_TX_INTERVAL) {\n                     LogPrint(BCLog::NET, \"Requesting %s peer=%d\\n\", inv.ToString(), pto->GetId());\n                     vGetData.push_back(inv);\n                     if (vGetData.size() >= MAX_GETDATA_SZ) {\n                         connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n                         vGetData.clear();\n                     }\n-                    UpdateTxRequestTime(inv.hash, current_time);\n-                    state.m_tx_download.m_tx_in_flight.emplace(inv.hash, current_time);\n+                    UpdateTxRequestTime(gtxid.GetHash(), current_time);\n+                    state.m_tx_download.m_tx_in_flight.emplace(gtxid.GetHash(), current_time);\n                 } else {\n                     // This transaction is in flight from someone else; queue\n                     // up processing to happen after the download times out\n@@ -4560,13 +4560,13 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     // would open us up to an attacker using inbound\n                     // wtxid-relay to prevent us from requesting transactions\n                     // from outbound txid-relay peers).\n-                    const auto next_process_time = CalculateTxGetDataTime(txid, current_time, !state.fPreferredDownload, false);\n-                    tx_process_time.emplace(next_process_time, txid);\n+                    const auto next_process_time = CalculateTxGetDataTime(gtxid.GetHash(), current_time, !state.fPreferredDownload, false);\n+                    tx_process_time.emplace(next_process_time, gtxid);\n                 }\n             } else {\n                 // We have already seen this transaction, no need to download.\n-                state.m_tx_download.m_tx_announced.erase(inv.hash);\n-                state.m_tx_download.m_tx_in_flight.erase(inv.hash);\n+                state.m_tx_download.m_tx_announced.erase(gtxid.GetHash());\n+                state.m_tx_download.m_tx_in_flight.erase(gtxid.GetHash());\n             }\n         }\n "
      },
      {
        "sha": "544bab6d9bef13a897115ad724558193ac7f0ed0",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9efd86a908cf09d9ddbadd3195f202635117d505/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9efd86a908cf09d9ddbadd3195f202635117d505/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=9efd86a908cf09d9ddbadd3195f202635117d505",
        "patch": "@@ -12,6 +12,8 @@\n #include <serialize.h>\n #include <uint256.h>\n \n+#include <tuple>\n+\n static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n \n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n@@ -388,4 +390,17 @@ typedef std::shared_ptr<const CTransaction> CTransactionRef;\n static inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }\n template <typename Tx> static inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }\n \n+/** A generic txid reference (txid or wtxid). */\n+class GenTxid\n+{\n+    const bool m_is_wtxid;\n+    const uint256 m_hash;\n+public:\n+    GenTxid(bool is_wtxid, const uint256& hash) : m_is_wtxid(is_wtxid), m_hash(hash) {}\n+    bool IsWtxid() const { return m_is_wtxid; }\n+    const uint256& GetHash() const { return m_hash; }\n+    friend bool operator==(const GenTxid& a, const GenTxid& b) { return a.m_is_wtxid == b.m_is_wtxid && a.m_hash == b.m_hash; }\n+    friend bool operator<(const GenTxid& a, const GenTxid& b) { return std::tie(a.m_is_wtxid, a.m_hash) < std::tie(b.m_is_wtxid, b.m_hash); }\n+};\n+\n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "5a91acee0fedd9dd9029233052ebff313ae22680",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9efd86a908cf09d9ddbadd3195f202635117d505/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9efd86a908cf09d9ddbadd3195f202635117d505/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=9efd86a908cf09d9ddbadd3195f202635117d505",
        "patch": "@@ -241,3 +241,9 @@ std::vector<std::string> serviceFlagsToStr(uint64_t flags)\n \n     return str_flags;\n }\n+\n+GenTxid ToGenTxid(const CInv& inv)\n+{\n+    assert(inv.IsGenTxMsg());\n+    return {inv.IsMsgWtx(), inv.hash};\n+}"
      },
      {
        "sha": "d6767cc3e0fe0787475ce53b42f40af60752a504",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9efd86a908cf09d9ddbadd3195f202635117d505/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9efd86a908cf09d9ddbadd3195f202635117d505/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=9efd86a908cf09d9ddbadd3195f202635117d505",
        "patch": "@@ -11,6 +11,7 @@\n #define BITCOIN_PROTOCOL_H\n \n #include <netaddress.h>\n+#include <primitives/transaction.h>\n #include <serialize.h>\n #include <uint256.h>\n #include <version.h>\n@@ -442,4 +443,7 @@ class CInv\n     uint256 hash;\n };\n \n+/** Convert a TX/WITNESS_TX/WTX CInv to a GenTxid. */\n+GenTxid ToGenTxid(const CInv& inv);\n+\n #endif // BITCOIN_PROTOCOL_H"
      }
    ]
  },
  {
    "sha": "900d7f6c075fd78e63503f31d267dbc16b3983d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDBkN2Y2YzA3NWZkNzhlNjM1MDNmMzFkMjY3ZGJjMTZiMzk4M2Q5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-23T00:19:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:45:02Z"
      },
      "message": "p2p: enable fetching of orphans from wtxid peers\n\nBased on a commit by Anthony Towns.",
      "tree": {
        "sha": "0849a87e896cada9964bee70f0f8be236a391225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0849a87e896cada9964bee70f0f8be236a391225"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/900d7f6c075fd78e63503f31d267dbc16b3983d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/900d7f6c075fd78e63503f31d267dbc16b3983d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/900d7f6c075fd78e63503f31d267dbc16b3983d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/900d7f6c075fd78e63503f31d267dbc16b3983d9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9efd86a908cf09d9ddbadd3195f202635117d505",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9efd86a908cf09d9ddbadd3195f202635117d505",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9efd86a908cf09d9ddbadd3195f202635117d505"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 17,
      "deletions": 15
    },
    "files": [
      {
        "sha": "36508aa09930e01245059e05135a11171f868326",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/900d7f6c075fd78e63503f31d267dbc16b3983d9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/900d7f6c075fd78e63503f31d267dbc16b3983d9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=900d7f6c075fd78e63503f31d267dbc16b3983d9",
        "patch": "@@ -2647,7 +2647,9 @@ void ProcessMessage(\n             if (interruptMsgProc)\n                 return;\n \n-            // ignore INVs that don't match wtxidrelay setting\n+            // Ignore INVs that don't match wtxidrelay setting.\n+            // Note that orphan parent fetching always uses MSG_TX GETDATAs regardless of the wtxidrelay setting.\n+            // This is fine as no INV messages are involved in that process.\n             if (State(pfrom.GetId())->m_wtxid_relay) {\n                 if (inv.IsMsgTx()) continue;\n             } else {\n@@ -2931,9 +2933,11 @@ void ProcessMessage(\n \n         TxValidationState state;\n \n-        nodestate->m_tx_download.m_tx_announced.erase(hash);\n-        nodestate->m_tx_download.m_tx_in_flight.erase(hash);\n-        EraseTxRequest(hash);\n+        for (uint256 hash : {txid, wtxid}) {\n+            nodestate->m_tx_download.m_tx_announced.erase(hash);\n+            nodestate->m_tx_download.m_tx_in_flight.erase(hash);\n+            EraseTxRequest(hash);\n+        }\n \n         std::list<CTransactionRef> lRemovedTxn;\n \n@@ -2985,17 +2989,15 @@ void ProcessMessage(\n                 uint32_t nFetchFlags = GetFetchFlags(pfrom);\n                 const auto current_time = GetTime<std::chrono::microseconds>();\n \n-                if (!State(pfrom.GetId())->m_wtxid_relay) {\n-                    for (const CTxIn& txin : tx.vin) {\n-                        // Here, we only have the txid (and not wtxid) of the\n-                        // inputs, so we only request parents from\n-                        // non-wtxid-relay peers.\n-                        // Eventually we should replace this with an improved\n-                        // protocol for getting all unconfirmed parents.\n-                        CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n-                        pfrom.AddKnownTx(txin.prevout.hash);\n-                        if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom.GetId()), ToGenTxid(_inv), current_time);\n-                    }\n+                for (const CTxIn& txin : tx.vin) {\n+                    // Here, we only have the txid (and not wtxid) of the\n+                    // inputs, so we only request in txid mode, even for\n+                    // wtxidrelay peers.\n+                    // Eventually we should replace this with an improved\n+                    // protocol for getting all unconfirmed parents.\n+                    CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n+                    pfrom.AddKnownTx(txin.prevout.hash);\n+                    if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom.GetId()), ToGenTxid(_inv), current_time);\n                 }\n                 AddOrphanTx(ptx, pfrom.GetId());\n "
      }
    ]
  },
  {
    "sha": "e65d115b725640eefb3bfa09786447816f7ca9cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjVkMTE1YjcyNTY0MGVlZmIzYmZhMDk3ODY0NDc4MTZmN2NhOWNj",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-07-07T08:11:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:45:02Z"
      },
      "message": "test: request parents of orphan from wtxid relay peer",
      "tree": {
        "sha": "c39dbf0b1573f6ee77254a69c69b43c99eefb15e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c39dbf0b1573f6ee77254a69c69b43c99eefb15e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e65d115b725640eefb3bfa09786447816f7ca9cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e65d115b725640eefb3bfa09786447816f7ca9cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e65d115b725640eefb3bfa09786447816f7ca9cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e65d115b725640eefb3bfa09786447816f7ca9cc/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "900d7f6c075fd78e63503f31d267dbc16b3983d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/900d7f6c075fd78e63503f31d267dbc16b3983d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/900d7f6c075fd78e63503f31d267dbc16b3983d9"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "728212ca233515de8d3c4e88a9da1dc5813f9cb5",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e65d115b725640eefb3bfa09786447816f7ca9cc/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e65d115b725640eefb3bfa09786447816f7ca9cc/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=e65d115b725640eefb3bfa09786447816f7ca9cc",
        "patch": "@@ -2133,17 +2133,17 @@ def received_wtxidrelay():\n \n         # Send tx2 through; it's an orphan so won't be accepted\n         with mininode_lock:\n-            self.tx_node.last_message.pop(\"getdata\", None)\n-        test_transaction_acceptance(self.nodes[0], self.tx_node, tx2, with_witness=True, accepted=False)\n+            self.wtx_node.last_message.pop(\"getdata\", None)\n+        test_transaction_acceptance(self.nodes[0], self.wtx_node, tx2, with_witness=True, accepted=False)\n \n-        # Expect a request for parent (tx) due to use of non-WTX peer\n-        self.tx_node.wait_for_getdata([tx.sha256], 60)\n+        # Expect a request for parent (tx) by txid despite use of WTX peer\n+        self.wtx_node.wait_for_getdata([tx.sha256], 60)\n         with mininode_lock:\n-            lgd = self.tx_node.lastgetdata[:]\n+            lgd = self.wtx_node.lastgetdata[:]\n         assert_equal(lgd, [CInv(MSG_TX|MSG_WITNESS_FLAG, tx.sha256)])\n \n         # Send tx through\n-        test_transaction_acceptance(self.nodes[0], self.tx_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.wtx_node, tx, with_witness=False, accepted=True)\n \n         # Check tx2 is there now\n         assert_equal(tx2.hash in self.nodes[0].getrawmempool(), True)"
      }
    ]
  },
  {
    "sha": "a2bfac893549e2d62708d8cda7071b4fe9750a2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmJmYWM4OTM1NDllMmQ2MjcwOGQ4Y2RhNzA3MWI0ZmU5NzUwYTJk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-27T21:12:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:45:02Z"
      },
      "message": "refactor: use GenTxid in tx request functions",
      "tree": {
        "sha": "cd216e2e3bd0df876b2efb1bbe617ce973bb2ca7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd216e2e3bd0df876b2efb1bbe617ce973bb2ca7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2bfac893549e2d62708d8cda7071b4fe9750a2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bfac893549e2d62708d8cda7071b4fe9750a2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2bfac893549e2d62708d8cda7071b4fe9750a2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bfac893549e2d62708d8cda7071b4fe9750a2d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e65d115b725640eefb3bfa09786447816f7ca9cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e65d115b725640eefb3bfa09786447816f7ca9cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e65d115b725640eefb3bfa09786447816f7ca9cc"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "9c0a91adb1a181dda5b31697d1a389b8dd54c44a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bfac893549e2d62708d8cda7071b4fe9750a2d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bfac893549e2d62708d8cda7071b4fe9750a2d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a2bfac893549e2d62708d8cda7071b4fe9750a2d",
        "patch": "@@ -751,34 +751,34 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n     }\n }\n \n-void EraseTxRequest(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void EraseTxRequest(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    g_already_asked_for.erase(txid);\n+    g_already_asked_for.erase(gtxid.GetHash());\n }\n \n-std::chrono::microseconds GetTxRequestTime(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+std::chrono::microseconds GetTxRequestTime(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    auto it = g_already_asked_for.find(txid);\n+    auto it = g_already_asked_for.find(gtxid.GetHash());\n     if (it != g_already_asked_for.end()) {\n         return it->second;\n     }\n     return {};\n }\n \n-void UpdateTxRequestTime(const uint256& txid, std::chrono::microseconds request_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void UpdateTxRequestTime(const GenTxid& gtxid, std::chrono::microseconds request_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    auto it = g_already_asked_for.find(txid);\n+    auto it = g_already_asked_for.find(gtxid.GetHash());\n     if (it == g_already_asked_for.end()) {\n-        g_already_asked_for.insert(std::make_pair(txid, request_time));\n+        g_already_asked_for.insert(std::make_pair(gtxid.GetHash(), request_time));\n     } else {\n         g_already_asked_for.update(it, request_time);\n     }\n }\n \n-std::chrono::microseconds CalculateTxGetDataTime(const uint256& txid, std::chrono::microseconds current_time, bool use_inbound_delay, bool use_txid_delay) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+std::chrono::microseconds CalculateTxGetDataTime(const GenTxid& gtxid, std::chrono::microseconds current_time, bool use_inbound_delay, bool use_txid_delay) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::chrono::microseconds process_time;\n-    const auto last_request_time = GetTxRequestTime(txid);\n+    const auto last_request_time = GetTxRequestTime(gtxid);\n     // First time requesting this tx\n     if (last_request_time.count() == 0) {\n         process_time = current_time;\n@@ -811,7 +811,7 @@ void RequestTx(CNodeState* state, const GenTxid& gtxid, std::chrono::microsecond\n \n     // Calculate the time to try requesting this transaction. Use\n     // fPreferredDownload as a proxy for outbound peers.\n-    const auto process_time = CalculateTxGetDataTime(gtxid.GetHash(), current_time, !state->fPreferredDownload, !state->m_wtxid_relay && g_wtxid_relay_peers > 0);\n+    const auto process_time = CalculateTxGetDataTime(gtxid, current_time, !state->fPreferredDownload, !state->m_wtxid_relay && g_wtxid_relay_peers > 0);\n \n     peer_download_state.m_tx_process_time.emplace(process_time, gtxid);\n }\n@@ -2933,10 +2933,10 @@ void ProcessMessage(\n \n         TxValidationState state;\n \n-        for (uint256 hash : {txid, wtxid}) {\n-            nodestate->m_tx_download.m_tx_announced.erase(hash);\n-            nodestate->m_tx_download.m_tx_in_flight.erase(hash);\n-            EraseTxRequest(hash);\n+        for (const GenTxid& gtxid : {GenTxid(false, txid), GenTxid(true, wtxid)}) {\n+            nodestate->m_tx_download.m_tx_announced.erase(gtxid.GetHash());\n+            nodestate->m_tx_download.m_tx_in_flight.erase(gtxid.GetHash());\n+            EraseTxRequest(gtxid);\n         }\n \n         std::list<CTransactionRef> lRemovedTxn;\n@@ -4539,15 +4539,15 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             if (!AlreadyHave(inv, m_mempool)) {\n                 // If this transaction was last requested more than 1 minute ago,\n                 // then request.\n-                const auto last_request_time = GetTxRequestTime(gtxid.GetHash());\n+                const auto last_request_time = GetTxRequestTime(gtxid);\n                 if (last_request_time <= current_time - GETDATA_TX_INTERVAL) {\n                     LogPrint(BCLog::NET, \"Requesting %s peer=%d\\n\", inv.ToString(), pto->GetId());\n                     vGetData.push_back(inv);\n                     if (vGetData.size() >= MAX_GETDATA_SZ) {\n                         connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n                         vGetData.clear();\n                     }\n-                    UpdateTxRequestTime(gtxid.GetHash(), current_time);\n+                    UpdateTxRequestTime(gtxid, current_time);\n                     state.m_tx_download.m_tx_in_flight.emplace(gtxid.GetHash(), current_time);\n                 } else {\n                     // This transaction is in flight from someone else; queue\n@@ -4562,7 +4562,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     // would open us up to an attacker using inbound\n                     // wtxid-relay to prevent us from requesting transactions\n                     // from outbound txid-relay peers).\n-                    const auto next_process_time = CalculateTxGetDataTime(gtxid.GetHash(), current_time, !state.fPreferredDownload, false);\n+                    const auto next_process_time = CalculateTxGetDataTime(gtxid, current_time, !state.fPreferredDownload, false);\n                     tx_process_time.emplace(next_process_time, gtxid);\n                 }\n             } else {"
      }
    ]
  },
  {
    "sha": "5c124e17407a5b5824fec062b73a03a1030fa28c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzEyNGUxNzQwN2E1YjU4MjRmZWMwNjJiNzNhMDNhMTAzMGZhMjhj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-23T01:38:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:45:02Z"
      },
      "message": "refactor: make FindTxForGetData use GenTxid",
      "tree": {
        "sha": "35adc58069def4e6d64d58fb1e7e27db444eb912",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35adc58069def4e6d64d58fb1e7e27db444eb912"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c124e17407a5b5824fec062b73a03a1030fa28c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c124e17407a5b5824fec062b73a03a1030fa28c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c124e17407a5b5824fec062b73a03a1030fa28c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c124e17407a5b5824fec062b73a03a1030fa28c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2bfac893549e2d62708d8cda7071b4fe9750a2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bfac893549e2d62708d8cda7071b4fe9750a2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2bfac893549e2d62708d8cda7071b4fe9750a2d"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "eb930f14a1f9296f0a1c5d76d4c89c12b6323e84",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c124e17407a5b5824fec062b73a03a1030fa28c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c124e17407a5b5824fec062b73a03a1030fa28c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5c124e17407a5b5824fec062b73a03a1030fa28c",
        "patch": "@@ -236,7 +236,7 @@ namespace {\n     /** When our tip was last updated. */\n     std::atomic<int64_t> g_last_tip_update(0);\n \n-    /** Relay map */\n+    /** Relay map (txid or wtxid -> CTransactionRef) */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n     MapRelay mapRelay GUARDED_BY(cs_main);\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs. */\n@@ -1671,9 +1671,9 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n }\n \n //! Determine whether or not a peer can request a transaction, and return it (or nullptr if not found or not allowed).\n-CTransactionRef static FindTxForGetData(const CNode& peer, const uint256& txid_or_wtxid, bool use_wtxid, const std::chrono::seconds mempool_req, const std::chrono::seconds now) LOCKS_EXCLUDED(cs_main)\n+CTransactionRef static FindTxForGetData(const CNode& peer, const GenTxid& gtxid, const std::chrono::seconds mempool_req, const std::chrono::seconds now) LOCKS_EXCLUDED(cs_main)\n {\n-    auto txinfo = mempool.info(txid_or_wtxid, use_wtxid);\n+    auto txinfo = mempool.info(gtxid.GetHash(), gtxid.IsWtxid());\n     if (txinfo.tx) {\n         // If a TX could have been INVed in reply to a MEMPOOL request,\n         // or is older than UNCONDITIONAL_RELAY_DELAY, permit the request\n@@ -1686,11 +1686,11 @@ CTransactionRef static FindTxForGetData(const CNode& peer, const uint256& txid_o\n     {\n         LOCK(cs_main);\n         // Otherwise, the transaction must have been announced recently.\n-        if (State(peer.GetId())->m_recently_announced_invs.contains(txid_or_wtxid)) {\n+        if (State(peer.GetId())->m_recently_announced_invs.contains(gtxid.GetHash())) {\n             // If it was, it can be relayed from either the mempool...\n             if (txinfo.tx) return std::move(txinfo.tx);\n             // ... or the relay pool.\n-            auto mi = mapRelay.find(txid_or_wtxid);\n+            auto mi = mapRelay.find(gtxid.GetHash());\n             if (mi != mapRelay.end()) return mi->second;\n         }\n     }\n@@ -1727,7 +1727,7 @@ void static ProcessGetData(CNode& pfrom, const CChainParams& chainparams, CConnm\n             continue;\n         }\n \n-        CTransactionRef tx = FindTxForGetData(pfrom, inv.hash, inv.IsMsgWtx(), mempool_req, now);\n+        CTransactionRef tx = FindTxForGetData(pfrom, ToGenTxid(inv), mempool_req, now);\n         if (tx) {\n             // WTX and WITNESS_TX imply we serialize with witness\n             int nSendFlags = (inv.IsMsgTx() ? SERIALIZE_TRANSACTION_NO_WITNESS : 0);"
      }
    ]
  },
  {
    "sha": "10b7a6d532148f880568c529e61a6d7edc7c91a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGI3YTZkNTMyMTQ4Zjg4MDU2OGM1MjllNjFhNmQ3ZWRjN2M5MWE5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-23T02:11:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:45:03Z"
      },
      "message": "refactor: make txmempool interface use GenTxid",
      "tree": {
        "sha": "92594d393f9231d738fdf8c0e1c98071eb6a3831",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92594d393f9231d738fdf8c0e1c98071eb6a3831"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10b7a6d532148f880568c529e61a6d7edc7c91a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b7a6d532148f880568c529e61a6d7edc7c91a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10b7a6d532148f880568c529e61a6d7edc7c91a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b7a6d532148f880568c529e61a6d7edc7c91a9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c124e17407a5b5824fec062b73a03a1030fa28c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c124e17407a5b5824fec062b73a03a1030fa28c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c124e17407a5b5824fec062b73a03a1030fa28c"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 16,
      "deletions": 11
    },
    "files": [
      {
        "sha": "88e73cd804201943608d5b630f8074447b12b40c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b7a6d532148f880568c529e61a6d7edc7c91a9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b7a6d532148f880568c529e61a6d7edc7c91a9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=10b7a6d532148f880568c529e61a6d7edc7c91a9",
        "patch": "@@ -1453,7 +1453,7 @@ bool static AlreadyHave(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LO\n                 if (g_recent_confirmed_transactions->contains(inv.hash)) return true;\n             }\n \n-            return recentRejects->contains(inv.hash) || mempool.exists(inv.hash, inv.IsMsgWtx());\n+            return recentRejects->contains(inv.hash) || mempool.exists(ToGenTxid(inv));\n         }\n     case MSG_BLOCK:\n     case MSG_WITNESS_BLOCK:\n@@ -1673,7 +1673,7 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n //! Determine whether or not a peer can request a transaction, and return it (or nullptr if not found or not allowed).\n CTransactionRef static FindTxForGetData(const CNode& peer, const GenTxid& gtxid, const std::chrono::seconds mempool_req, const std::chrono::seconds now) LOCKS_EXCLUDED(cs_main)\n {\n-    auto txinfo = mempool.info(gtxid.GetHash(), gtxid.IsWtxid());\n+    auto txinfo = mempool.info(gtxid);\n     if (txinfo.tx) {\n         // If a TX could have been INVed in reply to a MEMPOOL request,\n         // or is older than UNCONDITIONAL_RELAY_DELAY, permit the request\n@@ -4358,14 +4358,15 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                         std::set<uint256>::iterator it = vInvTx.back();\n                         vInvTx.pop_back();\n                         uint256 hash = *it;\n+                        CInv inv(state.m_wtxid_relay ? MSG_WTX : MSG_TX, hash);\n                         // Remove it from the to-be-sent set\n                         pto->m_tx_relay->setInventoryTxToSend.erase(it);\n                         // Check if not in the filter already\n                         if (pto->m_tx_relay->filterInventoryKnown.contains(hash)) {\n                             continue;\n                         }\n                         // Not in the mempool anymore? don't bother sending it.\n-                        auto txinfo = m_mempool.info(hash, state.m_wtxid_relay);\n+                        auto txinfo = m_mempool.info(ToGenTxid(inv));\n                         if (!txinfo.tx) {\n                             continue;\n                         }\n@@ -4378,7 +4379,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                         if (pto->m_tx_relay->pfilter && !pto->m_tx_relay->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n                         State(pto->GetId())->m_recently_announced_invs.insert(hash);\n-                        vInv.push_back(CInv(state.m_wtxid_relay ? MSG_WTX : MSG_TX, hash));\n+                        vInv.push_back(inv);\n                         nRelayedTransactions++;\n                         {\n                             // Expire old relay messages"
      },
      {
        "sha": "de1a3ec68f2aca68ec83a6995a19af4cb26e2570",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b7a6d532148f880568c529e61a6d7edc7c91a9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b7a6d532148f880568c529e61a6d7edc7c91a9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=10b7a6d532148f880568c529e61a6d7edc7c91a9",
        "patch": "@@ -811,15 +811,17 @@ CTransactionRef CTxMemPool::get(const uint256& hash) const\n     return i->GetSharedTx();\n }\n \n-TxMempoolInfo CTxMemPool::info(const uint256& hash, bool wtxid) const\n+TxMempoolInfo CTxMemPool::info(const GenTxid& gtxid) const\n {\n     LOCK(cs);\n-    indexed_transaction_set::const_iterator i = (wtxid ? get_iter_from_wtxid(hash) : mapTx.find(hash));\n+    indexed_transaction_set::const_iterator i = (gtxid.IsWtxid() ? get_iter_from_wtxid(gtxid.GetHash()) : mapTx.find(gtxid.GetHash()));\n     if (i == mapTx.end())\n         return TxMempoolInfo();\n     return GetInfo(i);\n }\n \n+TxMempoolInfo CTxMemPool::info(const uint256& txid) const { return info(GenTxid{false, txid}); }\n+\n void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta)\n {\n     {"
      },
      {
        "sha": "4743e1b63aca7e4311830dd73259ced6dcdae45b",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b7a6d532148f880568c529e61a6d7edc7c91a9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b7a6d532148f880568c529e61a6d7edc7c91a9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=10b7a6d532148f880568c529e61a6d7edc7c91a9",
        "patch": "@@ -716,22 +716,24 @@ class CTxMemPool\n         return totalTxSize;\n     }\n \n-    bool exists(const uint256& hash, bool wtxid=false) const\n+    bool exists(const GenTxid& gtxid) const\n     {\n         LOCK(cs);\n-        if (wtxid) {\n-            return (mapTx.get<index_by_wtxid>().count(hash) != 0);\n+        if (gtxid.IsWtxid()) {\n+            return (mapTx.get<index_by_wtxid>().count(gtxid.GetHash()) != 0);\n         }\n-        return (mapTx.count(hash) != 0);\n+        return (mapTx.count(gtxid.GetHash()) != 0);\n     }\n+    bool exists(const uint256& txid) const { return exists(GenTxid{false, txid}); }\n \n     CTransactionRef get(const uint256& hash) const;\n     txiter get_iter_from_wtxid(const uint256& wtxid) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n     {\n         AssertLockHeld(cs);\n         return mapTx.project<0>(mapTx.get<index_by_wtxid>().find(wtxid));\n     }\n-    TxMempoolInfo info(const uint256& hash, bool wtxid=false) const;\n+    TxMempoolInfo info(const uint256& hash) const;\n+    TxMempoolInfo info(const GenTxid& gtxid) const;\n     std::vector<TxMempoolInfo> infoAll() const;\n \n     size_t DynamicMemoryUsage() const;"
      }
    ]
  }
]