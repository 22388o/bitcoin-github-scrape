sipa,2020-07-23 01:04:05,"@ajtowns I made a few changes compared to your branch:\n\n* The pair type is a bit richer, and in primitives/transaction.h (so that it's available from txrequest in #19184).\n* All of the txrequest data structures use it, not just `m_tx_process_time` - this feels more obviously correct.\n* The restriction that wtxidrelay peers can only announce using MSG_WTX invs remains - this isn't violated ",https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-662771502,662771502,
naumenkogs,2020-07-23 09:19:30,utACK 154778d,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-662904927,662904927,
jonatack,2020-07-24 08:08:11,"ACK 338f80e per `git range-diff 007e15dc 154778d 338f80e` and re-code review. Re-debug build with Clang 12, ran tests and node.",https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-663400625,663400625,
sipa,2020-07-25 21:31:46,"Changed the code to treat tx announcements as keyed by hash (rather than hash+wtxidness), so that txid requests for parents of unconfirmed transactions won't result in a duplicate query if a wtxid with the same hash is already in flight. This reduces the diff a bit as well, and removed the need for ToString().",https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-663908280,663908280,
jnewbery,2020-07-26 08:28:01,"> I have a hard time reasoning about the consistency of the various data structures around tx requesting if we don't.\n\nI 100% agree with this. Net processing is complicated enough as it is without having data structures hold a mixture of different types. txids and wtxids are different types that just happen to both be encoded in a uint256, which means the compiler can't protect us from bugs wh",https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-663958303,663958303,
sipa,2020-07-26 17:02:20,"@jnewbery Would it help if the various txrequest-related functions take a GenTxid argument, but where appropriate, call GetHash() on it when they really just need a txid-or-wtxid key, instead of passing those keys around as uint256s?",https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-664014014,664014014,
sdaftuar,2020-07-26 19:29:52,"Code review ACK, apart from the test change which I haven't reviewed.  Will test.",https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-664030337,664030337,
sdaftuar,2020-07-26 21:43:43,ACK 707d0f4b0b0f21bbc9f962119fb130e4cceec6dc,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-664044340,664044340,
naumenkogs,2020-07-27 09:19:42,utACK 707d0f4b0b0f21bbc9f962119fb130e4cceec6dc,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-664232191,664232191,
DrahtBot,2020-07-27 10:48:13,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19611 (p2p: refactor CInv::type from public int to private uint32_t by jonatack)\n* #19610 (p2p, refactor: add `CInv` blo",https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-664311281,664311281,
sipa,2020-07-27 21:28:29,"I added 3 extra commits that introduce more `GenTxid` uses, without changing behavior.",https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-664648005,664648005,
sdaftuar,2020-07-27 22:50:42,utACK c048357f2421eb7a5b81375be267e71fd2d80334,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-664677749,664677749,
naumenkogs,2020-07-28 07:24:59,utACK c048357,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-664827136,664827136,
jonatack,2020-07-30 06:48:34,Light ACK c048357f2421eb7a5b81375be267e71fd2d80334 modulo Gleb's and John's feedback above.,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-666163328,666163328,
sipa,2020-07-30 20:49:10,Rebased and addressed comments.,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-666686843,666686843,
ajtowns,2020-07-31 06:23:00,ACK 10b7a6d532148f880568c529e61a6d7edc7c91a9 -- code review. Using gtxid to replace the is_txid_or_wtxid flag for the mempool functions is nice.,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-666951196,666951196,
naumenkogs,2020-07-31 07:19:52,utACK 10b7a6d,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-666974158,666974158,
jonatack,2020-07-31 08:06:28,ACK 10b7a6d532148f880568c529e61a6d7edc7c91a9,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-666993517,666993517,
jnewbery,2020-07-31 11:13:03,Code review ACK 10b7a6d532148f880568c529e61a6d7edc7c91a9,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-667068668,667068668,
jnewbery,2020-07-31 13:20:45,I have a backport of (the first 4 commits of) this to v0.20 here: https://github.com/jnewbery/bitcoin/tree/2020-07-v20-wtxid-orphan. It can be added to #19606 or PR'ed separately. Whatever is easiest for reviewers.,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-667116307,667116307,
jnewbery,2020-11-05 15:40:13,Backported to 0.20 in #20317,https://github.com/bitcoin/bitcoin/pull/19569#issuecomment-722457108,722457108,
ajtowns,2020-07-23 06:54:20,"Since you're using accessor methods anyway, could make it:\n\n```c++\nprivate:\n    const std::tuple<bool, uint256> data;\npublic:\n    friend bool operator<(const GenTxid& a, const GenTxid& b) { return a.data < b.data; }\n```",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459247426,459247426,src/primitives/transaction.h
naumenkogs,2020-07-23 07:20:59,"Not a super-strong opinion, but I'm wondering if we should call it `gtxid` or `gentxid` everywhere. txid used to mean something different before, and it still sort of does?",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459258317,459258317,src/net_processing.cpp
naumenkogs,2020-07-23 07:32:33,"I believe this wouldn't work at the moment, because there's a check:\n```\n            if (State(pfrom.GetId())->m_wtxid_relay) {\n                if (inv.type == MSG_TX) continue;\n            } else {\n                if (inv.type == MSG_WTX) continue;\n            }\n```\n\nDoes it rely on some other pending PR? Is that what you referring to: ""Based on a commit by Anthony Towns.""? ",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459263434,459263434,src/net_processing.cpp
naumenkogs,2020-07-23 07:34:03,"Or maybe it's just missing a commit to remove this check, I don't know :)",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459264128,459264128,src/net_processing.cpp
ajtowns,2020-07-23 07:34:09,Could have a `GenTxid::ToString` which specifies whether the hash is a wtxid or a regular txid,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459264161,459264161,src/net_processing.cpp
sipa,2020-07-23 07:44:02,"This is in INV handling. When requesting parents of an orphan, there is no INV involved: a GETDATA is sent directly in response to receiving the TX.\n\nAm I missing something why changing this is needed?",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459268599,459268599,src/net_processing.cpp
ajtowns,2020-07-23 08:04:57,"This works as-is for me both live against a mainnet wtxid relay peer, and via the modified test.",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459278883,459278883,src/net_processing.cpp
naumenkogs,2020-07-23 09:18:39,"You are right, I was confused by INV/GETDATA. Feel free to mark as resolved :)",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459318734,459318734,src/net_processing.cpp
jonatack,2020-07-23 10:28:33,"f8e8a44d suggestion for ""support... is supported"" here if you retouch\n```suggestion\n* [`BIP 339`](https://github.com/bitcoin/bips/blob/master/bip-0339.mediawiki): Announcing and fetching transactions by wtxid is supported as of **v0.21.0** ([PR 18044](https://github.com/bitcoin/bitcoin/pull/18044)).\n```\nor just ""Relaying...""",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459354787,459354787,doc/bips.md
sipa,2020-07-23 22:40:18,"Maybe personal preference, but I don't think slightly easier comparators weighs up against losing meaningful names for the member variables.",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459767301,459767301,src/primitives/transaction.h
sipa,2020-07-23 23:33:54,Seems reasonable; done. I've changed all `GenTxid` variables in net_processing to be `gtxid`.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459784201,459784201,src/net_processing.cpp
sipa,2020-07-23 23:34:05,Done.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459784256,459784256,src/net_processing.cpp
sipa,2020-07-23 23:35:20,Done.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r459784642,459784642,doc/bips.md
ariard,2020-07-24 13:19:33,"Is this a slight behavior change ?\n\nBy erasing both wtxid/txid from `g_already_asked_for`, if we receive a wtxid from a wtixd-relay peer and at same time gets an announcement for the same tx from few txid-relay only peers, when we monitor our getdatas in `SendMessages`, we would send a spurious GETDATA for the first-processed txid-relay peer as `last_request_time` is null.",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460046862,460046862,src/net_processing.cpp
ariard,2020-07-24 13:37:50,"Strictly interpreting the BIP, the requirement for wtxid-relay on fetching is scoped to ""announced transactions from that peer"", and orphan parents have not been announced so we don't violate wtxid-relay policy here. Concern is on future BIP implementers on how they interpret ""is required"" and severing the connection for violations. Lightweight clients broadcasting a parent + CPFP tx may know issu",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460056991,460056991,src/net_processing.cpp
sipa,2020-07-24 17:24:07,"@ariard After a tx arrives successfully, it should be AlreadyHave, and new INVs for it (of whatever type) should be ignored.",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460188618,460188618,src/net_processing.cpp
sdaftuar,2020-07-24 17:32:13,"Switching from `uint256` here to `GenTxid` means that when a non-segwit transaction is announced by both a wtxid-relay peer and txid-relay peer, we'll be more likely to request it twice -- for instance, if we first hear of it from a txidrelay peer, and then hear about it >2s later from a wtxidrelay peer (but before the transaction is successfully fetched). \n\nIt doesn't seem to me that we need ",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460192659,460192659,src/net_processing.cpp
sdaftuar,2020-07-24 17:39:37,"I could imagine that another way this might manifest itself -- even when only connected to wtxid-relay peers -- is if a non-segwit parent tx and some child tx are announced at roughly the same time, and the child propagates to us before the parent (eg if we request the transactions from different peers), then the orphan fetching on the parent when the child is received might result in a spurious g",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460196325,460196325,src/net_processing.cpp
sdaftuar,2020-07-24 18:07:26,"As I mentioned elsewhere, this same `uint256` might already be in-flight (from the same peer or another) as a WTX, but because the map keys have all been changed to be by `GenTxid`, this would go undetected.",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460209907,460209907,src/net_processing.cpp
sipa,2020-07-24 18:28:02,"The reason I'm changing it here is because I have a hard time reasoning about the consistency of the various data structures around tx requesting if we don't. That, plus the fact that I don't really see a way to maintain the same behaviour sanely in #19184 where I'd hope to not duplicate the information any more.\n\nCould this be addressed by instead testing for both WTX+wtxid and TX+wtxid?",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460219698,460219698,src/net_processing.cpp
sdaftuar,2020-07-25 18:47:44,"I haven't yet reviewed #19184, so I'll try to do that to get a better sense of what you're referring to.\n\n> Could this be addressed by instead testing for both WTX+wtxid and TX+wtxid?\n\nI think that would also work, but if that's how we would do all lookups into `g_already_asked_for`, I don't know why we'd bother with that complexity? \n\nTo be clear, my suggested change is fairly minimal",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460432867,460432867,src/net_processing.cpp
sipa,2020-07-25 19:34:31,"I see.\n\nIt's just a question of whether we treat the tx request data as conceptually ""keyed"" by hash (and seeing is_wtxid as metadata along with the request), or by (is_wtxid, hash). The fact that we may want to treat a wtxid request for the same hash as a txid request is a sign that it should probably be the first.\n\nI picked the (is_wtxid, hash} based keying first as it seemed easier to r",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460436847,460436847,src/net_processing.cpp
sipa,2020-07-25 21:29:19,Done.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460448528,460448528,src/net_processing.cpp
jonatack,2020-07-26 08:53:43,"ed2c0b97baa\n```suggestion\n        for (const uint256& hash : {txid, wtxid}) {\n```",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460499947,460499947,src/net_processing.cpp
jnewbery,2020-07-26 13:29:16,"Is there a good reason to not use a `CInv` as the value here, rather than creating a new class just for use here?",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460528111,460528111,src/net_processing.cpp
sipa,2020-07-26 16:30:42,I have a follow-up PR that changes several functions to take a GenTxid instead of is_wtxid/txid_or_wtxid arguments.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460547180,460547180,src/net_processing.cpp
naumenkogs,2020-07-27 07:34:35,"This is a behavior change? We used to call it once on txid OR wtxid, now you calling it twice?\n\nThat's probably fine, but why use this for loop at all? `hash` is already defined above, depending on the peer's wtxid support",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460699267,460699267,src/net_processing.cpp
naumenkogs,2020-07-27 07:45:18,Worst case this causes us to request/track the same transaction twice?,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460704719,460704719,src/net_processing.cpp
sipa,2020-07-27 07:46:32,I already changed the code to address this.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460705311,460705311,src/net_processing.cpp
sipa,2020-07-27 07:57:50,"Before, we only ever asked for hashes in one way from a peer, so it was sufficient to only erase that one.\n\nThat's no longer the case: outgoing GETDATA requests may be txid or wtxid based, and we don't remember which of the two (it depends on whether it was in response to an INV, or a request for an orphan parent), so either we track that, or just delete both.\n\nIt's of course a change in behav",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460711295,460711295,src/net_processing.cpp
naumenkogs,2020-07-27 08:03:06,"I see how it works now.\nPart of my confusion was that it's part of the ""refactor"" commit, perhaps better belongs to the next commit.",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460714058,460714058,src/net_processing.cpp
sipa,2020-07-27 21:26:05,Added those commits to this PR.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r461179757,461179757,src/net_processing.cpp
sipa,2020-07-27 21:26:27,"Done, together with an additional commit to changes it to `GenTxids`.",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r461179966,461179966,src/net_processing.cpp
naumenkogs,2020-07-28 07:23:13,nit: var name should be gtxid,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r461371724,461371724,src/txmempool.h
naumenkogs,2020-07-28 07:23:36,other places in this commit too: c048357f2421eb7a5b81375be267e71fd2d80334,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r461371925,461371925,src/txmempool.h
jnewbery,2020-07-29 12:14:41,Consider renaming `txid_or_wtxid` to `gtxid` to match other functions.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r462252378,462252378,src/net_processing.cpp
jnewbery,2020-07-29 12:15:44,sort plz,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r462252929,462252929,src/protocol.h
jnewbery,2020-07-29 12:41:29,I agree with @naumenkogs (https://github.com/bitcoin/bitcoin/pull/19569#discussion_r460714058) that this change should be introduced in _p2p: enable fetching of orphans from wtxid peers_ instead of _refactor: add GenTxid (=txid or wtxid) type and use it for tx request logic_,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r462267221,462267221,src/net_processing.cpp
jnewbery,2020-07-30 09:58:55,"`ToGenTxid()` expects that we constructed the `CInv` ourselves or that we verified that it's for a transaction type CInv. Here, the only guarantee that `inv` is transaction type is that AlreadyHave returns true for non-transaction and non-block type invs. That's not obvious and seems a bit brittle. Perhaps we should change this else branch into an `else if (inv.type == MSG_TX || inv.type == MSG_WI",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r462887483,462887483,src/net_processing.cpp
jnewbery,2020-07-30 10:27:55,"I think it'd be better if `AlreadyHave` was split into different functions for block and tx, and the tx version took a GenTxid. Could be done in a follow up. I have a branch here that does that: https://github.com/jnewbery/bitcoin/tree/2020-07-split-already-have",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r462902569,462902569,src/net_processing.cpp
jonatack,2020-07-30 16:07:48,"> `else if (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX || inv.type == MSG_WTX)` to make this safer?\n\nper change in `protocol.h:L447` this would now be simpler: `else if (inv.IsGenTxMsg())`\n",https://github.com/bitcoin/bitcoin/pull/19569#discussion_r463108297,463108297,src/net_processing.cpp
sipa,2020-07-30 20:46:51,You're right; moved it to the other commit.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r463261444,463261444,src/net_processing.cpp
sipa,2020-07-30 20:47:05,Done.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r463261543,463261543,src/txmempool.h
sipa,2020-07-30 20:47:13,Done.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r463261619,463261619,src/net_processing.cpp
sipa,2020-07-30 20:47:21,don.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r463261665,463261665,src/protocol.h
sipa,2020-07-30 20:47:29,Done.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r463261736,463261736,src/net_processing.cpp
sipa,2020-07-30 20:48:46,Let's fix that by splitting AlreadyHave up separately.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r463262396,463262396,src/net_processing.cpp
jonatack,2020-08-08 13:52:23,Done in #19610.,https://github.com/bitcoin/bitcoin/pull/19569#discussion_r467467113,467467113,src/net_processing.cpp
