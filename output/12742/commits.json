[
  {
    "sha": "1ec1602a4549f6b68586cead8eff701bceb624f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWMxNjAyYTQ1NDlmNmI2ODU4NmNlYWQ4ZWZmNzAxYmNlYjYyNGY1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-21T02:10:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-21T04:24:49Z"
      },
      "message": "Make FastRandomContext support standard C++11 RNG interface\n\nThis makes it possible to plug it into the various standard C++11 random\ndistribution algorithms and other functions like std::shuffle.",
      "tree": {
        "sha": "39620ad95f180c7e3cb24ada85e8fbb70defa921",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39620ad95f180c7e3cb24ada85e8fbb70defa921"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ec1602a4549f6b68586cead8eff701bceb624f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec1602a4549f6b68586cead8eff701bceb624f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ec1602a4549f6b68586cead8eff701bceb624f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec1602a4549f6b68586cead8eff701bceb624f5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ba3d4f4393d81148422d24d222fe7ed00130194",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ba3d4f4393d81148422d24d222fe7ed00130194",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ba3d4f4393d81148422d24d222fe7ed00130194"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "632ab058832e9510292da23ca2a66d0483a177ef",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ec1602a4549f6b68586cead8eff701bceb624f5/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ec1602a4549f6b68586cead8eff701bceb624f5/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=1ec1602a4549f6b68586cead8eff701bceb624f5",
        "patch": "@@ -11,6 +11,7 @@\n #include <uint256.h>\n \n #include <stdint.h>\n+#include <limits>\n \n /* Seed OpenSSL PRNG with additional entropy data */\n void RandAddSeed();\n@@ -121,6 +122,12 @@ class FastRandomContext {\n \n     /** Generate a random boolean. */\n     bool randbool() { return randbits(1); }\n+\n+    // Compatibility with the C++11 UniformRandomBitGenerator concept\n+    typedef uint64_t result_type;\n+    static constexpr uint64_t min() { return 0; }\n+    static constexpr uint64_t max() { return std::numeric_limits<uint64_t>::max(); }\n+    inline uint64_t operator()() { return rand64(); }\n };\n \n /* Number of random bytes returned by GetOSRand."
      },
      {
        "sha": "623ed239f04942b0afb66415ccddcb844c6e9199",
        "filename": "src/test/random_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ec1602a4549f6b68586cead8eff701bceb624f5/src/test/random_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ec1602a4549f6b68586cead8eff701bceb624f5/src/test/random_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/random_tests.cpp?ref=1ec1602a4549f6b68586cead8eff701bceb624f5",
        "patch": "@@ -8,6 +8,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n+#include <random>\n+#include <algorithm>\n+\n BOOST_FIXTURE_TEST_SUITE(random_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(osrandom_tests)\n@@ -57,4 +60,23 @@ BOOST_AUTO_TEST_CASE(fastrandom_randbits)\n     }\n }\n \n+/** Does-it-compile test for compatibility with standard C++11 RNG interface. */\n+BOOST_AUTO_TEST_CASE(stdrandom_test)\n+{\n+    FastRandomContext ctx;\n+    std::uniform_int_distribution<int> distribution(3, 9);\n+    for (int i = 0; i < 100; ++i) {\n+        int x = distribution(ctx);\n+        BOOST_CHECK(x >= 3);\n+        BOOST_CHECK(x <= 9);\n+\n+        std::vector<int> test{1,2,3,4,5,6,7,8,9,10};\n+        std::shuffle(test.begin(), test.end(), ctx);\n+        for (int j = 1; j <= 10; ++j) {\n+            BOOST_CHECK(std::find(test.begin(), test.end(), j) != test.end());\n+        }\n+    }\n+\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]