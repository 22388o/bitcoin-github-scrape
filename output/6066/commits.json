[
  {
    "sha": "97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2JkNTcyYWVmY2Q0YTNjYzE0YThiMmEzYmNmZjk5N2RjYzFjNmQ2",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-04-24T17:14:45Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-04-26T18:50:14Z"
      },
      "message": "Rolling bloom filter class\n\nFor when you need to keep track of the last N items\nyou've seen, and can tolerate some false-positives.",
      "tree": {
        "sha": "38c58da960d3969228941222760f3652fab0d548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38c58da960d3969228941222760f3652fab0d548"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlU9M2YACgkQdYgkL74406gAaACgk2k+W93JzZp25flf4nunOXxR\n9ykAn2691mrOE8OB5SPblfWuF/EeGVBL\n=vjO/\n-----END PGP SIGNATURE-----",
        "payload": "tree 38c58da960d3969228941222760f3652fab0d548\nparent 1623f6e3375430b42e7120dc02e8df8c7c22fc16\nauthor Gavin Andresen <gavinandresen@gmail.com> 1429895685 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1430074214 -0400\n\nRolling bloom filter class\n\nFor when you need to keep track of the last N items\nyou've seen, and can tolerate some false-positives.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1623f6e3375430b42e7120dc02e8df8c7c22fc16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1623f6e3375430b42e7120dc02e8df8c7c22fc16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1623f6e3375430b42e7120dc02e8df8c7c22fc16"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 152,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1dd7308bef767a730a98e657deea3247dee2d96a",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6",
        "patch": "@@ -40,6 +40,17 @@ nFlags(nFlagsIn)\n {\n }\n \n+// Private constructor used by CRollingBloomFilter\n+CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn) :\n+vData((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)) / 8),\n+isFull(false),\n+isEmpty(true),\n+nHashFuncs((unsigned int)(vData.size() * 8 / nElements * LN2)),\n+nTweak(nTweakIn),\n+nFlags(BLOOM_UPDATE_NONE)\n+{\n+}\n+\n inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const\n {\n     // 0xFBA4C795 chosen as it guarantees a reasonable bit difference between nHashNum values.\n@@ -197,3 +208,38 @@ void CBloomFilter::UpdateEmptyFull()\n     isFull = full;\n     isEmpty = empty;\n }\n+\n+CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate, unsigned int nTweak) :\n+    b1(nElements*2, fpRate, nTweak), b2(nElements*2, fpRate, nTweak)\n+{\n+    // Implemented using two bloom filters of nElements each.\n+    // We fill them up, and clear them, staggered, every nElements\n+    // inserted, so at least one always contains the last nElements\n+    // inserted.\n+    nBloomSize = nElements*2;\n+    nInsertions = 0;\n+}\n+\n+void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n+{\n+    if (nInsertions%nBloomSize == 0)\n+        b1.clear();\n+    else if (nInsertions%nBloomSize == nBloomSize/2)\n+        b2.clear();\n+    b1.insert(vKey);\n+    b2.insert(vKey);\n+    ++nInsertions;\n+}\n+bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n+{\n+    if (nInsertions%nBloomSize < nBloomSize/2)\n+        return b2.contains(vKey);\n+    return b1.contains(vKey);\n+}\n+\n+void CRollingBloomFilter::clear()\n+{\n+    b1.clear();\n+    b2.clear();\n+    nInsertions = 0;\n+}"
      },
      {
        "sha": "7bab379a39ce722da31ead7f755eda4ebc57b4d9",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6",
        "patch": "@@ -53,6 +53,10 @@ class CBloomFilter\n \n     unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n \n+    // Private constructor for CRollingBloomFilter, no restrictions on size\n+    CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak);\n+    friend class CRollingBloomFilter;\n+\n public:\n     /**\n      * Creates a new bloom filter which will provide the given fp rate when filled with the given number of elements\n@@ -97,4 +101,28 @@ class CBloomFilter\n     void UpdateEmptyFull();\n };\n \n+/**\n+ * RollingBloomFilter is a probabilistic \"keep track of most recently inserted\" set.\n+ * Construct it with the number of items to keep track of, and a false-positive rate.\n+ *\n+ * contains(item) will always return true if item was one of the last N things\n+ * insert()'ed ... but may also return true for items that were not inserted.\n+ */\n+class CRollingBloomFilter\n+{\n+public:\n+    CRollingBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak);\n+\n+    void insert(const std::vector<unsigned char>& vKey);\n+    bool contains(const std::vector<unsigned char>& vKey) const;\n+\n+    void clear();\n+\n+private:\n+    unsigned int nBloomSize;\n+    unsigned int nInsertions;\n+    CBloomFilter b1, b2;\n+};\n+\n+\n #endif // BITCOIN_BLOOM_H"
      },
      {
        "sha": "1bda8a7ea161bac063a9a500672dfcb7d5da5f26",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6",
        "patch": "@@ -8,6 +8,7 @@\n #include \"clientversion.h\"\n #include \"key.h\"\n #include \"merkleblock.h\"\n+#include \"random.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"uint256.h\"\n@@ -459,4 +460,81 @@ BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)\n     BOOST_CHECK(!filter.contains(COutPoint(uint256S(\"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041\"), 0)));\n }\n \n+static std::vector<unsigned char> RandomData()\n+{\n+    uint256 r = GetRandHash();\n+    return std::vector<unsigned char>(r.begin(), r.end());\n+}\n+\n+BOOST_AUTO_TEST_CASE(rolling_bloom)\n+{\n+    // last-100-entry, 1% false positive:\n+    CRollingBloomFilter rb1(100, 0.01, 0);\n+\n+    // Overfill:\n+    static const int DATASIZE=399;\n+    std::vector<unsigned char> data[DATASIZE];\n+    for (int i = 0; i < DATASIZE; i++) {\n+        data[i] = RandomData();\n+        rb1.insert(data[i]);\n+    }\n+    // Last 100 guaranteed to be remembered:\n+    for (int i = 299; i < DATASIZE; i++) {\n+        BOOST_CHECK(rb1.contains(data[i]));\n+    }\n+\n+    // false positive rate is 1%, so we should get about 100 hits if\n+    // testing 10,000 random keys. We get worst-case false positive\n+    // behavior when the filter is as full as possible, which is\n+    // when we've inserted one minus an integer multiple of nElement*2.\n+    unsigned int nHits = 0;\n+    for (int i = 0; i < 10000; i++) {\n+        if (rb1.contains(RandomData()))\n+            ++nHits;\n+    }\n+    // Run test_bitcoin with --log_level=message to see BOOST_TEST_MESSAGEs:\n+    BOOST_TEST_MESSAGE(\"RollingBloomFilter got \" << nHits << \" false positives (~100 expected)\");\n+\n+    // Insanely unlikely to get a fp count outside this range:\n+    BOOST_CHECK(nHits > 25);\n+    BOOST_CHECK(nHits < 175);\n+\n+    BOOST_CHECK(rb1.contains(data[DATASIZE-1]));\n+    rb1.clear();\n+    BOOST_CHECK(!rb1.contains(data[DATASIZE-1]));\n+\n+    // Now roll through data, make sure last 100 entries\n+    // are always remembered:\n+    for (int i = 0; i < DATASIZE; i++) {\n+        if (i >= 100)\n+            BOOST_CHECK(rb1.contains(data[i-100]));\n+        rb1.insert(data[i]);\n+    }\n+\n+    // Insert 999 more random entries:\n+    for (int i = 0; i < 999; i++) {\n+        rb1.insert(RandomData());\n+    }\n+    // Sanity check to make sure the filter isn't just filling up:\n+    nHits = 0;\n+    for (int i = 0; i < DATASIZE; i++) {\n+        if (rb1.contains(data[i]))\n+            ++nHits;\n+    }\n+    // Expect about 5 false positives, more than 100 means\n+    // something is definitely broken.\n+    BOOST_TEST_MESSAGE(\"RollingBloomFilter got \" << nHits << \" false positives (~5 expected)\");\n+    BOOST_CHECK(nHits < 100);\n+\n+    // last-1000-entry, 0.01% false positive:\n+    CRollingBloomFilter rb2(1000, 0.001, 0);\n+    for (int i = 0; i < DATASIZE; i++) {\n+        rb2.insert(data[i]);\n+    }\n+    // ... room for all of them:\n+    for (int i = 0; i < DATASIZE; i++) {\n+        BOOST_CHECK(rb2.contains(data[i]));\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "eea15ff4f437a0b07efb047f796adcf441a0a11a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWExNWZmNGY0MzdhMGIwN2VmYjA0N2Y3OTZhZGNmNDQxYTBhMTFh",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-04-25T20:25:44Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-04-26T18:50:14Z"
      },
      "message": "Replace mruset setAddrKnown with CRollingBloomFilter addrKnown\n\nUse a probabilistic bloom filter to keep track of which addresses\nwe think we have given our peers, instead of a list.\n\nThis uses much less memory, at the cost of sometimes failing to\nrelay an address to a peer-- worst case if the bloom filter happens\nto be as full as it gets, 1-in-1,000.\n\nMeasured memory usage of a full mruset setAddrKnown: 650Kbytes\nConstant memory usage of CRollingBloomFilter addrKnown: 37Kbytes.\n\nThis will also help heap fragmentation, because the 37K of storage\nis allocated when a CNode is created (when a connection to a peer\nis established) and then there is no per-item-remembered memory\nallocation.\n\nI plan on testing by restarting a full node with an empty peers.dat,\nrunning a while with -debug=addrman and -debug=net, and making sure\nthat the 'addr' message traffic out is reasonable.\n(suggestions for better tests welcome)",
      "tree": {
        "sha": "876b2816fceb2bfee4baf0daf0d324c5eb07ad63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/876b2816fceb2bfee4baf0daf0d324c5eb07ad63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eea15ff4f437a0b07efb047f796adcf441a0a11a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlU9M2YACgkQdYgkL74406hupQCfUHH7vKF2oVsNB8GMenAoifMs\nxO8AoIqPfw10PJCoGiGzpYv/T4eRae7b\n=g54y\n-----END PGP SIGNATURE-----",
        "payload": "tree 876b2816fceb2bfee4baf0daf0d324c5eb07ad63\nparent 97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6\nauthor Gavin Andresen <gavinandresen@gmail.com> 1429993544 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1430074214 -0400\n\nReplace mruset setAddrKnown with CRollingBloomFilter addrKnown\n\nUse a probabilistic bloom filter to keep track of which addresses\nwe think we have given our peers, instead of a list.\n\nThis uses much less memory, at the cost of sometimes failing to\nrelay an address to a peer-- worst case if the bloom filter happens\nto be as full as it gets, 1-in-1,000.\n\nMeasured memory usage of a full mruset setAddrKnown: 650Kbytes\nConstant memory usage of CRollingBloomFilter addrKnown: 37Kbytes.\n\nThis will also help heap fragmentation, because the 37K of storage\nis allocated when a CNode is created (when a connection to a peer\nis established) and then there is no per-item-remembered memory\nallocation.\n\nI plan on testing by restarting a full node with an empty peers.dat,\nrunning a while with -debug=addrman and -debug=net, and making sure\nthat the 'addr' message traffic out is reasonable.\n(suggestions for better tests welcome)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eea15ff4f437a0b07efb047f796adcf441a0a11a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eea15ff4f437a0b07efb047f796adcf441a0a11a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eea15ff4f437a0b07efb047f796adcf441a0a11a/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97bd572aefcd4a3cc14a8b2a3bcff997dcc1c6d6"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b3395f4621016ac13c5365704ff37349e10b117d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eea15ff4f437a0b07efb047f796adcf441a0a11a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eea15ff4f437a0b07efb047f796adcf441a0a11a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eea15ff4f437a0b07efb047f796adcf441a0a11a",
        "patch": "@@ -3994,7 +3994,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 {\n                     LOCK(cs_vNodes);\n                     // Use deterministic randomness to send to the same nodes for 24 hours\n-                    // at a time so the setAddrKnowns of the chosen nodes prevent repeats\n+                    // at a time so the addrKnowns of the chosen nodes prevent repeats\n                     static uint256 hashSalt;\n                     if (hashSalt.IsNull())\n                         hashSalt = GetRandHash();\n@@ -4778,9 +4778,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n             {\n-                // Periodically clear setAddrKnown to allow refresh broadcasts\n+                // Periodically clear addrKnown to allow refresh broadcasts\n                 if (nLastRebroadcast)\n-                    pnode->setAddrKnown.clear();\n+                    pnode->addrKnown.clear();\n \n                 // Rebroadcast our address\n                 AdvertizeLocal(pnode);\n@@ -4799,8 +4799,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n             {\n                 // returns true if wasn't already contained in the set\n-                if (pto->setAddrKnown.insert(addr).second)\n+                if (!pto->addrKnown.contains(addr.GetKey()))\n                 {\n+                    pto->addrKnown.insert(addr.GetKey());\n                     vAddr.push_back(addr);\n                     // receiver rejects addr messages larger than 1000\n                     if (vAddr.size() >= 1000)"
      },
      {
        "sha": "df25de4a529e189f7fcb963f6a3e0088e04c1b91",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eea15ff4f437a0b07efb047f796adcf441a0a11a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eea15ff4f437a0b07efb047f796adcf441a0a11a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=eea15ff4f437a0b07efb047f796adcf441a0a11a",
        "patch": "@@ -1878,7 +1878,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", 5*1000); }\n unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n \n-CNode::CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn, bool fInboundIn) : ssSend(SER_NETWORK, INIT_PROTO_VERSION), setAddrKnown(5000)\n+CNode::CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn, bool fInboundIn) : ssSend(SER_NETWORK, INIT_PROTO_VERSION), addrKnown(5000, 0.001, insecure_rand())\n {\n     nServices = 0;\n     hSocket = hSocketIn;"
      },
      {
        "sha": "24e927c9f6d542f1e846cef5d276d5fde2a545e6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eea15ff4f437a0b07efb047f796adcf441a0a11a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eea15ff4f437a0b07efb047f796adcf441a0a11a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=eea15ff4f437a0b07efb047f796adcf441a0a11a",
        "patch": "@@ -300,7 +300,7 @@ class CNode\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n-    mruset<CAddress> setAddrKnown;\n+    CRollingBloomFilter addrKnown;\n     bool fGetAddr;\n     std::set<uint256> setKnown;\n \n@@ -380,15 +380,15 @@ class CNode\n \n     void AddAddressKnown(const CAddress& addr)\n     {\n-        setAddrKnown.insert(addr);\n+        addrKnown.insert(addr.GetKey());\n     }\n \n     void PushAddress(const CAddress& addr)\n     {\n         // Known checking here is only to save space from duplicates.\n         // SendMessages will filter it again for knowns that were added\n         // after addresses were pushed.\n-        if (addr.IsValid() && !setAddrKnown.count(addr)) {\n+        if (addr.IsValid() && !addrKnown.contains(addr.GetKey())) {\n             if (vAddrToSend.size() >= MAX_ADDR_TO_SEND) {\n                 vAddrToSend[insecure_rand() % vAddrToSend.size()] = addr;\n             } else {"
      }
    ]
  }
]