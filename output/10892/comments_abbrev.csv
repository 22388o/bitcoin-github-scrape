benma,2017-07-24T20:21:13Z,utACK 72f00608d0a130a1488dc49df1073abe01d49519,https://github.com/bitcoin/bitcoin/pull/10892#issuecomment-317542613,317542613,
sipa,2017-07-24T20:31:27Z,"In C++ syntax, elements like `[]`, `*`, and `&` belong with the variable,\nnot the type. An example is `int *a, b`, which declares `b` as an `int`,\nnot as a pointer to `int`.\n\nHowever, in terms of style recommendation, this is controversial, and the\ncodebase contains plenty of examples of left and right 'hugging'. I\nwouldn't worry about using one over the other.\n",https://github.com/bitcoin/bitcoin/pull/10892#issuecomment-317545311,317545311,
benma,2017-07-24T20:46:45Z,"I guess you're right that it doesn't matter, I just thought it made sense to stick with the prelevant style in the code. Personally I put it with the type because of things like `std::vector<Foo*>` and func signatures.",https://github.com/bitcoin/bitcoin/pull/10892#issuecomment-317549307,317549307,
ryanofsky,2017-07-24T21:14:10Z,Currently we have [PointerAlignment: Left](https://clang.llvm.org/docs/ClangFormatStyleOptions.html) in our clang-format file. This puts pointers and reference symbols next to the type instead of the variable. Should probably remove the setting or change it if this style isn't actually preferred.,https://github.com/bitcoin/bitcoin/pull/10892#issuecomment-317557041,317557041,
sipa,2017-07-24T21:45:06Z,utACK ,https://github.com/bitcoin/bitcoin/pull/10892#issuecomment-317564233,317564233,
benma,2017-07-24T05:50:49Z,Nit: `const auto& tx` seems to be the normal way to format it.,https://github.com/bitcoin/bitcoin/pull/10892#discussion_r128953576,128953576,src/primitives/block.cpp
bytting,2017-07-24T07:13:04Z,"Yeah, I was unsure about that. It seems counter intuitive to me since it is the variable that is a reference, not the type.\n\nConsider this case:\n```c++\nint *a, *b, &c = value;\n```\n\nI have seen both being used in this code base, so I think I'll leave it unless there is more protest.\n\nThanks though",https://github.com/bitcoin/bitcoin/pull/10892#discussion_r128962777,128962777,src/primitives/block.cpp
benma,2017-07-24T09:03:53Z,"I did check, `auto&` is much more common in the codebase (60 times vs. sth. like 5 times).\n\n> It seems counter intuitive to me since it is the variable that is a reference, not the type.\n\nIt's actually the type. It's apparent if you look at function signatures.\n\n`void foo(const std::string&);` is a valid function signature (first argument is a reference type).",https://github.com/bitcoin/bitcoin/pull/10892#discussion_r128984298,128984298,src/primitives/block.cpp
bytting,2017-07-24T10:17:57Z,"Hm, when I look at your last patch #10916 you actually do the same.\n\n> first argument is a reference type\n\nI would call that an unnamed reference to type std::string :trollface:\n\nI guess it's not that bad for arguments and return types though, I'll look into it.\n",https://github.com/bitcoin/bitcoin/pull/10892#discussion_r128999694,128999694,src/primitives/block.cpp
benma,2017-07-24T10:21:14Z,"> Hm, when I look at your last patch #10916 you actually do the same.\n\nYou mean using `const auto& var`, not `const auto &var`? Makes sense that I use what I advocate :)",https://github.com/bitcoin/bitcoin/pull/10892#discussion_r129000297,129000297,src/primitives/block.cpp
bytting,2017-07-24T10:23:45Z,> for (const CKeyID &keyid : GetKeys()) {,https://github.com/bitcoin/bitcoin/pull/10892#discussion_r129000720,129000720,src/primitives/block.cpp
benma,2017-07-24T10:26:09Z,"Good catch! In my defense, that line was there like that before and is one of the 5 or so instances like that I refered to earlier. I'll fix it in a few hours when I am back home.",https://github.com/bitcoin/bitcoin/pull/10892#discussion_r129001237,129001237,src/primitives/block.cpp
bytting,2017-07-24T10:29:53Z,"Okay, your argument that a reference is a distinct type is consistent with the C++ standard, so I give up. GJ",https://github.com/bitcoin/bitcoin/pull/10892#discussion_r129001841,129001841,src/primitives/block.cpp
