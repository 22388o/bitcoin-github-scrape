[
  {
    "sha": "1294cdc43fd7de6cddd1405148f813d95994302f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjk0Y2RjNDNmZDdkZTZjZGRkMTQwNTE0OGY4MTNkOTU5OTQzMDJm",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2014-03-14T06:22:18Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2014-03-14T06:22:18Z"
      },
      "message": "Add a \"relayfee\" field to getinfo.\n\nThis shows the minimum relay fee for non-free transactions in btc/kb.\n\nThe armory developers requested this so that they can prevent users from\n creating transactions that not even their local bitcoind will relay.\n\nThis also slightly reorders the getinfo output so that the fee related\n lines are grouped and changes the help text to reflect that the units\n are btc/kb.",
      "tree": {
        "sha": "4b60fa11025dd778095bdcbe657e3912fcfee7c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b60fa11025dd778095bdcbe657e3912fcfee7c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1294cdc43fd7de6cddd1405148f813d95994302f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1294cdc43fd7de6cddd1405148f813d95994302f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1294cdc43fd7de6cddd1405148f813d95994302f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1294cdc43fd7de6cddd1405148f813d95994302f/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e13f57f561dcba493e569bf8fb6507383c62796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e13f57f561dcba493e569bf8fb6507383c62796",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e13f57f561dcba493e569bf8fb6507383c62796"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "aa175904310b73665022d9112d7050bdc0040b65",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1294cdc43fd7de6cddd1405148f813d95994302f/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1294cdc43fd7de6cddd1405148f813d95994302f/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=1294cdc43fd7de6cddd1405148f813d95994302f",
        "patch": "@@ -46,8 +46,9 @@ Value getinfo(const Array& params, bool fHelp)\n             \"  \\\"testnet\\\": true|false,      (boolean) if the server is using testnet or not\\n\"\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in btc\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in btc/kb\\n\"\n+            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"           (string) any error messages\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n@@ -78,10 +79,11 @@ Value getinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n         obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n     }\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n     if (pwalletMain && pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n+    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n #endif\n+    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(CTransaction::nMinRelayTxFee)));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     return obj;\n }"
      }
    ]
  }
]