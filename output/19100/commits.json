[
  {
    "sha": "f42f5e58f5fd063d5feec3eadf4a4040a941d4af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDJmNWU1OGY1ZmQwNjNkNWZlZWMzZWFkZjRhNDA0MGE5NDFkNGFm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-28T15:31:02Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-06-05T12:29:18Z"
      },
      "message": "refactor: Combine GetWalletForJSONRPCRequest and EnsureWalletIsAvailable functions\n\nThis simplifies control flow and also helps get rid of the ::vpwallets\nvariable, because EnsureWalletIsAvailable doesn't have access to the request\ncontext.",
      "tree": {
        "sha": "7f88cc4004d292e5cb77464bb79fa84e096e78f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f88cc4004d292e5cb77464bb79fa84e096e78f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f42f5e58f5fd063d5feec3eadf4a4040a941d4af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f42f5e58f5fd063d5feec3eadf4a4040a941d4af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f42f5e58f5fd063d5feec3eadf4a4040a941d4af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f42f5e58f5fd063d5feec3eadf4a4040a941d4af/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fc6ea216c00fff470bd876c53418afca63bf7e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fc6ea216c00fff470bd876c53418afca63bf7e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fc6ea216c00fff470bd876c53418afca63bf7e9"
      }
    ],
    "stats": {
      "total": 270,
      "additions": 58,
      "deletions": 212
    },
    "files": [
      {
        "sha": "334139fd581f7f0bb6819f07b054f829cf066f10",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 33,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42f5e58f5fd063d5feec3eadf4a4040a941d4af/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42f5e58f5fd063d5feec3eadf4a4040a941d4af/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f42f5e58f5fd063d5feec3eadf4a4040a941d4af",
        "patch": "@@ -93,10 +93,8 @@ static void RescanWallet(CWallet& wallet, const WalletRescanReserver& reserver,\n UniValue importprivkey(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n \n             RPCHelpMan{\"importprivkey\",\n                 \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n@@ -196,10 +194,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n UniValue abortrescan(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n \n             RPCHelpMan{\"abortrescan\",\n                 \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\"\n@@ -224,10 +220,8 @@ UniValue abortrescan(const JSONRPCRequest& request)\n UniValue importaddress(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n \n             RPCHelpMan{\"importaddress\",\n                 \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n@@ -326,10 +320,8 @@ UniValue importaddress(const JSONRPCRequest& request)\n UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n \n             RPCHelpMan{\"importprunedfunds\",\n                 \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\",\n@@ -384,10 +376,8 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n \n             RPCHelpMan{\"removeprunedfunds\",\n                 \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\",\n@@ -423,10 +413,8 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n UniValue importpubkey(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n \n             RPCHelpMan{\"importpubkey\",\n                 \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n@@ -510,10 +498,8 @@ UniValue importpubkey(const JSONRPCRequest& request)\n UniValue importwallet(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n \n             RPCHelpMan{\"importwallet\",\n                 \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\"\n@@ -668,10 +654,8 @@ UniValue importwallet(const JSONRPCRequest& request)\n UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n \n             RPCHelpMan{\"dumpprivkey\",\n                 \"\\nReveals the private key corresponding to 'address'.\\n\"\n@@ -715,9 +699,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n UniValue dumpwallet(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n-        return NullUniValue;\n-    }\n+    if (!pwallet) return NullUniValue;\n \n             RPCHelpMan{\"dumpwallet\",\n                 \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n@@ -1260,10 +1242,8 @@ static int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(mainRequest);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n-    if (!EnsureWalletIsAvailable(pwallet, mainRequest.fHelp)) {\n-        return NullUniValue;\n-    }\n \n             RPCHelpMan{\"importmulti\",\n                 \"\\nImport addresses/scripts (with private or public keys, redeem script (P2SH)), optionally rescanning the blockchain from the earliest creation time of the imported scripts. Requires a new wallet backup.\\n\"\n@@ -1588,10 +1568,8 @@ static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue&\n UniValue importdescriptors(const JSONRPCRequest& main_request) {\n     // Acquire the wallet\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n-    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n-        return NullUniValue;\n-    }\n \n             RPCHelpMan{\"importdescriptors\",\n                 \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\""
      },
      {
        "sha": "2e5257eecd32c140fe44282f98f50f19507a7a0f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 178,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42f5e58f5fd063d5feec3eadf4a4040a941d4af/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42f5e58f5fd063d5feec3eadf4a4040a941d4af/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f42f5e58f5fd063d5feec3eadf4a4040a941d4af",
        "patch": "@@ -101,13 +101,12 @@ std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& reques\n     }\n \n     std::vector<std::shared_ptr<CWallet>> wallets = GetWallets();\n-    return wallets.size() == 1 || (request.fHelp && wallets.size() > 0) ? wallets[0] : nullptr;\n-}\n+    if (wallets.size() == 1 || (request.fHelp && wallets.size() > 0)) {\n+        return wallets[0];\n+    }\n+\n+    if (request.fHelp) return nullptr;\n \n-bool EnsureWalletIsAvailable(const CWallet* pwallet, bool avoidException)\n-{\n-    if (pwallet) return true;\n-    if (avoidException) return false;\n     if (!HasWallets()) {\n         throw JSONRPCError(\n             RPC_METHOD_NOT_FOUND, \"Method not found (wallet method is disabled because no wallet is loaded)\");\n@@ -196,12 +195,9 @@ static std::string LabelFromValue(const UniValue& value)\n static UniValue getnewaddress(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"getnewaddress\",\n                 \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n                 \"If 'label' is specified, it is added to the address book \\n\"\n@@ -249,12 +245,9 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"getrawchangeaddress\",\n                 \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n                 \"This is for use with raw transactions, NOT normal use.\\n\",\n@@ -295,12 +288,9 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n static UniValue setlabel(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"setlabel\",\n                 \"\\nSets the label associated with the given address.\\n\",\n                 {\n@@ -367,12 +357,9 @@ static CTransactionRef SendMoney(CWallet* const pwallet, const CTxDestination& a\n static UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"sendtoaddress\",\n                 \"\\nSend an amount to a given address.\" +\n         HELP_REQUIRING_PASSPHRASE,\n@@ -462,12 +449,9 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n static UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"listaddressgroupings\",\n                 \"\\nLists groups of addresses which have had their common ownership\\n\"\n                 \"made public by common use as inputs or as the resulting change\\n\"\n@@ -524,12 +508,9 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n static UniValue signmessage(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"signmessage\",\n                 \"\\nSign a message with the private key of an address\" +\n         HELP_REQUIRING_PASSPHRASE,\n@@ -629,12 +610,9 @@ static CAmount GetReceived(const CWallet& wallet, const UniValue& params, bool b\n static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"getreceivedbyaddress\",\n                 \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n                 {\n@@ -669,12 +647,9 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"getreceivedbylabel\",\n                 \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n                 {\n@@ -709,12 +684,9 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n static UniValue getbalance(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"getbalance\",\n                 \"\\nReturns the total available balance.\\n\"\n                 \"The available balance is what the wallet considers currently spendable, and is\\n\"\n@@ -766,12 +738,9 @@ static UniValue getbalance(const JSONRPCRequest& request)\n static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"getunconfirmedbalance\",\n                 \"DEPRECATED\\nIdentical to getbalances().mine.untrusted_pending\\n\",\n                 {},\n@@ -792,12 +761,9 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n static UniValue sendmany(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n     RPCHelpMan{\"sendmany\",\n                 \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n         HELP_REQUIRING_PASSPHRASE,\n@@ -926,12 +892,9 @@ static UniValue sendmany(const JSONRPCRequest& request)\n static UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"addmultisigaddress\",\n                 \"\\nAdd an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n                 \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n@@ -1168,12 +1131,9 @@ static UniValue ListReceived(const CWallet* const pwallet, const UniValue& param\n static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"listreceivedbyaddress\",\n                 \"\\nList balances by receiving address.\\n\",\n                 {\n@@ -1219,12 +1179,9 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"listreceivedbylabel\",\n                 \"\\nList received transactions by label.\\n\",\n                 {\n@@ -1380,12 +1337,9 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n UniValue listtransactions(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"listtransactions\",\n                 \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n                 \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n@@ -1493,10 +1447,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n static UniValue listsinceblock(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n-        return NullUniValue;\n-    }\n+    if (!pwallet) return NullUniValue;\n \n             RPCHelpMan{\"listsinceblock\",\n                 \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n@@ -1634,12 +1585,9 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n static UniValue gettransaction(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"gettransaction\",\n                 \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n                 {\n@@ -1747,12 +1695,9 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n static UniValue abandontransaction(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"abandontransaction\",\n                 \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n                 \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n@@ -1791,12 +1736,9 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n static UniValue backupwallet(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"backupwallet\",\n                 \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\",\n                 {\n@@ -1827,12 +1769,9 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n static UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"keypoolrefill\",\n                 \"\\nFills the keypool.\"+\n         HELP_REQUIRING_PASSPHRASE,\n@@ -1874,12 +1813,9 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n static UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"walletpassphrase\",\n                 \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n                 \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\"\n@@ -1971,12 +1907,9 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"walletpassphrasechange\",\n                 \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\",\n                 {\n@@ -2021,12 +1954,9 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n static UniValue walletlock(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"walletlock\",\n                 \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n                 \"After calling this method, you will need to call walletpassphrase again\\n\"\n@@ -2061,12 +1991,9 @@ static UniValue walletlock(const JSONRPCRequest& request)\n static UniValue encryptwallet(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"encryptwallet\",\n                 \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n                 \"After this, any calls that interact with private keys such as sending or signing \\n\"\n@@ -2121,12 +2048,9 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n static UniValue lockunspent(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"lockunspent\",\n                 \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n                 \"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\\n\"\n@@ -2247,12 +2171,9 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n static UniValue listlockunspent(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"listlockunspent\",\n                 \"\\nReturns list of temporarily unspendable outputs.\\n\"\n                 \"See the lockunspent call to lock and unlock transactions for spending.\\n\",\n@@ -2302,12 +2223,9 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n static UniValue settxfee(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"settxfee\",\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n                 \"Can be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\\n\",\n@@ -2345,9 +2263,7 @@ static UniValue settxfee(const JSONRPCRequest& request)\n static UniValue getbalances(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const rpc_wallet = GetWalletForJSONRPCRequest(request);\n-    if (!EnsureWalletIsAvailable(rpc_wallet.get(), request.fHelp)) {\n-        return NullUniValue;\n-    }\n+    if (!rpc_wallet) return NullUniValue;\n     CWallet& wallet = *rpc_wallet;\n \n     RPCHelpMan{\n@@ -2412,12 +2328,9 @@ static UniValue getbalances(const JSONRPCRequest& request)\n static UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n     RPCHelpMan{\"getwalletinfo\",\n                 \"Returns an object containing various wallet state info.\\n\",\n                 {},\n@@ -2560,12 +2473,7 @@ static UniValue listwallets(const JSONRPCRequest& request)\n     UniValue obj(UniValue::VARR);\n \n     for (const std::shared_ptr<CWallet>& wallet : GetWallets()) {\n-        if (!EnsureWalletIsAvailable(wallet.get(), request.fHelp)) {\n-            return NullUniValue;\n-        }\n-\n         LOCK(wallet->cs_wallet);\n-\n         obj.push_back(wallet->GetName());\n     }\n \n@@ -2622,12 +2530,9 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n static UniValue setwalletflag(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             std::string flags = \"\";\n             for (auto& it : WALLET_FLAG_MAP)\n                 if (it.second & MUTABLE_WALLET_FLAGS)\n@@ -2805,12 +2710,9 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n static UniValue listunspent(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n     RPCHelpMan{\n                 \"listunspent\",\n                 \"\\nReturns array of unspent transaction outputs\\n\"\n@@ -3138,12 +3040,9 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n static UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n     RPCHelpMan{\"fundrawtransaction\",\n                 \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                 \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n@@ -3238,12 +3137,9 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"signrawtransactionwithwallet\",\n                 \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n                 \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n@@ -3332,12 +3228,9 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n static UniValue bumpfee(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n-        return NullUniValue;\n-\n             RPCHelpMan{\"bumpfee\",\n                 \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n                 \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n@@ -3504,12 +3397,9 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n UniValue rescanblockchain(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"rescanblockchain\",\n                 \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n@@ -3703,12 +3593,9 @@ static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool v\n UniValue getaddressinfo(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"getaddressinfo\",\n                 \"\\nReturn information about the given bitcoin address.\\n\"\n                 \"Some of the information will only be present if the address is in the active wallet.\\n\",\n@@ -3846,12 +3733,9 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"getaddressesbylabel\",\n                 \"\\nReturns the list of addresses assigned the specified label.\\n\",\n                 {\n@@ -3906,12 +3790,9 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n static UniValue listlabels(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"listlabels\",\n                 \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n                 {\n@@ -3962,12 +3843,9 @@ static UniValue listlabels(const JSONRPCRequest& request)\n UniValue sethdseed(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"sethdseed\",\n                 \"\\nSet or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\\n\"\n                 \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\\n\"\n@@ -4035,12 +3913,9 @@ UniValue sethdseed(const JSONRPCRequest& request)\n UniValue walletprocesspsbt(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"walletprocesspsbt\",\n                 \"\\nUpdate a PSBT with input information from our wallet and then sign inputs\\n\"\n                 \"that we can sign for.\" +\n@@ -4102,12 +3977,9 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n             RPCHelpMan{\"walletcreatefundedpsbt\",\n                 \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n@@ -4227,12 +4099,9 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n static UniValue upgradewallet(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n     RPCHelpMan{\"upgradewallet\",\n         \"\\nUpgrade the wallet. Upgrades to the latest version if no version number is specified\\n\"\n         \"New keys may be generated and a new wallet backup will need to be made.\","
      },
      {
        "sha": "fb1e91282b44f7c6cb5ff3932ed9e41913303c8d",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f42f5e58f5fd063d5feec3eadf4a4040a941d4af/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f42f5e58f5fd063d5feec3eadf4a4040a941d4af/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=f42f5e58f5fd063d5feec3eadf4a4040a941d4af",
        "patch": "@@ -31,7 +31,6 @@ Span<const CRPCCommand> GetWalletRPCCommands();\n std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request);\n \n void EnsureWalletIsUnlocked(const CWallet*);\n-bool EnsureWalletIsAvailable(const CWallet*, bool avoidException);\n WalletContext& EnsureWalletContext(const util::Ref& context);\n LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create = false);\n "
      }
    ]
  }
]