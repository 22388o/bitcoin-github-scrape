JeremyRubin,2021-10-20 17:05:32,"Why not do a 'newtype' wrapper and then multiple dispatch?\n\n```c++\nstruct Wtxid {\n    uint256 h;\n   explicit Wtxid(uint256 i): h(i);\n}\n\nstruct Txid {\n    uint256 h;\n   explicit Txid(uint256 i): h(i);\n}\n\nclass CTxMempool{\n    bool exists(Txid t);\n    bool exists(Wtxid t);\n}\n```\n\n(for a more thorough treatment of newtypes, see https://www.boost.org/doc/libs/1_46",https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-947861781,947861781,
DrahtBot,2021-10-21 05:28:38,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23121](https://github.com/bitcoin/bitcoin/pull/23121) ([policy] check ancestor feerate in RBF, remove BIP125 Rule2 by gl",https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-948270537,948270537,
glozow,2021-10-21 08:29:47,"Right, ideally we have different types for txid and wtxid. I also think we should make `GenTxid` a `std::variant<Txid, Wtxid>` instead of overloading everything.\n\n@MarcoFalke @JeremyRubin would you prefer I change this PR to add new types, or open a new one? Either way we'd delete this function.",https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-948380968,948380968,
MarcoFalke,2021-10-21 08:34:37,I am not sure if it is possible to make `Wtxid` and `Txid` different types. Wouldn't that require a major rewrite of txrequest?,https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-948384491,948384491,
glozow,2021-10-21 08:40:30,"True, we'd need to change the `Announcement` struct to store a `GenTxid` instead of uint256 and bool, which would probably increase the size...",https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-948388913,948388913,
naumenkogs,2021-10-21 11:57:29,"Concept ACK. I think the confusion is worth addressing.\nNo idea what's the best way to achieve it though, but I'd avoid a lot of code changes for this matter.",https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-948539483,948539483,
jnewbery,2021-10-21 13:38:55,"Concept ACK. Mixing up txids and wtxids has been a source of several bugs. Anything that we can do to stop just passing `uint256`s around and instead being explicit about what is expected in function interfaces is an improvement in my opinion.\n\nI agree that ideally we'd have separate types for `Txid` and `Wtxid` (and `BlockHash`) so the compiler can catch bugs for us, but that seems like a muc",https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-948627408,948627408,
glozow,2021-10-21 15:36:14,Thanks for the reviews! I've added the explicit ctors.,https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-948734754,948734754,
JeremyRubin,2021-10-21 15:43:01,"i think the newtype stuff is obviously better, but that can be handled as a separate PR if desired.\n\nGiven the named CTor approach, it's also possible to change those into static functions returning the newtype wrappers with minimal diff.",https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-948739405,948739405,
laanwj,2021-10-21 16:52:01,Code review ACK 4307849256761fe2440d82bbec892d0e8e6b4dd4,https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-948798533,948798533,
jnewbery,2021-10-21 16:56:46,"Tested and code review ACK 4307849256761fe2440d82bbec892d0e8e6b4dd4\n\nThe static ctors seem like a strictly superior way to construct the `GenTxid` objects. What do you think about a follow-up that removes the default ctor?",https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-948804814,948804814,
MarcoFalke,2021-10-22 09:53:29,"review ACK 4307849256761fe2440d82bbec892d0e8e6b4dd4 ðŸ‘˜\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK 4307849256761fe2440d82bbec892d0e8e6b4dd4 ðŸ‘˜\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgDtAwApnU2595pO10vRTuqKZCscCE0DH2Qi/P7/v3e",https://github.com/bitcoin/bitcoin/pull/23325#issuecomment-949468699,949468699,
MarcoFalke,2021-10-20 16:32:46,"`GenTxid(false,...)` is quite verbose, but still ambiguous. A named argument would be even more verbose. What about a `GenTxid` constructor that is named `Txid`/`Wtxid` or so?",https://github.com/bitcoin/bitcoin/pull/23325#discussion_r732955510,732955510,src/net_processing.cpp
glozow,2021-10-20 16:50:36,"ooh i like.\n\nI'd do static ctors with `s/GenTxid(false, hash)/GenTxid::Txid(hash)` and `s/GenTxid(true, hash)/GenTxid::Wtxid(hash)`",https://github.com/bitcoin/bitcoin/pull/23325#discussion_r732969318,732969318,src/net_processing.cpp
jnewbery,2021-10-21 13:30:36,"You could also consider adding two public methods to `CTransaction`:\n\n```diff\n     const uint256& GetHash() const { return hash; }\n+    GenTxid GetTxid() const {return GenTxid{false, hash};};\n     const uint256& GetWitnessHash() const { return m_witness_hash; };\n+    GenTxid GetWtxid() const {return GenTxid{true, m_witness_hash};};\n```\n\nThe call sites would then look something li",https://github.com/bitcoin/bitcoin/pull/23325#discussion_r733679050,733679050,src/net_processing.cpp
glozow,2021-10-21 15:31:48,"I ended up doing `GenTxid::Txid` and `GenTxid::Wtxid`. Some of the call sites are using `prevout.hash` or just `hash` rather than grabbing from a transaction, so I think this is simpler.",https://github.com/bitcoin/bitcoin/pull/23325#discussion_r733801987,733801987,src/net_processing.cpp
laanwj,2021-10-21 16:51:22,Would be nice to make this constructor private / protected at some point (not here though),https://github.com/bitcoin/bitcoin/pull/23325#discussion_r733867576,733867576,src/primitives/transaction.h
