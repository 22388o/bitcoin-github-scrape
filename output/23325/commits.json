[
  {
    "sha": "d50fbd4c5b4bc72415854d582cedf94541a46983",
    "node_id": "C_kwDOABII59oAKGQ1MGZiZDRjNWI0YmM3MjQxNTg1NGQ1ODJjZWRmOTQ1NDFhNDY5ODM",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-21T15:15:01Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-21T15:26:59Z"
      },
      "message": "create explicit GenTxid::{Txid, Wtxid} ctors",
      "tree": {
        "sha": "eea6b3b73084f2515ba8c575de4f6548dfa91d25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eea6b3b73084f2515ba8c575de4f6548dfa91d25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d50fbd4c5b4bc72415854d582cedf94541a46983",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d50fbd4c5b4bc72415854d582cedf94541a46983",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d50fbd4c5b4bc72415854d582cedf94541a46983",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d50fbd4c5b4bc72415854d582cedf94541a46983/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9ad4d51e3dbb84036762f5a9e0c6d712e49d1be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9ad4d51e3dbb84036762f5a9e0c6d712e49d1be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9ad4d51e3dbb84036762f5a9e0c6d712e49d1be"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d7a85015ef2f9facd2e6b73dda38a6e04fb086a1",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d50fbd4c5b4bc72415854d582cedf94541a46983/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d50fbd4c5b4bc72415854d582cedf94541a46983/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=d50fbd4c5b4bc72415854d582cedf94541a46983",
        "patch": "@@ -393,6 +393,8 @@ class GenTxid\n     uint256 m_hash;\n public:\n     GenTxid(bool is_wtxid, const uint256& hash) : m_is_wtxid(is_wtxid), m_hash(hash) {}\n+    static GenTxid Txid(const uint256& hash) { return GenTxid{false, hash}; }\n+    static GenTxid Wtxid(const uint256& hash) { return GenTxid{true, hash}; }\n     bool IsWtxid() const { return m_is_wtxid; }\n     const uint256& GetHash() const { return m_hash; }\n     friend bool operator==(const GenTxid& a, const GenTxid& b) { return a.m_is_wtxid == b.m_is_wtxid && a.m_hash == b.m_hash; }"
      }
    ]
  },
  {
    "sha": "4307849256761fe2440d82bbec892d0e8e6b4dd4",
    "node_id": "C_kwDOABII59oAKDQzMDc4NDkyNTY3NjFmZTI0NDBkODJiYmVjODkyZDBlOGU2YjRkZDQ",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T15:41:45Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-21T15:26:59Z"
      },
      "message": "[mempool] delete exists(uint256) function\n\nAllowing callers to pass in a uint256 (which could be txid or wtxid)\nbut then always assuming that it's a txid is a footgunny interface.",
      "tree": {
        "sha": "7d32e7727d87b15b4b45a98a446b357a5072570d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d32e7727d87b15b4b45a98a446b357a5072570d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4307849256761fe2440d82bbec892d0e8e6b4dd4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4307849256761fe2440d82bbec892d0e8e6b4dd4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4307849256761fe2440d82bbec892d0e8e6b4dd4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4307849256761fe2440d82bbec892d0e8e6b4dd4/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d50fbd4c5b4bc72415854d582cedf94541a46983",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d50fbd4c5b4bc72415854d582cedf94541a46983",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d50fbd4c5b4bc72415854d582cedf94541a46983"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 29,
      "deletions": 30
    },
    "files": [
      {
        "sha": "bb731c14a45bfab82f137dc62bba1cd23a0fe39d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4307849256761fe2440d82bbec892d0e8e6b4dd4",
        "patch": "@@ -3247,7 +3247,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 // Always relay transactions received from peers with forcerelay\n                 // permission, even if they were already in the mempool, allowing\n                 // the node to function as a gateway for nodes hidden behind it.\n-                if (!m_mempool.exists(tx.GetHash())) {\n+                if (!m_mempool.exists(GenTxid::Txid(tx.GetHash()))) {\n                     LogPrintf(\"Not relaying non-mempool transaction %s from forcerelay peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n                 } else {\n                     LogPrintf(\"Force relaying tx %s from peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());"
      },
      {
        "sha": "192caf799414291223332629a97616905827e800",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=4307849256761fe2440d82bbec892d0e8e6b4dd4",
        "patch": "@@ -555,7 +555,7 @@ class ChainImpl : public Chain\n     {\n         if (!m_node.mempool) return false;\n         LOCK(m_node.mempool->cs);\n-        return m_node.mempool->exists(txid);\n+        return m_node.mempool->exists(GenTxid::Txid(txid));\n     }\n     bool hasDescendantsInMempool(const uint256& txid) override\n     {"
      },
      {
        "sha": "7e6b0cf245f3bd465038456c0b6c00ff5549395c",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=4307849256761fe2440d82bbec892d0e8e6b4dd4",
        "patch": "@@ -22,7 +22,7 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n \n     // If this transaction is not in our mempool, then we can't be sure\n     // we will know about all its inputs.\n-    if (!pool.exists(tx.GetHash())) {\n+    if (!pool.exists(GenTxid::Txid(tx.GetHash()))) {\n         return RBFTransactionState::UNKNOWN;\n     }\n \n@@ -98,7 +98,7 @@ std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n         if (!parents_of_conflicts.count(tx.vin[j].prevout.hash)) {\n             // Rather than check the UTXO set - potentially expensive - it's cheaper to just check\n             // if the new input refers to a tx that's in the mempool.\n-            if (pool.exists(tx.vin[j].prevout.hash)) {\n+            if (pool.exists(GenTxid::Txid(tx.vin[j].prevout.hash))) {\n                 return strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n                                  tx.GetHash().ToString(), j);\n             }"
      },
      {
        "sha": "aa7a55e7a963371b6bbf90c8aeae5d26e6d27467",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=4307849256761fe2440d82bbec892d0e8e6b4dd4",
        "patch": "@@ -516,7 +516,7 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n     std::set<std::string> setDepends;\n     for (const CTxIn& txin : tx.vin)\n     {\n-        if (pool.exists(txin.prevout.hash))\n+        if (pool.exists(GenTxid::Txid(txin.prevout.hash)))\n             setDepends.insert(txin.prevout.hash.ToString());\n     }\n "
      },
      {
        "sha": "b3497b8ef8b4b2569f19a62879830e51bb5f8df1",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=4307849256761fe2440d82bbec892d0e8e6b4dd4",
        "patch": "@@ -444,12 +444,12 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(entry.Fee(5000LL).FromTx(tx2));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n-    BOOST_CHECK(pool.exists(tx1.GetHash()));\n-    BOOST_CHECK(pool.exists(tx2.GetHash()));\n+    BOOST_CHECK(pool.exists(GenTxid::Txid(tx1.GetHash())));\n+    BOOST_CHECK(pool.exists(GenTxid::Txid(tx2.GetHash())));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // should remove the lower-feerate transaction\n-    BOOST_CHECK(pool.exists(tx1.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx2.GetHash()));\n+    BOOST_CHECK(pool.exists(GenTxid::Txid(tx1.GetHash())));\n+    BOOST_CHECK(!pool.exists(GenTxid::Txid(tx2.GetHash())));\n \n     pool.addUnchecked(entry.FromTx(tx2));\n     CMutableTransaction tx3 = CMutableTransaction();\n@@ -462,14 +462,14 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(entry.Fee(20000LL).FromTx(tx3));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n-    BOOST_CHECK(!pool.exists(tx1.GetHash()));\n-    BOOST_CHECK(pool.exists(tx2.GetHash()));\n-    BOOST_CHECK(pool.exists(tx3.GetHash()));\n+    BOOST_CHECK(!pool.exists(GenTxid::Txid(tx1.GetHash())));\n+    BOOST_CHECK(pool.exists(GenTxid::Txid(tx2.GetHash())));\n+    BOOST_CHECK(pool.exists(GenTxid::Txid(tx3.GetHash())));\n \n     pool.TrimToSize(GetVirtualTransactionSize(CTransaction(tx1))); // mempool is limited to tx1's size in memory usage, so nothing fits\n-    BOOST_CHECK(!pool.exists(tx1.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx2.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx3.GetHash()));\n+    BOOST_CHECK(!pool.exists(GenTxid::Txid(tx1.GetHash())));\n+    BOOST_CHECK(!pool.exists(GenTxid::Txid(tx2.GetHash())));\n+    BOOST_CHECK(!pool.exists(GenTxid::Txid(tx3.GetHash())));\n \n     CFeeRate maxFeeRateRemoved(25000, GetVirtualTransactionSize(CTransaction(tx3)) + GetVirtualTransactionSize(CTransaction(tx2)));\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n@@ -529,19 +529,19 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n \n     // we only require this to remove, at max, 2 txn, because it's not clear what we're really optimizing for aside from that\n     pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n-    BOOST_CHECK(pool.exists(tx4.GetHash()));\n-    BOOST_CHECK(pool.exists(tx6.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx7.GetHash()));\n+    BOOST_CHECK(pool.exists(GenTxid::Txid(tx4.GetHash())));\n+    BOOST_CHECK(pool.exists(GenTxid::Txid(tx6.GetHash())));\n+    BOOST_CHECK(!pool.exists(GenTxid::Txid(tx7.GetHash())));\n \n-    if (!pool.exists(tx5.GetHash()))\n+    if (!pool.exists(GenTxid::Txid(tx5.GetHash())))\n         pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n     pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n \n     pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n-    BOOST_CHECK(pool.exists(tx4.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx5.GetHash()));\n-    BOOST_CHECK(pool.exists(tx6.GetHash()));\n-    BOOST_CHECK(!pool.exists(tx7.GetHash()));\n+    BOOST_CHECK(pool.exists(GenTxid::Txid(tx4.GetHash())));\n+    BOOST_CHECK(!pool.exists(GenTxid::Txid(tx5.GetHash())));\n+    BOOST_CHECK(pool.exists(GenTxid::Txid(tx6.GetHash())));\n+    BOOST_CHECK(!pool.exists(GenTxid::Txid(tx7.GetHash())));\n \n     pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n     pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));"
      },
      {
        "sha": "b945659c0d1ef30c7ceaed42a63587d85b28539c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4307849256761fe2440d82bbec892d0e8e6b4dd4",
        "patch": "@@ -969,7 +969,7 @@ CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) c\n bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n {\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        if (exists(tx.vin[i].prevout.hash))\n+        if (exists(GenTxid::Txid(tx.vin[i].prevout.hash)))\n             return false;\n     return true;\n }\n@@ -1140,7 +1140,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n         if (pvNoSpendsRemaining) {\n             for (const CTransaction& tx : txn) {\n                 for (const CTxIn& txin : tx.vin) {\n-                    if (exists(txin.prevout.hash)) continue;\n+                    if (exists(GenTxid::Txid(txin.prevout.hash))) continue;\n                     pvNoSpendsRemaining->push_back(txin.prevout);\n                 }\n             }"
      },
      {
        "sha": "1fd0c70891f55bbaecaa6530d8338b3d15212d01",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4307849256761fe2440d82bbec892d0e8e6b4dd4",
        "patch": "@@ -782,7 +782,6 @@ class CTxMemPool\n         }\n         return (mapTx.count(gtxid.GetHash()) != 0);\n     }\n-    bool exists(const uint256& txid) const { return exists(GenTxid{false, txid}); }\n \n     CTransactionRef get(const uint256& hash) const;\n     txiter get_iter_from_wtxid(const uint256& wtxid) const EXCLUSIVE_LOCKS_REQUIRED(cs)\n@@ -802,7 +801,7 @@ class CTxMemPool\n         LOCK(cs);\n         // Sanity check the transaction is in the mempool & insert into\n         // unbroadcast set.\n-        if (exists(txid)) m_unbroadcast_txids.insert(txid);\n+        if (exists(GenTxid::Txid(txid))) m_unbroadcast_txids.insert(txid);\n     };\n \n     /** Removes a transaction from the unbroadcast set */"
      },
      {
        "sha": "8938948d06a6314a5e9194355601d24148cb48aa",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4307849256761fe2440d82bbec892d0e8e6b4dd4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4307849256761fe2440d82bbec892d0e8e6b4dd4",
        "patch": "@@ -355,7 +355,7 @@ void CChainState::MaybeUpdateMempoolForReorg(\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n-        } else if (m_mempool->exists((*it)->GetHash())) {\n+        } else if (m_mempool->exists(GenTxid::Txid((*it)->GetHash()))) {\n             vHashUpdate.push_back((*it)->GetHash());\n         }\n         ++it;\n@@ -908,7 +908,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n-        if (!m_pool.exists(hash))\n+        if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n@@ -4500,7 +4500,7 @@ bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mocka\n                     // wallet(s) having loaded it while we were processing\n                     // mempool transactions; consider these as valid, instead of\n                     // failed, but mark them as 'already there'\n-                    if (pool.exists(tx->GetHash())) {\n+                    if (pool.exists(GenTxid::Txid(tx->GetHash()))) {\n                         ++already_there;\n                     } else {\n                         ++failed;"
      }
    ]
  }
]