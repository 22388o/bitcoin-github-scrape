[
  {
    "sha": "faa26d374425f52e03efff3a575c391b7862abe5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWEyNmQzNzQ0MjVmNTJlMDNlZmZmM2E1NzVjMzkxYjc4NjJhYmU1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-05T15:27:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-05T15:30:36Z"
      },
      "message": "test: Remove RPCOverloadWrapper boilerplate",
      "tree": {
        "sha": "ad7e7e00c2b3ca1ccafacf775606b9fecd37d3d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad7e7e00c2b3ca1ccafacf775606b9fecd37d3d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa26d374425f52e03efff3a575c391b7862abe5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhnNgv/cL1WZVdeWAZx9KMQINxTcUe+ipOmtSKHNf6WFvbWkswPPbP5kewlAPr3\neR8TZSXnYneKdshaZTBfc2buFDabripaKG8kXvPGY7Y6minrNu4lFJnLFgvdHnOh\n57I+B1Z656Nwk5M4eCNvl7R+HCWBrpZKzOXrdNXERgt+fk99eYXhkTek6Rcp1vjm\nzs9BXFdR6ZZ1G9gyjMDz1WjHUT0k57rSk001Vef1o11/z2bBwFBEo4aDVPnfpLic\nr0cbTbi7yJtlvg/7y+uglgHax9qxSd5+SGfNbzsf/OpiAIrqYOYwqRtYCusLn7pU\nv40BJdP0IOY0Tkfi8MG2p7ewFTUzkstCweSELcpkPBOtWvumvBv092YD32SwDMrD\ng+HYRRc19xtgz0zHf6rMt/8EoC74jYXwCi+LJMOslmvZqfQWbpw+/kD3snMUMoLB\nZg/5F44R7AkiQJQxDATQqXKSdr5UH2eH3nUpXcaxYvLuQiJHTAG4qrBcg1FZ9BMj\neqLgIYQu\n=sOBI\n-----END PGP SIGNATURE-----",
        "payload": "tree ad7e7e00c2b3ca1ccafacf775606b9fecd37d3d0\nparent 52ce396b2a47ed1c5d7d5764bc98a09451001749\nauthor MarcoFalke <falke.marco@gmail.com> 1588692468 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1588692636 -0400\n\ntest: Remove RPCOverloadWrapper boilerplate\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa26d374425f52e03efff3a575c391b7862abe5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa26d374425f52e03efff3a575c391b7862abe5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa26d374425f52e03efff3a575c391b7862abe5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52ce396b2a47ed1c5d7d5764bc98a09451001749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52ce396b2a47ed1c5d7d5764bc98a09451001749",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52ce396b2a47ed1c5d7d5764bc98a09451001749"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 3,
      "deletions": 32
    },
    "files": [
      {
        "sha": "0c2ef83834f85b08c0439ff9e68f6f1a5121c80a",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 3,
        "deletions": 32,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa26d374425f52e03efff3a575c391b7862abe5/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa26d374425f52e03efff3a575c391b7862abe5/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=faa26d374425f52e03efff3a575c391b7862abe5",
        "patch": "@@ -538,6 +538,8 @@ def get_request(self, *args, **kwargs):\n def arg_to_cli(arg):\n     if isinstance(arg, bool):\n         return str(arg).lower()\n+    elif arg is None:\n+        return 'null'\n     elif isinstance(arg, dict) or isinstance(arg, list):\n         return json.dumps(arg, default=EncodeDecimal)\n     else:\n@@ -608,27 +610,13 @@ def __init__(self, rpc, cli=False, descriptors=False):\n     def __getattr__(self, name):\n         return getattr(self.rpc, name)\n \n-    def createwallet(self, wallet_name, disable_private_keys=None, blank=None, passphrase=None, avoid_reuse=None, descriptors=None):\n-        if self.is_cli:\n-            if disable_private_keys is None:\n-                disable_private_keys = 'null'\n-            if blank is None:\n-                blank = 'null'\n-            if passphrase is None:\n-                passphrase = ''\n-            if avoid_reuse is None:\n-                avoid_reuse = 'null'\n+    def createwallet(self, wallet_name, disable_private_keys=None, blank=None, passphrase='', avoid_reuse=None, descriptors=None):\n         if descriptors is None:\n             descriptors = self.descriptors\n         return self.__getattr__('createwallet')(wallet_name, disable_private_keys, blank, passphrase, avoid_reuse, descriptors)\n \n     def importprivkey(self, privkey, label=None, rescan=None):\n         wallet_info = self.getwalletinfo()\n-        if self.is_cli:\n-            if label is None:\n-                label = 'null'\n-            if rescan is None:\n-                rescan = 'null'\n         if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n             return self.__getattr__('importprivkey')(privkey, label, rescan)\n         desc = descsum_create('combo(' + privkey + ')')\n@@ -643,11 +631,6 @@ def importprivkey(self, privkey, label=None, rescan=None):\n \n     def addmultisigaddress(self, nrequired, keys, label=None, address_type=None):\n         wallet_info = self.getwalletinfo()\n-        if self.is_cli:\n-            if label is None:\n-                label = 'null'\n-            if address_type is None:\n-                address_type = 'null'\n         if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n             return self.__getattr__('addmultisigaddress')(nrequired, keys, label, address_type)\n         cms = self.createmultisig(nrequired, keys, address_type)\n@@ -663,11 +646,6 @@ def addmultisigaddress(self, nrequired, keys, label=None, address_type=None):\n \n     def importpubkey(self, pubkey, label=None, rescan=None):\n         wallet_info = self.getwalletinfo()\n-        if self.is_cli:\n-            if label is None:\n-                label = 'null'\n-            if rescan is None:\n-                rescan = 'null'\n         if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n             return self.__getattr__('importpubkey')(pubkey, label, rescan)\n         desc = descsum_create('combo(' + pubkey + ')')\n@@ -682,13 +660,6 @@ def importpubkey(self, pubkey, label=None, rescan=None):\n \n     def importaddress(self, address, label=None, rescan=None, p2sh=None):\n         wallet_info = self.getwalletinfo()\n-        if self.is_cli:\n-            if label is None:\n-                label = 'null'\n-            if rescan is None:\n-                rescan = 'null'\n-            if p2sh is None:\n-                p2sh = 'null'\n         if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n             return self.__getattr__('importaddress')(address, label, rescan, p2sh)\n         is_hex = False"
      }
    ]
  }
]