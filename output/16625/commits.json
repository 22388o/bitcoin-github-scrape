[
  {
    "sha": "6c27fa0f09e5ec3854f30673d26c6e5e2d27063e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzI3ZmEwZjA5ZTVlYzM4NTRmMzA2NzNkMjZjNmU1ZTJkMjcwNjNl",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-08-16T00:20:39Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-08-19T11:16:57Z"
      },
      "message": "scripts: remove github-merge.py\n\nThis script has been moved to the bitcoin-core/bitcoin-maintainer-tools repository,\nafter discussion in a core dev meeting. The rationale being that it is also useful to\nother projects, and thus should be moved to a more general repository.\n\nMeeting log: http://www.erisian.com.au/bitcoin-core-dev/log-2019-08-15.html\nSee also: https://github.com/bitcoin-core/bitcoin-maintainer-tools/pull/28",
      "tree": {
        "sha": "0a418ea1d606c6b1f7325c40677ff7f6bb1efee7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a418ea1d606c6b1f7325c40677ff7f6bb1efee7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c27fa0f09e5ec3854f30673d26c6e5e2d27063e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl1ahSkACgkQLuufXMCV\nJsHCnA//bJp2zBBUsMQl3xlJQGNacRKB5v4JwUst38NXvxkifW3PvuByLohOjIdK\nR6sUHhfFUuWuS2/NhAjAm1tix7BSIMGB1FLtrGAiMwhIfSZsX9I9OD5U4VnIEle7\nr9rR3xh+Yv2jJRv1iRIN4WM633IY4n5LTrAXxfMB2Syhu86TdplFxtEhGxDmIdAM\nts+XF6+e7QmuwdLroDBYDu16gvGsaBn9Kc7VE7JLzClCEedBjEt6VLWiCONeZ90C\n4khqoSr1wx6MXTFvKbcbNtAKRLrb0DzviQUg7Hz7In9OddpaPXOHnX++pg6Asv7m\n5qh3zxSwihArw4YbyGBVnRqmML8sQ/RUU4Evs/bUEhl542/QeVSeAdaCTA6eowdP\njhGO03QBlGWVYtwplfeqE474Lmr3lCXilHxnCrH5gjbVCXt6Qspt1H3ZH1iOZdFg\n6xFHtvIsqTmNuhUsDG1Gclmjq+TYpy5HVNvf3XuB4Fq7d0DDP27itbKa6fl4Jv1r\nJ+prpt3z1YpwtCstEl9WqF+Pe2qi/dPcfEv4i4/Ra6Oe4po7Zo27siiw6zEsBrxf\n0yQOiQ2bEprV5gFd66gCOd9fj23f0wNief/t85TTTVy5VRyUsX+9X1xGDS1qqD1l\nFqNOj3G1lBAg1Q6xEHqewwEhpiipItU3Pc5mUIfdtAoCToZB6bc=\n=QtIY\n-----END PGP SIGNATURE-----",
        "payload": "tree 0a418ea1d606c6b1f7325c40677ff7f6bb1efee7\nparent 27ee0cc5a6d984d38c97915ea2174a217b3426d8\nauthor fanquake <fanquake@gmail.com> 1565914839 +0800\ncommitter fanquake <fanquake@gmail.com> 1566213417 +0800\n\nscripts: remove github-merge.py\n\nThis script has been moved to the bitcoin-core/bitcoin-maintainer-tools repository,\nafter discussion in a core dev meeting. The rationale being that it is also useful to\nother projects, and thus should be moved to a more general repository.\n\nMeeting log: http://www.erisian.com.au/bitcoin-core-dev/log-2019-08-15.html\nSee also: https://github.com/bitcoin-core/bitcoin-maintainer-tools/pull/28\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c27fa0f09e5ec3854f30673d26c6e5e2d27063e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c27fa0f09e5ec3854f30673d26c6e5e2d27063e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c27fa0f09e5ec3854f30673d26c6e5e2d27063e/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27ee0cc5a6d984d38c97915ea2174a217b3426d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27ee0cc5a6d984d38c97915ea2174a217b3426d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27ee0cc5a6d984d38c97915ea2174a217b3426d8"
      }
    ],
    "stats": {
      "total": 479,
      "additions": 3,
      "deletions": 476
    },
    "files": [
      {
        "sha": "e9e72f6686f8b94b9da9fc67e6e777d3772be5c7",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c27fa0f09e5ec3854f30673d26c6e5e2d27063e/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c27fa0f09e5ec3854f30673d26c6e5e2d27063e/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=6c27fa0f09e5ec3854f30673d26c6e5e2d27063e",
        "patch": "@@ -3,10 +3,10 @@ Repository Tools\n \n ### [Developer tools](/contrib/devtools) ###\n Specific tools for developers working on this repository.\n-Contains the script `github-merge.py` for merging GitHub pull requests securely and signing them using GPG.\n+Additional tools, including the `github-merge.py` script, are available in the [maintainer-tools](https://github.com/bitcoin-core/bitcoin-maintainer-tools) repository.\n \n ### [Verify-Commits](/contrib/verify-commits) ###\n-Tool to verify that every merge commit was signed by a developer using the above `github-merge.py` script.\n+Tool to verify that every merge commit was signed by a developer using the `github-merge.py` script.\n \n ### [Linearize](/contrib/linearize) ###\n Construct a linear, no-fork, best version of the blockchain."
      },
      {
        "sha": "3d1024c7a513c05d1930a4779f5318b1cae49515",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 60,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c27fa0f09e5ec3854f30673d26c6e5e2d27063e/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c27fa0f09e5ec3854f30673d26c6e5e2d27063e/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=6c27fa0f09e5ec3854f30673d26c6e5e2d27063e",
        "patch": "@@ -89,66 +89,6 @@ example:\n BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n ```\n \n-github-merge.py\n-===============\n-\n-A small script to automate merging pull-requests securely and sign them with GPG.\n-\n-For example:\n-\n-  ./github-merge.py 3077\n-\n-(in any git repository) will help you merge pull request #3077 for the\n-bitcoin/bitcoin repository.\n-\n-What it does:\n-* Fetch master and the pull request.\n-* Locally construct a merge commit.\n-* Show the diff that merge results in.\n-* Ask you to verify the resulting source tree (so you can do a make\n-check or whatever).\n-* Ask you whether to GPG sign the merge commit.\n-* Ask you whether to push the result upstream.\n-\n-This means that there are no potential race conditions (where a\n-pullreq gets updated while you're reviewing it, but before you click\n-merge), and when using GPG signatures, that even a compromised GitHub\n-couldn't mess with the sources.\n-\n-Setup\n----------\n-Configuring the github-merge tool for the bitcoin repository is done in the following way:\n-\n-    git config githubmerge.repository bitcoin/bitcoin\n-    git config githubmerge.testcmd \"make -j4 check\" (adapt to whatever you want to use for testing)\n-    git config --global user.signingkey mykeyid\n-\n-Authentication (optional)\n---------------------------\n-\n-The API request limit for unauthenticated requests is quite low, but the\n-limit for authenticated requests is much higher. If you start running\n-into rate limiting errors it can be useful to set an authentication token\n-so that the script can authenticate requests.\n-\n-- First, go to [Personal access tokens](https://github.com/settings/tokens).\n-- Click 'Generate new token'.\n-- Fill in an arbitrary token description. No further privileges are needed.\n-- Click the `Generate token` button at the bottom of the form.\n-- Copy the generated token (should be a hexadecimal string)\n-\n-Then do:\n-\n-    git config --global user.ghtoken \"pasted token\"\n-\n-Create and verify timestamps of merge commits\n----------------------------------------------\n-To create or verify timestamps on the merge commits, install the OpenTimestamps\n-client via `pip3 install opentimestamps-client`. Then, download the gpg wrapper\n-`ots-git-gpg-wrapper.sh` and set it as git's `gpg.program`. See\n-[the ots git integration documentation](https://github.com/opentimestamps/opentimestamps-client/blob/master/doc/git-integration.md#usage)\n-for further details.\n-\n optimize-pngs.py\n ================\n "
      },
      {
        "sha": "78ac671bfec2d0fc3fcfb01ef194c501052f4511",
        "filename": "contrib/devtools/github-merge.py",
        "status": "removed",
        "additions": 0,
        "deletions": 413,
        "changes": 413,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27ee0cc5a6d984d38c97915ea2174a217b3426d8/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27ee0cc5a6d984d38c97915ea2174a217b3426d8/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=27ee0cc5a6d984d38c97915ea2174a217b3426d8",
        "patch": "@@ -1,413 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2016-2017 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# This script will locally construct a merge commit for a pull request on a\n-# github repository, inspect it, sign it and optionally push it.\n-\n-# The following temporary branches are created/overwritten and deleted:\n-# * pull/$PULL/base (the current master we're merging onto)\n-# * pull/$PULL/head (the current state of the remote pull request)\n-# * pull/$PULL/merge (github's merge)\n-# * pull/$PULL/local-merge (our merge)\n-\n-# In case of a clean merge that is accepted by the user, the local branch with\n-# name $BRANCH is overwritten with the merged result, and optionally pushed.\n-import os\n-from sys import stdin,stdout,stderr\n-import argparse\n-import hashlib\n-import subprocess\n-import sys\n-import json\n-import codecs\n-from urllib.request import Request, urlopen\n-from urllib.error import HTTPError\n-\n-# External tools (can be overridden using environment)\n-GIT = os.getenv('GIT','git')\n-BASH = os.getenv('BASH','bash')\n-\n-# OS specific configuration for terminal attributes\n-ATTR_RESET = ''\n-ATTR_PR = ''\n-ATTR_NAME = ''\n-ATTR_WARN = ''\n-COMMIT_FORMAT = '%H %s (%an)%d'\n-if os.name == 'posix': # if posix, assume we can use basic terminal escapes\n-    ATTR_RESET = '\\033[0m'\n-    ATTR_PR = '\\033[1;36m'\n-    ATTR_NAME = '\\033[0;36m'\n-    ATTR_WARN = '\\033[1;31m'\n-    COMMIT_FORMAT = '%C(bold blue)%H%Creset %s %C(cyan)(%an)%Creset%C(green)%d%Creset'\n-\n-def git_config_get(option, default=None):\n-    '''\n-    Get named configuration option from git repository.\n-    '''\n-    try:\n-        return subprocess.check_output([GIT,'config','--get',option]).rstrip().decode('utf-8')\n-    except subprocess.CalledProcessError:\n-        return default\n-\n-def get_response(req_url, ghtoken):\n-    req = Request(req_url)\n-    if ghtoken is not None:\n-        req.add_header('Authorization', 'token ' + ghtoken)\n-    return urlopen(req)\n-\n-def retrieve_json(req_url, ghtoken, use_pagination=False):\n-    '''\n-    Retrieve json from github.\n-    Return None if an error happens.\n-    '''\n-    try:\n-        reader = codecs.getreader('utf-8')\n-        if not use_pagination:\n-            return json.load(reader(get_response(req_url, ghtoken)))\n-\n-        obj = []\n-        page_num = 1\n-        while True:\n-            req_url_page = '{}?page={}'.format(req_url, page_num)\n-            result = get_response(req_url_page, ghtoken)\n-            obj.extend(json.load(reader(result)))\n-\n-            link = result.headers.get('link', None)\n-            if link is not None:\n-                link_next = [l for l in link.split(',') if 'rel=\"next\"' in l]\n-                if len(link_next) > 0:\n-                    page_num = int(link_next[0][link_next[0].find(\"page=\")+5:link_next[0].find(\">\")])\n-                    continue\n-            break\n-        return obj\n-    except HTTPError as e:\n-        error_message = e.read()\n-        print('Warning: unable to retrieve pull information from github: %s' % e)\n-        print('Detailed error: %s' % error_message)\n-        return None\n-    except Exception as e:\n-        print('Warning: unable to retrieve pull information from github: %s' % e)\n-        return None\n-\n-def retrieve_pr_info(repo,pull,ghtoken):\n-    req_url = \"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull\n-    return retrieve_json(req_url,ghtoken)\n-\n-def retrieve_pr_comments(repo,pull,ghtoken):\n-    req_url = \"https://api.github.com/repos/\"+repo+\"/issues/\"+pull+\"/comments\"\n-    return retrieve_json(req_url,ghtoken,use_pagination=True)\n-\n-def retrieve_pr_reviews(repo,pull,ghtoken):\n-    req_url = \"https://api.github.com/repos/\"+repo+\"/pulls/\"+pull+\"/reviews\"\n-    return retrieve_json(req_url,ghtoken,use_pagination=True)\n-\n-def ask_prompt(text):\n-    print(text,end=\" \",file=stderr)\n-    stderr.flush()\n-    reply = stdin.readline().rstrip()\n-    print(\"\",file=stderr)\n-    return reply\n-\n-def get_symlink_files():\n-    files = sorted(subprocess.check_output([GIT, 'ls-tree', '--full-tree', '-r', 'HEAD']).splitlines())\n-    ret = []\n-    for f in files:\n-        if (int(f.decode('utf-8').split(\" \")[0], 8) & 0o170000) == 0o120000:\n-            ret.append(f.decode('utf-8').split(\"\\t\")[1])\n-    return ret\n-\n-def tree_sha512sum(commit='HEAD'):\n-    # request metadata for entire tree, recursively\n-    files = []\n-    blob_by_name = {}\n-    for line in subprocess.check_output([GIT, 'ls-tree', '--full-tree', '-r', commit]).splitlines():\n-        name_sep = line.index(b'\\t')\n-        metadata = line[:name_sep].split() # perms, 'blob', blobid\n-        assert(metadata[1] == b'blob')\n-        name = line[name_sep+1:]\n-        files.append(name)\n-        blob_by_name[name] = metadata[2]\n-\n-    files.sort()\n-    # open connection to git-cat-file in batch mode to request data for all blobs\n-    # this is much faster than launching it per file\n-    p = subprocess.Popen([GIT, 'cat-file', '--batch'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\n-    overall = hashlib.sha512()\n-    for f in files:\n-        blob = blob_by_name[f]\n-        # request blob\n-        p.stdin.write(blob + b'\\n')\n-        p.stdin.flush()\n-        # read header: blob, \"blob\", size\n-        reply = p.stdout.readline().split()\n-        assert(reply[0] == blob and reply[1] == b'blob')\n-        size = int(reply[2])\n-        # hash the blob data\n-        intern = hashlib.sha512()\n-        ptr = 0\n-        while ptr < size:\n-            bs = min(65536, size - ptr)\n-            piece = p.stdout.read(bs)\n-            if len(piece) == bs:\n-                intern.update(piece)\n-            else:\n-                raise IOError('Premature EOF reading git cat-file output')\n-            ptr += bs\n-        dig = intern.hexdigest()\n-        assert(p.stdout.read(1) == b'\\n') # ignore LF that follows blob data\n-        # update overall hash with file hash\n-        overall.update(dig.encode(\"utf-8\"))\n-        overall.update(\"  \".encode(\"utf-8\"))\n-        overall.update(f)\n-        overall.update(\"\\n\".encode(\"utf-8\"))\n-    p.stdin.close()\n-    if p.wait():\n-        raise IOError('Non-zero return value executing git cat-file')\n-    return overall.hexdigest()\n-\n-def get_acks_from_comments(head_commit, comments):\n-    # Look for abbreviated commit id, because not everyone wants to type/paste\n-    # the whole thing and the chance of collisions within a PR is small enough\n-    head_abbrev = head_commit[0:6]\n-    acks = []\n-    for c in comments:\n-        review = [l for l in c['body'].split('\\r\\n') if 'ACK' in l and head_abbrev in l]\n-        if review:\n-            acks.append((c['user']['login'], review[0]))\n-    return acks\n-\n-def make_acks_message(head_commit, acks):\n-    if acks:\n-        ack_str ='\\n\\nACKs for top commit:\\n'.format(head_commit)\n-        for name, msg in acks:\n-            ack_str += '  {}:\\n'.format(name)\n-            ack_str += '    {}\\n'.format(msg)\n-    else:\n-        ack_str ='\\n\\nTop commit has no ACKs.\\n'\n-    return ack_str\n-\n-def print_merge_details(pull, title, branch, base_branch, head_branch, acks):\n-    print('%s#%s%s %s %sinto %s%s' % (ATTR_RESET+ATTR_PR,pull,ATTR_RESET,title,ATTR_RESET+ATTR_PR,branch,ATTR_RESET))\n-    subprocess.check_call([GIT,'log','--graph','--topo-order','--pretty=format:'+COMMIT_FORMAT,base_branch+'..'+head_branch])\n-    if acks is not None:\n-        if acks:\n-            print('{}ACKs:{}'.format(ATTR_PR, ATTR_RESET))\n-            for (name, message) in acks:\n-                print('* {} {}({}){}'.format(message, ATTR_NAME, name, ATTR_RESET))\n-        else:\n-            print('{}Top commit has no ACKs!{}'.format(ATTR_WARN, ATTR_RESET))\n-\n-def parse_arguments():\n-    epilog = '''\n-        In addition, you can set the following git configuration variables:\n-        githubmerge.repository (mandatory),\n-        user.signingkey (mandatory),\n-        user.ghtoken (default: none).\n-        githubmerge.host (default: git@github.com),\n-        githubmerge.branch (no default),\n-        githubmerge.testcmd (default: none).\n-    '''\n-    parser = argparse.ArgumentParser(description='Utility to merge, sign and push github pull requests',\n-            epilog=epilog)\n-    parser.add_argument('pull', metavar='PULL', type=int, nargs=1,\n-        help='Pull request ID to merge')\n-    parser.add_argument('branch', metavar='BRANCH', type=str, nargs='?',\n-        default=None, help='Branch to merge against (default: githubmerge.branch setting, or base branch for pull, or \\'master\\')')\n-    return parser.parse_args()\n-\n-def main():\n-    # Extract settings from git repo\n-    repo = git_config_get('githubmerge.repository')\n-    host = git_config_get('githubmerge.host','git@github.com')\n-    opt_branch = git_config_get('githubmerge.branch',None)\n-    testcmd = git_config_get('githubmerge.testcmd')\n-    ghtoken = git_config_get('user.ghtoken')\n-    signingkey = git_config_get('user.signingkey')\n-    if repo is None:\n-        print(\"ERROR: No repository configured. Use this command to set:\", file=stderr)\n-        print(\"git config githubmerge.repository <owner>/<repo>\", file=stderr)\n-        sys.exit(1)\n-    if signingkey is None:\n-        print(\"ERROR: No GPG signing key set. Set one using:\",file=stderr)\n-        print(\"git config --global user.signingkey <key>\",file=stderr)\n-        sys.exit(1)\n-\n-    if host.startswith(('https:','http:')):\n-        host_repo = host+\"/\"+repo+\".git\"\n-    else:\n-        host_repo = host+\":\"+repo\n-\n-    # Extract settings from command line\n-    args = parse_arguments()\n-    pull = str(args.pull[0])\n-\n-    # Receive pull information from github\n-    info = retrieve_pr_info(repo,pull,ghtoken)\n-    if info is None:\n-        sys.exit(1)\n-    title = info['title'].strip()\n-    body = info['body'].strip()\n-    # precedence order for destination branch argument:\n-    #   - command line argument\n-    #   - githubmerge.branch setting\n-    #   - base branch for pull (as retrieved from github)\n-    #   - 'master'\n-    branch = args.branch or opt_branch or info['base']['ref'] or 'master'\n-\n-    # Initialize source branches\n-    head_branch = 'pull/'+pull+'/head'\n-    base_branch = 'pull/'+pull+'/base'\n-    merge_branch = 'pull/'+pull+'/merge'\n-    local_merge_branch = 'pull/'+pull+'/local-merge'\n-\n-    devnull = open(os.devnull, 'w', encoding=\"utf8\")\n-    try:\n-        subprocess.check_call([GIT,'checkout','-q',branch])\n-    except subprocess.CalledProcessError:\n-        print(\"ERROR: Cannot check out branch %s.\" % (branch), file=stderr)\n-        sys.exit(3)\n-    try:\n-        subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/pull/'+pull+'/*:refs/heads/pull/'+pull+'/*',\n-                                                          '+refs/heads/'+branch+':refs/heads/'+base_branch])\n-    except subprocess.CalledProcessError:\n-        print(\"ERROR: Cannot find pull request #%s or branch %s on %s.\" % (pull,branch,host_repo), file=stderr)\n-        sys.exit(3)\n-    try:\n-        subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+head_branch], stdout=devnull, stderr=stdout)\n-        head_commit = subprocess.check_output([GIT,'log','-1','--pretty=format:%H',head_branch]).decode('utf-8')\n-        assert len(head_commit) == 40\n-    except subprocess.CalledProcessError:\n-        print(\"ERROR: Cannot find head of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n-        sys.exit(3)\n-    try:\n-        subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+merge_branch], stdout=devnull, stderr=stdout)\n-    except subprocess.CalledProcessError:\n-        print(\"ERROR: Cannot find merge of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n-        sys.exit(3)\n-    subprocess.check_call([GIT,'checkout','-q',base_branch])\n-    subprocess.call([GIT,'branch','-q','-D',local_merge_branch], stderr=devnull)\n-    subprocess.check_call([GIT,'checkout','-q','-b',local_merge_branch])\n-\n-    try:\n-        # Go up to the repository's root.\n-        toplevel = subprocess.check_output([GIT,'rev-parse','--show-toplevel']).strip()\n-        os.chdir(toplevel)\n-        # Create unsigned merge commit.\n-        if title:\n-            firstline = 'Merge #%s: %s' % (pull,title)\n-        else:\n-            firstline = 'Merge #%s' % (pull,)\n-        message = firstline + '\\n\\n'\n-        message += subprocess.check_output([GIT,'log','--no-merges','--topo-order','--pretty=format:%H %s (%an)',base_branch+'..'+head_branch]).decode('utf-8')\n-        message += '\\n\\nPull request description:\\n\\n  ' + body.replace('\\n', '\\n  ') + '\\n'\n-        try:\n-            subprocess.check_call([GIT,'merge','-q','--commit','--no-edit','--no-ff','--no-gpg-sign','-m',message.encode('utf-8'),head_branch])\n-        except subprocess.CalledProcessError:\n-            print(\"ERROR: Cannot be merged cleanly.\",file=stderr)\n-            subprocess.check_call([GIT,'merge','--abort'])\n-            sys.exit(4)\n-        logmsg = subprocess.check_output([GIT,'log','--pretty=format:%s','-n','1']).decode('utf-8')\n-        if logmsg.rstrip() != firstline.rstrip():\n-            print(\"ERROR: Creating merge failed (already merged?).\",file=stderr)\n-            sys.exit(4)\n-\n-        symlink_files = get_symlink_files()\n-        for f in symlink_files:\n-            print(\"ERROR: File %s was a symlink\" % f)\n-        if len(symlink_files) > 0:\n-            sys.exit(4)\n-\n-        # Compute SHA512 of git tree (to be able to detect changes before sign-off)\n-        try:\n-            first_sha512 = tree_sha512sum()\n-        except subprocess.CalledProcessError:\n-            print(\"ERROR: Unable to compute tree hash\")\n-            sys.exit(4)\n-\n-        print_merge_details(pull, title, branch, base_branch, head_branch, None)\n-        print()\n-\n-        # Run test command if configured.\n-        if testcmd:\n-            if subprocess.call(testcmd,shell=True):\n-                print(\"ERROR: Running %s failed.\" % testcmd,file=stderr)\n-                sys.exit(5)\n-\n-            # Show the created merge.\n-            diff = subprocess.check_output([GIT,'diff',merge_branch+'..'+local_merge_branch])\n-            subprocess.check_call([GIT,'diff',base_branch+'..'+local_merge_branch])\n-            if diff:\n-                print(\"WARNING: merge differs from github!\",file=stderr)\n-                reply = ask_prompt(\"Type 'ignore' to continue.\")\n-                if reply.lower() == 'ignore':\n-                    print(\"Difference with github ignored.\",file=stderr)\n-                else:\n-                    sys.exit(6)\n-        else:\n-            # Verify the result manually.\n-            print(\"Dropping you on a shell so you can try building/testing the merged source.\",file=stderr)\n-            print(\"Run 'git diff HEAD~' to show the changes being merged.\",file=stderr)\n-            print(\"Type 'exit' when done.\",file=stderr)\n-            if os.path.isfile('/etc/debian_version'): # Show pull number on Debian default prompt\n-                os.putenv('debian_chroot',pull)\n-            subprocess.call([BASH,'-i'])\n-\n-        second_sha512 = tree_sha512sum()\n-        if first_sha512 != second_sha512:\n-            print(\"ERROR: Tree hash changed unexpectedly\",file=stderr)\n-            sys.exit(8)\n-\n-        # Retrieve PR comments and ACKs and add to commit message, store ACKs to print them with commit\n-        # description\n-        comments = retrieve_pr_comments(repo,pull,ghtoken) + retrieve_pr_reviews(repo,pull,ghtoken)\n-        if comments is None:\n-            print(\"ERROR: Could not fetch PR comments and reviews\",file=stderr)\n-            sys.exit(1)\n-        acks = get_acks_from_comments(head_commit=head_commit, comments=comments)\n-        message += make_acks_message(head_commit=head_commit, acks=acks)\n-        # end message with SHA512 tree hash, then update message\n-        message += '\\n\\nTree-SHA512: ' + first_sha512\n-        try:\n-            subprocess.check_call([GIT,'commit','--amend','--no-gpg-sign','-m',message.encode('utf-8')])\n-        except subprocess.CalledProcessError:\n-            print(\"ERROR: Cannot update message.\", file=stderr)\n-            sys.exit(4)\n-\n-        # Sign the merge commit.\n-        print_merge_details(pull, title, branch, base_branch, head_branch, acks)\n-        while True:\n-            reply = ask_prompt(\"Type 's' to sign off on the above merge, or 'x' to reject and exit.\").lower()\n-            if reply == 's':\n-                try:\n-                    subprocess.check_call([GIT,'commit','-q','--gpg-sign','--amend','--no-edit'])\n-                    break\n-                except subprocess.CalledProcessError:\n-                    print(\"Error while signing, asking again.\",file=stderr)\n-            elif reply == 'x':\n-                print(\"Not signing off on merge, exiting.\",file=stderr)\n-                sys.exit(1)\n-\n-        # Put the result in branch.\n-        subprocess.check_call([GIT,'checkout','-q',branch])\n-        subprocess.check_call([GIT,'reset','-q','--hard',local_merge_branch])\n-    finally:\n-        # Clean up temporary branches.\n-        subprocess.call([GIT,'checkout','-q',branch])\n-        subprocess.call([GIT,'branch','-q','-D',head_branch],stderr=devnull)\n-        subprocess.call([GIT,'branch','-q','-D',base_branch],stderr=devnull)\n-        subprocess.call([GIT,'branch','-q','-D',merge_branch],stderr=devnull)\n-        subprocess.call([GIT,'branch','-q','-D',local_merge_branch],stderr=devnull)\n-\n-    # Push the result.\n-    while True:\n-        reply = ask_prompt(\"Type 'push' to push the result to %s, branch %s, or 'x' to exit without pushing.\" % (host_repo,branch)).lower()\n-        if reply == 'push':\n-            subprocess.check_call([GIT,'push',host_repo,'refs/heads/'+branch])\n-            break\n-        elif reply == 'x':\n-            sys.exit(1)\n-\n-if __name__ == '__main__':\n-    main()"
      },
      {
        "sha": "9ec8663fbae7bd1a7e9acb83668c009ddbc5ab81",
        "filename": "contrib/verify-commits/verify-commits.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c27fa0f09e5ec3854f30673d26c6e5e2d27063e/contrib/verify-commits/verify-commits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c27fa0f09e5ec3854f30673d26c6e5e2d27063e/contrib/verify-commits/verify-commits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.py?ref=6c27fa0f09e5ec3854f30673d26c6e5e2d27063e",
        "patch": "@@ -16,7 +16,7 @@\n def tree_sha512sum(commit='HEAD'):\n     \"\"\"Calculate the Tree-sha512 for the commit.\n \n-    This is copied from github-merge.py.\"\"\"\n+    This is copied from github-merge.py. See https://github.com/bitcoin-core/bitcoin-maintainer-tools.\"\"\"\n \n     # request metadata for entire tree, recursively\n     files = []"
      }
    ]
  }
]