DrahtBot,2018-06-28T09:28:00Z,<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13359 (wallet: Directly operate with CMutableTransaction by MarcoFalke)\n* #13266 (refactoring: privatize SignatureExtractorChecker by Empact)\n* #13144 (RPC: Improve error messages on RPC endpoints that use GetTransaction by jimpo)\n* #13098 (Skip tx-rehashing on historic blocks by,https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-400972753,400972753,
achow101,2018-06-28T17:52:59Z,"@promag Just so you know, those commits are part of #13425 ",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-401119664,401119664,
promag,2018-06-28T18:01:00Z,Ops @achow101 do you want me to comment there?,https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-401122013,401122013,
achow101,2018-06-28T18:05:52Z,No need to comment twice. I will update that PR and then rebase this onto that.,https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-401123362,401123362,
sipa,2018-06-28T23:13:58Z,"General comment on naming of RPC field names and input arguments, `""base64""` isn't very informative I think. I suggest using `""psbt""` anywhere you have an input or output in base64. There isn't any other encoding used, so there should never be any confusion. Using `""hex""` for fully signed or legacy partially signed transaction makes sense for consistency with the existing RPCs.",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-401200508,401200508,
achow101,2018-06-29T02:26:44Z,I did a bit of commit splitting and have reduced the size of the RPCs commit by splitting it up. Hopefully this will make review easier.,https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-401228577,401228577,
nvk,2018-06-29T18:16:28Z,"We will start implementing as soon as this gets merged.\nThanks for sorting it out so fast 👍",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-401433514,401433514,
instagibbs,2018-07-05T15:38:29Z,Needs rebase now that https://github.com/bitcoin/bitcoin/pull/13425 is merged. (I think?),https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-402764376,402764376,
achow101,2018-07-05T18:00:14Z,Rebased onto master after #13425 was merged. Will address comments soon.,https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-402805217,402805217,
achow101,2018-07-05T22:44:42Z,"> Instead of `walletcreatefundedpsbt`, could make a `rawtransactiontopsbt` or alike?\n\nThere already is a `converttopsbt` method. I do not think that we should make using PSBT require using raw transactions first. It should be self contained as I hope that we will move from raw transactions to PSBT entirely.",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-402873779,402873779,
sipa,2018-07-07T01:15:19Z,utACK 14339b0214f2976cae772ae836322d285138c353. Going to play around with it more before I give a tACK.,https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-403178806,403178806,
promag,2018-07-07T22:23:26Z,"utACK 14339b0. I have a couple of comments but are all nits here and there.\n\n> There already is a `converttopsbt` method. I do not think that we should make using PSBT require using raw transactions first. It should be self contained as I hope that we will move from raw transactions to PSBT entirely.\n\nOk got it.",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-403246618,403246618,
instagibbs,2018-07-09T13:35:22Z,"Left some comments, looking good overall.\n\nI'd also like the RPC help to be a bit more descriptive of what the calls are doing, in plain english, to avoid users having to be BIP174 experts. e.g., what does ""finalizer"" mean.",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-403481109,403481109,
laanwj,2018-07-09T14:21:54Z,"might want to fix this warning:\n```\n/.../bitcoin/src/wallet/rpcwallet.h:14:1: warning: class 'PartiallySignedTransaction' was previously declared as a struct [-Wmismatched-tags]\nclass PartiallySignedTransaction;\n^\n/.../bitcoin/src/script/sign.h:486:8: note: previous use is here\nstruct PartiallySignedTransaction\n       ^\n/.../bitcoin/src/wallet/rpcwallet.h:14:1: note: did you mean s",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-403496398,403496398,
sipa,2018-07-09T19:55:28Z,"We should probably have a document (in doc/ or so) that explain the most common workflows (hardware wallet, coinjoin, multisig) with the relevant RPCs.",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-403600427,403600427,
achow101,2018-07-09T20:14:24Z,"> might want to fix this warning\n\nI don't see this warning locally, but fixed anyways.",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-403605592,403605592,
laanwj,2018-07-10T14:18:17Z,"> I don't see this warning locally, but fixed anyways.\n\nHeh, building with clang-latest-master is sometimes useful.\n\n> We should probably have a document (in doc/ or so) that  explain the most common workflows (hardware wallet, coinjoin, multisig)  with the relevant RPCs.\n\nGood idea, though probably not in this PR if we want it in before the feature freeze.",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-403839132,403839132,
achow101,2018-07-10T23:03:23Z,"> Adding test for those would be useful, and could catch if we forgot any useful params in the RPC.\n\nThere already are test cases for multisig. I have added one for coinjoin where inputs come from multiple nodes.\n\n> I'm missing a test case for `bip32_derivs`.\n\nThis is done in the updater tests which is a unit test (so we can add specific prevtxs).\n\n> Adding `bip32_derivs` should pr",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-403993033,403993033,
sipa,2018-07-11T22:24:26Z,"> Bit of a privacy issue: let's say person A and B are about to spend from a multisig address, sending everything to person A. Person A gives their address to person B, their wallet wallet creates a PSBT, but doesn't sign it. Wallet A then calls walletprocesspsbt which signs it and spontaneously adds the master_fingerprint and bip32 path. Same issue with walletcreatefundedpsbt.\n\nI think it's g",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-404329633,404329633,
achow101,2018-07-11T22:36:50Z,"> `walletprocesspsbt` won't sign a transaction if it doesn't know about the multisig address (i.e. addmultisig was never called). This is the case even if the PSBT has sufficient information, since it could match the witness_script against its own pub keys. Might be a nice improvement for later.\n\nThis shouldn't be the case as it is explicitly tested for in the test cases. A multisig address is",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-404332054,404332054,
Sjors,2018-07-12T09:16:34Z,"In this test case node1 created the multisig and is the first to sign it. In the scenario I tested, the multisig was created by an independent wallet, so the participating wallets only have the matching public and private keys, but don't know there's a multisig involved.",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-404447084,404447084,
sipa,2018-07-12T17:38:01Z,"> In this test case node1 created the multisig and is the first to sign it. In the scenario I tested, the multisig was created by an independent wallet, so the participating wallets only have the matching public and private keys, but don't know there's a multisig involved.\n\nSo run walletprocesspsbt on the PSBT with the wallet that does have the information about the multisig construction? It s",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-404591447,404591447,
Sjors,2018-07-13T15:30:05Z,"@sipa I described the behavior in more detail in a functional test:\nhttps://github.com/achow101/bitcoin/compare/psbt...Sjors:2018/07/psbt-tests",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-404867941,404867941,
achow101,2018-07-13T18:25:43Z,@sjors this is expected behavior due to how the wallet works. It is orthogonal to this PR and is just a side effect of the current wallet structure.,https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-404915029,404915029,
sipa,2018-07-13T18:38:15Z,"@Sjors So what is happening is that none of the wallets involved in your tests treat the address as ""mine"", and:\n* As a result none know about the UTXO being spent,\n* As a result none can add UTXO information to the PSBT\n* As a result none can add script information (even those that know about the multisig, because they don't know that it is relevant for that input).\n* As a result none sig",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-404918179,404918179,
Sjors,2018-07-13T19:03:08Z,"I see, at least we have it documented again :-)",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-404924606,404924606,
DrahtBot,2018-07-14T00:50:16Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13359 (wallet: Directly operate with CMutableTransaction by MarcoFalke)\n* #13266 (refactoring: Convert DataFromTransaction to a SignatureData constructor, and privatize helpers by Empact)\n* #13144 (RPC: Improve error messages on RPC endpoints that use GetTransaction by jimpo)\n* #",https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-404986537,404986537,
sipa,2018-07-17T01:20:56Z,utACK 020628e3a4e88e36647eaf92bac4b3552796ac6a,https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-405428971,405428971,
laanwj,2018-07-18T18:25:41Z,utACK 020628e3a4e88e36647eaf92bac4b3552796ac6a,https://github.com/bitcoin/bitcoin/pull/13557#issuecomment-406028854,406028854,
sipa,2018-06-28T05:01:33Z,Inconsistent class name (PartiallySignedInput vs PSBTOutput).,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198708045,198708045,src/script/sign.h
sipa,2018-06-28T05:02:39Z,Perhaps add a comment to explain this function and the one below.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198708146,198708146,src/script/sign.h
promag,2018-06-28T09:04:02Z,"Commit ""Make SignatureData able to store signatures and scripts""\n\nnit, `++i`",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198764592,198764592,src/script/sign.cpp
promag,2018-06-28T09:09:27Z,"Commit  ""Make SignatureData able to store signatures and scripts""\n\n`class SignatureExtractorChecker final`?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198766870,198766870,src/script/sign.h
promag,2018-06-28T09:15:36Z,"Commit ""Make SignatureData able to store signatures and scripts""\n\nThis is called when `pubkey.GetID()` doesn't exists in signatures, maybe assert it is new:\n```cpp\nauto i = sigdata->signatures.emplace(...);\nassert(i.second);\n```",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198769412,198769412,src/script/sign.cpp
promag,2018-06-28T09:16:40Z,"Commit ""Make SignatureData able to store signatures and scripts""\n\nUse references instead of pointers?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198769810,198769810,src/script/sign.h
promag,2018-06-28T09:20:06Z,"Commit ""Replace CombineSignatures with ProduceSignature""\n\nLooks like these could be references:\n```cpp\nstatic bool GetCScript(const SigningProvider& provider, const SignatureData& sigdata, const CScriptID &scriptid, CScript& script)\n```\nand remove `provider != nullptr` below.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198771222,198771222,src/script/sign.cpp
promag,2018-06-28T09:25:59Z,Otherwise fix space before `scriptid` argument. Same below in the definition.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198773739,198773739,src/script/sign.cpp
promag,2018-06-28T09:27:04Z,"Commit ""Replace CombineSignatures with ProduceSignature""\n\nAs pointed by @MarcoFalke, don't use references to iterators. Check throughout too.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198774215,198774215,src/script/sign.cpp
sipa,2018-06-28T18:01:31Z,I think this can be written as just `std::vector<unsigned char> sig; s >> sig`.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198933070,198933070,src/script/sign.h
sipa,2018-06-28T18:06:09Z,"For this one and the next, check whether you don't already have the other UTXO type?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198934388,198934388,src/script/sign.h
sipa,2018-06-28T18:15:21Z,Here you can again just use `std::vector<unsigned char> val_bytes; s >> val_bytes;`.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198937087,198937087,src/script/sign.h
sipa,2018-06-28T18:16:37Z,Can you abstract out the serialization/deserialization code for derivation paths and scripts into separate functions? Otherwise it is needlessly duplicated across input and outputs.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198937464,198937464,src/script/sign.h
sipa,2018-06-28T18:44:44Z,Do you still need `num_ins` and `use_in_index`?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198946369,198946369,src/script/sign.h
sipa,2018-06-28T18:46:56Z,"Why the `!s.empty()` check here? If we reach EOF in the stream an error should be raised, not ignore it.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198947030,198947030,src/script/sign.h
achow101,2018-06-28T19:11:57Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198954379,198954379,src/script/sign.cpp
achow101,2018-06-28T19:12:02Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198954398,198954398,src/script/sign.h
achow101,2018-06-28T19:12:07Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198954415,198954415,src/script/sign.cpp
achow101,2018-06-28T19:12:11Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198954423,198954423,src/script/sign.h
achow101,2018-06-28T19:12:16Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198954439,198954439,src/script/sign.cpp
achow101,2018-06-28T19:12:24Z,Done.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198954471,198954471,src/script/sign.cpp
achow101,2018-06-28T19:52:47Z,"If we reach EOF in the stream, this loop will exit and the if block below will throw the error as the number of inputs/outputs will differ from the number of inputs/outputs in the unsigned tx. ",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198964995,198964995,src/script/sign.h
achow101,2018-06-28T19:53:37Z,Done. Renamed PartiallySignedInput to PSBTInput,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198965231,198965231,src/script/sign.h
achow101,2018-06-28T19:53:42Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198965252,198965252,src/script/sign.h
achow101,2018-06-28T19:53:57Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198965304,198965304,src/script/sign.h
achow101,2018-06-28T19:54:03Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198965331,198965331,src/script/sign.h
achow101,2018-06-28T19:54:07Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198965350,198965350,src/script/sign.h
achow101,2018-06-28T19:54:11Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198965361,198965361,src/script/sign.h
achow101,2018-06-28T19:54:16Z,Removed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198965374,198965374,src/script/sign.h
sipa,2018-06-28T21:28:24Z,"You could also write it as `uint8_t PSBT_MAGIC_BYTES[4] = ""PSBT"";`. Byte arrays can be serialized directly now.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198991851,198991851,src/script/sign.h
sipa,2018-06-28T21:28:47Z,`constexpr`,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198991986,198991986,src/script/sign.h
sipa,2018-06-28T21:29:28Z,Add `template <typename Stream>` before.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198992193,198992193,src/script/sign.h
sipa,2018-06-28T21:29:51Z,Add `template<typename Stream>` before.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198992304,198992304,src/script/sign.h
sipa,2018-06-28T21:32:56Z,Make the field type a function argument; it differs between input and output types.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198993246,198993246,src/script/sign.h
sipa,2018-06-28T21:36:45Z,"Ah, I see. That will probably give a more useful error.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198994362,198994362,src/script/sign.h
achow101,2018-06-28T21:53:34Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198998355,198998355,src/script/sign.h
achow101,2018-06-28T21:53:41Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198998372,198998372,src/script/sign.h
achow101,2018-06-28T21:54:03Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198998457,198998457,src/script/sign.h
achow101,2018-06-28T21:54:09Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r198998482,198998482,src/script/sign.h
achow101,2018-06-28T22:22:11Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199004472,199004472,src/script/sign.h
sipa,2018-06-28T22:25:51Z,Would it make sense to abstract out this convert-base64-to-psbt RPC routine into a separate function? It's probably called from many RPCs.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199005299,199005299,src/rpc/rawtransaction.cpp
sipa,2018-06-28T22:26:40Z,Also add unknowns to the decode?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199005647,199005647,src/rpc/rawtransaction.cpp
sipa,2018-06-28T22:27:23Z,What do you think about combing fingerprint and path into one string (like proposed in my descriptor language)?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199005825,199005825,src/rpc/rawtransaction.cpp
sipa,2018-06-28T22:28:30Z,"It feels like this should be written as a method or function operating on `PartiallySignedTransaction` objects, rather than inside the RPC code.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199006165,199006165,src/rpc/rawtransaction.cpp
sipa,2018-06-28T22:29:48Z,"I'm not sure what this entire UTXO handling section does. Is it sufficient to (a) rely on a generic combine PSBT function somewhere (suggested below) which also combined the utxo data, and then perhaps convert the logic in this section to a sanity check function?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199006515,199006515,src/rpc/rawtransaction.cpp
sipa,2018-06-28T22:31:12Z,Nit: `else` on the same line as `}` (and elsewhere).,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199006766,199006766,src/rpc/rawtransaction.cpp
sipa,2018-06-28T22:46:22Z,Not hex encoded.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199009612,199009612,src/rpc/rawtransaction.cpp
sipa,2018-06-28T22:47:11Z,Explain that this implements the Combiner and Finalizer roles?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199009777,199009777,src/rpc/rawtransaction.cpp
sipa,2018-06-28T22:49:48Z,"Fully signed transaction, no? It seems the explanation of this and the field above are swapped.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199010254,199010254,src/rpc/rawtransaction.cpp
sipa,2018-06-28T22:51:30Z,This whole section that extracts UTXOs and data from a PSBT input and invokes ProduceSignature on it seems like something that can be abstracted out.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199010547,199010547,src/rpc/rawtransaction.cpp
sipa,2018-06-28T22:52:26Z,"This RPC does not do any funding, I think.\n\nExplain that this implements a Creator role.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199010700,199010700,src/rpc/rawtransaction.cpp
sipa,2018-06-28T23:04:06Z,"You can use `ReadLE32` for this, it's more efficient.\n\nIf instead this would be BE (`ReadBE32` also exists), you can get rid of `Uint32ToUint8VectorLE` and instead print using `strprintf(""%08x"", fingerprint)`.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199012847,199012847,src/uint256.h
sipa,2018-06-28T23:06:42Z,"Perhaps clarify that it's intended to work with `createrawtransaction` and `fundrawtransaction`, and `createpsbt`/`createfundedpsbt` should be used for new applications.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199013256,199013256,src/rpc/rawtransaction.cpp
achow101,2018-06-28T23:30:52Z,I think it is clearer to list the fingerprint separately.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199017225,199017225,src/rpc/rawtransaction.cpp
achow101,2018-06-28T23:32:31Z,Why?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199017473,199017473,src/rpc/rawtransaction.cpp
sipa,2018-06-28T23:34:04Z,Because it's not RPC specific. It's cleaner to put the operations on the lowest level they can go.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199017650,199017650,src/rpc/rawtransaction.cpp
achow101,2018-06-29T02:24:01Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199037960,199037960,src/rpc/rawtransaction.cpp
achow101,2018-06-29T02:24:06Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199037966,199037966,src/rpc/rawtransaction.cpp
achow101,2018-06-29T02:24:12Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199037978,199037978,src/rpc/rawtransaction.cpp
achow101,2018-06-29T02:24:57Z,I have refactored the merging stuff into a Merge() method for each PSBT struct. I also added a sanity checking method for each.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199038045,199038045,src/rpc/rawtransaction.cpp
achow101,2018-06-29T02:25:03Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199038057,199038057,src/rpc/rawtransaction.cpp
achow101,2018-06-29T02:25:09Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199038063,199038063,src/rpc/rawtransaction.cpp
achow101,2018-06-29T02:25:14Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199038068,199038068,src/rpc/rawtransaction.cpp
achow101,2018-06-29T02:25:19Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199038075,199038075,src/rpc/rawtransaction.cpp
achow101,2018-06-29T02:25:27Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199038094,199038094,src/rpc/rawtransaction.cpp
achow101,2018-06-29T02:25:34Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199038105,199038105,src/rpc/rawtransaction.cpp
achow101,2018-06-29T02:26:02Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199038146,199038146,src/uint256.h
achow101,2018-06-29T02:26:08Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199038156,199038156,src/rpc/rawtransaction.cpp
sipa,2018-06-29T06:37:29Z,No need to pass `txin`; it's always equal to `tx.vin[index]` I think.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199065136,199065136,src/script/sign.cpp
sipa,2018-06-29T06:37:58Z,Nit: else on the same line as `}`.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199065265,199065265,src/script/sign.cpp
sipa,2018-06-29T06:41:26Z,Nit: function naming style,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199066062,199066062,src/wallet/rpcwallet.cpp
sipa,2018-06-29T06:41:38Z,Nit: function naming style,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199066104,199066104,src/wallet/rpcwallet.cpp
sipa,2018-06-29T06:43:40Z,Nit: function naming style,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199066556,199066556,src/wallet/rpcwallet.cpp
achow101,2018-06-29T18:15:38Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199241206,199241206,src/script/sign.cpp
achow101,2018-06-29T18:15:45Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199241256,199241256,src/script/sign.cpp
achow101,2018-06-29T18:15:50Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199241287,199241287,src/wallet/rpcwallet.cpp
achow101,2018-06-29T18:15:56Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199241307,199241307,src/wallet/rpcwallet.cpp
achow101,2018-06-29T18:16:05Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199241346,199241346,src/wallet/rpcwallet.cpp
sipa,2018-06-30T00:34:06Z,"This section (up to `s >> MakeSpan(key)`) can be written more concisely as:\n\n```\nstd::vector<unsigned char> key;\ns >> key;\nif (key.empty()) return;\n```\n",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199306583,199306583,src/script/sign.h
sipa,2018-06-30T00:39:29Z,"I guess this is now done by the `IsSane()` function, and doesn't need to be repeated here?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199306849,199306849,src/script/sign.h
sipa,2018-06-30T00:39:40Z,Same thing here.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199306860,199306860,src/script/sign.h
sipa,2018-06-30T00:40:27Z,Can be `std::move(sig)`.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199306899,199306899,src/script/sign.h
sipa,2018-06-30T00:44:10Z,The same shorter read routine is possible here.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199307069,199307069,src/script/sign.h
sipa,2018-06-30T00:44:33Z,And again here.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199307083,199307083,src/script/sign.h
achow101,2018-06-30T01:06:40Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199308042,199308042,src/script/sign.h
achow101,2018-06-30T01:06:45Z,Removed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199308047,199308047,src/script/sign.h
achow101,2018-06-30T01:06:52Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199308050,199308050,src/script/sign.h
achow101,2018-06-30T01:06:56Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199308055,199308055,src/script/sign.h
achow101,2018-06-30T01:07:00Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199308057,199308057,src/script/sign.h
achow101,2018-06-30T01:07:05Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199308062,199308062,src/script/sign.h
sipa,2018-06-30T01:53:50Z,Perhaps check for `ssData.eof()` here (so that adding garbage at the end of the base64 string is rejected).,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199309739,199309739,src/core_read.cpp
sipa,2018-06-30T01:54:04Z,Nit: variable naming style.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199309749,199309749,src/core_read.cpp
sipa,2018-06-30T01:54:36Z,You can drop the `.c_str()`.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199309761,199309761,src/core_read.cpp
sipa,2018-06-30T01:55:14Z,This adds a superfluous `/` at the end of the string.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199309777,199309777,src/rpc/rawtransaction.cpp
sipa,2018-06-30T01:57:01Z,"What do you think about renaming input psbt arguments from `""base64""` or `""base64string""` to `""psbt""` (and similar for output object field names)?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199309807,199309807,src/rpc/rawtransaction.cpp
sipa,2018-06-30T01:58:37Z,Not hex.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199309850,199309850,src/rpc/rawtransaction.cpp
sipa,2018-06-30T01:59:24Z,No need to merge in the first one again.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199309871,199309871,src/rpc/rawtransaction.cpp
sipa,2018-06-30T01:59:58Z,"""Not sane"" sounds funny. What about ""Resulting PSBT would be inconsistent""?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199309880,199309880,src/rpc/rawtransaction.cpp
sipa,2018-06-30T02:00:37Z,Is the cast necessary here?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199309897,199309897,src/rpc/rawtransaction.cpp
sipa,2018-06-30T02:05:06Z,"This explanation is confusing. It's an input argument, right? How about ""If true, the RPC will ignore any signatures present in the input. When this argument is false, it will fail if signatures are present.""",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310113,199310113,src/rpc/rawtransaction.cpp
achow101,2018-06-30T02:22:08Z,This is checked for above with `if (!ssData.empty()) {`,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310430,199310430,src/core_read.cpp
sipa,2018-06-30T02:28:59Z,I should learn to read.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310587,199310587,src/core_read.cpp
achow101,2018-06-30T02:34:13Z,`DecodeBase64` takes an `unsigned char*` while base64_tx is a `std::string`. It fails to compile without `c_str()`,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310681,199310681,src/core_read.cpp
achow101,2018-06-30T02:34:45Z,Yes. `EncodeBase64` takes an `unsigned char*` but `ssTx.data()` is a `char *`.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310686,199310686,src/rpc/rawtransaction.cpp
sipa,2018-06-30T02:42:12Z,There is also a version of `DecodeBase64` which takes a `const std::string&`.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310802,199310802,src/core_read.cpp
achow101,2018-06-30T02:45:44Z,"Yes, but not to a `std::vector<unsigned char>`. It decodes to a `std::string`, but I need a `std::vector<unsigned char>`",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310847,199310847,src/core_read.cpp
achow101,2018-06-30T02:46:09Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310858,199310858,src/core_read.cpp
achow101,2018-06-30T02:46:15Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310861,199310861,src/rpc/rawtransaction.cpp
achow101,2018-06-30T02:46:23Z,Renamed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310864,199310864,src/rpc/rawtransaction.cpp
achow101,2018-06-30T02:46:31Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310866,199310866,src/rpc/rawtransaction.cpp
achow101,2018-06-30T02:46:48Z,Changed to erase the first element from the vector.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310871,199310871,src/rpc/rawtransaction.cpp
achow101,2018-06-30T02:46:54Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310875,199310875,src/rpc/rawtransaction.cpp
achow101,2018-06-30T02:47:02Z,Changed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199310876,199310876,src/rpc/rawtransaction.cpp
sipa,2018-06-30T19:00:41Z,Why swap these?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199329840,199329840,src/wallet/rpcwallet.cpp
sipa,2018-06-30T19:02:23Z,"Is this were a `std::unique_ptr<CMutableTransaction>` (or `boost::optional<CMutableTransaction>`), you could avoid the need for implementing `IsNull` or converting to `CTransaction` to decide whether it is set or not.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199329881,199329881,src/script/sign.h
sipa,2018-06-30T19:08:59Z,You can use a const reference here to avoid a copy.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199330059,199330059,src/wallet/rpcwallet.cpp
sipa,2018-06-30T19:09:06Z,Same here.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199330061,199330061,src/wallet/rpcwallet.cpp
sipa,2018-06-30T19:09:47Z,Unused variable.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199330073,199330073,src/rpc/rawtransaction.cpp
sipa,2018-06-30T19:14:38Z,I think the semantics should be to fail if the specified sighash type (or the default) does not match the sighash type in the PSBT.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199330188,199330188,src/wallet/rpcwallet.cpp
sipa,2018-06-30T19:17:05Z,"If you'd have a `SigningProvider` wrapper that removes access to private keys, you could use that instead of passing down a `sign` variable. The other call site doesn't need a `sign` anyway, as it's using a dummy provider.\n",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199330230,199330230,src/wallet/rpcwallet.cpp
sipa,2018-06-30T19:19:53Z,"Thinking more about this, I can't find a reason why someone would not want to also Update the PSBT. Since in this case, the wallet is adding inputs and change, it is exactly in the position to also add keys/scripts/utxos for those. It shouldn't include signing, though.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199330273,199330273,src/wallet/rpcwallet.cpp
achow101,2018-07-02T18:51:58Z,To match the order in the help text.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199589534,199589534,src/wallet/rpcwallet.cpp
achow101,2018-07-02T19:48:40Z,"In order to sign the PSBT, you still have to use `walletupdatepsbt` and that will update the PSBT at the same time.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199602121,199602121,src/wallet/rpcwallet.cpp
sipa,2018-07-02T19:55:15Z,"I meant: why should createfunded not automatically update? It by definition has all the data available, and I don't think there is a reason why you wouldn't run update immediately after anyway.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199603524,199603524,src/wallet/rpcwallet.cpp
achow101,2018-07-02T21:13:00Z,Made into a `boost::optional`,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199622754,199622754,src/script/sign.h
achow101,2018-07-02T21:13:06Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199622782,199622782,src/wallet/rpcwallet.cpp
achow101,2018-07-02T21:13:10Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199622799,199622799,src/wallet/rpcwallet.cpp
achow101,2018-07-02T21:13:19Z,Removed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199622836,199622836,src/rpc/rawtransaction.cpp
achow101,2018-07-02T21:13:30Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199622882,199622882,src/wallet/rpcwallet.cpp
achow101,2018-07-02T21:13:39Z,Done.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199622917,199622917,src/wallet/rpcwallet.cpp
achow101,2018-07-02T21:13:58Z,Changed to also update,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199622992,199622992,src/wallet/rpcwallet.cpp
sipa,2018-07-04T00:11:41Z,"Alternatively: move the `keypath_str += ""/"";` to the front of the loop and initialize with just `""m""`. That way you can avoid adding and then stripping the final slash.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199980955,199980955,src/rpc/rawtransaction.cpp
sipa,2018-07-04T00:17:14Z,"I think it's bad practice to keep outputting ""addresses"" that correspond to a script. It's confusing (they're not really addresses, just multisig pubkeys represented through their corresponding P2PKH address) and also generally useless as it can't introspect into P2SH and P2WSH.\n\nI preference would be to just output ""hex"", ""asm"" and ""address"" (only if a corresponding address is known through `",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199981568,199981568,src/rpc/rawtransaction.cpp
sipa,2018-07-04T00:29:00Z,"What is this ""script"" intermediate layer? I don't see that in the implementation (for this and for witness_script). Again, just ""hex"" and ""asm"" is sufficient here I think.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199982817,199982817,src/rpc/rawtransaction.cpp
sipa,2018-07-04T00:30:00Z,"For compatibility with `listunspent` you may want to call this `""amount""`.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199982918,199982918,src/rpc/rawtransaction.cpp
sipa,2018-07-04T00:32:20Z,"How about modelling this as an object whose keys are hex pubkeys, and signatures are hex values?\n\nSo `{""<p1>"":""<sig1>"",...}` instead of `[{""pubkey"":""<pk1>"",""signature"":""""<sig1>""},...]`.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199983146,199983146,src/rpc/rawtransaction.cpp
sipa,2018-07-04T00:33:45Z,Here you may want to have both `hex` and `asm`.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199983285,199983285,src/rpc/rawtransaction.cpp
sipa,2018-07-04T00:36:51Z,"`psbtxs.pop_front()` will do the same. Alternatively, you can write a loop like `for (auto it = std::next(psbtx.begin()); ++it; it !=psbtx.end()) { merged_psbt.Merge(*it); }`.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199983569,199983569,src/rpc/rawtransaction.cpp
sipa,2018-07-04T00:43:40Z,"These boolean expressions and the ones below are pretty hard to follow.\n\nWhat about first extracting the boolean values of the arguments, and then writing things in function of those?\n",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199984212,199984212,src/rpc/rawtransaction.cpp
sipa,2018-07-04T00:44:57Z,Style nit: else on the same line,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199984328,199984328,src/wallet/rpcwallet.cpp
achow101,2018-07-04T02:05:14Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199992289,199992289,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:05:20Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199992298,199992298,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:05:28Z,"Removed, that's a mistake",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199992310,199992310,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:05:33Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199992319,199992319,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:05:38Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199992326,199992326,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:05:42Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199992333,199992333,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:06:09Z,"`std::vector` doesn't have a `pop_front()`, so I used your other suggestion for the loop.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199992370,199992370,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:06:15Z,Changed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199992384,199992384,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:06:21Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199992393,199992393,src/wallet/rpcwallet.cpp
sipa,2018-07-04T02:11:01Z,"Now you have `[{""<p1>"":""<sig1>""},{""<p2>"":""<sig2>""},...]`. You can get rid of the internal objects too: `{""<p1>"":""<sig1>"",""<p2>"":""<sig2>"",...}`.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199992864,199992864,src/rpc/rawtransaction.cpp
sipa,2018-07-04T02:13:30Z,Not just recommended.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199993097,199993097,src/rpc/rawtransaction.cpp
sipa,2018-07-04T02:15:44Z,"This could be modeled as an object with the pubkey as key, and `{""master_fingerprint"":""..."",""path"":""...""}` as value.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199993329,199993329,src/rpc/rawtransaction.cpp
sipa,2018-07-04T02:20:43Z,"It would be very useful to add the fee of the transaction here, if known. Make sure there is a consistency check that non-witness utxo's txid matches the vin.prevout.hash.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199993761,199993761,src/rpc/rawtransaction.cpp
sipa,2018-07-04T02:24:28Z,Well perhaps don't say it implements a Finalizer unless it actually implements that :),https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199994098,199994098,src/rpc/rawtransaction.cpp
sipa,2018-07-04T02:25:32Z,That doesn't look like the output it's actually producing.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199994322,199994322,src/rpc/rawtransaction.cpp
sipa,2018-07-04T02:26:44Z,"The output looks like just a string, not an object.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199994450,199994450,src/rpc/rawtransaction.cpp
sipa,2018-07-04T02:27:02Z,Same here.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199994478,199994478,src/rpc/rawtransaction.cpp
sipa,2018-07-04T02:27:38Z,Style nit: `m_provider`.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199994562,199994562,src/script/sign.h
achow101,2018-07-04T02:52:24Z,Done.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199997044,199997044,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:52:32Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199997058,199997058,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:52:40Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199997068,199997068,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:53:23Z,Fixed here and elsewhere,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199997143,199997143,src/rpc/rawtransaction.cpp
achow101,2018-07-04T02:53:38Z,Fixed here and elsewhere,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199997166,199997166,src/rpc/rawtransaction.cpp
achow101,2018-07-04T03:16:53Z,Done. The consistency check occurs at deserialization time.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r199999207,199999207,src/rpc/rawtransaction.cpp
promag,2018-07-04T21:08:36Z,`> 3`,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200201430,200201430,src/wallet/rpcwallet.cpp
promag,2018-07-04T21:13:01Z,`[2]`?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200201761,200201761,src/wallet/rpcwallet.cpp
promag,2018-07-04T21:16:39Z,"Nit, could move this to a `ParseSigHashType()`? Like `ParseOutputType` and `ParseConfirmTarget`.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200202027,200202027,src/wallet/rpcwallet.cpp
promag,2018-07-04T21:17:51Z,"nit, just `complete`.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200202117,200202117,src/wallet/rpcwallet.cpp
promag,2018-07-04T21:22:09Z,Why lock `cs_main`? Locking could be in `FillPSBT`?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200202478,200202478,src/wallet/rpcwallet.cpp
promag,2018-07-04T21:23:33Z,"boolean? Drop `\""` in `sign`.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200202562,200202562,src/wallet/rpcwallet.cpp
promag,2018-07-04T21:25:03Z,"`""sighashtype""`?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200202663,200202663,src/wallet/rpcwallet.cpp
promag,2018-07-04T21:27:27Z,"Missing `{ ""walletprocesspsbt"", 1, ""sign"" }`?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200202834,200202834,src/rpc/client.cpp
promag,2018-07-04T21:28:45Z,Use find to avoid 2nd lookup below.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200202931,200202931,src/wallet/rpcwallet.cpp
araspitzu,2018-07-05T13:37:48Z,Perhaps i'm missing something but shouldn't we merge the unknowns from the output too? (as done in PSBTInput::Merge),https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200354449,200354449,src/script/sign.cpp
instagibbs,2018-07-05T20:55:30Z,micro-nit: period after key seems misplaced,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200487223,200487223,src/script/sign.h
instagibbs,2018-07-05T21:00:12Z,"this deserialized a single keypath, right?\n\nUpdate description, function name to something like `DeserializeAndAppendHDKeypath`, and rename `hd_keypaths` to `hd_keypath`.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200488395,200488395,src/script/sign.h
instagibbs,2018-07-05T21:02:25Z,micro-nit: per-input,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200488912,200488912,src/script/sign.h
achow101,2018-07-05T22:08:43Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200503394,200503394,src/wallet/rpcwallet.cpp
achow101,2018-07-05T22:08:54Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200503416,200503416,src/wallet/rpcwallet.cpp
achow101,2018-07-05T22:09:09Z,"Removed `cs_main`, moved to `FillPSBT`.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200503468,200503468,src/wallet/rpcwallet.cpp
achow101,2018-07-05T22:11:03Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200503791,200503791,src/wallet/rpcwallet.cpp
achow101,2018-07-05T22:11:09Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200503799,200503799,src/wallet/rpcwallet.cpp
achow101,2018-07-05T22:11:12Z,Added,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200503808,200503808,src/rpc/client.cpp
achow101,2018-07-05T22:11:17Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200503828,200503828,src/wallet/rpcwallet.cpp
achow101,2018-07-05T22:11:24Z,"Good catch, fixed",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200503847,200503847,src/script/sign.cpp
achow101,2018-07-05T22:33:41Z,Moved to a new helper function.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200507551,200507551,src/wallet/rpcwallet.cpp
araspitzu,2018-07-06T10:47:20Z,"I'm having some trouble matching this code to the spec, with the HD keypaths shouldn't we prefix the ""value"" (as in the key/value entry) with the fingerprint of the public key? I don't see where it's done here (and neither in 'DeserializeHDKeypaths').",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200617738,200617738,src/script/sign.h
achow101,2018-07-06T18:24:55Z,"Since the fingerprint is a 4 byte value, we store it with the keypaths as the first element of the `std::vector<uint32_t>`",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200734682,200734682,src/script/sign.h
sipa,2018-07-07T00:42:48Z,That doesn't look very witnessy.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200797064,200797064,test/functional/rpc_psbt.py
achow101,2018-07-07T00:57:23Z,Fixed. Also added tests for p2pkh and p2sh nested things.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200797566,200797566,test/functional/rpc_psbt.py
sipa,2018-07-07T23:52:06Z,"It seems you'll need to change the type to `UniValue::VOBJ` above. Calling `pushKV` on an array has no effect (and also doesn't assert/throw anything, it seems...).",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200825776,200825776,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T12:45:32Z,"Doesn't have to be addressed now, but I feel like this should be useful elsewhere too?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200988122,200988122,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T12:50:17Z,clarity nit: s/all UTXOs are present/all outputs are currently unspent/,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200989422,200989422,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T13:04:27Z,I'm not sure that this argument is needed. Who is going to use this?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200993595,200993595,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T13:15:44Z,"help didn't make it clear it will only return one or the other. Might explain why someone would want to turn ""extract"" off",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200997244,200997244,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T13:17:12Z,"mu-nit: BIP125-replaceable\n\nPerhaps the default should be true if the sequence values are compatible? It'd be messy to break API later.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200997677,200997677,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T13:20:53Z,"s/will be discarded/will be discarded but processing will continue/\n\nwhat's the default value?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200998753,200998753,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T13:22:20Z,default value?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r200999246,200999246,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T13:26:51Z,why not pass by reference if it's going to be there?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201000800,201000800,src/wallet/rpcwallet.h
instagibbs,2018-07-09T13:31:32Z,comma after sign?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201002334,201002334,src/wallet/rpcwallet.cpp
instagibbs,2018-07-09T13:32:55Z,change this to passing wallet by reference as well?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201002855,201002855,src/wallet/rpcwallet.cpp
sipa,2018-07-09T14:28:03Z,"No, it deserializes all keypaths for one input or one output.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201022307,201022307,src/script/sign.h
instagibbs,2018-07-09T14:30:44Z,"I deleted this comment a while back, github reviews thought it was too good I guess",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201023312,201023312,src/script/sign.h
sipa,2018-07-09T14:31:39Z,"That's not what it means. The fee can be reported whenever the UTXO information for each transaction input is present in the psbt (this information is generally added by Updater roles).\n\nIt's clearly confusing though, do you have a better way of formulating this?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201023601,201023601,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T14:37:27Z,"something like: ""The transaction fee paid if all UTXO slots have been filled in the PSBT""?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201025682,201025682,src/rpc/rawtransaction.cpp
achow101,2018-07-09T19:28:48Z,I think the help text is fairly clear that it only has an effect if the transaction is complete. Suggestions for better help text?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201120192,201120192,src/rpc/rawtransaction.cpp
achow101,2018-07-09T19:30:48Z,A lot of this is shared with `createrawtransaction` so changing this will also also cause `createrawtransaction`'s API to change. Having it be separate though means that there will be a lot of code duplication.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201120687,201120687,src/rpc/rawtransaction.cpp
achow101,2018-07-09T19:33:33Z,"There really isn't a default value for `iswitness`. Without it being specified, both witness and non-witness are tried. If it is specified, then if it is true, only witness is tried, and false only non-witness is tried.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201121361,201121361,src/rpc/rawtransaction.cpp
achow101,2018-07-09T19:34:11Z,Which?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201121529,201121529,src/wallet/rpcwallet.h
achow101,2018-07-09T19:35:18Z,"Why? It comes as a pointer, why not just pass the pointer around?",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201121838,201121838,src/wallet/rpcwallet.cpp
instagibbs,2018-07-09T19:35:35Z,`The base64-encoded partially signed transaction if network encoded transaction not extracted`,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201121901,201121901,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T19:36:15Z,"something like ""extract and return the complete transaction in normal network serialization instead of the PSBT."" in addition to my other suggestion in the return values section.\n\n",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201122082,201122082,src/rpc/rawtransaction.cpp
achow101,2018-07-09T19:36:20Z,It is there so that each role can be done separately instead of at the same time. It's useful for testing.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201122102,201122102,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T19:39:40Z,"was referring to pwallet, which you dispute as an improvement",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201122894,201122894,src/wallet/rpcwallet.h
instagibbs,2018-07-09T19:39:52Z,"ok, then please say that in the help",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201122929,201122929,src/rpc/rawtransaction.cpp
instagibbs,2018-07-09T19:40:51Z,Just not crazy about passing around pointers more than we have to.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201123180,201123180,src/wallet/rpcwallet.cpp
achow101,2018-07-09T20:12:36Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201131963,201131963,src/script/sign.h
achow101,2018-07-09T20:12:41Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201131981,201131981,src/script/sign.h
achow101,2018-07-09T20:13:16Z,Maybe? It doesn't seem useful outside of this context specifically since keypaths are stored as strings in the wallet currently.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201132125,201132125,src/rpc/rawtransaction.cpp
achow101,2018-07-09T20:13:22Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201132172,201132172,src/rpc/rawtransaction.cpp
achow101,2018-07-09T20:13:29Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201132203,201132203,src/rpc/rawtransaction.cpp
achow101,2018-07-09T20:13:38Z,Added default value,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201132236,201132236,src/rpc/rawtransaction.cpp
achow101,2018-07-09T20:13:43Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201132261,201132261,src/rpc/rawtransaction.cpp
achow101,2018-07-09T20:13:48Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201132280,201132280,src/wallet/rpcwallet.cpp
achow101,2018-07-09T20:14:02Z,Done (kind of),https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201132334,201132334,src/rpc/rawtransaction.cpp
achow101,2018-07-09T20:25:09Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201135298,201135298,src/rpc/rawtransaction.cpp
Sjors,2018-07-10T16:22:54Z,Nit: 2018,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201408039,201408039,test/functional/rpc_psbt.py
Sjors,2018-07-10T16:34:12Z,"SegWit is activated immediately in Regtest by default these days (`nStartTime ... ALWAYS_ACTIVE` ). If you change `setup_clean_chain = True` to `False`, you can leave out this `generate()` line completely.",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201411672,201411672,test/functional/rpc_psbt.py
Sjors,2018-07-10T16:51:21Z,Move to `test/functional/data/psbt.json`?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201417187,201417187,test/functional/rpc_psbt.py
achow101,2018-07-10T23:03:31Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201521967,201521967,test/functional/rpc_psbt.py
achow101,2018-07-10T23:03:36Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201521984,201521984,test/functional/rpc_psbt.py
achow101,2018-07-10T23:03:40Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r201521993,201521993,test/functional/rpc_psbt.py
nodech,2018-07-13T21:13:52Z,Does not `magic_sep` need to be `0xff` ?,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r202474322,202474322,src/script/sign.h
achow101,2018-07-13T21:27:57Z,Good catch. I have fixed this by adding 0xff to the magic bytes so it will be checked above.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r202477190,202477190,src/script/sign.h
sipa,2018-07-16T22:16:20Z,Typo: discarde,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r202842057,202842057,src/rpc/rawtransaction.cpp
sipa,2018-07-16T22:18:59Z,"This seems wrong. With the current code, if permitsigdata is false it will try both witness and no_witness (where it should only permit non-witness, I think?). Further, when iswitness is not specified, it will only try witness.\n\nI think it should be something like:\n\n```c++\nbool witness_specified = !request.params[2].isNull();\nbool iswitness = witness_specified ? request.params[2].get_b",https://github.com/bitcoin/bitcoin/pull/13557#discussion_r202842625,202842625,src/rpc/rawtransaction.cpp
sipa,2018-07-16T22:23:35Z,No inputs will be added.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r202843597,202843597,src/rpc/rawtransaction.cpp
sipa,2018-07-16T22:25:33Z,Nit: RPC documentation is being changed in unrelated wallet RPC commit.,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r202844097,202844097,src/rpc/rawtransaction.cpp
achow101,2018-07-16T23:07:54Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r202852273,202852273,src/rpc/rawtransaction.cpp
achow101,2018-07-16T23:08:38Z,Done,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r202852393,202852393,src/rpc/rawtransaction.cpp
achow101,2018-07-16T23:08:50Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r202852425,202852425,src/rpc/rawtransaction.cpp
achow101,2018-07-16T23:08:59Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13557#discussion_r202852450,202852450,src/rpc/rawtransaction.cpp
