[
  {
    "sha": "38d2054fe1201b8f275ac5729099bab94997f1f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGQyMDU0ZmUxMjAxYjhmMjc1YWM1NzI5MDk5YmFiOTQ5OTdmMWYz",
    "commit": {
      "author": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-11-02T17:45:09Z"
      },
      "committer": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-11-02T17:45:09Z"
      },
      "message": "converting \"bitcoin address\" to \"Bitcoin address\"",
      "tree": {
        "sha": "a58fecc9cedd3354ba8903cebf60344a81135225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a58fecc9cedd3354ba8903cebf60344a81135225"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38d2054fe1201b8f275ac5729099bab94997f1f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d2054fe1201b8f275ac5729099bab94997f1f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38d2054fe1201b8f275ac5729099bab94997f1f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d2054fe1201b8f275ac5729099bab94997f1f3/comments",
    "author": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fd8dff68369de497354574624b740f42175b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fd8dff68369de497354574624b740f42175b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fd8dff68369de497354574624b740f42175b1b"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 53,
      "deletions": 53
    },
    "files": [
      {
        "sha": "80b42bcd4c2ea17f426222e913231a9f3f1fb486",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -201,9 +201,9 @@ def run_test(self):\n \n         try:\n             self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': 'foobar'})\n-            raise AssertionError(\"Accepted invalid bitcoin address\")\n+            raise AssertionError(\"Accepted invalid Bitcoin address\")\n         except JSONRPCException as e:\n-            assert(\"changeAddress must be a valid bitcoin address\" in e.error['message'])\n+            assert(\"changeAddress must be a valid Bitcoin address\" in e.error['message'])\n \n \n         ############################################################"
      },
      {
        "sha": "ace0be1ec7e422f8a96b56acf30fc9eb1ee55530",
        "filename": "src/qt/bitcoinaddressvalidator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/bitcoinaddressvalidator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/bitcoinaddressvalidator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.h?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -20,7 +20,7 @@ class BitcoinAddressEntryValidator : public QValidator\n     State validate(QString &input, int &pos) const;\n };\n \n-/** Bitcoin address widget validator, checks for a valid bitcoin address.\n+/** Bitcoin address widget validator, checks for a valid Bitcoin address.\n  */\n class BitcoinAddressCheckValidator : public QValidator\n {"
      },
      {
        "sha": "91fd5fa4548628255998ba10434bd951ac32a8ba",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -699,7 +699,7 @@ void CoinControlDialog::updateView()\n             {\n                 sAddress = QString::fromStdString(CBitcoinAddress(outputAddress).ToString());\n \n-                // if listMode or change => show bitcoin address. In tree mode, address is not shown again for direct wallet address outputs\n+                // if listMode or change => show Bitcoin address. In tree mode, address is not shown again for direct wallet address outputs\n                 if (!treeMode || (!(sAddress == sWalletAddress)))\n                     itemOutput->setText(COLUMN_ADDRESS, sAddress);\n             }"
      },
      {
        "sha": "5c087d006b75c0956b6fe72b510106e0ccaa1c96",
        "filename": "src/qt/paymentrequest.proto",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/paymentrequest.proto",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/paymentrequest.proto",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequest.proto?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -12,7 +12,7 @@ package payments;\n option java_package = \"org.bitcoin.protocols.payments\";\n option java_outer_classname = \"Protos\";\n \n-// Generalized form of \"send payment to this/these bitcoin addresses\"\n+// Generalized form of \"send payment to this/these Bitcoin addresses\"\n message Output {\n \toptional uint64 amount = 1 [default = 0]; // amount is integer-number-of-satoshis\n \trequired bytes script = 2; // usually one of the standard Script forms"
      },
      {
        "sha": "9c9d473a199c61da518fc55fb6f66a64ea3229e7",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -563,7 +563,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n             addresses.append(QString::fromStdString(CBitcoinAddress(dest).ToString()));\n         }\n         else if (!recipient.authenticatedMerchant.isEmpty()) {\n-            // Unauthenticated payment requests to custom bitcoin addresses are not supported\n+            // Unauthenticated payment requests to custom Bitcoin addresses are not supported\n             // (there is no good way to tell the user where they are paying in a way they'd\n             // have a chance of understanding).\n             Q_EMIT message(tr(\"Payment request rejected\"),"
      },
      {
        "sha": "b7a4996f8c3279ecd832e8032afa44c365c10c0a",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -37,9 +37,9 @@ SendCoinsEntry::SendCoinsEntry(const PlatformStyle *_platformStyle, QWidget *par\n     ui->addAsLabel->setPlaceholderText(tr(\"Enter a label for this address to add it to your address book\"));\n #endif\n \n-    // normal bitcoin address field\n+    // normal Bitcoin address field\n     GUIUtil::setupAddressWidget(ui->payTo, this);\n-    // just a label for displaying bitcoin address(es)\n+    // just a label for displaying Bitcoin address(es)\n     ui->payTo_is->setFont(GUIUtil::fixedPitchFont());\n \n     // Connect signals"
      },
      {
        "sha": "a004ba2fafbf8e395d86e234e023f8e924d2c605",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -233,7 +233,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             total += subtotal;\n         }\n         else\n-        {   // User-entered bitcoin address / amount:\n+        {   // User-entered Bitcoin address / amount:\n             if(!validateAddress(rcp.address))\n             {\n                 return InvalidAddress;"
      },
      {
        "sha": "d0644fe34655f3155dff3e41d01d8d0a31335b6c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -874,8 +874,8 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"     \\\"hex\\\" : \\\"hex\\\",        (string) \\n\"\n             \"     \\\"reqSigs\\\" : n,          (numeric) Number of required signatures\\n\"\n             \"     \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n-            \"     \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n-            \"        \\\"bitcoinaddress\\\"     (string) bitcoin address\\n\"\n+            \"     \\\"addresses\\\" : [          (array of string) array of Bitcoin addresses\\n\"\n+            \"        \\\"bitcoinaddress\\\"     (string) Bitcoin address\\n\"\n             \"        ,...\\n\"\n             \"     ]\\n\"\n             \"  },\\n\"\n@@ -1151,7 +1151,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     /*\n-     * Idea:  the set of chain tips is chainActive.tip, plus orphan blocks which do not have another orphan building off of them. \n+     * Idea:  the set of chain tips is chainActive.tip, plus orphan blocks which do not have another orphan building off of them.\n      * Algorithm:\n      *  - Make one pass through mapBlockIndex, picking out the orphan blocks, and also storing a set of the orphan block's pprev pointers.\n      *  - Iterate through the orphan blocks. If the block isn't pointed to by another orphan, it is a chain tip."
      },
      {
        "sha": "01045f49f630c33b9938ab3a735474cd42b99e1a",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -153,13 +153,13 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"validateaddress \\\"bitcoinaddress\\\"\\n\"\n-            \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"\\nReturn information about the given Bitcoin address.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"bitcoinaddress\\\"     (string, required) The Bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"bitcoinaddress\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"bitcoinaddress\\\", (string) The Bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n             \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n             \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n@@ -288,9 +288,9 @@ UniValue createmultisig(const JSONRPCRequest& request)\n \n             \"\\nArguments:\\n\"\n             \"1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n-            \"2. \\\"keys\\\"       (string, required) A json array of keys which are bitcoin addresses or hex-encoded public keys\\n\"\n+            \"2. \\\"keys\\\"       (string, required) A json array of keys which are Bitcoin addresses or hex-encoded public keys\\n\"\n             \"     [\\n\"\n-            \"       \\\"key\\\"    (string) bitcoin address or hex-encoded public key\\n\"\n+            \"       \\\"key\\\"    (string) Bitcoin address or hex-encoded public key\\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n \n@@ -328,7 +328,7 @@ UniValue verifymessage(const JSONRPCRequest& request)\n             \"verifymessage \\\"bitcoinaddress\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n             \"\\nVerify a signed message\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to use for the signature.\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The Bitcoin address to use for the signature.\\n\"\n             \"2. \\\"signature\\\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\\n\"\n             \"3. \\\"message\\\"         (string, required) The message that was signed.\\n\"\n             \"\\nResult:\\n\""
      },
      {
        "sha": "e56adb36d724c54e0fb5cdf7593784b0367dce34",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -177,7 +177,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n             \"         \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n             \"         \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n             \"         \\\"addresses\\\" : [           (json array of string)\\n\"\n-            \"           \\\"bitcoinaddress\\\"        (string) bitcoin address\\n\"\n+            \"           \\\"bitcoinaddress\\\"        (string) Bitcoin address\\n\"\n             \"           ,...\\n\"\n             \"         ]\\n\"\n             \"       }\\n\"\n@@ -358,7 +358,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             \"     ]\\n\"\n             \"2. \\\"outputs\\\"             (string, required) a json object with outputs\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\": x.xxx   (numeric or string, required) The key is the bitcoin address, the numeric value (can be string) is the \" + CURRENCY_UNIT + \" amount\\n\"\n+            \"      \\\"address\\\": x.xxx   (numeric or string, required) The key is the Bitcoin address, the numeric value (can be string) is the \" + CURRENCY_UNIT + \" amount\\n\"\n             \"      \\\"data\\\": \\\"hex\\\",     (string, required) The key is \\\"data\\\", the value is hex encoded data\\n\"\n             \"      ...\\n\"\n             \"    }\\n\"\n@@ -489,7 +489,7 @@ UniValue decoderawtransaction(const JSONRPCRequest& request)\n             \"         \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n             \"         \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n             \"         \\\"addresses\\\" : [           (json array of string)\\n\"\n-            \"           \\\"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\\\"   (string) bitcoin address\\n\"\n+            \"           \\\"12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc\\\"   (string) Bitcoin address\\n\"\n             \"           ,...\\n\"\n             \"         ]\\n\"\n             \"       }\\n\"\n@@ -532,7 +532,7 @@ UniValue decodescript(const JSONRPCRequest& request)\n             \"  \\\"type\\\":\\\"type\\\", (string) The output type\\n\"\n             \"  \\\"reqSigs\\\": n,    (numeric) The required signatures\\n\"\n             \"  \\\"addresses\\\": [   (json array of string)\\n\"\n-            \"     \\\"address\\\"     (string) bitcoin address\\n\"\n+            \"     \\\"address\\\"     (string) Bitcoin address\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n             \"  \\\"p2sh\\\",\\\"address\\\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).\\n\""
      },
      {
        "sha": "9a97574b4f856ff84d50cf620b2845522a5d1611",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -66,7 +66,7 @@ std::string DecodeDumpString(const std::string &str) {\n     for (unsigned int pos = 0; pos < str.length(); pos++) {\n         unsigned char c = str[pos];\n         if (c == '%' && pos+2 < str.length()) {\n-            c = (((str[pos+1]>>6)*9+((str[pos+1]-'0')&15)) << 4) | \n+            c = (((str[pos+1]>>6)*9+((str[pos+1]-'0')&15)) << 4) |\n                 ((str[pos+2]>>6)*9+((str[pos+2]-'0')&15));\n             pos += 2;\n         }\n@@ -79,7 +79,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n-    \n+\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n@@ -189,7 +189,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n-    \n+\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n@@ -410,7 +410,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n-    \n+\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"importwallet \\\"filename\\\"\\n\"\n@@ -517,14 +517,14 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n-    \n+\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"dumpprivkey \\\"bitcoinaddress\\\"\\n\"\n             \"\\nReveals the private key corresponding to 'bitcoinaddress'.\\n\"\n             \"Then the importprivkey can be used with this output\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"   (string, required) The bitcoin address for the private key\\n\"\n+            \"1. \\\"bitcoinaddress\\\"   (string, required) The Bitcoin address for the private key\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"key\\\"                (string) The private key\\n\"\n             \"\\nExamples:\\n\"\n@@ -555,7 +555,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n-    \n+\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\"\n@@ -596,7 +596,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n     file << \"\\n\";\n \n-    // add the base58check encoded extended master if the wallet uses HD \n+    // add the base58check encoded extended master if the wallet uses HD\n     CKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull())\n     {"
      },
      {
        "sha": "f6750a1f52772e1bab32af55336c0f8b90df5c93",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d2054fe1201b8f275ac5729099bab94997f1f3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d2054fe1201b8f275ac5729099bab94997f1f3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=38d2054fe1201b8f275ac5729099bab94997f1f3",
        "patch": "@@ -116,7 +116,7 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"bitcoinaddress\\\"    (string) The new bitcoin address\\n\"\n+            \"\\\"bitcoinaddress\\\"    (string) The new Bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getnewaddress\", \"\")\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n@@ -166,7 +166,7 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"       (string, required) The account name for the address. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"bitcoinaddress\\\"   (string) The account bitcoin address\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The account Bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getaccountaddress\", \"\")\n             + HelpExampleCli(\"getaccountaddress\", \"\\\"\\\"\")\n@@ -231,7 +231,7 @@ UniValue setaccount(const JSONRPCRequest& request)\n             \"setaccount \\\"bitcoinaddress\\\" \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Sets the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an account.\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The Bitcoin address to be associated with an account.\\n\"\n             \"2. \\\"account\\\"         (string, required) The account to assign the address to.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n@@ -277,7 +277,7 @@ UniValue getaccount(const JSONRPCRequest& request)\n             \"getaccount \\\"bitcoinaddress\\\"\\n\"\n             \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for account lookup.\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The Bitcoin address for account lookup.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"accountname\\\"        (string) the account address\\n\"\n             \"\\nExamples:\\n\"\n@@ -312,7 +312,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n             \"1. \\\"account\\\"  (string, required) The account name.\\n\"\n             \"\\nResult:\\n\"\n             \"[                     (json array of string)\\n\"\n-            \"  \\\"bitcoinaddress\\\"  (string) a bitcoin address associated with the given account\\n\"\n+            \"  \\\"bitcoinaddress\\\"  (string) a Bitcoin address associated with the given account\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n             \"\\nExamples:\\n\"\n@@ -384,7 +384,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"\\nSend an amount to a given address.\\n\"\n             + HelpRequiringPassphrase() +\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to send to.\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The Bitcoin address to send to.\\n\"\n             \"2. \\\"amount\\\"      (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n             \"3. \\\"comment\\\"     (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\\n\"\n@@ -446,7 +446,7 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n             \"[\\n\"\n             \"  [\\n\"\n             \"    [\\n\"\n-            \"      \\\"bitcoinaddress\\\",     (string) The bitcoin address\\n\"\n+            \"      \\\"bitcoinaddress\\\",     (string) The Bitcoin address\\n\"\n             \"      amount,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"account\\\"             (string, optional) The account (DEPRECATED)\\n\"\n             \"    ]\\n\"\n@@ -493,7 +493,7 @@ UniValue signmessage(const JSONRPCRequest& request)\n             \"\\nSign a message with the private key of an address\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to use for the private key.\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The Bitcoin address to use for the private key.\\n\"\n             \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n@@ -548,7 +548,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             \"getreceivedbyaddress \\\"bitcoinaddress\\\" ( minconf )\\n\"\n             \"\\nReturns the total amount received by the given bitcoinaddress in transactions with at least minconf confirmations.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for transactions.\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The Bitcoin address for transactions.\\n\"\n             \"2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n             \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n@@ -799,11 +799,11 @@ UniValue sendfrom(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n         throw runtime_error(\n             \"sendfrom \\\"fromaccount\\\" \\\"tobitcoinaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n-            \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n+            \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a Bitcoin address.\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n-            \"2. \\\"tobitcoinaddress\\\"  (string, required) The bitcoin address to send funds to.\\n\"\n+            \"2. \\\"tobitcoinaddress\\\"  (string, required) The Bitcoin address to send funds to.\\n\"\n             \"3. amount                (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" (transaction fee is added on top).\\n\"\n             \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n             \"5. \\\"comment\\\"           (string, optional) A comment used to store what the transaction is for. \\n\"\n@@ -869,7 +869,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n             \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\\n\"\n+            \"      \\\"address\\\":amount   (numeric or string) The Bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\\n\"\n             \"      ,...\\n\"\n             \"    }\\n\"\n             \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n@@ -989,15 +989,15 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n \n             \"\\nArguments:\\n\"\n             \"1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n-            \"2. \\\"keysobject\\\"   (string, required) A json array of bitcoin addresses or hex-encoded public keys\\n\"\n+            \"2. \\\"keysobject\\\"   (string, required) A json array of Bitcoin addresses or hex-encoded public keys\\n\"\n             \"     [\\n\"\n-            \"       \\\"address\\\"  (string) bitcoin address or hex-encoded public key\\n\"\n+            \"       \\\"address\\\"  (string) Bitcoin address or hex-encoded public key\\n\"\n             \"       ...,\\n\"\n             \"     ]\\n\"\n             \"3. \\\"account\\\"      (string, optional) DEPRECATED. An account to assign the addresses to.\\n\"\n \n             \"\\nResult:\\n\"\n-            \"\\\"bitcoinaddress\\\"  (string) A bitcoin address associated with the keys.\\n\"\n+            \"\\\"bitcoinaddress\\\"  (string) A Bitcoin address associated with the keys.\\n\"\n \n             \"\\nExamples:\\n\"\n             \"\\nAdd a multisig address from 2 addresses\\n\"\n@@ -1439,7 +1439,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             \"  {\\n\"\n             \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. \\n\"\n             \"                                                It will be \\\"\\\" for the default account.\\n\"\n-            \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for \\n\"\n+            \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The Bitcoin address of the transaction. Not present for \\n\"\n             \"                                                move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive|move\\\", (string) The transaction category. 'move' is a local (off blockchain)\\n\"\n             \"                                                transaction between accounts, and not associated with an address,\\n\"\n@@ -1643,7 +1643,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n             \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n-            \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n+            \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The Bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n             \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n             \"                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\\n\"\n@@ -1745,7 +1745,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             \"  \\\"details\\\" : [\\n\"\n             \"    {\\n\"\n             \"      \\\"account\\\" : \\\"accountname\\\",  (string) DEPRECATED. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n-            \"      \\\"address\\\" : \\\"bitcoinaddress\\\",   (string) The bitcoin address involved in the transaction\\n\"\n+            \"      \\\"address\\\" : \\\"bitcoinaddress\\\",   (string) The Bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n             \"      \\\"amount\\\" : x.xxx,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"label\\\" : \\\"label\\\",              (string) A comment for the address/transaction, if any\\n\"\n@@ -2358,17 +2358,17 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"\\nArguments:\\n\"\n             \"1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\\n\"\n             \"2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\\n\"\n-            \"3. \\\"addresses\\\"    (string) A json array of bitcoin addresses to filter\\n\"\n+            \"3. \\\"addresses\\\"    (string) A json array of Bitcoin addresses to filter\\n\"\n             \"    [\\n\"\n-            \"      \\\"address\\\"   (string) bitcoin address\\n\"\n+            \"      \\\"address\\\"   (string) Bitcoin address\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n             \"\\nResult\\n\"\n             \"[                   (array of json object)\\n\"\n             \"  {\\n\"\n             \"    \\\"txid\\\" : \\\"txid\\\",          (string) the transaction id \\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"address\\\" : \\\"address\\\",    (string) the bitcoin address\\n\"\n+            \"    \\\"address\\\" : \\\"address\\\",    (string) the Bitcoin address\\n\"\n             \"    \\\"account\\\" : \\\"account\\\",    (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n@@ -2476,7 +2476,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"1. \\\"hexstring\\\"           (string, required) The hex string of the raw transaction\\n\"\n                             \"2. options               (object, optional)\\n\"\n                             \"   {\\n\"\n-                            \"     \\\"changeAddress\\\"     (string, optional, default pool address) The bitcoin address to receive the change\\n\"\n+                            \"     \\\"changeAddress\\\"     (string, optional, default pool address) The Bitcoin address to receive the change\\n\"\n                             \"     \\\"changePosition\\\"    (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"   (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"      (boolean, optional, default false) Lock selected unspent outputs\\n\"\n@@ -2534,7 +2534,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             CBitcoinAddress address(options[\"changeAddress\"].get_str());\n \n             if (!address.IsValid())\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"changeAddress must be a valid bitcoin address\");\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"changeAddress must be a valid Bitcoin address\");\n \n             changeAddress = address.Get();\n         }"
      }
    ]
  }
]