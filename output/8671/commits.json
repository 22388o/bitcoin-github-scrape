[
  {
    "sha": "f71d4a3786611d564e4c239099501daee989b170",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzFkNGEzNzg2NjExZDU2NGU0YzIzOTA5OTUwMWRhZWU5ODliMTcw",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-09-06T20:19:25Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-09-06T20:19:25Z"
      },
      "message": "Minimal fix to slow prevector tests as stopgap measure",
      "tree": {
        "sha": "cd55014718d5ce02aeeabbb8965a62e9dcde1874",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd55014718d5ce02aeeabbb8965a62e9dcde1874"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f71d4a3786611d564e4c239099501daee989b170",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f71d4a3786611d564e4c239099501daee989b170",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f71d4a3786611d564e4c239099501daee989b170",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f71d4a3786611d564e4c239099501daee989b170/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ea44405e76fadb6459e8913e708bf5f39cbf4c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ea44405e76fadb6459e8913e708bf5f39cbf4c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ea44405e76fadb6459e8913e708bf5f39cbf4c7"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 43,
      "deletions": 19
    },
    "files": [
      {
        "sha": "b8c45ca564dc96b2a86cedfedfe4b39d67e9680d",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 19,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f71d4a3786611d564e4c239099501daee989b170/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f71d4a3786611d564e4c239099501daee989b170/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=f71d4a3786611d564e4c239099501daee989b170",
        "patch": "@@ -26,57 +26,70 @@ class prevector_tester {\n     pretype pre_vector_alt;\n \n     typedef typename pretype::size_type Size;\n+    bool passed = true;\n+    uint32_t insecure_rand_Rz_cache;\n+    uint32_t insecure_rand_Rw_cache;\n \n+\n+    template <typename A, typename B>\n+        void local_check_equal(A a, B b)\n+        {\n+            local_check(a == b);\n+        }\n+    void local_check(bool b) \n+    {\n+        passed &= b;\n+    }\n     void test() {\n         const pretype& const_pre_vector = pre_vector;\n-        BOOST_CHECK_EQUAL(real_vector.size(), pre_vector.size());\n-        BOOST_CHECK_EQUAL(real_vector.empty(), pre_vector.empty());\n+        local_check_equal(real_vector.size(), pre_vector.size());\n+        local_check_equal(real_vector.empty(), pre_vector.empty());\n         for (Size s = 0; s < real_vector.size(); s++) {\n-             BOOST_CHECK(real_vector[s] == pre_vector[s]);\n-             BOOST_CHECK(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n-             BOOST_CHECK(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n-             BOOST_CHECK(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+             local_check(real_vector[s] == pre_vector[s]);\n+             local_check(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+             local_check(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+             local_check(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n         }\n-        // BOOST_CHECK(realtype(pre_vector) == real_vector);\n-        BOOST_CHECK(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n-        BOOST_CHECK(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n+        // local_check(realtype(pre_vector) == real_vector);\n+        local_check(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n+        local_check(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n         size_t pos = 0;\n         BOOST_FOREACH(const T& v, pre_vector) {\n-             BOOST_CHECK(v == real_vector[pos++]);\n+             local_check(v == real_vector[pos++]);\n         }\n         BOOST_REVERSE_FOREACH(const T& v, pre_vector) {\n-             BOOST_CHECK(v == real_vector[--pos]);\n+             local_check(v == real_vector[--pos]);\n         }\n         BOOST_FOREACH(const T& v, const_pre_vector) {\n-             BOOST_CHECK(v == real_vector[pos++]);\n+             local_check(v == real_vector[pos++]);\n         }\n         BOOST_REVERSE_FOREACH(const T& v, const_pre_vector) {\n-             BOOST_CHECK(v == real_vector[--pos]);\n+             local_check(v == real_vector[--pos]);\n         }\n         CDataStream ss1(SER_DISK, 0);\n         CDataStream ss2(SER_DISK, 0);\n         ss1 << real_vector;\n         ss2 << pre_vector;\n-        BOOST_CHECK_EQUAL(ss1.size(), ss2.size());\n+        local_check_equal(ss1.size(), ss2.size());\n         for (Size s = 0; s < ss1.size(); s++) {\n-            BOOST_CHECK_EQUAL(ss1[s], ss2[s]);\n+            local_check_equal(ss1[s], ss2[s]);\n         }\n     }\n \n public:\n     void resize(Size s) {\n         real_vector.resize(s);\n-        BOOST_CHECK_EQUAL(real_vector.size(), s);\n+        local_check_equal(real_vector.size(), s);\n         pre_vector.resize(s);\n-        BOOST_CHECK_EQUAL(pre_vector.size(), s);\n+        local_check_equal(pre_vector.size(), s);\n         test();\n     }\n \n     void reserve(Size s) {\n         real_vector.reserve(s);\n-        BOOST_CHECK(real_vector.capacity() >= s);\n+        local_check(real_vector.capacity() >= s);\n         pre_vector.reserve(s);\n-        BOOST_CHECK(pre_vector.capacity() >= s);\n+        local_check(pre_vector.capacity() >= s);\n         test();\n     }\n \n@@ -157,6 +170,17 @@ class prevector_tester {\n         pre_vector.swap(pre_vector_alt);\n         test();\n     }\n+    ~prevector_tester() {\n+        BOOST_CHECK_MESSAGE(passed, \"insecure_rand_Rz: \" \n+                << insecure_rand_Rz_cache \n+                << \", insecure_rand_Rw: \"\n+                << insecure_rand_Rw_cache);\n+    }\n+    prevector_tester() {\n+        seed_insecure_rand();\n+        insecure_rand_Rz_cache = insecure_rand_Rz;\n+        insecure_rand_Rw_cache = insecure_rand_Rw;\n+    }\n };\n \n BOOST_AUTO_TEST_CASE(PrevectorTestInt)"
      }
    ]
  }
]