icota,2020-09-05 13:12:33,"tACK https://github.com/bitcoin/bitcoin/pull/19882/commits/6315002a359f9f6457926dd039e968a89418ad33\n\nI can confirm this fixes OSX cross-compilation issues for https://github.com/icota/bitcoin/commit/683710e072eb90296ae5a57f53bce7cac799fc41",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-687609534,687609534,
DrahtBot,2020-09-19 13:54:55,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22283](https://github.com/bitcoin/bitcoin/pull/22283) (build: Replace $(AT) with .SILENT by dgoncharov)\n* [#22126](http",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-695216435,695216435,
hebasto,2020-09-21 08:12:41,"From #bitcoin-builds IRC [meeting](gnusha.org/bitcoin-builds/2020-09-16.log):\n> \<cfields> hebasto: hmm, that looks reasonable. Will review and ACK/NACK.\n> \<dongcarl> I'm confused as to why this changes anything\n> \<cfields> I tried to avoid exporting as much as possible to avoid affecting sub-shells, but I think doing PATH like that should be fine.\n> \<dongcarl> Oh I see.\n> \<hebasto> ",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-695968313,695968313,
dongcarl,2020-09-22 15:28:57,"I'm wondering if we can make this more generic, by keeping the `$(1)_{config,build,stage}_env` variables, and doing `export $$($(1)_config_env)` in `$($(1)_configured)` and friends. What do you think?",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-696796529,696796529,
hebasto,2020-09-22 15:32:39,"@dongcarl \n> I'm wondering if we can make this more generic, by keeping the `$(1)_{config,build,stage}_env` variables, and doing `export $$($(1)_config_env)` in `$($(1)_configured)` and friends. What do you think?\n\nI suppose that only $PATH variable is required to be exported from within make to the shell environment.\nhttps://www.gnu.org/software/make/manual/make.html#Variables_002fRecursi",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-696798793,696798793,
dongcarl,2020-09-22 15:36:46,"@hebasto I'm not quite sure what you mean, we would want things like `PKG_CONFIG_LIBDIR`, `PKG_CONFIG_PATH`, and `CMAKE_MODULE_PATH` to also be set for all commands specified in `$(1)_config_cmds` no?",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-696801173,696801173,
hebasto,2020-09-22 15:53:43,"@dongcarl \n> @hebasto I'm not quite sure what you mean, we would want things like `PKG_CONFIG_LIBDIR`, `PKG_CONFIG_PATH`, and `CMAKE_MODULE_PATH` to also be set for all commands specified in `$(1)_config_cmds` no?\n\nCorrect. `$(1)_config_cmds` does not use `MAKE` variable, therefore all required variables should be exported explicitly.\nDo you want me update this pull in a more generic way?",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-696811120,696811120,
dongcarl,2020-09-22 15:55:10,@hebasto Yup! Let's do it in a more generic way. We can also get rid of the `$($(1)_build_env) ` prefix in all those recipe calls :-),https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-696811983,696811983,
hebasto,2020-09-24 06:25:08,"Updated 6315002a359f9f6457926dd039e968a89418ad33 -> 1194739baef62e15c1e600fa8839e31fa98e324c ([pr19882.01](https://github.com/hebasto/bitcoin/commits/pr19882.01) -> [pr19882.02](https://github.com/hebasto/bitcoin/commits/pr19882.02), [diff](https://github.com/hebasto/bitcoin/compare/pr19882.01..pr19882.02)):\n\n- rebased\n\n- addressed @dongcarl's comment:\n> I'm wondering if we can make this",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-698140916,698140916,
luke-jr,2020-10-24 14:52:28,">     <cfields> dongcarl: vars don't get re-exported to subshells when set like ""FOO=1 ./bar""\n\nBut... they're supposed to...?",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-715926072,715926072,
BlockMechanic,2020-12-09 07:43:51,This does not seem to work for QtDeclarative(QtQml & QtQuick) and QtQuickControls2. Has anyone successfully added and tested the complete dependency chain to enable https://github.com/bitcoin/bitcoin/pull/16883 static dependency builds?,https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-741595969,741595969,
hebasto,2020-12-10 13:09:02,"@BlockMechanic \n> This does not seem to work for QtDeclarative(QtQml & QtQuick) and QtQuickControls2.\n\nWhat issues or errors have you encountered with this PR?\n\n> Has anyone successfully added and tested the complete dependency chain to enable #16883 static dependency builds?\n\nI think @icota has (https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-687609534). And, of course, m",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-742510781,742510781,
BlockMechanic,2020-12-10 13:23:28,"> @BlockMechanic\n> \n> > This does not seem to work for QtDeclarative(QtQml & QtQuick) and QtQuickControls2.\n> \n> What issues or errors have you encountered with this PR?\n> \n> > Has anyone successfully added and tested the complete dependency chain to enable #16883 static dependency builds?\n> \n> I think @icota has ([#19882 (comment)](https://github.com/bitcoin/bitcoin/pull/19882#iss",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-742518453,742518453,
hebasto,2020-12-10 13:37:57,"@BlockMechanic \n> Yeah ,i tested it myself, it does not work for _ALL_ Qt modules, only some. It definitely does not work for QtQuickControls2\n\nWhat issues or errors have you encountered? Maybe an excerpt from the build log?",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-742525920,742525920,
hebasto,2020-12-10 18:21:12,"@fanquake if this commit could be useful for #20504, feel free to cherry-pick it.\n\nClosing, as the initial task of this pull remains unsolved (thanks to @BlockMechanic for pointing it out).",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-742704352,742704352,
hebasto,2021-06-16 19:17:46,"@BlockMechanic \n> This does not seem to work for QtDeclarative(QtQml & QtQuick) and QtQuickControls2. Has anyone successfully added and tested the complete dependency chain to enable #16883 static dependency builds?\n\n> Yeah ,i tested it myself, it does not work for _ALL_ Qt modules, only some. It definitely does not work for QtQuickControls2\n\nIt works for QtDeclarative(QtQml & QtQuick) a",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-862647582,862647582,
hebasto,2021-06-16 19:26:08,"@icota @dongcarl @BlockMechanic @fanquake \n\nReopened as it is still required (see #20641), and rebased 1194739baef62e15c1e600fa8839e31fa98e324c -> 9a3194cd666b390bc4c520f8291ab2b673061cae ([pr19882.02](https://github.com/hebasto/bitcoin/commits/pr19882.02) -> [pr19882.03](https://github.com/hebasto/bitcoin/commits/pr19882.03)).",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-862652765,862652765,
dongcarl,2021-08-12 17:25:20,"We talked about this offline a bit, @theuni here's a demo of how it's broken right now: https://github.com/dongcarl/bitcoin/commit/e233c6d1e96ed35489c6be37f07bd01546083b9e",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-897823584,897823584,
hebasto,2021-08-12 19:36:16,"After today's discussion with @theuni and @dongcarl the less invasive alternative solution, which was suggested by @theuni, actually fixes the initial bug described in the PR description:\n```diff\n--- a/depends/packages/qt.mk\n+++ b/depends/packages/qt.mk\n@@ -258,6 +258,7 @@ define $(package)_build_cmds\n endef\n \n define $(package)_stage_cmds\n+  export PATH && \\n   $(MAKE) -C qtbase",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-897914367,897914367,
dongcarl,2021-08-16 16:54:49,"Opened #22719, you can close this one if you think it appropriate!",https://github.com/bitcoin/bitcoin/pull/19882#issuecomment-899663693,899663693,
