jtimon,2018-01-12T21:55:44Z,Modified so that savemempool keeps working when -persistmempool=0 as discussed.,https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-357365395,357365395,
jtimon,2018-01-15T21:09:35Z,"I guess starting the rpc server only after the mempool is loaded is another solution, but I'm not sure it is better.\nUnified the 2 bool globals and separated the error message.\n",https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-357789693,357789693,
MarcoFalke,2018-01-17T00:26:48Z,utACK 5b80af6322036c141ffce8fb7f10f5d40b8bc0f0 (didn't look at tests),https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-358153572,358153572,
MarcoFalke,2018-01-21T21:54:24Z,Test takes 7-8 Minutes on travis. Should be fixed before merge.,https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-359284422,359284422,
MarcoFalke,2018-01-21T21:56:09Z,Test is failing for me locally. You might as well leave out the test and ask for some Tested ACKs instead.,https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-359284581,359284581,
jtimon,2018-01-23T02:22:12Z,"@MarcoFalke Sure, I'm happy to leave out the test if I get some tested acks. It's an edge case anyway and seems expensive to test this way, filling the mempool enough so that the loading takes long enough to get the error (plus that varies with the machine and machine load [this seems close to the minimum in my machine but it's not enough on yours and it's too much on travis]).  \nAdditionally it",https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-359651893,359651893,
jtimon,2018-01-31T22:09:20Z,Needed rebase,https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-362087755,362087755,
MarcoFalke,2018-01-31T22:17:10Z,"I am guessing you wouldn't have to rebase if you just dropped the test commit. Since I am going to NACK on merging the test commit for the reasons provided above, you might as well remove it.",https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-362089773,362089773,
jtimon,2018-01-31T22:24:17Z,"Yes, I'm also for removing it. I was just waiting for more people to agree with us and some tested ACKs as you said.\n\nEDIT: but, no, it needed rebase and not for the tests, new code close to the one I was changing was changed in https://github.com/bitcoin/bitcoin/pull/12266/files#diff-c865a8939105e6350a50af02766291b7R204",https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-362091549,362091549,
greenaddress,2018-02-04T10:37:41Z,"> BTW, Should the RPC server start after the mempool is loaded?\n\nSeems to me this issue is not just about saving mempool but also about any RPC that interacts with the mempool like fetching raw transactions and so on - thus I also think it may be a good idea to not start the rpc server until the service is up and loaded the mempool - am I missing something?",https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-362897215,362897215,
MarcoFalke,2018-02-04T17:51:14Z,@greenaddress Loading the mempool takes several minutes or hours (c.f. https://github.com/bitcoin/bitcoin/issues/12106#issuecomment-355815732).,https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-362925461,362925461,
jtimon,2018-02-04T18:19:03Z,"@greenaddress Other calls interacting with the mempool, already give their errors asociated to the mempool not being fully loaded from disk (or don't need to give errors at all). getrawmempool, for example, starts returning an empty list and then more items as the mempool is loaded. getmempoolentry will give you an error if you ask for a tx that has not been loaded yet.\nThis is simply to solve t",https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-362927405,362927405,
jtimon,2018-02-08T21:26:08Z,Test removed,https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-364253421,364253421,
MarcoFalke,2018-02-08T21:29:47Z,re-utACK ab8329601ceba739d5ea86f2713216659153dd25,https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-364254397,364254397,
jtimon,2018-02-21T04:42:38Z,"Rebased and added several commits inspired by @promag 's last suggestion but without looking much at WalletRescanReserver::reserver() and trying to do things with atomic booleans in mempool instead.\n\nWe can squash, leave for later PRs or reject forever each of the newly proposed commits. \n\nI wish I could go as far as s/LoadMempool(/mempool.Load(/ and s/DumpMempool(/mempool.Dump(/ , moving ",https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-367211881,367211881,
promag,2018-02-21T10:42:12Z,"> without looking much at WalletRescanReserver::reserver() and trying to do things with atomic booleans in mempool instead.\n\nAny reason to do differently?\n\nNot sure about representing the state with 2 atomic booleans. Will review later.",https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-367285094,367285094,
jtimon,2018-02-28T04:33:46Z,"@promag Yeah, sorry for pushing a half-baked thought. Please, let me come back to this again before you review it, perhaps I can convince myself it doesn't make sense and I save you some time.\n\nEDIT: Or perhaps we can just leave it as it previously was and leave your request for a following PR, but I think it makes a lot of sense and it shouldn't be that hard if I hadn't tried to simplify the ",https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-369118640,369118640,
MarcoFalke,2018-03-19T00:42:57Z,What is the status of this? Seems stale and can be closed?,https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-374071778,374071778,
jtimon,2018-03-22T09:25:00Z,"I'm sorry @MarcoFalke IIRC the status is that the first commit has been around for long and tested by myself many times (but I'm trusting my rebases on the same ting now), but then after @promag 's review and test (he gave a tested ack for the first commit), I got very excited about a suggestion he made to upgrade this PR to fix more related things. I think he is totally right in his suggestion of",https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-375231140,375231140,
promag,2018-03-22T11:12:23Z,I'm fine with @jtimon suggestion to move the fix forward. I can then submit a PR to improve concurrency.,https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-375267390,375267390,
jtimon,2018-03-29T04:30:04Z,"I'm assuming an agreement from @MarcoFalke 's lack of response.\nJust in case, the branch that is not tested and that is trying to solve @promag 's very legitimate concern is in https://github.com/jtimon/bitcoin/tree/b16-bugfix-savemempool-extend. I will review or at a minimum test his more reasonable future proposal. But I tried to make it in an unorthodox way I would like to study more than I k",https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-377118065,377118065,
laanwj,2018-03-29T22:25:56Z,utACK cb1e319,https://github.com/bitcoin/bitcoin/pull/12172#issuecomment-377391294,377391294,
instagibbs,2018-01-12T21:21:14Z,"this also cannot complete when `-persistmempool` is false, yes? Might want to add that to RPC notes, or set it to true always if persist is false.",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161328064,161328064,src/rpc/blockchain.cpp
instagibbs,2018-01-12T21:24:55Z,is this test essentially racing the mempool acceptance? ,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161328744,161328744,test/functional/mempool_persist.py
jtimon,2018-01-12T21:30:19Z,"stopping the node the mempool is dumped and starting the node, LoadMempool gets called again, hopefully with enough work ahead to catch the error when calling savemempool on the next line.",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161329824,161329824,test/functional/mempool_persist.py
luke-jr,2018-01-12T21:32:44Z,I think it's probably important that this works if `-persistmempool` is false.,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161330398,161330398,src/rpc/blockchain.cpp
MarcoFalke,2018-01-12T21:45:20Z,I don't see a reason to make it fail when `nopersistmempool`,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161332774,161332774,src/rpc/blockchain.cpp
MarcoFalke,2018-01-12T21:46:26Z,Move down two lines to break out of this scope?,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161333000,161333000,src/init.cpp
MarcoFalke,2018-01-12T22:58:25Z,style-nit: Might use `g_is_mempool_loaded{false}` for compile-time narrowing check.,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161344980,161344980,src/validation.cpp
jtimon,2018-01-12T23:19:25Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161347691,161347691,src/validation.cpp
TheBlueMatt,2018-01-14T18:37:29Z,"It would be nice to drop fDumpMempoolLater and only have one global for ""mempool was loaded"". Should be able to set g_is_mempool_loaded to !fRequestShutdown here, and then check -persistmempool before flushing during shutdown to avoid changing behavior without adding another boolean.",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161406148,161406148,src/init.cpp
TheBlueMatt,2018-01-14T18:37:53Z,Would be nice to give a different error message here.,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161406155,161406155,src/rpc/blockchain.cpp
TheBlueMatt,2018-01-14T18:38:24Z,"Indeed, definitely needs to work with -persistmempool false, that's the whole point of the savemempool command. AFAICT the current implementation does work in that case.",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161406167,161406167,src/rpc/blockchain.cpp
jtimon,2018-01-15T14:29:44Z,"I agree it's best it works in that case, just didn't thought about it initially. But for the record, I'm using savemempool with -persistmempool to true, because I want to read it on restart too!\nI think the whole point of savemempool is to cover use cases where for whatever reason (in my case, an insufficient knowledge of docker-compose) you can't or don't always let the daemon exit gracefully. ",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161533052,161533052,src/rpc/blockchain.cpp
jtimon,2018-01-15T14:32:29Z,"Perhaps I'm not understanding the code, but what I assumed is that fDumpMempoolLater is set to !fRequestShutdown instead of true to avoid more than one thread dumping the mempool. But in this case we want all threads to work with savemempool once the mempool is loaded.\nAm I confused about this or missing something?\n",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161533756,161533756,src/init.cpp
promag,2018-01-15T14:46:20Z,"Agree, with the corresponding test.",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161537441,161537441,src/rpc/blockchain.cpp
promag,2018-01-15T14:46:58Z,"Should the `g_is_mempool_loaded` check be inside of `DumpMempool`? No need to see `g_is_mempool_loaded` in the RPC code.\n\nNote that with this change there is no need for a functional test, just a c++ test `DumpMempool`.",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161537657,161537657,src/rpc/blockchain.cpp
TheBlueMatt,2018-01-15T19:00:57Z,"There is only one shutdown thread, not sure what you mean ""more than one thread dumping the mempool"". !fRequestShutdown is a check to make sure LoadMempool() didn't quit early, but its also safe to re-use that in RPC as if fRequestShutdown is set we'll be shutting down soon anyway, so RPCs can fail.",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161595231,161595231,src/init.cpp
jtimon,2018-01-15T20:42:38Z,"Alright, I wasn't understanding why !fRequestShutdown was set, it seems we can have a single boolean then and drop fDumpMempoolLater. ",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161611530,161611530,src/init.cpp
jtimon,2018-01-15T20:45:49Z,"Well, if I put it inside DumpMempool() then I can't have the different meesage, right?\nI don't have a strong opinion about putting it inside and removing the functional test, I would like to hear what others think before doing it. I'll change the error message for now.\n",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161611956,161611956,src/rpc/blockchain.cpp
gmaxwell,2018-01-16T05:01:11Z,Why is there still an argument check here?  The setting of g_is_mempool_loaded appears to me to be unconditional now.,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161661280,161661280,src/rpc/blockchain.cpp
MarcoFalke,2018-01-16T16:44:00Z,"The code seems correct, but is just badly documented.\n\nWhat about\n\n```cpp\nconst bool is_supposed_to_load_mempool{gArgs.GetArg(""-persistmempool"", DEFAULT_PERSIST_MEMPOOL)};\nif (!g_is_mempool_loaded && is_supposed_to_load_mempool) {",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161816279,161816279,src/rpc/blockchain.cpp
jtimon,2018-01-16T17:16:21Z,"Well, it is now not needed since the g_is_mempool_loaded is set out of the ```if  gArgs.GetArg(""-persistmempool""...```. I was thinking that perhaps we should allow to dump even before g_is_mempool_loaded is set if -persistmempool=0 (since in that case it's not loading it anyway).\nBut perhaps it's better that it waits for that line to be run when -persistmempool=0 too.\n Or perhaps the we can se",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161825981,161825981,src/rpc/blockchain.cpp
MarcoFalke,2018-01-16T18:22:18Z,"Why would there be anything in mempool, when -persistmempool=0 and you are not yet connected to any peers? So there wouldn't be any need to allow `savemempool`.\n\nWe are mostly nitpicking here, and I don't care too much what variation you pick, but the current code seems confusion/hard to read, otherwise we woulnd't have this conversation.",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161843533,161843533,src/rpc/blockchain.cpp
jtimon,2018-01-16T21:08:59Z,"Alright, I'll just remove the gArgs.GetArg(""-persistmempool"", DEFAULT_PERSIST_MEMPOOL) condition from here and leave it as it was right before.",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161886855,161886855,src/rpc/blockchain.cpp
jtimon,2018-01-16T21:14:18Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r161888074,161888074,src/rpc/blockchain.cpp
MarcoFalke,2018-01-19T00:11:01Z,A comment explaining why this is needed?,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r162507018,162507018,test/functional/mempool_persist.py
MarcoFalke,2018-01-19T00:11:23Z,How will this not create too long mempool chains?,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r162507077,162507077,test/functional/mempool_persist.py
jtimon,2018-01-21T21:04:04Z,I guess perhaps it is not needed...,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r162825441,162825441,test/functional/mempool_persist.py
jtimon,2018-01-21T21:04:31Z,I'm not sure I understand the question. What's the problem?,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r162825455,162825455,test/functional/mempool_persist.py
MarcoFalke,2018-01-21T21:31:47Z,"Please remove it, when it is not needed. Starting and stopping nodes is where a ton of time is wasted in the test framework.",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r162826265,162826265,test/functional/mempool_persist.py
MarcoFalke,2018-01-21T21:47:06Z,I assume you can modify the `self.stop_nodes()` a few lines above to say `self.stop_node(1)`,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r162826693,162826693,test/functional/mempool_persist.py
MarcoFalke,2018-01-21T21:52:50Z,"Currently the mempool only accepts a chain of up to 26 unconfirmed transactions, since coin selection is not deterministic, I assume we will run into travis failures at some point.\n\nAlso, IIRC the wallet is extremely slow with coin selection, when a lot of the coins are unconfirmed change. There might be some helper functions in the test framework that can create a ton of spam transactions.",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r162826841,162826841,test/functional/mempool_persist.py
promag,2018-02-09T00:08:41Z,Is it me or after the above `StartShutdown()` calls we should return?,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r167106835,167106835,src/init.cpp
promag,2018-02-09T00:12:29Z,"IMO we should do this instead:\n```cpp\ng_is_mempool_loaded = LoadMempool();\n```\nbecause, for instance, in `LoadMempool()`:\nhttps://github.com/bitcoin/bitcoin/blob/67447ba06057b8e83f962c82491d2fe6c5211f50/src/validation.cpp#L4592-L4593",https://github.com/bitcoin/bitcoin/pull/12172#discussion_r167107431,167107431,src/init.cpp
MarcoFalke,2018-03-19T00:30:10Z,Please remove unrelated move of variables from a bug fix pull request,https://github.com/bitcoin/bitcoin/pull/12172#discussion_r175311958,175311958,src/txmempool.h
