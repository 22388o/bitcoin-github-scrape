[
  {
    "sha": "f4c45cd09f62a148d7760bf345a8d59338ccb720",
    "node_id": "C_kwDOABII59oAKGY0YzQ1Y2QwOWY2MmExNDhkNzc2MGJmMzQ1YThkNTkzMzhjY2I3MjA",
    "commit": {
      "author": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-11-04T01:23:38Z"
      },
      "committer": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-11-11T19:45:52Z"
      },
      "message": "Remove AcceptToMemoryPoolWithTime",
      "tree": {
        "sha": "601e29711d4849038896183541b522e0022bc393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/601e29711d4849038896183541b522e0022bc393"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4c45cd09f62a148d7760bf345a8d59338ccb720",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4c45cd09f62a148d7760bf345a8d59338ccb720",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4c45cd09f62a148d7760bf345a8d59338ccb720",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4c45cd09f62a148d7760bf345a8d59338ccb720/comments",
    "author": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f63bf05e73ea96e5c2c72cc455d05ad382883c27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f63bf05e73ea96e5c2c72cc455d05ad382883c27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f63bf05e73ea96e5c2c72cc455d05ad382883c27"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 27,
      "deletions": 28
    },
    "files": [
      {
        "sha": "4d0d32c7e2a076811037339fdb4e90b443b46724",
        "filename": "src/test/fuzz/tx_pool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4c45cd09f62a148d7760bf345a8d59338ccb720/src/test/fuzz/tx_pool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4c45cd09f62a148d7760bf345a8d59338ccb720/src/test/fuzz/tx_pool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_pool.cpp?ref=f4c45cd09f62a148d7760bf345a8d59338ccb720",
        "patch": "@@ -230,7 +230,7 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n                it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n \n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(::Params(), tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n         const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n         SyncWithValidationInterfaceQueue();\n         UnregisterSharedValidationInterface(txr);\n@@ -330,7 +330,7 @@ FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n         const auto tx = MakeTransactionRef(mut_tx);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n         ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(::Params(), tx_pool, node.chainman->ActiveChainstate(), tx, GetTime(), bypass_limits, /* test_accept= */false));\n         const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n         if (accepted) {\n             txids.push_back(tx->GetHash());"
      },
      {
        "sha": "2bde1774ad3ba0bd08751a7c43d0fdc73e419047",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 19,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4c45cd09f62a148d7760bf345a8d59338ccb720/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4c45cd09f62a148d7760bf345a8d59338ccb720/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f4c45cd09f62a148d7760bf345a8d59338ccb720",
        "patch": "@@ -349,8 +349,8 @@ void CChainState::MaybeUpdateMempoolForReorg(\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            AcceptToMemoryPool(\n-                *this, *m_mempool, *it, true /* bypass_limits */).m_result_type !=\n+            AcceptToMemoryPool(m_params, *m_mempool, *this, *it, GetTime(),\n+                /* bypass_limits= */true, /* test_accept= */false).m_result_type !=\n                     MempoolAcceptResult::ResultType::VALID) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n@@ -1079,15 +1079,13 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n \n } // anon namespace\n \n-/** (try to) add transaction to memory pool with a specified acceptance time **/\n-static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool,\n-                                                      CChainState& active_chainstate,\n-                                                      const CTransactionRef &tx, int64_t nAcceptTime,\n-                                                      bool bypass_limits, bool test_accept)\n-                                                      EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+MempoolAcceptResult AcceptToMemoryPool(const CChainParams& chainparams, CTxMemPool& pool,\n+                                       CChainState& active_chainstate, const CTransactionRef& tx,\n+                                       int64_t accept_time, bool bypass_limits, bool test_accept)\n+    EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    auto args = MemPoolAccept::ATMPArgs::SingleAccept(chainparams, nAcceptTime, bypass_limits, coins_to_uncache, test_accept);\n+    auto args = MemPoolAccept::ATMPArgs::SingleAccept(chainparams, accept_time, bypass_limits, coins_to_uncache, test_accept);\n     const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);\n     if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n         // Remove coins that were not present in the coins cache before calling\n@@ -1104,12 +1102,6 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n     return result;\n }\n \n-MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n-                                       bool bypass_limits, bool test_accept)\n-{\n-    return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n-}\n-\n PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n                                                    const Package& package, bool test_accept)\n {\n@@ -1162,8 +1154,8 @@ CChainState::CChainState(\n     ChainstateManager& chainman,\n     std::optional<uint256> from_snapshot_blockhash)\n     : m_mempool(mempool),\n-      m_params(::Params()),\n       m_blockman(blockman),\n+      m_params(::Params()),\n       m_chainman(chainman),\n       m_from_snapshot_blockhash(from_snapshot_blockhash) {}\n \n@@ -3494,7 +3486,7 @@ MempoolAcceptResult ChainstateManager::ProcessTransaction(const CTransactionRef&\n         state.Invalid(TxValidationResult::TX_NO_MEMPOOL, \"no-mempool\");\n         return MempoolAcceptResult::Failure(state);\n     }\n-    auto result = AcceptToMemoryPool(active_chainstate, *active_chainstate.m_mempool, tx, /*bypass_limits=*/ false, test_accept);\n+    auto result = AcceptToMemoryPool(active_chainstate.m_params, *active_chainstate.m_mempool, active_chainstate, tx, GetTime(), /* bypass_limits= */ false, test_accept);\n     active_chainstate.m_mempool->check(active_chainstate.CoinsTip(), active_chainstate.m_chain.Height() + 1);\n     return result;\n }\n@@ -4562,8 +4554,8 @@ bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mocka\n             }\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                if (AcceptToMemoryPoolWithTime(chainparams, pool, active_chainstate, tx, nTime, false /* bypass_limits */,\n-                                               false /* test_accept */).m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+                if (AcceptToMemoryPool(chainparams, pool, active_chainstate, tx, nTime, /* bypass_limits= */ false,\n+                                               /* test_accept= */ false).m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                     ++count;\n                 } else {\n                     // mempool may contain the transaction already, e.g. from"
      },
      {
        "sha": "bd5d9f9188eace16408613840f17ba06e309054d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4c45cd09f62a148d7760bf345a8d59338ccb720/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4c45cd09f62a148d7760bf345a8d59338ccb720/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f4c45cd09f62a148d7760bf345a8d59338ccb720",
        "patch": "@@ -208,19 +208,25 @@ struct PackageMempoolAcceptResult\n };\n \n /**\n- * Try to add a transaction to the mempool. This is an internal function and is\n- * exposed only for testing. Client code should use ChainstateManager::ProcessTransaction()\n+ * Try to add a transaction to the mempool. This is an internal function and is exposed only for testing.\n+ * Client code should use ChainstateManager::ProcessTransaction()\n  *\n- * @param[in]  active_chainstate  Reference to the active chainstate.\n+ * @param[in]  chainparams        Chain paramenters.\n  * @param[in]  pool               Reference to the node's mempool.\n+ * @param[in]  active_chainstate  Reference to the active chainstate.\n  * @param[in]  tx                 The transaction to submit for mempool acceptance.\n+ * @param[in]  accept_time        The timestamp for adding the transaction to the mempool. Usually\n+ *                                the current system time, but may be different.\n+ *                                It is also used to determine when the entry expires.\n  * @param[in]  bypass_limits      When true, don't enforce mempool fee and capacity limits.\n  * @param[in]  test_accept        When true, run validation checks but don't submit to mempool.\n  *\n  * @returns a MempoolAcceptResult indicating whether the transaction was accepted/rejected with reason.\n  */\n-MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n-                                       bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+MempoolAcceptResult AcceptToMemoryPool(const CChainParams& chainparams, CTxMemPool& pool,\n+                                       CChainState& active_chainstate, const CTransactionRef& tx,\n+                                       int64_t accept_time, bool bypass_limits, bool test_accept)\n+    EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n * Atomically test acceptance of a package. If the package only contains one tx, package rules still\n@@ -581,8 +587,6 @@ class CChainState\n     //! Only the active chainstate has a mempool.\n     CTxMemPool* m_mempool;\n \n-    const CChainParams& m_params;\n-\n     //! Manages the UTXO set, which is a reflection of the contents of `m_chain`.\n     std::unique_ptr<CoinsViews> m_coins_views;\n \n@@ -591,6 +595,9 @@ class CChainState\n     //! CChainState instances.\n     BlockManager& m_blockman;\n \n+    /** Chain parameters for this chainstate */\n+    const CChainParams& m_params;\n+\n     //! The chainstate manager that owns this chainstate. The reference is\n     //! necessary so that this instance can check whether it is the active\n     //! chainstate within deeply nested method calls."
      }
    ]
  },
  {
    "sha": "e1c221b557ea260751bd0c6b91f9dc16d3aecb8b",
    "node_id": "C_kwDOABII59oAKGUxYzIyMWI1NTdlYTI2MDc1MWJkMGM2YjkxZjlkYzE2ZDNhZWNiOGI",
    "commit": {
      "author": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-11-11T19:36:44Z"
      },
      "committer": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-11-11T19:45:52Z"
      },
      "message": "Remove calls to global Params() in tx_pool test",
      "tree": {
        "sha": "f3002ce28d71854e45634653cedd2c4eaee51786",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3002ce28d71854e45634653cedd2c4eaee51786"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1c221b557ea260751bd0c6b91f9dc16d3aecb8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c221b557ea260751bd0c6b91f9dc16d3aecb8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1c221b557ea260751bd0c6b91f9dc16d3aecb8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c221b557ea260751bd0c6b91f9dc16d3aecb8b/comments",
    "author": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4c45cd09f62a148d7760bf345a8d59338ccb720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4c45cd09f62a148d7760bf345a8d59338ccb720",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4c45cd09f62a148d7760bf345a8d59338ccb720"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1f6e3fc7b25a42a45ccf2c69f45c1869d79aa4ba",
        "filename": "src/test/fuzz/tx_pool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1c221b557ea260751bd0c6b91f9dc16d3aecb8b/src/test/fuzz/tx_pool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1c221b557ea260751bd0c6b91f9dc16d3aecb8b/src/test/fuzz/tx_pool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_pool.cpp?ref=e1c221b557ea260751bd0c6b91f9dc16d3aecb8b",
        "patch": "@@ -86,7 +86,7 @@ void Finish(FuzzedDataProvider& fuzzed_data_provider, MockedTxPool& tx_pool, CCh\n         BlockAssembler::Options options;\n         options.nBlockMaxWeight = fuzzed_data_provider.ConsumeIntegralInRange(0U, MAX_BLOCK_WEIGHT);\n         options.blockMinFeeRate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /* max */ COIN)};\n-        auto assembler = BlockAssembler{chainstate, *static_cast<CTxMemPool*>(&tx_pool), ::Params(), options};\n+        auto assembler = BlockAssembler{chainstate, *static_cast<CTxMemPool*>(&tx_pool), chainstate.m_params, options};\n         auto block_template = assembler.CreateNewBlock(CScript{} << OP_TRUE);\n         Assert(block_template->block.vtx.size() >= 1);\n     }\n@@ -230,7 +230,8 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         Assert(it->second.m_result_type == MempoolAcceptResult::ResultType::VALID ||\n                it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n \n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(::Params(), tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n+        CChainState& chainstate{node.chainman->ActiveChainstate()};\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate.m_params, tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n         const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n         SyncWithValidationInterfaceQueue();\n         UnregisterSharedValidationInterface(txr);\n@@ -330,7 +331,7 @@ FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n         const auto tx = MakeTransactionRef(mut_tx);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n         ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(::Params(), tx_pool, node.chainman->ActiveChainstate(), tx, GetTime(), bypass_limits, /* test_accept= */false));\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate.m_params, tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n         const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n         if (accepted) {\n             txids.push_back(tx->GetHash());"
      }
    ]
  },
  {
    "sha": "863703c63311bf816b2dcdb7edd70be0bf069014",
    "node_id": "C_kwDOABII59oAKDg2MzcwM2M2MzMxMWJmODE2YjJkY2RiN2VkZDcwYmUwYmYwNjkwMTQ",
    "commit": {
      "author": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-11-11T21:31:31Z"
      },
      "committer": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-11-11T22:20:42Z"
      },
      "message": "Remove CChainParams params from ATMP",
      "tree": {
        "sha": "b7996485cb6013e3a26f858df4f01752efde7ebe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7996485cb6013e3a26f858df4f01752efde7ebe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/863703c63311bf816b2dcdb7edd70be0bf069014",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/863703c63311bf816b2dcdb7edd70be0bf069014",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/863703c63311bf816b2dcdb7edd70be0bf069014",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/863703c63311bf816b2dcdb7edd70be0bf069014/comments",
    "author": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1c221b557ea260751bd0c6b91f9dc16d3aecb8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c221b557ea260751bd0c6b91f9dc16d3aecb8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1c221b557ea260751bd0c6b91f9dc16d3aecb8b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 8,
      "deletions": 11
    },
    "files": [
      {
        "sha": "90fe2c59ff6a3b24cd66456b6e990e74b773ff94",
        "filename": "src/test/fuzz/tx_pool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/863703c63311bf816b2dcdb7edd70be0bf069014/src/test/fuzz/tx_pool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/863703c63311bf816b2dcdb7edd70be0bf069014/src/test/fuzz/tx_pool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_pool.cpp?ref=863703c63311bf816b2dcdb7edd70be0bf069014",
        "patch": "@@ -231,7 +231,7 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n                it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n \n         CChainState& chainstate{node.chainman->ActiveChainstate()};\n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate.m_params, tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n         const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n         SyncWithValidationInterfaceQueue();\n         UnregisterSharedValidationInterface(txr);\n@@ -331,7 +331,7 @@ FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n         const auto tx = MakeTransactionRef(mut_tx);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n         ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate.m_params, tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n         const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n         if (accepted) {\n             txids.push_back(tx->GetHash());"
      },
      {
        "sha": "fac64ef0b07f87b76df74ec877a902977dc1deb7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/863703c63311bf816b2dcdb7edd70be0bf069014/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/863703c63311bf816b2dcdb7edd70be0bf069014/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=863703c63311bf816b2dcdb7edd70be0bf069014",
        "patch": "@@ -349,7 +349,7 @@ void CChainState::MaybeUpdateMempoolForReorg(\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            AcceptToMemoryPool(m_params, *m_mempool, *this, *it, GetTime(),\n+            AcceptToMemoryPool(*m_mempool, *this, *it, GetTime(),\n                 /* bypass_limits= */true, /* test_accept= */false).m_result_type !=\n                     MempoolAcceptResult::ResultType::VALID) {\n             // If the transaction doesn't make it in to the mempool, remove any\n@@ -1079,11 +1079,11 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n \n } // anon namespace\n \n-MempoolAcceptResult AcceptToMemoryPool(const CChainParams& chainparams, CTxMemPool& pool,\n-                                       CChainState& active_chainstate, const CTransactionRef& tx,\n+MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, CChainState& active_chainstate, const CTransactionRef& tx,\n                                        int64_t accept_time, bool bypass_limits, bool test_accept)\n     EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n+    const CChainParams& chainparams{active_chainstate.m_params};\n     std::vector<COutPoint> coins_to_uncache;\n     auto args = MemPoolAccept::ATMPArgs::SingleAccept(chainparams, accept_time, bypass_limits, coins_to_uncache, test_accept);\n     const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);\n@@ -3486,7 +3486,7 @@ MempoolAcceptResult ChainstateManager::ProcessTransaction(const CTransactionRef&\n         state.Invalid(TxValidationResult::TX_NO_MEMPOOL, \"no-mempool\");\n         return MempoolAcceptResult::Failure(state);\n     }\n-    auto result = AcceptToMemoryPool(active_chainstate.m_params, *active_chainstate.m_mempool, active_chainstate, tx, GetTime(), /* bypass_limits= */ false, test_accept);\n+    auto result = AcceptToMemoryPool(*active_chainstate.m_mempool, active_chainstate, tx, GetTime(), /* bypass_limits= */ false, test_accept);\n     active_chainstate.m_mempool->check(active_chainstate.CoinsTip(), active_chainstate.m_chain.Height() + 1);\n     return result;\n }\n@@ -4516,7 +4516,6 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mockable_fopen_function)\n {\n-    const CChainParams& chainparams = Params();\n     int64_t nExpiryTimeout = gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr{mockable_fopen_function(gArgs.GetDataDirNet() / \"mempool.dat\", \"rb\")};\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n@@ -4554,7 +4553,7 @@ bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mocka\n             }\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                if (AcceptToMemoryPool(chainparams, pool, active_chainstate, tx, nTime, /* bypass_limits= */ false,\n+                if (AcceptToMemoryPool(pool, active_chainstate, tx, nTime, /* bypass_limits= */ false,\n                                                /* test_accept= */ false).m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "a57045ad0f4a4fe1999ecfadea4b40780f26102e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/863703c63311bf816b2dcdb7edd70be0bf069014/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/863703c63311bf816b2dcdb7edd70be0bf069014/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=863703c63311bf816b2dcdb7edd70be0bf069014",
        "patch": "@@ -211,7 +211,6 @@ struct PackageMempoolAcceptResult\n  * Try to add a transaction to the mempool. This is an internal function and is exposed only for testing.\n  * Client code should use ChainstateManager::ProcessTransaction()\n  *\n- * @param[in]  chainparams        Chain paramenters.\n  * @param[in]  pool               Reference to the node's mempool.\n  * @param[in]  active_chainstate  Reference to the active chainstate.\n  * @param[in]  tx                 The transaction to submit for mempool acceptance.\n@@ -223,8 +222,7 @@ struct PackageMempoolAcceptResult\n  *\n  * @returns a MempoolAcceptResult indicating whether the transaction was accepted/rejected with reason.\n  */\n-MempoolAcceptResult AcceptToMemoryPool(const CChainParams& chainparams, CTxMemPool& pool,\n-                                       CChainState& active_chainstate, const CTransactionRef& tx,\n+MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, CChainState& active_chainstate, const CTransactionRef& tx,\n                                        int64_t accept_time, bool bypass_limits, bool test_accept)\n     EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n "
      }
    ]
  },
  {
    "sha": "988cfd8914f12ce87fb6ac6499326e140e840c1d",
    "node_id": "C_kwDOABII59oAKDk4OGNmZDg5MTRmMTJjZTg3ZmI2YWM2NDk5MzI2ZTE0MGU4NDBjMWQ",
    "commit": {
      "author": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-11-13T06:14:12Z"
      },
      "committer": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-11-13T06:35:12Z"
      },
      "message": "Remove CTxMemPool params from ATMP",
      "tree": {
        "sha": "3d4ca32e5c3776facf6fe7f4800495e6a6c28b0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d4ca32e5c3776facf6fe7f4800495e6a6c28b0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/988cfd8914f12ce87fb6ac6499326e140e840c1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988cfd8914f12ce87fb6ac6499326e140e840c1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/988cfd8914f12ce87fb6ac6499326e140e840c1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988cfd8914f12ce87fb6ac6499326e140e840c1d/comments",
    "author": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "863703c63311bf816b2dcdb7edd70be0bf069014",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/863703c63311bf816b2dcdb7edd70be0bf069014",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/863703c63311bf816b2dcdb7edd70be0bf069014"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 20,
      "deletions": 18
    },
    "files": [
      {
        "sha": "899bcf629f4cd51945ecac38e56b698d58672057",
        "filename": "src/test/fuzz/tx_pool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cfd8914f12ce87fb6ac6499326e140e840c1d/src/test/fuzz/tx_pool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cfd8914f12ce87fb6ac6499326e140e840c1d/src/test/fuzz/tx_pool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_pool.cpp?ref=988cfd8914f12ce87fb6ac6499326e140e840c1d",
        "patch": "@@ -231,7 +231,9 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n                it->second.m_result_type == MempoolAcceptResult::ResultType::INVALID);\n \n         CChainState& chainstate{node.chainman->ActiveChainstate()};\n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n+        chainstate.m_mempool = &tx_pool;\n+\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n         const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n         SyncWithValidationInterfaceQueue();\n         UnregisterSharedValidationInterface(txr);\n@@ -331,7 +333,7 @@ FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n         const auto tx = MakeTransactionRef(mut_tx);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n         ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n-        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n         const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n         if (accepted) {\n             txids.push_back(tx->GetHash());"
      },
      {
        "sha": "93cdbdab5a31c5fe4814b6703e22ac49fe85cfc1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cfd8914f12ce87fb6ac6499326e140e840c1d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cfd8914f12ce87fb6ac6499326e140e840c1d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=988cfd8914f12ce87fb6ac6499326e140e840c1d",
        "patch": "@@ -347,11 +347,9 @@ void CChainState::MaybeUpdateMempoolForReorg(\n     // been previously seen in a block.\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n+        auto accepted = AcceptToMemoryPool(*this, *it, GetTime(), /* bypass_limits= */true, /* test_accept= */false);\n         // ignore validation errors in resurrected transactions\n-        if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            AcceptToMemoryPool(*m_mempool, *this, *it, GetTime(),\n-                /* bypass_limits= */true, /* test_accept= */false).m_result_type !=\n-                    MempoolAcceptResult::ResultType::VALID) {\n+        if (!fAddToMempool || (*it)->IsCoinBase() || accepted.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             m_mempool->removeRecursive(**it, MemPoolRemovalReason::REORG);\n@@ -1079,11 +1077,14 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n \n } // anon namespace\n \n-MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, CChainState& active_chainstate, const CTransactionRef& tx,\n+MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, const CTransactionRef& tx,\n                                        int64_t accept_time, bool bypass_limits, bool test_accept)\n     EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CChainParams& chainparams{active_chainstate.m_params};\n+    assert(active_chainstate.m_mempool != nullptr);\n+    CTxMemPool& pool{*active_chainstate.m_mempool};\n+\n     std::vector<COutPoint> coins_to_uncache;\n     auto args = MemPoolAccept::ATMPArgs::SingleAccept(chainparams, accept_time, bypass_limits, coins_to_uncache, test_accept);\n     const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);\n@@ -1153,9 +1154,9 @@ CChainState::CChainState(\n     BlockManager& blockman,\n     ChainstateManager& chainman,\n     std::optional<uint256> from_snapshot_blockhash)\n-    : m_mempool(mempool),\n-      m_blockman(blockman),\n+    : m_blockman(blockman),\n       m_params(::Params()),\n+      m_mempool(mempool),\n       m_chainman(chainman),\n       m_from_snapshot_blockhash(from_snapshot_blockhash) {}\n \n@@ -3486,7 +3487,7 @@ MempoolAcceptResult ChainstateManager::ProcessTransaction(const CTransactionRef&\n         state.Invalid(TxValidationResult::TX_NO_MEMPOOL, \"no-mempool\");\n         return MempoolAcceptResult::Failure(state);\n     }\n-    auto result = AcceptToMemoryPool(*active_chainstate.m_mempool, active_chainstate, tx, GetTime(), /* bypass_limits= */ false, test_accept);\n+    auto result = AcceptToMemoryPool(active_chainstate, tx, GetTime(), /* bypass_limits= */ false, test_accept);\n     active_chainstate.m_mempool->check(active_chainstate.CoinsTip(), active_chainstate.m_chain.Height() + 1);\n     return result;\n }\n@@ -4553,8 +4554,8 @@ bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mocka\n             }\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                if (AcceptToMemoryPool(pool, active_chainstate, tx, nTime, /* bypass_limits= */ false,\n-                                               /* test_accept= */ false).m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+                auto accepted = AcceptToMemoryPool(active_chainstate, tx, nTime, /* bypass_limits= */ false, /* test_accept= */ false);\n+                if (accepted.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                     ++count;\n                 } else {\n                     // mempool may contain the transaction already, e.g. from"
      },
      {
        "sha": "fbe3d0f9f6cc1ad66a9fbc132ef474b874dc89c1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/988cfd8914f12ce87fb6ac6499326e140e840c1d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/988cfd8914f12ce87fb6ac6499326e140e840c1d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=988cfd8914f12ce87fb6ac6499326e140e840c1d",
        "patch": "@@ -211,7 +211,6 @@ struct PackageMempoolAcceptResult\n  * Try to add a transaction to the mempool. This is an internal function and is exposed only for testing.\n  * Client code should use ChainstateManager::ProcessTransaction()\n  *\n- * @param[in]  pool               Reference to the node's mempool.\n  * @param[in]  active_chainstate  Reference to the active chainstate.\n  * @param[in]  tx                 The transaction to submit for mempool acceptance.\n  * @param[in]  accept_time        The timestamp for adding the transaction to the mempool. Usually\n@@ -222,7 +221,7 @@ struct PackageMempoolAcceptResult\n  *\n  * @returns a MempoolAcceptResult indicating whether the transaction was accepted/rejected with reason.\n  */\n-MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, CChainState& active_chainstate, const CTransactionRef& tx,\n+MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, const CTransactionRef& tx,\n                                        int64_t accept_time, bool bypass_limits, bool test_accept)\n     EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -581,10 +580,6 @@ class CChainState\n      */\n     mutable std::atomic<bool> m_cached_finished_ibd{false};\n \n-    //! Optional mempool that is kept in sync with the chain.\n-    //! Only the active chainstate has a mempool.\n-    CTxMemPool* m_mempool;\n-\n     //! Manages the UTXO set, which is a reflection of the contents of `m_chain`.\n     std::unique_ptr<CoinsViews> m_coins_views;\n \n@@ -596,6 +591,10 @@ class CChainState\n     /** Chain parameters for this chainstate */\n     const CChainParams& m_params;\n \n+    //! Optional mempool that is kept in sync with the chain.\n+    //! Only the active chainstate has a mempool.\n+    CTxMemPool* m_mempool;\n+\n     //! The chainstate manager that owns this chainstate. The reference is\n     //! necessary so that this instance can check whether it is the active\n     //! chainstate within deeply nested method calls."
      }
    ]
  }
]