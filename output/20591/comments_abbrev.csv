DrahtBot,2020-12-07 18:34:35,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#21206](https://github.com/bitcoin/bitcoin/pull/21206) (refactor: Make CWalletTx sync state type-safe by ryanofsky)\n\nIf",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-740100466,740100466,
jonatack,2020-12-07 21:16:36,"If this PR is intended to address issue #20181, can you add ""Closes #20181"" or ""Fixes #20181"" to the PR description instead of the PR title?",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-740184798,740184798,
BitcoinTsunami,2020-12-07 21:21:15,Is it right this way ?,https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-740187113,740187113,
jonatack,2020-12-07 21:33:53,"Yes, thank you.",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-740193240,740193240,
sipa,2020-12-07 21:45:29,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-740198726,740198726,
BitcoinTsunami,2020-12-08 07:43:29,Thanks for all the feedback. I'll correct everything and ask question if needed.,https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-740444897,740444897,
decryp2kanon,2020-12-08 19:38:59,Concept ACK. Thanks!,https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-740917494,740917494,
jonasschnelli,2020-12-09 07:52:57,"Concept ACK - code looks good (haven't looked at the tests). Code is relatively simple, basically just an `if` to bypass the smart-time calculation.",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-741599788,741599788,
BitcoinTsunami,2020-12-09 16:32:45,"I've push a new version with the rework marked as resolved done.\nWhat is not done yet:\n- remove hardcoded pubkey in the functionnal test : wait for feedback on the way to do it to limit useless code.\n- update ComputeTimeSmart doxygen documentation : wait for feedback on my proposal in comment.\n- update AddToWalletIfInvolvingMe doxygen documentation : wait for feedback on my proposal in com",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-741889830,741889830,
BitcoinTsunami,2020-12-11 07:39:26,I've push the full rework and add documentation update proposal in a separated commit.,https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-743029963,743029963,
luke-jr,2020-12-11 15:53:50,"Weak NACK. Seems like a hacky ""fix"" for what is pretty much a user error...?",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-743274105,743274105,
BitcoinTsunami,2020-12-12 14:27:26,"Thanks for your feedback.\n\nI'll try to give a broader view of the problem and of my fix, from my perspective.\n\nFirst of all, the current behaviour seems to be present for years, and no recent modification has changed this.\nIt's rare that users encounter this one and there's clearly no emergency here.\n\nThe issue that triggered my investigation is this one : https://github.com/bitcoin/",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-743763913,743763913,
kristapsk,2020-12-14 02:22:26,"> Seems like a hacky ""fix"" for what is pretty much a user error...?\n\nHow is rescanning blockchain a user error?",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-744125525,744125525,
luke-jr,2020-12-14 04:16:24,"Manually scanning out of order, to be specific, is a user error because the wallet is assumed to always be scanned up to its sync-point.",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-744154291,744154291,
sipa,2020-12-14 04:37:35,"@luke-jr I'd agree the wallet is written with that assumption, but I also don't see a downside to changing the behavior when the wallet can know it's dealing with an unusual situation. I haven't dug into the details, but I suspect this change makes things match expectations in strictly more situations.",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-744160157,744160157,
decryp2kanon,2021-01-19 18:39:56,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-763042693,763042693,
ryanofsky,2021-02-03 16:14:03,"Another thing I think could be done to improve this is to avoid adding these transactions to `wtxOrdered` when `rescanning_old_block` is true:\n\nhttps://github.com/bitcoin/bitcoin/blob/ea96e17e1f2c2b0a949366260906ef02e560a425/src/wallet/wallet.cpp#L873-L874\n\nIf we want to exclude these transactions from smart time calculation, better to fully exclude instead of half-excluding them. Maybe th",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-772628017,772628017,
ryanofsky,2021-02-17 21:29:40,"There appear to be spurious ""Agent is not responding!"" test failures https://cirrus-ci.com/task/5367295805489152, probably could be fixed by a new push or bulk restart",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-780866774,780866774,
BitcoinTsunami,2021-02-19 17:41:14,"Thanks ryanofsky for your feedback and suggestions !\nI confirm that my latest push was just to rebase master and I was a bit perplex about CI test failing.\n\nI'll implement thoses two point :\n> Suggestions from #20591 (review) to use max block time instead of block time, and #20591 (review) to keep rescan transactions out of wtxOrdered still apply.\n\nI need a little time to fully underst",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-782228291,782228291,
BitcoinTsunami,2021-02-20 11:17:41,"Hey I just push a first update:\n- fresh rebase\n- use block_max_time instead of blocktime following ryanofsky advice\n- faster functional test with jonatack recommandation.\n\nThe block_max_time advantage is clear for me now, because blocktime could sometimes  not be ordered in strict chronological order. block_max_time prevents this and Foundblock helper is very practical to get it.\n\nFo",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-782608848,782608848,
BitcoinTsunami,2021-02-20 23:22:38,"More thoughts :\n\nI realise that the ""two separate list"" already exist with wtxOrdered (ordered) and mapWallet (unordered). It make more sens to me now. Because listtransactions() method in rpcwallet.cpp is dependant from wtxOrdered, I can't skip some transactions to be added in it.\n\nIf you still think that I should avoid adding these transactions to wtxOrdered, maybe a rewrite of listtrans",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-782764550,782764550,
maddadder,2021-02-22 17:59:10,"I tried this pull request today, and I still have the same problem. It's pulling in the wrong date after a rescan. I am now attempting to reload the entire blockchain. I need this fixed for my IRS audit.",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-783558887,783558887,
BitcoinTsunami,2021-02-22 21:08:02,"> I tried this pull request today, and I still have the same problem. It's pulling in the wrong date after a rescan. I am now attempting to reload the entire blockchain. I need this fixed for my IRS audit.\n\nYou must encounter a similar problem as the one that make me code this PR. You can't recovered a wallet with incorrect datation. It's not possible yet, even with this PR : the only way is t",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-783675403,783675403,
BitcoinTsunami,2021-03-09 21:14:51,"> How about `nTimeSmart = min(nTimeSmart, block_max_time)` and avoid `rescanning_old_block` argument?\n\nCould you elaborate where do you imagine using it ?\n\nBecause min function between nTimeSmart and blocktime is already present in the current Bitcoin Core code and doesn't prevent the original problem.\n\nI'm refering to this line :\n` nTimeSmart = std::max(latestEntry, std::min(blockti",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-794463385,794463385,
BitcoinTsunami,2021-03-12 18:10:17,"> Code review ACK [bb6bc61](https://github.com/bitcoin/bitcoin/commit/bb6bc61bea3098d4dab895a73c2c0f7b8d293e2b). No significant changes since last review other than rebase, optimizing test, and switching to max block time instead of block time.\n> \n> Thanks for looking into txordered suggestions! It'd be nice to clean up this code more but I can see how listtransaction constrains changing txord",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-797665024,797665024,
maddadder,2021-03-12 18:21:03,"For the [#20591 (comment)], @BitcoinTsunami yes that is correct.",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-797670438,797670438,
ryanofsky,2021-03-30 14:48:30,"@promag did want to follow up on https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-794463385?\n\nTo me this PR seems like a straightforward improvement that gets the rescan context taken into account in a simple way and adds test coverage. I'm sure there are other ways it could be improved beyond this, but I think this change should only help make future improvements and not get in the ",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-810324129,810324129,
BitcoinTsunami,2021-09-26 14:19:26,Same code. I've just rebased from the latest master code to resolve conflict.,https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-927314001,927314001,
BitcoinTsunami,2021-09-28 20:07:14,"Thanks meshcollider and jonatack for your feedback.\nAll your recommendations are included in the new code.",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-929584986,929584986,
jonatack,2021-09-28 21:30:07,"ACK 240ea294d5e899a906f213f039b21e94c24d6018 per `git diff b92d552 240ea29`, re-verified rebase to latest master + debug build clean + new test passes on the branch and fails on master, only change since my review a few hours ago is incorporation of latest review suggestions",https://github.com/bitcoin/bitcoin/pull/20591#issuecomment-929639976,929639976,
jonatack,2020-12-07 22:11:38,"commit 4997a2ea5f2 ""wallet: fix ComputeTimeSmart algorithm to use blocktime during old block rescanning fixes #20181""\n\n- does the `ComputeTimeSmart` doxygen documentation need to be updated?\n\n- missing space\n```suggestion\n            if (!rescanning_old_block) {\n```\n\n- maybe start with the truthy case first, e.g. `if (rescanning_old_block) {`...\n\n- can drop the ""fixes #20181""",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r537871606,537871606,src/wallet/wallet.cpp
jonatack,2020-12-07 22:21:29,"nit: 2 spaces before each comment per PEP8\n```suggestion\n        restorenode = self.nodes[2]  # node used to restore user wallet and check time determination in ComputeSmartTime (wallet.cpp)\n```",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r537877209,537877209,test/functional/wallet_transactiontime_rescan.py
jonatack,2020-12-07 22:32:10,"The test does indeed fail without the change and passes with it.\n```\n2020-12-07T22:04:28.394000Z TestFramework (ERROR): Assertion failed\nTraceback (most recent call last):\n  File ""/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/test_framework.py"", line 126, in main\n    self.run_test()\n  File ""test/functional/wallet_transactiontime_rescan.py"", line 152, in run_test\n ",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r537883472,537883472,test/functional/wallet_transactiontime_rescan.py
jonatack,2020-12-07 22:37:49,"could use current time, grep in the functional tests for `int(time.time()`",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r537886648,537886648,test/functional/wallet_transactiontime_rescan.py
jonatack,2020-12-07 22:38:30,"The addresses and pubkeys don't need to be hardcoded. Have a look in other tests how this can be done (grep for ""importpubkey"", ""deterministic"", ""pub_key"", ""priv_key"", etc.)",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r537886972,537886972,test/functional/wallet_transactiontime_rescan.py
jonatack,2020-12-07 22:49:30,It would probaby be good to update the Doxygen documentation here.,https://github.com/bitcoin/bitcoin/pull/20591#discussion_r537892800,537892800,src/wallet/wallet.h
jonatack,2020-12-07 22:53:21,"nit\n```suggestion\n                SyncTransaction(block.vtx[posInBlock], {CWalletTx::Status::CONFIRMED, block_height, block_hash, (int)posInBlock}, fUpdate, /* rescanning_old_block */ true);\n```\n",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r537894706,537894706,src/wallet/wallet.cpp
BitcoinTsunami,2020-12-08 22:49:43,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r538866929,538866929,src/wallet/wallet.cpp
BitcoinTsunami,2020-12-08 22:50:11,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r538867184,538867184,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2020-12-08 22:50:50,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r538867510,538867510,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2020-12-08 22:51:47,"done locally, except doxygen documentation update, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r538868050,538868050,src/wallet/wallet.cpp
BitcoinTsunami,2020-12-09 11:46:57,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r539239571,539239571,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2020-12-09 12:03:02,"I've a question about this one. My first local version didn't use any hardcoded key and I use getaddressinfo and the pubkey field. I found my test a little bit hard to read, because I needed 4 wallets to realise it (and one, just to get a couple of address/pubkey). I find that by hardcoding address and pubkey, I could remove one wallet, and let the reader of the test be more focus on the 3 really ",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r539249567,539249567,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2020-12-09 12:51:12,"I'm not sure about how to update the doxygen documentation, because I don't understand the way the logic is explained. The documentation split sending and receiving transaction treatment explanation, but there's no distinction in ComputeTimeSmart in the code (or I don't see it).\n\nThat's why I'm not sure between which lines I should insert the new beahaviour description.\nMaybe something like ",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r539280278,539280278,src/wallet/wallet.cpp
BitcoinTsunami,2020-12-09 14:05:06,"I need some feedback here too.\n\nI want to add this at the end of the existing comment : \n""Should be called with rescanning_old_block set to true, if the transaction is not discovered in realtime, but during a rescan of old blocks."" \n\n```\n /**\n     * Add a transaction to the wallet, or update it.  pIndex and posInBlock should\n     * be set when the transaction was known to be includ",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r539332655,539332655,src/wallet/wallet.h
BitcoinTsunami,2020-12-10 23:27:59,"I've find a way with getnewaddress() on the node. The test is rewrited with importaddress() instead of importpubkey(). It's simplier and demonstrated the same thing.\nDone locally, not pushed yet.",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r540576404,540576404,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2020-12-11 07:37:40,I've push the proposition in a dedicated commit and will revise it if needed.,https://github.com/bitcoin/bitcoin/pull/20591#discussion_r540746812,540746812,src/wallet/wallet.cpp
BitcoinTsunami,2020-12-11 07:37:50,I've push the proposition in a dedicated commit and will revise it if needed.,https://github.com/bitcoin/bitcoin/pull/20591#discussion_r540746882,540746882,src/wallet/wallet.h
jonatack,2021-02-18 08:01:12,"I think 101 blocks would suffice here (the test functions the same but would run faster), unless I'm missing something.\n \n<details><summary>working example</summary><p>\n\n```diff\n         # generate some btc to create transactions and check blockcount\n-        minernode.generatetoaddress(300, m1)\n-        assert_equal(minernode.getblockcount(), 500)\n+        initial_mine = 101\n+  ",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r578203567,578203567,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2021-02-20 12:07:47,done.,https://github.com/bitcoin/bitcoin/pull/20591#discussion_r579648366,579648366,test/functional/wallet_transactiontime_rescan.py
meshcollider,2021-09-28 02:27:36,nit: spaces around `=` (we use new style guidelines even if it doesn't match with surrounding code),https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717174612,717174612,src/wallet/wallet.h
meshcollider,2021-09-28 02:32:29,nit: `user's`,https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717176321,717176321,test/functional/wallet_transactiontime_rescan.py
meshcollider,2021-09-28 02:34:38,"nit: unnecessary `, ` after the last argument",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717177012,717177012,test/functional/wallet_transactiontime_rescan.py
meshcollider,2021-09-28 02:35:08,nit: `transactions`,https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717177145,717177145,test/functional/wallet_transactiontime_rescan.py
jonatack,2021-09-28 09:50:34,"c308ceba suggestion, maybe use `COINBASE_MATURITY` constant\n\n<details><summary>example diff</summary><p>\n\n```diff\n@@ -7,6 +7,7 @@\n \n import time\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal\n@@ -61,7 +62,7 @@ class TransactionTimeRescanTest(Bit",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717412449,717412449,test/functional/wallet_transactiontime_rescan.py
jonatack,2021-09-28 09:51:31,"b92d5522 nit, if you retouch\n```suggestion\n     * not discovered in real time, but during a rescan of old blocks.\n```",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717413240,717413240,src/wallet/wallet.h
jonatack,2021-09-28 09:57:19,"c308ceba can omit the comment line 113 that is redundant with line 114, and:\n```suggestion\n        self.log.info('Check transaction times')\n```\n\nsame for lines 149-150 below",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717417780,717417780,test/functional/wallet_transactiontime_rescan.py
jonatack,2021-09-28 10:01:04,"c308ceba94e0d8fced7cf70ec0227f7f0d80cf8c nit, can omit the comment on line 107 and move it into line 108\n```suggestion\n        self.log.info('Check user's final balance and transaction count')\n```",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717420720,717420720,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2021-09-28 18:54:28,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717874691,717874691,src/wallet/wallet.h
BitcoinTsunami,2021-09-28 18:59:38,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717878368,717878368,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2021-09-28 19:00:22,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717878892,717878892,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2021-09-28 19:01:03,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717879367,717879367,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2021-09-28 19:03:18,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717880927,717880927,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2021-09-28 19:08:38,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717884480,717884480,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2021-09-28 19:10:43,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717885920,717885920,test/functional/wallet_transactiontime_rescan.py
BitcoinTsunami,2021-09-28 19:25:34,"done locally, not pushed yet",https://github.com/bitcoin/bitcoin/pull/20591#discussion_r717895536,717895536,src/wallet/wallet.h
