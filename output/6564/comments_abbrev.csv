btcdrak,2015-08-17T19:21:29Z,The BIP text is available at https://github.com/bitcoin/bips/pull/179\n\nEdit by @laanwj: or https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-131935238,131935238,
kanzure,2015-08-17T19:47:49Z,Should mempools always reject CSV-failing transactions?\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-131941055,131941055,
maaku,2015-08-18T23:25:26Z,"@kanzure This pull request is implemented such that CSV-failing transactions with tx.nVersion>=2 are considered non-standard and therefore rejected from mempool and/or relay. Given that CSV re-purposes a presently unused NOP opcode, there shouldn't be any compatibility issues. Is there a case you have in mind where a CSV-failing transaction should be added to the mempool?\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-132389640,132389640,
maaku,2015-09-26T00:10:47Z,"Rebased, and made compliant with latest version of #6312. Also merged @dcousens code duplication nit, and split the main commit into two for easier review.\n\nReady for review and merge.\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-143380742,143380742,
kanzure,2015-10-01T22:10:12Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-144863501,144863501,
petertodd,2015-10-08T17:12:22Z,"These changes would be easier to review if they were built on top of  #6312 I think, showing the final state of the new CSV feature.\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-146627002,146627002,
petertodd,2015-10-08T17:26:17Z,"Or, am I meant to be reviewing #6566? Rather confusing.\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-146630591,146630591,
rustyrussell,2015-10-12T01:43:51Z,"utAck\n\nThis doesn't seem to make sense without BIP68.  I tried to test it, got confused as it errored out comparing a BIP68 nSequence (1073742784, ie 0x400003C0) with a locktime of 500000030....\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-147272511,147272511,
petertodd,2015-10-12T01:53:00Z,"Again, I think these pull-req's need to be reviewed as a single unit;\nthey don't make sense apart from each other.\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-147273004,147273004,
btcdrak,2015-10-15T20:52:23Z,"I'm leaning to agree with @petertodd about merging #6312 into this PR (or vice versa). #6312 has become quite polished, there are a couple of minor nits to polish off. It seems like the right time to merge both together now since they make sense as a package anyway.\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-148517991,148517991,
jtimon,2015-10-19T10:15:02Z,"I agree it's hard to review #6566, #6564 and #6312 like this. What is supposed to come first?\nIf you want to maintain t\several PRs that's fine. But at least you could rebase one on top of the other.\nWhat advantage there is in having them be completely ""independent"" from each other?\nWe will have a preferred merge order, right? \n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-149174659,149174659,
btcdrak,2015-10-19T18:12:15Z,"@jtimon #6312 (BIP68) and this PR are supposed to be independent of each other, but I think that's been pedantic since OP_CSV isn't useful without BIP68. Merge order doesnt matter. \n\nI think it made sense to have two PRs while narrowing down the semantics of BIP68, but now that's done, it's better to have 1 PR. It will be more expedient for review if we rebase BIP68 onto this PR.\n\nFor referenc",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-149301440,149301440,
jtimon,2015-10-19T18:23:52Z,"> Merge order doesn't matter.\n\nMhmm, that's strange to me, but anyway...Then let's just pick one and rebase one of top of the other. Do we gain anything from not deciding the merge order in advance and maintaining the 3 PRs independent?\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-149304304,149304304,
maaku,2015-10-19T22:00:51Z,"Consistent feedback from the bitcoin pull request process has been to break up pulls to do one minimal thing / to not have multi-feature pulls, and to not have dependent pull requests when at all possible. In light of this and since this pull and #6312 don't actually share any code (except for 3 constants in `src/primitives/transaction.h`), they were submitted separately.\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-149360436,149360436,
maaku,2015-10-20T01:28:20Z,Rebased with new semantics.\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-149393106,149393106,
btcdrak,2015-10-20T04:06:52Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-149425746,149425746,
instagibbs,2015-10-21T16:24:19Z,utACK otherwise\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-149951293,149951293,
dcousens,2015-10-21T22:34:57Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-150043472,150043472,
rubensayshi,2015-10-22T09:51:23Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-150164947,150164947,
afk11,2015-10-22T15:37:53Z,tACK\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-150265364,150265364,
jmcorgan,2015-10-22T15:40:11Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-150265973,150265973,
dcousens,2015-10-23T00:32:13Z,Needs rebase\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-150395063,150395063,
btcdrak,2015-10-24T19:37:12Z,"A couple of people have requested to see the #6312 and #6564 rebased together in one branch for review. I have done this at https://github.com/bitcoin/bitcoin/compare/master...btcdrak:sequenceandcsv. Please note there is one less commit 78370bb827320660e2016ea7e42fedc5a66677dd was duplicated in both. I'm happy to roll that into a PR if necessary, although the purpose is really just to assist the t",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-150842944,150842944,
btcdrak,2015-10-27T00:34:06Z,The BIP68+OP_CSV combined branch has been updated https://github.com/bitcoin/bitcoin/compare/master...btcdrak:sequenceandcsv\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-151324888,151324888,
jgarzik,2015-11-13T08:01:24Z,ut ACK\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-156357583,156357583,
greenaddress,2015-11-19T12:05:46Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-158037452,158037452,
rustyrussell,2016-01-07T04:24:00Z,"Tested-by: Rusty Russell rusty@rustcorp.com.au\n\n(I merged both this and #6312  for the test, with only a trivial conflict to resolve).\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-169546151,169546151,
ajtowns,2016-01-28T16:15:26Z,"tested ACK (combined with #7184, #7187). https://github.com/ajtowns/op_csv-test -- lightning-style HTLCs using OP_CSV seem to perform as expected\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-176257453,176257453,
morcos,2016-02-02T15:30:03Z,"Personally, I would find this code cleaner and safer if VerifyLockTime was not encapsulated for reuse for nLockTime and nSequence checks.  The amount of repeated code is minimal and it would save the fact that we have to jump through a couple of hoops to reuse it now.\n\nThat said, if I'm the only one who feels this way, don't let me stand in the way.\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-178636856,178636856,
petertodd,2016-02-02T17:27:44Z,"@morcos I'll second being dubious about reuse.\n\nAnyway, ecosystem wide all this stuff will get re-written easily a dozen times in the various libraries...\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-178701138,178701138,
maaku,2016-02-02T17:50:18Z,"I think you both missed the point I was trying to make. I'm not saying the\ncode should be unified, just pointing that out as an example of something\nthat would be made more difficult by differing semantics. For better or\nworse the semantics of nLockTime are already firmly established, and it is\nbetter that both locks use the same semantics as that is less likely to\ncause problems than otherwi",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-178714052,178714052,
morcos,2016-02-02T17:57:11Z,"@maaku I wasn't necessarily conflating these two things.  I'm ok leaving the semantics for BIP 68 the same as they are now (and same as nLockTime).  I can't decide myself which option I like better.  \n\nSeparately I think, even if we leave the semantics the same in #7184, that this PR would be better served by not reusing VerifyLockTime in both places.\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-178720503,178720503,
btcdrak,2016-02-02T17:59:37Z,"In any case, this is just a differing opinion about implementation, which is a non-blocking nit.\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-178722422,178722422,
josephpoon,2016-02-03T04:24:34Z,Tested ACK using btcdrak's BIP68+OP_CSV combined branch https://github.com/bitcoin/bitcoin/compare/master...btcdrak:sequenceandcsv on regtest.\n\nThis pull request is _very_ useful for Lightning Network channels without pre-set expiries. Thanks~~~!\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-178998124,178998124,
maaku,2016-02-03T04:51:15Z,"This PR will be updated as soon as BIP 68 is merged.\nOn Feb 2, 2016 8:25 PM, ""josephpoon"" notifications@github.com wrote:\n\n> Tested ACK using btcdrak's BIP68+OP_CSV combined branch\n> master...btcdrak:sequenceandcsv\n> https://github.com/bitcoin/bitcoin/compare/master...btcdrak:sequenceandcsv\n> on regtest.\n> \n> This pull request is _very_ useful for Lightning Network channels without\n> pre-",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-179006062,179006062,
CodeShark,2016-02-06T20:36:57Z,Tested ACK using btcdrak's BIP68+OP_CSV combined branch master...btcdrak:sequenceandcsv on regtest.\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-180860229,180860229,
Roasbeef,2016-02-06T21:35:30Z,[Tested ACK](https://github.com/bitcoin/bitcoin/pull/7184#issuecomment-180681158). \n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-180870076,180870076,
NicolasDorier,2016-02-10T11:28:32Z,Tested ACK and as well replicated in NBitcoin (tests included)\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-182324514,182324514,
maaku,2016-02-11T20:08:53Z,Closing in favor of a future PR based on #7184 .\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-183044054,183044054,
btcdrak,2016-02-12T01:15:32Z,@maaku Why would you close a PR that has been getting heavy actual _tested_ review? _sigh_\n\nThere is zero need to close this PR. Once #7184 is merged this can be merged with a trivial conflict (caused by line breaks) or it could have a quick rebase. The code for this PR has been untouched for months so it is literally thoroughly functionally tested.\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-183139212,183139212,
jtimon,2016-02-12T02:40:55Z,"@btcdrak I don't see any lost in closing a PR.\nPRs are just like branches: petnames (in the case, in decimal) for commits.\nA link to the new PR and traceabilty problems are solved.\nTomorrow I'll reset HEAD^^^^^^^^ and commit a new PR with my name on it in a single commit. Once everybody has reviewed it there's no good reason why anybody would want to know who wrote the original commits or when.",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-183153922,183153922,
petertodd,2016-02-12T15:48:37Z,"@jtimon ""there's no good reason why anybody would want to know who wrote the original commits or when"" <- careful there, we should make sure all authors of the code in question are credited appropriately!\n\nWhile I haven't run into this too often yet, I'd even make a point of crediting people if I build upon their pull-reqs with total rewrites of the code; even in cases where 100% of the original",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-183381991,183381991,
laanwj,2016-02-12T15:51:20Z,Of course people should be properly credited for their work! Why is this even a discussion?\nMentioning someone's name in the commit message and pull request is a good way to do this.\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-183383074,183383074,
btcdrak,2016-02-12T16:17:53Z,I think i'll just reopen this in a separate PR and push the original work rebased.\n,https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-183393071,183393071,
maaku,2016-02-12T16:19:24Z,"It was closed because there is no way I know of to change the repo a PR draws from, I will not be maintaining this patch, and for security reasons I can no longer be adding outside collaborators on my own repo to maintain these pulls. Someone who will be maintaining this patch needs to open a new PR. Blame Github.\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-183393562,183393562,
btcdrak,2016-02-12T17:07:27Z,"@maaku sure, I'm just rebasing it and will open a new one shortly.\n\nEdit it has been moved to #7524\n",https://github.com/bitcoin/bitcoin/pull/6564#issuecomment-183415186,183415186,
dcousens,2015-08-17T23:51:21Z,Could this please read:  `Inverted sequence numbers above (or equal to) SEQUENCE_THRESHOLD are not consensus constrained`.\nNo comment at all is less confusing than this IMHO.\n,https://github.com/bitcoin/bitcoin/pull/6564#discussion_r37250910,37250910,src/script/interpreter.cpp
dcousens,2015-08-17T23:53:56Z,"Since this is repeatedly referred to as a relative lock time,  can we reflect that in the code? `relativeLockTime`?\n",https://github.com/bitcoin/bitcoin/pull/6564#discussion_r37251076,37251076,src/script/interpreter.cpp
dcousens,2015-08-18T00:00:55Z,"Why is this being put in the same function anyway?\nIt only shares 10 lines of code,  and adds another 10.\nIt could be easily a 10 line function and another 10 line function which then calls `CheckLockTime`.\n\nThis would have less branching,  would be simpler to test,  and have no default variables.\n\n`checker.CheckSequenceNumber(...` Would also make https://github.com/bitcoin/bitcoin/pull/6564",https://github.com/bitcoin/bitcoin/pull/6564#discussion_r37251487,37251487,src/script/interpreter.cpp
btcdrak,2015-10-01T18:11:49Z,s/inverse//\n,https://github.com/bitcoin/bitcoin/pull/6564#discussion_r40946716,40946716,src/script/interpreter.cpp
maaku,2015-10-01T19:10:28Z,"This email I got! Thanks I make the correction.\nOn Oct 1, 2015 11:12 AM, ""฿tcDrak"" notifications@github.com wrote:\n\n> In src/script/interpreter.cpp\n> https://github.com/bitcoin/bitcoin/pull/6564#discussion_r40946716:\n> \n> > -                    // 5-byte numeric operands.\n> > -                    const CScriptNum nSequence(stacktop(-1), fRequireMinimal, 5);\n> >   +\n> > -                  ",https://github.com/bitcoin/bitcoin/pull/6564#discussion_r40953841,40953841,src/script/interpreter.cpp
kanzure,2015-10-01T22:01:28Z,"nit: typo (""operandss"")\n",https://github.com/bitcoin/bitcoin/pull/6564#discussion_r40971800,40971800,src/test/data/tx_valid.json
instagibbs,2015-10-21T15:59:16Z,Should be &= not += I assume\n,https://github.com/bitcoin/bitcoin/pull/6564#discussion_r42643533,42643533,src/script/script.h
jmcorgan,2015-10-22T15:30:34Z,s/disabled/disables/\n,https://github.com/bitcoin/bitcoin/pull/6564#discussion_r42763516,42763516,src/primitives/transaction.h
afk11,2015-11-24T16:21:16Z,"We're not inverting the sequence number any more, should this line clarified/removed?\n",https://github.com/bitcoin/bitcoin/pull/6564#discussion_r45757306,45757306,src/script/interpreter.cpp
btcdrak,2015-11-24T17:45:51Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/6564#discussion_r45769228,45769228,src/script/interpreter.cpp
