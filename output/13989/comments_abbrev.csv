gmaxwell,2018-08-16T04:18:59Z,Interesting!  Benchmark results?,https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-413420935,413420935,
fingera,2018-08-16T05:19:24Z,"CPU: Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz\n\nhttps://github.com/fingera/bitcoin/tree/1-avx512-benchmark:\n\n```\n./src/bench/bench_bitcoin -filter=""FINGERA.+""\nFINGERA_MerkleRoot, 5, 800, 3.74455, 0.000933415, 0.000938638, 0.000937376\nFINGERA_MerkleRoot8Way, 5, 800, 6.24424, 0.00155711, 0.00157051, 0.00155929\nFINGERA_SHA256D64_1024, 5, 7400, 3.09212, 8.34755e-05, 8.36662e-05, 8.3",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-413428842,413428842,
fingera,2018-08-16T06:28:16Z,ci error: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79127,https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-413439727,413439727,
fingera,2018-08-16T07:47:23Z,Need to rebase?,https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-413456843,413456843,
laanwj,2018-08-27T11:23:30Z,so 40 to 46% faster? that's quite impressive,https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-416195640,416195640,
fingera,2018-08-28T01:37:49Z,"because avx512 added _mm512_rol_epi32 instrisic, may faster in the future.\ncan i do something for merge",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-416422296,416422296,
DrahtBot,2018-11-30T08:22:53Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-443127459,443127459,
dongcarl,2019-05-21T21:38:15Z,@fingera Would you like to rebase and keep working on this? I'd be happy to rebase for you.,https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-494568745,494568745,
fingera,2019-05-24T08:09:25Z,"> @fingera Would you like to rebase and keep working on this? I'd be happy to rebase for you.\n\nThankyou. Just wait for ci-mingw updates :)",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-495515276,495515276,
dongcarl,2019-05-24T15:22:50Z,"@fingera If I understand you correctly, the current `AC_LANG_PROGRAM` [here](https://github.com/bitcoin/bitcoin/pull/13989/files/2fa6fa40c34fea86ebd947ccf20da5a3049e5e62#diff-67e997bcfdac55191033d57a16d1408aR386) will not fail if `$host` is mingw. But if we use your longer `AC_LANG_PROGRAM` from https://github.com/fingera/bitcoin/commit/585a8c8b5b500ca8cb2bab4e2d231895a6298703, it will fail just l",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-495675768,495675768,
fingera,2019-05-27T01:23:52Z,"> @fingera If I understand you correctly, the current `AC_LANG_PROGRAM` [here](https://github.com/bitcoin/bitcoin/pull/13989/files/2fa6fa40c34fea86ebd947ccf20da5a3049e5e62#diff-67e997bcfdac55191033d57a16d1408aR386) will not fail if `$host` is mingw. But if we use your longer `AC_LANG_PROGRAM` from [fingera@585a8c8](https://github.com/fingera/bitcoin/commit/585a8c8b5b500ca8cb2bab4e2d231895a6298703)",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-496049015,496049015,
jamesob,2019-05-29T15:54:35Z,"Per microbenchmarks, this change appears to have some pretty substantial performance improvements.\n\nI've rebased this PR and run the microbenches on an Intel(R) Xeon(R) Silver 4116 CPU @ 2.10GHz. Notably, `micro.gcc.MerkleRoot` and `micro.gcc.SHA256D64_1024` are, respectively, 1.76x and 1.91x slower on master relative to this branch.\n\nKind of curious that we only see performance improvemen",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-496997274,496997274,
dongcarl,2019-05-29T16:46:01Z,"> > @fingera If I understand you correctly, the current `AC_LANG_PROGRAM` [here](https://github.com/bitcoin/bitcoin/pull/13989/files/2fa6fa40c34fea86ebd947ccf20da5a3049e5e62#diff-67e997bcfdac55191033d57a16d1408aR386) will not fail if `$host` is mingw. But if we use your longer `AC_LANG_PROGRAM` from [fingera@585a8c8](https://github.com/fingera/bitcoin/commit/585a8c8b5b500ca8cb2bab4e2d231895a629870",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-497017379,497017379,
jamesob,2019-05-30T15:56:19Z,"Did some additional profiling and it's not clear to me that this change is worth pursuing.\n\nSubsequent benching confirms that SHA-intensive microbenchmarks show improvement:\n\n![microbenches](https://user-images.githubusercontent.com/73197/58645577-a6386400-82d1-11e9-8819-cf493415caab.png)\n\nHowever when sampling IBD performance (500_000 -> 510_000), there's only a minor difference in me",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-497381424,497381424,
fingera,2019-05-31T06:40:22Z,"> Did some additional profiling and it's not clear to me that this change is worth pursuing.\n> \n> Subsequent benching confirms that SHA-intensive microbenchmarks show improvement:\n> \n> ![microbenches](https://user-images.githubusercontent.com/73197/58645577-a6386400-82d1-11e9-8819-cf493415caab.png)\n> \n> However when sampling IBD performance (500_000 -> 510_000), there's only a minor di",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-497594854,497594854,
fanquake,2019-06-24T08:24:31Z,@dongcarl Were you still interested in following up here?,https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-504910697,504910697,
dongcarl,2019-06-27T22:06:32Z,"lightly-tested ACK 90f282f4bfe8e052c674ff829239f6a4845d7397\n\n- Code changes look good. Checked that it matches all instances of what we do for `AVX2`.\n- Build system changes lightly tested on Linux machine w/o AVX512\n  - Correctly enables AVX512 based on compiler compatibility, not system capability\n  - Correctly disables AVX512 for gcc 4.8\n\n-----\n\nIf someone has OSX/Windows mach",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-506528762,506528762,
fanquake,2019-06-29T06:21:15Z,"> If someone has OSX/Windows machines, please test as well.\n\n@dongcarl Is there anything in particular you'd like tested? I can test on macOS.",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-506931816,506931816,
dongcarl,2019-07-04T18:51:49Z,"@fanquake Mostly if the build system changes work correctly. It seems clang added support for AVX512 here: https://github.com/llvm-mirror/clang/commit/dab7845798d673cabeef792451354aeb394cdd54\n\nNot sure what version that was tho.",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-508556916,508556916,
fanquake,2019-07-05T04:17:45Z,"@dongcarl No worries.\n\nTested on `macOS` with `Clang`. Looks like support for AVX512 arrived in LLVM in [3.9](https://releases.llvm.org/3.9.0/docs/ReleaseNotes.html):\n```bash\nclang --version\nApple LLVM version 10.0.1 (clang-1001.0.46.4)\nTarget: x86_64-apple-darwin18.6.0\n```\n\n```bash\n./configure | grep -i -E 'AVX'\nchecking whether C++ compiler accepts -mavx -mavx2... yes\nche",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-508623934,508623934,
laanwj,2019-07-05T13:14:24Z,"Concept ACK, I have no hardware to test this on.",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-508755027,508755027,
promag,2019-07-05T14:13:59Z,"I also don't have hardware to test, concept ACK.",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-508772229,508772229,
fingera,2019-07-06T01:37:59Z,"iMAC PRO or MAC PRO :)\nMost cloud servers are already supported: https://aws.amazon.com/ec2/instance-types/\nThe popularity of desktops maybe wait for the future :<",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-508887988,508887988,
sipa,2019-07-08T21:52:48Z,"Given the lack of common platforms where AVX512 occurs, and because IIRC on some of them it causes a clock speed reduction even for non-AVX512 instructions, it may not be wise to enable this by default at runtime. Does anyone have benchmarks that show otherwise?\n\nA possibility is turning the autodetection code into an actual benchmark that's run at startup, finding which code is fastest for wh",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-509406152,509406152,
fingera,2019-07-09T02:09:21Z,"> Given the lack of common platforms where AVX512 occurs, and because IIRC on some of them it causes a clock speed reduction even for non-AVX512 instructions, it may not be wise to enable this by default at runtime. Does anyone have benchmarks that show otherwise?\n> \n> A possibility is turning the autodetection code into an actual benchmark that's run at startup, finding which code is fastest ",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-509458114,509458114,
sipa,2019-07-09T02:22:55Z,"@fingera Maybe, seeing benchmarks would certainly be more convincing. Given that executing AVX512 instructions (as far as I know) may slow down other instructions, it may even be the case that in a microbenchmark AVX512-based SHA256 code is a win, but in realistic load conditions where SHA256 operations are interleaved with other things, it is not.",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-509461134,509461134,
fingera,2019-07-09T02:25:56Z,"@sipa Yes your are right\nhttps://en.wikichip.org/wiki/intel/frequency_behavior\n\nI think. this avx512 instrinsic is AVX2 Heavy mode\n\nMaybe bit scaning multiplication cause cpu to heavy mode? I think rolling bit(Or And) is light mode(non avx2?)",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-509461741,509461741,
fingera,2019-07-09T04:45:35Z,"https://github.com/travisdowns/avx-turbo @sipa  looks good\n```\nCPUID highest leaf  : [ dh]\nRunning as root     : [YES]\nMSR reads supported : [NO ]\nCPU pinning enabled : [YES]\nCPU supports AVX2   : [YES]\nCPU supports AVX-512: [YES]\nCPUID doesn't support leaf 0x15, falling back to manual TSC calibration.\ntsc_freq = 2499.9 MHz (from calibration loop)\nCPU brand string: Intel(R) Xeo",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-509485437,509485437,
fingera,2019-07-09T05:09:36Z,"https://github.com/fingera/avx-turbo add more instruction\navx512_vshift_t speed: 50%\navx512_imul speed: 90%\nExecution of complex instructions will cause the CPU clock upper and lower limits to drop at that time.\nI think we didn't use these instructions.",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-509490360,509490360,
dongcarl,2019-08-05T19:30:57Z,@fingera Could you show benchmarks of the instructions we're using? I'm most interested in the `epi32` instructions.,https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-518368045,518368045,
fanquake,2020-02-25T02:20:21Z,"We're still waiting on benchmarks, PR comments need addressing, and the user that opened this seems to have disappeared from GitHub. Going to mark as up for grabs and close for now.",https://github.com/bitcoin/bitcoin/pull/13989#issuecomment-590647839,590647839,
luke-jr,2018-08-28T08:13:29Z,Why is this disallowed on mingw? Add a comment...,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r213220472,213220472,configure.ac
fingera,2018-08-28T08:35:09Z,https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79127,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r213226689,213226689,configure.ac
luke-jr,2018-08-28T08:45:24Z,Shouldn't your below test cleanly fail in that scenario?,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r213229710,213229710,configure.ac
fingera,2018-08-28T09:01:16Z,Most servers are linux and support avx512?,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r213234826,213234826,configure.ac
luke-jr,2018-08-28T09:03:14Z,That's irrelevant...,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r213235537,213235537,configure.ac
fingera,2018-08-28T09:07:15Z,How do I do？ update ci mingw version?,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r213236743,213236743,configure.ac
luke-jr,2018-08-28T09:10:31Z,You shouldn't need to.,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r213237674,213237674,configure.ac
luke-jr,2018-08-28T09:14:23Z,Use `AC_LINK_IFELSE` here instead,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r213239044,213239044,configure.ac
fingera,2018-08-28T13:19:05Z,"it's not a link error, mingw generate seh directive assembly >xmm16, but assembler can't work with directive >xmm16.\n```\n.seh_savexmm	%xmm20, 256\n```\nsolution other:\nmake ac_lang_program more than 50 lines like this:\nhttps://github.com/fingera/bitcoin/commit/585a8c8b5b500ca8cb2bab4e2d231895a6298703",https://github.com/bitcoin/bitcoin/pull/13989#discussion_r213309221,213309221,configure.ac
fingera,2018-08-31T09:17:02Z,Add a little code to make mingw generate xmm register more than 16 is ok? @luke-jr ,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r214292032,214292032,configure.ac
practicalswift,2018-10-01T09:04:47Z,"Shouldn't the second parameter to `ShR ` (`n`) be an unsigned integer to match `_mm512_srli_epi32(__m512i, unsigned int)`?",https://github.com/bitcoin/bitcoin/pull/13989#discussion_r221537873,221537873,src/crypto/sha256_avx512.cpp
fingera,2018-10-15T01:27:16Z,"ok, thks. RoL because clang.",https://github.com/bitcoin/bitcoin/pull/13989#discussion_r225019820,225019820,src/crypto/sha256_avx512.cpp
practicalswift,2019-06-01T18:23:35Z,There is an implicit conversion from `unsigned int` to `int` here. Could be made explicit to make it easier to reason about correctness?,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r289614494,289614494,src/crypto/sha256_avx512.cpp
fingera,2019-06-03T01:35:48Z,"gcc and Intel: __m512i _mm512_srli_epi32 (__m512i a, unsigned int imm8)\nhttps://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm512_srli_epi32&expand=5515\nhttps://github.com/gcc-mirror/gcc/blob/master/gcc/config/i386/avx512fintrin.h\nclang: __m512i _mm512_srli_epi32(__m512i __A, int __B)\nhttps://clang.llvm.org/doxygen/avx512fintrin_8h_source.html#l05168\n\ndefined to macro?",https://github.com/bitcoin/bitcoin/pull/13989#discussion_r289668572,289668572,src/crypto/sha256_avx512.cpp
practicalswift,2019-06-03T06:30:47Z,"Oh, got it. Thanks for clarifying.\n\nAlso saw this old comment of mine: https://github.com/bitcoin/bitcoin/pull/13989#discussion_r221537873\n\nSorry for the confusion :-)",https://github.com/bitcoin/bitcoin/pull/13989#discussion_r289701957,289701957,src/crypto/sha256_avx512.cpp
theuni,2019-07-08T20:54:36Z,No need to put the whole file here. Just check the intrinsics themselves.,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r301295298,301295298,configure.ac
theuni,2019-07-08T21:02:19Z,Why?,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r301298208,301298208,src/crypto/sha256_avx512.cpp
fingera,2019-07-09T01:33:30Z,A big program to trigger MINGW-GCC BUG,https://github.com/bitcoin/bitcoin/pull/13989#discussion_r301364093,301364093,configure.ac
fingera,2019-07-09T01:43:18Z,"Does not seem to be used sha256.h\nKeep the same as other files(avx2 sse4)?",https://github.com/bitcoin/bitcoin/pull/13989#discussion_r301365637,301365637,src/crypto/sha256_avx512.cpp
