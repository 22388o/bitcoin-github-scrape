[
  {
    "sha": "d95ba75825d3b417d03cd2cce6bb944d5a679040",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTViYTc1ODI1ZDNiNDE3ZDAzY2QyY2NlNmJiOTQ0ZDVhNjc5MDQw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-01T12:57:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-01T12:58:02Z"
      },
      "message": "qt: Log messages with type>QtDebugMsg as non-debug\n\nMore important messages should end up in the log no matter\nif -debug=qt is set.",
      "tree": {
        "sha": "f401d481a0c96cfac35437373d53d87566c44ea8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f401d481a0c96cfac35437373d53d87566c44ea8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d95ba75825d3b417d03cd2cce6bb944d5a679040",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d95ba75825d3b417d03cd2cce6bb944d5a679040",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d95ba75825d3b417d03cd2cce6bb944d5a679040",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d95ba75825d3b417d03cd2cce6bb944d5a679040/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b29b5096128fe1a47677dbe93bf35115320f9036",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29b5096128fe1a47677dbe93bf35115320f9036",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b29b5096128fe1a47677dbe93bf35115320f9036"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "569facb499bee37b6ec3bcb70caa013122cfeb2b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d95ba75825d3b417d03cd2cce6bb944d5a679040/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d95ba75825d3b417d03cd2cce6bb944d5a679040/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=d95ba75825d3b417d03cd2cce6bb944d5a679040",
        "patch": "@@ -126,15 +126,15 @@ static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTrans\n #if QT_VERSION < 0x050000\n void DebugMessageHandler(QtMsgType type, const char *msg)\n {\n-    Q_UNUSED(type);\n-    LogPrint(\"qt\", \"GUI: %s\\n\", msg);\n+    const char *category = (type == QtDebugMsg) ? \"qt\" : NULL;\n+    LogPrint(category, \"GUI: %s\\n\", msg);\n }\n #else\n void DebugMessageHandler(QtMsgType type, const QMessageLogContext& context, const QString &msg)\n {\n-    Q_UNUSED(type);\n     Q_UNUSED(context);\n-    LogPrint(\"qt\", \"GUI: %s\\n\", qPrintable(msg));\n+    const char *category = (type == QtDebugMsg) ? \"qt\" : NULL;\n+    LogPrint(category, \"GUI: %s\\n\", QString::toStdString(msg));\n }\n #endif\n "
      }
    ]
  },
  {
    "sha": "33fdd99288fd257d6b5a3797a0a68aff649a3a71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2ZkZDk5Mjg4ZmQyNTdkNmI1YTM3OTdhMGE2OGFmZjY0OWEzYTcx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-01T13:21:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-01T13:21:17Z"
      },
      "message": "qt: Change serious messages from qDebug to qWarning\n\nBy changing the logging stream for warnings from qDebug to qWarning,\nthese will always be logged to debug.log.",
      "tree": {
        "sha": "f9bff170335fee185c37e40ea76eb59832f3f839",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9bff170335fee185c37e40ea76eb59832f3f839"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33fdd99288fd257d6b5a3797a0a68aff649a3a71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33fdd99288fd257d6b5a3797a0a68aff649a3a71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33fdd99288fd257d6b5a3797a0a68aff649a3a71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33fdd99288fd257d6b5a3797a0a68aff649a3a71/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d95ba75825d3b417d03cd2cce6bb944d5a679040",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d95ba75825d3b417d03cd2cce6bb944d5a679040",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d95ba75825d3b417d03cd2cce6bb944d5a679040"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "8d5284d5e9ff8d9264d5edc6f5cc2f92da0b6d7e",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33fdd99288fd257d6b5a3797a0a68aff649a3a71/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33fdd99288fd257d6b5a3797a0a68aff649a3a71/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=33fdd99288fd257d6b5a3797a0a68aff649a3a71",
        "patch": "@@ -114,7 +114,7 @@ class AddressTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                qDebug() << \"AddressTablePriv::updateEntry : Warning: Got CT_NEW, but entry is already in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_NEW, but entry is already in model\";\n                 break;\n             }\n             parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex);\n@@ -124,7 +124,7 @@ class AddressTablePriv\n         case CT_UPDATED:\n             if(!inModel)\n             {\n-                qDebug() << \"AddressTablePriv::updateEntry : Warning: Got CT_UPDATED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_UPDATED, but entry is not in model\";\n                 break;\n             }\n             lower->type = newEntryType;\n@@ -134,7 +134,7 @@ class AddressTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                qDebug() << \"AddressTablePriv::updateEntry : Warning: Got CT_DELETED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_DELETED, but entry is not in model\";\n                 break;\n             }\n             parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);"
      },
      {
        "sha": "acce42e20376874d3688761384d143141698a23e",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33fdd99288fd257d6b5a3797a0a68aff649a3a71/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33fdd99288fd257d6b5a3797a0a68aff649a3a71/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=33fdd99288fd257d6b5a3797a0a68aff649a3a71",
        "patch": "@@ -29,18 +29,18 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n {\n     bool parseOK = paymentRequest.ParseFromArray(data.data(), data.size());\n     if (!parseOK) {\n-        qDebug() << \"PaymentRequestPlus::parse : Error parsing payment request\";\n+        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment request\";\n         return false;\n     }\n     if (paymentRequest.payment_details_version() > 1) {\n-        qDebug() << \"PaymentRequestPlus::parse : Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n+        qWarning() << \"PaymentRequestPlus::parse : Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n         return false;\n     }\n \n     parseOK = details.ParseFromString(paymentRequest.serialized_payment_details());\n     if (!parseOK)\n     {\n-        qDebug() << \"PaymentRequestPlus::parse : Error parsing payment details\";\n+        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment details\";\n         paymentRequest.Clear();\n         return false;\n     }\n@@ -80,17 +80,17 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         digestAlgorithm = EVP_sha1();\n     }\n     else if (paymentRequest.pki_type() == \"none\") {\n-        qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: pki_type == none\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: pki_type == none\";\n         return false;\n     }\n     else {\n-        qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n+        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n         return false;\n     }\n \n     payments::X509Certificates certChain;\n     if (!certChain.ParseFromString(paymentRequest.pki_data())) {\n-        qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: error parsing pki_data\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error parsing pki_data\";\n         return false;\n     }\n \n@@ -100,12 +100,12 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         QByteArray certData(certChain.certificate(i).data(), certChain.certificate(i).size());\n         QSslCertificate qCert(certData, QSsl::Der);\n         if (currentTime < qCert.effectiveDate() || currentTime > qCert.expiryDate()) {\n-            qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: certificate expired or not yet active: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate expired or not yet active: \" << qCert;\n             return false;\n         }\n #if QT_VERSION >= 0x050000\n         if (qCert.isBlacklisted()) {\n-            qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: certificate blacklisted: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate blacklisted: \" << qCert;\n             return false;\n         }\n #endif\n@@ -115,7 +115,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             certs.push_back(cert);\n     }\n     if (certs.empty()) {\n-        qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: empty certificate chain\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: empty certificate chain\";\n         return false;\n     }\n \n@@ -131,7 +131,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     // load the signing cert into it and verify.\n     X509_STORE_CTX *store_ctx = X509_STORE_CTX_new();\n     if (!store_ctx) {\n-        qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: error creating X509_STORE_CTX\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error creating X509_STORE_CTX\";\n         return false;\n     }\n \n@@ -183,7 +183,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     catch (SSLVerifyError& err)\n     {\n         fResult = false;\n-        qDebug() << \"PaymentRequestPlus::getMerchant : SSL error: \" << err.what();\n+        qWarning() << \"PaymentRequestPlus::getMerchant : SSL error: \" << err.what();\n     }\n \n     if (website)"
      },
      {
        "sha": "2049d65073dca9dd56b380673aeeac99c0f74065",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33fdd99288fd257d6b5a3797a0a68aff649a3a71/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33fdd99288fd257d6b5a3797a0a68aff649a3a71/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=33fdd99288fd257d6b5a3797a0a68aff649a3a71",
        "patch": "@@ -90,7 +90,7 @@ static QList<QString> savedPaymentRequests;\n \n static void ReportInvalidCertificate(const QSslCertificate& cert)\n {\n-    qDebug() << \"ReportInvalidCertificate : Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n+    qWarning() << \"ReportInvalidCertificate : Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n }\n \n //\n@@ -161,7 +161,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n             continue;\n         }\n     }\n-    qDebug() << \"PaymentServer::LoadRootCAs : Loaded \" << nRootCerts << \" root certificates\";\n+    qWarning() << \"PaymentServer::LoadRootCAs : Loaded \" << nRootCerts << \" root certificates\";\n \n     // Project for another day:\n     // Fetch certificate revocation lists, and add them to certStore.\n@@ -223,7 +223,7 @@ bool PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n         {\n             // Printing to debug.log is about the best we can do here, the\n             // GUI hasn't started yet so we can't pop up a message box.\n-            qDebug() << \"PaymentServer::ipcSendCommandLine : Payment request file does not exist: \" << arg;\n+            qWarning() << \"PaymentServer::ipcSendCommandLine : Payment request file does not exist: \" << arg;\n         }\n     }\n     return true;\n@@ -403,7 +403,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             }\n             else\n             {\n-                qDebug() << \"PaymentServer::handleURIOrFile : Invalid URL: \" << fetchUrl;\n+                qWarning() << \"PaymentServer::handleURIOrFile : Invalid URL: \" << fetchUrl;\n                 emit message(tr(\"URI handling\"),\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n@@ -476,13 +476,13 @@ bool PaymentServer::readPaymentRequest(const QString& filename, PaymentRequestPl\n     QFile f(filename);\n     if (!f.open(QIODevice::ReadOnly))\n     {\n-        qDebug() << \"PaymentServer::readPaymentRequest : Failed to open \" << filename;\n+        qWarning() << \"PaymentServer::readPaymentRequest : Failed to open \" << filename;\n         return false;\n     }\n \n     if (f.size() > MAX_PAYMENT_REQUEST_SIZE)\n     {\n-        qDebug() << \"PaymentServer::readPaymentRequest : \" << filename << \" too large\";\n+        qWarning() << \"PaymentServer::readPaymentRequest : \" << filename << \" too large\";\n         return false;\n     }\n \n@@ -624,7 +624,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n         else {\n             // This should never happen, because sending coins should have\n             // just unlocked the wallet and refilled the keypool.\n-            qDebug() << \"PaymentServer::fetchPaymentACK : Error getting refund key, refund_to not set\";\n+            qWarning() << \"PaymentServer::fetchPaymentACK : Error getting refund key, refund_to not set\";\n         }\n     }\n \n@@ -636,7 +636,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     }\n     else {\n         // This should never happen, either.\n-        qDebug() << \"PaymentServer::fetchPaymentACK : Error serializing payment message\";\n+        qWarning() << \"PaymentServer::fetchPaymentACK : Error serializing payment message\";\n     }\n }\n \n@@ -649,7 +649,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             .arg(reply->request().url().toString())\n             .arg(reply->errorString());\n \n-        qDebug() << \"PaymentServer::netRequestFinished : \" << msg;\n+        qWarning() << \"PaymentServer::netRequestFinished : \" << msg;\n         emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         return;\n     }\n@@ -663,7 +663,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n         SendCoinsRecipient recipient;\n         if (!request.parse(data))\n         {\n-            qDebug() << \"PaymentServer::netRequestFinished : Error parsing payment request\";\n+            qWarning() << \"PaymentServer::netRequestFinished : Error parsing payment request\";\n             emit message(tr(\"Payment request error\"),\n                 tr(\"Payment request can not be parsed!\"),\n                 CClientUIInterface::MSG_ERROR);\n@@ -681,7 +681,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             QString msg = tr(\"Bad response from server %1\")\n                 .arg(reply->request().url().toString());\n \n-            qDebug() << \"PaymentServer::netRequestFinished : \" << msg;\n+            qWarning() << \"PaymentServer::netRequestFinished : \" << msg;\n             emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         }\n         else\n@@ -697,7 +697,7 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n \n     QString errString;\n     foreach (const QSslError& err, errs) {\n-        qDebug() << \"PaymentServer::reportSslErrors : \" << err;\n+        qWarning() << \"PaymentServer::reportSslErrors : \" << err;\n         errString += err.errorString() + \"\\n\";\n     }\n     emit message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "a935752246bf4352180512e1f5953af02fca71f3",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33fdd99288fd257d6b5a3797a0a68aff649a3a71/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33fdd99288fd257d6b5a3797a0a68aff649a3a71/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=33fdd99288fd257d6b5a3797a0a68aff649a3a71",
        "patch": "@@ -130,12 +130,12 @@ class TransactionTablePriv\n             case CT_NEW:\n                 if(inModel)\n                 {\n-                    qDebug() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is already in model\";\n+                    qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is already in model\";\n                     break;\n                 }\n                 if(!inWallet)\n                 {\n-                    qDebug() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is not in wallet\";\n+                    qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is not in wallet\";\n                     break;\n                 }\n                 if(showTransaction)\n@@ -159,7 +159,7 @@ class TransactionTablePriv\n             case CT_DELETED:\n                 if(!inModel)\n                 {\n-                    qDebug() << \"TransactionTablePriv::updateWallet : Warning: Got CT_DELETED, but transaction is not in model\";\n+                    qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_DELETED, but transaction is not in model\";\n                     break;\n                 }\n                 // Removed -- remove entire transaction from table"
      },
      {
        "sha": "f8f9bf45b30fc5f404eb4fc490e7ea9c75e93d62",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33fdd99288fd257d6b5a3797a0a68aff649a3a71/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33fdd99288fd257d6b5a3797a0a68aff649a3a71/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=33fdd99288fd257d6b5a3797a0a68aff649a3a71",
        "patch": "@@ -45,13 +45,13 @@ void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, c\n     typedef BOOL (WINAPI *PSHUTDOWNBRCREATE)(HWND, LPCWSTR);\n     PSHUTDOWNBRCREATE shutdownBRCreate = (PSHUTDOWNBRCREATE)GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\");\n     if (shutdownBRCreate == NULL) {\n-        qDebug() << \"registerShutdownBlockReason : GetProcAddress for ShutdownBlockReasonCreate failed\";\n+        qWarning() << \"registerShutdownBlockReason : GetProcAddress for ShutdownBlockReasonCreate failed\";\n         return;\n     }\n \n     if (shutdownBRCreate(mainWinId, strReason.toStdWString().c_str()))\n-        qDebug() << \"registerShutdownBlockReason : Successfully registered: \" + strReason;\n+        qWarning() << \"registerShutdownBlockReason : Successfully registered: \" + strReason;\n     else\n-        qDebug() << \"registerShutdownBlockReason : Failed to register: \" + strReason;\n+        qWarning() << \"registerShutdownBlockReason : Failed to register: \" + strReason;\n }\n #endif"
      }
    ]
  }
]