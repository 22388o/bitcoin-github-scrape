[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282734815",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-282734815",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 282734815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjczNDgxNQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-27T14:26:49Z",
    "updated_at": "2017-02-27T14:26:49Z",
    "author_association": "MEMBER",
    "body": "I've run the extended tests locally and they all pass.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282734815/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283008581",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-283008581",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 283008581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzAwODU4MQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T10:55:59Z",
    "updated_at": "2017-02-28T10:55:59Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283008581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283057363",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-283057363",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 283057363,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzA1NzM2Mw==",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T14:43:44Z",
    "updated_at": "2017-02-28T14:43:44Z",
    "author_association": "MEMBER",
    "body": "I appreciate the desire for using best coding practices in the qa tree, and I certainly would like to improve my own test-writing habits. But I think we should be mindful of the tradeoffs of applying best practices for software that changes infrequently when applied to software that is written iteratively.\r\n\r\nI tend to think of the `test_framework/` directory as the former category; the test frameworks and utilities should not change often, except when we have a better idea of how to do our test writing, and then we should think carefully about the design changes we're making.\r\n\r\nBut I tend to think of the tests themselves as more iterative, because as we make changes to bitcoind, we often find ourselves needing to update existing tests.  And I've personally found that even when I write new tests, I tend to write them iteratively, as I'll tend to test part of a PR, get it working, then continue to add more tests as I review more of a PR.  And I think it'd be tedious to disallow wildcard imports for some of the contents in `test_framework/`, particularly the message types and data structures in `mininode.py` and the script op codes in `script.py`.\r\n\r\nSo I'd propose the following compromise: split the message types and script op codes out into their own files, get rid of all wildcard imports from `test_framework/`, but don't bother getting rid of wildcard imports from the new message type and script op code files.\r\n\r\nOn a related note, if we are going to start instituting style guidelines for the qa tree (which I do think is a good idea, whether we go with my proposal or not), we should write up what those are.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283057363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283088632",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-283088632",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 283088632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzA4ODYzMg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T16:26:03Z",
    "updated_at": "2017-02-28T16:26:03Z",
    "author_association": "MEMBER",
    "body": "Thanks for taking the time to look at this @laanwj and @sdaftuar \r\n\r\n> So I'd propose the following compromise: split the message types and script op codes out into their own files\r\n\r\nI'm currently working on a PR to move the message classes, bitcoin datastructure classes and serialization/deserialization functions into their own `primitives.py` module. I'll leave script op codes in `scripts.py` for now (unless you strongly believe they should also live in primitives).\r\n\r\n> get rid of all wildcard imports from test_framework/\r\n\r\ndone\r\n\r\n> don't bother getting rid of wildcard imports from the new message type and script op code files.\r\n\r\nI'd still much prefer to remove wildcards and use something like `import test_framework.script as bts` and `import test_framework.primitives as btp` and then calling the script or primitive using the dotted notation.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283088632/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283165452",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-283165452",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 283165452,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzE2NTQ1Mg==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T21:27:56Z",
    "updated_at": "2017-02-28T21:28:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think I'd be in favor of making every import individually qualified (not sure right term). EG:\r\n\r\n```python\r\n# Current master\r\nimport * from math\r\n\r\n# jnewbery current proposal\r\nfrom math import (sin,\r\n                  cos,\r\n                  pow)\r\n\r\n# my proposal\r\nfrom math import sin\r\nfrom math import cos\r\nfrom math import pow\r\n```\r\n\r\nEven though this has extra `from math import` comparatively, it makes it much easier to see what a diff is changing.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283165452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283168637",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-283168637",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 283168637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzE2ODYzNw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T21:41:27Z",
    "updated_at": "2017-02-28T21:41:27Z",
    "author_association": "MEMBER",
    "body": "@JeremyRubin nice idea. I've never seen that style before, but I think I like it! I was a little concerned about  whether python would execute the imported module multiple times, but I've done a quick test and it seems that it's smart enough to not do that.\r\n\r\n(Yet) another option that might satisfy @sdaftuar is to explicitly index what names should be exportable from the test_framework package modules using the [\\_\\_all\\_\\_ dunder](https://docs.python.org/3/tutorial/modules.html#importing-from-a-package). We could explicitly mark the bitcoin and script primitives as exportable and then use `import * from script` and `import * from primitives` in the test scripts without polluting our namespace.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283168637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283198485",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-283198485",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 283198485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzE5ODQ4NQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T23:46:47Z",
    "updated_at": "2017-02-28T23:46:47Z",
    "author_association": "MEMBER",
    "body": "I like the suggestion by @jnewbery with using named imports as well as the `__all__` syntax. Imo it is most appropriate to use the approach that makes most sense for each module.\r\n\r\nE.g:\r\n* Some util functions such as `stop_node(# ,# )` should never be imported, but accessed through the framework instance. I.e. `self.stop_node(i)`.\r\n* Node specific methods and variables can be imported by \"import as\". I.e. `import mininode as mn; mn.COIN;`\r\n* Plain utility functions such as double sha256 should be accessible without a named prefix, importable by wildcard or explicit import, whatever the author prefers.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283198485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283240740",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-283240740",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 283240740,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzI0MDc0MA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T04:19:41Z",
    "updated_at": "2017-03-01T04:19:41Z",
    "author_association": "MEMBER",
    "body": "@MarcoFalke - agree with everything you say, and it's what we should be aiming for. I think we should do the following:\r\n\r\n- take this PR, which removes wildcards entirely\r\n- I already have a branch ready which moves the primitives from mininode into their own module. I'll update that branch to include module-level __all__ variables for primitives.py and script.py and make a PR for that. We can also update test cases which use many primitives and scripts (eg p2p-compactblocks.py) to use the wildcard imports. Authors of future testcases can choose the import style they prefer.\r\n- util functions that shouldn't be exported from outside the package should be updated to have a leading underscore to mark them as private. This doesn't have any functional impact, but is a signal to users of the package that the function is private and shouldn't be imported.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283240740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283284097",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-283284097",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 283284097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzI4NDA5Nw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T09:06:23Z",
    "updated_at": "2017-03-01T09:06:23Z",
    "author_association": "MEMBER",
    "body": "@sdaftuar Point taken. With software it is incredibly easy to spend countless hours on ancillary things that don't directly contribute to the goal in mind, sometimes to optimize arbitrary theoretical concerns. You write a lot of tests, so if you think this makes making new and better tests more work in practice, we should listen to that and take a different approach.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283284097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284795505",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-284795505",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 284795505,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDc5NTUwNQ==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T17:29:32Z",
    "updated_at": "2017-03-07T17:29:32Z",
    "author_association": "MEMBER",
    "body": "Concept ACK\r\n> On a related note, if we are going to start instituting style guidelines for the qa tree, we should write up what those are.\r\n\r\nCompletely agree.\r\nNeeds rebase.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284795505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284820967",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-284820967",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 284820967,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDgyMDk2Nw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T18:58:34Z",
    "updated_at": "2017-03-07T18:58:34Z",
    "author_association": "MEMBER",
    "body": "Thanks @jtimon \r\n\r\n@MarcoFalke is it worth me rebasing this? I think it's the right direction to move in, but it seems like this PR might be a bit too much for people to take in one bite.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284820967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284829758",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-284829758",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 284829758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDgyOTc1OA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T19:26:39Z",
    "updated_at": "2017-03-07T19:26:39Z",
    "author_association": "MEMBER",
    "body": "The discussion above was indeed helpful to get a feeling about the\ndirection we want to take. However, I don't think the pull in its current\nform is a net gain. As basically every import statement is changed, there\nwill be numerous merge conflicts; And removing the wildcards as done\ncurrently is not helpful, considering that it makes writing tests harder.\n\nSo I'd rather defer this for now.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284829758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284832242",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-284832242",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 284832242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDgzMjI0Mg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-07T19:31:19Z",
    "updated_at": "2017-03-07T19:31:19Z",
    "author_association": "MEMBER",
    "body": "ok, I'll break this down into smaller chunks, and hopefully nudge the test_framework directory in the right direction.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284832242/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284959654",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#issuecomment-284959654",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9876",
    "id": 284959654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDk1OTY1NA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-08T06:32:51Z",
    "updated_at": "2017-03-08T06:32:51Z",
    "author_association": "MEMBER",
    "body": "Hope to see \"increases test coverage by XX%\" for the next test-related pull instead :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284959654/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103271383",
    "pull_request_review_id": 24052801,
    "id": 103271383,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzI3MTM4Mw==",
    "diff_hunk": "@@ -4,15 +4,93 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test segwit transactions and blocks on P2P network.\"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n-from test_framework.key import CECKey, CPubKey\n-import time\n-import random\n from binascii import hexlify\n+import random\n+import struct\n+import time\n+\n+from test_framework.blocktools import (create_block,\n+                                       create_coinbase,\n+                                       add_witness_commitment,\n+                                       WITNESS_COMMITMENT_HEADER)\n+from test_framework.key import (CECKey,\n+                                CPubKey)\n+from test_framework.mininode import (CBlock,\n+                                     CBlockHeader,\n+                                     CInv,\n+                                     COutPoint,\n+                                     CTransaction,\n+                                     CTxIn,\n+                                     CTxInWitness,\n+                                     CTxOut,\n+                                     CTxWitness,\n+                                     MAX_BLOCK_BASE_SIZE,\n+                                     MSG_WITNESS_FLAG,\n+                                     NODE_NETWORK,\n+                                     NODE_WITNESS,\n+                                     NetworkThread,\n+                                     NodeConn,\n+                                     NodeConnCB,\n+                                     bytes_to_hex_str,\n+                                     hash256,\n+                                     hex_str_to_bytes,\n+                                     mininode_lock,\n+                                     msg_block,\n+                                     msg_getdata,\n+                                     msg_headers,\n+                                     msg_inv,\n+                                     msg_ping,\n+                                     msg_pong,\n+                                     msg_tx,\n+                                     msg_witness_block,\n+                                     msg_witness_tx,\n+                                     ser_uint256,\n+                                     ser_vector,\n+                                     sha256,\n+                                     uint256_from_str)",
    "path": "qa/rpc-tests/p2p-segwit.py",
    "position": 55,
    "original_position": 55,
    "commit_id": "329f0c631bc4d171ea12460da2a53add7c81893a",
    "original_commit_id": "f287e8de1edf9a0b342b3e5b98b88e7bb1a2bd47",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is fine, but the import list is super long. Did you use a tool to generate this? Wondering if it would be difficult to just replace all this with `from test_framework import mininode` and then add `mininode.` qualifiers where needed.\r\n\r\nAlternately, maybe different formatting would be preferable. I've been using [yapf](https://github.com/google/yapf) for new code I write, which gives\r\n\r\n```\r\n+from test_framework.script import (CScript, CScriptNum, CScriptOp, CTransaction, CTxOut, OP_0, OP_1, OP_16, OP_2DROP,\r\n+                                   OP_CHECKMULTISIG, OP_CHECKSIG, OP_DROP, OP_DUP, OP_ELSE, OP_ENDIF, OP_EQUAL,\r\n+                                   OP_EQUALVERIFY, OP_HASH160, OP_IF, OP_RETURN, OP_TRUE, SIGHASH_ALL,\r\n+                                   SIGHASH_ANYONECANPAY, SIGHASH_NONE, SIGHASH_SINGLE, SegwitVersion1SignatureHash,\r\n+                                   SignatureHash, hash160, hash256, ser_uint256, sha256, uint256_from_str)\r\n```\r\n\r\nwith column_limit=119.",
    "created_at": "2017-02-27T18:04:00Z",
    "updated_at": "2017-02-28T17:53:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#discussion_r103271383",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9876",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103271383"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9876#discussion_r103271383"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9876"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103271383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 50,
    "original_line": 50,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103427772",
    "pull_request_review_id": 24211347,
    "id": 103427772,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQyNzc3Mg==",
    "diff_hunk": "@@ -4,15 +4,93 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test segwit transactions and blocks on P2P network.\"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n-from test_framework.key import CECKey, CPubKey\n-import time\n-import random\n from binascii import hexlify\n+import random\n+import struct\n+import time\n+\n+from test_framework.blocktools import (create_block,\n+                                       create_coinbase,\n+                                       add_witness_commitment,\n+                                       WITNESS_COMMITMENT_HEADER)\n+from test_framework.key import (CECKey,\n+                                CPubKey)\n+from test_framework.mininode import (CBlock,\n+                                     CBlockHeader,\n+                                     CInv,\n+                                     COutPoint,\n+                                     CTransaction,\n+                                     CTxIn,\n+                                     CTxInWitness,\n+                                     CTxOut,\n+                                     CTxWitness,\n+                                     MAX_BLOCK_BASE_SIZE,\n+                                     MSG_WITNESS_FLAG,\n+                                     NODE_NETWORK,\n+                                     NODE_WITNESS,\n+                                     NetworkThread,\n+                                     NodeConn,\n+                                     NodeConnCB,\n+                                     bytes_to_hex_str,\n+                                     hash256,\n+                                     hex_str_to_bytes,\n+                                     mininode_lock,\n+                                     msg_block,\n+                                     msg_getdata,\n+                                     msg_headers,\n+                                     msg_inv,\n+                                     msg_ping,\n+                                     msg_pong,\n+                                     msg_tx,\n+                                     msg_witness_block,\n+                                     msg_witness_tx,\n+                                     ser_uint256,\n+                                     ser_vector,\n+                                     sha256,\n+                                     uint256_from_str)",
    "path": "qa/rpc-tests/p2p-segwit.py",
    "position": 55,
    "original_position": 55,
    "commit_id": "329f0c631bc4d171ea12460da2a53add7c81893a",
    "original_commit_id": "f287e8de1edf9a0b342b3e5b98b88e7bb1a2bd47",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "One item per line is nice for diff-ing, though. Collapsing them can look somewhat nicer, however imagine having to insert an item in the middle and re-layouting. This will change *all* the lines, causing collisions with other patches.\r\n\r\nFor this reason we also use one-filename-per-line in makefiles, even though it results in long files.",
    "created_at": "2017-02-28T10:55:45Z",
    "updated_at": "2017-02-28T17:53:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#discussion_r103427772",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9876",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103427772"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9876#discussion_r103427772"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9876"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103427772/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 50,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 103271383
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103490979",
    "pull_request_review_id": 24278934,
    "id": 103490979,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzQ5MDk3OQ==",
    "diff_hunk": "@@ -4,15 +4,93 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test segwit transactions and blocks on P2P network.\"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n-from test_framework.key import CECKey, CPubKey\n-import time\n-import random\n from binascii import hexlify\n+import random\n+import struct\n+import time\n+\n+from test_framework.blocktools import (create_block,\n+                                       create_coinbase,\n+                                       add_witness_commitment,\n+                                       WITNESS_COMMITMENT_HEADER)\n+from test_framework.key import (CECKey,\n+                                CPubKey)\n+from test_framework.mininode import (CBlock,\n+                                     CBlockHeader,\n+                                     CInv,\n+                                     COutPoint,\n+                                     CTransaction,\n+                                     CTxIn,\n+                                     CTxInWitness,\n+                                     CTxOut,\n+                                     CTxWitness,\n+                                     MAX_BLOCK_BASE_SIZE,\n+                                     MSG_WITNESS_FLAG,\n+                                     NODE_NETWORK,\n+                                     NODE_WITNESS,\n+                                     NetworkThread,\n+                                     NodeConn,\n+                                     NodeConnCB,\n+                                     bytes_to_hex_str,\n+                                     hash256,\n+                                     hex_str_to_bytes,\n+                                     mininode_lock,\n+                                     msg_block,\n+                                     msg_getdata,\n+                                     msg_headers,\n+                                     msg_inv,\n+                                     msg_ping,\n+                                     msg_pong,\n+                                     msg_tx,\n+                                     msg_witness_block,\n+                                     msg_witness_tx,\n+                                     ser_uint256,\n+                                     ser_vector,\n+                                     sha256,\n+                                     uint256_from_str)",
    "path": "qa/rpc-tests/p2p-segwit.py",
    "position": 55,
    "original_position": 55,
    "commit_id": "329f0c631bc4d171ea12460da2a53add7c81893a",
    "original_commit_id": "f287e8de1edf9a0b342b3e5b98b88e7bb1a2bd47",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I prefer the way @ryanofsky's formatting looks, but I kept the imports as one-item-per-line for the reason @laanwj gives.",
    "created_at": "2017-02-28T16:14:21Z",
    "updated_at": "2017-02-28T17:53:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9876#discussion_r103490979",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9876",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103490979"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9876#discussion_r103490979"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9876"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/103490979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 50,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 103271383
  }
]