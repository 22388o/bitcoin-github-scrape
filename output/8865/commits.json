[
  {
    "sha": "87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2U3ZDcyODA3MzljY2NmYWJhZmZiYmZiYmJjZmEyMWU5NDNkYTNh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-09-30T21:40:03Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T16:35:07Z"
      },
      "message": "Make validationinterface.UpdatedBlockTip more verbose\n\nIn anticipation of making all the callbacks out of block processing\nflow through it. Note that vHashes will always have something in it\nsince pindexFork != pindexNewTip.",
      "tree": {
        "sha": "07cbce45120a9da86345716213c2203b65e250d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07cbce45120a9da86345716213c2203b65e250d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e5cbb209d4aeb8c2e4c58c92bf214759998056"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "37a0a2f30d055e261ad7de2e85d5a10675c52fa7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "patch": "@@ -3099,11 +3099,9 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                         }\n                     });\n                 }\n-                // Notify external listeners about the new tip.\n-                if (!vHashes.empty()) {\n-                    GetMainSignals().UpdatedBlockTip(pindexNewTip);\n-                }\n             }\n+            // Notify external listeners about the new tip.\n+            GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n         }\n     } while (pindexNewTip != pindexMostWork);\n     CheckBlockIndex(chainparams.GetConsensus());"
      },
      {
        "sha": "d0aa7b5f393ff2f139ab10c3588931e8a70647df",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "patch": "@@ -13,7 +13,7 @@ CMainSignals& GetMainSignals()\n }\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1));\n+    g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n@@ -33,7 +33,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n-    g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1));\n+    g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n }\n \n void UnregisterAllValidationInterfaces() {"
      },
      {
        "sha": "683f8fe20cbae52f0d92a25811c3cd2e405a659c",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "patch": "@@ -33,7 +33,7 @@ void SyncWithWallets(const CTransaction& tx, const CBlockIndex *pindex, int posI\n \n class CValidationInterface {\n protected:\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindex) {}\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n@@ -49,7 +49,7 @@ class CValidationInterface {\n \n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n-    boost::signals2::signal<void (const CBlockIndex *)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n     boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */"
      },
      {
        "sha": "020cdfbdc724a8ec99df65c5219742c1178b7fae",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "patch": "@@ -124,12 +124,15 @@ void CZMQNotificationInterface::Shutdown()\n     }\n }\n \n-void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindex)\n+void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n {\n+    if (fInitialDownload)\n+        return;\n+\n     for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n     {\n         CZMQAbstractNotifier *notifier = *i;\n-        if (notifier->NotifyBlock(pindex))\n+        if (notifier->NotifyBlock(pindexNew))\n         {\n             i++;\n         }"
      },
      {
        "sha": "037470ec17f9f398b9838471b4995b396869ab5e",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "patch": "@@ -25,7 +25,7 @@ class CZMQNotificationInterface : public CValidationInterface\n \n     // CValidationInterface\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n-    void UpdatedBlockTip(const CBlockIndex *pindex);\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n \n private:\n     CZMQNotificationInterface();"
      }
    ]
  },
  {
    "sha": "0278fb5f48ae9e42ec0772f85e201051077f633c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjc4ZmI1ZjQ4YWU5ZTQyZWMwNzcyZjg1ZTIwMTA1MTA3N2Y2MzNj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-09-30T22:19:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T16:35:07Z"
      },
      "message": "Remove duplicate nBlocksEstimate cmp (we already checked IsIBD())",
      "tree": {
        "sha": "7fb5a55e2c64d3ae5860ab9a326dbac7c81f4b3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fb5a55e2c64d3ae5860ab9a326dbac7c81f4b3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0278fb5f48ae9e42ec0772f85e201051077f633c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0278fb5f48ae9e42ec0772f85e201051077f633c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0278fb5f48ae9e42ec0772f85e201051077f633c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0278fb5f48ae9e42ec0772f85e201051077f633c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87e7d7280739cccfabaffbbfbbbcfa21e943da3a"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 2,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2eb641e543f6ed26eb771b76b0848313c2c1d878",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0278fb5f48ae9e42ec0772f85e201051077f633c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0278fb5f48ae9e42ec0772f85e201051077f633c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0278fb5f48ae9e42ec0772f85e201051077f633c",
        "patch": "@@ -3087,12 +3087,9 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                     }\n                 }\n                 // Relay inventory, but don't relay old inventory during initial block download.\n-                int nBlockEstimate = 0;\n-                if (fCheckpointsEnabled)\n-                    nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n                 if(connman) {\n-                    connman->ForEachNode([nNewHeight, nBlockEstimate, &vHashes](CNode* pnode) {\n-                        if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n+                    connman->ForEachNode([nNewHeight, &vHashes](CNode* pnode) {\n+                        if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 0)) {\n                             BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n                                 pnode->PushBlockHash(hash);\n                             }"
      }
    ]
  },
  {
    "sha": "aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWZjYjdiNzBjOTIzY2NkMzQxMzI5YTJkNWUyMjIzOGRjMTRhYzNi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:36:11Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:36:11Z"
      },
      "message": "Move net-processing logic definitions together in main.h",
      "tree": {
        "sha": "90ad4abb55d64cca7137841383d9158426c1b106",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90ad4abb55d64cca7137841383d9158426c1b106"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aefcb7b70c923ccd341329a2d5e22238dc14ac3b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0278fb5f48ae9e42ec0772f85e201051077f633c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0278fb5f48ae9e42ec0772f85e201051077f633c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0278fb5f48ae9e42ec0772f85e201051077f633c"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 30,
      "deletions": 26
    },
    "files": [
      {
        "sha": "3c587569f635d93143fc057947ad0606d774347f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 30,
        "deletions": 26,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aefcb7b70c923ccd341329a2d5e22238dc14ac3b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aefcb7b70c923ccd341329a2d5e22238dc14ac3b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
        "patch": "@@ -41,7 +41,6 @@ class CValidationInterface;\n class CValidationState;\n \n struct PrecomputedTransactionData;\n-struct CNodeStateStats;\n struct LockPoints;\n \n /** Default for DEFAULT_WHITELISTRELAY. */\n@@ -206,11 +205,6 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // Setting the target to > than 550MB will make it likely we can respect the target.\n static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n-/** Register with a network node to receive its signals */\n-void RegisterNodeSignals(CNodeSignals& nodeSignals);\n-/** Unregister a network node */\n-void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n-\n /** \n  * Process an incoming block. This only returns after the best known valid\n  * block is made active. Note that it does not, however, guarantee that the\n@@ -240,15 +234,6 @@ bool InitBlockIndex(const CChainParams& chainparams);\n bool LoadBlockIndex();\n /** Unload database information */\n void UnloadBlockIndex();\n-/** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom, CConnman& connman);\n-/**\n- * Send queued protocol messages to be sent to a give node.\n- *\n- * @param[in]   pto             The node which we are sending messages to.\n- * @param[in]   connman         The connection manager for that node.\n- */\n-bool SendMessages(CNode* pto, CConnman& connman);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n@@ -291,10 +276,6 @@ void UnlinkPrunedFiles(std::set<int>& setFilesToPrune);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n-/** Get statistics from node state */\n-bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n-/** Increase a node's misbehavior score. */\n-void Misbehaving(NodeId nodeid, int howmuch);\n /** Flush all state, indexes and buffers to disk. */\n void FlushStateToDisk();\n /** Prune block files and flush state to disk. */\n@@ -310,13 +291,6 @@ std::string FormatStateMessage(const CValidationState &state);\n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n-struct CNodeStateStats {\n-    int nMisbehavior;\n-    int nSyncHeight;\n-    int nCommonHeight;\n-    std::vector<int> vHeightInFlight;\n-};\n-\n \n \n /** \n@@ -545,4 +519,34 @@ static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n /** Transaction conflicts with a transaction already known */\n static const unsigned int REJECT_CONFLICT = 0x102;\n \n+// The following things handle network-processing logic\n+// (and should be moved to a separate file)\n+\n+/** Register with a network node to receive its signals */\n+void RegisterNodeSignals(CNodeSignals& nodeSignals);\n+/** Unregister a network node */\n+void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n+\n+struct CNodeStateStats {\n+    int nMisbehavior;\n+    int nSyncHeight;\n+    int nCommonHeight;\n+    std::vector<int> vHeightInFlight;\n+};\n+\n+/** Get statistics from node state */\n+bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n+/** Increase a node's misbehavior score. */\n+void Misbehaving(NodeId nodeid, int howmuch);\n+\n+/** Process protocol messages received from a given node */\n+bool ProcessMessages(CNode* pfrom, CConnman& connman);\n+/**\n+ * Send queued protocol messages to be sent to a give node.\n+ *\n+ * @param[in]   pto             The node which we are sending messages to.\n+ * @param[in]   connman         The connection manager for that node.\n+ */\n+bool SendMessages(CNode* pto, CConnman& connman);\n+\n #endif // BITCOIN_MAIN_H"
      }
    ]
  },
  {
    "sha": "fef1010199b70026fd6d56ebac5c277552757307",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWYxMDEwMTk5YjcwMDI2ZmQ2ZDU2ZWJhYzVjMjc3NTUyNzU3MzA3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:49:44Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:49:44Z"
      },
      "message": "Use CValidationInterface from chain logic to notify peer logic\n\nThis adds a new CValidationInterface subclass, defined in main.h,\nto receive notifications of UpdatedBlockTip and use that to push\nblocks to peers, instead of doing it directly from\nActivateBestChain.",
      "tree": {
        "sha": "9590c91b21f6b1a3a3c36d9463f197725d4d8e3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9590c91b21f6b1a3a3c36d9463f197725d4d8e3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fef1010199b70026fd6d56ebac5c277552757307",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef1010199b70026fd6d56ebac5c277552757307",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fef1010199b70026fd6d56ebac5c277552757307",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef1010199b70026fd6d56ebac5c277552757307/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aefcb7b70c923ccd341329a2d5e22238dc14ac3b"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 48,
      "deletions": 24
    },
    "files": [
      {
        "sha": "7045b3e6e1f4d09dd8f65cdd55fe48091701f8ac",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef1010199b70026fd6d56ebac5c277552757307/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef1010199b70026fd6d56ebac5c277552757307/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fef1010199b70026fd6d56ebac5c277552757307",
        "patch": "@@ -72,6 +72,7 @@ static const bool DEFAULT_DISABLE_SAFEMODE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n std::unique_ptr<CConnman> g_connman;\n+std::unique_ptr<PeerLogicValidation> peerLogic;\n \n #if ENABLE_ZMQ\n static CZMQNotificationInterface* pzmqNotificationInterface = NULL;\n@@ -200,6 +201,8 @@ void Shutdown()\n         pwalletMain->Flush(false);\n #endif\n     MapPort(false);\n+    UnregisterValidationInterface(peerLogic.get());\n+    peerLogic.reset();\n     g_connman.reset();\n \n     StopTorControl();\n@@ -1102,6 +1105,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;\n \n+    peerLogic.reset(new PeerLogicValidation(&connman));\n+    RegisterValidationInterface(peerLogic.get());\n     RegisterNodeSignals(GetNodeSignals());\n \n     // sanitize comments per BIP-0014, format user agent and check total size"
      },
      {
        "sha": "e042a73822b678da085e52365d84d2a5d516280a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 24,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef1010199b70026fd6d56ebac5c277552757307/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef1010199b70026fd6d56ebac5c277552757307/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fef1010199b70026fd6d56ebac5c277552757307",
        "patch": "@@ -3073,30 +3073,6 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         if (pindexFork != pindexNewTip) {\n             uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n \n-            if (!fInitialDownload) {\n-                // Find the hashes of all blocks that weren't previously in the best chain.\n-                std::vector<uint256> vHashes;\n-                CBlockIndex *pindexToAnnounce = pindexNewTip;\n-                while (pindexToAnnounce != pindexFork) {\n-                    vHashes.push_back(pindexToAnnounce->GetBlockHash());\n-                    pindexToAnnounce = pindexToAnnounce->pprev;\n-                    if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n-                        // Limit announcements in case of a huge reorganization.\n-                        // Rely on the peer's synchronization mechanism in that case.\n-                        break;\n-                    }\n-                }\n-                // Relay inventory, but don't relay old inventory during initial block download.\n-                if(connman) {\n-                    connman->ForEachNode([nNewHeight, &vHashes](CNode* pnode) {\n-                        if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 0)) {\n-                            BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n-                                pnode->PushBlockHash(hash);\n-                            }\n-                        }\n-                    });\n-                }\n-            }\n             // Notify external listeners about the new tip.\n             GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n         }\n@@ -4682,6 +4658,38 @@ std::string GetWarnings(const std::string& strFor)\n \n \n \n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// blockchain -> download logic notification\n+//\n+\n+void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n+    const int nNewHeight = pindexNew->nHeight;\n+\n+    if (!fInitialDownload) {\n+        // Find the hashes of all blocks that weren't previously in the best chain.\n+        std::vector<uint256> vHashes;\n+        const CBlockIndex *pindexToAnnounce = pindexNew;\n+        while (pindexToAnnounce != pindexFork) {\n+            vHashes.push_back(pindexToAnnounce->GetBlockHash());\n+            pindexToAnnounce = pindexToAnnounce->pprev;\n+            if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n+                // Limit announcements in case of a huge reorganization.\n+                // Rely on the peer's synchronization mechanism in that case.\n+                break;\n+            }\n+        }\n+        // Relay inventory, but don't relay old inventory during initial block download.\n+        connman->ForEachNode([nNewHeight, &vHashes](CNode* pnode) {\n+            if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 0)) {\n+                BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n+                    pnode->PushBlockHash(hash);\n+                }\n+            }\n+        });\n+    }\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Messages"
      },
      {
        "sha": "bb5e26b0b274319a083ad111e449dc497681ea47",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef1010199b70026fd6d56ebac5c277552757307/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef1010199b70026fd6d56ebac5c277552757307/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fef1010199b70026fd6d56ebac5c277552757307",
        "patch": "@@ -16,6 +16,7 @@\n #include \"net.h\"\n #include \"script/script_error.h\"\n #include \"sync.h\"\n+#include \"validationinterface.h\"\n #include \"versionbits.h\"\n \n #include <algorithm>\n@@ -527,6 +528,16 @@ void RegisterNodeSignals(CNodeSignals& nodeSignals);\n /** Unregister a network node */\n void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n \n+class PeerLogicValidation : public CValidationInterface {\n+private:\n+    CConnman* connman;\n+\n+public:\n+    PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {}\n+\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+};\n+\n struct CNodeStateStats {\n     int nMisbehavior;\n     int nSyncHeight;"
      }
    ]
  },
  {
    "sha": "f5efa283931ce1d52c59234b58988a221d42ecb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWVmYTI4MzkzMWNlMWQ1MmM1OTIzNGI1ODk4OGEyMjFkNDJlY2I0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-09-30T22:38:05Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:51:32Z"
      },
      "message": "Remove CConnman parameter from ProcessNewBlock/ActivateBestChain",
      "tree": {
        "sha": "ce892a16f3048f3a378c8a71092bf4f9be557356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce892a16f3048f3a378c8a71092bf4f9be557356"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5efa283931ce1d52c59234b58988a221d42ecb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5efa283931ce1d52c59234b58988a221d42ecb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5efa283931ce1d52c59234b58988a221d42ecb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5efa283931ce1d52c59234b58988a221d42ecb4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fef1010199b70026fd6d56ebac5c277552757307",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef1010199b70026fd6d56ebac5c277552757307",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fef1010199b70026fd6d56ebac5c277552757307"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4ad7348db0b4377b83272b33fa25758d747e177f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -3013,7 +3013,7 @@ static void NotifyHeaderTip() {\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock, CConnman* connman) {\n+bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock) {\n     CBlockIndex *pindexMostWork = NULL;\n     CBlockIndex *pindexNewTip = NULL;\n     std::vector<std::tuple<CTransaction,CBlockIndex*,int>> txChanged;\n@@ -3703,7 +3703,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, CConnman* connman)\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp)\n {\n     {\n         LOCK(cs_main);\n@@ -3725,7 +3725,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, C\n \n     NotifyHeaderTip();\n \n-    if (!ActivateBestChain(state, chainparams, pblock, connman))\n+    if (!ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n@@ -5764,7 +5764,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->PushMessage(NetMsgType::GETDATA, invs);\n         } else {\n             CValidationState state;\n-            ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL, &connman);\n+            ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL);\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n@@ -5940,7 +5940,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n-        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL, &connman);\n+        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes"
      },
      {
        "sha": "77179b25b98d8aa065fe907d668790040ae30150",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -218,7 +218,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[out]  dbp     The already known disk position of pblock, or NULL if not yet stored.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, CConnman* connman);\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -250,7 +250,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL, CConnman* connman = NULL);\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**"
      },
      {
        "sha": "d85f6fed6380ff21ce535ef0502fe6f3ddbab9e5",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -1279,7 +1279,7 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state, Params(), NULL, g_connman.get());\n+        ActivateBestChain(state, Params(), NULL);\n     }\n \n     if (!state.IsValid()) {\n@@ -1317,7 +1317,7 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n     }\n \n     CValidationState state;\n-    ActivateBestChain(state, Params(), NULL, g_connman.get());\n+    ActivateBestChain(state, Params(), NULL);\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());"
      },
      {
        "sha": "a54931720e45b3baf7d70226a6a6d1be1435a779",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -131,7 +131,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n             continue;\n         }\n         CValidationState state;\n-        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL, g_connman.get()))\n+        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -757,7 +757,7 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL, g_connman.get());\n+    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent)\n     {"
      },
      {
        "sha": "15fceb963a59f1c81165fd31e5e41ee02e83c3ae",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -222,7 +222,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL, connman));\n+        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL));\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }"
      },
      {
        "sha": "f36c5486556b2f497af809d3cba1834f47c77023",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -124,7 +124,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     CValidationState state;\n-    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL, connman);\n+    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL);\n \n     CBlock result = block;\n     delete pblocktemplate;"
      }
    ]
  },
  {
    "sha": "12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmVlMWZlMDE4ZTk5YmJhNmMyYjc0OTQwZWNlM2IzOWE0NWVkOGQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:52:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:52:57Z"
      },
      "message": "Always call UpdatedBlockTip, even if blocks were only disconnected",
      "tree": {
        "sha": "cf210f0f9b50cd210ef7b0490e184145e7300400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf210f0f9b50cd210ef7b0490e184145e7300400"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5efa283931ce1d52c59234b58988a221d42ecb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5efa283931ce1d52c59234b58988a221d42ecb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5efa283931ce1d52c59234b58988a221d42ecb4"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "189c265ec034e22ca594cbc04d34166d7e1a0f72",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
        "patch": "@@ -3028,7 +3028,6 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         const CBlockIndex *pindexFork;\n         std::list<CTransaction> txConflicted;\n         bool fInitialDownload;\n-        int nNewHeight;\n         {\n             LOCK(cs_main);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -3051,13 +3050,10 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             pindexNewTip = chainActive.Tip();\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n-            nNewHeight = chainActive.Height();\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n-        if(connman)\n-            connman->SetBestHeight(nNewHeight);\n \n         // throw all transactions though the signal-interface\n         // while _not_ holding the cs_main lock\n@@ -3069,12 +3065,12 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         for(unsigned int i = 0; i < txChanged.size(); i++)\n             SyncWithWallets(std::get<0>(txChanged[i]), std::get<1>(txChanged[i]), std::get<2>(txChanged[i]));\n \n+        // Notify external listeners about the new tip.\n+        GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n+\n         // Always notify the UI if a new block tip was connected\n         if (pindexFork != pindexNewTip) {\n             uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n-\n-            // Notify external listeners about the new tip.\n-            GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n         }\n     } while (pindexNewTip != pindexMostWork);\n     CheckBlockIndex(chainparams.GetConsensus());\n@@ -4665,6 +4661,7 @@ std::string GetWarnings(const std::string& strFor)\n \n void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     const int nNewHeight = pindexNew->nHeight;\n+    connman->SetBestHeight(nNewHeight);\n \n     if (!fInitialDownload) {\n         // Find the hashes of all blocks that weren't previously in the best chain."
      },
      {
        "sha": "a0196fe18418c66e0ff463d9fa66501325943ea8",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
        "patch": "@@ -126,7 +126,7 @@ void CZMQNotificationInterface::Shutdown()\n \n void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n {\n-    if (fInitialDownload)\n+    if (fInitialDownload || pindexNew == pindexFork) // In IBD or blocks were disconnected without any new ones\n         return;\n \n     for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )"
      }
    ]
  },
  {
    "sha": "7565e03b962cfa8d8e54aa0f9068f41194915523",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTY1ZTAzYjk2MmNmYThkOGU1NGFhMGY5MDY4ZjQxMTk0OTE1NTIz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-01T19:29:40Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:53:04Z"
      },
      "message": "Remove SyncWithWallets wrapper function",
      "tree": {
        "sha": "4535fa640781f26d3eaa4058b3c3e3e5512d8351",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4535fa640781f26d3eaa4058b3c3e3e5512d8351"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7565e03b962cfa8d8e54aa0f9068f41194915523",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7565e03b962cfa8d8e54aa0f9068f41194915523",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7565e03b962cfa8d8e54aa0f9068f41194915523",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7565e03b962cfa8d8e54aa0f9068f41194915523/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 6,
      "deletions": 10
    },
    "files": [
      {
        "sha": "2f35288329a8874c2b1b162de7886924816ab39f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7565e03b962cfa8d8e54aa0f9068f41194915523/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7565e03b962cfa8d8e54aa0f9068f41194915523/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7565e03b962cfa8d8e54aa0f9068f41194915523",
        "patch": "@@ -1542,7 +1542,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n     }\n \n-    SyncWithWallets(tx, NULL);\n+    GetMainSignals().SyncTransaction(tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n \n     return true;\n }\n@@ -2775,7 +2775,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx, pindexDelete->pprev);\n+        GetMainSignals().SyncTransaction(tx, pindexDelete->pprev, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n     }\n     return true;\n }\n@@ -3059,11 +3059,11 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         // while _not_ holding the cs_main lock\n         BOOST_FOREACH(const CTransaction &tx, txConflicted)\n         {\n-            SyncWithWallets(tx, pindexNewTip);\n+            GetMainSignals().SyncTransaction(tx, pindexNewTip, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n         }\n         // ... and about transactions that got confirmed:\n         for(unsigned int i = 0; i < txChanged.size(); i++)\n-            SyncWithWallets(std::get<0>(txChanged[i]), std::get<1>(txChanged[i]), std::get<2>(txChanged[i]));\n+            GetMainSignals().SyncTransaction(std::get<0>(txChanged[i]), std::get<1>(txChanged[i]), std::get<2>(txChanged[i]));\n \n         // Notify external listeners about the new tip.\n         GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);"
      },
      {
        "sha": "085c336ccf6a986adf4fb2c3075417363a88ab82",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7565e03b962cfa8d8e54aa0f9068f41194915523/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7565e03b962cfa8d8e54aa0f9068f41194915523/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=7565e03b962cfa8d8e54aa0f9068f41194915523",
        "patch": "@@ -47,7 +47,3 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.SyncTransaction.disconnect_all_slots();\n     g_signals.UpdatedBlockTip.disconnect_all_slots();\n }\n-\n-void SyncWithWallets(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {\n-    g_signals.SyncTransaction(tx, pindex, posInBlock);\n-}"
      },
      {
        "sha": "a29859999bfabe57a12ae665eba0376386d398dc",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7565e03b962cfa8d8e54aa0f9068f41194915523/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7565e03b962cfa8d8e54aa0f9068f41194915523/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=7565e03b962cfa8d8e54aa0f9068f41194915523",
        "patch": "@@ -28,8 +28,6 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn);\n void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllValidationInterfaces();\n-/** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock = -1);\n \n class CValidationInterface {\n protected:\n@@ -50,6 +48,8 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    /** A posInBlock value for SyncTransaction which indicates the transaction was conflicted, disconnected, or not in a block */\n+    static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n     boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */"
      }
    ]
  },
  {
    "sha": "a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWFlYzVjMjRkOGM0ZWZlOWUxZWRlNTRlOGI4MDM5YjRiM2YwODM1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:54:29Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:54:29Z"
      },
      "message": "Use BlockChecked signal to send reject messages from mapBlockSource",
      "tree": {
        "sha": "1cae6e4078fa85f2702ef230a4cf08ac3a946fb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cae6e4078fa85f2702ef230a4cf08ac3a946fb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7565e03b962cfa8d8e54aa0f9068f41194915523",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7565e03b962cfa8d8e54aa0f9068f41194915523",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7565e03b962cfa8d8e54aa0f9068f41194915523"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 21,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a6a43699cd296e5df5efb2473afd681130968a27",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 12,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
        "patch": "@@ -1857,17 +1857,6 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n }\n \n void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n-    int nDoS = 0;\n-    if (state.IsInvalid(nDoS)) {\n-        std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n-        if (it != mapBlockSource.end() && State(it->second)) {\n-            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n-            CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n-            State(it->second)->rejects.push_back(reject);\n-            if (nDoS > 0)\n-                Misbehaving(it->second, nDoS);\n-        }\n-    }\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n         setDirtyBlockIndex.insert(pindex);\n@@ -2814,7 +2803,6 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n                 InvalidBlockFound(pindexNew, state);\n             return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n-        mapBlockSource.erase(pindexNew->GetBlockHash());\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n         LogPrint(\"bench\", \"  - Connect total: %.2fms [%.2fs]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001);\n         assert(view.Flush());\n@@ -4687,6 +4675,26 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n     }\n }\n \n+void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {\n+    LOCK(cs_main);\n+\n+    const uint256 hash(block.GetHash());\n+    std::map<uint256, NodeId>::iterator it = mapBlockSource.find(hash);\n+\n+    int nDoS = 0;\n+    if (state.IsInvalid(nDoS)) {\n+        if (it != mapBlockSource.end() && State(it->second)) {\n+            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n+            CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), hash};\n+            State(it->second)->rejects.push_back(reject);\n+            if (nDoS > 0)\n+                Misbehaving(it->second, nDoS);\n+        }\n+    }\n+    if (it != mapBlockSource.end())\n+        mapBlockSource.erase(it);\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Messages"
      },
      {
        "sha": "889b6a2da1bf46a65674aeaa2ee225eeb518b02f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
        "patch": "@@ -536,6 +536,7 @@ class PeerLogicValidation : public CValidationInterface {\n     PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {}\n \n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    virtual void BlockChecked(const CBlock& block, const CValidationState& state);\n };\n \n struct CNodeStateStats {"
      }
    ]
  }
]