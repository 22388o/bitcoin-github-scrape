laanwj,2014-06-25T12:28:38Z,"> We may need to check whether we don't depend on iterators CCoinsViewCache iterators remaining stable under modifications.\n\nIt doesn't seem that we depend on that. The only place where we pass around the iterators is in FetchCoins/GetCoins/HaveCoins, but there we at most return a reference to a CCoins, not the iterator itself (and the doc http://www.boost.org/doc/libs/1_55_0/doc/html/boost/unor",https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47094101,47094101,
sipa,2014-06-25T12:51:01Z,Thanks for verifying. Sounds good.\n,https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47096233,47096233,
BitcoinPullTester,2014-06-25T21:18:47Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4413_b1828db8465831e7d7fa842b39f14add03d7a7bd/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47160146,47160146,
laanwj,2014-06-26T09:53:17Z,"I checked re-indexing performance but it is not affected by this, at least not distinguishable within the variance. It consistently takes 4-4.5 hours.\nNow checking memory usage...\n",https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47207436,47207436,
laanwj,2014-06-27T07:24:33Z,I've compared heap usage over time of a `-reindex` with and without the patch (using the heap profiler in gperftools):\n\n![chart_ordered_unordered](https://cloud.githubusercontent.com/assets/126646/3408539/9d62d2ba-fdcb-11e3-8d3a-30c24eb055c8.png)\n\nNot much difference in the overall trend or behavior; but a point of interest is that the memory usage with unordered map has fewer (and lower magni,https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47314975,47314975,
laanwj,2014-06-27T09:12:41Z,I verified that the peak on x=33 for the ordered map is for a major part caused by memory allocation in CCoinsViewCache::BatchWrite / CCoinsViewCache::GetCoins.\n\n![snapshot_ordered_31](https://cloud.githubusercontent.com/assets/126646/3409614/1d9b7180-fddb-11e3-8188-06c4abdd42ab.png)\n\nAs we avoid these kinds of peaks with unordered_map - implying that there is less overhead - in my opinion it',https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47323202,47323202,
gavinandresen,2014-06-27T16:51:26Z,Untested ACK.\n,https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47373335,47373335,
sipa,2014-06-29T15:44:30Z,Tested ACK.\n,https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47458311,47458311,
sipa,2014-06-29T17:21:00Z,"There's a mild exploitable performance weakness here: transaction signing\ncan be grinded to make the constructed utxo entries end up in the same\nbucket, causing O(n) behaviour in that set.\n\nI think it's low risk, but it can be easily avoided by using a more complex\nfunction uint256 -> 64bit hash that takes a secret parameter into account\n(which can be generated at random at startup).\n",https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47461482,47461482,
laanwj,2014-06-30T05:37:21Z,Ouch.\nMaybe use a murmurhash with a random seed parameter set at start? We already have that in the source for bloom...\n,https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47496284,47496284,
sipa,2014-06-30T12:53:56Z,"Having a random uint256 in CCoinsViewCache, generated at creation, and xor'ed with the txid before computing the hash (via some simple function) should do.\n",https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47527575,47527575,
laanwj,2014-06-30T13:34:54Z,So even murmurhash is not simple enough?\n,https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47531671,47531671,
laanwj,2014-07-01T10:11:58Z,"I don't think the small win achieved here measures up against the extra brittleness involved in making the hashing non-deterministic between runs. In my experience this introduces problems (or at least extra work) while debugging and testing. std::map has a better worst-case performance, so it is a better fit.\n\nI'm going to pull the first commit to make it easier to experiment with alternative d",https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47639102,47639102,
laanwj,2014-07-01T10:49:37Z,First commit merged through dd638dd.\n,https://github.com/bitcoin/bitcoin/pull/4413#issuecomment-47642081,47642081,
