[
  {
    "sha": "cd7072b0b3966e62826c1128d6c95f3bcc4664ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDcwNzJiMGIzOTY2ZTYyODI2YzExMjhkNmM5NWYzYmNjNDY2NGVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-25T11:45:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-25T11:48:26Z"
      },
      "message": "typedef std::map<uint256, CCoins> to CCoinsMap\n\nThis makes it possible to switch to a more efficient map type\nwithout changing all occurences manually.",
      "tree": {
        "sha": "fe942049432d8f9bd58df5ed39d70f16a2622d57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe942049432d8f9bd58df5ed39d70f16a2622d57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd7072b0b3966e62826c1128d6c95f3bcc4664ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd7072b0b3966e62826c1128d6c95f3bcc4664ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd7072b0b3966e62826c1128d6c95f3bcc4664ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd7072b0b3966e62826c1128d6c95f3bcc4664ea/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "208bf5b9e0a86900bddf5722dc192c3262480e36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/208bf5b9e0a86900bddf5722dc192c3262480e36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/208bf5b9e0a86900bddf5722dc192c3262480e36"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 17,
      "deletions": 16
    },
    "files": [
      {
        "sha": "13a4ea95cdab5b8671eb7898df0f8efdb4428f63",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7072b0b3966e62826c1128d6c95f3bcc4664ea/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7072b0b3966e62826c1128d6c95f3bcc4664ea/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=cd7072b0b3966e62826c1128d6c95f3bcc4664ea",
        "patch": "@@ -55,7 +55,7 @@ bool CCoinsView::SetCoins(const uint256 &txid, const CCoins &coins) { return fal\n bool CCoinsView::HaveCoins(const uint256 &txid) { return false; }\n uint256 CCoinsView::GetBestBlock() { return uint256(0); }\n bool CCoinsView::SetBestBlock(const uint256 &hashBlock) { return false; }\n-bool CCoinsView::BatchWrite(const std::map<uint256, CCoins> &mapCoins, const uint256 &hashBlock) { return false; }\n+bool CCoinsView::BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n bool CCoinsView::GetStats(CCoinsStats &stats) { return false; }\n \n \n@@ -66,7 +66,7 @@ bool CCoinsViewBacked::HaveCoins(const uint256 &txid) { return base->HaveCoins(t\n uint256 CCoinsViewBacked::GetBestBlock() { return base->GetBestBlock(); }\n bool CCoinsViewBacked::SetBestBlock(const uint256 &hashBlock) { return base->SetBestBlock(hashBlock); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n-bool CCoinsViewBacked::BatchWrite(const std::map<uint256, CCoins> &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n+bool CCoinsViewBacked::BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n bool CCoinsViewBacked::GetStats(CCoinsStats &stats) { return base->GetStats(stats); }\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hashBlock(0) { }\n@@ -83,20 +83,20 @@ bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) {\n     return false;\n }\n \n-std::map<uint256,CCoins>::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n-    std::map<uint256,CCoins>::iterator it = cacheCoins.lower_bound(txid);\n+CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n+    CCoinsMap::iterator it = cacheCoins.lower_bound(txid);\n     if (it != cacheCoins.end() && it->first == txid)\n         return it;\n     CCoins tmp;\n     if (!base->GetCoins(txid,tmp))\n         return cacheCoins.end();\n-    std::map<uint256,CCoins>::iterator ret = cacheCoins.insert(it, std::make_pair(txid, CCoins()));\n+    CCoinsMap::iterator ret = cacheCoins.insert(it, std::make_pair(txid, CCoins()));\n     tmp.swap(ret->second);\n     return ret;\n }\n \n CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n-    std::map<uint256,CCoins>::iterator it = FetchCoins(txid);\n+    CCoinsMap::iterator it = FetchCoins(txid);\n     assert(it != cacheCoins.end());\n     return it->second;\n }\n@@ -121,8 +121,8 @@ bool CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n     return true;\n }\n \n-bool CCoinsViewCache::BatchWrite(const std::map<uint256, CCoins> &mapCoins, const uint256 &hashBlockIn) {\n-    for (std::map<uint256, CCoins>::const_iterator it = mapCoins.begin(); it != mapCoins.end(); it++)\n+bool CCoinsViewCache::BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n+    for (CCoinsMap::const_iterator it = mapCoins.begin(); it != mapCoins.end(); it++)\n         cacheCoins[it->first] = it->second;\n     hashBlock = hashBlockIn;\n     return true;"
      },
      {
        "sha": "c57a5ec722a91b34dad40d4b567099b6b17a0ea5",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7072b0b3966e62826c1128d6c95f3bcc4664ea/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7072b0b3966e62826c1128d6c95f3bcc4664ea/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=cd7072b0b3966e62826c1128d6c95f3bcc4664ea",
        "patch": "@@ -239,6 +239,7 @@ class CCoins\n     }\n };\n \n+typedef std::map<uint256,CCoins> CCoinsMap;\n \n struct CCoinsStats\n {\n@@ -275,7 +276,7 @@ class CCoinsView\n     virtual bool SetBestBlock(const uint256 &hashBlock);\n \n     // Do a bulk modification (multiple SetCoins + one SetBestBlock)\n-    virtual bool BatchWrite(const std::map<uint256, CCoins> &mapCoins, const uint256 &hashBlock);\n+    virtual bool BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     // Calculate statistics about the unspent transaction output set\n     virtual bool GetStats(CCoinsStats &stats);\n@@ -299,7 +300,7 @@ class CCoinsViewBacked : public CCoinsView\n     uint256 GetBestBlock();\n     bool SetBestBlock(const uint256 &hashBlock);\n     void SetBackend(CCoinsView &viewIn);\n-    bool BatchWrite(const std::map<uint256, CCoins> &mapCoins, const uint256 &hashBlock);\n+    bool BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashBlock);\n     bool GetStats(CCoinsStats &stats);\n };\n \n@@ -309,7 +310,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n {\n protected:\n     uint256 hashBlock;\n-    std::map<uint256,CCoins> cacheCoins;\n+    CCoinsMap cacheCoins;\n \n public:\n     CCoinsViewCache(CCoinsView &baseIn, bool fDummy = false);\n@@ -320,7 +321,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool HaveCoins(const uint256 &txid);\n     uint256 GetBestBlock();\n     bool SetBestBlock(const uint256 &hashBlock);\n-    bool BatchWrite(const std::map<uint256, CCoins> &mapCoins, const uint256 &hashBlock);\n+    bool BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     // Return a modifiable reference to a CCoins. Check HaveCoins first.\n     // Many methods explicitly require a CCoinsViewCache because of this method, to reduce\n@@ -352,7 +353,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     const CTxOut &GetOutputFor(const CTxIn& input);\n \n private:\n-    std::map<uint256,CCoins>::iterator FetchCoins(const uint256 &txid);\n+    CCoinsMap::iterator FetchCoins(const uint256 &txid);\n };\n \n #endif"
      },
      {
        "sha": "52cd96283e2d1fbcea8dc58dd037046fe7d0d3c4",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7072b0b3966e62826c1128d6c95f3bcc4664ea/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7072b0b3966e62826c1128d6c95f3bcc4664ea/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=cd7072b0b3966e62826c1128d6c95f3bcc4664ea",
        "patch": "@@ -54,11 +54,11 @@ bool CCoinsViewDB::SetBestBlock(const uint256 &hashBlock) {\n     return db.WriteBatch(batch);\n }\n \n-bool CCoinsViewDB::BatchWrite(const std::map<uint256, CCoins> &mapCoins, const uint256 &hashBlock) {\n+bool CCoinsViewDB::BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     LogPrint(\"coindb\", \"Committing %u changed transactions to coin database...\\n\", (unsigned int)mapCoins.size());\n \n     CLevelDBBatch batch;\n-    for (std::map<uint256, CCoins>::const_iterator it = mapCoins.begin(); it != mapCoins.end(); it++)\n+    for (CCoinsMap::const_iterator it = mapCoins.begin(); it != mapCoins.end(); it++)\n         BatchWriteCoins(batch, it->first, it->second);\n     if (hashBlock != uint256(0))\n         BatchWriteHashBestChain(batch, hashBlock);"
      },
      {
        "sha": "7d670c25423f69e0bc10c83887682344be18f229",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7072b0b3966e62826c1128d6c95f3bcc4664ea/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7072b0b3966e62826c1128d6c95f3bcc4664ea/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=cd7072b0b3966e62826c1128d6c95f3bcc4664ea",
        "patch": "@@ -37,7 +37,7 @@ class CCoinsViewDB : public CCoinsView\n     bool HaveCoins(const uint256 &txid);\n     uint256 GetBestBlock();\n     bool SetBestBlock(const uint256 &hashBlock);\n-    bool BatchWrite(const std::map<uint256, CCoins> &mapCoins, const uint256 &hashBlock);\n+    bool BatchWrite(const CCoinsMap &mapCoins, const uint256 &hashBlock);\n     bool GetStats(CCoinsStats &stats);\n };\n "
      }
    ]
  },
  {
    "sha": "b1828db8465831e7d7fa842b39f14add03d7a7bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTgyOGRiODQ2NTgzMWU3ZDdmYTg0MmIzOWYxNGFkZDAzZDdhN2Jk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-25T11:46:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-25T12:11:39Z"
      },
      "message": "Change CCoinsMap to boost::unordered_map\n\nAs we are not dependent on the ordering, a hash map could\nimprove performance here. As suggested by @sipa.",
      "tree": {
        "sha": "c685d6d888bd9aef85c899610fb06b828e1a0311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c685d6d888bd9aef85c899610fb06b828e1a0311"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1828db8465831e7d7fa842b39f14add03d7a7bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1828db8465831e7d7fa842b39f14add03d7a7bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1828db8465831e7d7fa842b39f14add03d7a7bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1828db8465831e7d7fa842b39f14add03d7a7bd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd7072b0b3966e62826c1128d6c95f3bcc4664ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd7072b0b3966e62826c1128d6c95f3bcc4664ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd7072b0b3966e62826c1128d6c95f3bcc4664ea"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7206546f46ac42b09ddfd53d83dad9af688f4108",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1828db8465831e7d7fa842b39f14add03d7a7bd/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1828db8465831e7d7fa842b39f14add03d7a7bd/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=b1828db8465831e7d7fa842b39f14add03d7a7bd",
        "patch": "@@ -84,8 +84,8 @@ bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) {\n }\n \n CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n-    CCoinsMap::iterator it = cacheCoins.lower_bound(txid);\n-    if (it != cacheCoins.end() && it->first == txid)\n+    CCoinsMap::iterator it = cacheCoins.find(txid);\n+    if (it != cacheCoins.end())\n         return it;\n     CCoins tmp;\n     if (!base->GetCoins(txid,tmp))"
      },
      {
        "sha": "b65a30028ca078ed41d0b6b2ac77e464f0848b21",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1828db8465831e7d7fa842b39f14add03d7a7bd/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1828db8465831e7d7fa842b39f14add03d7a7bd/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=b1828db8465831e7d7fa842b39f14add03d7a7bd",
        "patch": "@@ -13,6 +13,7 @@\n #include <stdint.h>\n \n #include <boost/foreach.hpp>\n+#include <boost/unordered_map.hpp>\n \n /** pruned version of CTransaction: only retains metadata and unspent transaction outputs\n  *\n@@ -239,7 +240,7 @@ class CCoins\n     }\n };\n \n-typedef std::map<uint256,CCoins> CCoinsMap;\n+typedef boost::unordered_map<uint256,CCoins> CCoinsMap;\n \n struct CCoinsStats\n {"
      },
      {
        "sha": "a1edf224ecb198888f8821be581bcaa11d5dc784",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1828db8465831e7d7fa842b39f14add03d7a7bd/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1828db8465831e7d7fa842b39f14add03d7a7bd/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=b1828db8465831e7d7fa842b39f14add03d7a7bd",
        "patch": "@@ -552,4 +552,9 @@ class uint256 : public base_uint<256> {\n     }\n };\n \n+/** Return a hash value for boost::unordered_map.\n+ * This trivial implementation is only useful if the uint256 itself represents a hash, which is always the case in bitcoin.\n+ */\n+static inline std::size_t hash_value(const uint256& x) { return x.GetLow64(); }\n+\n #endif"
      }
    ]
  }
]