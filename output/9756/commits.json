[
  {
    "sha": "9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWNmMjVjYzAxM2MwMTNlZTViMDdkYmE3YjEzMTliN2M1YTdiNmE0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-13T22:54:51Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-13T22:54:51Z"
      },
      "message": "Return error when importmulti called with invalid address.\n\nLack of error checking noticed by Alex Morcos <morcos@chaincode.com>",
      "tree": {
        "sha": "4565391074de7304a344e97c1418ada6ff11fc38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4565391074de7304a344e97c1418ada6ff11fc38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43964610e5b3e97f20524dc76a7c11a829c18a0c",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
        "patch": "@@ -59,6 +59,16 @@ def run_test (self):\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n \n+        print(\"Should not import an invalid address\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": \"not valid address\",\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Invalid address')\n \n         # ScriptPubKey + internal\n         print(\"Should import a scriptPubKey with internal flag\")"
      },
      {
        "sha": "738643eb0170baa395006b069ec4440ea3e3ae42",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
        "patch": "@@ -671,6 +671,9 @@ UniValue processImport(const UniValue& data) {\n \n         if (!isScript) {\n             address = CBitcoinAddress(output);\n+            if (!address.IsValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+            }\n             script = GetScriptForDestination(address.Get());\n         } else {\n             if (!IsHex(output)) {"
      }
    ]
  }
]