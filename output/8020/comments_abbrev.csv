gmaxwell,2016-05-06T20:24:47Z,Concept ACK.\n,https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-217549274,217549274,
pstratem,2016-05-06T21:11:40Z,Concept ACK\nad00e3af31df0655c1cdc95b8d29dcc1ec413e5b\n,https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-217559544,217559544,
laanwj,2016-05-07T08:27:43Z,"Concept ACK\nPython took the same step for 3.4 to convert their hash algorithms to SipHash, and they have similar motivations of mitigating collision attacks, so we're in good company: https://www.python.org/dev/peps/pep-0456/\n",https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-217618882,217618882,
sipa,2016-05-08T23:13:44Z,"Here is a comment about using SipHash-1-3 instead of SipHash-2-4: https://github.com/rust-lang/rust/issues/29754#issuecomment-156073946\n\nIt would be approximately twice as fast for hashing txids, and the distinguisher mentioned in that comment is not relevant for data that is a multiple of 8 bytes (which is the case for us), as 8 bytes of padding are added in that case. Opinions?\n",https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-217751991,217751991,
laanwj,2016-05-09T10:39:05Z,"Siphash 2-4 seems to be the defacto 'safe' choice. Siphash 1-3 happens to be secure for our use case right now, but that sounds a tad brittle: as if a small change in our use case, or a small advancement in cryptoanalysis of the function, could mean that the known weakness does suddenly affect us?\n\nNot sure how much hashing the txids is a bottleneck in the whole scheme of things around CCoinsCac",https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-217831712,217831712,
sipa,2016-05-09T17:28:29Z,Did some better benchmarks:\n- Current Lookup3-based approach: 31 cycles\n- SipHash-2-4: 52 cycles\n- SipHash-1-3: 32 cycles\n,https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-217931440,217931440,
dcousens,2016-05-11T03:14:40Z,"Ha,  I thought [SipHash](https://en.wikipedia.org/wiki/SipHash) was something home grown by @sipa... TIL.\nLGTM,  for the record,  do we have a comparison with cycle counts of the other hash functions? (SHA1 say?)\n",https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-218351182,218351182,
sipa,2016-05-11T04:14:53Z,"@dcousens Based on numbers I get from #8039:\n- SHA1: 577 cycles (1 block, 64 bytes)\n- SHA256: 1504 cycles (1 block, 64 bytes)\n- SHA512: 1988 cycles (1 block, 128 bytes)\n- RIPEMD160: 751 cycles (1 block, 64 bytes)\n",https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-218357452,218357452,
dcousens,2016-05-11T04:25:37Z,Thanks @sipa :+1: \n,https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-218358552,218358552,
sipa,2016-05-16T22:38:08Z,"Going to stick to SipHash-2-4 for now. We can always switch to something else later.\n\nReady for merge, I think.\n",https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-219569508,219569508,
pstratem,2016-05-17T04:49:47Z,utACK 658c6481616f12a3466d1ddeb23eb91788ab2e66\n,https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-219618599,219618599,
gmaxwell,2016-05-17T07:46:18Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-219643527,219643527,
TheBlueMatt,2016-05-17T18:47:24Z,ACK a68ec21f7ed2978d8945a0f4cfd7e80bfa5fd917\n,https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-219815593,219815593,
rebroad,2016-08-09T08:58:52Z,I'm trying to work out what problem these siphashes fix. What is the risk that this solves please?\n,https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-238494472,238494472,
laanwj,2016-08-13T13:46:11Z,"It's fast _and_ cryptographically solid  - which reduces DoS risk by attackers remotely predicting the behavior of the hash function.\n\nAs I quoted above already, pretty much same rationale as for Python: https://www.python.org/dev/peps/pep-0456/\n",https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-239621609,239621609,
elichai,2020-01-30T09:17:55Z,"> Here is a comment about using SipHash-1-3 instead of SipHash-2-4: [rust-lang/rust#29754 (comment)](https://github.com/rust-lang/rust/issues/29754#issuecomment-156073946)\n> \n> It would be approximately twice as fast for hashing txids, and the distinguisher mentioned in that comment is not relevant for data that is a multiple of 8 bytes (which is the case for us), as 8 bytes of padding are add",https://github.com/bitcoin/bitcoin/pull/8020#issuecomment-580158738,580158738,
kazcw,2016-05-07T01:06:25Z,What if pnode is 32-bit?\n,https://github.com/bitcoin/bitcoin/pull/8020#discussion_r62408348,62408348,src/main.cpp
sipa,2016-05-07T02:25:26Z,Nice catch. I've replaced it by using pnode->id.\n,https://github.com/bitcoin/bitcoin/pull/8020#discussion_r62409947,62409947,src/main.cpp
TheBlueMatt,2016-05-15T23:37:15Z,It'd be nice to not break aliasing rules here? Shouldnt the compiler optimize out a manual-shift-or?\n,https://github.com/bitcoin/bitcoin/pull/8020#discussion_r63300199,63300199,src/hash.cpp
sipa,2016-05-16T04:49:29Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/8020#discussion_r63309690,63309690,src/hash.cpp
TheBlueMatt,2016-05-17T17:31:47Z,Can you make this more readable?\n\nSomething like\n\n```\n                                 (uint64_t(ptr[0]) <<  0) |\n                                 (uint64_t(ptr[1]) <<  8) |\n                                 (uint64_t(ptr[2]) << 16) |\n                                 (uint64_t(ptr[3]) << 24) |\n                                 (uint64_t(ptr[4]) << 32) |\n                                 (ui,https://github.com/bitcoin/bitcoin/pull/8020#discussion_r63567194,63567194,src/uint256.h
TheBlueMatt,2016-05-17T17:32:15Z,I dont think you need the le64toh now that you're using GetUint64?\n,https://github.com/bitcoin/bitcoin/pull/8020#discussion_r63567269,63567269,src/hash.cpp
TheBlueMatt,2016-05-17T17:57:44Z,"Does std/boost::unordered_map guarantee that this will not create SaltedTxidHashers willy-nilly, using different salts?\n",https://github.com/bitcoin/bitcoin/pull/8020#discussion_r63572270,63572270,src/coins.h
sipa,2016-05-17T18:15:03Z,"Yes, a single hasher is constructed at map creation time.\n",https://github.com/bitcoin/bitcoin/pull/8020#discussion_r63575346,63575346,src/coins.h
sipa,2016-05-17T18:15:31Z,"Oops, fixed.\n",https://github.com/bitcoin/bitcoin/pull/8020#discussion_r63575437,63575437,src/hash.cpp
sipa,2016-05-17T18:15:43Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/8020#discussion_r63575459,63575459,src/uint256.h
