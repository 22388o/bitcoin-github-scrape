[
  {
    "sha": "eac9200814fa01da6522625be01dded730b26751",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWM5MjAwODE0ZmEwMWRhNjUyMjYyNWJlMDFkZGVkNzMwYjI2NzUx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-18T20:15:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-09T15:43:52Z"
      },
      "message": "walletdb: Refactor DatabaseBatch abstract class from BerkeleyBatch",
      "tree": {
        "sha": "0da228a2b89b72bef0cf9af4c2e351921027d9ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0da228a2b89b72bef0cf9af4c2e351921027d9ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eac9200814fa01da6522625be01dded730b26751",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac9200814fa01da6522625be01dded730b26751",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eac9200814fa01da6522625be01dded730b26751",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac9200814fa01da6522625be01dded730b26751/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc9d09e73de0fa5639bd782166b171448fd6b90b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc9d09e73de0fa5639bd782166b171448fd6b90b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc9d09e73de0fa5639bd782166b171448fd6b90b"
      }
    ],
    "stats": {
      "total": 159,
      "additions": 94,
      "deletions": 65
    },
    "files": [
      {
        "sha": "f3b1e5d0a37a08de1900db1724f13d1ff1a7cd5d",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 14,
        "deletions": 65,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eac9200814fa01da6522625be01dded730b26751/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eac9200814fa01da6522625be01dded730b26751/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=eac9200814fa01da6522625be01dded730b26751",
        "patch": "@@ -172,7 +172,7 @@ class BerkeleyDatabase\n };\n \n /** RAII class that provides access to a Berkeley database */\n-class BerkeleyBatch\n+class BerkeleyBatch : public DatabaseBatch\n {\n     /** RAII class that automatically cleanses its data on destruction */\n     class SafeDbt final\n@@ -195,10 +195,10 @@ class BerkeleyBatch\n     };\n \n private:\n-    bool ReadKey(CDataStream&& key, CDataStream& value);\n-    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite = true);\n-    bool EraseKey(CDataStream&& key);\n-    bool HasKey(CDataStream&& key);\n+    bool ReadKey(CDataStream&& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite = true) override;\n+    bool EraseKey(CDataStream&& key) override;\n+    bool HasKey(CDataStream&& key) override;\n \n protected:\n     Db* pdb;\n@@ -211,71 +211,20 @@ class BerkeleyBatch\n \n public:\n     explicit BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n-    ~BerkeleyBatch() { Close(); }\n+    ~BerkeleyBatch() override { Close(); }\n \n     BerkeleyBatch(const BerkeleyBatch&) = delete;\n     BerkeleyBatch& operator=(const BerkeleyBatch&) = delete;\n \n-    void Flush();\n-    void Close();\n-\n-    template <typename K, typename T>\n-    bool Read(const K& key, T& value)\n-    {\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(1000);\n-        ssKey << key;\n-\n-        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-        if (!ReadKey(std::move(ssKey), ssValue)) return false;\n-        try {\n-            ssValue >> value;\n-            return true;\n-        } catch (const std::exception&) {\n-            return false;\n-        }\n-    }\n-\n-    template <typename K, typename T>\n-    bool Write(const K& key, const T& value, bool fOverwrite = true)\n-    {\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(1000);\n-        ssKey << key;\n-\n-        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-        ssValue.reserve(10000);\n-        ssValue << value;\n-\n-        return WriteKey(std::move(ssKey), std::move(ssValue), fOverwrite);\n-    }\n-\n-    template <typename K>\n-    bool Erase(const K& key)\n-    {\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(1000);\n-        ssKey << key;\n-\n-        return EraseKey(std::move(ssKey));\n-    }\n-\n-    template <typename K>\n-    bool Exists(const K& key)\n-    {\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(1000);\n-        ssKey << key;\n-\n-        return HasKey(std::move(ssKey));\n-    }\n+    void Flush() override;\n+    void Close() override;\n \n-    bool StartCursor();\n-    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete);\n-    void CloseCursor();\n-    bool TxnBegin();\n-    bool TxnCommit();\n-    bool TxnAbort();\n+    bool StartCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n };\n \n std::string BerkeleyDatabaseVersion();"
      },
      {
        "sha": "76668f8dc28a3e3a115a823cbb9ff7ae9c52221a",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eac9200814fa01da6522625be01dded730b26751/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eac9200814fa01da6522625be01dded730b26751/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=eac9200814fa01da6522625be01dded730b26751",
        "patch": "@@ -6,12 +6,92 @@\n #ifndef BITCOIN_WALLET_DB_H\n #define BITCOIN_WALLET_DB_H\n \n+#include <clientversion.h>\n #include <fs.h>\n+#include <streams.h>\n \n #include <string>\n \n /** Given a wallet directory path or legacy file path, return path to main data file in the wallet database. */\n fs::path WalletDataFilePath(const fs::path& wallet_path);\n void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename);\n \n+/** RAII class that provides access to a WalletDatabase */\n+class DatabaseBatch\n+{\n+private:\n+    virtual bool ReadKey(CDataStream&& key, CDataStream& value) = 0;\n+    virtual bool WriteKey(CDataStream&& key, CDataStream&& value, bool overwrite=true) = 0;\n+    virtual bool EraseKey(CDataStream&& key) = 0;\n+    virtual bool HasKey(CDataStream&& key) = 0;\n+\n+public:\n+    explicit DatabaseBatch() {}\n+    virtual ~DatabaseBatch() {}\n+\n+    DatabaseBatch(const DatabaseBatch&) = delete;\n+    DatabaseBatch& operator=(const DatabaseBatch&) = delete;\n+\n+    virtual void Flush() = 0;\n+    virtual void Close() = 0;\n+\n+    template <typename K, typename T>\n+    bool Read(const K& key, T& value)\n+    {\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(1000);\n+        ssKey << key;\n+\n+        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+        if (!ReadKey(std::move(ssKey), ssValue)) return false;\n+        try {\n+            ssValue >> value;\n+            return true;\n+        } catch (const std::exception&) {\n+            return false;\n+        }\n+    }\n+\n+    template <typename K, typename T>\n+    bool Write(const K& key, const T& value, bool fOverwrite = true)\n+    {\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(1000);\n+        ssKey << key;\n+\n+        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+        ssValue.reserve(10000);\n+        ssValue << value;\n+\n+        return WriteKey(std::move(ssKey), std::move(ssValue), fOverwrite);\n+    }\n+\n+    template <typename K>\n+    bool Erase(const K& key)\n+    {\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(1000);\n+        ssKey << key;\n+\n+        return EraseKey(std::move(ssKey));\n+    }\n+\n+    template <typename K>\n+    bool Exists(const K& key)\n+    {\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(1000);\n+        ssKey << key;\n+\n+        return HasKey(std::move(ssKey));\n+    }\n+\n+    virtual bool StartCursor() = 0;\n+    virtual bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) = 0;\n+    virtual void CloseCursor() = 0;\n+    virtual bool TxnBegin() = 0;\n+    virtual bool TxnCommit() = 0;\n+    virtual bool TxnAbort() = 0;\n+};\n+\n #endif // BITCOIN_WALLET_DB_H"
      }
    ]
  },
  {
    "sha": "b82f0ca4d5465b36debb6c57f335bdccf4899c49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODJmMGNhNGQ1NDY1YjM2ZGViYjZjNTdmMzM1YmRjY2Y0ODk5YzQ5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-15T20:54:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-09T15:43:54Z"
      },
      "message": "walletdb: Add MakeBatch function to BerkeleyDatabase and use it\n\nInstead of having WalletBatch construct the BerkeleyBatch, have\nBerkeleyDatabase do it and return a std::unique_ptr<BerkeleyBatch>",
      "tree": {
        "sha": "e4e0912cc3cc9d43de8308964e31b9ad2b18b928",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4e0912cc3cc9d43de8308964e31b9ad2b18b928"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b82f0ca4d5465b36debb6c57f335bdccf4899c49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b82f0ca4d5465b36debb6c57f335bdccf4899c49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b82f0ca4d5465b36debb6c57f335bdccf4899c49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b82f0ca4d5465b36debb6c57f335bdccf4899c49/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac9200814fa01da6522625be01dded730b26751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac9200814fa01da6522625be01dded730b26751",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac9200814fa01da6522625be01dded730b26751"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 35,
      "deletions": 25
    },
    "files": [
      {
        "sha": "8992031ba0d77d81eaba08f6269aa91771ce026a",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b82f0ca4d5465b36debb6c57f335bdccf4899c49/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b82f0ca4d5465b36debb6c57f335bdccf4899c49/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=b82f0ca4d5465b36debb6c57f335bdccf4899c49",
        "patch": "@@ -841,3 +841,8 @@ bool BerkeleyBatch::HasKey(CDataStream&& key)\n     int ret = pdb->exists(activeTxn, datKey, 0);\n     return ret == 0;\n }\n+\n+std::unique_ptr<BerkeleyBatch> BerkeleyDatabase::MakeBatch(const char* mode, bool flush_on_close)\n+{\n+    return MakeUnique<BerkeleyBatch>(*this, mode, flush_on_close);\n+}"
      },
      {
        "sha": "b565bfc680edc65378c5130bece1d5873516e012",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b82f0ca4d5465b36debb6c57f335bdccf4899c49/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b82f0ca4d5465b36debb6c57f335bdccf4899c49/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=b82f0ca4d5465b36debb6c57f335bdccf4899c49",
        "patch": "@@ -93,6 +93,8 @@ std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, s\n /** Return wheter a BDB wallet database is currently loaded. */\n bool IsBDBWalletLoaded(const fs::path& wallet_path);\n \n+class BerkeleyBatch;\n+\n /** An instance of this class represents one database.\n  * For BerkeleyDB this is just a (env, strFile) tuple.\n  **/\n@@ -161,6 +163,9 @@ class BerkeleyDatabase\n     /** Database pointer. This is initialized lazily and reset during flushes, so it can be null. */\n     std::unique_ptr<Db> m_db;\n \n+    /** Make a BerkeleyBatch connected to this database */\n+    std::unique_ptr<BerkeleyBatch> MakeBatch(const char* mode, bool flush_on_close);\n+\n private:\n     std::string strFile;\n "
      },
      {
        "sha": "3a5a2450e1db65cb874926aec95c0c0548c72d8b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b82f0ca4d5465b36debb6c57f335bdccf4899c49/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b82f0ca4d5465b36debb6c57f335bdccf4899c49/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b82f0ca4d5465b36debb6c57f335bdccf4899c49",
        "patch": "@@ -121,7 +121,7 @@ bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,\n     if (!WriteIC(key, std::make_pair(vchCryptedSecret, checksum), false)) {\n         // It may already exist, so try writing just the checksum\n         std::vector<unsigned char> val;\n-        if (!m_batch.Read(key, val)) {\n+        if (!m_batch->Read(key, val)) {\n             return false;\n         }\n         if (!WriteIC(key, std::make_pair(val, checksum), true)) {\n@@ -166,8 +166,8 @@ bool WalletBatch::WriteBestBlock(const CBlockLocator& locator)\n \n bool WalletBatch::ReadBestBlock(CBlockLocator& locator)\n {\n-    if (m_batch.Read(DBKeys::BESTBLOCK, locator) && !locator.vHave.empty()) return true;\n-    return m_batch.Read(DBKeys::BESTBLOCK_NOMERKLE, locator);\n+    if (m_batch->Read(DBKeys::BESTBLOCK, locator) && !locator.vHave.empty()) return true;\n+    return m_batch->Read(DBKeys::BESTBLOCK_NOMERKLE, locator);\n }\n \n bool WalletBatch::WriteOrderPosNext(int64_t nOrderPosNext)\n@@ -177,7 +177,7 @@ bool WalletBatch::WriteOrderPosNext(int64_t nOrderPosNext)\n \n bool WalletBatch::ReadPool(int64_t nPool, CKeyPool& keypool)\n {\n-    return m_batch.Read(std::make_pair(DBKeys::POOL, nPool), keypool);\n+    return m_batch->Read(std::make_pair(DBKeys::POOL, nPool), keypool);\n }\n \n bool WalletBatch::WritePool(int64_t nPool, const CKeyPool& keypool)\n@@ -693,14 +693,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     LOCK(pwallet->cs_wallet);\n     try {\n         int nMinVersion = 0;\n-        if (m_batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (m_batch->Read(DBKeys::MINVERSION, nMinVersion)) {\n             if (nMinVersion > FEATURE_LATEST)\n                 return DBErrors::TOO_NEW;\n             pwallet->LoadMinVersion(nMinVersion);\n         }\n \n         // Get cursor\n-        if (!m_batch.StartCursor())\n+        if (!m_batch->StartCursor())\n         {\n             pwallet->WalletLogPrintf(\"Error getting wallet database cursor\\n\");\n             return DBErrors::CORRUPT;\n@@ -712,13 +712,13 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n             bool complete;\n-            bool ret = m_batch.ReadAtCursor(ssKey, ssValue, complete);\n+            bool ret = m_batch->ReadAtCursor(ssKey, ssValue, complete);\n             if (complete) {\n                 break;\n             }\n             else if (!ret)\n             {\n-                m_batch.CloseCursor();\n+                m_batch->CloseCursor();\n                 pwallet->WalletLogPrintf(\"Error reading next record from wallet database\\n\");\n                 return DBErrors::CORRUPT;\n             }\n@@ -748,7 +748,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     } catch (...) {\n         result = DBErrors::CORRUPT;\n     }\n-    m_batch.CloseCursor();\n+    m_batch->CloseCursor();\n \n     // Set the active ScriptPubKeyMans\n     for (auto spk_man_pair : wss.m_active_external_spks) {\n@@ -785,7 +785,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n \n     // Last client version to open this wallet, was previously the file version number\n     int last_client = CLIENT_VERSION;\n-    m_batch.Read(DBKeys::VERSION, last_client);\n+    m_batch->Read(DBKeys::VERSION, last_client);\n \n     int wallet_version = pwallet->GetVersion();\n     pwallet->WalletLogPrintf(\"Wallet File Version = %d\\n\", wallet_version > 0 ? wallet_version : last_client);\n@@ -810,7 +810,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         return DBErrors::NEED_REWRITE;\n \n     if (last_client < CLIENT_VERSION) // Update\n-        m_batch.Write(DBKeys::VERSION, CLIENT_VERSION);\n+        m_batch->Write(DBKeys::VERSION, CLIENT_VERSION);\n \n     if (wss.fAnyUnordered)\n         result = pwallet->ReorderTransactions();\n@@ -846,13 +846,13 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n \n     try {\n         int nMinVersion = 0;\n-        if (m_batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (m_batch->Read(DBKeys::MINVERSION, nMinVersion)) {\n             if (nMinVersion > FEATURE_LATEST)\n                 return DBErrors::TOO_NEW;\n         }\n \n         // Get cursor\n-        if (!m_batch.StartCursor())\n+        if (!m_batch->StartCursor())\n         {\n             LogPrintf(\"Error getting wallet database cursor\\n\");\n             return DBErrors::CORRUPT;\n@@ -864,11 +864,11 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n             bool complete;\n-            bool ret = m_batch.ReadAtCursor(ssKey, ssValue, complete);\n+            bool ret = m_batch->ReadAtCursor(ssKey, ssValue, complete);\n             if (complete) {\n                 break;\n             } else if (!ret) {\n-                m_batch.CloseCursor();\n+                m_batch->CloseCursor();\n                 LogPrintf(\"Error reading next record from wallet database\\n\");\n                 return DBErrors::CORRUPT;\n             }\n@@ -886,7 +886,7 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n     } catch (...) {\n         result = DBErrors::CORRUPT;\n     }\n-    m_batch.CloseCursor();\n+    m_batch->CloseCursor();\n \n     return result;\n }\n@@ -999,17 +999,17 @@ bool WalletBatch::WriteWalletFlags(const uint64_t flags)\n \n bool WalletBatch::TxnBegin()\n {\n-    return m_batch.TxnBegin();\n+    return m_batch->TxnBegin();\n }\n \n bool WalletBatch::TxnCommit()\n {\n-    return m_batch.TxnCommit();\n+    return m_batch->TxnCommit();\n }\n \n bool WalletBatch::TxnAbort()\n {\n-    return m_batch.TxnAbort();\n+    return m_batch->TxnAbort();\n }\n \n bool IsWalletLoaded(const fs::path& wallet_path)"
      },
      {
        "sha": "6b55361c07dae19e5b2b12a8ee65eeccfc0c3cc4",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b82f0ca4d5465b36debb6c57f335bdccf4899c49/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b82f0ca4d5465b36debb6c57f335bdccf4899c49/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=b82f0ca4d5465b36debb6c57f335bdccf4899c49",
        "patch": "@@ -183,32 +183,32 @@ class WalletBatch\n     template <typename K, typename T>\n     bool WriteIC(const K& key, const T& value, bool fOverwrite = true)\n     {\n-        if (!m_batch.Write(key, value, fOverwrite)) {\n+        if (!m_batch->Write(key, value, fOverwrite)) {\n             return false;\n         }\n         m_database.IncrementUpdateCounter();\n         if (m_database.nUpdateCounter % 1000 == 0) {\n-            m_batch.Flush();\n+            m_batch->Flush();\n         }\n         return true;\n     }\n \n     template <typename K>\n     bool EraseIC(const K& key)\n     {\n-        if (!m_batch.Erase(key)) {\n+        if (!m_batch->Erase(key)) {\n             return false;\n         }\n         m_database.IncrementUpdateCounter();\n         if (m_database.nUpdateCounter % 1000 == 0) {\n-            m_batch.Flush();\n+            m_batch->Flush();\n         }\n         return true;\n     }\n \n public:\n     explicit WalletBatch(WalletDatabase& database, const char* pszMode = \"r+\", bool _fFlushOnClose = true) :\n-        m_batch(database, pszMode, _fFlushOnClose),\n+        m_batch(database.MakeBatch(pszMode, _fFlushOnClose)),\n         m_database(database)\n     {\n     }\n@@ -280,7 +280,7 @@ class WalletBatch\n     //! Abort current transaction\n     bool TxnAbort();\n private:\n-    BerkeleyBatch m_batch;\n+    std::unique_ptr<BerkeleyBatch> m_batch;\n     WalletDatabase& m_database;\n };\n "
      }
    ]
  }
]