[
  {
    "sha": "28a9c9b83924f585b397f0f3b8e9e73780ac0ad6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGE5YzliODM5MjRmNTg1YjM5N2YwZjNiOGU5ZTczNzgwYWMwYWQ2",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-26T03:51:11Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-09T15:06:00Z"
      },
      "message": "Make SHA256SUMS fragment right after build",
      "tree": {
        "sha": "c89a7609da359baa262935dadf06ddc0d657f062",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c89a7609da359baa262935dadf06ddc0d657f062"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93e38d5c06d9b32326585121b46bb59041d7cfed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e38d5c06d9b32326585121b46bb59041d7cfed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93e38d5c06d9b32326585121b46bb59041d7cfed"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 23,
      "deletions": 17
    },
    "files": [
      {
        "sha": "6741328473dd5cc73d0e75dc12853ab30208c776",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=28a9c9b83924f585b397f0f3b8e9e73780ac0ad6",
        "patch": "@@ -230,20 +230,7 @@ if [ ! -e \"$GIT_ARCHIVE\" ]; then\n     git archive --prefix=\"${DISTNAME}/\" --output=\"$GIT_ARCHIVE\" HEAD\n fi\n \n-# tmpdir=\"$(mktemp -d)\"\n-# (\n-#     cd \"$tmpdir\"\n-#     mkdir -p inputs\n-#     ln -sf --target-directory=inputs \"$GIT_ARCHIVE\"\n-\n-#     mkdir -p \"$OUTDIR\"\n-#     find -L inputs -type f -print0 | xargs -0 sha256sum > \"${OUTDIR}/inputs.SHA256SUMS\"\n-# )\n-\n mkdir -p \"$OUTDIR\"\n-cat << EOF > \"$OUTDIR\"/inputs.SHA256SUMS\n-$(sha256sum \"$GIT_ARCHIVE\" | cut -d' ' -f1)  inputs/$(basename \"$GIT_ARCHIVE\")\n-EOF\n \n ###########################\n # Binary Tarball Building #\n@@ -450,3 +437,13 @@ mkdir -p \"$DISTSRC\"\n rm -rf \"$ACTUAL_OUTDIR\"\n mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n     || ( rm -rf \"$ACTUAL_OUTDIR\" && exit 1 )\n+\n+(\n+    cd /outdir-base\n+    {\n+        echo \"$GIT_ARCHIVE\"\n+        find \"$ACTUAL_OUTDIR\" -type f\n+    } | xargs realpath --relative-base=\"$PWD\" \\\n+      | xargs sha256sum \\\n+      | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n+)"
      },
      {
        "sha": "b1eec686ecf056e52662dd0c9082dc04ec43c4d8",
        "filename": "contrib/guix/libexec/codesign.sh",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6/contrib/guix/libexec/codesign.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6/contrib/guix/libexec/codesign.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/codesign.sh?ref=28a9c9b83924f585b397f0f3b8e9e73780ac0ad6",
        "patch": "@@ -55,10 +55,6 @@ if [ ! -e \"$CODESIGNATURE_GIT_ARCHIVE\" ]; then\n fi\n \n mkdir -p \"$OUTDIR\"\n-cat << EOF > \"$OUTDIR\"/inputs.SHA256SUMS\n-$(sha256sum \"$UNSIGNED_TARBALL\" | cut -d' ' -f1)  inputs/$(basename \"$UNSIGNED_TARBALL\")\n-$(sha256sum \"$CODESIGNATURE_GIT_ARCHIVE\" | cut -d' ' -f1)  inputs/$(basename \"$CODESIGNATURE_GIT_ARCHIVE\")\n-EOF\n \n mkdir -p \"$DISTSRC\"\n (\n@@ -103,3 +99,14 @@ mkdir -p \"$DISTSRC\"\n rm -rf \"$ACTUAL_OUTDIR\"\n mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n     || ( rm -rf \"$ACTUAL_OUTDIR\" && exit 1 )\n+\n+(\n+    cd /outdir-base\n+    {\n+        echo \"$UNSIGNED_TARBALL\"\n+        echo \"$CODESIGNATURE_GIT_ARCHIVE\"\n+        find \"$ACTUAL_OUTDIR\" -type f\n+    } | xargs realpath --relative-base=\"$PWD\" \\\n+        | xargs sha256sum \\\n+        | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n+)"
      },
      {
        "sha": "efeeede9db9b29a36a7ffff063da4adf088cf690",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=28a9c9b83924f585b397f0f3b8e9e73780ac0ad6",
        "patch": "@@ -22,6 +22,7 @@\n              (gnu packages linux)\n              (gnu packages llvm)\n              (gnu packages mingw)\n+             (gnu packages moreutils)\n              (gnu packages perl)\n              (gnu packages pkg-config)\n              (gnu packages python)\n@@ -572,6 +573,7 @@ inspecting signatures in Mach-O binaries.\")\n         patch\n         gawk\n         sed\n+        moreutils\n         ;; Compression and archiving\n         tar\n         bzip2"
      }
    ]
  },
  {
    "sha": "4cc35daed557f38b080360a89036b2e97a6f78c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2MzNWRhZWQ1NTdmMzhiMDgwMzYwYTg5MDM2YjJlOTdhNmY3OGMy",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-07T19:05:33Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-09T15:06:00Z"
      },
      "message": "Rewrite guix-{attest,verify} for new hier",
      "tree": {
        "sha": "7c74c4981bc3b2ff5539b732db041a2739560548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c74c4981bc3b2ff5539b732db041a2739560548"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cc35daed557f38b080360a89036b2e97a6f78c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cc35daed557f38b080360a89036b2e97a6f78c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cc35daed557f38b080360a89036b2e97a6f78c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cc35daed557f38b080360a89036b2e97a6f78c2/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28a9c9b83924f585b397f0f3b8e9e73780ac0ad6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28a9c9b83924f585b397f0f3b8e9e73780ac0ad6"
      }
    ],
    "stats": {
      "total": 242,
      "additions": 132,
      "deletions": 110
    },
    "files": [
      {
        "sha": "7757d4bd28bc4c76d09598fe9423d2f2db372d6f",
        "filename": "contrib/guix/guix-attest",
        "status": "modified",
        "additions": 63,
        "deletions": 70,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc35daed557f38b080360a89036b2e97a6f78c2/contrib/guix/guix-attest",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc35daed557f38b080360a89036b2e97a6f78c2/contrib/guix/guix-attest",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-attest?ref=4cc35daed557f38b080360a89036b2e97a6f78c2",
        "patch": "@@ -99,24 +99,34 @@ fi\n # We should be able to find at least one output\n ################\n \n-echo \"Looking for build output directories in ${OUTDIR_BASE}\"\n+echo \"Looking for build output SHA256SUMS fragments in ${OUTDIR_BASE}\"\n \n shopt -s nullglob\n-OUTDIRS=( \"${OUTDIR_BASE}\"/* ) # This expands to an array of directories...\n+OUTDIRS=( \"$OUTDIR_BASE\"/*/SHA256SUMS.part ) # This expands to an array of directories...\n shopt -u nullglob\n \n+noncodesigned_fragments=()\n+codesigned_fragments=()\n+\n if (( ${#OUTDIRS[@]} )); then\n-    echo \"Found build output directories:\"\n+    echo \"Found build output SHA256SUMS fragments:\"\n     for outdir in \"${OUTDIRS[@]}\"; do\n         echo \"    '$outdir'\"\n+        case \"$outdir\" in\n+            \"$OUTDIR_BASE\"/*-codesigned/SHA256SUMS.part)\n+                codesigned_fragments+=(\"$outdir\")\n+                ;;\n+            *)\n+                noncodesigned_fragments+=(\"$outdir\")\n+                ;;\n+        esac\n     done\n     echo\n else\n-    echo \"ERR: Could not find any build output directories in ${OUTDIR_BASE}\"\n+    echo \"ERR: Could not find any build output SHA256SUMS fragments in ${OUTDIR_BASE}\"\n     exit 1\n fi\n \n-\n ##############\n ##  Attest  ##\n ##############\n@@ -126,82 +136,65 @@ fi\n #   HOST: The output directory being attested\n #\n out_name() {\n-    basename \"$1\"\n-}\n-\n-# Usage: out_sig_dir $outdir\n-#\n-#   outdir: The output directory being attested\n-#\n-out_sig_dir() {\n-    echo \"$GUIX_SIGS_REPO/$VERSION/$(out_name \"$1\")/$signer_name\"\n+    basename \"$(dirname \"$1\")\"\n }\n \n-# Accumulate a list of signature directories that already exist...\n-outdirs_already_attested_to=()\n-\n echo \"Attesting to build outputs for version: '${VERSION}'\"\n echo \"\"\n \n-# MAIN LOGIC: Loop through each output for VERSION and attest to output in\n-#             GUIX_SIGS_REPO as SIGNER, if attestation does not exist\n-for outdir in \"${OUTDIRS[@]}\"; do\n-    if [ -e \"${outdir}/SKIPATTEST.TAG\" ]; then\n-        echo \"${outname}: SKIPPING: Output directory marked with SKIPATTEST.TAG file\"\n-        continue\n-    fi\n-    outname=\"$(out_name \"$outdir\")\"\n-    outsigdir=\"$(out_sig_dir \"$outdir\")\"\n-    if [ -e \"$outsigdir\" ]; then\n-        echo \"${outname}: SKIPPING: Signature directory already exists in the specified guix.sigs repository\"\n-        outdirs_already_attested_to+=(\"$outdir\")\n+outsigdir=\"$GUIX_SIGS_REPO/$VERSION/$signer_name\"\n+mkdir -p \"$outsigdir\"\n+(\n+    cd \"$outsigdir\"\n+\n+    if [ -e \"noncodesigned.SHA256SUMS\" ]; then\n+        echo \"noncodesigned.SHA256SUMS already exists, using...\"\n+    elif (( ${#noncodesigned_fragments[@]} )); then\n+        cat \"${noncodesigned_fragments[@]}\" \\\n+            | sort -u \\\n+            | sort -k2 \\\n+                   > noncodesigned.SHA256SUMS\n     else\n-        # Clean up incomplete sigdir if something fails (likely gpg)\n-        trap 'rm -rf \"$outsigdir\"' ERR\n-\n-        mkdir -p \"$outsigdir\"\n-\n-        (\n-            cd \"$outdir\"\n-\n-            if [ -e inputs.SHA256SUMS ]; then\n-                echo \"${outname}: Including existent input SHA256SUMS\"\n-                cat inputs.SHA256SUMS >> \"$outsigdir\"/SHA256SUMS\n-            fi\n+        echo \"no noncodesigned outputs found\"\n+    fi\n \n-            echo \"${outname}: Hashing build outputs to produce SHA256SUMS\"\n-            files=\"$(find -L . -type f ! -iname '*.SHA256SUMS')\"\n-            if [ -n \"$files\" ]; then\n-                cut -c3- <<< \"$files\" | env LC_ALL=C sort | xargs sha256sum >> \"$outsigdir\"/SHA256SUMS\n-            else\n-                echo \"ERR: ${outname}: No outputs found in '${outdir}'\"\n-                exit 1\n-            fi\n-        )\n-        if [ -z \"$NO_SIGN\" ]; then\n-            echo \"${outname}: Signing SHA256SUMS to produce SHA256SUMS.asc\"\n-            gpg --detach-sign --local-user \"$gpg_key_name\" --armor --output \"$outsigdir\"/SHA256SUMS.asc \"$outsigdir\"/SHA256SUMS\n+    if [ -e noncodesigned.SHA256SUMS ]; then\n+        # noncodesigned.SHA256SUMS already exists, or was produced, let's sanity\n+        # check it.\n+        ( cd \"$OUTDIR_BASE\"; sha256sum -c \"$outsigdir\"/noncodesigned.SHA256SUMS )\n+\n+        # Now produce all.SHA256SUMS manifest\n+        if [ -e \"all.SHA256SUMS\" ]; then\n+            echo \"all.SHA256SUMS already there!\"\n+        elif (( ${#codesigned_fragments[@]} )); then\n+            cat \"${OUTDIRS[@]}\" \\\n+                | sort -u \\\n+                | sort -k2 \\\n+                       > all.SHA256SUMS\n         else\n-            echo \"${outname}: Not signing SHA256SUMS as \\$NO_SIGN is not empty\"\n+            echo \"no codesigned outputs found\"\n         fi\n-        echo \"\"\n \n-        trap - ERR  # Reset ERR trap\n+        if [ -e all.SHA256SUMS ]; then\n+            ( cd \"$OUTDIR_BASE\"; sha256sum -c \"$outsigdir\"/all.SHA256SUMS )\n+        fi\n     fi\n-done\n-\n-if (( ${#outdirs_already_attested_to[@]} )); then\n-# ...so that we can print them out nicely in a warning message\n-cat << EOF\n \n-WARN: Signature directories from '$signer_name' already exist in the specified\n-      guix.sigs repository for the following output directories and were\n-      skipped:\n \n-EOF\n-for outdir in \"${outdirs_already_attested_to[@]}\"; do\n-    echo \"    '${outdir}'\"\n-    echo \"    Corresponds to: '$(out_sig_dir \"$outdir\")'\"\n+    if [ -z \"$NO_SIGN\" ]; then\n+        echo \"Signing SHA256SUMS to produce SHA256SUMS.asc\"\n+        for i in *.SHA256SUMS; do\n+            if [ ! -e \"$i\".asc ]; then\n+                gpg --detach-sign \\\n+                    --local-user \"$gpg_key_name\" \\\n+                    --armor \\\n+                    --output \"$i\".asc \"$i\"\n+            else\n+                echo \"Signature already there\"\n+            fi\n+        done\n+    else\n+        echo \"Not signing SHA256SUMS as \\$NO_SIGN is not empty\"\n+    fi\n     echo \"\"\n-done\n-fi\n+)"
      },
      {
        "sha": "a6e2c4065ecc4c6d154dc768b3af403169898061",
        "filename": "contrib/guix/guix-verify",
        "status": "modified",
        "additions": 69,
        "deletions": 40,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc35daed557f38b080360a89036b2e97a6f78c2/contrib/guix/guix-verify",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc35daed557f38b080360a89036b2e97a6f78c2/contrib/guix/guix-verify",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-verify?ref=4cc35daed557f38b080360a89036b2e97a6f78c2",
        "patch": "@@ -56,58 +56,87 @@ cmd_usage\n exit 1\n fi\n \n-################\n-# We should be able to find at least one output\n-################\n+##############\n+##  Verify  ##\n+##############\n \n OUTSIGDIR_BASE=\"${GUIX_SIGS_REPO}/${VERSION}\"\n-echo \"Looking for output signature directories in '${OUTSIGDIR_BASE}'\"\n+echo \"Looking for signature directories in '${OUTSIGDIR_BASE}'\"\n+echo \"\"\n+\n+# Usage: verify compare_manifest current_manifest\n+verify() {\n+    local compare_manifest=\"$1\"\n+    local current_manifest=\"$2\"\n+    if ! gpg --quiet --batch --verify \"$current_manifest\".asc \"$current_manifest\" 1>&2; then\n+        echo \"ERR: Failed to verify GPG signature in '${current_manifest}'\"\n+        echo \"\"\n+        echo \"Hint: Either the signature is invalid or the public key is missing\"\n+        echo \"\"\n+    elif ! diff --report-identical \"$compare_manifest\" \"$current_manifest\" 1>&2; then\n+        echo \"ERR: The SHA256SUMS attestation in these two directories differ:\"\n+        echo \"    '${compare_manifest}'\"\n+        echo \"    '${current_manifest}'\"\n+        echo \"\"\n+    else\n+        echo \"Verified: '${current_manifest}'\"\n+        echo \"\"\n+    fi\n+}\n \n shopt -s nullglob\n-OUTSIGDIRS=( \"$OUTSIGDIR_BASE\"/* ) # This expands to an array of directories...\n+all_noncodesigned=( \"$OUTSIGDIR_BASE\"/*/noncodesigned.SHA256SUMS )\n shopt -u nullglob\n \n-if (( ${#OUTSIGDIRS[@]} )); then\n-    echo \"Found output signature directories:\"\n-    for outsigdir in \"${OUTSIGDIRS[@]}\"; do\n-        echo \"    '$outsigdir'\"\n+echo \"--------------------\"\n+echo \"\"\n+if (( ${#all_noncodesigned[@]} )); then\n+    compare_noncodesigned=\"${all_noncodesigned[0]}\"\n+\n+    for current_manifest in \"${all_noncodesigned[@]}\"; do\n+        verify \"$compare_noncodesigned\" \"$current_manifest\"\n     done\n-    echo\n+\n+    echo \"DONE: Checking output signatures for noncodesigned.SHA256SUMS\"\n+    echo \"\"\n else\n-    echo \"ERR: Could not find any output signature directories in ${OUTSIGDIR_BASE}\"\n-    exit 1\n+    echo \"WARN: No signature directories with noncodesigned.SHA256SUMS found\"\n+    echo \"\"\n fi\n \n+shopt -s nullglob\n+all_all=( \"$OUTSIGDIR_BASE\"/*/all.SHA256SUMS )\n+shopt -u nullglob\n \n-##############\n-##  Verify  ##\n-##############\n+echo \"--------------------\"\n+echo \"\"\n+if (( ${#all_all[@]} )); then\n+    compare_all=\"${all_all[0]}\"\n \n-# MAIN LOGIC: Loop through each output for VERSION and check that the SHA256SUMS\n-#             and SHA256SUMS.asc file match between signers, using the first\n-#             available signer as the arbitrary comparison base.\n-for outsigdir in \"${OUTSIGDIRS[@]}\"; do\n-    echo \"BEGIN: Checking output signatures for $(basename \"$outsigdir\")\"\n-    echo \"\"\n-    signer_dirs=( \"$outsigdir\"/* ) # This expands to an array of directories...\n-    compare_signer_dir=\"${signer_dirs[0]}\" # ...we just want the first one\n-    for current_signer_dir in \"${signer_dirs[@]}\"; do\n-        if ! gpg --quiet --batch --verify \"$current_signer_dir\"/SHA256SUMS.asc \"$current_signer_dir\"/SHA256SUMS; then\n-            echo \"ERR: Failed to verify GPG signature in '${current_signer_dir}/SHA256SUMS.asc'\"\n-            echo \"\"\n-            echo \"Hint: Either the signature is invalid or the public key is missing\"\n-            echo \"\"\n-        elif ! diff --report-identical \"$compare_signer_dir\"/SHA256SUMS \"$current_signer_dir\"/SHA256SUMS; then\n-            echo \"ERR: The SHA256SUMS attestation in these two directories differ:\"\n-            echo \"    '${compare_signer_dir}'\"\n-            echo \"    '${current_signer_dir}'\"\n-            echo \"\"\n-        else\n-            echo \"Verified: '${current_signer_dir}'\"\n-            echo \"\"\n-        fi\n+    for current_manifest in \"${all_all[@]}\"; do\n+        verify \"$compare_all\" \"$current_manifest\"\n     done\n-    echo \"DONE: Checking output signatures for $(basename \"$outsigdir\")\"\n+\n+    # Sanity check: there should be no entries that exist in\n+    # noncodesigned.SHA256SUMS that doesn't exist in all.SHA256SUMS\n+    if [[ \"$(comm -23 <(sort \"$compare_noncodesigned\") <(sort \"$compare_all\") | wc -c)\" -ne 0 ]]; then\n+        echo \"ERR: There are unique lines in noncodesigned.SHA256SUMS which\"\n+        echo \"     do not exist in all.SHA256SUMS, something went very wrong.\"\n+        exit 1\n+    fi\n+\n+    echo \"DONE: Checking output signatures for all.SHA256SUMS\"\n     echo \"\"\n+else\n+    echo \"WARN: No signature directories with all.SHA256SUMS found\"\n+    echo \"\"\n+fi\n+\n+echo \"====================\"\n+echo \"\"\n+if (( ${#all_noncodesigned[@]} + ${#all_all[@]} == 0 )); then\n+    echo \"ERR: Unable to perform any verifications as no signature directories\"\n+    echo \"     were found\"\n     echo \"\"\n-done\n+    exit 1\n+fi"
      }
    ]
  },
  {
    "sha": "e2c40a4ed5272d72fea997bd936fba28bb753226",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmM0MGE0ZWQ1MjcyZDcyZmVhOTk3YmQ5MzZmYmEyOGJiNzUzMjI2",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-14T21:00:26Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-14T21:05:26Z"
      },
      "message": "guix-attest: Error out if SHA256SUMS is unexpected",
      "tree": {
        "sha": "0d763e29f29b984a8b203be7d64592f7afd1aa36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d763e29f29b984a8b203be7d64592f7afd1aa36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2c40a4ed5272d72fea997bd936fba28bb753226",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c40a4ed5272d72fea997bd936fba28bb753226",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2c40a4ed5272d72fea997bd936fba28bb753226",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c40a4ed5272d72fea997bd936fba28bb753226/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cc35daed557f38b080360a89036b2e97a6f78c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cc35daed557f38b080360a89036b2e97a6f78c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cc35daed557f38b080360a89036b2e97a6f78c2"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 67,
      "deletions": 27
    },
    "files": [
      {
        "sha": "c8cf73d40011ad8d9a438044a441cab8520d2778",
        "filename": "contrib/guix/guix-attest",
        "status": "modified",
        "additions": 67,
        "deletions": 27,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2c40a4ed5272d72fea997bd936fba28bb753226/contrib/guix/guix-attest",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2c40a4ed5272d72fea997bd936fba28bb753226/contrib/guix/guix-attest",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-attest?ref=e2c40a4ed5272d72fea997bd936fba28bb753226",
        "patch": "@@ -102,15 +102,15 @@ fi\n echo \"Looking for build output SHA256SUMS fragments in ${OUTDIR_BASE}\"\n \n shopt -s nullglob\n-OUTDIRS=( \"$OUTDIR_BASE\"/*/SHA256SUMS.part ) # This expands to an array of directories...\n+sha256sum_fragments=( \"$OUTDIR_BASE\"/*/SHA256SUMS.part ) # This expands to an array of directories...\n shopt -u nullglob\n \n noncodesigned_fragments=()\n codesigned_fragments=()\n \n-if (( ${#OUTDIRS[@]} )); then\n+if (( ${#sha256sum_fragments[@]} )); then\n     echo \"Found build output SHA256SUMS fragments:\"\n-    for outdir in \"${OUTDIRS[@]}\"; do\n+    for outdir in \"${sha256sum_fragments[@]}\"; do\n         echo \"    '$outdir'\"\n         case \"$outdir\" in\n             \"$OUTDIR_BASE\"/*-codesigned/SHA256SUMS.part)\n@@ -139,6 +139,26 @@ out_name() {\n     basename \"$(dirname \"$1\")\"\n }\n \n+shasum_already_exists() {\n+cat <<EOF\n+--\n+\n+ERR: An ${1} file already exists for '${VERSION}' and attests\n+     differently. You likely previously attested to a partial build (e.g. one\n+     where you specified the HOST environment variable).\n+\n+     See the diff above for more context.\n+\n+Hint: You may wish to remove the existing attestations and their signatures by\n+      invoking:\n+\n+          rm '${PWD}/${1}'{,.asc}\n+\n+      Then try running this script again.\n+\n+EOF\n+}\n+\n echo \"Attesting to build outputs for version: '${VERSION}'\"\n echo \"\"\n \n@@ -147,40 +167,60 @@ mkdir -p \"$outsigdir\"\n (\n     cd \"$outsigdir\"\n \n-    if [ -e \"noncodesigned.SHA256SUMS\" ]; then\n-        echo \"noncodesigned.SHA256SUMS already exists, using...\"\n-    elif (( ${#noncodesigned_fragments[@]} )); then\n+    temp_noncodesigned=\"$(mktemp)\"\n+    trap 'rm -rf -- \"$temp_noncodesigned\"' EXIT\n+\n+    if (( ${#noncodesigned_fragments[@]} )); then\n         cat \"${noncodesigned_fragments[@]}\" \\\n             | sort -u \\\n             | sort -k2 \\\n-                   > noncodesigned.SHA256SUMS\n+                   > \"$temp_noncodesigned\"\n+        if [ -e noncodesigned.SHA256SUMS ]; then\n+            # The SHA256SUMS already exists, make sure it's exactly what we\n+            # expect, error out if not\n+            if diff -u noncodesigned.SHA256SUMS \"$temp_noncodesigned\"; then\n+                echo \"A noncodesigned.SHA256SUMS file already exists for '${VERSION}' and is up-to-date.\"\n+            else\n+                shasum_already_exists noncodesigned.SHA256SUMS\n+                exit 1\n+            fi\n+        else\n+            mv \"$temp_noncodesigned\" noncodesigned.SHA256SUMS\n+        fi\n     else\n-        echo \"no noncodesigned outputs found\"\n+        echo \"ERR: No noncodesigned outputs found for '${VERSION}', exiting...\"\n+        exit 1\n     fi\n \n-    if [ -e noncodesigned.SHA256SUMS ]; then\n-        # noncodesigned.SHA256SUMS already exists, or was produced, let's sanity\n-        # check it.\n-        ( cd \"$OUTDIR_BASE\"; sha256sum -c \"$outsigdir\"/noncodesigned.SHA256SUMS )\n-\n-        # Now produce all.SHA256SUMS manifest\n-        if [ -e \"all.SHA256SUMS\" ]; then\n-            echo \"all.SHA256SUMS already there!\"\n-        elif (( ${#codesigned_fragments[@]} )); then\n-            cat \"${OUTDIRS[@]}\" \\\n-                | sort -u \\\n-                | sort -k2 \\\n-                       > all.SHA256SUMS\n-        else\n-            echo \"no codesigned outputs found\"\n-        fi\n+    temp_codesigned=\"$(mktemp)\"\n+    trap 'rm -rf -- \"$temp_codesigned\"' EXIT\n \n-        if [ -e all.SHA256SUMS ]; then\n-            ( cd \"$OUTDIR_BASE\"; sha256sum -c \"$outsigdir\"/all.SHA256SUMS )\n+    if (( ${#codesigned_fragments[@]} )); then\n+        # Note: all.SHA256SUMS attests to all of $sha256sum_fragments, but is\n+        #       not needed if there are no $codesigned_fragments\n+        cat \"${sha256sum_fragments[@]}\" \\\n+            | sort -u \\\n+            | sort -k2 \\\n+                   > \"$temp_codesigned\"\n+        if [ -e codesigned.SHA256SUMS ]; then\n+            # The SHA256SUMS already exists, make sure it's exactly what we\n+            # expect, error out if not\n+            if diff -u all.SHA256SUMS \"$temp_codesigned\"; then\n+                echo \"An all.SHA256SUMS file already exists for '${VERSION}' and is up-to-date.\"\n+            else\n+                shasum_already_exists all.SHA256SUMS\n+                exit 1\n+            fi\n+        else\n+            mv \"$temp_codesigned\" codesigned.SHA256SUMS\n         fi\n+    else\n+        # It is fine to have the codesigned outputs be missing (perhaps the\n+        # detached codesigs have not been published yet), just print a log\n+        # message instead of erroring out\n+        echo \"INFO: No codesigned outputs found for '${VERSION}', skipping...\"\n     fi\n \n-\n     if [ -z \"$NO_SIGN\" ]; then\n         echo \"Signing SHA256SUMS to produce SHA256SUMS.asc\"\n         for i in *.SHA256SUMS; do"
      }
    ]
  }
]