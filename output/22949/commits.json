[
  {
    "sha": "0fbaef9676a1dcb84bcf95afd8d994831ab327b6",
    "node_id": "C_kwDOABII59oAKDBmYmFlZjk2NzZhMWRjYjg0YmNmOTVhZmQ4ZDk5NDgzMWFiMzI3YjY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-11T00:24:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-08T17:53:48Z"
      },
      "message": "fees: Always round up fee calculated from a feerate\n\nWhen calculating the fee for a given tx size from a fee rate, we should\nalways round up to the next satoshi. Otherwise, if we round down (via\ntruncation), the calculated fee may result in a fee with a feerate\nslightly less than targeted.\n\nThis is particularly important for coin selection as a slightly lower\nfeerate than expected can result in a variety of issues.",
      "tree": {
        "sha": "4d41871f8100e99b7412983e5e7f028d15f6ecf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d41871f8100e99b7412983e5e7f028d15f6ecf8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fbaef9676a1dcb84bcf95afd8d994831ab327b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fbaef9676a1dcb84bcf95afd8d994831ab327b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fbaef9676a1dcb84bcf95afd8d994831ab327b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fbaef9676a1dcb84bcf95afd8d994831ab327b6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "927586990eb9bc8403a3831247847bdd3bf60423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/927586990eb9bc8403a3831247847bdd3bf60423",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/927586990eb9bc8403a3831247847bdd3bf60423"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ce149067b76adfee85d1f1f44a5b14fb1b649287",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fbaef9676a1dcb84bcf95afd8d994831ab327b6/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fbaef9676a1dcb84bcf95afd8d994831ab327b6/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=0fbaef9676a1dcb84bcf95afd8d994831ab327b6",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <tinyformat.h>\n \n+#include <cmath>\n+\n CFeeRate::CFeeRate(const CAmount& nFeePaid, uint32_t num_bytes)\n {\n     const int64_t nSize{num_bytes};\n@@ -22,7 +24,9 @@ CAmount CFeeRate::GetFee(uint32_t num_bytes) const\n {\n     const int64_t nSize{num_bytes};\n \n-    CAmount nFee = nSatoshisPerK * nSize / 1000;\n+    // Be explicit that we're converting from a double to int64_t (CAmount) here.\n+    // We've previously had issues with the silent double->int64_t conversion.\n+    CAmount nFee{static_cast<CAmount>(std::ceil(nSatoshisPerK * nSize / 1000.0))};\n \n     if (nFee == 0 && nSize != 0) {\n         if (nSatoshisPerK > 0) nFee = CAmount(1);"
      },
      {
        "sha": "8ba896bb01fed960a6d84f806dc12b06c40d90c0",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fbaef9676a1dcb84bcf95afd8d994831ab327b6/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fbaef9676a1dcb84bcf95afd8d994831ab327b6/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=0fbaef9676a1dcb84bcf95afd8d994831ab327b6",
        "patch": "@@ -48,6 +48,7 @@ class CFeeRate\n     CFeeRate(const CAmount& nFeePaid, uint32_t num_bytes);\n     /**\n      * Return the fee in satoshis for the given size in bytes.\n+     * If the calculated fee would have fractional satoshis, then the returned fee will always be rounded up to the nearest satoshi.\n      */\n     CAmount GetFee(uint32_t num_bytes) const;\n     /**"
      },
      {
        "sha": "aa23d7167106deda20b0a20f7be397cee1d3a71d",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fbaef9676a1dcb84bcf95afd8d994831ab327b6/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fbaef9676a1dcb84bcf95afd8d994831ab327b6/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=0fbaef9676a1dcb84bcf95afd8d994831ab327b6",
        "patch": "@@ -48,13 +48,13 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\n     BOOST_CHECK_EQUAL(feeRate.GetFee(9e3), CAmount(-9e3));\n \n     feeRate = CFeeRate(123);\n-    // Truncates the result, if not integer\n+    // Rounds up the result, if not integer\n     BOOST_CHECK_EQUAL(feeRate.GetFee(0), CAmount(0));\n     BOOST_CHECK_EQUAL(feeRate.GetFee(8), CAmount(1)); // Special case: returns 1 instead of 0\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(9), CAmount(1));\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(121), CAmount(14));\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(122), CAmount(15));\n-    BOOST_CHECK_EQUAL(feeRate.GetFee(999), CAmount(122));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(9), CAmount(2));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(121), CAmount(15));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(122), CAmount(16));\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(999), CAmount(123));\n     BOOST_CHECK_EQUAL(feeRate.GetFee(1e3), CAmount(123));\n     BOOST_CHECK_EQUAL(feeRate.GetFee(9e3), CAmount(1107));\n "
      },
      {
        "sha": "252a85c282283669aa54f33ca0246424cea4295b",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fbaef9676a1dcb84bcf95afd8d994831ab327b6/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fbaef9676a1dcb84bcf95afd8d994831ab327b6/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=0fbaef9676a1dcb84bcf95afd8d994831ab327b6",
        "patch": "@@ -810,10 +810,10 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     // nDustThreshold = 182 * 3702 / 1000\n     dustRelayFee = CFeeRate(3702);\n     // dust:\n-    t.vout[0].nValue = 673 - 1;\n+    t.vout[0].nValue = 674 - 1;\n     CheckIsNotStandard(t, \"dust\");\n     // not dust:\n-    t.vout[0].nValue = 673;\n+    t.vout[0].nValue = 674;\n     CheckIsStandard(t);\n     dustRelayFee = CFeeRate(DUST_RELAY_TX_FEE);\n "
      },
      {
        "sha": "ada97417e4c62a1f749ea8e7977917e57857e936",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fbaef9676a1dcb84bcf95afd8d994831ab327b6/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fbaef9676a1dcb84bcf95afd8d994831ab327b6/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=0fbaef9676a1dcb84bcf95afd8d994831ab327b6",
        "patch": "@@ -179,7 +179,7 @@ def run_test(self):\n         assert_equal(\"psbt\" in res, True)\n \n         # create a transaction without change at the maximum fee rate, such that the output is still spendable:\n-        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.0008824})\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.0008823})\n         assert_equal(\"psbt\" in res, True)\n         assert_equal(res[\"fee\"], Decimal(\"0.00009706\"))\n "
      }
    ]
  },
  {
    "sha": "ce2cc44afd51f3df4ee7f14ea05b8da229183923",
    "node_id": "C_kwDOABII59oAKGNlMmNjNDRhZmQ1MWYzZGY0ZWU3ZjE0ZWEwNWI4ZGEyMjkxODM5MjM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-11T00:27:41Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-08T17:53:48Z"
      },
      "message": "tests: Test for assertion when feerate is rounded down\n\nWhen calculating a txs absolute fee, if the fee is rounded down to the\nnearest satoshi, it is possible for the coin selection algorithms to\nundercalculate the fee needed. This can lead to an assertion error in\nsome situations. One such scenario is added to\nrpc_fundrawtransaction.py.",
      "tree": {
        "sha": "369193f46939c2392f4eedc8b0cf3cced82aaffc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/369193f46939c2392f4eedc8b0cf3cced82aaffc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce2cc44afd51f3df4ee7f14ea05b8da229183923",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2cc44afd51f3df4ee7f14ea05b8da229183923",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce2cc44afd51f3df4ee7f14ea05b8da229183923",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2cc44afd51f3df4ee7f14ea05b8da229183923/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fbaef9676a1dcb84bcf95afd8d994831ab327b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fbaef9676a1dcb84bcf95afd8d994831ab327b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fbaef9676a1dcb84bcf95afd8d994831ab327b6"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 28,
      "deletions": 0
    },
    "files": [
      {
        "sha": "90d57c9c76ae9345cd353f4fb49b9023a27153ca",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce2cc44afd51f3df4ee7f14ea05b8da229183923/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce2cc44afd51f3df4ee7f14ea05b8da229183923/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=ce2cc44afd51f3df4ee7f14ea05b8da229183923",
        "patch": "@@ -136,6 +136,7 @@ def run_test(self):\n         self.test_include_unsafe()\n         self.test_external_inputs()\n         self.test_22670()\n+        self.test_feerate_rounding()\n \n     def test_change_position(self):\n         \"\"\"Ensure setting changePosition in fundraw with an exact match is handled properly.\"\"\"\n@@ -1129,6 +1130,33 @@ def do_fund_send(target):\n         do_fund_send(upper_bound)\n \n         self.restart_node(0)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+        self.connect_nodes(0, 3)\n+\n+    def test_feerate_rounding(self):\n+        self.log.info(\"Test that rounding of GetFee does not result in an assertion\")\n+\n+        self.nodes[1].createwallet(\"roundtest\")\n+        w = self.nodes[1].get_wallet_rpc(\"roundtest\")\n+\n+        addr = w.getnewaddress(address_type=\"bech32\")\n+        self.nodes[0].sendtoaddress(addr, 1)\n+        self.generate(self.nodes[0], 1)\n+        self.sync_all()\n+\n+        # A P2WPKH input costs 68 vbytes; With a single P2WPKH output, the rest of the tx is 42 vbytes for a total of 110 vbytes.\n+        # At a feerate of 1.85 sat/vb, the input will need a fee of 125.8 sats and the rest 77.7 sats\n+        # The entire tx fee should be 203.5 sats.\n+        # Coin selection rounds the fee individually instead of at the end (due to how CFeeRate::GetFee works).\n+        # If rounding down (which is the incorrect behavior), then the calculated fee will be 125 + 77 = 202.\n+        # If rounding up, then the calculated fee will be 126 + 78 = 204.\n+        # In the former case, the calculated needed fee is higher than the actual fee being paid, so an assertion is reached\n+        # To test this does not happen, we subtract 202 sats from the input value. If working correctly, this should\n+        # fail with insufficient funds rather than bitcoind asserting.\n+        rawtx = w.createrawtransaction(inputs=[], outputs=[{self.nodes[0].getnewaddress(address_type=\"bech32\"): 1 - 0.00000202}])\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", w.fundrawtransaction, rawtx, {\"fee_rate\": 1.85})\n+\n \n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      }
    ]
  },
  {
    "sha": "80dc829be7f8c3914074b85bb4c125baba18cb2c",
    "node_id": "C_kwDOABII59oAKDgwZGM4MjliZTdmOGMzOTE0MDc0Yjg1YmI0YzEyNWJhYmExOGNiMmM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-08T17:57:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-11T16:29:33Z"
      },
      "message": "tests: Calculate fees more similarly to CFeeRate::GetFee\n\nBecause of floating point precision issues, not all of the rounding done\nis always correct. To fix this, the fee calculation for\nassert_fee_amount is changed to better reflect how CFeeRate::GetFee does\nit.\n\nFirst the feerate is converted to an int representing sat/kvb. Then this\nis multiplied by the transaction size, divivided by 1000, and rounded up\nto the nearest sat. The result is then converted back to BTC (divided by\n1e8) and then rounded down to the nearest sat to avoid precision errors.",
      "tree": {
        "sha": "3dd75a541a3bb5445f79b160f20fb9b98df3f604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dd75a541a3bb5445f79b160f20fb9b98df3f604"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80dc829be7f8c3914074b85bb4c125baba18cb2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80dc829be7f8c3914074b85bb4c125baba18cb2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80dc829be7f8c3914074b85bb4c125baba18cb2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80dc829be7f8c3914074b85bb4c125baba18cb2c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce2cc44afd51f3df4ee7f14ea05b8da229183923",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2cc44afd51f3df4ee7f14ea05b8da229183923",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce2cc44afd51f3df4ee7f14ea05b8da229183923"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 15,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0678e2e6fe24c1a90ad00f83d13c7999d2e30c9e",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80dc829be7f8c3914074b85bb4c125baba18cb2c/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80dc829be7f8c3914074b85bb4c125baba18cb2c/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=80dc829be7f8c3914074b85bb4c125baba18cb2c",
        "patch": "@@ -36,12 +36,12 @@ def assert_approx(v, vexp, vspan=0.00001):\n \n def assert_fee_amount(fee, tx_size, feerate_BTC_kvB):\n     \"\"\"Assert the fee is in range.\"\"\"\n-    feerate_BTC_vB = feerate_BTC_kvB / 1000\n-    target_fee = satoshi_round(tx_size * feerate_BTC_vB)\n+    target_fee = get_fee(tx_size, feerate_BTC_kvB)\n     if fee < target_fee:\n         raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n     # allow the wallet's estimation to be at most 2 bytes off\n-    if fee > (tx_size + 2) * feerate_BTC_vB:\n+    high_fee = get_fee(tx_size + 2, feerate_BTC_kvB)\n+    if fee > high_fee:\n         raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n \n \n@@ -218,6 +218,18 @@ def str_to_b64str(string):\n     return b64encode(string.encode('utf-8')).decode('ascii')\n \n \n+def ceildiv(a, b):\n+    \"\"\"Divide 2 ints and round up to next int rather than round down\"\"\"\n+    return -(-a // b)\n+\n+\n+def get_fee(tx_size, feerate_btc_kvb):\n+    \"\"\"Calculate the fee in BTC given a feerate is BTC/kvB. Reflects CFeeRate::GetFee\"\"\"\n+    feerate_sat_kvb = int(feerate_btc_kvb * Decimal(1e8)) # Fee in sat/kvb as an int to avoid float precision errors\n+    target_fee_sat = ceildiv(feerate_sat_kvb * tx_size, 1000) # Round calculated fee up to nearest sat\n+    return satoshi_round(target_fee_sat / Decimal(1e8)) # Truncate BTC result to nearest sat\n+\n+\n def satoshi_round(amount):\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n "
      }
    ]
  }
]