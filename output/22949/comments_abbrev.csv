achow101,2021-09-12 00:01:15,"It seems odd to me that the wallet and policy should have different fee calculation results for the same transaction.\n\nIn terms of pre-signed transactions, what security implications do you imagine? I don't think it is possible for this to cause a transaction's feerate to fall below the default minimum relay fee because the result of the fee calculation at the minimum relay fee is always an in",https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-917506157,917506157,
darosior,2021-09-12 14:12:15,">  I believe the same is true for the incremental relay fee and how that calculation works.\n\nI don't think it's true in all cases. Take clawback tx A with fee such as it would be rounded up after this PR, not before. The application wants to replace it with clawback tx B with fee equal to `A's fee + incremental relay fee` such as it would not be rounded up.\nBefore this PR tx B would be accep",https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-917644192,917644192,
achow101,2021-09-12 16:45:28,"> I don't think it's true in all cases. Take clawback tx A with fee such as it would be rounded up after this PR, not before. The application wants to replace it with clawback tx B with fee equal to `A's fee + incremental relay fee` such as it would not be rounded up.\n> Before this PR tx B would be accepted, after it would be refused.\n\nHow so? Can you provide a example? I can't think of how ",https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-917669901,917669901,
darosior,2021-09-15 07:36:16,You are right. I also can't think of how this change would be a policy rule tightening.,https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-919774957,919774957,
MarcoFalke,2021-09-20 14:01:19,"> You are right. I also can't think of how this change would be a policy rule tightening.\n\nThis changes policy for non-default fee rate settings. (Probably no one uses those, but wanted to mention it)",https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-922955712,922955712,
jonatack,2021-09-20 17:20:15,"Code review ACK d9ac0cdd5b7829dd45e1dab46fa349d2ce04d5cd modulo policy considerations, per `git diff 053ec2b d9ac0cd`, previously checked at 053ec2b that the new functional tests fail where expected on master, changes since are a named cast, documentation, and named args in the test",https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-923124822,923124822,
ariard,2021-09-23 00:40:20,"I agree, I don't think this change qualifies as a policy rule tightening.\n\nIIUC, previously we had transaction A with absolute fee 203.5 sats. Currently, it's rounded down to 203 sats. After this PR, it will be rounded up to 204 sats.\n\nNote, I think `GetFee` is called in few subsystems beyond mempool acceptance and wallet. Such as for block construction (`addPackageTxs`) or transaction ann",https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-925429999,925429999,
meshcollider,2021-09-28 23:31:13,"This should also fix test failures like this: https://cirrus-ci.com/task/5800722060017664?logs=ci#L3900\n\n```\n test  2021-09-28T17:50:42.592000Z TestFramework (ERROR): Assertion failed \n                                   Traceback (most recent call last):\n                                     File ""/tmp/cirrus-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framewor",https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-929697935,929697935,
MarcoFalke,2021-10-01 08:53:15,"Concept ACK. If someone requests a feerate of 1.23 sat/vB, with a tx vsize of 208, it shouldn't result in 255 fee, but 256. Otherwise, the feerate will be 1.2259... sat/vB.\n\nI think you'll also need to adjust the test, otherwise they won't check this:\n\n```\ntest/functional/test_framework/util.py:def satoshi_round(amount):\n",https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-932045979,932045979,
achow101,2021-10-01 17:40:39,"@MarcoFalke Not quite sure what you want me to adjust.\n\n`satoshi_round` doesn't need any changes afaict.",https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-932430032,932430032,
MarcoFalke,2021-10-02 06:29:54,"`assert_fee_amount`, which uses `satoshi_round` is used in the tests to replicate `GetFee` and check that it gives the same result.\n\nYou are changing `GetFee` (in my previous example https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-932045979) to return 256 instead of 255, so the tests also needs to be adjusted to do the same.",https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-932693247,932693247,
MarcoFalke,2021-10-06 17:20:46,"If you don't want to change `satoshi_round` (because it is used by more than just `assert_fee_amount`), you can first inline it into `assert_fee_amount` and then fix it.",https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-936731744,936731744,
achow101,2021-10-08 17:58:59,I added a commit which changes `assert_fee_amount` to round up the calculated fee.,https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-938988908,938988908,
fanquake,2021-11-25 07:36:51,Added to #23276 for backport to 22.x,https://github.com/bitcoin/bitcoin/pull/22949#issuecomment-978911843,978911843,
jonatack,2021-09-17 10:58:00,"ee9a74d a couple of ideas\n\n- make the double-to-long conversion explicit\n```suggestion\n    // Be explicit that we're converting from double to long (CAmount) here.\n    // We've previously had bugs creep in from silent double->int conversion.\n    CAmount nFee{static_cast<CAmount>(std::ceil(nSatoshisPerK * nSize / 1000.0))};\n```\n-----\n\n- bypass this calculation in the frequent `G",https://github.com/bitcoin/bitcoin/pull/22949#discussion_r710958422,710958422,src/policy/feerate.cpp
jonatack,2021-09-17 10:59:11,"053ec2b nit\n```suggestion\n        rawtx = w.createrawtransaction(inputs=[], outputs=[{self.nodes[0].getnewaddress(address_type=""bech32""): 1 - 0.00000201}])\n```",https://github.com/bitcoin/bitcoin/pull/22949#discussion_r710959094,710959094,test/functional/rpc_fundrawtransaction.py
MarcoFalke,2021-09-20 13:58:30,"Wouldn't it make sense to rename this from `GetFee` to `RoundFee` to clarify that this is not a getter, but a calculation?\n\nAt the very least the doxygen should be updated.",https://github.com/bitcoin/bitcoin/pull/22949#discussion_r712194074,712194074,src/policy/feerate.cpp
achow101,2021-09-20 16:25:48,I added the explicit casting but not the bypass for now.,https://github.com/bitcoin/bitcoin/pull/22949#discussion_r712326120,712326120,src/policy/feerate.cpp
achow101,2021-09-20 16:25:54,Done,https://github.com/bitcoin/bitcoin/pull/22949#discussion_r712326197,712326197,test/functional/rpc_fundrawtransaction.py
achow101,2021-09-20 16:26:37,Updated doxygen. I think keeping it `GetFee` is fine.,https://github.com/bitcoin/bitcoin/pull/22949#discussion_r712326764,712326764,src/policy/feerate.cpp
MarcoFalke,2021-10-11 14:33:28,"It seems a bug to silently accept sub-decimal feerates (Bitcoin Core doesn't accept them either). I think this can be fixed (and the whole conversion avoided) by simply changing all call sites to provide the value in feerate_sat_vB. I can create a pull for that, if this is too unrelated to this pull request.",https://github.com/bitcoin/bitcoin/pull/22949#discussion_r726174324,726174324,test/functional/test_framework/util.py
ryanofsky,2021-10-11 15:22:18,"> It seems a bug to silently accept sub-decimal feerates\n\nThis doesn't seem like bug conceptually. Fees are discrete values, so a fixed precision decimal representation makes sense for absolute fees. Feerates are continuous values (ratio of the discrete values, rational numbers) so any floating or fractional representation makes sense and while error feedback about being out of range would be ",https://github.com/bitcoin/bitcoin/pull/22949#discussion_r726214717,726214717,test/functional/test_framework/util.py
MarcoFalke,2021-10-11 15:53:57,"> This doesn't seem like bug conceptually.\n\nSure, feerates in theory are rational numbers. However, this function is there to replicate the behavior of Bitcoin Core when it comes to feerates. And Bitcoin Core doesn't accept rational numbers as feerates. Only natural numbers, which represent a sat/vB ratio.",https://github.com/bitcoin/bitcoin/pull/22949#discussion_r726251178,726251178,test/functional/test_framework/util.py
achow101,2021-10-11 16:14:07,"CFeeRates are BTC/kvb so we actually can get sub-decimal sat/vb feerates, to 4 decimal places of precision.",https://github.com/bitcoin/bitcoin/pull/22949#discussion_r726276686,726276686,test/functional/test_framework/util.py
achow101,2021-10-11 16:32:38,"I've added a `ceildiv` function as suggested.\n\nI think any broader feerate changes to the tests should be done in another PR. The goal of the test changes here is to just make sure that the calculation is the same.",https://github.com/bitcoin/bitcoin/pull/22949#discussion_r726313134,726313134,test/functional/test_framework/util.py
ryanofsky,2021-10-13 13:30:00,"In commit ""tests: Calculate fees more similarly to CFeeRate::GetFee"" (80dc829be7f8c3914074b85bb4c125baba18cb2c)\n\nI think the `satoshi_round` call just complicates things here and should be dropped. Just `return target_fee_sat / Decimal(1e8)` should already return a decimal object with the right level of precision",https://github.com/bitcoin/bitcoin/pull/22949#discussion_r728064800,728064800,test/functional/test_framework/util.py
ryanofsky,2021-10-13 13:57:56,"> I think this can be fixed (and the whole conversion avoided) by simply changing all call sites to provide the value in feerate_sat_vB. I can create a pull for that, if this is too unrelated to this pull request.\n\nI think this could be a nice simplification for another PR. This function is only used by `assert_fee_amount` which is should be convenient for developers and make tests readable. I",https://github.com/bitcoin/bitcoin/pull/22949#discussion_r728093338,728093338,test/functional/test_framework/util.py
