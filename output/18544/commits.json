[
  {
    "sha": "5eae034996b340c19cebab9efb6c89d20fe051ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWFlMDM0OTk2YjM0MGMxOWNlYmFiOWVmYjZjODlkMjBmZTA1MWVm",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-06T15:34:07Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-09T09:26:24Z"
      },
      "message": "net: limit BIP37 filter lifespan (active between 'filterload' and 'filterclear')\n\nPreviously, a default match-everything bloom filter was set for every peer,\ni.e. even before receiving a 'filterload' message and after receiving a\n'filterclear' message code branches checking for the existence of the filter\nby testing the pointer \"pfilter\" were _always_ executed.",
      "tree": {
        "sha": "5a941edaa3b8fee4b513ca117b199057731c2799",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a941edaa3b8fee4b513ca117b199057731c2799"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5eae034996b340c19cebab9efb6c89d20fe051ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eae034996b340c19cebab9efb6c89d20fe051ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5eae034996b340c19cebab9efb6c89d20fe051ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eae034996b340c19cebab9efb6c89d20fe051ef/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "661bd5dea3d080cd79f15c7703fc6ab577a1aa0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/661bd5dea3d080cd79f15c7703fc6ab577a1aa0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/661bd5dea3d080cd79f15c7703fc6ab577a1aa0c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6594cb84c517352ce8bdef8d9cd463d792824c2c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eae034996b340c19cebab9efb6c89d20fe051ef/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eae034996b340c19cebab9efb6c89d20fe051ef/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5eae034996b340c19cebab9efb6c89d20fe051ef",
        "patch": "@@ -809,14 +809,13 @@ class CNode\n     RecursiveMutex cs_inventory;\n \n     struct TxRelay {\n-        TxRelay() { pfilter = MakeUnique<CBloomFilter>(); }\n         mutable RecursiveMutex cs_filter;\n         // We use fRelayTxes for two purposes -\n         // a) it allows us to not relay tx invs before receiving the peer's version message\n         // b) the peer may tell us in its version message that we should not relay tx invs\n         //    unless it loads a bloom filter.\n         bool fRelayTxes GUARDED_BY(cs_filter){false};\n-        std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter) GUARDED_BY(cs_filter);\n+        std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter) GUARDED_BY(cs_filter){nullptr};\n \n         mutable RecursiveMutex cs_tx_inventory;\n         CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};"
      },
      {
        "sha": "57edf9e2a93c2acdcb6a91bb9b7af6e57848c315",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eae034996b340c19cebab9efb6c89d20fe051ef/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eae034996b340c19cebab9efb6c89d20fe051ef/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5eae034996b340c19cebab9efb6c89d20fe051ef",
        "patch": "@@ -3198,7 +3198,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         }\n         LOCK(pfrom->m_tx_relay->cs_filter);\n         if (pfrom->GetLocalServices() & NODE_BLOOM) {\n-            pfrom->m_tx_relay->pfilter.reset(new CBloomFilter());\n+            pfrom->m_tx_relay->pfilter = nullptr;\n         }\n         pfrom->m_tx_relay->fRelayTxes = true;\n         return true;"
      }
    ]
  },
  {
    "sha": "a9ecbdfcaa15499644d16e9c8ad2c63dfc45b37b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWVjYmRmY2FhMTU0OTk2NDRkMTZlOWM4YWQyYzYzZGZjNDViMzdi",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-06T17:54:49Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-14T14:40:37Z"
      },
      "message": "test: add more inactive filter tests to p2p_filter.py\n\ncheck the following expected behaviors if no filter is set:\n-> filtered block requests are ignored by the node\n-> sending a 'filteradd' message is treated as misbehavior\n   (i.e. the peer's banscore increases by 100)\n\nalso fixes a bug in the on_inv() callback method, which\ndirectly modified the type from BLOCK to FILTERED_BLOCK\nin the received 'inv' message rather than just for the reply\n\nCo-authored-by: MarcoFalke <falke.marco@gmail.com>",
      "tree": {
        "sha": "ff6658ef0004757fc6b2dcfd846616bbd5c217b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff6658ef0004757fc6b2dcfd846616bbd5c217b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9ecbdfcaa15499644d16e9c8ad2c63dfc45b37b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9ecbdfcaa15499644d16e9c8ad2c63dfc45b37b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9ecbdfcaa15499644d16e9c8ad2c63dfc45b37b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9ecbdfcaa15499644d16e9c8ad2c63dfc45b37b/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5eae034996b340c19cebab9efb6c89d20fe051ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eae034996b340c19cebab9efb6c89d20fe051ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5eae034996b340c19cebab9efb6c89d20fe051ef"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 22,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0146a3fe0ad81f5eece2fd673287ecc03f76338d",
        "filename": "test/functional/p2p_filter.py",
        "status": "modified",
        "additions": 22,
        "deletions": 4,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9ecbdfcaa15499644d16e9c8ad2c63dfc45b37b/test/functional/p2p_filter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9ecbdfcaa15499644d16e9c8ad2c63dfc45b37b/test/functional/p2p_filter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_filter.py?ref=a9ecbdfcaa15499644d16e9c8ad2c63dfc45b37b",
        "patch": "@@ -7,18 +7,20 @@\n \"\"\"\n \n from test_framework.messages import (\n+    CInv,\n     MSG_BLOCK,\n     MSG_FILTERED_BLOCK,\n-    msg_getdata,\n-    msg_filterload,\n     msg_filteradd,\n     msg_filterclear,\n+    msg_filterload,\n+    msg_getdata,\n )\n from test_framework.mininode import (\n     P2PInterface,\n     mininode_lock,\n )\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n \n \n class FilterNode(P2PInterface):\n@@ -38,8 +40,9 @@ def on_inv(self, message):\n         for i in message.inv:\n             # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n             if i.type == MSG_BLOCK:\n-                i.type = MSG_FILTERED_BLOCK\n-            want.inv.append(i)\n+                want.inv.append(CInv(MSG_FILTERED_BLOCK, i.hash))\n+            else:\n+                want.inv.append(i)\n         if len(want.inv):\n             self.send_message(want)\n \n@@ -104,6 +107,21 @@ def run_test(self):\n             txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 7)\n             filter_node.wait_for_tx(txid)\n \n+        self.log.info('Check that request for filtered blocks is ignored if no filter is set')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        with self.nodes[0].assert_debug_log(expected_msgs=['received getdata']):\n+            block_hash = self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())[0]\n+            filter_node.wait_for_inv([CInv(MSG_BLOCK, int(block_hash, 16))])\n+            filter_node.sync_with_ping()\n+            assert not filter_node.merkleblock_received\n+            assert not filter_node.tx_received\n+\n+        self.log.info('Check that sending \"filteradd\" if no filter is set is treated as misbehavior (+100)')\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['banscore'], 0)\n+        filter_node.send_and_ping(msg_filteradd(data=b'letsmisbehave'))\n+        assert_equal(self.nodes[0].getpeerinfo()[0]['banscore'], 100)\n+\n         self.log.info(\"Check that division-by-zero remote crash bug [CVE-2013-5700] is fixed\")\n         filter_node.send_and_ping(msg_filterload(data=b'', nHashFuncs=1))\n         filter_node.send_and_ping(msg_filteradd(data=b'letstrytocrashthisnode'))"
      }
    ]
  }
]