hebasto,2020-05-05 06:06:02,cc @sipa,https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-623871970,623871970,
hebasto,2020-05-05 10:52:54,"Updated 5a406f76030263c1c4e5335cea3be022263426f2 -> 7e3f40dd594d81b37458f9f5d36d4d7df99f8917 ([pr18881.01](https://github.com/hebasto/bitcoin/commits/pr18881.01) -> [pr18881.02](https://github.com/hebasto/bitcoin/commits/pr18881.02), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.01..pr18881.02)):\n\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18881#dis",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-623985636,623985636,
hebasto,2020-05-05 11:49:10,"Updated 7e3f40dd594d81b37458f9f5d36d4d7df99f8917 -> a2234071ddc633cf92ba501126b74bf78731f676 ([pr18881.02](https://github.com/hebasto/bitcoin/commits/pr18881.02) -> [pr18881.03](https://github.com/hebasto/bitcoin/commits/pr18881.03), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.02..pr18881.03)):\n\n- addressed @jonatack's [comment](https://github.com/bitcoin/bitcoin/pull/18881#discu",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624007651,624007651,
hebasto,2020-05-05 12:14:27,"Updated a2234071ddc633cf92ba501126b74bf78731f676 -> d3c26862e263fea7d49df7f9bc9acef30a84c1ca ([pr18881.03](https://github.com/hebasto/bitcoin/commits/pr18881.03) -> [pr18881.04](https://github.com/hebasto/bitcoin/commits/pr18881.04), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.03..pr18881.04)):\n\n- addressed @jonatack's comments",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624019271,624019271,
hebasto,2020-05-05 13:26:22,"Updated d3c26862e263fea7d49df7f9bc9acef30a84c1ca -> 86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc ([pr18881.04](https://github.com/hebasto/bitcoin/commits/pr18881.04) -> [pr18881.05](https://github.com/hebasto/bitcoin/commits/pr18881.05), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.04..pr18881.05)):\n\n- addressed @jonatack's comments",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939,624053939,
laanwj,2020-05-07 12:53:07,ACK on using this solution in this specific place but NACK on suggesting its use in general.,https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625236733,625236733,
jonatack,2020-05-07 14:23:03,"<details><summary>looked more deeply into this to try to understand it better</summary>\n<p>\n\nI didn't find a direct reference to a ""COFU"" or ""Construct on First Use"" idiom in any of [these books](https://jonatack.github.io/articles/books-for-bitcoin-core). The best references online seemed to be:\n\n- in the isocpp wiki faq starting from https://isocpp.org/wiki/faq/ctors#static-init-order",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625286358,625286358,
hebasto,2020-05-07 14:40:51,"Updated 86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc -> 6bc686839a7cc09e3586e2a47ae4f16b5d918d3a ([pr18881.05](https://github.com/hebasto/bitcoin/commits/pr18881.05) -> [pr18881.06](https://github.com/hebasto/bitcoin/commits/pr18881.06), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.05..pr18881.06)):\n\n- only the fix of UB in the `DeleteLock()` function remains",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625296903,625296903,
MarcoFalke,2020-05-07 14:41:51,ACK 6bc686839a7cc09e3586e2a47ae4f16b5d918d3a,https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625297515,625297515,
hebasto,2020-05-07 15:19:43,"> Light code review ACK [6bc6868](https://github.com/bitcoin/bitcoin/commit/6bc686839a7cc09e3586e2a47ae4f16b5d918d3a), this commit appears to be an implementation of the solution in https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use-members\n\nTo be exact: https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625320217,625320217,
jonatack,2020-05-07 15:23:26,"> To be exact: https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use\n\nYes.",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625322312,625322312,
hebasto,2020-05-17 12:11:00,"Updated 6bc686839a7cc09e3586e2a47ae4f16b5d918d3a -> d34871883ce116b8ba4e3add5d5330215a0b16f3 ([pr18881.06](https://github.com/hebasto/bitcoin/commits/pr18881.06) -> [pr18881.07](https://github.com/hebasto/bitcoin/commits/pr18881.07), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.06..pr18881.07)):\n\n- add a new commit to address @MarcoFalke's [comment](https://github.com/bitcoin/bitc",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629787071,629787071,
hebasto,2020-05-17 13:01:20,"Updated d34871883ce116b8ba4e3add5d5330215a0b16f3 -> f5c00ba32a041108d0c7c7c8f4c5709b82e1e91a ([pr18881.07](https://github.com/hebasto/bitcoin/commits/pr18881.07) -> [pr18881.08](https://github.com/hebasto/bitcoin/commits/pr18881.08), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.07..pr18881.08)):\n\n- addressed recent @MarcoFalke's comments",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629794045,629794045,
MarcoFalke,2020-05-17 13:13:12,ACK f5c00ba32a041108d0c7c7c8f4c5709b82e1e91a,https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629795992,629795992,
MarcoFalke,2020-05-17 13:30:04,"```\n=================================================================\n\n==28222==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 240 byte(s) in 10 object(s) allocated from:\n\n    #0 0x5559dd5b8762 in operator new(unsigned long) (/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x2e23762)\n\n    #1 0x5559ded68cff in GetL",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629799100,629799100,
MarcoFalke,2020-05-18 10:27:07,"Was this a false positive or a true one? If false, we shouldn't change our code for their bug, but add it to the suppressions.",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630092888,630092888,
hebasto,2020-05-18 10:30:29,"@MarcoFalke \n> Was this a false positive or a true one? If false, we shouldn't change our code for their bug, but add it to the suppressions.\n\nThe main reason why `thread_local` is not usable to track mutexes that are used in destructors is the following statement from https://en.cppreference.com/w/cpp/utility/program/exit:\n> The last destructor for thread-local objects is sequenced-before",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630094469,630094469,
MarcoFalke,2020-05-18 10:43:44,"Ok, fair enough. I think I am giving up on C++. Is your work based on #18851? If yes, maybe add the comment that the map is append only (theoretically unbounded growth) and optionally a co-author.\n\nOtherwise Concept ACK. Will test if this fixes my problem when this is ready for review.",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630100240,630100240,
hebasto,2020-05-18 10:48:26,"> Is your work based on #18851?\n\nYes. The commit message is borrowed from #18851 as I keep improving my English :D\n\n> If yes, maybe add the comment that the map is append only (theoretically unbounded growth) and optionally a co-author.\n\nThat is not the case due to the map shrinking: https://github.com/bitcoin/bitcoin/blob/daa2bcc8e55b4ccc41bec55cbd6a7d6f633e9e6f/src/sync.cpp#L163-L165",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630102209,630102209,
hebasto,2020-05-18 10:53:47,"Updated daa2bcc8e55b4ccc41bec55cbd6a7d6f633e9e6f -> 77b41b79d2e09ff774624a73cda7213abf26c420 ([pr18881.09](https://github.com/hebasto/bitcoin/commits/pr18881.09) -> [pr18881.11](https://github.com/hebasto/bitcoin/commits/pr18881.11), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.09..pr18881.11)):\n\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18881#iss",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630104477,630104477,
hebasto,2020-05-18 15:35:11,"Updated 77b41b79d2e09ff774624a73cda7213abf26c420 -> 068264fcbb8af47f0df676cd088154d7956819d2 ([pr18881.11](https://github.com/hebasto/bitcoin/commits/pr18881.11) -> [pr18881.13](https://github.com/hebasto/bitcoin/commits/pr18881.13), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.11..pr18881.13)):\n\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18881#dis",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630262961,630262961,
hebasto,2020-05-18 22:41:53,"Updated 068264fcbb8af47f0df676cd088154d7956819d2 -> 26c093a9957756f3743c2347fe0abd90f81159c4 ([pr18881.13](https://github.com/hebasto/bitcoin/commits/pr18881.13) -> [pr18881.14](https://github.com/hebasto/bitcoin/commits/pr18881.14), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.13..pr18881.14)):\n\n- dropped technically incorrect mention of ""trivial destructors""\n- replaced the raw",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630472810,630472810,
MarcoFalke,2020-05-18 22:48:27,"What do you mean with ""technically incorrect""? https://en.cppreference.com/w/cpp/language/destructor#Trivial_destructor",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630474924,630474924,
hebasto,2020-05-18 23:11:39,"> What do you mean with ""technically incorrect""? https://en.cppreference.com/w/cpp/language/destructor#Trivial_destructor\n\n1) ibid:\n> A trivial destructor is a destructor that performs no action. Objects with trivial destructors **don't require a delete-expression** and may be disposed of by simply deallocating their storage.\n\n2) having a trivial destructor is important for the destroyin",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630481876,630481876,
MarcoFalke,2020-05-19 01:00:05,"> As we are not going to destroy LockData instance, this requirement is not relevant\n\nWhy not? Assuming ~LockData had side effects, then not calling the destructor is going to miss those side effects.",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630513212,630513212,
DrahtBot,2020-05-19 01:27:00,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18635 (Replace -Wthread-safety-analysis with broader -Wthread-safety by hebasto)\n\nIf you consider this pull request imp",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630520924,630520924,
MarcoFalke,2020-05-19 12:25:57,"And if this was somehow ""incorrect"" then `LogInstance` should also be adjusted to be consistent",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630784173,630784173,
hebasto,2020-05-20 05:35:46,"I'll try to elaborate my opinion :)\n\nhttps://github.com/bitcoin/bitcoin/blob/068264fcbb8af47f0df676cd088154d7956819d2/src/sync.cpp#L98\n\n@MarcoFalke \n\n> What do you mean with ""technically incorrect""? https://en.cppreference.com/w/cpp/language/destructor#Trivial_destructor\n\n1. I mean that among `LockData` type and its subtypes only `using LockPair = std::pair<void*, void*>;` and `std",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-631247627,631247627,
MarcoFalke,2020-05-22 11:38:25,"> If this statement is required to be added to the code as a comment, that comment should refer to ""not having an explicit desctructor"" or ""having a implicit desctructor"", but not to ""a trivial desctructor"".\n\nThe statement has been added to the logger, so I don't see why it shouldn't be added here.\n\n> reference, and this approach explicitly shows our intention do not delete the heap-alloca",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632647820,632647820,
MarcoFalke,2020-05-22 11:50:37,"re-ACK 26c093a9957756f3743c2347fe0abd90f81159c4 only change since last review is removing undefined behaviour 🚗\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 26c093a9957756f3743c2347fe0abd90f81159c4 only change since last review is removing undefined behaviour 🚗\n-----BEGIN PGP SIGNATURE-----",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632652222,632652222,
hebasto,2020-05-22 12:03:55,"@MarcoFalke \n> > If this statement is required to be added to the code as a comment, that comment should refer to ""not having an explicit desctructor"" or ""having a implicit desctructor"", but not to ""a trivial desctructor"".\n> \n> The statement has been added to the logger, so I don't see why it shouldn't be added here.\n\nhttps://github.com/bitcoin/bitcoin/blob/b5c423c48e094bd098e11c3d1f57ac",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632657505,632657505,
hebasto,2020-05-22 12:49:27,"Updated 26c093a9957756f3743c2347fe0abd90f81159c4 -> 90eb027204f5a9d7c00fa97d4112243bd37a9012 ([pr18881.14](https://github.com/hebasto/bitcoin/commits/pr18881.14) -> [pr18881.15](https://github.com/hebasto/bitcoin/commits/pr18881.15), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.14..pr18881.15)):\n\n- added commit that implements @MarcoFalke's [suggestion](https://github.com/bitcoin/",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632674167,632674167,
MarcoFalke,2020-05-22 13:41:41,"re-ACK 90eb027204, only change is new doc commit 👠\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 90eb027204, only change is new doc commit 👠\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjBJQv8D4l/8DutA799ti+iOrxhVDJh48fWd71nn2WKqcyVFJ",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632696415,632696415,
MarcoFalke,2020-05-22 13:42:36,"Would be nice to get this merged soon, so that I don't have to pull in this branch every time for fuzzing.",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632696808,632696808,
MarcoFalke,2020-05-22 16:51:39,"Several cases of UB are fixed here.\n\n* The first commit fixes the one described in #18824 \n* The  26c093a commit fixes one described in https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-410137892",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632799978,632799978,
ryanofsky,2020-05-22 17:05:14,"> Several cases of UB are fixed here.\n> \n> * The first commit fixes the one described in #18824\n> * The  [26c093a](https://github.com/bitcoin/bitcoin/commit/26c093a9957756f3743c2347fe0abd90f81159c4) commit fixes one described in [#18881 (review)](https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-410137892)\n\nThanks, I definitely think the PR description needs to be improved ",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632808735,632808735,
hebasto,2020-05-22 17:05:23,"@ryanofsky \n> Would suggest updating the PR description to:\n> \n>  - Summarize what the UB behavior is so it isn't necessary to read a different github issue\n> \n>  - Give a rationale for replacing the thread_local in the last commit\n> \n>  - Drop the construct idiom text if it's no longer relevant\n> \n>  - Link to #18824 and #15233 at the bottom, and clarify if only the first commit",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632808830,632808830,
ryanofsky,2020-05-22 17:16:00,"re-ACK. Thanks for updating the PR description, this looks good to me. I'm pretty sure there should be a more efficient way to stop referencing the thread_local after it is destroyed (perhaps just resetting the reference in the thread_local destructor) without replacing the thread_local with a map with frequently added & removed entries. But this only affects debugging and probably isn't a big dea",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632813648,632813648,
MarcoFalke,2020-05-22 18:04:52,I am planning to merge this next week unless there are objections or outstanding action items,https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632833398,632833398,
ryanofsky,2020-05-22 18:40:53,"> I am planning to merge this next week unless there are objections or outstanding action items\n\n:+1: and seems fine to merge earlier, too. None of this code is even compiled unless debugging is turned on.",https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632847462,632847462,
MarcoFalke,2020-05-05 10:35:42,"```suggestion\n    static LockData* lockdata = new LockData();\n```\n\nnot sure why auto needs to hide both the type and the pointer-ness. The additional 5 chars don't seem overly verbose.",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420013187,420013187,src/sync.cpp
hebasto,2020-05-05 10:53:15,[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-623985636).,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420022157,420022157,src/sync.cpp
jonatack,2020-05-05 11:43:31,approach guarantees,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420046291,420046291,doc/developer-notes.md
jonatack,2020-05-05 11:44:45,"I think the markdown is more readable without wrapping ""static"" in code markup (same for line 853 below)",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420046912,420046912,doc/developer-notes.md
jonatack,2020-05-05 11:45:59,"can drop ""idiom""? or maybe more clear with quotes: ""Construct On First Use"" idiom, but I personally prefer without ""idiom""\n\n(same for line 853 below)",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420047499,420047499,doc/developer-notes.md
jonatack,2020-05-05 11:46:47,s/gets/is/,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420047910,420047910,doc/developer-notes.md
jonatack,2020-05-05 11:47:07,s/doesn't get/is not/,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420048042,420048042,doc/developer-notes.md
hebasto,2020-05-05 11:49:47,Thank you! [Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624007651).,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420049394,420049394,doc/developer-notes.md
jonatack,2020-05-05 11:50:54,developer,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420049925,420049925,src/logging.cpp
jonatack,2020-05-05 11:51:23,developer,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050170,420050170,src/random.cpp
jonatack,2020-05-05 11:52:04,If the destructor for an object needs to be called,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050539,420050539,doc/developer-notes.md
jonatack,2020-05-05 11:52:17,developer,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050657,420050657,src/sync.cpp
jonatack,2020-05-05 11:58:06,"oops, somehow that comment was published before the review...GitHub :man_shrugging: ",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420053647,420053647,doc/developer-notes.md
jonatack,2020-05-05 12:50:19,approach,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420082930,420082930,doc/developer-notes.md
jonatack,2020-05-05 12:50:50,s/use the/be sure to/,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420083226,420083226,doc/developer-notes.md
jonatack,2020-05-05 12:53:00,comment seems unneeded?,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420084466,420084466,doc/developer-notes.md
jonatack,2020-05-05 12:53:44,is this code snippet a good explanation of the concept?,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420084908,420084908,doc/developer-notes.md
jonatack,2020-05-05 12:56:34,"sorry to re-review the same area, but I think this could be reduced to two points and would be better written as:\n- the object is constructed before first use and not destroyed until after last use\n- the object initialization is thread-safe\n\n(also: destructed -> destroyed and the ""its"" can be removed)",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420086744,420086744,doc/developer-notes.md
hebasto,2020-05-05 13:17:41,"It seems developers need multi-line comments to describe rationale of using  COFU :)\nThis oneliner is just a pointer to docs with detailed explanation and pitfalls (like not calling a destructor). I'd prefer keep it as is.",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420100644,420100644,doc/developer-notes.md
hebasto,2020-05-05 13:19:16,"Why not? I'd say ""example"" rather ""explanation"".",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420101738,420101738,doc/developer-notes.md
hebasto,2020-05-05 13:26:50,[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939).,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107046,420107046,doc/developer-notes.md
hebasto,2020-05-05 13:27:01,[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939).,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107190,420107190,doc/developer-notes.md
hebasto,2020-05-05 13:27:27,[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939).,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107506,420107506,doc/developer-notes.md
jonatack,2020-05-05 13:29:45,"Yes, in the codebase it's fine but here it's a pointer to itself :) edit: reading the rendered doc I guess it's fine",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420109240,420109240,doc/developer-notes.md
hebasto,2020-05-05 13:30:01,"""its"" seems prevent any ambiguation :)",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420109425,420109425,doc/developer-notes.md
jonatack,2020-05-05 13:33:39,Sure; people can look it up anyway for more info.,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420112012,420112012,doc/developer-notes.md
hebasto,2020-05-05 13:33:44,"As it is an ""example"", the presence of the comment line seems reasonable, no?",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420112084,420112084,doc/developer-notes.md
sipa,2020-05-05 16:29:33,"It's nicer to use std::unique_pointer here, so that the object also gets destroyed on shutdown (in reserve order compared to initialization).",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420242951,420242951,doc/developer-notes.md
MarcoFalke,2020-05-05 16:36:16,Agree that the docs should recommend the version that doesn't leak. An additional note can say that a version that leaks might be preferable in rare circumstances.,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420247771,420247771,doc/developer-notes.md
hebasto,2020-05-05 23:45:37,"IMO, destroying an object via `std::unique_pointer`:\n- is not required as no actual memory leak happens at program exit ([C++ FAQ-a](https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use) and [FAQ-b](https://isocpp.org/wiki/faq/ctors#nifty-counter-idiom)); in another words, not destroying an object does not implies memory leaks in that case\n- is not safe as this object could (potent",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420472355,420472355,doc/developer-notes.md
hebasto,2020-05-05 23:57:47,"The initial intention of changing the docs was to drop every long explanation in the source, and just re-direct a code reader to the docs. If these changes seem controversial, all doc-change commits could be dropped :)",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420476145,420476145,doc/developer-notes.md
promag,2020-05-06 00:59:59,"👀 \n```cpp\nstatic BCLog::Logger logger;\nreturn logger;\n```",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420492795,420492795,doc/developer-notes.md
hebasto,2020-05-06 01:46:05,"> ```c++\n> static BCLog::Logger logger;\n> return logger;\n> ```\n\nThe `logger` object could (potentially) be destroyed before its last use at program exit sequence that leads to undefined behavior.\n\n",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420503783,420503783,doc/developer-notes.md
hebasto,2020-05-06 01:48:14,"Actually, the d954f7c8c017c7e9bf60f48a8c41da8c498239f7 commit in this PR fixes such issue for the `lockdata` object.",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420504248,420504248,doc/developer-notes.md
MarcoFalke,2020-05-06 18:21:41,"* Some tools check for leaked memory at exit, so making that the default increases verbosity for those tools.\n* The destructor must be trivial to be able to do that in the first place. I am not sure why you remove that requirement in the docs.",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420998960,420998960,doc/developer-notes.md
sipa,2020-05-06 18:26:25,"Not doing that is not a leak. It's just memory that's still reachable at exit (which at least valgrind classifies differently than leaked memory, and doesn't warn about).\n\nI think it's just cleaner to clean things up too; for example this makes it easier to move globals into a class if that ever makes sense. Also, if that works, it means there exists a clear layering between which modules depe",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421001720,421001720,doc/developer-notes.md
laanwj,2020-05-07 12:52:21,"I don't think you should make this suggestion in general. This solution, while valuable in rare cases such as logging and tracking locks, is a brute-force one that does not belong in actual application code. It's *messy* and assumes we don't actually know what's going on (in regard to initialization dependencies) or what are all the edge cases.\n\nYou're supposed to expliclty allocate things in ",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421479070,421479070,doc/developer-notes.md
laanwj,2020-05-07 12:54:11,"Right, `unique_ptr` won't work here. It was the same destruction order (thougn not initialization order) problem as using a global directly.",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421480237,421480237,doc/developer-notes.md
hebasto,2020-05-07 14:43:39,Changes to the `developer-notes.md` [dropped](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625296903).,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421561195,421561195,doc/developer-notes.md
hebasto,2020-05-07 14:44:04,Changes to the `developer-notes.md` [dropped](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625296903).,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421561551,421561551,doc/developer-notes.md
MarcoFalke,2020-05-12 15:04:35,"Why is the above UB, but this not?",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r423808117,423808117,src/sync.cpp
hebasto,2020-05-13 05:52:21,"The `g_lockstack` variable is involved in locking and unlocking `AnnotatedMixin<>` mutexes.\n\nBut `lockdata` is used in `AnnotatedMixin<>` destructor:\nhttps://github.com/bitcoin/bitcoin/blob/8da1e43b63cb36759eeb1fcfd6768163265c44e2/src/sync.h#L84-L86\n\n_and_ we have global `AnnotatedMixin<>` mutexes.",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424187486,424187486,src/sync.cpp
MarcoFalke,2020-05-13 10:45:53,So it would make sense to fix both occurrences of UB in one pull,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424344096,424344096,src/sync.cpp
hebasto,2020-05-13 11:37:34,"Sorry for my poor English...\nI meant that only `lockdata` could be a source of UB because it is used in the `~AnnotatedMixin<>` and the destroy order itself is not predictable in any way.\n\nThe destroying of `g_lockstack` couldn't cause UB, IMO.",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424369462,424369462,src/sync.cpp
MarcoFalke,2020-05-13 11:51:46,"Ok, I have deleted my comment. Here is the backtrace (same backtrace on master and this pull):\n\n<details><summary>backtrace</summary>\n\n```\nvalgrind /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn -runs=1 /bitcoin-core/ci/scratch/qa-assets/fuzz_seed_corpus/process_message_blocktxn\n==51564== Memcheck, a memory error detector\n==51564== C",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424376692,424376692,src/sync.cpp
hebasto,2020-05-13 11:54:00,"> - struct desctructor locks the global mutex -> Reads free'd `lockstack`\n\nI can see only locking of `lockdata.dd_mutex`, or did I miss?\n\n",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424377871,424377871,src/sync.cpp
MarcoFalke,2020-05-16 13:24:02,"So reading from the bt, it looks like `g_lockstack` is initialized on first use. Not sure why, though. Because it is initialized on first use, it leads to invalid memory access.\n\nDonating the memory to the operating system at the end instead of calling the destructor fixes the problem for me.",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153367,426153367,src/sync.cpp
MarcoFalke,2020-05-16 13:26:09,"Is  this something inherent to `thread_local` to construct on first use?\n\nRunning this example program:\n\n```cpp\nstruct Foo {\n    Mutex m_mut;\n    Foo()\n    {\n        std::cout << __LINE__ << __func__ << std::endl;\n        LOCK(m_mut);\n    }\n    ~Foo()\n    {\n        std::cout << __LINE__ << __func__ << std::endl;\n        LOCK(m_mut);\n    }\n};\n\nvoid initialize()",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153517,426153517,src/sync.cpp
MarcoFalke,2020-05-16 13:27:21,"How I expect it to work from reading the code was\n\n```\nLockStack\nFoo\n~Foo\n~LockStack",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153572,426153572,src/sync.cpp
hebasto,2020-05-17 05:18:39,"As I understand, `~TestingSetup()` locks `Mutex newTaskMutex`, and, consequently, uses `LockStack g_lockstack`.\n\nHaving a `static` instance of the `TestingSetup` makes the destroying order unpredictable that leads to UB due to the possible usage of (writing to and reading from) `g_lockstack`.\n\nI found two cases of a `static` instance of the `TestingSetup`:\nhttps://github.com/bitcoin/bitc",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426218529,426218529,src/sync.cpp
hebasto,2020-05-17 08:23:24,"@MarcoFalke \n\nI can confirm that the following patch fixes all of the memory errors mentioned in this pull:\n```diff\ndiff --git a/src/sync.cpp b/src/sync.cpp\nindex 41c75302d..9b99f5cfa 100644\n--- a/src/sync.cpp\n+++ b/src/sync.cpp\n@@ -89,7 +89,12 @@ LockData& GetLockData() {\n     return *lockdata;\n }\n \n-static thread_local LockStack g_lockstack;\n+LockStack& GetLockStack() {",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426232697,426232697,src/sync.cpp
MarcoFalke,2020-05-17 10:37:19,"> Having a static instance of the TestingSetup makes the destroying order unpredictable\n\nI wasn't aware of that. I assumed that the order globals are destroyed is the inverse order of how they were constructed.",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426245017,426245017,src/sync.cpp
hebasto,2020-05-17 10:42:42,"> I wasn't aware of that. I assumed that the order globals are destroyed is the inverse order of how they were constructed.\n\nThat is correct. But if globals are defined in _different_ translation units then the order of how them are constructed is unpredictable.",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426245565,426245565,src/sync.cpp
MarcoFalke,2020-05-17 10:48:14,"TIL\n\nAnyway, I did the same changes as in your comment and for me that fixed the problems.",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246117,426246117,src/sync.cpp
promag,2020-05-17 10:48:16,Lets move them all to same unit :trollface: ,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246120,426246120,src/sync.cpp
MarcoFalke,2020-05-17 10:49:44,"main.cpp, maybe?",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246261,426246261,src/sync.cpp
hebasto,2020-05-17 11:24:32,"> Lets move them all to same unit :trollface:\n\n> main.cpp, maybe?\n\nWhat about unit tests?",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426249656,426249656,src/sync.cpp
hebasto,2020-05-17 12:11:27,[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629787071).,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254133,426254133,src/sync.cpp
MarcoFalke,2020-05-17 12:15:33,Maybe also mention that this is only safe to do because the object happens to have a trivial destructor?,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254548,426254548,src/sync.cpp
MarcoFalke,2020-05-17 12:15:58,"```suggestion\n    const LockStack& lockstack = GetLockStack();\n```",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254602,426254602,src/sync.cpp
MarcoFalke,2020-05-17 12:16:16,"```suggestion\n    const LockStack& lockstack = GetLockStack();\n```",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254613,426254613,src/sync.cpp
MarcoFalke,2020-05-17 12:16:28,same,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254633,426254633,src/sync.cpp
MarcoFalke,2020-05-17 12:16:34,same,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254648,426254648,src/sync.cpp
MarcoFalke,2020-05-18 13:57:09,Locking a non-recursive mutex that is already locked is undefined behavior,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426645402,426645402,src/sync.cpp
hebasto,2020-05-18 15:27:48,[Fixed](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630262961).,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426710235,426710235,src/sync.cpp
MarcoFalke,2020-05-22 12:09:16,"```suggestion\n    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n    // Since the destructor is never called, the object and all its members must have an implicit destructor.\n```",https://github.com/bitcoin/bitcoin/pull/18881#discussion_r429209164,429209164,src/sync.cpp
hebasto,2020-05-22 12:49:46,[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632674167).,https://github.com/bitcoin/bitcoin/pull/18881#discussion_r429226654,429226654,src/sync.cpp
