[
  {
    "sha": "340ab0a3abb509d9f8565110adec4728c7e6fa47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDBhYjBhM2FiYjUwOWQ5Zjg1NjUxMTBhZGVjNDcyOGM3ZTZmYTQ3",
    "commit": {
      "author": {
        "name": "David Parrish",
        "email": "david@dparrish.com",
        "date": "2012-10-24T04:27:36Z"
      },
      "committer": {
        "name": "David Parrish",
        "email": "david@dparrish.com",
        "date": "2012-10-24T04:27:36Z"
      },
      "message": "Don't segfault if a lock file already exists for the Bitcoin directory",
      "tree": {
        "sha": "054cfacc204c8ee2a39bc5f104a471c9a293a7bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/054cfacc204c8ee2a39bc5f104a471c9a293a7bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/340ab0a3abb509d9f8565110adec4728c7e6fa47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/340ab0a3abb509d9f8565110adec4728c7e6fa47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/340ab0a3abb509d9f8565110adec4728c7e6fa47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/340ab0a3abb509d9f8565110adec4728c7e6fa47/comments",
    "author": {
      "login": "dparrish",
      "id": 193603,
      "node_id": "MDQ6VXNlcjE5MzYwMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193603?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dparrish",
      "html_url": "https://github.com/dparrish",
      "followers_url": "https://api.github.com/users/dparrish/followers",
      "following_url": "https://api.github.com/users/dparrish/following{/other_user}",
      "gists_url": "https://api.github.com/users/dparrish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dparrish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dparrish/subscriptions",
      "organizations_url": "https://api.github.com/users/dparrish/orgs",
      "repos_url": "https://api.github.com/users/dparrish/repos",
      "events_url": "https://api.github.com/users/dparrish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dparrish/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dparrish",
      "id": 193603,
      "node_id": "MDQ6VXNlcjE5MzYwMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193603?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dparrish",
      "html_url": "https://github.com/dparrish",
      "followers_url": "https://api.github.com/users/dparrish/followers",
      "following_url": "https://api.github.com/users/dparrish/following{/other_user}",
      "gists_url": "https://api.github.com/users/dparrish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dparrish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dparrish/subscriptions",
      "organizations_url": "https://api.github.com/users/dparrish/orgs",
      "repos_url": "https://api.github.com/users/dparrish/repos",
      "events_url": "https://api.github.com/users/dparrish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dparrish/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "675a39fc4f24f9e0c9947e311a39efb6b7261c20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/675a39fc4f24f9e0c9947e311a39efb6b7261c20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/675a39fc4f24f9e0c9947e311a39efb6b7261c20"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7576a589490d6f84bd9719dd6e70699e23bd7df6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340ab0a3abb509d9f8565110adec4728c7e6fa47/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340ab0a3abb509d9f8565110adec4728c7e6fa47/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=340ab0a3abb509d9f8565110adec4728c7e6fa47",
        "patch": "@@ -78,9 +78,12 @@ void Shutdown(void* parg)\n         StopNode();\n         {\n             LOCK(cs_main);\n-            pcoinsTip->Flush();\n+            if (pcoinsTip)\n+            {\n+                pcoinsTip->Flush();\n+                delete pcoinsTip;\n+            }\n             pblocktree->Flush();\n-            delete pcoinsTip;\n             delete pcoinsdbview;\n             delete pblocktree;\n         }"
      }
    ]
  },
  {
    "sha": "a7b0f3829e30d43632e2bf342631d011c6ddb270",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2IwZjM4MjllMzBkNDM2MzJlMmJmMzQyNjMxZDAxMWM2ZGRiMjcw",
    "commit": {
      "author": {
        "name": "David Parrish",
        "email": "david@dparrish.com",
        "date": "2012-10-24T04:28:20Z"
      },
      "committer": {
        "name": "David Parrish",
        "email": "david@dparrish.com",
        "date": "2012-10-24T04:28:20Z"
      },
      "message": "Add signfile/verifyfile RPC calls.\n\nThese calls can be used to generate and check signatures for arbitrary\n(potentially binary) files, much like signmessage/verifymessage.\n\nThe client should hash the file locally then send a uint256 in hex form\nas the 2rd parameter to signfile and the 3rd parameter to verifyfile.",
      "tree": {
        "sha": "71c92014a6c4cf97b057c9a7bcb408681fdb6fb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71c92014a6c4cf97b057c9a7bcb408681fdb6fb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7b0f3829e30d43632e2bf342631d011c6ddb270",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7b0f3829e30d43632e2bf342631d011c6ddb270",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7b0f3829e30d43632e2bf342631d011c6ddb270",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7b0f3829e30d43632e2bf342631d011c6ddb270/comments",
    "author": {
      "login": "dparrish",
      "id": 193603,
      "node_id": "MDQ6VXNlcjE5MzYwMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193603?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dparrish",
      "html_url": "https://github.com/dparrish",
      "followers_url": "https://api.github.com/users/dparrish/followers",
      "following_url": "https://api.github.com/users/dparrish/following{/other_user}",
      "gists_url": "https://api.github.com/users/dparrish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dparrish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dparrish/subscriptions",
      "organizations_url": "https://api.github.com/users/dparrish/orgs",
      "repos_url": "https://api.github.com/users/dparrish/repos",
      "events_url": "https://api.github.com/users/dparrish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dparrish/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dparrish",
      "id": 193603,
      "node_id": "MDQ6VXNlcjE5MzYwMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/193603?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dparrish",
      "html_url": "https://github.com/dparrish",
      "followers_url": "https://api.github.com/users/dparrish/followers",
      "following_url": "https://api.github.com/users/dparrish/following{/other_user}",
      "gists_url": "https://api.github.com/users/dparrish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dparrish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dparrish/subscriptions",
      "organizations_url": "https://api.github.com/users/dparrish/orgs",
      "repos_url": "https://api.github.com/users/dparrish/repos",
      "events_url": "https://api.github.com/users/dparrish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dparrish/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "340ab0a3abb509d9f8565110adec4728c7e6fa47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/340ab0a3abb509d9f8565110adec4728c7e6fa47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/340ab0a3abb509d9f8565110adec4728c7e6fa47"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 97,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bd48eb43401e4929d8579d27e0aaff06db84a9b1",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 2,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7b0f3829e30d43632e2bf342631d011c6ddb270/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7b0f3829e30d43632e2bf342631d011c6ddb270/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=a7b0f3829e30d43632e2bf342631d011c6ddb270",
        "patch": "@@ -24,6 +24,8 @@\n #include <boost/asio/ssl.hpp>\n #include <boost/filesystem/fstream.hpp>\n #include <boost/shared_ptr.hpp>\n+#include <fstream>\n+#include <iostream>\n #include <list>\n \n #define printf OutputDebugStringF\n@@ -242,6 +244,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listaddressgroupings\",   &listaddressgroupings,   false,  false },\n     { \"signmessage\",            &signmessage,            false,  false },\n     { \"verifymessage\",          &verifymessage,          false,  false },\n+    { \"signfile\",               &signfile,               false,  false },\n+    { \"verifyfile\",             &verifyfile,             false,  false },\n     { \"getwork\",                &getwork,                true,   false },\n     { \"listaccounts\",           &listaccounts,           false,  false },\n     { \"settxfee\",               &settxfee,               false,  false },\n@@ -1097,8 +1101,29 @@ Object CallRPC(const string& strMethod, const Array& params)\n     return reply;\n }\n \n-\n-\n+void HashFile(Value& value)\n+{\n+    // Read the file into RAM\n+    ifstream file(value.get_str().c_str(), ios::in | ios::binary | ios::ate);\n+    if (!file.is_open())\n+        throw runtime_error(string(\"Can't read input file \") + value.get_str());\n+    int size = file.tellg();\n+    char *memblock = new char[size];\n+    file.seekg(0, ios::beg);\n+    file.read(memblock, size);\n+    file.close();\n+    string str(memblock, size);\n+    delete[] memblock;\n+\n+    // Hash it\n+    CHashWriter ss(SER_GETHASH, 0);\n+    ss << strMessageMagic;\n+    ss << str;\n+\n+    // Keep the hex string of the hash\n+    Value value2(ss.GetHash().ToString());\n+    value = value2;\n+}\n \n template<typename T>\n void ConvertTo(Value& value, bool fAllowNull=false)\n@@ -1170,6 +1195,8 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2], true);\n     if (strMethod == \"gettxout\"               && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"gettxout\"               && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"signfile\"               && n > 1) HashFile(params[1]);\n+    if (strMethod == \"verifyfile\"             && n > 2) HashFile(params[2]);\n \n     return params;\n }"
      },
      {
        "sha": "4f1c8dec50448e41e210db0988708e8089cad399",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7b0f3829e30d43632e2bf342631d011c6ddb270/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7b0f3829e30d43632e2bf342631d011c6ddb270/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=a7b0f3829e30d43632e2bf342631d011c6ddb270",
        "patch": "@@ -151,6 +151,8 @@ extern json_spirit::Value getaddressesbyaccount(const json_spirit::Array& params\n extern json_spirit::Value sendtoaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value signmessage(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value verifymessage(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value signfile(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value verifyfile(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getreceivedbyaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getreceivedbyaccount(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getbalance(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "331e4e031b0f589d6f2cfaf8cb765fe07dd97ac4",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7b0f3829e30d43632e2bf342631d011c6ddb270/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7b0f3829e30d43632e2bf342631d011c6ddb270/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a7b0f3829e30d43632e2bf342631d011c6ddb270",
        "patch": "@@ -377,6 +377,72 @@ Value verifymessage(const Array& params, bool fHelp)\n }\n \n \n+Value signfile(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 2)\n+        throw runtime_error(\n+            \"signfile <bitcoinaddress> <filename>\\n\"\n+            \"Sign a generic hash with the private key of an address\");\n+\n+    EnsureWalletIsUnlocked();\n+\n+    string strAddress = params[0].get_str();\n+    uint256 hash;\n+    hash.SetHex(params[1].get_str());\n+\n+    CBitcoinAddress addr(strAddress);\n+    if (!addr.IsValid())\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n+\n+    CKeyID keyID;\n+    if (!addr.GetKeyID(keyID))\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n+\n+    CKey key;\n+    if (!pwalletMain->GetKey(keyID, key))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n+\n+    vector<unsigned char> vchSig;\n+    if (!key.SignCompact(hash, vchSig))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n+\n+    return EncodeBase64(&vchSig[0], vchSig.size());\n+}\n+\n+Value verifyfile(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 3)\n+        throw runtime_error(\n+            \"verifyfile <bitcoinaddress> <signature> <filename>\\n\"\n+            \"Verify a signed hash\");\n+\n+    string strAddress  = params[0].get_str();\n+    string strSign     = params[1].get_str();\n+    uint256 hash;\n+    hash.SetHex(params[2].get_str());\n+\n+    CBitcoinAddress addr(strAddress);\n+    if (!addr.IsValid())\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n+\n+    CKeyID keyID;\n+    if (!addr.GetKeyID(keyID))\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n+\n+    bool fInvalid = false;\n+    vector<unsigned char> vchSig = DecodeBase64(strSign.c_str(), &fInvalid);\n+\n+    if (fInvalid)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Malformed base64 encoding\");\n+\n+    CKey key;\n+    if (!key.SetCompactSignature(hash, vchSig))\n+        return false;\n+\n+    return (key.GetPubKey().GetID() == keyID);\n+}\n+\n+\n Value getreceivedbyaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)"
      }
    ]
  }
]