[
  {
    "sha": "b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODRlNzc2ZmQxNjZhYzQyMmFjNGEwZGNkYzFjNmY3ZmQ5MjFiZjcw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-05T22:18:03Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-05T23:31:10Z"
      },
      "message": "wallet_importmulti: use addresses of the same type as being imported\n\nWhen constructing an import from the solving data of an address,\nmake sure that the original address is the same type as the one that\nwill be imported.",
      "tree": {
        "sha": "0e16f1bf62c1fedf9da80bb3664d90f69e3a008b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e16f1bf62c1fedf9da80bb3664d90f69e3a008b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9a45500018fa4fd52c9c9326f79521d93d99abb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9a45500018fa4fd52c9c9326f79521d93d99abb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9a45500018fa4fd52c9c9326f79521d93d99abb"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "da795eac1fa34113fefc64b839d6527c7fd9d741",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=b84e776fd166ac422ac4a0dcdc1c6f7fd921bf70",
        "patch": "@@ -675,7 +675,7 @@ def run_test(self):\n         # Import pubkeys with key origin info\n         self.log.info(\"Addresses should have hd keypath and master key id after import with key origin\")\n         pub_addr = self.nodes[1].getnewaddress()\n-        pub_addr = self.nodes[1].getnewaddress()\n+        pub_addr = self.nodes[1].getnewaddress(address_type=\"bech32\")\n         info = self.nodes[1].getaddressinfo(pub_addr)\n         pub = info['pubkey']\n         pub_keypath = info['hdkeypath']\n@@ -693,7 +693,7 @@ def run_test(self):\n         assert_equal(pub_import_info['hdkeypath'], pub_keypath)\n \n         # Import privkeys with key origin info\n-        priv_addr = self.nodes[1].getnewaddress()\n+        priv_addr = self.nodes[1].getnewaddress(address_type=\"bech32\")\n         info = self.nodes[1].getaddressinfo(priv_addr)\n         priv = self.nodes[1].dumpprivkey(priv_addr)\n         priv_keypath = info['hdkeypath']\n@@ -742,8 +742,8 @@ def run_test(self):\n         self.nodes[1].createwallet(wallet_name=\"noprivkeys\", disable_private_keys=True)\n         wrpc = self.nodes[1].get_wallet_rpc(\"noprivkeys\")\n \n-        addr1 = self.nodes[0].getnewaddress()\n-        addr2 = self.nodes[0].getnewaddress()\n+        addr1 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n+        addr2 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n         pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti(\n@@ -761,15 +761,15 @@ def run_test(self):\n         assert result[0]['success']\n         assert result[1]['success']\n         assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 2)\n-        newaddr1 = wrpc.getnewaddress()\n+        newaddr1 = wrpc.getnewaddress(address_type=\"bech32\")\n         assert_equal(addr1, newaddr1)\n-        newaddr2 = wrpc.getnewaddress()\n+        newaddr2 = wrpc.getnewaddress(address_type=\"bech32\")\n         assert_equal(addr2, newaddr2)\n \n         # Import some public keys to the internal keypool of a no privkey wallet\n         self.log.info(\"Adding pubkey to internal keypool of disableprivkey wallet\")\n-        addr1 = self.nodes[0].getnewaddress()\n-        addr2 = self.nodes[0].getnewaddress()\n+        addr1 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n+        addr2 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n         pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti(\n@@ -789,15 +789,15 @@ def run_test(self):\n         assert result[0]['success']\n         assert result[1]['success']\n         assert_equal(wrpc.getwalletinfo()[\"keypoolsize_hd_internal\"], 2)\n-        newaddr1 = wrpc.getrawchangeaddress()\n+        newaddr1 = wrpc.getrawchangeaddress(address_type=\"bech32\")\n         assert_equal(addr1, newaddr1)\n-        newaddr2 = wrpc.getrawchangeaddress()\n+        newaddr2 = wrpc.getrawchangeaddress(address_type=\"bech32\")\n         assert_equal(addr2, newaddr2)\n \n         # Import a multisig and make sure the keys don't go into the keypool\n         self.log.info('Imported scripts with pubkeys should not have their pubkeys go into the keypool')\n-        addr1 = self.nodes[0].getnewaddress()\n-        addr2 = self.nodes[0].getnewaddress()\n+        addr1 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n+        addr2 = self.nodes[0].getnewaddress(address_type=\"bech32\")\n         pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti("
      }
    ]
  }
]