[
  {
    "sha": "cc880dae8ae23f63e75d9a87075c324feaeeef8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzg4MGRhZThhZTIzZjYzZTc1ZDlhODcwNzVjMzI0ZmVhZWVlZjhl",
    "commit": {
      "author": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2021-03-05T16:07:27Z"
      },
      "committer": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2021-03-05T18:22:54Z"
      },
      "message": "rpc add minetxlocally",
      "tree": {
        "sha": "701cad25c1d9cf2d3e05426caa95839715745b6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/701cad25c1d9cf2d3e05426caa95839715745b6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc880dae8ae23f63e75d9a87075c324feaeeef8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc880dae8ae23f63e75d9a87075c324feaeeef8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc880dae8ae23f63e75d9a87075c324feaeeef8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc880dae8ae23f63e75d9a87075c324feaeeef8e/comments",
    "author": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4d22654fe9e90093e643cb7beb896c48a274d47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d22654fe9e90093e643cb7beb896c48a274d47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4d22654fe9e90093e643cb7beb896c48a274d47"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 74,
      "deletions": 15
    },
    "files": [
      {
        "sha": "faf82d22b102761cb535a931010ff7c2a5f16913",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=cc880dae8ae23f63e75d9a87075c324feaeeef8e",
        "patch": "@@ -538,7 +538,7 @@ class ChainImpl : public Chain\n         bool relay,\n         std::string& err_string) override\n     {\n-        const TransactionError err = BroadcastTransaction(m_node, tx, err_string, max_tx_fee, relay, /*wait_callback*/ false);\n+        const TransactionError err = BroadcastTransaction(m_node, tx, err_string, max_tx_fee, relay, /*bypass_policy*/ false, /*wait_callback*/ false);\n         // Chain clients only care about failures to accept the tx to the mempool. Disregard non-mempool related failures.\n         // Note: this will need to be updated if BroadcastTransactions() is updated to return other non-mempool failures\n         // that Chain clients do not need to know about."
      },
      {
        "sha": "82b8716c456a73c3f574f342273d1c11ca1a1569",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=cc880dae8ae23f63e75d9a87075c324feaeeef8e",
        "patch": "@@ -26,7 +26,7 @@ static TransactionError HandleATMPError(const TxValidationState& state, std::str\n     }\n }\n \n-TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool bypass_policy, bool wait_callback)\n {\n     // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n     // node.connman is assigned both before chain clients and before RPC server is accepting calls,\n@@ -54,7 +54,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n             // First, call ATMP with test_accept and check the fee. If ATMP\n             // fails here, return error immediately.\n             const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *node.mempool, tx, false /* bypass_limits */,\n-                                                                  true /* test_accept */);\n+                                                                  bypass_policy, true /* test_accept */);\n             if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n                 return HandleATMPError(result.m_state, err_string);\n             } else if (result.m_base_fees.value() > max_tx_fee) {\n@@ -63,7 +63,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         }\n         // Try to submit the transaction to the mempool.\n         const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), *node.mempool, tx, false /* bypass_limits */,\n-                                                              false /* test_accept */);\n+                                                              bypass_policy, false /* test_accept */);\n         if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n             return HandleATMPError(result.m_state, err_string);\n         }"
      },
      {
        "sha": "b5f98919b63be4d977ea814a4a069778b4ceffa5",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=cc880dae8ae23f63e75d9a87075c324feaeeef8e",
        "patch": "@@ -33,9 +33,10 @@ static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\n  * @param[out] err_string reference to std::string to fill with error string if available\n  * @param[in]  max_tx_fee reject txs with fees higher than this (if 0, accept any fee)\n  * @param[in]  relay flag if both mempool insertion and p2p relay are requested\n+ * @param[in]  bypass_policy disable transaction standardness checks\n  * @param[in]  wait_callback wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n-[[nodiscard]] TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n+[[nodiscard]] TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool bypass_policy, bool wait_callback);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "d6fc690ee791d83e27f8a5f109b7c4b672c03cae",
        "filename": "src/qt/psbtoperationsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/qt/psbtoperationsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/qt/psbtoperationsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/psbtoperationsdialog.cpp?ref=cc880dae8ae23f63e75d9a87075c324feaeeef8e",
        "patch": "@@ -102,7 +102,7 @@ void PSBTOperationsDialog::broadcastTransaction()\n     CTransactionRef tx = MakeTransactionRef(mtx);\n     std::string err_string;\n     TransactionError error = BroadcastTransaction(\n-        *m_client_model->node().context(), tx, err_string, DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK(), /* relay */ true, /* await_callback */ false);\n+        *m_client_model->node().context(), tx, err_string, DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK(), /* relay */ true, /* bypass_policy */ false, /* await_callback */ false);\n \n     if (error == TransactionError::OK) {\n         showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")"
      },
      {
        "sha": "b00996a6eabbbb167427a75360a24bf4b5f28d57",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=cc880dae8ae23f63e75d9a87075c324feaeeef8e",
        "patch": "@@ -15,6 +15,7 @@\n #include <net.h>\n #include <node/context.h>\n #include <policy/fees.h>\n+#include <policy/policy.h>\n #include <pow.h>\n #include <rpc/blockchain.h>\n #include <rpc/mining.h>\n@@ -473,6 +474,55 @@ static RPCHelpMan prioritisetransaction()\n     };\n }\n \n+static RPCHelpMan minetxlocally()\n+{\n+    return RPCHelpMan{\"minetxlocally\",\n+                \"\\nInclude a raw transaction in the next block without relaying it.\\n\",\n+                {\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n+                    {\"fee_delta\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n+\"                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\\n\"\n+\"                  The fee is not actually paid, only the algorithm for selecting transactions into a block\\n\"\n+\"                  considers the transaction as it would have paid a higher (or lower) fee.\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::STR_HEX, \"\", \"The transaction hash in hex\"\n+                },\n+                RPCExamples{\"\"},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    RPCTypeCheck(request.params, {\n+        UniValue::VSTR,\n+        UniValue::VNUM,\n+    });\n+\n+    CAmount delta = request.params[1].get_int64();\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str())) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+    }\n+    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+\n+    const CFeeRate max_raw_tx_fee_rate = DEFAULT_MAX_RAW_TX_FEE_RATE;\n+\n+    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+\n+    std::string err_string;\n+    AssertLockNotHeld(cs_main);\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    const TransactionError err = BroadcastTransaction(node, tx, err_string, max_raw_tx_fee, /*relay*/ false, /*bypass_policy*/ true, /*wait_callback*/ true);\n+    if (TransactionError::OK != err) {\n+        throw JSONRPCTransactionError(err, err_string);\n+    }\n+\n+    EnsureMemPool(request.context).PrioritiseTransaction(tx->GetHash(), delta);\n+\n+    return tx->GetHash().GetHex();\n+},\n+    };\n+}\n \n // NOTE: Assumes a conclusive result; if result is inconclusive, it must be handled by caller\n static UniValue BIP22ValidationResult(const BlockValidationState& state)\n@@ -1238,6 +1288,7 @@ static const CRPCCommand commands[] =\n     { \"mining\",              &getmininginfo,           },\n     { \"mining\",              &prioritisetransaction,   },\n     { \"mining\",              &getblocktemplate,        },\n+    { \"mining\",              &minetxlocally,           },\n     { \"mining\",              &submitblock,             },\n     { \"mining\",              &submitheader,            },\n "
      },
      {
        "sha": "c56b929c5cf44e853bf45a5f2be6c3e7de234da1",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=cc880dae8ae23f63e75d9a87075c324feaeeef8e",
        "patch": "@@ -863,7 +863,7 @@ static RPCHelpMan sendrawtransaction()\n     std::string err_string;\n     AssertLockNotHeld(cs_main);\n     NodeContext& node = EnsureNodeContext(request.context);\n-    const TransactionError err = BroadcastTransaction(node, tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n+    const TransactionError err = BroadcastTransaction(node, tx, err_string, max_raw_tx_fee, /*relay*/ true, /*bypass_policy*/ false, /*wait_callback*/ true);\n     if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }\n@@ -947,7 +947,8 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n     const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n+                                                  false /* bypass_limits */, false /* bypass_policy*/,\n+                                                  true /* test_accept */));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n     // These can be used to calculate the feerate."
      },
      {
        "sha": "9cd84385063df6474258ee9e414e7b1026b834f9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=cc880dae8ae23f63e75d9a87075c324feaeeef8e",
        "patch": "@@ -484,6 +484,7 @@ class MemPoolAccept\n         const CChainParams& m_chainparams;\n         const int64_t m_accept_time;\n         const bool m_bypass_limits;\n+        const bool m_bypass_policy;\n         /*\n          * Return any outpoints which were not previously present in the coins\n          * cache, but were added as a result of validating the tx for mempool\n@@ -1068,7 +1069,9 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!args.m_bypass_policy) {\n+        if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    }\n \n     if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n \n@@ -1090,11 +1093,11 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool,\n                                                       CChainState& active_chainstate,\n                                                       const CTransactionRef &tx, int64_t nAcceptTime,\n-                                                      bool bypass_limits, bool test_accept)\n+                                                      bool bypass_limits, bool bypass_policy, bool test_accept)\n                                                       EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache, test_accept };\n+    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, bypass_policy, coins_to_uncache, test_accept };\n \n     assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);\n@@ -1114,10 +1117,10 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n }\n \n MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n-                                       bool bypass_limits, bool test_accept)\n+                                       bool bypass_limits, bool bypass_policy, bool test_accept)\n {\n     assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n-    return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n+    return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, bypass_policy, test_accept);\n }\n \n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)\n@@ -5051,7 +5054,8 @@ bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate)\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n                 assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n-                if (AcceptToMemoryPoolWithTime(chainparams, pool, active_chainstate, tx, nTime, false /* bypass_limits */,\n+                if (AcceptToMemoryPoolWithTime(chainparams, pool, active_chainstate, tx, nTime,\n+                                               false /* bypass_limits */, false /*bypass_policy*/,\n                                                false /* test_accept */).m_result_type == MempoolAcceptResult::ResultType::VALID) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "3b82c58c911b5e4e65270aa1bc1de9387d1c6a2c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc880dae8ae23f63e75d9a87075c324feaeeef8e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=cc880dae8ae23f63e75d9a87075c324feaeeef8e",
        "patch": "@@ -221,10 +221,12 @@ struct MempoolAcceptResult {\n /**\n  * (Try to) add a transaction to the memory pool.\n  * @param[in]  bypass_limits   When true, don't enforce mempool fee limits.\n+ * @param[in]  bypass_policy When true, disable standardness checks.\n  * @param[in]  test_accept     When true, run validation checks but don't submit to mempool.\n  */\n MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n-                                       bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+                                       bool bypass_limits, bool bypass_policy=false, bool test_accept=false)\n+                                       EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n \n /** Apply the effects of this transaction on the UTXO set represented by view */"
      }
    ]
  },
  {
    "sha": "8e29c45220726d4dcd125d252cc00325a4ce341d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTI5YzQ1MjIwNzI2ZDRkY2QxMjVkMjUyY2MwMDMyNWE0Y2UzNDFk",
    "commit": {
      "author": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2021-03-05T21:31:00Z"
      },
      "committer": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2021-03-05T21:31:00Z"
      },
      "message": "Register correctly",
      "tree": {
        "sha": "9baa497e75ea2aacb0751428e92891c67391e44b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9baa497e75ea2aacb0751428e92891c67391e44b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e29c45220726d4dcd125d252cc00325a4ce341d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e29c45220726d4dcd125d252cc00325a4ce341d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e29c45220726d4dcd125d252cc00325a4ce341d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e29c45220726d4dcd125d252cc00325a4ce341d/comments",
    "author": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc880dae8ae23f63e75d9a87075c324feaeeef8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc880dae8ae23f63e75d9a87075c324feaeeef8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc880dae8ae23f63e75d9a87075c324feaeeef8e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "82e19b04cd14a25939ce98dcb539672431b60908",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e29c45220726d4dcd125d252cc00325a4ce341d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e29c45220726d4dcd125d252cc00325a4ce341d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=8e29c45220726d4dcd125d252cc00325a4ce341d",
        "patch": "@@ -66,6 +66,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listtransactions\", 3, \"include_watchonly\" },\n     { \"walletpassphrase\", 1, \"timeout\" },\n     { \"getblocktemplate\", 0, \"template_request\" },\n+    { \"minetxlocally\", 1, \"fee_delta\" },\n     { \"listsinceblock\", 1, \"target_confirmations\" },\n     { \"listsinceblock\", 2, \"include_watchonly\" },\n     { \"listsinceblock\", 3, \"include_removed\" },"
      }
    ]
  }
]