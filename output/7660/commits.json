[
  {
    "sha": "faccb1818cdc2c14e0d4b4db1c6b19ed935af470",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNjYjE4MThjZGMyYzE0ZTBkNGI0ZGIxYzZiMTllZDkzNWFmNDcw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-09T11:54:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-09T15:13:13Z"
      },
      "message": "[amount] Extend GetFee() by optional flag ceil\n\n* This flag causes rounding up to the next satoshi instead of just\n  truncating (default behavior)\n\n* This reverts the hard-to-read and buggy code introduced in\n  d88af560111863c3e9c1ae855dcc287f04dffb02",
      "tree": {
        "sha": "a7a0f10366554bfb0a2b1fa69992c224e3de6589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7a0f10366554bfb0a2b1fa69992c224e3de6589"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faccb1818cdc2c14e0d4b4db1c6b19ed935af470",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faccb1818cdc2c14e0d4b4db1c6b19ed935af470",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faccb1818cdc2c14e0d4b4db1c6b19ed935af470",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faccb1818cdc2c14e0d4b4db1c6b19ed935af470/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd836c1d855b92e7c73ab31979f471c4f8dad68"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 69,
      "deletions": 11
    },
    "files": [
      {
        "sha": "453471a4edfb69fc042a0f05f7970bbc6e216c63",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faccb1818cdc2c14e0d4b4db1c6b19ed935af470/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faccb1818cdc2c14e0d4b4db1c6b19ed935af470/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=faccb1818cdc2c14e0d4b4db1c6b19ed935af470",
        "patch": "@@ -38,6 +38,7 @@ BITCOIN_TESTS =\\\n   test/scriptnum10.h \\\n   test/addrman_tests.cpp \\\n   test/alert_tests.cpp \\\n+  test/amount_tests.cpp \\\n   test/allocator_tests.cpp \\\n   test/base32_tests.cpp \\\n   test/base58_tests.cpp \\"
      },
      {
        "sha": "83792f5436492502ee24407a0bb52f9cf8cd5bec",
        "filename": "src/amount.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faccb1818cdc2c14e0d4b4db1c6b19ed935af470/src/amount.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faccb1818cdc2c14e0d4b4db1c6b19ed935af470/src/amount.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.cpp?ref=faccb1818cdc2c14e0d4b4db1c6b19ed935af470",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <cmath>\n+\n #include \"amount.h\"\n \n #include \"tinyformat.h\"\n@@ -17,14 +19,12 @@ CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n         nSatoshisPerK = 0;\n }\n \n-CAmount CFeeRate::GetFee(size_t nSize) const\n+CAmount CFeeRate::GetFee(size_t nSize, bool ceil) const\n {\n-    CAmount nFee = nSatoshisPerK*nSize / 1000;\n-\n-    if (nFee == 0 && nSatoshisPerK > 0)\n-        nFee = nSatoshisPerK;\n-\n-    return nFee;\n+    if (ceil)\n+        return (CAmount)std::ceil(nSatoshisPerK * nSize / 1000.);\n+    else\n+        return nSatoshisPerK * nSize / 1000;\n }\n \n std::string CFeeRate::ToString() const"
      },
      {
        "sha": "00a19cc51c89af0821288795ae30b5234eff9d78",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faccb1818cdc2c14e0d4b4db1c6b19ed935af470/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faccb1818cdc2c14e0d4b4db1c6b19ed935af470/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=faccb1818cdc2c14e0d4b4db1c6b19ed935af470",
        "patch": "@@ -42,10 +42,14 @@ class CFeeRate\n     explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n     CFeeRate(const CAmount& nFeePaid, size_t nSize);\n     CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n-\n-    CAmount GetFee(size_t size) const; // unit returned is satoshis\n-    CAmount GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n-\n+    /**\n+     * Return the fee in satoshis for the given size in bytes.\n+     */\n+    CAmount GetFee(size_t size, bool ceil = false) const;\n+    /**\n+     * Return the fee in satoshis for a size of 1000 bytes\n+     */\n+    CAmount GetFeePerK() const { return nSatoshisPerK; }\n     friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n     friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }"
      },
      {
        "sha": "781984450acd1c22960a8681ef6df7d483f560c5",
        "filename": "src/test/amount_tests.cpp",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faccb1818cdc2c14e0d4b4db1c6b19ed935af470/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faccb1818cdc2c14e0d4b4db1c6b19ed935af470/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=faccb1818cdc2c14e0d4b4db1c6b19ed935af470",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"amount.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(amount_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(GetFeeTest)\n+{\n+    CFeeRate feeRate;\n+\n+    feeRate = CFeeRate(1000);\n+    // Must always just return the arg\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(0), 0);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1), 1);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(121), 121);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(999), 999);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1e3), 1e3);\n+\n+    feeRate = CFeeRate(123);\n+    // Truncates the result, if not integer\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(0), 0);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(8), 0);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(9), 1);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(121), 14);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(122), 15);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(999), 122);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1e3), 123);\n+\n+    feeRate = CFeeRate(1000);\n+    // Must always return the arg\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(0, true), 0);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1, true), 1);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(121, true), 121);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(999, true), 999);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1e3, true), 1e3);\n+\n+    feeRate = CFeeRate(123);\n+    // Applies ceil to the result\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(0, true), 0);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(8, true), 1);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(9, true), 2);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(121, true), 15);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(122, true), 16);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(999, true), 123);\n+    BOOST_CHECK_EQUAL(feeRate.GetFee(1e3, true), 123);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]