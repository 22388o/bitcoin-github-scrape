paveljanik,2016-09-20T17:36:05Z,"I'm all for supporting multiple wallets, so concept ACK.\n\nBut isn't this only the part of @luke-jr 's work (64bcde7c5535cda12fc20ded718558ca74b28191)? Can you please coordinate the work to save your time? ;-)\n",https://github.com/bitcoin/bitcoin/pull/8764#issuecomment-248374237,248374237,
jonasschnelli,2016-09-20T18:43:46Z,"I really like @luke-jr https://github.com/bitcoin/bitcoin/pull/8694, though, my experience with lager pull requests tells me, that #8694 will have a hard time getting in as a whole. I try to slice out independent chunks, improve them and PR them separately. This is how I get you all reviewing parts of #8694.\n",https://github.com/bitcoin/bitcoin/pull/8764#issuecomment-248394467,248394467,
jonasschnelli,2016-09-20T18:48:59Z,Fixed nits.\n,https://github.com/bitcoin/bitcoin/pull/8764#issuecomment-248396067,248396067,
luke-jr,2016-09-20T20:50:27Z,"#8694 is already step-by-step, so this mostly just forces rebasing it... IMO better to do refactoring after #8694 gets merged. :)\n",https://github.com/bitcoin/bitcoin/pull/8764#issuecomment-248429965,248429965,
jonasschnelli,2016-10-19T15:32:18Z,"Rebased and fixed code formatting (@MarcoFalkes micro-nit).\nThe diff is relatively large, but it would finally eliminate the global `pwalletMain` in favor of a more flexible handler that would be ""ready"" for multiwallet.\n",https://github.com/bitcoin/bitcoin/pull/8764#issuecomment-254849618,254849618,
MarcoFalke,2016-11-02T21:34:28Z,Needs rebase\n,https://github.com/bitcoin/bitcoin/pull/8764#issuecomment-258006104,258006104,
jonasschnelli,2016-11-04T09:43:05Z,Rebased (now also covers `importmulti`).\n,https://github.com/bitcoin/bitcoin/pull/8764#issuecomment-258384388,258384388,
ryanofsky,2017-02-27T18:48:42Z,"Seems like currently the first multiwallet commit is #8775, then #8694 comes next, and maybe this will be rebased on top of those at a later point?",https://github.com/bitcoin/bitcoin/pull/8764#issuecomment-282812217,282812217,
jonasschnelli,2017-03-03T15:48:40Z,"Closing. Since #8775, this is to far away from being useful. Maybe a different similar approach can be worked out.",https://github.com/bitcoin/bitcoin/pull/8764#issuecomment-283989357,283989357,
laanwj,2016-09-20T13:41:21Z,CWallets::FlushAllWallets() ?\n,https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79612234,79612234,src/init.cpp
paveljanik,2016-09-20T13:50:33Z,`i` looks unused here 8)\n,https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79614296,79614296,src/wallet/wallet.h
jonasschnelli,2016-09-20T13:54:04Z,"That's black magic! :-)\n\nWill remove it, had it there for debug purposes.\n",https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79615189,79615189,src/wallet/wallet.h
jonasschnelli,2016-09-20T14:24:08Z,Yes. Changed it to `flushAllWallets(bool shutdown);`\n,https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79622754,79622754,src/init.cpp
jonasschnelli,2016-09-20T14:28:16Z,"We keep the `ThreadFlushWalletDB` with ""capacity"" for a single wallet file for now.\n",https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79623863,79623863,src/init.cpp
MarcoFalke,2016-09-20T15:11:19Z,Why public?\n\n``` diff\n class CWallets\n {\n-public:\n+private:\n     static std::vector<CWallet *> wallets;\n+public:\n     static CWallet* defaultWallet()\n     {\n```\n\ncompiles for me\n,https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79635074,79635074,src/wallet/wallet.h
paveljanik,2016-09-20T17:13:39Z,There is no `if (pwalletMain)` test here in the original code?\n,https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79663425,79663425,src/qt/signverifymessagedialog.cpp
MarcoFalke,2016-09-20T17:15:45Z,@paveljanik The dialog does not exist when there is no wallet.\n,https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79663890,79663890,src/qt/signverifymessagedialog.cpp
MarcoFalke,2016-09-20T17:23:21Z,Why?\n,https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79665673,79665673,src/init.cpp
paveljanik,2016-09-20T17:24:37Z,"SPC after `,` :-)\n",https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79665943,79665943,src/wallet/rpcdump.cpp
MarcoFalke,2016-09-20T17:41:44Z,Or just `git diff HEAD~ -U0|cfd`.\n\n``` sh\nalias cfd='~/workspace/bitcoin/contrib/devtools/clang-format-diff.py -p1 -i -v'\n```\n,https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79669701,79669701,src/wallet/rpcdump.cpp
jonasschnelli,2016-09-20T18:45:03Z,"Yes. I had a `Namespace` at the beginning and though that there is no big need for a Class or even private static class variables. But yes, why not private. Will update.\n",https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79683975,79683975,src/wallet/wallet.h
jonasschnelli,2016-09-20T18:46:12Z,1. Scope creeping\n2. Moving target (`ThreadFlushWalletDB` is currently getting touched in different PRs).\n,https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79684244,79684244,src/init.cpp
MarcoFalke,2016-09-20T18:50:11Z,"Fine, can be done later. Though, I think in case it is just a simple for loop, it should be part of this pull.\n",https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79685160,79685160,src/init.cpp
jonasschnelli,2016-09-20T18:54:18Z,"I think we don't want a flush wallet thread per wallet. IMO it should be a single flush thread that loops though the wallet, check last-flush-time and optionally flushes.\n",https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79686068,79686068,src/init.cpp
MarcoFalke,2016-09-20T18:58:56Z,"Jup, @luke-jr did this. (Create a loop in `ThreadFlushWalletDB` over all wallets)\n",https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79687014,79687014,src/init.cpp
MarcoFalke,2016-09-20T20:15:42Z,"Î¼Nit\n\n``` diff\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\nindex 656d344..d690e48 100644\n--- a/src/wallet/wallet.cpp\n+++ b/src/wallet/wallet.cpp\n@@ -61 +61 @@ const uint256 CMerkleTx::ABANDON_HASH(uint256S(""00000000000000000000000000000000\n-std::vector<CWallet *> CWallets::wallets = {};\n+std::vector<CWallet*> CWallets::wallets = {};\ndiff --git a/src/wallet/wallet.h b/src/w",https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79701575,79701575,src/wallet/wallet.h
luke-jr,2016-09-20T20:48:05Z,"Does cs_wallets need to be held for access to (flushing) the wallet itself, or only for the wallets vector? If the former, then defaultWallet will fail to guard it; if the latter, the lock here is unnecessarily long-held.\n",https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79708551,79708551,src/wallet/wallet.h
jonasschnelli,2016-09-21T09:09:05Z,"I decided to hold the lock because it would be possible that during iteration a addWallet (or later removeWallet) happens. But right,.. it results in holding the lock for probably a long time.\n\nI first though doing a copy of the wallets vector would be good, but the CWallet instance where the copy points to might be gone.\n\nMaybe we keep this for now because the flushAllWallets happens only on ",https://github.com/bitcoin/bitcoin/pull/8764#discussion_r79789886,79789886,src/wallet/wallet.h
dexX7,2016-10-22T16:58:20Z,Nit: I'd prefer `if (wallets.empty())`.\n,https://github.com/bitcoin/bitcoin/pull/8764#discussion_r84580879,84580879,src/wallet/wallet.h
