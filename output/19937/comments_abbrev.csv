DrahtBot,2020-09-19 13:39:39,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-695214773,695214773,
ajtowns,2020-09-21 22:48:42,"EDIT: the following is no longer accurate, see contrib/signet/README.md instead\n\nSome examples:\n\n * Generate blocks indefinitely, at 10 minute intervals, paying block reward to the given address, using bitcoin-util to do multi-threaded proof-of-work: `$ ./contrib/signet/generate.py --cli='./bitcoin-cli' generate 10 --block-time=600 --address=""tb1..."" --grind-cmd='./bitcoin-util grind'`\n ",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-696419619,696419619,
ajtowns,2020-09-22 17:00:40,"I don't think there's a risk in doing it over RPC; it's that it puts the wallet code in the middle of two mining codes bits (ie, generate a template, sign, grind proof of work). Merging mining and wallet code seemed a bit ugly, but keeping them distinct means you need a script to combine them for you, so it was easier to put everything in the script. Also seemed easier to add an RPC later if that ",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-696851260,696851260,
jsarenik,2020-10-01 09:50:31,"I still have no idea how to run a custom signet on this PR's commit f4c6ec1deaf8cf4dbbbc2633886112ebdddb31dc (which has conflicts when I try to rebase it to master locally).\n\nThe [documentation at bitcoin.it](https://en.bitcoin.it/wiki/Signet#Custom_Signet) is out of date. Please help me so that I can test.",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702022998,702022998,
kallewoof,2020-10-01 10:16:18,@jsarenik I've updated the running an issuer section of the docs. The rest are fine I think. Lemme know if not.,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702036426,702036426,
jsarenik,2020-10-01 11:30:30,@kallewoof have a look at https://github.com/bitcoin/bitcoin/pull/15454 and add the `createwallet` lines to the doc please.,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702071793,702071793,
jsarenik,2020-10-01 11:55:08,@kallewoof or start all `bitcoind` with `-wallet` command line argument.,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702083358,702083358,
jsarenik,2020-10-01 12:05:29,"Or actually rather `-wallet=""""`",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702088576,702088576,
jsarenik,2020-10-01 12:32:45,"@kallewoof Maybe adding a new `bitcoin-cli createwallet` line after starting a `bitcoind` would be the best according to https://github.com/bitcoin/bitcoin/pull/20034 (because `-wallet=""""` may change behavior in next releases as far as I understood).",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702102555,702102555,
ajtowns,2020-10-01 18:47:42,"Rebased, with the a bunch of the suggestions applied",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702328725,702328725,
kallewoof,2020-10-02 07:01:27,@jsarenik Gave you edit privileges on the Bitcoin Wiki.,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702563748,702563748,
jsarenik,2020-10-02 07:11:51,@kallewoof Thank you! Now I need to figure out how to run a custom signet…,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702567617,702567617,
jsarenik,2020-10-02 10:27:16,"Tested ACK f2ee4a95b3d9eac7b717f2ed4316dcb5df2d2795\n\nEditing the [Wiki](https://en.bitcoin.it/w/index.php?title=Signet#Custom_Signet) now.",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702653278,702653278,
decryp2kanon,2020-10-04 16:57:16,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-703284091,703284091,
jsarenik,2020-10-18 09:25:36,"> @jsarenik in the wiki it's better to redact the _entire_ public key, because idiots like myself might end up copy-pasting their public key into `REDACTED` and end up with an invalid `-signetchallenge` :-)\n\nThank you @Sjors for feed-back. Wiki edited. Have a look.",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-711140853,711140853,
0xB10C,2020-10-19 08:36:55,"I successfully launched my own signet and mined a few hundred blocks on it, too. Haven't had a chance to take a closer look at the code.",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-711852509,711852509,
decryp2kanon,2020-10-21 16:39:54,"just a question about MAGIC_BYTES\n\nhttps://github.com/bitcoin/bitcoin/blob/b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a/src/chainparams.cpp#L342\n\nhttps://github.com/bitcoin/bitcoin/blob/b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a/test/functional/test_framework/p2p.py#L116\n\nboth are same?",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-713706228,713706228,
jsarenik,2020-10-21 17:18:40,"> just a question about MAGIC_BYTES\n> \n> https://github.com/bitcoin/bitcoin/blob/b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a/src/chainparams.cpp#L342\n> \n> https://github.com/bitcoin/bitcoin/blob/b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a/test/functional/test_framework/p2p.py#L116\n> \n> both are same?\n\n@decryp2kanon Yes. In the other endianness it is [`0x40CF030A`](https://github.com/rust",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-713729099,713729099,
decryp2kanon,2020-10-21 17:51:44,"I am trying to test. could you give an example of this?\n```\nusage: generate.py generate [-h] [--block-time BLOCK_TIME]\n                            [--target-mining-time TARGET_MINING_TIME]\n                            [--backdate BACKDATE] [--secondary]\n                            [--signcmd SIGNCMD] [--address ADDRESS]\n                            [--descriptor DESCRIPTOR] [--grind-cmd ",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-713748500,713748500,
jsarenik,2020-10-21 17:57:03,"> I am trying to test. could you give an example of this?\n\n@decryp2kanon See https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-696419619 (above)",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-713753803,713753803,
ajtowns,2020-10-22 02:37:18,"Rebased to master to pull in #20060 which fixes the compiler warning and #20157 which activates taproot, and made some changes based on feedback above.",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-714183776,714183776,
kallewoof,2020-10-22 07:01:48,Miner now running this version on my end.,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-714277988,714277988,
Sjors,2020-10-26 08:35:19,"The commits that touch the node still good to me as of 09671f2, thanks for the changes. Mining also still works. The `bitcoin-util` command help text is missing a list of commands. It's also confusing why `signetseednode` is listed as a potential argument.",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-716396958,716396958,
MarcoFalke,2020-10-26 08:49:03,"> command help text is missing a list of commands\n\nThis can probably be fixed by switching to ArgsMan: https://github.com/bitcoin/bitcoin/pull/19937#discussion_r510721007",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-716403808,716403808,
ajtowns,2020-11-11 07:28:34,"Bunch of changes:\n\n * adds contrib/signet/README.md\n * renames contrib/signet/generate.py to contrib/signet/miner\n * changes many of the parameters (`--block-time` and `--mining-time` replaced by `--nbits` and `--poisson`; `--secondary` replaced by `--multiminer`, `--backup-delay` and `--standby-delay`)\n * makes block times predictable\n * adds a `calibrate` subcommand to see how long y",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-725256662,725256662,
laanwj,2020-11-23 15:11:09,I'm a bit in doubt about adding yet another binary just for this. In principle we already have `bitcoin-tx` with for idea being to provide bitcoin related functionality that does not rely on the ability to access a running node. It's named a bit inconvenient to add this functionality I guess but …,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-732222298,732222298,
ajtowns,2020-11-23 21:48:13,"@laanwj bitcoin-util could be used for node-free versions of a bunch of rpc calls (see #14671) and/or to avoid introducing a separate binary for managing asmap stuff (see #18573). I think it would make more sense to aim to eventually deprecate `bitcoin-tx` in favour of psbt operations, and instead keep around `bitcoin-cli` for interacting with a node over rpc, `bitcoin-wallet` for doing wallet ope",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-732445799,732445799,
muxator,2020-12-01 11:45:27,"Hi,\n\na very minor nit: 34b8e1742cb756016bae94a2775a0f7d617050b1 introduces  `contrib/signet/generate.py`. The subsequent commit a2ada2db9c16d50c920ddb56e1b82d30b68987fe updates the documentation, while also renaming `contrib/signet/generate.py` → `contrib/signet/miner`.\n\nShouldn't the first commit be modified to directly introduce `miner` instead of `generate.py`?\n\nDepending on the pro",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-736489140,736489140,
ajtowns,2020-12-02 00:19:33,@muxator good catch; fixed to introduce the script as `contrib/signet/miner` directly. Don't see any reason to merge the docs into the same commit -- they're already in the same PR so won't be merged separately.,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-736904055,736904055,
ajtowns,2020-12-03 02:42:12,Added @muxator's suggestions and updated bitcoin-util-res.rc to match the new version number scheme (and rebased to master to catch up with the new version scheme),https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-737625815,737625815,
laanwj,2020-12-21 16:02:12,"code review ACK f19148a9ddab01af80067982f2639dbee2cdbf52\n\nnit: your new utility doesn't implement `--version` and no manual page is generated for it in `contrib/devtools/gen-manpages.sh`. No opinion on whether that's necessary here.",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-749049129,749049129,
sipa,2020-12-23 20:36:59,Concept ACK. I think it makes sense to have a bitcoin-util tool with subcommands for wallet- and node-free operations (and deprecate bitcoin-tx in favor of PSBT support in bitcoin-util).,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-750464206,750464206,
gruve-p,2020-12-24 15:58:45,"tACK https://github.com/bitcoin/bitcoin/pull/19937/commits/f19148a9ddab01af80067982f2639dbee2cdbf52\n\nFew docs nits.",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-750917054,750917054,
practicalswift,2020-12-27 23:03:54,"Concept ACK\n\n`bitcoin-util` makes sense!",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-751526262,751526262,
ajtowns,2021-01-12 08:38:33,"Rebased to fix the bad library ordering.\n\nSuggest reviewing #20715 which is probably the future for bitcoin-util's argument parsing. I think we could update bitcoin-util to work that way either before or after merging this PR.",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-758498760,758498760,
laanwj,2021-01-12 11:53:32,code review ACK 595a34dbea01954cb0372b0210d2fd64357a1762,https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-758607187,758607187,
weedcoder,2021-01-15 14:21:10,"![4txwyb](https://user-images.githubusercontent.com/4971940/104738010-47915980-5745-11eb-934e-7a4f236e18ec.jpeg)\n",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-760969715,760969715,
kallewoof,2021-01-16 04:24:56,"@weedcoder I'd say it is missing a lot of the logic required to do what liquid does, but I do believe this + a permanent elements chain with a 2-way-peg can do a great job as a test-chain for liquid. :)",https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-761373213,761373213,
MarcoFalke,2020-09-22 13:34:23,"```suggestion\n# Copyright (c) 2020 The Bitcoin Core developers\n```\n\n:eyes: ",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492737367,492737367,contrib/signet/generate.py
MarcoFalke,2020-09-22 13:40:31,"Any reason to not use our ArgsManager here, so that `-help` documentation will be created?",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492742101,492742101,src/bitcoin-util.cpp
MarcoFalke,2020-09-22 13:41:39,"```suggestion\n        std::string strUsage = PACKAGE_NAME "" bitcoin-util utility version "" + FormatFullVersion() + ""\n\n"" +\n```",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492743007,492743007,src/bitcoin-util.cpp
ajtowns,2020-09-22 16:33:27,"Hmm, think those are leftover from when the code from test_framework/messages.py etc was copied in rather than imported",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492877166,492877166,contrib/signet/generate.py
ajtowns,2020-09-22 16:34:37,I don't think ArgsManager supports subcommands that have different suboptions?,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492877918,492877918,src/bitcoin-util.cpp
MarcoFalke,2020-09-22 16:49:40,It would support `-grind=block_header_hex`. Is something else needed here that I am missing?,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492887446,492887446,src/bitcoin-util.cpp
kallewoof,2020-09-30 07:12:38,"Why is this needed, since there's already --with-util above? (Also, why util-util?)",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r497289193,497289193,configure.ac
kallewoof,2020-09-30 07:22:27,"`operator<=` exists, so using that seems more straightforward.",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r497294186,497294186,src/bitcoin-util.cpp
kallewoof,2020-09-30 07:34:08,Wouldn't it be totally fine if these simply did exit(...) instead of the EXIT_/CONTINUE_ stuff?,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r497300518,497300518,src/bitcoin-util.cpp
MarcoFalke,2020-09-30 12:32:51,Could cherry-pick the syle-changes from commit faf0a26711eed9264113463e56b988cf9fe549fd?,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r497471331,497471331,src/bitcoin-util.cpp
ajtowns,2020-10-01 18:01:49,"`--with-utils` gives the bitcoin-cli, bitcoin-tx, bitcoin-util, bitcoin-wallet utils; `--with-util-X` just gives bitcoin-X. Not really needed, (and util-util is certainly weird) but don't see any reason to be inconsistent.",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r498424245,498424245,configure.ac
ajtowns,2020-10-01 18:05:04,Sure? It's just doing the same thing bitcoin-tx does.,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r498425839,498425839,src/bitcoin-util.cpp
ajtowns,2020-10-01 18:16:18,"I was thinking it would make sense for `bitcoin-util` would have subcommands like git, each with their own different options (like `--amend` for `git commit` vs `--continue` for `git rebase`). `bitcoin-util grind` could have a `-jobs=8` argument specifying how many jobs to run in parallel, eg, which presumably wouldn't be appropriate elsewhere.",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r498431698,498431698,src/bitcoin-util.cpp
Sjors,2020-10-17 09:02:54,"It would be useful to add a comment for non mining experts, such as yours truly, to explain what this does (especially the `!` part, which I guess doesn't mean ""not"" here). I found the discussion around `!segwit` rather confusing: https://github.com/bitcoin/bitcoin/pull/17946",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r506898283,506898283,src/rpc/mining.cpp
Sjors,2020-10-17 09:08:58,Could add missing brackets since you're touching this area.,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r506899582,506899582,src/rpc/mining.cpp
Sjors,2020-10-17 09:24:29,"This is not Python 3.5.6 friendly:\n```\nJSON object must be str, not 'bytes'\n```",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r506905640,506905640,contrib/signet/generate.py
Sjors,2020-10-17 09:30:44,Dumping the PSBT result is useful here for debugging.,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r506908363,506908363,contrib/signet/generate.py
decryp2kanon,2020-10-21 17:47:49,"```suggestion\nsys.path.insert(0, ""../../test/functional/"")\n```\n\nin my case, it was wrong path.\n```\ncd ./contrib/signet/\n./generate.py --help\n```",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509498819,509498819,contrib/signet/generate.py
jsarenik,2020-10-21 17:56:12,"Yes, the paths are a bit confusing. It is meant to be run from main source root. See for example https://en.bitcoin.it/wiki/Signet:Custom:Script",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509517747,509517747,contrib/signet/generate.py
jsarenik,2020-10-21 18:00:10,And the general documentation for Custom Signet is at https://en.bitcoin.it/wiki/Signet#Custom_Signet,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509525665,509525665,contrib/signet/generate.py
ajtowns,2020-10-22 02:34:46,Should be fixed,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509843913,509843913,contrib/signet/generate.py
ajtowns,2020-10-22 02:36:10,"Should dump `psbt` now if debug logging is enabled. That will contain the whole block as well, so it will be long.",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509844298,509844298,contrib/signet/generate.py
ajtowns,2020-10-22 02:36:37,`args.bcli` / `bitcoin_cli` always returns a string now,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509844423,509844423,contrib/signet/generate.py
ajtowns,2020-10-22 02:36:48,Done,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509844454,509844454,src/rpc/mining.cpp
ajtowns,2020-10-22 02:37:00,Added a comment,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509844501,509844501,src/rpc/mining.cpp
MarcoFalke,2020-10-23 08:29:06,"The wallet tool is doing exactly that already with argsman. E.g. it has the `info` subcommand, or a dump subcommand with conditional options like -dumpfile (#19137)",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r510721007,510721007,src/bitcoin-util.cpp
ajtowns,2020-12-02 02:29:12,"""grind"" needs libconsensus for both `primitives/block.h` for the block header definition and `arith_uint256.h` for converting nbits to a target and comparing the target to a sha256. Since libconsensus isn't linked into bitcoin-cli, that probably rules out `bitcoin-cli --grind=HEADER` as an alternative.\n\nMaking `bitcoin-tx -grind HEADER` work seems plausible; should look something like https://",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r533854178,533854178,src/Makefile.am
kallewoof,2020-12-02 07:15:44,"`bitcoin-tx --grind` feels weird to me. Grinding is unrelated to transactions. Unless we decide `bitcoin-util` is not desired, I think introducing it here makes more sense, personally.",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r533942834,533942834,src/Makefile.am
muxator,2020-12-02 21:12:07,"""occassional runs"" -> ""occasional runs""",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r534484267,534484267,contrib/signet/README.md
muxator,2020-12-02 21:56:54,"Hi,\n\nI usually run my binaries putting a symlink to them in a directory somewhere in my PATH (let's say `/home/.local/bin`, but it can be anything, really).\n\nWhen doing this with `miner`, however, it won't work:\n\n```\n$ ln -s <base>/contrib/signet/miner /tmp/miner\n$ /tmp/miner --help\nTraceback (most recent call last):\n  File ""/tmp/miner"", line 25, in <module>\n    from test_fra",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r534508383,534508383,contrib/signet/miner
ajtowns,2020-12-03 02:40:08,Done,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r534624308,534624308,contrib/signet/README.md
ajtowns,2020-12-03 02:40:19,Done,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r534624389,534624389,contrib/signet/miner
muxator,2020-12-07 14:15:40,"If `miner calibrate` is called without any additional arguments, there is a stack trace:\n\n```\n$ ./miner calibrate \nTraceback (most recent call last):\n  File ""./miner"", line 637, in <module>\n    main()\n  File ""./miner"", line 631, in main\n    return args.fn(args)\n  File ""./miner"", line 541, in do_calibrate\n    cmd = args.grind_cmd.split("" "") + [headhex]\nAttributeError: 'NoneTyp",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r537539255,537539255,contrib/signet/miner
muxator,2020-12-07 14:17:27,"A trailing `'\n'` at the end of this line would make is consistent with the previous `sys.stderr.write()`:\n\n```diff\ndiff --git a/contrib/signet/miner b/contrib/signet/miner\n--- a/contrib/signet/miner\n+++ b/contrib/signet/miner\n@@ -520,7 +520,7 @@ def do_calibrate(args):\n         sys.stderr.write(""Can only specify one of --nbits or --seconds\n"")\n         return 1\n     if args.nbit",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r537540628,537540628,contrib/signet/miner
JeremyRubin,2020-12-18 00:53:13,"typo here, should be ../contrib!",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r545502442,545502442,contrib/signet/README.md
JeremyRubin,2020-12-18 00:53:42,maybe just make this a one-liner with some ; or && 's?,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r545502587,545502587,contrib/signet/README.md
JeremyRubin,2020-12-18 00:58:18,"How can i set this fixed interval? Slightly confused the difference between nbits and the interval itself. It sounds like interval is every 5 minutes try to mine a 25 seconds difficult block? What if I just want ""blocks every 30 seconds""?",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r545504097,545504097,contrib/signet/README.md
kallewoof,2020-12-18 08:10:33,"> $GENERATE --cli=""$CLI"" ""$@"" generate --grind-cmd=""$GRIND"" --address=""$ADDR"" --nbits=$NBITS --multiminer=$MULTIMINER --ongoing --poisson\n\nis what it looks like on my end. I think you want --ongoing --poisson.",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r545637073,545637073,contrib/signet/README.md
JeremyRubin,2020-12-18 18:59:06,"I don't think --poisson is the right thing, as --poisson just adds noise?\n\nI guess the parameter is standby delay, which defaults to 0?\n\nWhere I think I'm confused is how setting nbits works because we use the next_block_delta to define how long to wait before mining (via sleeping), but then the grind command conceivably takes est_time(nbits) to mine? so it feels like we're double delaying",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546029382,546029382,contrib/signet/README.md
gruve-p,2020-12-18 21:17:11,mininmum > minimum,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546094865,546094865,contrib/signet/README.md
ajtowns,2020-12-18 21:19:16,"You can't choose the interval; the difficulty will just get adjusted so the interval levels out at around 10 minutes. What you can target is a difficulty, so that once you reach that difficulty you keep mining a block every 10 minutes so that you stay at that difficulty. If you're not already at that difficulty, you instead choose a shorter/longer interval, so the difficulty is increased/decreased",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546095728,546095728,contrib/signet/README.md
gruve-p,2020-12-18 21:46:54,nbits=1e00f403 > --nbits=1e00f403,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546106217,546106217,contrib/signet/README.md
JeremyRubin,2020-12-19 18:36:17,"Ahhh this makes sense I didn't realize normal difficulty adjustment rules are still used.\n\nThis text could go great in the Readme btw :)\n\nMaybe incl a shell script template to backdate 100 blocks on start to seed a usable wallet?",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546269021,546269021,contrib/signet/README.md
ajtowns,2020-12-19 18:51:39,That line is an example of output of the command,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546270432,546270432,contrib/signet/README.md
ajtowns,2020-12-19 18:59:08,"I think just `START=$(date +%s -d""1000 minutes ago"")` and `--set-block-time=$START` would work for that -- even with poisson timing you should end up mining 100+ blocks before you catch up with real time. Maybe something like that should just be the default if you're mining the first block of a signet chain?",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546271175,546271175,contrib/signet/README.md
gruve-p,2020-12-20 23:00:18,The formatting looks strange when reading the README.md,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546448915,546448915,contrib/signet/README.md
gruve-p,2020-12-20 23:00:55,Maybe fix the formatting here also,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546448958,546448958,contrib/signet/README.md
gruve-p,2020-12-20 23:01:22,Formatting here also,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546449001,546449001,contrib/signet/README.md
ajtowns,2020-12-21 02:20:55,"Ah, apparently 4 spaces is the standard, not wordpress's 2 spaces. Fixed.",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546477754,546477754,contrib/signet/README.md
gruve-p,2020-12-21 15:29:35,"MINER=""..contrib/signet/miner"" > MINER=""../contrib/signet/miner""",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546769938,546769938,contrib/signet/README.md
sipa,2020-12-23 20:34:31,This seems worth addressing still: https://github.com/bitcoin/bitcoin/pull/19937/commits/e6473d274fe01d58c9eed75bc56415fcce6d63db#r492742101,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r548214153,548214153,src/bitcoin-util.cpp
laanwj,2021-01-11 13:42:54,"What happens when `signet` rules are set when calling `getblocktemplate` on a non-signet network, I suppose this is (or should be) an error?",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555054277,555054277,src/rpc/mining.cpp
laanwj,2021-01-11 13:45:35,I think this is awful. Can someone of the build system people please weigh in here?,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555055992,555055992,src/bitcoin-util.cpp
fanquake,2021-01-11 14:11:37,"This works for me:\n```diff\ndiff --git a/src/Makefile.am b/src/Makefile.am\nindex b974bed66..f37db7bde 100644\n--- a/src/Makefile.am\n+++ b/src/Makefile.am\n@@ -677,9 +677,9 @@ bitcoin_util_SOURCES += bitcoin-util-res.rc\n endif\n \n bitcoin_util_LDADD = \\n-  $(LIBUNIVALUE) \\n   $(LIBBITCOIN_COMMON) \\n   $(LIBBITCOIN_UTIL) \\n+  $(LIBUNIVALUE) \\n   $(LIBBITCOIN_CONSENSUS) \\n  ",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555072470,555072470,src/bitcoin-util.cpp
ajtowns,2021-01-12 08:21:15,"The way I read BIP9 is that by including ""signet"" in the rules when doing a GBT request, that just indicates you can handle it if signet rules are active -- if they're not active, then there's no reason why you can't handle that too. So adding signet to rules on mainnet should be fine as far as bitcoind is concerned -- it will just return a regular template without any signet stuff, just as if you",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555586016,555586016,src/rpc/mining.cpp
ajtowns,2021-01-12 08:36:11,Thanks @fanquake !,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555594416,555594416,src/bitcoin-util.cpp
laanwj,2021-01-12 11:31:38,"Thanks, clear.",https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555703682,555703682,src/rpc/mining.cpp
hebasto,2021-02-01 19:49:10,Not sure if this `include` is required.,https://github.com/bitcoin/bitcoin/pull/19937#discussion_r568095138,568095138,src/bitcoin-util.cpp
