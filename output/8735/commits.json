[
  {
    "sha": "91d014e4ae0cc356ff74b31393bc7a078b3aac41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWQwMTRlNGFlMGNjMzU2ZmY3NGIzMTM5M2JjN2EwNzhiM2FhYzQx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-14T15:10:42Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-15T08:50:28Z"
      },
      "message": "Add support for IsValid(), SetNull() for CExtKey, allow serialization of uninitialized keys",
      "tree": {
        "sha": "79590228b18761bdef41136aa665ad42f73e691a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79590228b18761bdef41136aa665ad42f73e691a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91d014e4ae0cc356ff74b31393bc7a078b3aac41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX2mDVAAoJECnUvLZBb1PsycUP/3TYni3sWAUFIzbo+vyJQZy9\nQgOY2Gjbx+I4KlljIqAoSFJTyVNgDRQ/hJbM5neNnEu8DeoSQkyJynZ/TDyPweem\nPsnITVdsvkCvuOj81QtPjSoZRcBhnk4wlvV9G+YUTrO2sHUJQC0KQYo7XV70CvZs\n+WxBXrW16I2ddmx+ddwpra2fvsCNnB4utnbpwk/JmKdMaPCc3C6AjhMEsN/ORQuU\nyScFrrBoCo+ilw2hPed3jNmitvR1KV+lujqM+lmA1Q565612/4cvVNcNXfWL7IZi\ncgi+p2AoKYoVRGylTx7j+BjNwcyA9f0XO7PjbQ2KcxOAJqZ7FiEiAfNNmkrbxY6i\nTj7YF8m4j9F5EoPlXuhs+5PF4smUL65diMJrVRapsLOAyTRmisI3a6G2SaX6VfyB\nDMyQvZANDGGc775FIKQN+2btU187DJpleTxE1qb8YrX1nVcbQrHXYDozzBA137Xz\nncm/bJlUNPyhvItUCe+vd12gSyuDRWi5Zw5h1kUfWVJyg8A3uon8N+Bq8fQwGVyT\nNgAEQUdKP46//rrqmys42laTbA+Qqszg0XRC9sYGUsx7uvyPqSYZGLv07YgGJYh+\n1HNdjTenIXNc3FkYwd2Js2pGMQmL/xZ5K6Cvt0VdMvGuVVyo5Vr7vXqlldoM/QLz\npw/w5qB0hmzwt+tBuu/Y\n=UXoG\n-----END PGP SIGNATURE-----",
        "payload": "tree 79590228b18761bdef41136aa665ad42f73e691a\nparent 881d7eaf29f78591099dc167f6f0ae07ed3fbab7\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1473865842 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1473929428 +0200\n\nAdd support for IsValid(), SetNull() for CExtKey, allow serialization of uninitialized keys\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91d014e4ae0cc356ff74b31393bc7a078b3aac41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91d014e4ae0cc356ff74b31393bc7a078b3aac41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91d014e4ae0cc356ff74b31393bc7a078b3aac41/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "881d7eaf29f78591099dc167f6f0ae07ed3fbab7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/881d7eaf29f78591099dc167f6f0ae07ed3fbab7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/881d7eaf29f78591099dc167f6f0ae07ed3fbab7"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 31,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c2c606251bbd246455a41d19eb25a7b045d3e168",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 31,
        "deletions": 2,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91d014e4ae0cc356ff74b31393bc7a078b3aac41/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91d014e4ae0cc356ff74b31393bc7a078b3aac41/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=91d014e4ae0cc356ff74b31393bc7a078b3aac41",
        "patch": "@@ -176,7 +176,13 @@ struct CExtKey {\n         unsigned int len = BIP32_EXTKEY_SIZE;\n         ::WriteCompactSize(s, len);\n         unsigned char code[BIP32_EXTKEY_SIZE];\n-        Encode(code);\n+        // serialize zeros if the key is not valid\n+        // this allows serializing CExtKey without acctually containing a key\n+        if (!IsValid())\n+            memset(code, 0, len);\n+        else\n+            Encode(code);\n+\n         s.write((const char *)&code[0], len);\n     }\n     template <typename Stream>\n@@ -185,7 +191,30 @@ struct CExtKey {\n         unsigned int len = ::ReadCompactSize(s);\n         unsigned char code[BIP32_EXTKEY_SIZE];\n         s.read((char *)&code[0], len);\n-        Decode(code);\n+        // check if the serialized extkey contains only zeros\n+        int sum = 0;\n+        for (unsigned int i = 0; i < len; ++i) {\n+            sum |= code[i];\n+        }\n+        // don't decode the buffer if it contains only zeros\n+        if (sum != 0)\n+            Decode(code);\n+    }\n+    bool IsValid() const\n+    {\n+        return key.IsValid() && !chaincode.IsNull();\n+    }\n+    void SetNull()\n+    {\n+        // clear the key (by setting a new one)\n+        key.MakeNewKey(true);\n+        // mark the key as invalid\n+        std::vector<unsigned char> dummy;\n+        key.Set(&dummy[0], &dummy[0], false);\n+        nChild = 0;\n+        nDepth = 0;\n+        chaincode.SetNull();\n+        vchFingerprint[0] = 0;vchFingerprint[1] = 0;vchFingerprint[2] = 0;vchFingerprint[3] = 0;\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "5793c735eaa5925479ba3d25ac98a2c0c9162407",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzkzYzczNWVhYTU5MjU0NzliYTNkMjVhYzk4YTJjMGM5MTYyNDA3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-14T15:14:24Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-15T08:50:31Z"
      },
      "message": "[Wallet] Add support for a custom extended private master key in CHDChain",
      "tree": {
        "sha": "c42178372a93705778edb8d8f60c51b5062bc61b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c42178372a93705778edb8d8f60c51b5062bc61b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5793c735eaa5925479ba3d25ac98a2c0c9162407",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX2mDXAAoJECnUvLZBb1PseUMQAIOUEeux3FmBrafImTdzTPGY\nkgeNIn9ibMQxRIMoP4Xb6rZeZKqI6qbGUHTih5E/gMXcbE6ieckBO5Ch801N1vOI\nVnMFCcbgpugciMnsjAhL/uOdb0mKCElfo1SbbQEbq8s332HRPoiHjIx3wOgiDxM9\nCH9oLHu9h17YQRI8ZfFuREm6PlSB1wP+6+chNYfKz+cTF6vRvM/uqLxklYEwVuHu\n6nyD2vDmewvdDyFfewIb8EH8cp+F4OPgetewxpwSHyXCbLuSu8BVIRzyE/HGeu5B\niUh/E156gcAL5QBH1ep/UheJ+qMXOowYqTYd7huoAQXZfR4wclKg/iNQCbVI57Fs\n/1jXxJ5xWpZnrU1cBpmx+og29Xb02wGNiW3osfr3xdTSmS4E1B8H4pSTpnqgmxtS\nHC6PToxz524T+IxGkIqSU8crHEfnqibSd5vXC49tY1MVgZs4YLaaWj+6u2FmRlKk\n12MMyzmbEJzfvtXQ4NIsNr5gjXhcswHA9asvX5H1TmPVFhX21J6YgTx5YRcMaEHO\n4XAI4eJXKH7xg5lLmtQdpu+CZk9ywLmRwTljWsOaQ810fy8AowxyFphCpUeAUG6U\nCPywcUkxfv6f3l4LCg8jNzBbhxRZqv4bG5CDLU3N5YQfynyJEn/7LP9glvvPEoTp\nSHTmefZnoH6739pioDRH\n=1vfz\n-----END PGP SIGNATURE-----",
        "payload": "tree c42178372a93705778edb8d8f60c51b5062bc61b\nparent 91d014e4ae0cc356ff74b31393bc7a078b3aac41\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1473866064 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1473929431 +0200\n\n[Wallet] Add support for a custom extended private master key in CHDChain\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5793c735eaa5925479ba3d25ac98a2c0c9162407",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5793c735eaa5925479ba3d25ac98a2c0c9162407",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5793c735eaa5925479ba3d25ac98a2c0c9162407/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91d014e4ae0cc356ff74b31393bc7a078b3aac41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91d014e4ae0cc356ff74b31393bc7a078b3aac41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91d014e4ae0cc356ff74b31393bc7a078b3aac41"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dd8cf382ec669ffd3278a093dda0e936c6653f63",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5793c735eaa5925479ba3d25ac98a2c0c9162407/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5793c735eaa5925479ba3d25ac98a2c0c9162407/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=5793c735eaa5925479ba3d25ac98a2c0c9162407",
        "patch": "@@ -47,8 +47,12 @@ class CHDChain\n public:\n     uint32_t nExternalChainCounter;\n     CKeyID masterKeyID; //!< master key hash160\n+    CExtKey customMasterKey;\n+\n+    static const int VERSION_BASE = 1;\n+    static const int VERSION_WITH_CUSTOM_MASTER_KEY = 2;\n+    static const int CURRENT_VERSION = VERSION_WITH_CUSTOM_MASTER_KEY;\n \n-    static const int CURRENT_VERSION = 1;\n     int nVersion;\n \n     CHDChain() { SetNull(); }\n@@ -60,13 +64,17 @@ class CHDChain\n         nVersion = this->nVersion;\n         READWRITE(nExternalChainCounter);\n         READWRITE(masterKeyID);\n+\n+        if (this->nVersion >= VERSION_WITH_CUSTOM_MASTER_KEY)\n+            READWRITE(customMasterKey);\n     }\n \n     void SetNull()\n     {\n         nVersion = CHDChain::CURRENT_VERSION;\n         nExternalChainCounter = 0;\n         masterKeyID.SetNull();\n+        customMasterKey.SetNull();\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "d772d3bb210ac9d1e802b76babe2589998d6e6e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzcyZDNiYjIxMGFjOWQxZTgwMmI3NmJhYmUyNTg5OTk4ZDZlNmU4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-14T15:29:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-15T14:46:42Z"
      },
      "message": "[Wallet] allow setting the master extended private key (xpriv) during HD wallet creation",
      "tree": {
        "sha": "952db10b68dca1452290c6895b7041e870fcdd9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/952db10b68dca1452290c6895b7041e870fcdd9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d772d3bb210ac9d1e802b76babe2589998d6e6e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX2rRXAAoJECnUvLZBb1PspnEP/3q20jYMISPszXnm1e5XCPA5\np649b95B7ryAyy4EKQ6T2E+SnD4bG4mmb2tzg9Ps2Hm1nw4xH9+p9dnBEdbGJe6E\nJnIr0y1bTh6IxeGMb6yYT7dsWetav98SR5/dFQmsNKsLPiG78dQQfUOx8JReEVyz\n4UCn6sQ0m4V1F97K4b1K3ysEYKkQWz/gPsj5Pnzvp7r2ECvc984z0Rr3C7g+q7DK\nBYzTPmXDm0Ub1vb/MN6mykU3DVW3M8iX1rqRqdiL0DUR8oCgUIga+N4b4DKTjDCV\nHPqaLpFHklcm80GoXOHNyYAxw0KGLvNSZ7JHA3cojhboxFaJRSEtVPKShRz7q5uI\nhJkGn01uT/UGq2JS7dDevyl6+0AuYmrQ6AjhiCb6ZyyzShZbhAVk3VTx5hsoP+am\nsdocLBXVoAqsoqIzwAib6M9fF45B0Cg7TXu1NKgK29G9W5G7PpJmEFFZYlpdYHKc\nKikLLjX5fFKO5ORZgZoYzP1uCL7bfQ8+U6pLvL5t0i+/0PgusvBDapJnQ3wRJeQK\nLr6zfJlz2L2WPE9tGPDMns71YLhZ0NcoUM3O6W2xIRTuLpQsSBeylC5yJhMbKb1Y\nXeZgC7T6IjMtP20iQw5d86X0lqgYNV1n0hE9a/CZNlApqnYM8GjKmqBAtRQ9ereP\ni7RgzYDVHSkMGoH5Dmm/\n=HD8u\n-----END PGP SIGNATURE-----",
        "payload": "tree 952db10b68dca1452290c6895b7041e870fcdd9e\nparent 5793c735eaa5925479ba3d25ac98a2c0c9162407\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1473866976 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1473950802 +0200\n\n[Wallet] allow setting the master extended private key (xpriv) during HD wallet creation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d772d3bb210ac9d1e802b76babe2589998d6e6e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d772d3bb210ac9d1e802b76babe2589998d6e6e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d772d3bb210ac9d1e802b76babe2589998d6e6e8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5793c735eaa5925479ba3d25ac98a2c0c9162407",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5793c735eaa5925479ba3d25ac98a2c0c9162407",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5793c735eaa5925479ba3d25ac98a2c0c9162407"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 87,
      "deletions": 17
    },
    "files": [
      {
        "sha": "76fe2b88c51f5db62a43af8a3cda55a017a6bd2b",
        "filename": "qa/rpc-tests/wallet-hd.py",
        "status": "modified",
        "additions": 32,
        "deletions": 2,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d772d3bb210ac9d1e802b76babe2589998d6e6e8/qa/rpc-tests/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d772d3bb210ac9d1e802b76babe2589998d6e6e8/qa/rpc-tests/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-hd.py?ref=d772d3bb210ac9d1e802b76babe2589998d6e6e8",
        "patch": "@@ -9,6 +9,7 @@\n     start_node,\n     assert_equal,\n     connect_nodes_bi,\n+    bitcoind_processes,\n )\n import os\n import shutil\n@@ -38,7 +39,7 @@ def run_test (self):\n         non_hd_add = self.nodes[0].getnewaddress()\n         self.nodes[1].importprivkey(self.nodes[0].dumpprivkey(non_hd_add))\n \n-        # This should be enough to keep the master key and the non-HD key \n+        # This should be enough to keep the master key and the non-HD key\n         self.nodes[1].backupwallet(tmpdir + \"/hd.bak\")\n         #self.nodes[1].dumpwallet(tmpdir + \"/hd.dump\")\n \n@@ -65,7 +66,6 @@ def run_test (self):\n         os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n         self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n-        #connect_nodes_bi(self.nodes, 0, 1)\n \n         # Assert that derivation is deterministic\n         hd_add_2 = None\n@@ -82,6 +82,36 @@ def run_test (self):\n         #connect_nodes_bi(self.nodes, 0, 1)\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n \n+        print(\"Testing xpriv input key ...\")\n+        self.stop_node(1)\n+        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1] + ['-hdxpriv=tprv8ZgxMBicQKsPdtsTRAApVU3LyNXoKGmvTFV32gfHtjpjJuWBdg9DKTs5beS8REciMXYCdGLWtoNjHu6Ty2bpBaGjtDGDnEEa4jrFQgkGNZ6', '-keypool=10'])\n+        hd_add = self.nodes[1].getnewaddress()\n+        hd_info = self.nodes[1].validateaddress(hd_add)\n+        assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/1'\")\n+        assert_equal(hd_add, \"mieim7hGCyVxMLJxn49XV48Ys3eXVhW4a8\")\n+        \n+        hd_add = self.nodes[1].getnewaddress()\n+        hd_info = self.nodes[1].validateaddress(hd_add)\n+        assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/2'\")\n+        assert_equal(hd_add, \"n2tfeKavAGwiZQi5yZWoz7dKmawvLw2Da9\")\n+        \n+        hd_add = self.nodes[1].getnewaddress()\n+        hd_info = self.nodes[1].validateaddress(hd_add)\n+        assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/3'\")\n+        assert_equal(hd_add, \"mxxSD3zdhpxwdQhZfYpMJP6SES7TAo8c8X\")\n+\n+        print(\"Encrypt wallet...\")\n+        #encrypt wallet, restart, unlock and dump\n+        self.nodes[1].encryptwallet('test')\n+        bitcoind_processes[1].wait()\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n+        self.nodes[1].walletpassphrase('test', 20)\n+        hd_add = self.nodes[1].getnewaddress()\n+        hd_info = self.nodes[1].validateaddress(hd_add)\n+        # without passing the xpriv again, we should still continue the hd-keys-chain with the previous given xpriv\n+        assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/14'\")\n+        assert_equal(hd_add, \"mgwHWMMqXTgvLJGzVduEucpaAf8AVviGrt\")\n \n if __name__ == '__main__':\n     WalletHDTest().main ()"
      },
      {
        "sha": "667d15b4330619a86b5d8eaf7c5e53041af3c74b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 14,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d772d3bb210ac9d1e802b76babe2589998d6e6e8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d772d3bb210ac9d1e802b76babe2589998d6e6e8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d772d3bb210ac9d1e802b76babe2589998d6e6e8",
        "patch": "@@ -107,11 +107,17 @@ CPubKey CWallet::GenerateNewKey()\n         CExtKey externalChainChildKey; //key at m/0'/0'\n         CExtKey childKey;              //key at m/0'/0'/<n>'\n \n-        // try to get the master key\n-        if (!GetKey(hdChain.masterKeyID, key))\n-            throw std::runtime_error(std::string(__func__) + \": Master key not found\");\n+        // If a custom extended master private key is available, use this for child key derivation\n+        if (hdChain.customMasterKey.IsValid())\n+            masterKey = hdChain.customMasterKey;\n+        else\n+        {\n+            // try to get the \"master\" 32byte key to use it as hd seed\n+            if (!GetKey(hdChain.masterKeyID, key))\n+                throw std::runtime_error(std::string(__func__) + \": Master key not found\");\n \n-        masterKey.SetMaster(key.begin(), key.size());\n+            masterKey.SetMaster(key.begin(), key.size());\n+        }\n \n         // derive m/0'\n         // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n@@ -630,10 +636,14 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         // if we are using HD, replace the HD master key (seed) with a new one\n         if (IsHDEnabled()) {\n-            CKey key;\n-            CPubKey masterPubKey = GenerateNewHDMasterKey();\n-            if (!SetHDMasterKey(masterPubKey))\n-                return false;\n+            // when a custom master private key has been set, we should keep it and warn the user\n+            if (hdChain.customMasterKey.IsValid())\n+                LogPrintf(\"WARNING: the custom set extended master private key (xpriv) will be re-used after encryption of the wallet.\");\n+            else {\n+                CPubKey masterPubKey = GenerateNewHDMasterKey();\n+                if (!SetHDMasterKey(masterPubKey, GetArg(\"-hdxpriv\", \"\")))\n+                    return false;\n+            }\n         }\n \n         NewKeyPool();\n@@ -1207,7 +1217,7 @@ CPubKey CWallet::GenerateNewHDMasterKey()\n     return pubkey;\n }\n \n-bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n+bool CWallet::SetHDMasterKey(const CPubKey& pubkey, const std::string& xPriv)\n {\n     LOCK(cs_wallet);\n \n@@ -1218,7 +1228,24 @@ bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n     // the child index counter in the database\n     // as a hdchain object\n     CHDChain newHdChain;\n-    newHdChain.masterKeyID = pubkey.GetID();\n+\n+    // check for >1 to ignore \"0\" or \"1\"\n+    if (xPriv.size() > 1)\n+    {\n+        CBitcoinExtKey b58key(xPriv);\n+        // copy over the key\n+        newHdChain.customMasterKey = b58key.GetKey();\n+        if (!newHdChain.customMasterKey.IsValid())\n+        {\n+            LogPrintf(\"%s: invalid xpriv provided\\n\", __func__);\n+            return false;\n+        }\n+        // for custom key, user the xprivs pubkeys hash160 as ID\n+        newHdChain.masterKeyID = newHdChain.customMasterKey.key.GetPubKey().GetID();\n+    }\n+    else\n+        newHdChain.masterKeyID = pubkey.GetID();\n+\n     SetHDChain(newHdChain, false);\n \n     return true;\n@@ -3253,6 +3280,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_USE_HD_WALLET));\n+    strUsage += HelpMessageOpt(\"-hdxpriv\", _(\"Use a custom extended master private key (xpriv) when deterministic key generation (HD) after BIP32 is enabled. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: empty==generate new seed)\"), DEFAULT_USE_HD_WALLET));\n     strUsage += HelpMessageOpt(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (default: %u)\"), DEFAULT_WALLET_RBF));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n@@ -3344,8 +3372,9 @@ bool CWallet::InitLoadWallet()\n         if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && !walletInstance->IsHDEnabled()) {\n             // generate a new master key\n             CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n-            if (!walletInstance->SetHDMasterKey(masterPubKey))\n-                throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n+            std::string hdxpriv = GetArg(\"-hdxpriv\", \"\");\n+            if (!walletInstance->SetHDMasterKey(masterPubKey, hdxpriv))\n+                return InitError(_(\"Storing master key failed\"));\n         }\n         CPubKey newDefaultKey;\n         if (walletInstance->GetKeyFromPool(newDefaultKey)) {\n@@ -3359,9 +3388,19 @@ bool CWallet::InitLoadWallet()\n     else if (mapArgs.count(\"-usehd\")) {\n         bool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n         if (walletInstance->IsHDEnabled() && !useHD)\n-            return InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));\n+            return InitError(strprintf(_(\"Error loading %s: You can't disable HD on an already existing HD wallet\"), walletFile));\n+        if (GetArg(\"-hdxpriv\", \"\").size() > 1)\n+        {\n+            CBitcoinExtKey b58key(GetArg(\"-hdxpriv\", \"\"));\n+            if (!b58key.GetKey().IsValid())\n+                return InitError(strprintf(_(\"Error loading %s: Invalid master extended private key (xpriv)\"), walletFile));\n+            if (!(b58key.GetKey() == walletInstance->GetHDChain().customMasterKey))\n+                return InitError(strprintf(_(\"Error loading %s: You can't change the master extended private key (xpriv) on an already existing HD wallet\"), walletFile));\n+            else\n+                LogPrintf(\"WARNING: For security reasons the -hdxpriv startup argument should be removed after wallet creation\\n\");\n+        }\n         if (!walletInstance->IsHDEnabled() && useHD)\n-            return InitError(strprintf(_(\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"), walletFile));\n+            return InitError(strprintf(_(\"Error loading %s: You can't enable HD on an already existing non-HD wallet\"), walletFile));\n     }\n \n     LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);"
      },
      {
        "sha": "b035c6f3b331e3c8319fde195b44291e32f461e9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d772d3bb210ac9d1e802b76babe2589998d6e6e8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d772d3bb210ac9d1e802b76babe2589998d6e6e8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d772d3bb210ac9d1e802b76babe2589998d6e6e8",
        "patch": "@@ -925,7 +925,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CPubKey GenerateNewHDMasterKey();\n     \n     /* Set the current HD master key (will reset the chain child index counters) */\n-    bool SetHDMasterKey(const CPubKey& key);\n+    /* If possibleXPriv is a valid Base58check encoded extended key it will be used as extended master key */\n+    bool SetHDMasterKey(const CPubKey& key, const std::string& possibleXPriv);\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  }
]