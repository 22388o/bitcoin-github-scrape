fanquake,2018-11-04T03:41:06Z,Please send the leveldb changes [upstream](https://github.com/bitcoin-core/leveldb).,https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-435639527,435639527,
ldm5180,2018-11-04T03:59:58Z,"> Please send the leveldb changes [upstream](https://github.com/bitcoin-core/leveldb).\n\nleveldb changes sent upstream. Rebased to only include the non-leveldb patch.",https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-435640163,435640163,
DrahtBot,2018-11-04T04:29:07Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14224](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14224.html) (Document intentional and unintentional unsi",https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-435641326,435641326,
practicalswift,2018-11-04T21:44:53Z,@ldm5180 Can you post the warnings emitted? What gcc version are you using?,https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-435710774,435710774,
MarcoFalke,2018-11-04T22:17:07Z,What are the performance impacts of this change?,https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-435713300,435713300,
ldm5180,2018-11-04T23:06:40Z,"> @ldm5180 Can you post the warnings emitted? What gcc version are you using?\n\ngcc version 8.2.0 (Ubuntu 8.2.0-7ubuntu1)\n\n```\nIn file included from bench/prevector.cpp:6:\n./prevector.h: In instantiation of ‘void prevector<N, T, Size, Diff>::fill(T*, ptrdiff_t) [with unsigned int N = 28; T = nontrivial_t; Size = unsigned int; Diff = int; ptrdiff_t = long int]’:                          ",https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-435717239,435717239,
ldm5180,2018-11-04T23:46:08Z,"> What are the performance impacts of this change?\n\nExpect, no impact. Is there a performance analysis test suite?\n\nThere are a few different cases. Here are them shown in the Compiler Explorer:\n1. Default fill w/ trivial type: https://gcc.godbolt.org/z/qzIKUJ (no difference)\n2. Default fill w/ nontrivial type: https://gcc.godbolt.org/z/h38Swd (difference discussed below)\n3. Copy fil",https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-435720118,435720118,
sipa,2018-11-04T23:52:21Z,"Concept ACK; from what I read is that for character types `std::fill` is generally compiled similar to `memset` would, so I expect no performance regression here.",https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-435720604,435720604,
laanwj,2018-11-06T16:20:13Z,"> Expect, no impact. Is there a performance analysis test suite?\n\nYes, there is `src/bench/bench_bitcoin`.\nAs the whole point of prevector is to be an optimization, I'd really prefer to see benchmarks here (if possible, both of gcc's and clang's standard library) and not make guesses.\n",https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-436313217,436313217,
practicalswift,2018-11-06T16:37:34Z,"@ldm5180 Very nice first time contribution! Hope to see more contributions from you!\n\nEchoing @laanwj - I'd also be interested in benchmark results.",https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-436319760,436319760,
ldm5180,2018-11-12T00:19:36Z,"I think the important benchmarks are the `PrevectorResize*`, but I just included all the `Prevector` tests.\n\nThe differences between g++ and clang++ are pretty stark, but the numbers within each version are very similar. Running them several times shows that they are not super stable number (at least on my machine). I don't know what your target is for acceptable, but here are some results:\n",https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-437719570,437719570,
laanwj,2018-11-12T09:35:26Z,"@ldm5180 thank you for doing benchmarks; so it's not significantly slower with gcc, surprisingly even faster with clang, looks good to me!\n\nutACK https://github.com/bitcoin/bitcoin/pull/14651/commits/76e13b586ff690dd3312f719f305c0d1021cd505",https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-437814662,437814662,
promag,2018-11-12T11:19:49Z,"utACK 76e13b5, nice code simplification and tiny performance bonus (with clang).",https://github.com/bitcoin/bitcoin/pull/14651#issuecomment-437844485,437844485,
sipa,2018-11-05T02:53:34Z,"Nit: please follow the style guide (4 space indendation, here and elsewhere).",https://github.com/bitcoin/bitcoin/pull/14651#discussion_r230623457,230623457,src/prevector.h
ldm5180,2018-11-05T03:51:27Z,Oops. Fixed.,https://github.com/bitcoin/bitcoin/pull/14651#discussion_r230628947,230628947,src/prevector.h
