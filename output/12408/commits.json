[
  {
    "sha": "fab8a6f609d15863545955d6523c616c2a97eeab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI4YTZmNjA5ZDE1ODYzNTQ1OTU1ZDY1MjNjNjE2YzJhOTdlZWFi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-11T02:06:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-17T20:10:01Z"
      },
      "message": "wallet: Change output type globals to members",
      "tree": {
        "sha": "a6ec9f9c5572e341ac150f470ed7dc24accfae28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6ec9f9c5572e341ac150f470ed7dc24accfae28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab8a6f609d15863545955d6523c616c2a97eeab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJarXYZAAoJEM4rdWl+aaVIADEMAKF89gPONm1+CSbY0wwAPa4R\nqiMYiMAiuGeyEaAtKd+wvDkxjfgqPykH2yuA+sLQAvxa/nKme4Im4YNoajUrg1Ki\n0gGUtuea97QTXFsHPXosjoVYIH65RqUZGLp5730KYd/E0hVP1zYuc7K851vzalP1\n1WZjFn/dwPaCyeETv93wEOnudskqfL5ZVzW7fgQTUfnR1jQpt70y/qUzuCt6VVq3\n3A5oQp7MxvJqs0cSejLXKV/jr4EitWAPIcHDFH30ppUdERwUMpJ/2AfKfYgrJgyj\nBgCrhTDdr5sNKWkT1XIsBO3/StCWgTjA3SVLM9urXkdM2wuoloM1J81nCdvQ3jB5\n+miDh4hRsiCSAmuRF7BIHsDsAREmy4grLbMctAnaVQDWR2jCzTUaNE6TGqNHxRyz\nVqFnAzuDOcVPfuciCsv2wC24GVvrQiX7GL33fN4hhuEzEbkJpn4Rwu716lCU57sZ\nXlL7S8cK5GxqusoZHojgy1ylEhfilFl1Ndg658agLg==\n=cXPQ\n-----END PGP SIGNATURE-----",
        "payload": "tree a6ec9f9c5572e341ac150f470ed7dc24accfae28\nparent 7be9a9a570c1140048f8781ced1111e1d930e517\nauthor MarcoFalke <falke.marco@gmail.com> 1518314795 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1521317401 -0400\n\nwallet: Change output type globals to members\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab8a6f609d15863545955d6523c616c2a97eeab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab8a6f609d15863545955d6523c616c2a97eeab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab8a6f609d15863545955d6523c616c2a97eeab/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7be9a9a570c1140048f8781ced1111e1d930e517",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7be9a9a570c1140048f8781ced1111e1d930e517",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7be9a9a570c1140048f8781ced1111e1d930e517"
      }
    ],
    "stats": {
      "total": 176,
      "additions": 84,
      "deletions": 92
    },
    "files": [
      {
        "sha": "801334483a2a2a118a51b335382ca1b1266241c7",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -441,6 +441,8 @@ int AddressTableModel::lookupAddress(const QString &address) const\n     }\n }\n \n+OutputType AddressTableModel::GetDefaultAddressType() const { return wallet->m_default_address_type; };\n+\n void AddressTableModel::emitDataChanged(int idx)\n {\n     Q_EMIT dataChanged(index(idx, 0, QModelIndex()), index(idx, columns.length()-1, QModelIndex()));"
      },
      {
        "sha": "ed7a4e6f4368f84cdfdc5c826a76d366a118e4fc",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -8,7 +8,7 @@\n #include <QAbstractTableModel>\n #include <QStringList>\n \n-enum OutputType : int;\n+enum class OutputType;\n \n class AddressTablePriv;\n class WalletModel;\n@@ -76,6 +76,8 @@ class AddressTableModel : public QAbstractTableModel\n \n     EditStatus getEditStatus() const { return editStatus; }\n \n+    OutputType GetDefaultAddressType() const;\n+\n private:\n     WalletModel *walletModel;\n     CWallet *wallet;"
      },
      {
        "sha": "ba2f7d0d1d67d5cbbfaf4231c2d8f446aba1e965",
        "filename": "src/qt/editaddressdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/editaddressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/editaddressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -11,7 +11,6 @@\n #include <QDataWidgetMapper>\n #include <QMessageBox>\n \n-extern OutputType g_address_type;\n \n EditAddressDialog::EditAddressDialog(Mode _mode, QWidget *parent) :\n     QDialog(parent),\n@@ -80,7 +79,7 @@ bool EditAddressDialog::saveCurrentRow()\n                 mode == NewSendingAddress ? AddressTableModel::Send : AddressTableModel::Receive,\n                 ui->labelEdit->text(),\n                 ui->addressEdit->text(),\n-                g_address_type);\n+                model->GetDefaultAddressType());\n         break;\n     case EditReceivingAddress:\n     case EditSendingAddress:"
      },
      {
        "sha": "92d7d729355e5fe2565a3176975beb5dc83a6d1e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -643,7 +643,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, const SendCoinsRecipient& r\n         // use for change. Despite an actual payment and not change, this is a close match:\n         // it's the output type we use subject to privacy issues, but not restricted by what\n         // other software supports.\n-        const OutputType change_type = g_change_type != OUTPUT_TYPE_NONE ? g_change_type : g_address_type;\n+        const OutputType change_type = wallet->m_default_change_type != OutputType::NONE ? wallet->m_default_change_type : wallet->m_default_address_type;\n         wallet->LearnRelatedScripts(newKey, change_type);\n         CTxDestination dest = GetDestinationForKey(newKey, change_type);\n         wallet->SetAddressBook(dest, strAccount, \"refund\");"
      },
      {
        "sha": "132fb54d660a73de4b712cf2a4006f9b55b36ae3",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -95,13 +95,13 @@ void ReceiveCoinsDialog::setModel(WalletModel *_model)\n         columnResizingFixer = new GUIUtil::TableViewLastColumnResizingFixer(tableView, AMOUNT_MINIMUM_COLUMN_WIDTH, DATE_COLUMN_WIDTH, this);\n \n         // configure bech32 checkbox, disable if launched with legacy as default:\n-        if (model->getDefaultAddressType() == OUTPUT_TYPE_BECH32) {\n+        if (model->getDefaultAddressType() == OutputType::BECH32) {\n             ui->useBech32->setCheckState(Qt::Checked);\n         } else {\n             ui->useBech32->setCheckState(Qt::Unchecked);\n         }\n \n-        ui->useBech32->setVisible(model->getDefaultAddressType() != OUTPUT_TYPE_LEGACY);\n+        ui->useBech32->setVisible(model->getDefaultAddressType() != OutputType::LEGACY);\n     }\n }\n \n@@ -145,8 +145,8 @@ void ReceiveCoinsDialog::on_receiveButton_clicked()\n     QString label = ui->reqLabel->text();\n     /* Generate new receiving address */\n     OutputType address_type = model->getDefaultAddressType();\n-    if (address_type != OUTPUT_TYPE_LEGACY) {\n-        address_type = ui->useBech32->isChecked() ? OUTPUT_TYPE_BECH32 : OUTPUT_TYPE_P2SH_SEGWIT;\n+    if (address_type != OutputType::LEGACY) {\n+        address_type = ui->useBech32->isChecked() ? OutputType::BECH32 : OutputType::P2SH_SEGWIT;\n     }\n     address = model->getAddressTableModel()->addRow(AddressTableModel::Receive, label, \"\", address_type);\n     SendCoinsRecipient info(address, label,"
      },
      {
        "sha": "c9898e52ca3ab738ea680826bc86ea4266f6d898",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -150,9 +150,6 @@ void BumpFee(TransactionView& view, const uint256& txid, bool expectDisabled, st\n //     src/qt/test/test_bitcoin-qt -platform cocoa    # macOS\n void TestGUI()\n {\n-    g_address_type = OUTPUT_TYPE_P2SH_SEGWIT;\n-    g_change_type = OUTPUT_TYPE_P2SH_SEGWIT;\n-\n     // Set up wallet and chain with 105 blocks (5 mature blocks for spending).\n     TestChain100Setup test;\n     for (int i = 0; i < 5; ++i) {\n@@ -163,7 +160,7 @@ void TestGUI()\n     wallet.LoadWallet(firstRun);\n     {\n         LOCK(wallet.cs_wallet);\n-        wallet.SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), g_address_type), \"\", \"receive\");\n+        wallet.SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet.m_default_address_type), \"\", \"receive\");\n         wallet.AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n     {"
      },
      {
        "sha": "5e7aefb187a6b84d6cf344250ad1ac52ffed566a",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -736,7 +736,7 @@ bool WalletModel::hdEnabled() const\n \n OutputType WalletModel::getDefaultAddressType() const\n {\n-    return g_address_type;\n+    return wallet->m_default_address_type;\n }\n \n int WalletModel::getDefaultConfirmTarget() const"
      },
      {
        "sha": "64813e0f5a46db4926d4ede5c2bc8b1872b76234",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -20,7 +20,7 @@\n \n #include <QObject>\n \n-enum OutputType : int;\n+enum class OutputType;\n \n class AddressTableModel;\n class OptionsModel;"
      },
      {
        "sha": "52d6a291c9877c323f3eeb21e77e070caf0588a4",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -18,8 +18,8 @@ class CCoinControl\n public:\n     //! Custom change destination, if not set an address is generated\n     CTxDestination destChange;\n-    //! Custom change type, ignored if destChange is set, defaults to g_change_type\n-    OutputType change_type;\n+    //! Override the default change type if set, ignored if destChange is set\n+    boost::optional<OutputType> m_change_type;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n     //! Includes watch only addresses which match the ISMINE_WATCH_SOLVABLE criteria\n@@ -43,7 +43,7 @@ class CCoinControl\n     void SetNull()\n     {\n         destChange = CNoDestination();\n-        change_type = g_change_type;\n+        m_change_type.reset();\n         fAllowOtherInputs = false;\n         fAllowWatchOnly = false;\n         setSelected.clear();"
      },
      {
        "sha": "61481e01b623cfe97ac8b570f71de335a889cf13",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 13,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -17,7 +17,7 @@\n std::string GetWalletHelpString(bool showDebug)\n {\n     std::string strUsage = HelpMessageGroup(_(\"Wallet options:\"));\n-    strUsage += HelpMessageOpt(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(OUTPUT_TYPE_DEFAULT)));\n+    strUsage += HelpMessageOpt(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)));\n     strUsage += HelpMessageOpt(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\");\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-discardfee=<amt>\", strprintf(_(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n@@ -181,18 +181,6 @@ bool WalletParameterInteraction()\n     bSpendZeroConfChange = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n     fWalletRbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n \n-    g_address_type = ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"));\n-    if (g_address_type == OUTPUT_TYPE_NONE) {\n-        return InitError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n-    }\n-\n-    // If changetype is set in config file or parameter, check that it's valid.\n-    // Default to OUTPUT_TYPE_NONE if not set.\n-    g_change_type = ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), OUTPUT_TYPE_NONE);\n-    if (g_change_type == OUTPUT_TYPE_NONE && !gArgs.GetArg(\"-changetype\", \"\").empty()) {\n-        return InitError(strprintf(\"Unknown change type '%s'\", gArgs.GetArg(\"-changetype\", \"\")));\n-    }\n-\n     return true;\n }\n "
      },
      {
        "sha": "1721bc6df6c161fc0580ceeb203f09f4cde4491b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -83,7 +83,7 @@ bool GetWalletAddressesForKey(CWallet * const pwallet, const CKeyID &keyid, std:\n         }\n     }\n     if (!fLabelFound) {\n-        strAddr = EncodeDestination(GetDestinationForKey(key.GetPubKey(), g_address_type));\n+        strAddr = EncodeDestination(GetDestinationForKey(key.GetPubKey(), pwallet->m_default_address_type));\n     }\n     return fLabelFound;\n }"
      },
      {
        "sha": "9aae1a5e55b520339d9008d999aad44fcbafd769",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -162,10 +162,10 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     if (!request.params[0].isNull())\n         strAccount = AccountFromValue(request.params[0]);\n \n-    OutputType output_type = g_address_type;\n+    OutputType output_type = pwallet->m_default_address_type;\n     if (!request.params[1].isNull()) {\n-        output_type = ParseOutputType(request.params[1].get_str(), g_address_type);\n-        if (output_type == OUTPUT_TYPE_NONE) {\n+        output_type = ParseOutputType(request.params[1].get_str(), pwallet->m_default_address_type);\n+        if (output_type == OutputType::NONE) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[1].get_str()));\n         }\n     }\n@@ -259,10 +259,10 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         pwallet->TopUpKeyPool();\n     }\n \n-    OutputType output_type = g_change_type != OUTPUT_TYPE_NONE ? g_change_type : g_address_type;\n+    OutputType output_type = pwallet->m_default_change_type != OutputType::NONE ? pwallet->m_default_change_type : pwallet->m_default_address_type;\n     if (!request.params[0].isNull()) {\n         output_type = ParseOutputType(request.params[0].get_str(), output_type);\n-        if (output_type == OUTPUT_TYPE_NONE) {\n+        if (output_type == OutputType::NONE) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n         }\n     }\n@@ -1221,10 +1221,10 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n         }\n     }\n \n-    OutputType output_type = g_address_type;\n+    OutputType output_type = pwallet->m_default_address_type;\n     if (!request.params[3].isNull()) {\n         output_type = ParseOutputType(request.params[3].get_str(), output_type);\n-        if (output_type == OUTPUT_TYPE_NONE) {\n+        if (output_type == OutputType::NONE) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[3].get_str()));\n         }\n     }\n@@ -3183,8 +3183,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             if (options.exists(\"changeAddress\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both changeAddress and address_type options\");\n             }\n-            coinControl.change_type = ParseOutputType(options[\"change_type\"].get_str(), coinControl.change_type);\n-            if (coinControl.change_type == OUTPUT_TYPE_NONE) {\n+            coinControl.m_change_type = ParseOutputType(options[\"change_type\"].get_str(), pwallet->m_default_change_type);\n+            if (coinControl.m_change_type == OutputType::NONE) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown change type '%s'\", options[\"change_type\"].get_str()));\n             }\n         }"
      },
      {
        "sha": "5c550742c8f840a76bea084333f9c40a160e8f89",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -12,8 +12,6 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     TestingSetup(chainName), m_wallet(\"mock\", CWalletDBWrapper::CreateMock())\n {\n     bool fFirstRun;\n-    g_address_type = OUTPUT_TYPE_DEFAULT;\n-    g_change_type = OUTPUT_TYPE_DEFAULT;\n     m_wallet.LoadWallet(fFirstRun);\n     RegisterValidationInterface(&m_wallet);\n "
      },
      {
        "sha": "808f8b88385df87bbe7137697d196717367c051c",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -114,9 +114,6 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n // than or equal to key birthday.\n BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n {\n-    g_address_type = OUTPUT_TYPE_DEFAULT;\n-    g_change_type = OUTPUT_TYPE_DEFAULT;\n-\n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n     const int64_t BLOCK_TIME = chainActive.Tip()->GetBlockTimeMax() + 5;\n@@ -272,8 +269,6 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        g_address_type = OUTPUT_TYPE_DEFAULT;\n-        g_change_type = OUTPUT_TYPE_DEFAULT;\n         wallet = MakeUnique<CWallet>(\"mock\", CWalletDBWrapper::CreateMock());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);"
      },
      {
        "sha": "3f1a2c1990d10babc3de0a97028dd05478c48c8a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 34,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -42,8 +42,6 @@ CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fWalletRbf = DEFAULT_WALLET_RBF;\n-OutputType g_address_type = OUTPUT_TYPE_NONE;\n-OutputType g_change_type = OUTPUT_TYPE_NONE;\n bool g_wallet_allow_fallback_fee = true; //<! will be defined via chainparams\n \n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n@@ -823,7 +821,7 @@ bool CWallet::GetAccountDestination(CTxDestination &dest, std::string strAccount\n             bForceNew = true;\n         else {\n             // Check if the current key has been used (TODO: check other addresses with the same key)\n-            CScript scriptPubKey = GetScriptForDestination(GetDestinationForKey(account.vchPubKey, g_address_type));\n+            CScript scriptPubKey = GetScriptForDestination(GetDestinationForKey(account.vchPubKey, m_default_address_type));\n             for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n                  it != mapWallet.end() && account.vchPubKey.IsValid();\n                  ++it)\n@@ -840,12 +838,12 @@ bool CWallet::GetAccountDestination(CTxDestination &dest, std::string strAccount\n         if (!GetKeyFromPool(account.vchPubKey, false))\n             return false;\n \n-        LearnRelatedScripts(account.vchPubKey, g_address_type);\n-        dest = GetDestinationForKey(account.vchPubKey, g_address_type);\n+        LearnRelatedScripts(account.vchPubKey, m_default_address_type);\n+        dest = GetDestinationForKey(account.vchPubKey, m_default_address_type);\n         SetAddressBook(dest, strAccount, \"receive\");\n         walletdb.WriteAccount(strAccount, account);\n     } else {\n-        dest = GetDestinationForKey(account.vchPubKey, g_address_type);\n+        dest = GetDestinationForKey(account.vchPubKey, m_default_address_type);\n     }\n \n     return true;\n@@ -2649,14 +2647,14 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vector<CRecipient>& vecSend)\n {\n     // If -changetype is specified, always use that change type.\n-    if (change_type != OUTPUT_TYPE_NONE) {\n+    if (change_type != OutputType::NONE) {\n         return change_type;\n     }\n \n-    // if g_address_type is legacy, use legacy address as change (even\n+    // if m_default_address_type is legacy, use legacy address as change (even\n     // if some of the outputs are P2WPKH or P2WSH).\n-    if (g_address_type == OUTPUT_TYPE_LEGACY) {\n-        return OUTPUT_TYPE_LEGACY;\n+    if (m_default_address_type == OutputType::LEGACY) {\n+        return OutputType::LEGACY;\n     }\n \n     // if any destination is P2WPKH or P2WSH, use P2WPKH for the change\n@@ -2666,12 +2664,12 @@ OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vec\n         int witnessversion = 0;\n         std::vector<unsigned char> witnessprogram;\n         if (recipient.scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n-            return OUTPUT_TYPE_BECH32;\n+            return OutputType::BECH32;\n         }\n     }\n \n-    // else use g_address_type for change\n-    return g_address_type;\n+    // else use m_default_address_type for change\n+    return m_default_address_type;\n }\n \n bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet,\n@@ -2768,7 +2766,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                     return false;\n                 }\n \n-                const OutputType change_type = TransactionChangeType(coin_control.change_type, vecSend);\n+                const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n \n                 LearnRelatedScripts(vchPubKey, change_type);\n                 scriptChange = GetScriptForDestination(GetDestinationForKey(vchPubKey, change_type));\n@@ -4002,8 +4000,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         }\n \n         walletInstance->SetBestChain(chainActive.GetLocator());\n-    }\n-    else if (gArgs.IsArgSet(\"-usehd\")) {\n+    } else if (gArgs.IsArgSet(\"-usehd\")) {\n         bool useHD = gArgs.GetBoolArg(\"-usehd\", true);\n         if (walletInstance->IsHDEnabled() && !useHD) {\n             InitError(strprintf(_(\"Error loading %s: You can't disable HD on an already existing HD wallet\"), walletFile));\n@@ -4015,6 +4012,20 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         }\n     }\n \n+    walletInstance->m_default_address_type = ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), DEFAULT_ADDRESS_TYPE);\n+    if (walletInstance->m_default_address_type == OutputType::NONE) {\n+        InitError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n+        return nullptr;\n+    }\n+\n+    // If changetype is set in config file or parameter, check that it's valid.\n+    // Default to OutputType::NONE if not set.\n+    walletInstance->m_default_change_type = ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), OutputType::NONE);\n+    if (walletInstance->m_default_change_type == OutputType::NONE && !gArgs.GetArg(\"-changetype\", \"\").empty()) {\n+        InitError(strprintf(\"Unknown change type '%s'\", gArgs.GetArg(\"-changetype\", \"\")));\n+        return nullptr;\n+    }\n+\n     LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n \n     // Try to top up keypool. No-op if the wallet is locked.\n@@ -4203,29 +4214,29 @@ OutputType ParseOutputType(const std::string& type, OutputType default_type)\n     if (type.empty()) {\n         return default_type;\n     } else if (type == OUTPUT_TYPE_STRING_LEGACY) {\n-        return OUTPUT_TYPE_LEGACY;\n+        return OutputType::LEGACY;\n     } else if (type == OUTPUT_TYPE_STRING_P2SH_SEGWIT) {\n-        return OUTPUT_TYPE_P2SH_SEGWIT;\n+        return OutputType::P2SH_SEGWIT;\n     } else if (type == OUTPUT_TYPE_STRING_BECH32) {\n-        return OUTPUT_TYPE_BECH32;\n+        return OutputType::BECH32;\n     } else {\n-        return OUTPUT_TYPE_NONE;\n+        return OutputType::NONE;\n     }\n }\n \n const std::string& FormatOutputType(OutputType type)\n {\n     switch (type) {\n-    case OUTPUT_TYPE_LEGACY: return OUTPUT_TYPE_STRING_LEGACY;\n-    case OUTPUT_TYPE_P2SH_SEGWIT: return OUTPUT_TYPE_STRING_P2SH_SEGWIT;\n-    case OUTPUT_TYPE_BECH32: return OUTPUT_TYPE_STRING_BECH32;\n+    case OutputType::LEGACY: return OUTPUT_TYPE_STRING_LEGACY;\n+    case OutputType::P2SH_SEGWIT: return OUTPUT_TYPE_STRING_P2SH_SEGWIT;\n+    case OutputType::BECH32: return OUTPUT_TYPE_STRING_BECH32;\n     default: assert(false);\n     }\n }\n \n void CWallet::LearnRelatedScripts(const CPubKey& key, OutputType type)\n {\n-    if (key.IsCompressed() && (type == OUTPUT_TYPE_P2SH_SEGWIT || type == OUTPUT_TYPE_BECH32)) {\n+    if (key.IsCompressed() && (type == OutputType::P2SH_SEGWIT || type == OutputType::BECH32)) {\n         CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n         CScript witprog = GetScriptForDestination(witdest);\n         // Make sure the resulting program is solvable.\n@@ -4236,20 +4247,20 @@ void CWallet::LearnRelatedScripts(const CPubKey& key, OutputType type)\n \n void CWallet::LearnAllRelatedScripts(const CPubKey& key)\n {\n-    // OUTPUT_TYPE_P2SH_SEGWIT always adds all necessary scripts for all types.\n-    LearnRelatedScripts(key, OUTPUT_TYPE_P2SH_SEGWIT);\n+    // OutputType::P2SH_SEGWIT always adds all necessary scripts for all types.\n+    LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n }\n \n CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n {\n     switch (type) {\n-    case OUTPUT_TYPE_LEGACY: return key.GetID();\n-    case OUTPUT_TYPE_P2SH_SEGWIT:\n-    case OUTPUT_TYPE_BECH32: {\n+    case OutputType::LEGACY: return key.GetID();\n+    case OutputType::P2SH_SEGWIT:\n+    case OutputType::BECH32: {\n         if (!key.IsCompressed()) return key.GetID();\n         CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n         CScript witprog = GetScriptForDestination(witdest);\n-        if (type == OUTPUT_TYPE_P2SH_SEGWIT) {\n+        if (type == OutputType::P2SH_SEGWIT) {\n             return CScriptID(witprog);\n         } else {\n             return witdest;\n@@ -4275,10 +4286,10 @@ CTxDestination CWallet::AddAndGetDestinationForScript(const CScript& script, Out\n {\n     // Note that scripts over 520 bytes are not yet supported.\n     switch (type) {\n-    case OUTPUT_TYPE_LEGACY:\n+    case OutputType::LEGACY:\n         return CScriptID(script);\n-    case OUTPUT_TYPE_P2SH_SEGWIT:\n-    case OUTPUT_TYPE_BECH32: {\n+    case OutputType::P2SH_SEGWIT:\n+    case OutputType::BECH32: {\n         WitnessV0ScriptHash hash;\n         CSHA256().Write(script.data(), script.size()).Finalize(hash.begin());\n         CTxDestination witdest = hash;\n@@ -4287,7 +4298,7 @@ CTxDestination CWallet::AddAndGetDestinationForScript(const CScript& script, Out\n         if (!IsSolvable(*this, witprog)) return CScriptID(script);\n         // Add the redeemscript, so that P2WSH and P2SH-P2WSH outputs are recognized as ours.\n         AddCScript(witprog);\n-        if (type == OUTPUT_TYPE_BECH32) {\n+        if (type == OutputType::BECH32) {\n             return witdest;\n         } else {\n             return CScriptID(witprog);"
      },
      {
        "sha": "5ac8457eb4a9774d384be3bbfa060a5908400e49",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab8a6f609d15863545955d6523c616c2a97eeab/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fab8a6f609d15863545955d6523c616c2a97eeab",
        "patch": "@@ -43,6 +43,7 @@ extern bool bSpendZeroConfChange;\n extern bool fWalletRbf;\n extern bool g_wallet_allow_fallback_fee;\n \n+//! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n@@ -96,18 +97,15 @@ enum WalletFeature\n     FEATURE_LATEST = FEATURE_COMPRPUBKEY // HD is optional, use FEATURE_COMPRPUBKEY as latest version\n };\n \n-enum OutputType : int\n-{\n-    OUTPUT_TYPE_NONE,\n-    OUTPUT_TYPE_LEGACY,\n-    OUTPUT_TYPE_P2SH_SEGWIT,\n-    OUTPUT_TYPE_BECH32,\n-\n-    OUTPUT_TYPE_DEFAULT = OUTPUT_TYPE_P2SH_SEGWIT\n+enum class OutputType {\n+    NONE,\n+    LEGACY,\n+    P2SH_SEGWIT,\n+    BECH32,\n };\n \n-extern OutputType g_address_type;\n-extern OutputType g_change_type;\n+//! Default for -addresstype\n+constexpr OutputType DEFAULT_ADDRESS_TYPE{OutputType::P2SH_SEGWIT};\n \n \n /** A key pool entry */\n@@ -989,6 +987,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     static CFeeRate minTxFee;\n     static CFeeRate fallbackFee;\n     static CFeeRate m_discard_rate;\n+    OutputType m_default_address_type{DEFAULT_ADDRESS_TYPE};\n+    OutputType m_default_change_type{OutputType::NONE}; // Default to OutputType::NONE if not set by -changetype\n \n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys();\n@@ -1232,7 +1232,7 @@ class CAccount\n     }\n };\n \n-OutputType ParseOutputType(const std::string& str, OutputType default_type = OUTPUT_TYPE_DEFAULT);\n+OutputType ParseOutputType(const std::string& str, OutputType default_type);\n const std::string& FormatOutputType(OutputType type);\n \n /**"
      }
    ]
  }
]