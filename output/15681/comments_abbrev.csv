DrahtBot,2019-03-28T05:51:07Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16409](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16409.html) (Remove mempool expiry, treat txs as replace",https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-477458316,477458316,
TheBlueMatt,2019-03-28T18:20:20Z,CC @rustyrussell.,https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-477715211,477715211,
TheBlueMatt,2019-07-02T02:13:17Z,Resolved comments.,https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-507490217,507490217,
sdaftuar,2019-07-03T18:30:48Z,"Concept ACK.\n\nI did some review and light testing, and I noticed that there seems to be a general problem with our RBF logic: if we have some parent transaction whose descendant count is maxed out in the mempool, then we're unable to rbf any child transaction, because we evaluate the descendant limits of a new transactions ancestors prior to looking at what might be evicted by that transaction",https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-508207606,508207606,
ajtowns,2019-07-08T09:15:32Z,"Concept ACK. Might be worth adding an explicit test case for RBF case @sdaftuar points out:\n\n             # But not if it chains directly off the first transaction\n             self.chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n    +\n    +        # Sadly, RBFing that should fail, however\n    +        assert_raises_rpc_error(-26, ""too-long-mempool-chain"", sel",https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-509146925,509146925,
TheBlueMatt,2019-07-09T19:46:55Z,"@ajtowns I'd prefer to not add the proposed test change, as @sdaftuar's comment points out a critical limitation, and one I'd like to get resolved before this gets released, though not necessarily in this PR. I'd rather just fix the bug than add a test to ensure that the bug exists.\n\nAs for general policy questions: this doesn't result in any new transactions being accepted which violate min f",https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-509781430,509781430,
sdaftuar,2019-07-12T15:05:55Z,ACK f1facdd3e27d3b5c0536ab27d1f928984b8ccc25,https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-510921351,510921351,
ajtowns,2019-07-16T11:02:48Z,"ACK 50cede3f5a4d4fbfbb7c420b94e661a6a159bced -- looked over code again, compared with previous commit, compiles, etc.\n\nI think this is a sufficient improvement even with the problem @sdaftuar points out:\n\n * if there's no adversarial situation and you hit the descendent limit with low fee children just due to carelessness, this carveout can be used to RBF the first child (paying 25 times t",https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-511770170,511770170,
ajtowns,2019-07-16T11:12:13Z,"Patch to `mempool_package_onemore.py` for checking the ""can RBF if I've added too many descendants myself"" case. Maybe useful for reviewers, not suitable for inclusion since it kills the checks for the intended usecase:\n\n```diff\n+++ b/test/functional/mempool_package_onemore.py\n@@ -33,7 +33,7 @@ class MempoolPackagesTest(BitcoinTestFramework):\n         outputs = {}\n         for i in ran",https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-511772799,511772799,
sdaftuar,2019-07-19T17:45:51Z,ACK 50cede3f5a4d4fbfbb7c420b94e661a6a159bced,https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-513316913,513316913,
ysangkok,2019-11-09T19:28:09Z,just FYI: a lot of interesting comments on this PR available at: https://bitcoincore.reviews/15681.html,https://github.com/bitcoin/bitcoin/pull/15681#issuecomment-552129729,552129729,
instagibbs,2019-03-28T16:23:20Z,"I'm still chewing on the comment above, but doesn't this line let transactions >40k weight through no matter what?",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270087859,270087859,src/validation.cpp
TheBlueMatt,2019-03-28T17:04:55Z,"Lol, oops, one of these days I'll learn to code.",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270106458,270106458,src/validation.cpp
instagibbs,2019-03-28T17:07:04Z,did the tests work? ;D,https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270107357,270107357,src/validation.cpp
instagibbs,2019-03-28T17:07:53Z,Add a test that blowing the 40k weight makes it fail?,https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270107733,270107733,test/functional/mempool_package_onemore.py
TheBlueMatt,2019-03-28T17:59:36Z,Done!,https://github.com/bitcoin/bitcoin/pull/15681#discussion_r270130965,270130965,test/functional/mempool_package_onemore.py
practicalswift,2019-04-02T07:35:12Z,"Should be ""carve"" :-)",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r271166377,271166377,test/functional/mempool_package_onemore.py
practicalswift,2019-04-02T07:37:21Z,Nit: This method doesn't use `self`: could be made a function?,https://github.com/bitcoin/bitcoin/pull/15681#discussion_r271167067,271167067,test/functional/mempool_package_onemore.py
practicalswift,2019-04-02T07:38:19Z,Nit: `for _` is more idiomatic when `_` is unused :-)  Applies also for the other `for i`:s below :-),https://github.com/bitcoin/bitcoin/pull/15681#discussion_r271167375,271167375,test/functional/mempool_package_onemore.py
morcos,2019-04-11T15:48:40Z,"Please expand significantly on the rationale for this change because its a weird little bit of added complication, and basically the only downside is people not understanding why it's there.  You could link to the mailing list post maybe.",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r274493113,274493113,src/validation.cpp
jachiang,2019-07-01T12:41:26Z,"@TheBlueMatt I have a spill-over question from the PR review club which covered this PR last week. I am unsure of why the LimitAncestorSize for the carve-out tx has been increased to the block-size. \n\nEDIT: @harding has helped tidy up my understanding of this: \n\nIn the case of a (to-be-fee-bumped) LN parent TX with two hooks (A and B), which is close or equal to the descendant-size-limit, ",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r299023410,299023410,src/validation.cpp
TheBlueMatt,2019-07-02T02:13:08Z,"Indeed, we don't really care about the size of the ancestor transaction here (its limited to the standard single-tx size limit, or 100k today), so I just set it to 1M, we already check that there is only, at max, one unconfirmed parent.",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r299279645,299279645,src/validation.cpp
ajtowns,2019-07-08T09:23:27Z,You're only ever using node 0 in this test,https://github.com/bitcoin/bitcoin/pull/15681#discussion_r300998383,300998383,test/functional/mempool_package_onemore.py
ryanofsky,2019-07-08T21:16:54Z,"Can these constants be named, or at least explained? It seems like 10000 is the 40k weight limit, and 1000000 is just a big number?",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r301303685,301303685,src/validation.cpp
ryanofsky,2019-07-08T21:34:11Z,"Not great how this function and the test setup here is mostly duplicated from mempool_packages.py. Someone could clean it up later, though.",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r301309941,301309941,test/functional/mempool_package_onemore.py
ryanofsky,2019-07-08T21:51:50Z,"Having two basically identical loops just to add an extra output to the first four transactions seems like an odd choice. Maybe prefer\n\n```python\nfor depth in range(MAX_ANCESTORS):\n    num_outputs = 2 if depth < 4 else 1\n    ...\n```",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r301315975,301315975,test/functional/mempool_package_onemore.py
ryanofsky,2019-07-08T21:52:55Z,"Stale comment from the old test, now MAX_ANCESTORS+1",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r301316322,301316322,test/functional/mempool_package_onemore.py
ryanofsky,2019-07-08T21:55:33Z,"These tests would be more readable, and zip() above could be dropped if chain_transaction just took a list of txid/nout tuples ",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r301317145,301317145,test/functional/mempool_package_onemore.py
ryanofsky,2019-07-08T21:58:05Z,"Imo, tests below would be more reable if this were\n\n```python\nchain.append(txid)\nvalues.append(value)\n```\n\nto get rid of all the 0/1 indexing",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r301317939,301317939,test/functional/mempool_package_onemore.py
ajtowns,2019-07-09T10:37:02Z,"FWIW, I thought the way it is seemed more readable. YMMV obviously :)",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r301515952,301515952,test/functional/mempool_package_onemore.py
TheBlueMatt,2019-07-09T19:46:44Z,I find this more readable.,https://github.com/bitcoin/bitcoin/pull/15681#discussion_r301762770,301762770,test/functional/mempool_package_onemore.py
TheBlueMatt,2019-07-09T19:46:47Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15681#discussion_r301762789,301762789,test/functional/mempool_package_onemore.py
jnewbery,2019-07-22T20:16:23Z,"Passing `errString` through to the second call of `CalculateMemPoolAncestors()` means that the error string in the `CValidationState` object will be incorrect because of the changed ancestor/descendant size/count parameters. Really we should declare a `dummy_error_string` to pass into the second call, and use the original `errString` in the call to `state.Invalid()` below.",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r306013041,306013041,src/validation.cpp
jnewbery,2019-07-22T20:18:15Z,nit: virtual size (or define this in terms or transaction weight),https://github.com/bitcoin/bitcoin/pull/15681#discussion_r306013773,306013773,test/functional/mempool_package_onemore.py
jnewbery,2019-07-22T20:21:26Z,nit: it's preferable to use named transactions to make the test more readable.,https://github.com/bitcoin/bitcoin/pull/15681#discussion_r306015066,306015066,test/functional/mempool_package_onemore.py
jnewbery,2019-07-22T20:22:45Z,nit: name this class `MempoolPackageOnemoreTest`,https://github.com/bitcoin/bitcoin/pull/15681#discussion_r306015585,306015585,test/functional/mempool_package_onemore.py
jnewbery,2019-07-22T20:22:51Z,agree that this would be better as a function than a method,https://github.com/bitcoin/bitcoin/pull/15681#discussion_r306015631,306015631,test/functional/mempool_package_onemore.py
jnewbery,2019-07-22T20:23:44Z,nit: name this variable `utxos` or define it as `self.nodes[0].listunspent(10)[0]`,https://github.com/bitcoin/bitcoin/pull/15681#discussion_r306016033,306016033,test/functional/mempool_package_onemore.py
jnewbery,2019-07-22T20:34:03Z,"+1, or used a namedtuple",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r306020081,306020081,test/functional/mempool_package_onemore.py
jnewbery,2019-07-22T20:39:28Z,"I don't think this addresses the edge case that we want. The line you added above:\n\n`assert_raises_rpc_error(-26, ""too-long-mempool-chain"", self.chain_transaction, self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 350)`\n\nFails both the `nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT` _and_ `!pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimi",https://github.com/bitcoin/bitcoin/pull/15681#discussion_r306022260,306022260,test/functional/mempool_package_onemore.py
