[
  {
    "sha": "50cede3f5a4d4fbfbb7c420b94e661a6a159bced",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGNlZGUzZjVhNGQ0ZmJmYmI3YzQyMGI5NGU2NjFhNmExNTliY2Vk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-03-26T20:40:58Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-07-09T19:46:25Z"
      },
      "message": "[mempool] Allow one extra single-ancestor transaction per package\n\nThis implements the proposed policy change from [1], which allows\ncertain classes of contract protocols involving revocation\npunishments to use CPFP. Note that some such use-cases may still\nwant some form of one-deep package relay, though even this alone\nmay greatly simplify some lightning fee negotiation.\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html",
      "tree": {
        "sha": "f6a32ea8f748c39733206f19574a83796b622a34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6a32ea8f748c39733206f19574a83796b622a34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50cede3f5a4d4fbfbb7c420b94e661a6a159bced",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50cede3f5a4d4fbfbb7c420b94e661a6a159bced",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50cede3f5a4d4fbfbb7c420b94e661a6a159bced",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50cede3f5a4d4fbfbb7c420b94e661a6a159bced/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1212808762f63185bbde980c154d3e1a6c6eb819",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1212808762f63185bbde980c154d3e1a6c6eb819",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1212808762f63185bbde980c154d3e1a6c6eb819"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 108,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f94580edfffc488dcdb52c685f54917e7e15870f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50cede3f5a4d4fbfbb7c420b94e661a6a159bced/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50cede3f5a4d4fbfbb7c420b94e661a6a159bced/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=50cede3f5a4d4fbfbb7c420b94e661a6a159bced",
        "patch": "@@ -610,7 +610,21 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n         std::string errString;\n         if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n-            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            setAncestors.clear();\n+            // If the new transaction is relatively small (up to 40k weight)\n+            // and has at most one ancestor (ie ancestor limit of 2, including\n+            // the new transaction), allow it if its parent has exactly the\n+            // descendant limit descendants.\n+            //\n+            // This allows protocols which rely on distrusting counterparties\n+            // being able to broadcast descendants of an unconfirmed transaction\n+            // to be secure by simply only having two immediately-spendable\n+            // outputs - one for each counterparty. For more info on the uses for\n+            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n+            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, errString)) {\n+                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            }\n         }\n \n         // A transaction that spends outputs that would be replaced by it is invalid. Now"
      },
      {
        "sha": "a72ed3c580e4d5d45d2e11fdfb093f83e54d331a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50cede3f5a4d4fbfbb7c420b94e661a6a159bced/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50cede3f5a4d4fbfbb7c420b94e661a6a159bced/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=50cede3f5a4d4fbfbb7c420b94e661a6a159bced",
        "patch": "@@ -63,6 +63,12 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n+/**\n+ * An extra transaction can be added to a package, as long as it only has one\n+ * ancestor and is no larger than this. Not really any reason to make this\n+ * configurable as it doesn't materially change DoS parameters.\n+ */\n+static const unsigned int EXTRA_DESCENDANT_TX_SIZE_LIMIT = 10000;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;\n /** Maximum kilobytes for transactions to store for processing during reorg */"
      },
      {
        "sha": "f955c1a77f0d21407286513f53d8aa68a5868b38",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50cede3f5a4d4fbfbb7c420b94e661a6a159bced/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50cede3f5a4d4fbfbb7c420b94e661a6a159bced/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=50cede3f5a4d4fbfbb7c420b94e661a6a159bced",
        "patch": "@@ -0,0 +1,86 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descendant package tracking carve-out allowing one final transaction in\n+   an otherwise-full package as long as it has only one parent and is <= 10k in\n+   size.\n+\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n+\n+MAX_ANCESTORS = 25\n+MAX_DESCENDANTS = 25\n+\n+class MempoolPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-maxorphantx=1000\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    # Build a transaction that spends parent_txid:vout\n+    # Return amount sent\n+    def chain_transaction(self, node, parent_txids, vouts, value, fee, num_outputs):\n+        send_value = satoshi_round((value - fee)/num_outputs)\n+        inputs = []\n+        for (txid, vout) in zip(parent_txids, vouts):\n+            inputs.append({'txid' : txid, 'vout' : vout})\n+        outputs = {}\n+        for i in range(num_outputs):\n+            outputs[node.getnewaddress()] = send_value\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signedtx = node.signrawtransactionwithwallet(rawtx)\n+        txid = node.sendrawtransaction(signedtx['hex'])\n+        fulltx = node.getrawtransaction(txid, 1)\n+        assert len(fulltx['vout']) == num_outputs  # make sure we didn't generate a change output\n+        return (txid, send_value)\n+\n+    def run_test(self):\n+        # Mine some blocks and have them mature.\n+        self.nodes[0].generate(101)\n+        utxo = self.nodes[0].listunspent(10)\n+        txid = utxo[0]['txid']\n+        vout = utxo[0]['vout']\n+        value = utxo[0]['amount']\n+\n+        fee = Decimal(\"0.0002\")\n+        # MAX_ANCESTORS transactions off a confirmed tx should be fine\n+        chain = []\n+        for _ in range(4):\n+            (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [vout], value, fee, 2)\n+            vout = 0\n+            value = sent_value\n+            chain.append([txid, value])\n+        for _ in range(MAX_ANCESTORS - 4):\n+            (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [0], value, fee, 1)\n+            value = sent_value\n+            chain.append([txid, value])\n+        (second_chain, second_chain_value) = self.chain_transaction(self.nodes[0], [utxo[1]['txid']], [utxo[1]['vout']], utxo[1]['amount'], fee, 1)\n+\n+        # Check mempool has MAX_ANCESTORS + 1 transactions in it\n+        assert_equal(len(self.nodes[0].getrawmempool(True)), MAX_ANCESTORS + 1)\n+\n+        # Adding one more transaction on to the chain should fail.\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [txid], [0], value, fee, 1)\n+        # ...even if it chains on from some point in the middle of the chain.\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[2][0]], [1], chain[2][1], fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[1][0]], [1], chain[1][1], fee, 1)\n+        # ...even if it chains on to two parent transactions with one in the chain.\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[0][0], second_chain], [1, 0], chain[0][1] + second_chain_value, fee, 1)\n+        # ...especially if its > 40k weight\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 350)\n+        # But not if it chains directly off the first transaction\n+        self.chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n+        # and the second chain should work just fine\n+        self.chain_transaction(self.nodes[0], [second_chain], [0], second_chain_value, fee, 1)\n+\n+        # Finally, check that we added two transactions\n+        assert_equal(len(self.nodes[0].getrawmempool(True)), MAX_ANCESTORS + 3)\n+\n+if __name__ == '__main__':\n+    MempoolPackagesTest().main()"
      },
      {
        "sha": "f5b166742bc86166811ce736f69f16b5e6475384",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50cede3f5a4d4fbfbb7c420b94e661a6a159bced/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50cede3f5a4d4fbfbb7c420b94e661a6a159bced/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=50cede3f5a4d4fbfbb7c420b94e661a6a159bced",
        "patch": "@@ -157,6 +157,7 @@\n     'rpc_invalidateblock.py',\n     'feature_rbf.py',\n     'mempool_packages.py',\n+    'mempool_package_onemore.py',\n     'rpc_createmultisig.py',\n     'feature_versionbits_warning.py',\n     'rpc_preciousblock.py',"
      }
    ]
  }
]