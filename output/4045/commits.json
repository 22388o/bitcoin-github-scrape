[
  {
    "sha": "c8988460a2865b99ee96da6799d37ac6ccb79d4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODk4ODQ2MGEyODY1Yjk5ZWU5NmRhNjc5OWQzN2FjNmNjYjc5ZDRk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-07-25T23:06:01Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:37Z"
      },
      "message": "Add support for watch-only addresses\n\nChanges:\n* Add Add/Have WatchOnly methods to CKeyStore, and implementations\n  in CBasicKeyStore.\n* Add similar methods to CWallet, and support entries for it in\n  CWalletDB.\n* Make IsMine in script/wallet return a new enum 'isminetype',\n  rather than a boolean. This allows distinguishing between\n  spendable and unspendable coins.\n* Add a field fSpendable to COutput (GetAvailableCoins' return type).\n* Mark watchonly coins in listunspent as 'watchonly': true.\n* Add 'watchonly' to validateaddress, suppressing script/pubkey/...\n  in this case.\n\nBased on a patch by Eric Lombrozo.\n\nConflicts:\n\tsrc/qt/walletmodel.cpp\n\tsrc/rpcserver.cpp\n\tsrc/wallet.cpp",
      "tree": {
        "sha": "359da0335ecd969209daa6f2ef3ddadc157b77f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/359da0335ecd969209daa6f2ef3ddadc157b77f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8988460a2865b99ee96da6799d37ac6ccb79d4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8988460a2865b99ee96da6799d37ac6ccb79d4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8988460a2865b99ee96da6799d37ac6ccb79d4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8988460a2865b99ee96da6799d37ac6ccb79d4d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd49e92fb0cae0dcdf0b2ea303da99c7814db473",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd49e92fb0cae0dcdf0b2ea303da99c7814db473",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd49e92fb0cae0dcdf0b2ea303da99c7814db473"
      }
    ],
    "stats": {
      "total": 275,
      "additions": 223,
      "deletions": 52
    },
    "files": [
      {
        "sha": "c2ea1ce5a9946b85841ef6b4890f3c9a7670290c",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -59,3 +59,15 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     return false;\n }\n \n+bool CBasicKeyStore::AddWatchOnly(const CTxDestination &dest)\n+{\n+    LOCK(cs_KeyStore);\n+    setWatchOnly.insert(dest);\n+    return true;\n+}\n+\n+bool CBasicKeyStore::HaveWatchOnly(const CTxDestination &dest) const\n+{\n+    LOCK(cs_KeyStore);\n+    return setWatchOnly.count(dest) > 0;\n+}"
      },
      {
        "sha": "90fc3a4c7b0bda22bd16a5335f1c6228be91f14a",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -8,11 +8,21 @@\n \n #include \"key.h\"\n #include \"sync.h\"\n+#include \"script.h\"     // for CNoDestination\n \n #include <boost/signals2/signal.hpp>\n+#include <boost/variant.hpp>\n \n class CScript;\n \n+/** A txout script template with a specific destination. It is either:\n+ *  * CNoDestination: no destination set\n+ *  * CKeyID: TX_PUBKEYHASH destination\n+ *  * CScriptID: TX_SCRIPTHASH destination\n+ *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n+ */\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+\n /** A virtual base class for key stores */\n class CKeyStore\n {\n@@ -36,17 +46,23 @@ class CKeyStore\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n     virtual bool HaveCScript(const CScriptID &hash) const =0;\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const =0;\n+\n+    // Support for Watch-only addresses\n+    virtual bool AddWatchOnly(const CTxDestination &dest) =0;\n+    virtual bool HaveWatchOnly(const CTxDestination &dest) const =0;\n };\n \n typedef std::map<CKeyID, CKey> KeyMap;\n typedef std::map<CScriptID, CScript > ScriptMap;\n+typedef std::set<CTxDestination> WatchOnlySet;\n \n /** Basic key store, that keeps keys in an address->secret map */\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n     ScriptMap mapScripts;\n+    WatchOnlySet setWatchOnly;\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n@@ -88,6 +104,9 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool AddCScript(const CScript& redeemScript);\n     virtual bool HaveCScript(const CScriptID &hash) const;\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n+\n+    virtual bool AddWatchOnly(const CTxDestination &dest);\n+    virtual bool HaveWatchOnly(const CTxDestination &dest) const;\n };\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;"
      },
      {
        "sha": "d32e74b78a54f663cd5c3df3e294538ca6254942",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -543,7 +543,7 @@ void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vect\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n         if (nDepth < 0) continue;\n-        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth);\n+        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true);\n         vOutputs.push_back(out);\n     }\n }\n@@ -570,7 +570,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n         if (nDepth < 0) continue;\n-        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth);\n+        COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true);\n         vCoins.push_back(out);\n     }\n \n@@ -581,7 +581,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         while (wallet->IsChange(cout.tx->vout[cout.i]) && cout.tx->vin.size() > 0 && wallet->IsMine(cout.tx->vin[0]))\n         {\n             if (!wallet->mapWallet.count(cout.tx->vin[0].prevout.hash)) break;\n-            cout = COutput(&wallet->mapWallet[cout.tx->vin[0].prevout.hash], cout.tx->vin[0].prevout.n, 0);\n+            cout = COutput(&wallet->mapWallet[cout.tx->vin[0].prevout.hash], cout.tx->vin[0].prevout.n, 0, true);\n         }\n \n         CTxDestination address;"
      },
      {
        "sha": "76c99e7c9f7f65f166047eae652aa185910581f0",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -72,6 +72,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"lockunspent\", 0 },\n     { \"lockunspent\", 1 },\n     { \"importprivkey\", 2 },\n+    { \"importaddress\", 2 },\n     { \"verifychain\", 0 },\n     { \"verifychain\", 1 },\n     { \"keypoolrefill\", 0 },"
      },
      {
        "sha": "5b325c46eedb5c4731eef52e22d0f1de0f34c036",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -133,6 +133,51 @@ Value importprivkey(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n+Value importaddress(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 3)\n+        throw runtime_error(\n+            \"importaddress <address> [label] [rescan=true]\\n\"\n+            \"Adds an address that can be watched as if it were in your wallet but cannot be used to spend.\");\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid\u00a0Bitcoin\u00a0address\");\n+    CTxDestination dest;\n+    dest = address.Get();\n+\n+    string strLabel = \"\";\n+    if (params.size() > 1)\n+        strLabel = params[1].get_str();\n+\n+    //\u00a0Whether\u00a0to\u00a0perform\u00a0rescan\u00a0after\u00a0import\n+    bool fRescan = true;\n+    if (params.size() > 2)\n+        fRescan = params[2].get_bool();\n+\n+    {\n+        LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+        // Don't throw error in case an address is already there\n+        if (pwalletMain->HaveWatchOnly(dest))\n+            return Value::null;\n+\n+        pwalletMain->MarkDirty();\n+        pwalletMain->SetAddressBook(dest, strLabel, \"receive\");\n+\n+        if (!pwalletMain->AddWatchOnly(dest))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error\u00a0adding\u00a0address\u00a0to\u00a0wallet\");\n+\n+        if (fRescan)\n+        {\n+            pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+            pwalletMain->ReacceptWalletTransactions();\n+        }\n+    }\n+\n+    return Value::null;\n+}\n+\n Value importwallet(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)"
      },
      {
        "sha": "e2de2dbcdb968455033f5b17f9867c6ec71f6db7",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 21,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -92,36 +92,45 @@ Value getinfo(const Array& params, bool fHelp)\n #ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<Object>\n {\n+private:\n+    isminetype mine;\n+\n public:\n+    DescribeAddressVisitor(isminetype mineIn) : mine(mineIn) {}\n+\n     Object operator()(const CNoDestination &dest) const { return Object(); }\n \n     Object operator()(const CKeyID &keyID) const {\n         Object obj;\n         CPubKey vchPubKey;\n-        pwalletMain->GetPubKey(keyID, vchPubKey);\n         obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-        obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        if (mine == MINE_SPENDABLE) {\n+            pwalletMain->GetPubKey(keyID, vchPubKey);\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n         return obj;\n     }\n \n     Object operator()(const CScriptID &scriptID) const {\n         Object obj;\n         obj.push_back(Pair(\"isscript\", true));\n-        CScript subscript;\n-        pwalletMain->GetCScript(scriptID, subscript);\n-        std::vector<CTxDestination> addresses;\n-        txnouttype whichType;\n-        int nRequired;\n-        ExtractDestinations(subscript, whichType, addresses, nRequired);\n-        obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-        obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-        Array a;\n-        BOOST_FOREACH(const CTxDestination& addr, addresses)\n-            a.push_back(CBitcoinAddress(addr).ToString());\n-        obj.push_back(Pair(\"addresses\", a));\n-        if (whichType == TX_MULTISIG)\n-            obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        if (mine == MINE_SPENDABLE) {\n+            CScript subscript;\n+            pwalletMain->GetCScript(scriptID, subscript);\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            Array a;\n+            BOOST_FOREACH(const CTxDestination& addr, addresses)\n+                a.push_back(CBitcoinAddress(addr).ToString());\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n         return obj;\n     }\n };\n@@ -161,10 +170,11 @@ Value validateaddress(const Array& params, bool fHelp)\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n #ifdef ENABLE_WALLET\n-        bool fMine = pwalletMain ? IsMine(*pwalletMain, dest) : false;\n-        ret.push_back(Pair(\"ismine\", fMine));\n-        if (fMine) {\n-            Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n+        isminetype mine = pwalletMain ? IsMine(*pwalletMain, dest) : MINE_NO;\n+        ret.push_back(Pair(\"ismine\", mine != MINE_NO));\n+        if (mine != MINE_NO) {\n+            ret.push_back(Pair(\"watchonly\", mine == MINE_WATCH_ONLY));\n+            Object detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);\n             ret.insert(ret.end(), detail.begin(), detail.end());\n         }\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))"
      },
      {
        "sha": "da4bde3975bd3587457f1bfc37db29e41083fd93",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -304,6 +304,7 @@ Value listunspent(const Array& params, bool fHelp)\n         }\n         entry.push_back(Pair(\"amount\",ValueFromAmount(nValue)));\n         entry.push_back(Pair(\"confirmations\",out.nDepth));\n+        entry.push_back(Pair(\"spendable\", out.fSpendable));\n         results.push_back(entry);\n     }\n "
      },
      {
        "sha": "363403c69e8aa83984008abfad1916377a07f675",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -282,6 +282,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getwalletinfo\",          &getwalletinfo,          true,      false,      true },\n     { \"importprivkey\",          &importprivkey,          false,     false,      true },\n     { \"importwallet\",           &importwallet,           false,     false,      true },\n+    { \"importaddress\",          &importaddress,          false,     false,      true },\n     { \"keypoolrefill\",          &keypoolrefill,          true,      false,      true },\n     { \"listaccounts\",           &listaccounts,           false,     false,      true },\n     { \"listaddressgroupings\",   &listaddressgroupings,   false,     false,      true },"
      },
      {
        "sha": "e32eb975a1a66418746e3c667e73b25de82db36e",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -131,6 +131,7 @@ extern json_spirit::Value getnettotals(const json_spirit::Array& params, bool fH\n \n extern json_spirit::Value dumpprivkey(const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value importaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value dumpwallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fHelp);\n "
      },
      {
        "sha": "0ef0126255e8361149e0cca4f8cca69f064805f4",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 13,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -1456,36 +1456,57 @@ class CKeyStoreIsMineVisitor : public boost::static_visitor<bool>\n     bool operator()(const CScriptID &scriptID) const { return keystore->HaveCScript(scriptID); }\n };\n \n-bool IsMine(const CKeyStore &keystore, const CTxDestination &dest)\n+isminetype IsMine(const CKeyStore &keystore, const CTxDestination &dest)\n {\n-    return boost::apply_visitor(CKeyStoreIsMineVisitor(&keystore), dest);\n+    if (boost::apply_visitor(CKeyStoreIsMineVisitor(&keystore), dest))\n+        return MINE_SPENDABLE;\n+    if (keystore.HaveWatchOnly(dest))\n+        return MINE_WATCH_ONLY;\n+    return MINE_NO;\n }\n \n-bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n+isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n {\n     vector<valtype> vSolutions;\n     txnouttype whichType;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n+    if (!Solver(scriptPubKey, whichType, vSolutions)) {\n+        if (keystore.HaveWatchOnly(scriptPubKey.GetID()))\n+            return MINE_WATCH_ONLY;\n+        return MINE_NO;\n+    }\n \n     CKeyID keyID;\n     switch (whichType)\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n-        return false;\n+        break;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return keystore.HaveKey(keyID);\n+        if (keystore.HaveKey(keyID))\n+            return MINE_SPENDABLE;\n+        if (keystore.HaveWatchOnly(keyID))\n+            return MINE_WATCH_ONLY;\n+        break;\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        return keystore.HaveKey(keyID);\n+        if (keystore.HaveKey(keyID))\n+            return MINE_SPENDABLE;\n+        if (keystore.HaveWatchOnly(keyID))\n+            return MINE_WATCH_ONLY;\n+        break;\n     case TX_SCRIPTHASH:\n     {\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n-        if (!keystore.GetCScript(CScriptID(uint160(vSolutions[0])), subscript))\n-            return false;\n-        return IsMine(keystore, subscript);\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            isminetype ret = IsMine(keystore, subscript);\n+            if (ret)\n+                return ret;\n+        }\n+        if (keystore.HaveWatchOnly(scriptID))\n+            return MINE_WATCH_ONLY;\n+        break;\n     }\n     case TX_MULTISIG:\n     {\n@@ -1495,10 +1516,15 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         // them) enable spend-out-from-under-you attacks, especially\n         // in shared-wallet situations.\n         vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n-        return HaveKeys(keys, keystore) == keys.size();\n+        if (HaveKeys(keys, keystore) == keys.size())\n+            return MINE_SPENDABLE;\n+        break;\n     }\n     }\n-    return false;\n+\n+    if (keystore.HaveWatchOnly(scriptPubKey.GetID()))\n+        return MINE_WATCH_ONLY;\n+    return MINE_NO;\n }\n \n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)"
      },
      {
        "sha": "1db758094eaa63562bc787febbffb320ae1d3bbe",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -194,6 +194,14 @@ enum\n     SCRIPT_VERIFY_NULLDUMMY = (1U << 4), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n };\n \n+/** IsMine() return codes */\n+enum isminetype\n+{\n+    MINE_NO = 0,\n+    MINE_WATCH_ONLY = 1,\n+    MINE_SPENDABLE = 2,\n+};\n+\n // Mandatory script verification flags that all new blocks must comply with for\n // them to be valid. (but old blocks may not comply with) Currently just P2SH,\n // but in the future other flags may be added, such as a soft-fork to enforce\n@@ -801,8 +809,8 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n-bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-bool IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);"
      },
      {
        "sha": "3887efbd0d98f33456d65875c389f2cb9eca44b7",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -46,7 +46,7 @@ static void add_coin(int64_t nValue, int nAge = 6*24, bool fIsFromMe = false, in\n         wtx->fDebitCached = true;\n         wtx->nDebitCached = 1;\n     }\n-    COutput output(wtx, nInput, nAge);\n+    COutput output(wtx, nInput, nAge, true);\n     vCoins.push_back(output);\n }\n "
      },
      {
        "sha": "3d679f4c564ee4a597ef5047cad80b33462bc750",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 8,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -145,6 +145,22 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return CCryptoKeyStore::AddCScript(redeemScript);\n }\n \n+bool CWallet::AddWatchOnly(const CTxDestination &dest)\n+{\n+    if (!CCryptoKeyStore::AddWatchOnly(dest))\n+        return false;\n+    nTimeFirstKey = 1; // No birthday information for watch-only keys.\n+    if (!fFileBacked)\n+        return true;\n+    return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n+}\n+\n+bool CWallet::LoadWatchOnly(const CTxDestination &dest)\n+{\n+    LogPrintf(\"Loaded %s!\\n\", CBitcoinAddress(dest).ToString().c_str());\n+    return CCryptoKeyStore::AddWatchOnly(dest);\n+}\n+\n bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n {\n     CCrypter crypter;\n@@ -680,7 +696,7 @@ void CWallet::EraseFromWallet(const uint256 &hash)\n }\n \n \n-bool CWallet::IsMine(const CTxIn &txin) const\n+isminetype CWallet::IsMine(const CTxIn &txin) const\n {\n     {\n         LOCK(cs_wallet);\n@@ -689,11 +705,10 @@ bool CWallet::IsMine(const CTxIn &txin) const\n         {\n             const CWalletTx& prev = (*mi).second;\n             if (txin.prevout.n < prev.vout.size())\n-                if (IsMine(prev.vout[txin.prevout.n]))\n-                    return true;\n+                return IsMine(prev.vout[txin.prevout.n]);\n         }\n     }\n-    return false;\n+    return MINE_NO;\n }\n \n int64_t CWallet::GetDebit(const CTxIn &txin) const\n@@ -1051,7 +1066,7 @@ int64_t CWallet::GetImmatureBalance() const\n     return nTotal;\n }\n \n-// populate vCoins with vector of spendable COutputs\n+// populate vCoins with vector of available COutputs.\n void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl) const\n {\n     vCoins.clear();\n@@ -1077,10 +1092,11 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 continue;\n \n             for (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n-                if (!(IsSpent(wtxid, i)) && IsMine(pcoin->vout[i]) &&\n+                isminetype mine = IsMine(pcoin->vout[i]);\n+                if (!(IsSpent(wtxid, i)) && mine != MINE_NO &&\n                     !IsLockedCoin((*it).first, i) && pcoin->vout[i].nValue > 0 &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected((*it).first, i)))\n-                        vCoins.push_back(COutput(pcoin, i, nDepth));\n+                        vCoins.push_back(COutput(pcoin, i, nDepth, mine & MINE_SPENDABLE));\n             }\n         }\n     }\n@@ -1147,8 +1163,11 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n-    BOOST_FOREACH(COutput output, vCoins)\n+    BOOST_FOREACH(const COutput &output, vCoins)\n     {\n+        if (!output.fSpendable)\n+            continue;\n+\n         const CWalletTx *pcoin = output.tx;\n \n         if (output.nDepth < (pcoin->IsFromMe() ? nConfMine : nConfTheirs))"
      },
      {
        "sha": "ff6af3a6a8df239903905eb61aa0bdb2765c3971",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -226,6 +226,11 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     /// Look up a destination data tuple in the store, return true if found false otherwise\n     bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n \n+    // Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnly(const CTxDestination &dest);\n+    // Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadWatchOnly(const CTxDestination &dest);\n+\n     bool Unlock(const SecureString& strWalletPassphrase);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n@@ -279,9 +284,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n-    bool IsMine(const CTxIn& txin) const;\n+    isminetype IsMine(const CTxIn& txin) const;\n     int64_t GetDebit(const CTxIn& txin) const;\n-    bool IsMine(const CTxOut& txout) const\n+    isminetype IsMine(const CTxOut& txout) const\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n@@ -722,10 +727,11 @@ class COutput\n     const CWalletTx *tx;\n     int i;\n     int nDepth;\n+    bool fSpendable;\n \n-    COutput(const CWalletTx *txIn, int iIn, int nDepthIn)\n+    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn;\n+        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n     }\n \n     std::string ToString() const"
      },
      {
        "sha": "9338d57097e5d06d0202a3beff9d5c8d1ff76412",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -112,6 +112,12 @@ bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n     return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n }\n \n+bool CWalletDB::WriteWatchOnly(const CTxDestination &dest)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::make_pair(std::string(\"watch\"), CBitcoinAddress(dest).ToString()), '1');\n+}\n+\n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n     nWalletDBUpdated++;\n@@ -404,6 +410,19 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                     wss.fAnyUnordered = true;\n             }\n         }\n+        else if (strType == \"watch\")\n+        {\n+            std::string strAddress;\n+            ssKey >> strAddress;\n+            char fYes;\n+            ssValue >> fYes;\n+            if (fYes == '1')\n+                pwallet->LoadWatchOnly(CBitcoinAddress(strAddress).Get());\n+\n+            // Watch-only addresses have no birthday information for now,\n+            // so set the wallet birthday to the beginning of time.\n+            pwallet->nTimeFirstKey = 1;\n+        }\n         else if (strType == \"key\" || strType == \"wkey\")\n         {\n             CPubKey vchPubKey;"
      },
      {
        "sha": "3a6cb152a1bd95a6d42021ec1e7fa66c715d7a09",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8988460a2865b99ee96da6799d37ac6ccb79d4d/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"db.h\"\n #include \"key.h\"\n+#include \"keystore.h\"\n \n #include <list>\n #include <stdint.h>\n@@ -93,6 +94,8 @@ class CWalletDB : public CDB\n \n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n+    bool WriteWatchOnly(const CTxDestination &dest);\n+\n     bool WriteBestBlock(const CBlockLocator& locator);\n     bool ReadBestBlock(CBlockLocator& locator);\n "
      }
    ]
  },
  {
    "sha": "2935b211033610d7ef0deef9bf1b344a5bac029f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTM1YjIxMTAzMzYxMGQ3ZWYwZGVlZjliZjFiMzQ0YTViYWMwMjlm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-10T14:27:53Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:38Z"
      },
      "message": "qt: Hide unspendable outputs in coin control",
      "tree": {
        "sha": "c3bb65c391305f127ac89c970eafc9de93ae9d52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3bb65c391305f127ac89c970eafc9de93ae9d52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2935b211033610d7ef0deef9bf1b344a5bac029f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b211033610d7ef0deef9bf1b344a5bac029f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2935b211033610d7ef0deef9bf1b344a5bac029f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b211033610d7ef0deef9bf1b344a5bac029f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8988460a2865b99ee96da6799d37ac6ccb79d4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8988460a2865b99ee96da6799d37ac6ccb79d4d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "098d39e8a7205e9db818d0481cf1217919466b4f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2935b211033610d7ef0deef9bf1b344a5bac029f/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2935b211033610d7ef0deef9bf1b344a5bac029f/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=2935b211033610d7ef0deef9bf1b344a5bac029f",
        "patch": "@@ -60,7 +60,8 @@ qint64 WalletModel::getBalance(const CCoinControl *coinControl) const\n         std::vector<COutput> vCoins;\n         wallet->AvailableCoins(vCoins, true, coinControl);\n         BOOST_FOREACH(const COutput& out, vCoins)\n-            nBalance += out.tx->vout[out.i].nValue;\n+            if(out.fSpendable)\n+                nBalance += out.tx->vout[out.i].nValue;\n \n         return nBalance;\n     }\n@@ -585,7 +586,8 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         }\n \n         CTxDestination address;\n-        if(!ExtractDestination(cout.tx->vout[cout.i].scriptPubKey, address)) continue;\n+        if(!out.fSpendable || !ExtractDestination(cout.tx->vout[cout.i].scriptPubKey, address))\n+            continue;\n         mapCoins[CBitcoinAddress(address).ToString().c_str()].push_back(out);\n     }\n }"
      },
      {
        "sha": "40ace9c40b71a706189b94040b27bde40b6ec121",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2935b211033610d7ef0deef9bf1b344a5bac029f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2935b211033610d7ef0deef9bf1b344a5bac029f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=2935b211033610d7ef0deef9bf1b344a5bac029f",
        "patch": "@@ -1259,6 +1259,8 @@ bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsign\n     {\n         BOOST_FOREACH(const COutput& out, vCoins)\n         {\n+            if(!out.fSpendable)\n+                continue;\n             nValueRet += out.tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n         }"
      }
    ]
  },
  {
    "sha": "ffd40da361639faeef405c7e4a504a340d77aa5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmQ0MGRhMzYxNjM5ZmFlZWY0MDVjN2U0YTUwNGEzNDBkNzdhYTVi",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-03-29T04:15:28Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:38Z"
      },
      "message": "Watchonly balances are shown separately in gui.",
      "tree": {
        "sha": "66131441451335db0f91a7d19cfddb9665aa82f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66131441451335db0f91a7d19cfddb9665aa82f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffd40da361639faeef405c7e4a504a340d77aa5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffd40da361639faeef405c7e4a504a340d77aa5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffd40da361639faeef405c7e4a504a340d77aa5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffd40da361639faeef405c7e4a504a340d77aa5b/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2935b211033610d7ef0deef9bf1b344a5bac029f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b211033610d7ef0deef9bf1b344a5bac029f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2935b211033610d7ef0deef9bf1b344a5bac029f"
      }
    ],
    "stats": {
      "total": 838,
      "additions": 601,
      "deletions": 237
    },
    "files": [
      {
        "sha": "8784da5f3e6f7471f85040d9fad21c52861a9056",
        "filename": "src/qt/forms/overviewpage.ui",
        "status": "modified",
        "additions": 349,
        "deletions": 184,
        "changes": 533,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/forms/overviewpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/forms/overviewpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/overviewpage.ui?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -6,7 +6,7 @@\n    <rect>\n     <x>0</x>\n     <y>0</y>\n-    <width>573</width>\n+    <width>596</width>\n     <height>342</height>\n    </rect>\n   </property>\n@@ -46,204 +46,369 @@\n           <item>\n            <layout class=\"QHBoxLayout\" name=\"horizontalLayout_4\">\n             <item>\n-             <widget class=\"QLabel\" name=\"label_5\">\n-              <property name=\"font\">\n-               <font>\n-                <weight>75</weight>\n-                <bold>true</bold>\n-               </font>\n-              </property>\n-              <property name=\"text\">\n-               <string>Wallet</string>\n-              </property>\n-             </widget>\n-            </item>\n-            <item>\n-             <widget class=\"QLabel\" name=\"labelWalletStatus\">\n-              <property name=\"toolTip\">\n-               <string>The displayed information may be out of date. Your wallet automatically synchronizes with the Bitcoin network after a connection is established, but this process has not completed yet.</string>\n-              </property>\n-              <property name=\"styleSheet\">\n-               <string notr=\"true\">QLabel { color: red; }</string>\n-              </property>\n-              <property name=\"text\">\n-               <string notr=\"true\">(out of sync)</string>\n-              </property>\n-              <property name=\"alignment\">\n-               <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>\n-              </property>\n-             </widget>\n+             <layout class=\"QHBoxLayout\" name=\"horizontalLayout_7\">\n+              <item>\n+               <widget class=\"QLabel\" name=\"label_5\">\n+                <property name=\"font\">\n+                 <font>\n+                  <weight>75</weight>\n+                  <bold>true</bold>\n+                 </font>\n+                </property>\n+                <property name=\"text\">\n+                 <string>Wallet</string>\n+                </property>\n+               </widget>\n+              </item>\n+              <item>\n+               <widget class=\"QLabel\" name=\"labelWalletStatus\">\n+                <property name=\"toolTip\">\n+                 <string>The displayed information may be out of date. Your wallet automatically synchronizes with the Bitcoin network after a connection is established, but this process has not completed yet.</string>\n+                </property>\n+                <property name=\"styleSheet\">\n+                 <string notr=\"true\">QLabel { color: red; }</string>\n+                </property>\n+                <property name=\"text\">\n+                 <string notr=\"true\">(out of sync)</string>\n+                </property>\n+                <property name=\"alignment\">\n+                 <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>\n+                </property>\n+               </widget>\n+              </item>\n+             </layout>\n             </item>\n             <item>\n-             <spacer name=\"horizontalSpacer_2\">\n-              <property name=\"orientation\">\n-               <enum>Qt::Horizontal</enum>\n-              </property>\n-              <property name=\"sizeHint\" stdset=\"0\">\n-               <size>\n-                <width>40</width>\n-                <height>20</height>\n-               </size>\n-              </property>\n-             </spacer>\n+             <layout class=\"QHBoxLayout\" name=\"horizontalLayout_8\">\n+              <item>\n+               <widget class=\"QLabel\" name=\"labelWatchonly\">\n+                <property name=\"font\">\n+                 <font>\n+                  <weight>75</weight>\n+                  <bold>true</bold>\n+                 </font>\n+                </property>\n+                <property name=\"text\">\n+                 <string>Watchonly:</string>\n+                </property>\n+                <property name=\"alignment\">\n+                 <set>Qt::AlignCenter</set>\n+                </property>\n+               </widget>\n+              </item>\n+              <item>\n+               <spacer name=\"horizontalSpacer_2\">\n+                <property name=\"orientation\">\n+                 <enum>Qt::Horizontal</enum>\n+                </property>\n+                <property name=\"sizeType\">\n+                 <enum>QSizePolicy::Preferred</enum>\n+                </property>\n+                <property name=\"sizeHint\" stdset=\"0\">\n+                 <size>\n+                  <width>40</width>\n+                  <height>20</height>\n+                 </size>\n+                </property>\n+               </spacer>\n+              </item>\n+             </layout>\n             </item>\n            </layout>\n           </item>\n           <item>\n-          <layout class=\"QHBoxLayout\" name=\"horizontalLayout_3\">\n-           <item>\n-           <layout class=\"QFormLayout\" name=\"formLayout_2\">\n-            <property name=\"fieldGrowthPolicy\">\n-             <enum>QFormLayout::AllNonFixedFieldsGrow</enum>\n-            </property>\n-            <property name=\"horizontalSpacing\">\n-             <number>12</number>\n-            </property>\n-            <property name=\"verticalSpacing\">\n-             <number>12</number>\n-            </property>\n-            <item row=\"0\" column=\"0\">\n-             <widget class=\"QLabel\" name=\"label\">\n-              <property name=\"text\">\n-               <string>Available:</string>\n-              </property>\n-             </widget>\n-            </item>\n-            <item row=\"0\" column=\"1\">\n-             <widget class=\"QLabel\" name=\"labelBalance\">\n-              <property name=\"font\">\n-               <font>\n-                <weight>75</weight>\n-                <bold>true</bold>\n-               </font>\n-              </property>\n-              <property name=\"cursor\">\n-               <cursorShape>IBeamCursor</cursorShape>\n-              </property>\n-              <property name=\"toolTip\">\n-               <string>Your current spendable balance</string>\n-              </property>\n-              <property name=\"text\">\n-               <string notr=\"true\">0 BTC</string>\n-              </property>\n-              <property name=\"alignment\">\n-               <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n-              </property>\n-              <property name=\"textInteractionFlags\">\n-               <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n-              </property>\n-             </widget>\n-            </item>\n-            <item row=\"1\" column=\"0\">\n-             <widget class=\"QLabel\" name=\"label_3\">\n-              <property name=\"text\">\n-               <string>Pending:</string>\n-              </property>\n-             </widget>\n-            </item>\n-            <item row=\"1\" column=\"1\">\n-             <widget class=\"QLabel\" name=\"labelUnconfirmed\">\n-              <property name=\"font\">\n-               <font>\n-                <weight>75</weight>\n-                <bold>true</bold>\n-               </font>\n-              </property>\n-              <property name=\"cursor\">\n-               <cursorShape>IBeamCursor</cursorShape>\n-              </property>\n-              <property name=\"toolTip\">\n-               <string>Total of transactions that have yet to be confirmed, and do not yet count toward the spendable balance</string>\n-              </property>\n-              <property name=\"text\">\n-               <string notr=\"true\">0 BTC</string>\n-              </property>\n-              <property name=\"alignment\">\n-               <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n-              </property>\n-              <property name=\"textInteractionFlags\">\n-               <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n-              </property>\n-             </widget>\n-            </item>\n-            <item row=\"2\" column=\"0\">\n-             <widget class=\"QLabel\" name=\"labelImmatureText\">\n-              <property name=\"text\">\n-               <string>Immature:</string>\n-              </property>\n-             </widget>\n-            </item>\n-            <item row=\"2\" column=\"1\">\n-             <widget class=\"QLabel\" name=\"labelImmature\">\n-              <property name=\"font\">\n-               <font>\n-                <weight>75</weight>\n-                <bold>true</bold>\n-               </font>\n-              </property>\n-              <property name=\"toolTip\">\n-               <string>Mined balance that has not yet matured</string>\n-              </property>\n-              <property name=\"text\">\n-               <string notr=\"true\">0 BTC</string>\n-              </property>\n-              <property name=\"alignment\">\n-               <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n-              </property>\n-              <property name=\"textInteractionFlags\">\n-               <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n-              </property>\n-             </widget>\n-            </item>\n-            <item row=\"4\" column=\"0\">\n-             <widget class=\"QLabel\" name=\"labelTotalText\">\n-              <property name=\"text\">\n-               <string>Total:</string>\n-              </property>\n-             </widget>\n-            </item>\n-            <item row=\"4\" column=\"1\">\n-             <widget class=\"QLabel\" name=\"labelTotal\">\n-              <property name=\"font\">\n-               <font>\n-                <weight>75</weight>\n-                <bold>true</bold>\n-               </font>\n-              </property>\n-              <property name=\"cursor\">\n-               <cursorShape>IBeamCursor</cursorShape>\n-              </property>\n-              <property name=\"toolTip\">\n-               <string>Your current total balance</string>\n-              </property>\n-              <property name=\"text\">\n-               <string notr=\"true\">0 BTC</string>\n-              </property>\n-              <property name=\"alignment\">\n-               <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n-              </property>\n-              <property name=\"textInteractionFlags\">\n-               <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n-              </property>\n-             </widget>\n+           <layout class=\"QHBoxLayout\" name=\"horizontalLayout_3\">\n+            <item>\n+             <layout class=\"QFormLayout\" name=\"formLayout_2\">\n+              <property name=\"fieldGrowthPolicy\">\n+               <enum>QFormLayout::AllNonFixedFieldsGrow</enum>\n+              </property>\n+              <property name=\"horizontalSpacing\">\n+               <number>12</number>\n+              </property>\n+              <property name=\"verticalSpacing\">\n+               <number>12</number>\n+              </property>\n+              <item row=\"0\" column=\"0\">\n+               <widget class=\"QLabel\" name=\"label\">\n+                <property name=\"text\">\n+                 <string>Available:</string>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"0\" column=\"1\">\n+               <widget class=\"QLabel\" name=\"labelBalance\">\n+                <property name=\"font\">\n+                 <font>\n+                  <weight>75</weight>\n+                  <bold>true</bold>\n+                 </font>\n+                </property>\n+                <property name=\"cursor\">\n+                 <cursorShape>IBeamCursor</cursorShape>\n+                </property>\n+                <property name=\"toolTip\">\n+                 <string>Your current spendable balance</string>\n+                </property>\n+                <property name=\"text\">\n+                 <string notr=\"true\">0 BTC</string>\n+                </property>\n+                <property name=\"alignment\">\n+                 <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+                </property>\n+                <property name=\"textInteractionFlags\">\n+                 <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"1\" column=\"0\">\n+               <widget class=\"QLabel\" name=\"label_3\">\n+                <property name=\"text\">\n+                 <string>Pending:</string>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"1\" column=\"1\">\n+               <widget class=\"QLabel\" name=\"labelUnconfirmed\">\n+                <property name=\"font\">\n+                 <font>\n+                  <weight>75</weight>\n+                  <bold>true</bold>\n+                 </font>\n+                </property>\n+                <property name=\"cursor\">\n+                 <cursorShape>IBeamCursor</cursorShape>\n+                </property>\n+                <property name=\"toolTip\">\n+                 <string>Total of transactions that have yet to be confirmed, and do not yet count toward the spendable balance</string>\n+                </property>\n+                <property name=\"text\">\n+                 <string notr=\"true\">0 BTC</string>\n+                </property>\n+                <property name=\"alignment\">\n+                 <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+                </property>\n+                <property name=\"textInteractionFlags\">\n+                 <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"2\" column=\"0\">\n+               <widget class=\"QLabel\" name=\"labelImmatureText\">\n+                <property name=\"text\">\n+                 <string>Immature:</string>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"2\" column=\"1\">\n+               <widget class=\"QLabel\" name=\"labelImmature\">\n+                <property name=\"font\">\n+                 <font>\n+                  <weight>75</weight>\n+                  <bold>true</bold>\n+                 </font>\n+                </property>\n+                <property name=\"cursor\">\n+                 <cursorShape>IBeamCursor</cursorShape>\n+                </property>\n+                <property name=\"toolTip\">\n+                 <string>Mined balance that has not yet matured</string>\n+                </property>\n+                <property name=\"text\">\n+                 <string notr=\"true\">0 BTC</string>\n+                </property>\n+                <property name=\"alignment\">\n+                 <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+                </property>\n+                <property name=\"textInteractionFlags\">\n+                 <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"3\" column=\"0\" colspan=\"2\">\n+               <widget class=\"Line\" name=\"line\">\n+                <property name=\"orientation\">\n+                 <enum>Qt::Horizontal</enum>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"4\" column=\"0\">\n+               <widget class=\"QLabel\" name=\"labelTotalText\">\n+                <property name=\"text\">\n+                 <string>Total:</string>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"4\" column=\"1\">\n+               <widget class=\"QLabel\" name=\"labelTotal\">\n+                <property name=\"font\">\n+                 <font>\n+                  <weight>75</weight>\n+                  <bold>true</bold>\n+                 </font>\n+                </property>\n+                <property name=\"cursor\">\n+                 <cursorShape>IBeamCursor</cursorShape>\n+                </property>\n+                <property name=\"toolTip\">\n+                 <string>Your current total balance</string>\n+                </property>\n+                <property name=\"text\">\n+                 <string notr=\"true\">0 BTC</string>\n+                </property>\n+                <property name=\"alignment\">\n+                 <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+                </property>\n+                <property name=\"textInteractionFlags\">\n+                 <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+                </property>\n+               </widget>\n+              </item>\n+             </layout>\n             </item>\n-            <item row=\"3\" column=\"0\" colspan=\"2\">\n-             <widget class=\"Line\" name=\"line\">\n-              <property name=\"orientation\">\n-               <enum>Qt::Horizontal</enum>\n-              </property>\n-             </widget>\n+            <item>\n+             <layout class=\"QFormLayout\" name=\"formLayout\">\n+              <property name=\"fieldGrowthPolicy\">\n+               <enum>QFormLayout::AllNonFixedFieldsGrow</enum>\n+              </property>\n+              <property name=\"horizontalSpacing\">\n+               <number>12</number>\n+              </property>\n+              <property name=\"verticalSpacing\">\n+               <number>12</number>\n+              </property>\n+              <item row=\"0\" column=\"1\">\n+               <widget class=\"QLabel\" name=\"labelWatchAvailable\">\n+                <property name=\"font\">\n+                 <font>\n+                  <weight>75</weight>\n+                  <bold>true</bold>\n+                 </font>\n+                </property>\n+                <property name=\"cursor\">\n+                 <cursorShape>IBeamCursor</cursorShape>\n+                </property>\n+                <property name=\"toolTip\">\n+                 <string>Your current balance in watchonly addresses</string>\n+                </property>\n+                <property name=\"text\">\n+                 <string>0 BTC</string>\n+                </property>\n+                <property name=\"alignment\">\n+                 <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+                </property>\n+                <property name=\"textInteractionFlags\">\n+                 <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"1\" column=\"1\">\n+               <widget class=\"QLabel\" name=\"labelWatchPending\">\n+                <property name=\"font\">\n+                 <font>\n+                  <weight>75</weight>\n+                  <bold>true</bold>\n+                 </font>\n+                </property>\n+                <property name=\"cursor\">\n+                 <cursorShape>IBeamCursor</cursorShape>\n+                </property>\n+                <property name=\"toolTip\">\n+                 <string>Unconfirmed transactions to watchonly addresses</string>\n+                </property>\n+                <property name=\"text\">\n+                 <string>0 BTC</string>\n+                </property>\n+                <property name=\"alignment\">\n+                 <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+                </property>\n+                <property name=\"textInteractionFlags\">\n+                 <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"2\" column=\"1\">\n+               <widget class=\"QLabel\" name=\"labelWatchImmature\">\n+                <property name=\"font\">\n+                 <font>\n+                  <weight>75</weight>\n+                  <bold>true</bold>\n+                 </font>\n+                </property>\n+                <property name=\"cursor\">\n+                 <cursorShape>IBeamCursor</cursorShape>\n+                </property>\n+                <property name=\"toolTip\">\n+                 <string>Mined balance in watchonly addresses that has not yet matured</string>\n+                </property>\n+                <property name=\"text\">\n+                 <string>0 BTC</string>\n+                </property>\n+                <property name=\"alignment\">\n+                 <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+                </property>\n+                <property name=\"textInteractionFlags\">\n+                 <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"3\" column=\"0\" colspan=\"2\">\n+               <widget class=\"Line\" name=\"lineWatchBalance\">\n+                <property name=\"sizePolicy\">\n+                 <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Fixed\">\n+                  <horstretch>0</horstretch>\n+                  <verstretch>0</verstretch>\n+                 </sizepolicy>\n+                </property>\n+                <property name=\"minimumSize\">\n+                 <size>\n+                  <width>140</width>\n+                  <height>0</height>\n+                 </size>\n+                </property>\n+                <property name=\"orientation\">\n+                 <enum>Qt::Horizontal</enum>\n+                </property>\n+               </widget>\n+              </item>\n+              <item row=\"4\" column=\"1\">\n+               <widget class=\"QLabel\" name=\"labelWatchTotal\">\n+                <property name=\"font\">\n+                 <font>\n+                  <weight>75</weight>\n+                  <bold>true</bold>\n+                 </font>\n+                </property>\n+                <property name=\"cursor\">\n+                 <cursorShape>IBeamCursor</cursorShape>\n+                </property>\n+                <property name=\"toolTip\">\n+                 <string>Current total balance in watchonly addresses</string>\n+                </property>\n+                <property name=\"text\">\n+                 <string>0 BTC</string>\n+                </property>\n+                <property name=\"alignment\">\n+                 <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+                </property>\n+                <property name=\"textInteractionFlags\">\n+                 <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+                </property>\n+               </widget>\n+              </item>\n+             </layout>\n             </item>\n-           </layout>\n-          </item>\n             <item>\n              <spacer name=\"horizontalSpacer_3\">\n               <property name=\"orientation\">\n                <enum>Qt::Horizontal</enum>\n               </property>\n+              <property name=\"sizeType\">\n+               <enum>QSizePolicy::Expanding</enum>\n+              </property>\n               <property name=\"sizeHint\" stdset=\"0\">\n                <size>\n-                <width>40</width>\n+                <width>20</width>\n                 <height>20</height>\n                </size>\n               </property>"
      },
      {
        "sha": "1278f368cff0cb583c793900931012cd6e2aba4f",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 6,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -103,6 +103,9 @@ OverviewPage::OverviewPage(QWidget *parent) :\n     currentBalance(-1),\n     currentUnconfirmedBalance(-1),\n     currentImmatureBalance(-1),\n+    currentWatchOnlyBalance(-1),\n+    currentWatchUnconfBalance(-1),\n+    currentWatchImmatureBalance(-1),\n     txdelegate(new TxViewDelegate()),\n     filter(0)\n {\n@@ -135,22 +138,39 @@ OverviewPage::~OverviewPage()\n     delete ui;\n }\n \n-void OverviewPage::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance)\n+void OverviewPage::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance, qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance)\n {\n     int unit = walletModel->getOptionsModel()->getDisplayUnit();\n     currentBalance = balance;\n     currentUnconfirmedBalance = unconfirmedBalance;\n     currentImmatureBalance = immatureBalance;\n+    currentWatchOnlyBalance = watchOnlyBalance;\n+    currentWatchUnconfBalance = watchUnconfBalance;\n+    currentWatchImmatureBalance = watchImmatureBalance;\n     ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balance));\n     ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, unconfirmedBalance));\n     ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, immatureBalance));\n     ui->labelTotal->setText(BitcoinUnits::formatWithUnit(unit, balance + unconfirmedBalance + immatureBalance));\n+    ui->labelWatchAvailable->setText(BitcoinUnits::formatWithUnit(unit, watchOnlyBalance));\n+    ui->labelWatchPending->setText(BitcoinUnits::formatWithUnit(unit, watchUnconfBalance));\n+    ui->labelWatchImmature->setText(BitcoinUnits::formatWithUnit(unit, watchImmatureBalance));\n+    ui->labelWatchTotal->setText(BitcoinUnits::formatWithUnit(unit, watchOnlyBalance + watchUnconfBalance + watchImmatureBalance));\n \n     // only show immature (newly mined) balance if it's non-zero, so as not to complicate things\n     // for the non-mining users\n     bool showImmature = immatureBalance != 0;\n-    ui->labelImmature->setVisible(showImmature);\n-    ui->labelImmatureText->setVisible(showImmature);\n+    bool showWatchOnlyImmature = watchImmatureBalance != 0;\n+    bool showWatchOnly = (watchOnlyBalance != 0 || watchUnconfBalance != 0 || showWatchOnlyImmature);\n+\n+    // for symmetry reasons also show immature label when the watchonly one is shown\n+    ui->labelImmature->setVisible(showImmature || showWatchOnlyImmature);\n+    ui->labelImmatureText->setVisible(showImmature || showWatchOnlyImmature);\n+    ui->labelWatchonly->setVisible(showWatchOnly);              // show Watchonly label\n+    ui->lineWatchBalance->setVisible(showWatchOnly);            // show watchonly balance separator line\n+    ui->labelWatchAvailable->setVisible(showWatchOnly);         // show watchonly available balance\n+    ui->labelWatchImmature->setVisible(showWatchOnlyImmature);  // show watchonly immature balance\n+    ui->labelWatchPending->setVisible(showWatchOnly);           // show watchonly pending balance\n+    ui->labelWatchTotal->setVisible(showWatchOnly);             // show watchonly total balance\n }\n \n void OverviewPage::setClientModel(ClientModel *model)\n@@ -182,8 +202,9 @@ void OverviewPage::setWalletModel(WalletModel *model)\n         ui->listTransactions->setModelColumn(TransactionTableModel::ToAddress);\n \n         // Keep up to date with wallet\n-        setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64)));\n+        setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(),\n+                   model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n+        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64, qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64, qint64, qint64, qint64)));\n \n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n     }\n@@ -197,7 +218,8 @@ void OverviewPage::updateDisplayUnit()\n     if(walletModel && walletModel->getOptionsModel())\n     {\n         if(currentBalance != -1)\n-            setBalance(currentBalance, currentUnconfirmedBalance, currentImmatureBalance);\n+            setBalance(currentBalance, currentUnconfirmedBalance, currentImmatureBalance,\n+                       currentWatchOnlyBalance, currentWatchUnconfBalance, currentWatchImmatureBalance);\n \n         // Update txdelegate->unit with the current unit\n         txdelegate->unit = walletModel->getOptionsModel()->getDisplayUnit();"
      },
      {
        "sha": "fe00106770edafa79a28e3ab472d749560cffbc6",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -34,7 +34,8 @@ class OverviewPage : public QWidget\n     void showOutOfSyncWarning(bool fShow);\n \n public slots:\n-    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance);\n+    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n+                    qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n \n signals:\n     void transactionClicked(const QModelIndex &index);\n@@ -46,6 +47,9 @@ public slots:\n     qint64 currentBalance;\n     qint64 currentUnconfirmedBalance;\n     qint64 currentImmatureBalance;\n+    qint64 currentWatchOnlyBalance;\n+    qint64 currentWatchUnconfBalance;\n+    qint64 currentWatchImmatureBalance;\n \n     TxViewDelegate *txdelegate;\n     TransactionFilterProxy *filter;"
      },
      {
        "sha": "6f10ed5b0b05744a7cbea1b764bc00e5552ba52a",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -90,8 +90,9 @@ void SendCoinsDialog::setModel(WalletModel *model)\n             }\n         }\n \n-        setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64)));\n+        setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(),\n+                   model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n+        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64, qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64, qint64, qint64, qint64)));\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n         // Coin Control\n@@ -383,10 +384,14 @@ bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)\n     return true;\n }\n \n-void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance)\n+void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance, \n+                                 qint64 watchBalance, qint64 watchUnconfirmedBalance, qint64 watchImmatureBalance)\n {\n     Q_UNUSED(unconfirmedBalance);\n     Q_UNUSED(immatureBalance);\n+    Q_UNUSED(watchBalance);\n+    Q_UNUSED(watchUnconfirmedBalance);\n+    Q_UNUSED(watchImmatureBalance);\n \n     if(model && model->getOptionsModel())\n     {\n@@ -396,7 +401,7 @@ void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance, qint\n \n void SendCoinsDialog::updateDisplayUnit()\n {\n-    setBalance(model->getBalance(), 0, 0);\n+    setBalance(model->getBalance(), 0, 0, 0, 0, 0);\n }\n \n void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg)"
      },
      {
        "sha": "6cdf4a00c8dd1ae31caf027679ee5cf68b16f745",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -47,7 +47,8 @@ public slots:\n     void accept();\n     SendCoinsEntry *addEntry();\n     void updateTabsAndLabels();\n-    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance);\n+    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n+                    qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n \n private:\n     Ui::SendCoinsDialog *ui;"
      },
      {
        "sha": "76dc47318db583c87790d722e7ea1d02d491d455",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 19,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -89,19 +89,27 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         if (nNet > 0)\n         {\n             // Credit\n-            if (CBitcoinAddress(rec->address).IsValid())\n+            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             {\n-                CTxDestination address = CBitcoinAddress(rec->address).Get();\n-                if (wallet->mapAddressBook.count(address))\n+                if (wallet->IsMine(txout))\n                 {\n-                    strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"unknown\") + \"<br>\";\n-                    strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n-                    strHTML += GUIUtil::HtmlEscape(rec->address);\n-                    if (!wallet->mapAddressBook[address].name.empty())\n-                        strHTML += \" (\" + tr(\"own address\") + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \")\";\n-                    else\n-                        strHTML += \" (\" + tr(\"own address\") + \")\";\n-                    strHTML += \"<br>\";\n+                    if (CBitcoinAddress(rec->address).IsValid())\n+                    {\n+                        CTxDestination address = CBitcoinAddress(rec->address).Get();\n+                        if (wallet->mapAddressBook.count(address))\n+                        {\n+                            strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"unknown\") + \"<br>\";\n+                            strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n+                            strHTML += GUIUtil::HtmlEscape(rec->address);\n+                            std::string addressOwned = wallet->IsMine(txout) == MINE_SPENDABLE ? \"own address\" : \"watch-only\";\n+                            if (!wallet->mapAddressBook[address].name.empty())\n+                                strHTML += \" (\" + tr(addressOwned.c_str()) + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \")\";\n+                            else\n+                                strHTML += \" (\" + tr(addressOwned.c_str()) + \")\";\n+                            strHTML += \"<br>\";\n+                        }\n+                    }\n+                    break;\n                 }\n             }\n         }\n@@ -148,22 +156,33 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     }\n     else\n     {\n-        bool fAllFromMe = true;\n+        isminetype fAllFromMe = MINE_SPENDABLE;\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n-            fAllFromMe = fAllFromMe && wallet->IsMine(txin);\n+        {\n+            isminetype mine = wallet->IsMine(txin);\n+            if(fAllFromMe > mine) fAllFromMe = mine;\n+        }\n \n-        bool fAllToMe = true;\n+        isminetype fAllToMe = MINE_SPENDABLE;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-            fAllToMe = fAllToMe && wallet->IsMine(txout);\n+        {\n+            isminetype mine = wallet->IsMine(txout);\n+            if(fAllToMe > mine) fAllToMe = mine;\n+        }\n \n         if (fAllFromMe)\n         {\n+            if(fAllFromMe == MINE_WATCH_ONLY)\n+                strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"watch-only\") + \"<br>\";\n+\n             //\n             // Debit\n             //\n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             {\n-                if (wallet->IsMine(txout))\n+                // Ignore change\n+                isminetype toSelf = wallet->IsMine(txout);\n+                if ((toSelf == MINE_SPENDABLE) && (fAllFromMe == MINE_SPENDABLE))\n                     continue;\n \n                 if (!wtx.mapValue.count(\"to\") || wtx.mapValue[\"to\"].empty())\n@@ -176,20 +195,26 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                         if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].name.empty())\n                             strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \" \";\n                         strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n+                        if(toSelf == MINE_SPENDABLE)\n+                            strHTML += \" (own address)\";\n+                        else if(toSelf == MINE_WATCH_ONLY)\n+                            strHTML += \" (watch-only)\";\n                         strHTML += \"<br>\";\n                     }\n                 }\n \n                 strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -txout.nValue) + \"<br>\";\n+                if(toSelf)\n+                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, txout.nValue) + \"<br>\";\n             }\n \n             if (fAllToMe)\n             {\n                 // Payment to self\n                 int64_t nChange = wtx.GetChange();\n                 int64_t nValue = nCredit - nChange;\n-                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -nValue) + \"<br>\";\n-                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, nValue) + \"<br>\";\n+                strHTML += \"<b>\" + tr(\"Total debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -nValue) + \"<br>\";\n+                strHTML += \"<b>\" + tr(\"Total credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, nValue) + \"<br>\";\n             }\n \n             int64_t nTxFee = nDebit - wtx.GetValueOut();\n@@ -286,7 +311,8 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                         strHTML += QString::fromStdString(CBitcoinAddress(address).ToString());\n                     }\n                     strHTML = strHTML + \" \" + tr(\"Amount\") + \"=\" + BitcoinUnits::formatWithUnit(unit, vout.nValue);\n-                    strHTML = strHTML + \" IsMine=\" + (wallet->IsMine(vout) ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n+                    strHTML = strHTML + \" IsMine=\" + (wallet->IsMine(vout) & MINE_SPENDABLE ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n+                    strHTML = strHTML + \" IsWatchOnly=\" + (wallet->IsMine(vout) & MINE_WATCH_ONLY ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n                 }\n             }\n         }"
      },
      {
        "sha": "3d77d39893f5ed97c6d72cc924e27d7c518a42ff",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -45,7 +45,8 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         //\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n-            if(wallet->IsMine(txout))\n+            isminetype mine = wallet->IsMine(txout);\n+            if(mine)\n             {\n                 TransactionRecord sub(hash, nTime);\n                 CTxDestination address;\n@@ -75,13 +76,19 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     }\n     else\n     {\n-        bool fAllFromMe = true;\n+        isminetype fAllFromMe = MINE_SPENDABLE;\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n-            fAllFromMe = fAllFromMe && wallet->IsMine(txin);\n+        {\n+            isminetype mine = wallet->IsMine(txin);\n+            if(fAllFromMe > mine) fAllFromMe = mine;\n+        }\n \n-        bool fAllToMe = true;\n+        isminetype fAllToMe = MINE_SPENDABLE;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-            fAllToMe = fAllToMe && wallet->IsMine(txout);\n+        {\n+            isminetype mine = wallet->IsMine(txout);\n+            if(fAllToMe > mine) fAllToMe = mine;\n+        }\n \n         if (fAllFromMe && fAllToMe)\n         {"
      },
      {
        "sha": "7317c327665563d075ada1e7be6b2312bab295e5",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -79,6 +79,21 @@ qint64 WalletModel::getImmatureBalance() const\n     return wallet->GetImmatureBalance();\n }\n \n+qint64 WalletModel::getWatchBalance() const\n+{\n+    return wallet->GetWatchOnlyBalance();\n+}\n+\n+qint64 WalletModel::getWatchUnconfirmedBalance() const\n+{\n+    return wallet->GetUnconfirmedWatchOnlyBalance();\n+}\n+\n+qint64 WalletModel::getWatchImmatureBalance() const\n+{\n+    return wallet->GetImmatureWatchOnlyBalance();\n+}\n+\n int WalletModel::getNumTransactions() const\n {\n     int numTransactions = 0;\n@@ -127,13 +142,21 @@ void WalletModel::checkBalanceChanged()\n     qint64 newBalance = getBalance();\n     qint64 newUnconfirmedBalance = getUnconfirmedBalance();\n     qint64 newImmatureBalance = getImmatureBalance();\n+    qint64 newWatchOnlyBalance = getWatchBalance();\n+    qint64 newWatchUnconfBalance = getWatchUnconfirmedBalance();\n+    qint64 newWatchImmatureBalance = getWatchImmatureBalance();\n \n-    if(cachedBalance != newBalance || cachedUnconfirmedBalance != newUnconfirmedBalance || cachedImmatureBalance != newImmatureBalance)\n+    if(cachedBalance != newBalance || cachedUnconfirmedBalance != newUnconfirmedBalance || cachedImmatureBalance != newImmatureBalance ||\n+        cachedWatchOnlyBalance != newWatchOnlyBalance || cachedWatchUnconfBalance != newWatchUnconfBalance || cachedWatchImmatureBalance != newWatchImmatureBalance)\n     {\n         cachedBalance = newBalance;\n         cachedUnconfirmedBalance = newUnconfirmedBalance;\n         cachedImmatureBalance = newImmatureBalance;\n-        emit balanceChanged(newBalance, newUnconfirmedBalance, newImmatureBalance);\n+        cachedWatchOnlyBalance = newWatchOnlyBalance;\n+        cachedWatchUnconfBalance = newWatchUnconfBalance;\n+        cachedWatchImmatureBalance = newWatchImmatureBalance;\n+        emit balanceChanged(newBalance, newUnconfirmedBalance, newImmatureBalance,\n+                            newWatchOnlyBalance, newWatchUnconfBalance, newWatchImmatureBalance);\n     }\n }\n "
      },
      {
        "sha": "7ad54ff8e669deb4f5f19c18e271e26b24409e66",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -128,6 +128,9 @@ class WalletModel : public QObject\n     qint64 getBalance(const CCoinControl *coinControl = NULL) const;\n     qint64 getUnconfirmedBalance() const;\n     qint64 getImmatureBalance() const;\n+    qint64 getWatchBalance() const;\n+    qint64 getWatchUnconfirmedBalance() const;\n+    qint64 getWatchImmatureBalance() const;\n     int getNumTransactions() const;\n     EncryptionStatus getEncryptionStatus() const;\n \n@@ -206,6 +209,9 @@ class WalletModel : public QObject\n     qint64 cachedBalance;\n     qint64 cachedUnconfirmedBalance;\n     qint64 cachedImmatureBalance;\n+    qint64 cachedWatchOnlyBalance;\n+    qint64 cachedWatchUnconfBalance;\n+    qint64 cachedWatchImmatureBalance;\n     qint64 cachedNumTransactions;\n     EncryptionStatus cachedEncryptionStatus;\n     int cachedNumBlocks;\n@@ -218,7 +224,8 @@ class WalletModel : public QObject\n \n signals:\n     // Signal that balance in wallet changed\n-    void balanceChanged(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance);\n+    void balanceChanged(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n+                        qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n \n     // Number of transactions in wallet changed\n     void numTransactionsChanged(int count);"
      },
      {
        "sha": "98af4695d62e0c10df5fcc8bc5daba31ddf61026",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -158,12 +158,14 @@ Value importaddress(const Array& params, bool fHelp)\n     {\n         LOCK2(cs_main, pwalletMain->cs_wallet);\n \n+        // add to address book or update label\n+        pwalletMain->SetAddressBook(dest, strLabel, \"receive\");\n+\n         // Don't throw error in case an address is already there\n         if (pwalletMain->HaveWatchOnly(dest))\n             return Value::null;\n \n         pwalletMain->MarkDirty();\n-        pwalletMain->SetAddressBook(dest, strLabel, \"receive\");\n \n         if (!pwalletMain->AddWatchOnly(dest))\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error\u00a0adding\u00a0address\u00a0to\u00a0wallet\");"
      },
      {
        "sha": "3245f7d713a5265e04d6a3cf709890124b8da3c0",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -171,7 +171,7 @@ Value validateaddress(const Array& params, bool fHelp)\n         ret.push_back(Pair(\"address\", currentAddress));\n #ifdef ENABLE_WALLET\n         isminetype mine = pwalletMain ? IsMine(*pwalletMain, dest) : MINE_NO;\n-        ret.push_back(Pair(\"ismine\", mine != MINE_NO));\n+        ret.push_back(Pair(\"ismine\", mine == MINE_SPENDABLE));\n         if (mine != MINE_NO) {\n             ret.push_back(Pair(\"watchonly\", mine == MINE_WATCH_ONLY));\n             Object detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);"
      },
      {
        "sha": "56c7d01d4e5b170e1561ed2a2efe243c3356d139",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -201,6 +201,8 @@ enum isminetype\n     MINE_WATCH_ONLY = 1,\n     MINE_SPENDABLE = 2,\n };\n+/** used for bitflags of isminetype */\n+typedef uint8_t isminefilter;\n \n // Mandatory script verification flags that all new blocks must comply with for\n // them to be valid. (but old blocks may not comply with) Currently just P2SH,"
      },
      {
        "sha": "d4e9fe9d18faa0e51feef9d1d184ce87da58ed2b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 4,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -738,7 +738,7 @@ bool CWallet::IsChange(const CTxOut& txout) const\n     // a better way of identifying which outputs are 'the send' and which are\n     // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n     // which output, if any, was change).\n-    if (ExtractDestination(txout.scriptPubKey, address) && ::IsMine(*this, address))\n+    if (ExtractDestination(txout.scriptPubKey, address) && ::IsMine(*this, address) == MINE_SPENDABLE)\n     {\n         LOCK(cs_wallet);\n         if (!mapAddressBook.count(address))\n@@ -793,7 +793,7 @@ int CWalletTx::GetRequestCount() const\n }\n \n void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n-                           list<pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, string& strSentAccount) const\n+                           list<pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, string& strSentAccount, const isminefilter& filter) const\n {\n     nFee = 0;\n     listReceived.clear();\n@@ -820,9 +820,9 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n             // Don't report 'change' txouts\n             if (pwallet->IsChange(txout))\n                 continue;\n-            fIsMine = pwallet->IsMine(txout);\n+            fIsMine = (pwallet->IsMine(txout) & filter);\n         }\n-        else if (!(fIsMine = pwallet->IsMine(txout)))\n+        else if (!(fIsMine = (pwallet->IsMine(txout) & filter)))\n             continue;\n \n         // In either case, we need to get the destination address\n@@ -1066,6 +1066,51 @@ int64_t CWallet::GetImmatureBalance() const\n     return nTotal;\n }\n \n+int64_t CWallet::GetWatchOnlyBalance() const\n+{\n+    int64_t nTotal = 0;\n+    {\n+        LOCK(cs_wallet);\n+        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        {\n+            const CWalletTx* pcoin = &(*it).second;\n+            if (pcoin->IsTrusted())\n+                nTotal += pcoin->GetAvailableWatchOnlyCredit();\n+        }\n+    }\n+    \n+    return nTotal;\n+}\n+\n+int64_t CWallet::GetUnconfirmedWatchOnlyBalance() const\n+{\n+    int64_t nTotal = 0;\n+    {\n+        LOCK(cs_wallet);\n+        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        {\n+            const CWalletTx* pcoin = &(*it).second;\n+            if (!IsFinalTx(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n+                nTotal += pcoin->GetAvailableWatchOnlyCredit();\n+        }\n+    }\n+    return nTotal;\n+}\n+\n+int64_t CWallet::GetImmatureWatchOnlyBalance() const\n+{\n+    int64_t nTotal = 0;\n+    {\n+        LOCK(cs_wallet);\n+        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        {\n+            const CWalletTx* pcoin = &(*it).second;\n+            nTotal += pcoin->GetImmatureWatchOnlyCredit();\n+        }\n+    }\n+    return nTotal;\n+}\n+\n // populate vCoins with vector of available COutputs.\n void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl) const\n {"
      },
      {
        "sha": "355aa369737b6dceca58721726ac640a48d3f2e4",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 63,
        "deletions": 8,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffd40da361639faeef405c7e4a504a340d77aa5b/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffd40da361639faeef405c7e4a504a340d77aa5b/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ffd40da361639faeef405c7e4a504a340d77aa5b",
        "patch": "@@ -262,6 +262,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int64_t GetBalance() const;\n     int64_t GetUnconfirmedBalance() const;\n     int64_t GetImmatureBalance() const;\n+    int64_t GetWatchOnlyBalance() const;\n+    int64_t GetUnconfirmedWatchOnlyBalance() const;\n+    int64_t GetImmatureWatchOnlyBalance() const;\n     bool CreateTransaction(const std::vector<std::pair<CScript, int64_t> >& vecSend,\n                            CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n     bool CreateTransaction(CScript scriptPubKey, int64_t nValue,\n@@ -290,11 +293,11 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n-    int64_t GetCredit(const CTxOut& txout) const\n+    int64_t GetCredit(const CTxOut& txout, const isminefilter& filter = (MINE_WATCH_ONLY | MINE_SPENDABLE)) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n-        return (IsMine(txout) ? txout.nValue : 0);\n+        return ((IsMine(txout) & filter) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n     int64_t GetChange(const CTxOut& txout) const\n@@ -332,12 +335,12 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nDebit;\n     }\n-    int64_t GetCredit(const CTransaction& tx) const\n+    int64_t GetCredit(const CTransaction& tx, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const\n     {\n         int64_t nCredit = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n-            nCredit += GetCredit(txout);\n+            nCredit += GetCredit(txout, filter);\n             if (!MoneyRange(nCredit))\n                 throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n         }\n@@ -483,11 +486,15 @@ class CWalletTx : public CMerkleTx\n     mutable bool fCreditCached;\n     mutable bool fImmatureCreditCached;\n     mutable bool fAvailableCreditCached;\n+    mutable bool fImmatureWatchCreditCached;\n+    mutable bool fAvailableWatchCreditCached;\n     mutable bool fChangeCached;\n     mutable int64_t nDebitCached;\n     mutable int64_t nCreditCached;\n     mutable int64_t nImmatureCreditCached;\n     mutable int64_t nAvailableCreditCached;\n+    mutable int64_t nImmatureWatchCreditCached;\n+    mutable int64_t nAvailableWatchCreditCached;\n     mutable int64_t nChangeCached;\n \n     CWalletTx()\n@@ -524,11 +531,15 @@ class CWalletTx : public CMerkleTx\n         fCreditCached = false;\n         fImmatureCreditCached = false;\n         fAvailableCreditCached = false;\n+        fImmatureWatchCreditCached = false;\n+        fAvailableWatchCreditCached = false;\n         fChangeCached = false;\n         nDebitCached = 0;\n         nCreditCached = 0;\n         nImmatureCreditCached = 0;\n         nAvailableCreditCached = 0;\n+        nAvailableWatchCreditCached = 0;\n+        nImmatureWatchCreditCached = 0;\n         nChangeCached = 0;\n         nOrderPos = -1;\n     }\n@@ -581,6 +592,8 @@ class CWalletTx : public CMerkleTx\n     {\n         fCreditCached = false;\n         fAvailableCreditCached = false;\n+        fAvailableWatchCreditCached = false;\n+        fImmatureWatchCreditCached = false;\n         fDebitCached = false;\n         fChangeCached = false;\n     }\n@@ -622,7 +635,7 @@ class CWalletTx : public CMerkleTx\n         {\n             if (fUseCache && fImmatureCreditCached)\n                 return nImmatureCreditCached;\n-            nImmatureCreditCached = pwallet->GetCredit(*this);\n+            nImmatureCreditCached = pwallet->GetCredit(*this, MINE_SPENDABLE);\n             fImmatureCreditCached = true;\n             return nImmatureCreditCached;\n         }\n@@ -649,7 +662,7 @@ class CWalletTx : public CMerkleTx\n             if (!pwallet->IsSpent(hashTx, i))\n             {\n                 const CTxOut &txout = vout[i];\n-                nCredit += pwallet->GetCredit(txout);\n+                nCredit += pwallet->GetCredit(txout, MINE_SPENDABLE);\n                 if (!MoneyRange(nCredit))\n                     throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n             }\n@@ -660,6 +673,48 @@ class CWalletTx : public CMerkleTx\n         return nCredit;\n     }\n \n+    int64_t GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const\n+    {\n+        if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n+        {\n+            if (fUseCache && fImmatureWatchCreditCached)\n+                return nImmatureWatchCreditCached;\n+            nImmatureWatchCreditCached = pwallet->GetCredit(*this, MINE_WATCH_ONLY);\n+            fImmatureWatchCreditCached = true;\n+            return nImmatureWatchCreditCached;\n+        }\n+\n+        return 0;\n+    }\n+\n+    int64_t GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const\n+    {\n+        if (pwallet == 0)\n+            return 0;\n+\n+        // Must wait until coinbase is safely deep enough in the chain before valuing it\n+        if (IsCoinBase() && GetBlocksToMaturity() > 0)\n+            return 0;\n+\n+        if (fUseCache && fAvailableWatchCreditCached)\n+            return nAvailableWatchCreditCached;\n+\n+        int64_t nCredit = 0;\n+        for (unsigned int i = 0; i < vout.size(); i++)\n+        {\n+            if (!pwallet->IsSpent(GetHash(), i))\n+            {\n+                const CTxOut &txout = vout[i];\n+                nCredit += pwallet->GetCredit(txout, MINE_WATCH_ONLY);\n+                if (!MoneyRange(nCredit))\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+            }\n+        }\n+\n+        nAvailableWatchCreditCached = nCredit;\n+        fAvailableWatchCreditCached = true;\n+        return nCredit;\n+    }\n \n     int64_t GetChange() const\n     {\n@@ -671,7 +726,7 @@ class CWalletTx : public CMerkleTx\n     }\n \n     void GetAmounts(std::list<std::pair<CTxDestination, int64_t> >& listReceived,\n-                    std::list<std::pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, std::string& strSentAccount) const;\n+                    std::list<std::pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, std::string& strSentAccount, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const;\n \n     void GetAccountAmounts(const std::string& strAccount, int64_t& nReceived,\n                            int64_t& nSent, int64_t& nFee) const;\n@@ -702,7 +757,7 @@ class CWalletTx : public CMerkleTx\n             if (parent == NULL)\n                 return false;\n             const CTxOut& parentOut = parent->vout[txin.prevout.n];\n-            if (!pwallet->IsMine(parentOut))\n+            if (pwallet->IsMine(parentOut) != MINE_SPENDABLE)\n                 return false;\n         }\n         return true;"
      }
    ]
  },
  {
    "sha": "d2692f61164730322547871f2124de06ade0436b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjY5MmY2MTE2NDczMDMyMjU0Nzg3MWYyMTI0ZGUwNmFkZTA0MzZi",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-04-05T19:36:48Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:38Z"
      },
      "message": "Watchonly transactions are marked in transaction history",
      "tree": {
        "sha": "311a39b0f3fe010a7960aa29e41420b160ae7f55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/311a39b0f3fe010a7960aa29e41420b160ae7f55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2692f61164730322547871f2124de06ade0436b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2692f61164730322547871f2124de06ade0436b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2692f61164730322547871f2124de06ade0436b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2692f61164730322547871f2124de06ade0436b/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffd40da361639faeef405c7e4a504a340d77aa5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffd40da361639faeef405c7e4a504a340d77aa5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffd40da361639faeef405c7e4a504a340d77aa5b"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 17,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1011363f3ef6ce52a8c7e5579d039ec2dac7c8a7",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2692f61164730322547871f2124de06ade0436b/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2692f61164730322547871f2124de06ade0436b/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=d2692f61164730322547871f2124de06ade0436b",
        "patch": "@@ -70,23 +70,27 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                     sub.type = TransactionRecord::Generated;\n                 }\n \n+                sub.involvesWatchAddress = mine == MINE_WATCH_ONLY;\n                 parts.append(sub);\n             }\n         }\n     }\n     else\n     {\n+        bool involvesWatchAddress = false;\n         isminetype fAllFromMe = MINE_SPENDABLE;\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n+            if(mine == MINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = MINE_SPENDABLE;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n+            if(mine == MINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllToMe > mine) fAllToMe = mine;\n         }\n \n@@ -97,6 +101,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n \n             parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n                             -(nDebit - nChange), nCredit - nChange));\n+            parts.last().involvesWatchAddress = involvesWatchAddress;\n         }\n         else if (fAllFromMe)\n         {\n@@ -141,6 +146,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 }\n                 sub.debit = -nValue;\n \n+                sub.involvesWatchAddress = involvesWatchAddress;\n                 parts.append(sub);\n             }\n         }\n@@ -150,6 +156,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             // Mixed debit transaction, can't break down payees\n             //\n             parts.append(TransactionRecord(hash, nTime, TransactionRecord::Other, \"\", nNet, 0));\n+            parts.last().involvesWatchAddress = involvesWatchAddress;\n         }\n     }\n "
      },
      {
        "sha": "d3cfa77d97be91e83d9a1c70faf9e63cc3dac501",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2692f61164730322547871f2124de06ade0436b/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2692f61164730322547871f2124de06ade0436b/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=d2692f61164730322547871f2124de06ade0436b",
        "patch": "@@ -137,6 +137,9 @@ class TransactionRecord\n     /** Status: can change with block chain update */\n     TransactionStatus status;\n \n+    /** Whether the transaction was sent/received with a watch-only address */\n+    bool involvesWatchAddress;\n+\n     /** Return the unique identifier for this transaction (part) */\n     QString getTxID() const;\n "
      },
      {
        "sha": "c357d26a9d5ff59760bd63e8907f7cafa6e9a17e",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2692f61164730322547871f2124de06ade0436b/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2692f61164730322547871f2124de06ade0436b/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=d2692f61164730322547871f2124de06ade0436b",
        "patch": "@@ -390,19 +390,22 @@ QVariant TransactionTableModel::txAddressDecoration(const TransactionRecord *wtx\n \n QString TransactionTableModel::formatTxToAddress(const TransactionRecord *wtx, bool tooltip) const\n {\n+    // mark transactions involving watch-only addresses:\n+    QString watchAddress = wtx->involvesWatchAddress ? \" (w) \" : \"\";\n+\n     switch(wtx->type)\n     {\n     case TransactionRecord::RecvFromOther:\n-        return QString::fromStdString(wtx->address);\n+        return QString::fromStdString(wtx->address) + watchAddress;\n     case TransactionRecord::RecvWithAddress:\n     case TransactionRecord::SendToAddress:\n     case TransactionRecord::Generated:\n-        return lookupAddress(wtx->address, tooltip);\n+        return lookupAddress(wtx->address, tooltip) + watchAddress;\n     case TransactionRecord::SendToOther:\n-        return QString::fromStdString(wtx->address);\n+        return QString::fromStdString(wtx->address) + watchAddress;\n     case TransactionRecord::SendToSelf:\n     default:\n-        return tr(\"(n/a)\");\n+        return tr(\"(n/a)\") + watchAddress;\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "d4640d7d8c3ba373195d33ab75db9c8cb43f8806",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDY0MGQ3ZDhjM2JhMzczMTk1ZDMzYWI3NWRiOWM4Y2I0M2Y4ODA2",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-04-08T13:23:50Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:38Z"
      },
      "message": "Added argument to getbalance to include watchonly addresses and fixed errors in balance calculation.",
      "tree": {
        "sha": "7966357313fbf458c8fadf1bd99f3f80e879e111",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7966357313fbf458c8fadf1bd99f3f80e879e111"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4640d7d8c3ba373195d33ab75db9c8cb43f8806",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4640d7d8c3ba373195d33ab75db9c8cb43f8806",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4640d7d8c3ba373195d33ab75db9c8cb43f8806",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4640d7d8c3ba373195d33ab75db9c8cb43f8806/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2692f61164730322547871f2124de06ade0436b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2692f61164730322547871f2124de06ade0436b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2692f61164730322547871f2124de06ade0436b"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 62,
      "deletions": 24
    },
    "files": [
      {
        "sha": "ea5ca8e0f6f15729d6392ceb81760361b8540c64",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4640d7d8c3ba373195d33ab75db9c8cb43f8806/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4640d7d8c3ba373195d33ab75db9c8cb43f8806/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=d4640d7d8c3ba373195d33ab75db9c8cb43f8806",
        "patch": "@@ -40,6 +40,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listreceivedbyaccount\", 0 },\n     { \"listreceivedbyaccount\", 1 },\n     { \"getbalance\", 1 },\n+    { \"getbalance\", 2 },\n     { \"getblockhash\", 0 },\n     { \"move\", 2 },\n     { \"move\", 3 },"
      },
      {
        "sha": "79b438d4173e3ec551496cf1d69f78249629a30c",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4640d7d8c3ba373195d33ab75db9c8cb43f8806/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4640d7d8c3ba373195d33ab75db9c8cb43f8806/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=d4640d7d8c3ba373195d33ab75db9c8cb43f8806",
        "patch": "@@ -557,7 +557,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n }\n \n \n-int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n+int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth, const isminefilter& filter = MINE_SPENDABLE)\n {\n     int64_t nBalance = 0;\n \n@@ -569,7 +569,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n             continue;\n \n         int64_t nReceived, nSent, nFee;\n-        wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee);\n+        wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee, filter);\n \n         if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n             nBalance += nReceived;\n@@ -582,25 +582,26 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     return nBalance;\n }\n \n-int64_t GetAccountBalance(const string& strAccount, int nMinDepth)\n+int64_t GetAccountBalance(const string& strAccount, int nMinDepth, const isminefilter& filter = MINE_SPENDABLE)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n-    return GetAccountBalance(walletdb, strAccount, nMinDepth);\n+    return GetAccountBalance(walletdb, strAccount, nMinDepth, filter);\n }\n \n \n Value getbalance(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 2)\n+    if (fHelp || params.size() > 3)\n         throw runtime_error(\n-            \"getbalance ( \\\"account\\\" minconf )\\n\"\n+            \"getbalance ( \\\"account\\\" minconf includeWatchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n             \"If account is specified, returns the balance in the account.\\n\"\n             \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n             \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"      (string, optional) The selected account, or \\\"*\\\" for entire wallet. It may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n+            \"3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in btc received for this account.\\n\"\n             \"\\nExamples:\\n\"\n@@ -620,8 +621,14 @@ Value getbalance(const Array& params, bool fHelp)\n         return  ValueFromAmount(pwalletMain->GetBalance());\n \n     int nMinDepth = 1;\n+    isminefilter filter = MINE_SPENDABLE;\n     if (params.size() > 1)\n+    {\n         nMinDepth = params[1].get_int();\n+        if(params.size() > 2)\n+            if(params[2].get_bool())\n+                filter = filter | MINE_WATCH_ONLY;\n+    }\n \n     if (params[0].get_str() == \"*\") {\n         // Calculate total balance a different way from GetBalance()\n@@ -638,7 +645,7 @@ Value getbalance(const Array& params, bool fHelp)\n             string strSentAccount;\n             list<pair<CTxDestination, int64_t> > listReceived;\n             list<pair<CTxDestination, int64_t> > listSent;\n-            wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount);\n+            wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount, filter);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n                 BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listReceived)\n@@ -653,7 +660,7 @@ Value getbalance(const Array& params, bool fHelp)\n \n     string strAccount = AccountFromValue(params[0]);\n \n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, filter);\n \n     return ValueFromAmount(nBalance);\n }"
      },
      {
        "sha": "3c9aa3306f8ec36d744a5aae3a74d628e412050b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4640d7d8c3ba373195d33ab75db9c8cb43f8806/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4640d7d8c3ba373195d33ab75db9c8cb43f8806/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d4640d7d8c3ba373195d33ab75db9c8cb43f8806",
        "patch": "@@ -711,7 +711,7 @@ isminetype CWallet::IsMine(const CTxIn &txin) const\n     return MINE_NO;\n }\n \n-int64_t CWallet::GetDebit(const CTxIn &txin) const\n+int64_t CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n {\n     {\n         LOCK(cs_wallet);\n@@ -720,7 +720,7 @@ int64_t CWallet::GetDebit(const CTxIn &txin) const\n         {\n             const CWalletTx& prev = (*mi).second;\n             if (txin.prevout.n < prev.vout.size())\n-                if (IsMine(prev.vout[txin.prevout.n]))\n+                if (IsMine(prev.vout[txin.prevout.n]) & filter)\n                     return prev.vout[txin.prevout.n].nValue;\n         }\n     }\n@@ -801,7 +801,7 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n     strSentAccount = strFromAccount;\n \n     // Compute fee:\n-    int64_t nDebit = GetDebit();\n+    int64_t nDebit = GetDebit(filter);\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n         int64_t nValueOut = GetValueOut();\n@@ -846,15 +846,15 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n }\n \n void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nReceived,\n-                                  int64_t& nSent, int64_t& nFee) const\n+                                  int64_t& nSent, int64_t& nFee, const isminefilter& filter) const\n {\n     nReceived = nSent = nFee = 0;\n \n     int64_t allFee;\n     string strSentAccount;\n     list<pair<CTxDestination, int64_t> > listReceived;\n     list<pair<CTxDestination, int64_t> > listSent;\n-    GetAmounts(listReceived, listSent, allFee, strSentAccount);\n+    GetAmounts(listReceived, listSent, allFee, strSentAccount, filter);\n \n     if (strAccount == strSentAccount)\n     {"
      },
      {
        "sha": "b11e6c662e8163d0b6d192c7a3d4797d9021c09c",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 41,
        "deletions": 11,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4640d7d8c3ba373195d33ab75db9c8cb43f8806/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4640d7d8c3ba373195d33ab75db9c8cb43f8806/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=d4640d7d8c3ba373195d33ab75db9c8cb43f8806",
        "patch": "@@ -288,12 +288,12 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n     isminetype IsMine(const CTxIn& txin) const;\n-    int64_t GetDebit(const CTxIn& txin) const;\n+    int64_t GetDebit(const CTxIn& txin, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const;\n     isminetype IsMine(const CTxOut& txout) const\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n-    int64_t GetCredit(const CTxOut& txout, const isminefilter& filter = (MINE_WATCH_ONLY | MINE_SPENDABLE)) const\n+    int64_t GetCredit(const CTxOut& txout, const isminefilter& filter=(MINE_WATCH_ONLY|MINE_SPENDABLE)) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n@@ -324,12 +324,12 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     \t        return true;\n    \t    return false;\n     }\n-    int64_t GetDebit(const CTransaction& tx) const\n+    int64_t GetDebit(const CTransaction& tx, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const\n     {\n         int64_t nDebit = 0;\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         {\n-            nDebit += GetDebit(txin);\n+            nDebit += GetDebit(txin, filter);\n             if (!MoneyRange(nDebit))\n                 throw std::runtime_error(\"CWallet::GetDebit() : value out of range\");\n         }\n@@ -486,13 +486,17 @@ class CWalletTx : public CMerkleTx\n     mutable bool fCreditCached;\n     mutable bool fImmatureCreditCached;\n     mutable bool fAvailableCreditCached;\n+    mutable bool fWatchDebitCached;\n+    mutable bool fWatchCreditCached;\n     mutable bool fImmatureWatchCreditCached;\n     mutable bool fAvailableWatchCreditCached;\n     mutable bool fChangeCached;\n     mutable int64_t nDebitCached;\n     mutable int64_t nCreditCached;\n     mutable int64_t nImmatureCreditCached;\n     mutable int64_t nAvailableCreditCached;\n+    mutable int64_t nWatchDebitCached;\n+    mutable int64_t nWatchCreditCached;\n     mutable int64_t nImmatureWatchCreditCached;\n     mutable int64_t nAvailableWatchCreditCached;\n     mutable int64_t nChangeCached;\n@@ -531,13 +535,17 @@ class CWalletTx : public CMerkleTx\n         fCreditCached = false;\n         fImmatureCreditCached = false;\n         fAvailableCreditCached = false;\n+        fWatchDebitCached = false;\n+        fWatchCreditCached = false;\n         fImmatureWatchCreditCached = false;\n         fAvailableWatchCreditCached = false;\n         fChangeCached = false;\n         nDebitCached = 0;\n         nCreditCached = 0;\n         nImmatureCreditCached = 0;\n         nAvailableCreditCached = 0;\n+        nWatchDebitCached = 0;\n+        nWatchCreditCached = 0;\n         nAvailableWatchCreditCached = 0;\n         nImmatureWatchCreditCached = 0;\n         nChangeCached = 0;\n@@ -592,6 +600,8 @@ class CWalletTx : public CMerkleTx\n     {\n         fCreditCached = false;\n         fAvailableCreditCached = false;\n+        fWatchDebitCached = false;\n+        fWatchCreditCached = false;\n         fAvailableWatchCreditCached = false;\n         fImmatureWatchCreditCached = false;\n         fDebitCached = false;\n@@ -604,15 +614,35 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    int64_t GetDebit() const\n+    int64_t GetDebit(const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const\n     {\n         if (vin.empty())\n             return 0;\n-        if (fDebitCached)\n-            return nDebitCached;\n-        nDebitCached = pwallet->GetDebit(*this);\n-        fDebitCached = true;\n-        return nDebitCached;\n+\n+        int64_t debit = 0;\n+        if(filter & MINE_SPENDABLE)\n+        {\n+            if (fDebitCached)\n+                debit += nDebitCached;\n+            else\n+            {\n+                nDebitCached = pwallet->GetDebit(*this, MINE_SPENDABLE);\n+                fDebitCached = true;\n+                debit += nDebitCached;\n+            }\n+        }\n+        if(filter & MINE_WATCH_ONLY)\n+        {\n+            if(fWatchDebitCached)\n+                debit += nWatchDebitCached;\n+            else\n+            {\n+                nWatchDebitCached = pwallet->GetDebit(*this, MINE_WATCH_ONLY);\n+                fWatchDebitCached = true;\n+                debit += nWatchDebitCached;\n+            }\n+        }\n+        return debit;\n     }\n \n     int64_t GetCredit(bool fUseCache=true) const\n@@ -729,7 +759,7 @@ class CWalletTx : public CMerkleTx\n                     std::list<std::pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, std::string& strSentAccount, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const;\n \n     void GetAccountAmounts(const std::string& strAccount, int64_t& nReceived,\n-                           int64_t& nSent, int64_t& nFee) const;\n+                           int64_t& nSent, int64_t& nFee, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const;\n \n     bool IsFromMe() const\n     {"
      }
    ]
  },
  {
    "sha": "83f3543f20348aa718620314e7deb37bd0f71b90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2YzNTQzZjIwMzQ4YWE3MTg2MjAzMTRlN2RlYjM3YmQwZjcxYjkw",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-04-08T14:13:15Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:38Z"
      },
      "message": "Added argument to listaccounts to include watchonly addresses",
      "tree": {
        "sha": "bb7c6bf0fff4b17247a0c42cf4dc81733c634b16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb7c6bf0fff4b17247a0c42cf4dc81733c634b16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83f3543f20348aa718620314e7deb37bd0f71b90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83f3543f20348aa718620314e7deb37bd0f71b90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83f3543f20348aa718620314e7deb37bd0f71b90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83f3543f20348aa718620314e7deb37bd0f71b90/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4640d7d8c3ba373195d33ab75db9c8cb43f8806",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4640d7d8c3ba373195d33ab75db9c8cb43f8806",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4640d7d8c3ba373195d33ab75db9c8cb43f8806"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 13,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d96b47833f20674b9534db714cae715f2651491e",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f3543f20348aa718620314e7deb37bd0f71b90/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f3543f20348aa718620314e7deb37bd0f71b90/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=83f3543f20348aa718620314e7deb37bd0f71b90",
        "patch": "@@ -49,6 +49,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listtransactions\", 1 },\n     { \"listtransactions\", 2 },\n     { \"listaccounts\", 0 },\n+    { \"listaccounts\", 1 },\n     { \"walletpassphrase\", 1 },\n     { \"getblocktemplate\", 0 },\n     { \"listsinceblock\", 1 },"
      },
      {
        "sha": "d52a4bc5bb10544a30f6fcbb71caaa6110dc0ab8",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f3543f20348aa718620314e7deb37bd0f71b90/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f3543f20348aa718620314e7deb37bd0f71b90/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=83f3543f20348aa718620314e7deb37bd0f71b90",
        "patch": "@@ -1302,12 +1302,13 @@ Value listtransactions(const Array& params, bool fHelp)\n \n Value listaccounts(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 1)\n+    if (fHelp || params.size() > 2)\n         throw runtime_error(\n-            \"listaccounts ( minconf )\\n\"\n+            \"listaccounts ( minconf includeWatchonly)\\n\"\n             \"\\nReturns Object that has account names as keys, account balances as values.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. minconf     (numeric, optional, default=1) Only onclude transactions with at least this many confirmations\\n\"\n+            \"1. minconf          (numeric, optional, default=1) Only onclude transactions with at least this many confirmations\\n\"\n+            \"2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"{                      (json object where keys are account names, and values are numeric balances\\n\"\n             \"  \\\"account\\\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.\\n\"\n@@ -1325,12 +1326,18 @@ Value listaccounts(const Array& params, bool fHelp)\n         );\n \n     int nMinDepth = 1;\n+    isminefilter includeWatchonly = MINE_SPENDABLE;\n     if (params.size() > 0)\n+    {\n         nMinDepth = params[0].get_int();\n+        if(params.size() > 1)\n+            if(params[1].get_bool())\n+                includeWatchonly = includeWatchonly | MINE_WATCH_ONLY;\n+    }\n \n     map<string, int64_t> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n-        if (IsMine(*pwalletMain, entry.first)) // This address belongs to me\n+        if (IsMine(*pwalletMain, entry.first) & includeWatchonly) // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n     }\n \n@@ -1344,7 +1351,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         int nDepth = wtx.GetDepthInMainChain();\n         if (wtx.GetBlocksToMaturity() > 0 || nDepth < 0)\n             continue;\n-        wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n+        wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, includeWatchonly);\n         mapAccountBalances[strSentAccount] -= nFee;\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n             mapAccountBalances[strSentAccount] -= s.second;"
      }
    ]
  },
  {
    "sha": "952877e01c1045298fd51d1152d96c304d4cf2a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTI4NzdlMDFjMTA0NTI5OGZkNTFkMTE1MmQ5NmMzMDRkNGNmMmE0",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-04-09T15:20:07Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:38Z"
      },
      "message": "Showing 'involvesWatchonly' property for transactions returned by 'listtransactions' and 'listsinceblock'.\nIt is only appended when the transaction involves a watchonly address.",
      "tree": {
        "sha": "5cfd0dcb93f537886f0babf683e0953d8a2786b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cfd0dcb93f537886f0babf683e0953d8a2786b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/952877e01c1045298fd51d1152d96c304d4cf2a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/952877e01c1045298fd51d1152d96c304d4cf2a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/952877e01c1045298fd51d1152d96c304d4cf2a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/952877e01c1045298fd51d1152d96c304d4cf2a4/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83f3543f20348aa718620314e7deb37bd0f71b90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83f3543f20348aa718620314e7deb37bd0f71b90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83f3543f20348aa718620314e7deb37bd0f71b90"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8de10c52f820402c25f495fe2fbfc84fc59956be",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/952877e01c1045298fd51d1152d96c304d4cf2a4/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/952877e01c1045298fd51d1152d96c304d4cf2a4/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=952877e01c1045298fd51d1152d96c304d4cf2a4",
        "patch": "@@ -1117,13 +1117,16 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n \n     bool fAllAccounts = (strAccount == string(\"*\"));\n+    bool involvesWatchonly = wtx.IsFromMe(MINE_WATCH_ONLY);\n \n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n         {\n             Object entry;\n+            if(involvesWatchonly || (::IsMine(*pwalletMain, s.first) & MINE_WATCH_ONLY))\n+                entry.push_back(Pair(\"involvesWatchonly\", true));\n             entry.push_back(Pair(\"account\", strSentAccount));\n             MaybePushAddress(entry, s.first);\n             entry.push_back(Pair(\"category\", \"send\"));\n@@ -1146,6 +1149,8 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n             if (fAllAccounts || (account == strAccount))\n             {\n                 Object entry;\n+                if(involvesWatchonly || (::IsMine(*pwalletMain, r.first) & MINE_WATCH_ONLY))\n+                    entry.push_back(Pair(\"involvesWatchonly\", true));\n                 entry.push_back(Pair(\"account\", account));\n                 MaybePushAddress(entry, r.first);\n                 if (wtx.IsCoinBase())"
      },
      {
        "sha": "3453d23d978fdc9a6b81a0ad05d9cf3473b60c8a",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/952877e01c1045298fd51d1152d96c304d4cf2a4/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/952877e01c1045298fd51d1152d96c304d4cf2a4/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=952877e01c1045298fd51d1152d96c304d4cf2a4",
        "patch": "@@ -761,9 +761,9 @@ class CWalletTx : public CMerkleTx\n     void GetAccountAmounts(const std::string& strAccount, int64_t& nReceived,\n                            int64_t& nSent, int64_t& nFee, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const;\n \n-    bool IsFromMe() const\n+    bool IsFromMe(const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const\n     {\n-        return (GetDebit() > 0);\n+        return (GetDebit(filter) > 0);\n     }\n \n     bool IsTrusted() const"
      }
    ]
  },
  {
    "sha": "d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkN2Q1ZDIzYjc3ZTIwNGVjY2Q0YmY4YTU2MDhjMWE0OTlkNWZjNDJm",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-04-08T15:51:04Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:39Z"
      },
      "message": "Added argument to listtransactions and listsinceblock to include watchonly addresses",
      "tree": {
        "sha": "e9773ab433534248ab31c6557d889f628841dbaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9773ab433534248ab31c6557d889f628841dbaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "952877e01c1045298fd51d1152d96c304d4cf2a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/952877e01c1045298fd51d1152d96c304d4cf2a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/952877e01c1045298fd51d1152d96c304d4cf2a4"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 42,
      "deletions": 23
    },
    "files": [
      {
        "sha": "f329d517b36014dd99dfa670017fb846ae9df220",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f",
        "patch": "@@ -48,11 +48,13 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendfrom\", 3 },\n     { \"listtransactions\", 1 },\n     { \"listtransactions\", 2 },\n+    { \"listtransactions\", 3 },\n     { \"listaccounts\", 0 },\n     { \"listaccounts\", 1 },\n     { \"walletpassphrase\", 1 },\n     { \"getblocktemplate\", 0 },\n     { \"listsinceblock\", 1 },\n+    { \"listsinceblock\", 2 },\n     { \"sendmany\", 1 },\n     { \"sendmany\", 2 },\n     { \"addmultisigaddress\", 0 },\n@@ -129,7 +131,6 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n                 throw runtime_error(string(\"Error parsing JSON:\")+strVal);\n             params.push_back(jVal);\n         }\n-\n     }\n \n     return params;"
      },
      {
        "sha": "a9db442d4cf55ae28807a47d452de7cf7b9d23e8",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 22,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f",
        "patch": "@@ -1107,14 +1107,14 @@ static void MaybePushAddress(Object & entry, const CTxDestination &dest)\n         entry.push_back(Pair(\"address\", addr.ToString()));\n }\n \n-void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n+void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret, const isminefilter& filter=MINE_SPENDABLE)\n {\n     int64_t nFee;\n     string strSentAccount;\n     list<pair<CTxDestination, int64_t> > listReceived;\n     list<pair<CTxDestination, int64_t> > listSent;\n \n-    wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n+    wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, filter);\n \n     bool fAllAccounts = (strAccount == string(\"*\"));\n     bool involvesWatchonly = wtx.IsFromMe(MINE_WATCH_ONLY);\n@@ -1194,16 +1194,16 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Ar\n \n Value listtransactions(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 3)\n+    if (fHelp || params.size() > 4)\n         throw runtime_error(\n-            \"listtransactions ( \\\"account\\\" count from )\\n\"\n+            \"listtransactions ( \\\"account\\\" count from includeWatchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"    (string, optional) The account name. If not included, it will list all transactions for all accounts.\\n\"\n             \"                                     If \\\"\\\" is set, it will list transactions for the default account.\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n             \"3. from           (numeric, optional, default=0) The number of transactions to skip\\n\"\n-\n+            \"4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -1255,15 +1255,26 @@ Value listtransactions(const Array& params, bool fHelp)\n         );\n \n     string strAccount = \"*\";\n-    if (params.size() > 0)\n-        strAccount = params[0].get_str();\n     int nCount = 10;\n-    if (params.size() > 1)\n-        nCount = params[1].get_int();\n     int nFrom = 0;\n-    if (params.size() > 2)\n-        nFrom = params[2].get_int();\n-\n+    isminefilter filter = MINE_SPENDABLE;\n+    if (params.size() > 0)\n+    {\n+        strAccount = params[0].get_str();\n+        if (params.size() > 1)\n+        {\n+            nCount = params[1].get_int();\n+            if (params.size() > 2)\n+            {\n+                nFrom = params[2].get_int();\n+                if(params.size() > 3)\n+                {\n+                    if(params[3].get_bool())\n+                        filter = filter | MINE_WATCH_ONLY;\n+                }\n+            }\n+        }\n+    }\n     if (nCount < 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n     if (nFrom < 0)\n@@ -1279,7 +1290,7 @@ Value listtransactions(const Array& params, bool fHelp)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)\n-            ListTransactions(*pwtx, strAccount, 0, true, ret);\n+            ListTransactions(*pwtx, strAccount, 0, true, ret, filter);\n         CAccountingEntry *const pacentry = (*it).second.second;\n         if (pacentry != 0)\n             AcentryToJSON(*pacentry, strAccount, ret);\n@@ -1386,11 +1397,12 @@ Value listsinceblock(const Array& params, bool fHelp)\n {\n     if (fHelp)\n         throw runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target-confirmations )\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target-confirmations includeWatchonly)\\n\"\n             \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"   (string, optional) The block hash to list transactions since\\n\"\n             \"2. target-confirmations:    (numeric, optional) The confirmations required, must be 1 or more\\n\"\n+            \"3. includeWatchonly:        (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n@@ -1426,7 +1438,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n     CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n-\n+    isminefilter filter = MINE_SPENDABLE;\n     if (params.size() > 0)\n     {\n         uint256 blockId = 0;\n@@ -1435,14 +1447,20 @@ Value listsinceblock(const Array& params, bool fHelp)\n         std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(blockId);\n         if (it != mapBlockIndex.end())\n             pindex = it->second;\n-    }\n \n-    if (params.size() > 1)\n-    {\n-        target_confirms = params[1].get_int();\n+        if (params.size() > 1)\n+        {\n+            target_confirms = params[1].get_int();\n+\n+            if (target_confirms < 1)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n \n-        if (target_confirms < 1)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n+            if(params.size() > 2)\n+            {\n+                if(params[2].get_bool())\n+                    filter = filter | MINE_WATCH_ONLY;\n+            }\n+        }\n     }\n \n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n@@ -1454,7 +1472,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions);\n+            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n     }\n \n     CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];"
      }
    ]
  },
  {
    "sha": "a5c6c5d6df887764ac07664aae842234c19bbf8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWM2YzVkNmRmODg3NzY0YWMwNzY2NGFhZTg0MjIzNGMxOWJiZjhk",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-04-29T17:39:01Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:39Z"
      },
      "message": "fixed tiny glitch and improved readability like laanwj suggested",
      "tree": {
        "sha": "5971199c88c56c9e8ce7a86e5162e7afce3ce7f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5971199c88c56c9e8ce7a86e5162e7afce3ce7f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5c6c5d6df887764ac07664aae842234c19bbf8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5c6c5d6df887764ac07664aae842234c19bbf8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5c6c5d6df887764ac07664aae842234c19bbf8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5c6c5d6df887764ac07664aae842234c19bbf8d/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7d5d23b77e204eccd4bf8a5608c1a499d5fc42f"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 37,
      "deletions": 49
    },
    "files": [
      {
        "sha": "d94f066ed9a23d4f0f46cbd08721ded1a63dc05b",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5c6c5d6df887764ac07664aae842234c19bbf8d/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5c6c5d6df887764ac07664aae842234c19bbf8d/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=a5c6c5d6df887764ac07664aae842234c19bbf8d",
        "patch": "@@ -101,11 +101,11 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                             strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"unknown\") + \"<br>\";\n                             strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n                             strHTML += GUIUtil::HtmlEscape(rec->address);\n-                            std::string addressOwned = wallet->IsMine(txout) == MINE_SPENDABLE ? \"own address\" : \"watch-only\";\n+                            QString addressOwned = wallet->IsMine(txout) == MINE_SPENDABLE ? tr(\"own address\") : tr(\"watch-only\");\n                             if (!wallet->mapAddressBook[address].name.empty())\n-                                strHTML += \" (\" + tr(addressOwned.c_str()) + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \")\";\n+                                strHTML += \" (\" + addressOwned + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \")\";\n                             else\n-                                strHTML += \" (\" + tr(addressOwned.c_str()) + \")\";\n+                                strHTML += \" (\" + addressOwned + \")\";\n                             strHTML += \"<br>\";\n                         }\n                     }"
      },
      {
        "sha": "f0b4619b26e5b18d7255ba403cc32397f0bddc5f",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5c6c5d6df887764ac07664aae842234c19bbf8d/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5c6c5d6df887764ac07664aae842234c19bbf8d/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=a5c6c5d6df887764ac07664aae842234c19bbf8d",
        "patch": "@@ -171,9 +171,9 @@ Value validateaddress(const Array& params, bool fHelp)\n         ret.push_back(Pair(\"address\", currentAddress));\n #ifdef ENABLE_WALLET\n         isminetype mine = pwalletMain ? IsMine(*pwalletMain, dest) : MINE_NO;\n-        ret.push_back(Pair(\"ismine\", mine == MINE_SPENDABLE));\n+        ret.push_back(Pair(\"ismine\", (mine & MINE_SPENDABLE) ? true : false));\n         if (mine != MINE_NO) {\n-            ret.push_back(Pair(\"watchonly\", mine == MINE_WATCH_ONLY));\n+            ret.push_back(Pair(\"iswatchonly\", (mine & MINE_WATCH_ONLY) ? true: false));\n             Object detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);\n             ret.insert(ret.end(), detail.begin(), detail.end());\n         }"
      },
      {
        "sha": "e9a111f5230c164ca0f78ecc257f59de66ef3feb",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 41,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5c6c5d6df887764ac07664aae842234c19bbf8d/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5c6c5d6df887764ac07664aae842234c19bbf8d/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a5c6c5d6df887764ac07664aae842234c19bbf8d",
        "patch": "@@ -621,14 +621,12 @@ Value getbalance(const Array& params, bool fHelp)\n         return  ValueFromAmount(pwalletMain->GetBalance());\n \n     int nMinDepth = 1;\n-    isminefilter filter = MINE_SPENDABLE;\n     if (params.size() > 1)\n-    {\n         nMinDepth = params[1].get_int();\n-        if(params.size() > 2)\n-            if(params[2].get_bool())\n-                filter = filter | MINE_WATCH_ONLY;\n-    }\n+    isminefilter filter = MINE_SPENDABLE;\n+    if(params.size() > 2)\n+        if(params[2].get_bool())\n+            filter = filter | MINE_WATCH_ONLY;\n \n     if (params[0].get_str() == \"*\") {\n         // Calculate total balance a different way from GetBalance()\n@@ -1255,26 +1253,19 @@ Value listtransactions(const Array& params, bool fHelp)\n         );\n \n     string strAccount = \"*\";\n+    if (params.size() > 0)\n+        strAccount = params[0].get_str();\n     int nCount = 10;\n+    if (params.size() > 1)\n+        nCount = params[1].get_int();\n     int nFrom = 0;\n+    if (params.size() > 2)\n+        nFrom = params[2].get_int();\n     isminefilter filter = MINE_SPENDABLE;\n-    if (params.size() > 0)\n-    {\n-        strAccount = params[0].get_str();\n-        if (params.size() > 1)\n-        {\n-            nCount = params[1].get_int();\n-            if (params.size() > 2)\n-            {\n-                nFrom = params[2].get_int();\n-                if(params.size() > 3)\n-                {\n-                    if(params[3].get_bool())\n-                        filter = filter | MINE_WATCH_ONLY;\n-                }\n-            }\n-        }\n-    }\n+    if(params.size() > 3)\n+        if(params[3].get_bool())\n+            filter = filter | MINE_WATCH_ONLY;\n+\n     if (nCount < 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n     if (nFrom < 0)\n@@ -1342,14 +1333,12 @@ Value listaccounts(const Array& params, bool fHelp)\n         );\n \n     int nMinDepth = 1;\n-    isminefilter includeWatchonly = MINE_SPENDABLE;\n     if (params.size() > 0)\n-    {\n         nMinDepth = params[0].get_int();\n-        if(params.size() > 1)\n-            if(params[1].get_bool())\n-                includeWatchonly = includeWatchonly | MINE_WATCH_ONLY;\n-    }\n+    isminefilter includeWatchonly = MINE_SPENDABLE;\n+    if(params.size() > 1)\n+        if(params[1].get_bool())\n+            includeWatchonly = includeWatchonly | MINE_WATCH_ONLY;\n \n     map<string, int64_t> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n@@ -1439,6 +1428,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n     CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n     isminefilter filter = MINE_SPENDABLE;\n+\n     if (params.size() > 0)\n     {\n         uint256 blockId = 0;\n@@ -1447,22 +1437,20 @@ Value listsinceblock(const Array& params, bool fHelp)\n         std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(blockId);\n         if (it != mapBlockIndex.end())\n             pindex = it->second;\n+    }\n \n-        if (params.size() > 1)\n-        {\n-            target_confirms = params[1].get_int();\n-\n-            if (target_confirms < 1)\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n+    if (params.size() > 1)\n+    {\n+        target_confirms = params[1].get_int();\n \n-            if(params.size() > 2)\n-            {\n-                if(params[2].get_bool())\n-                    filter = filter | MINE_WATCH_ONLY;\n-            }\n-        }\n+        if (target_confirms < 1)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n     }\n \n+    if(params.size() > 2)\n+        if(params[2].get_bool())\n+            filter = filter | MINE_WATCH_ONLY;\n+\n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n     Array transactions;"
      },
      {
        "sha": "4b480321ac2277b2845ee7934ef19177e76b10c7",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5c6c5d6df887764ac07664aae842234c19bbf8d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5c6c5d6df887764ac07664aae842234c19bbf8d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a5c6c5d6df887764ac07664aae842234c19bbf8d",
        "patch": "@@ -811,7 +811,8 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n     // Sent/received.\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n-        bool fIsMine;\n+        isminetype fIsMine = pwallet->IsMine(txout);\n+\n         // Only need to handle txouts if AT LEAST one of these is true:\n         //   1) they debit from us (sent)\n         //   2) the output is to us (received)\n@@ -820,9 +821,8 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n             // Don't report 'change' txouts\n             if (pwallet->IsChange(txout))\n                 continue;\n-            fIsMine = (pwallet->IsMine(txout) & filter);\n         }\n-        else if (!(fIsMine = (pwallet->IsMine(txout) & filter)))\n+        else if (!(fIsMine & filter))\n             continue;\n \n         // In either case, we need to get the destination address"
      }
    ]
  },
  {
    "sha": "f87ba3df64bb5825f7e2f6a33c93cf5738682019",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODdiYTNkZjY0YmI1ODI1ZjdlMmY2YTMzYzkzY2Y1NzM4NjgyMDE5",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-05-22T22:58:15Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:39Z"
      },
      "message": "added includeWatchonly argument to 'gettransaction' because it affects balance calculation",
      "tree": {
        "sha": "57810128e440d7c4d5bf9b0f58bad14d288d9aed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57810128e440d7c4d5bf9b0f58bad14d288d9aed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f87ba3df64bb5825f7e2f6a33c93cf5738682019",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87ba3df64bb5825f7e2f6a33c93cf5738682019",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f87ba3df64bb5825f7e2f6a33c93cf5738682019",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87ba3df64bb5825f7e2f6a33c93cf5738682019/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5c6c5d6df887764ac07664aae842234c19bbf8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5c6c5d6df887764ac07664aae842234c19bbf8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5c6c5d6df887764ac07664aae842234c19bbf8d"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b2387cb062fd3cea3542d542ba233d26f00516c6",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87ba3df64bb5825f7e2f6a33c93cf5738682019/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87ba3df64bb5825f7e2f6a33c93cf5738682019/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=f87ba3df64bb5825f7e2f6a33c93cf5738682019",
        "patch": "@@ -65,6 +65,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listunspent\", 1 },\n     { \"listunspent\", 2 },\n     { \"getblock\", 1 },\n+    { \"gettransaction\", 1},\n     { \"getrawtransaction\", 1 },\n     { \"createrawtransaction\", 0 },\n     { \"createrawtransaction\", 1 },"
      },
      {
        "sha": "61bc0b22f4981a6cab26bfd582c71b895e33ae6a",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87ba3df64bb5825f7e2f6a33c93cf5738682019/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87ba3df64bb5825f7e2f6a33c93cf5738682019/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=f87ba3df64bb5825f7e2f6a33c93cf5738682019",
        "patch": "@@ -1475,12 +1475,13 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n Value gettransaction(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() != 1)\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"gettransaction \\\"txid\\\"\\n\"\n             \"\\nGet detailed information about in-wallet transaction <txid>\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n+            \"2. \\\"includeWatchonly\\\"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in btc\\n\"\n@@ -1517,6 +1518,11 @@ Value gettransaction(const Array& params, bool fHelp)\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n+    isminefilter filter = MINE_SPENDABLE;\n+    if(params.size() > 1)\n+        if(params[1].get_bool())\n+            filter = filter | MINE_WATCH_ONLY;\n+\n     Object entry;\n     if (!pwalletMain->mapWallet.count(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n@@ -1534,7 +1540,7 @@ Value gettransaction(const Array& params, bool fHelp)\n     WalletTxToJSON(wtx, entry);\n \n     Array details;\n-    ListTransactions(wtx, \"*\", 0, false, details);\n+    ListTransactions(wtx, \"*\", 0, false, details, filter);\n     entry.push_back(Pair(\"details\", details));\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      }
    ]
  },
  {
    "sha": "0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmEyZjg4OTlhZGY4ZjlmMGVhZDI5YmE1ZDcwOGVhZDZjNWQ0ZWFm",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-05-31T14:57:26Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:39Z"
      },
      "message": "added includedWatchonly argument to listreceivedbyaddress/...account",
      "tree": {
        "sha": "b8ac19daff1333e1a80faf94eb74d5b214b49fa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8ac19daff1333e1a80faf94eb74d5b214b49fa0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f87ba3df64bb5825f7e2f6a33c93cf5738682019",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87ba3df64bb5825f7e2f6a33c93cf5738682019",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f87ba3df64bb5825f7e2f6a33c93cf5738682019"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 33,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5edeecf93309d5aea8762f0c1bcd0790cfa22311",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf",
        "patch": "@@ -37,8 +37,10 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getreceivedbyaccount\", 1 },\n     { \"listreceivedbyaddress\", 0 },\n     { \"listreceivedbyaddress\", 1 },\n+    { \"listreceivedbyaddress\", 2 },\n     { \"listreceivedbyaccount\", 0 },\n     { \"listreceivedbyaccount\", 1 },\n+    { \"listreceivedbyaccount\", 2 },\n     { \"getbalance\", 1 },\n     { \"getbalance\", 2 },\n     { \"getblockhash\", 0 },\n@@ -65,7 +67,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listunspent\", 1 },\n     { \"listunspent\", 2 },\n     { \"getblock\", 1 },\n-    { \"gettransaction\", 1},\n     { \"getrawtransaction\", 1 },\n     { \"createrawtransaction\", 0 },\n     { \"createrawtransaction\", 1 },"
      },
      {
        "sha": "1cbaadd45cad49c24f25de459ede291a40684df2",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 7,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf",
        "patch": "@@ -932,10 +932,12 @@ struct tallyitem\n     int64_t nAmount;\n     int nConf;\n     vector<uint256> txids;\n+    bool fIsWatchonly;\n     tallyitem()\n     {\n         nAmount = 0;\n         nConf = std::numeric_limits<int>::max();\n+        fIsWatchonly = false;\n     }\n };\n \n@@ -951,6 +953,11 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     if (params.size() > 1)\n         fIncludeEmpty = params[1].get_bool();\n \n+    isminefilter filter = MINE_SPENDABLE;\n+    if(params.size() > 2)\n+        if(params[2].get_bool())\n+            filter = filter | MINE_WATCH_ONLY;\n+\n     // Tally\n     map<CBitcoinAddress, tallyitem> mapTally;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -967,13 +974,19 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             CTxDestination address;\n-            if (!ExtractDestination(txout.scriptPubKey, address) || !IsMine(*pwalletMain, address))\n+            if (!ExtractDestination(txout.scriptPubKey, address))\n+                continue;\n+\n+            isminefilter mine = IsMine(*pwalletMain, address);\n+            if(!mine & filter)\n                 continue;\n \n             tallyitem& item = mapTally[address];\n             item.nAmount += txout.nValue;\n             item.nConf = min(item.nConf, nDepth);\n             item.txids.push_back(wtx.GetHash());\n+            if (mine & MINE_WATCH_ONLY)\n+                item.fIsWatchonly = true;\n         }\n     }\n \n@@ -990,21 +1003,26 @@ Value ListReceived(const Array& params, bool fByAccounts)\n \n         int64_t nAmount = 0;\n         int nConf = std::numeric_limits<int>::max();\n+        bool fIsWatchonly = false;\n         if (it != mapTally.end())\n         {\n             nAmount = (*it).second.nAmount;\n             nConf = (*it).second.nConf;\n+            fIsWatchonly = (*it).second.fIsWatchonly;\n         }\n \n         if (fByAccounts)\n         {\n             tallyitem& item = mapAccountTally[strAccount];\n             item.nAmount += nAmount;\n             item.nConf = min(item.nConf, nConf);\n+            item.fIsWatchonly = fIsWatchonly;\n         }\n         else\n         {\n             Object obj;\n+            if(fIsWatchonly)\n+                obj.push_back(Pair(\"involvesWatchonly\", true));\n             obj.push_back(Pair(\"address\",       address.ToString()));\n             obj.push_back(Pair(\"account\",       strAccount));\n             obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n@@ -1029,6 +1047,8 @@ Value ListReceived(const Array& params, bool fByAccounts)\n             int64_t nAmount = (*it).second.nAmount;\n             int nConf = (*it).second.nConf;\n             Object obj;\n+            if((*it).second.fIsWatchonly)\n+                obj.push_back(Pair(\"involvesWatchonly\", true));\n             obj.push_back(Pair(\"account\",       (*it).first));\n             obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n             obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n@@ -1041,17 +1061,19 @@ Value ListReceived(const Array& params, bool fByAccounts)\n \n Value listreceivedbyaddress(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 2)\n+    if (fHelp || params.size() > 3)\n         throw runtime_error(\n-            \"listreceivedbyaddress ( minconf includeempty )\\n\"\n+            \"listreceivedbyaddress ( minconf includeempty includeWatchonly)\\n\"\n             \"\\nList balances by receiving address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. includeempty  (numeric, optional, dafault=false) Whether to include addresses that haven't received any payments.\\n\"\n+            \"3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\\n\"\n \n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n+            \"    \\\"involvesWatchonly\\\" : \\\"true\\\",    (bool) Only returned if imported addresses were involved in transaction\\n\"\n             \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n             \"    \\\"account\\\" : \\\"accountname\\\",       (string) The account of the receiving address. The default account is \\\"\\\".\\n\"\n             \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in btc received by the address\\n\"\n@@ -1063,25 +1085,27 @@ Value listreceivedbyaddress(const Array& params, bool fHelp)\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"listreceivedbyaddress\", \"\")\n             + HelpExampleCli(\"listreceivedbyaddress\", \"6 true\")\n-            + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true\")\n+            + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n         );\n \n     return ListReceived(params, false);\n }\n \n Value listreceivedbyaccount(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 2)\n+    if (fHelp || params.size() > 3)\n         throw runtime_error(\n-            \"listreceivedbyaccount ( minconf includeempty )\\n\"\n+            \"listreceivedbyaccount ( minconf includeempty includeWatchonly)\\n\"\n             \"\\nList balances by account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n+            \"3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\\n\"\n \n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n+            \"    \\\"involvesWatchonly\\\" : \\\"true\\\",    (bool) Only returned if imported addresses were involved in transaction\\n\"\n             \"    \\\"account\\\" : \\\"accountname\\\",  (string) The account name of the receiving account\\n\"\n             \"    \\\"amount\\\" : x.xxx,             (numeric) The total amount received by addresses with this account\\n\"\n             \"    \\\"confirmations\\\" : n           (numeric) The number of confirmations of the most recent transaction included\\n\"\n@@ -1092,7 +1116,7 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"listreceivedbyaccount\", \"\")\n             + HelpExampleCli(\"listreceivedbyaccount\", \"6 true\")\n-            + HelpExampleRpc(\"listreceivedbyaccount\", \"6, true\")\n+            + HelpExampleRpc(\"listreceivedbyaccount\", \"6, true, true\")\n         );\n \n     return ListReceived(params, true);"
      }
    ]
  },
  {
    "sha": "d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTA4N2QxYmEwODE0MmJkZjEzNTMzM2EwZGEwOGVmMGY1ZmM3ZWYw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-09T19:11:59Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:39Z"
      },
      "message": "Use script matching rather than destination matching for watch-only.\n\nThis changes the keystore data format, wallet format and IsMine logic\nto detect watch-only outputs based on direct script matching rather\nthan first trying to convert outputs to destinations (addresses).\n\nThe reason is that we don't know how the software that has the spending\nkeys works. It may support the same types of scripts as us, but that is\nnot guaranteed. Furthermore, it removes the ambiguity between addresses\nused as identifiers for output scripts or identifiers for public keys.\n\nOne practical implication is that adding a normal pay-to-pubkey-hash\naddress via importaddress will not cause payments to the corresponding\nfull public key to be detected as IsMine. If that is wanted, add those\nscripts directly (importaddress now also accepts any hex-encoded script).\n\nConflicts:\n\tsrc/wallet.cpp",
      "tree": {
        "sha": "42c945e1a21db1c7b9bfe9a91f8ee47f9eb7b49a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42c945e1a21db1c7b9bfe9a91f8ee47f9eb7b49a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fa2f8899adf8f9f0ead29ba5d708ead6c5d4eaf"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 47,
      "deletions": 47
    },
    "files": [
      {
        "sha": "2a4c88d5656dd28d96bc0319a27b47ed730fc957",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
        "patch": "@@ -59,14 +59,14 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     return false;\n }\n \n-bool CBasicKeyStore::AddWatchOnly(const CTxDestination &dest)\n+bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.insert(dest);\n     return true;\n }\n \n-bool CBasicKeyStore::HaveWatchOnly(const CTxDestination &dest) const\n+bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const\n {\n     LOCK(cs_KeyStore);\n     return setWatchOnly.count(dest) > 0;"
      },
      {
        "sha": "72411a1387c0eac6416828bb4606216807f40319",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
        "patch": "@@ -48,13 +48,13 @@ class CKeyStore\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const =0;\n \n     // Support for Watch-only addresses\n-    virtual bool AddWatchOnly(const CTxDestination &dest) =0;\n-    virtual bool HaveWatchOnly(const CTxDestination &dest) const =0;\n+    virtual bool AddWatchOnly(const CScript &dest) =0;\n+    virtual bool HaveWatchOnly(const CScript &dest) const =0;\n };\n \n typedef std::map<CKeyID, CKey> KeyMap;\n typedef std::map<CScriptID, CScript > ScriptMap;\n-typedef std::set<CTxDestination> WatchOnlySet;\n+typedef std::set<CScript> WatchOnlySet;\n \n /** Basic key store, that keeps keys in an address->secret map */\n class CBasicKeyStore : public CKeyStore\n@@ -105,8 +105,8 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool HaveCScript(const CScriptID &hash) const;\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n \n-    virtual bool AddWatchOnly(const CTxDestination &dest);\n-    virtual bool HaveWatchOnly(const CTxDestination &dest) const;\n+    virtual bool AddWatchOnly(const CScript &dest);\n+    virtual bool HaveWatchOnly(const CScript &dest) const;\n };\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;"
      },
      {
        "sha": "e505d84b40d3171723c049dcc397f063b0052446",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
        "patch": "@@ -138,13 +138,19 @@ Value importaddress(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 3)\n         throw runtime_error(\n             \"importaddress <address> [label] [rescan=true]\\n\"\n-            \"Adds an address that can be watched as if it were in your wallet but cannot be used to spend.\");\n+            \"Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\");\n+\n+    CScript script;\n \n     CBitcoinAddress address(params[0].get_str());\n-    if (!address.IsValid())\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid\u00a0Bitcoin\u00a0address\");\n-    CTxDestination dest;\n-    dest = address.Get();\n+    if (address.IsValid()) {\n+        script.SetDestination(address.Get());\n+    } else if (IsHex(params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+        script = CScript(data.begin(), data.end());\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid\u00a0Bitcoin\u00a0address or script\");\n+    }\n \n     string strLabel = \"\";\n     if (params.size() > 1)\n@@ -159,15 +165,16 @@ Value importaddress(const Array& params, bool fHelp)\n         LOCK2(cs_main, pwalletMain->cs_wallet);\n \n         // add to address book or update label\n-        pwalletMain->SetAddressBook(dest, strLabel, \"receive\");\n+        if (address.IsValid())\n+            pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n \n         // Don't throw error in case an address is already there\n-        if (pwalletMain->HaveWatchOnly(dest))\n+        if (pwalletMain->HaveWatchOnly(script))\n             return Value::null;\n \n         pwalletMain->MarkDirty();\n \n-        if (!pwalletMain->AddWatchOnly(dest))\n+        if (!pwalletMain->AddWatchOnly(script))\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error\u00a0adding\u00a0address\u00a0to\u00a0wallet\");\n \n         if (fRescan)"
      },
      {
        "sha": "89f752bd1fb1e225b3b0acceebaa37fa6959d9fe",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 15,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
        "patch": "@@ -1456,21 +1456,19 @@ class CKeyStoreIsMineVisitor : public boost::static_visitor<bool>\n     bool operator()(const CScriptID &scriptID) const { return keystore->HaveCScript(scriptID); }\n };\n \n-isminetype IsMine(const CKeyStore &keystore, const CTxDestination &dest)\n+isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest)\n {\n-    if (boost::apply_visitor(CKeyStoreIsMineVisitor(&keystore), dest))\n-        return MINE_SPENDABLE;\n-    if (keystore.HaveWatchOnly(dest))\n-        return MINE_WATCH_ONLY;\n-    return MINE_NO;\n+    CScript script;\n+    script.SetDestination(dest);\n+    return IsMine(keystore, script);\n }\n \n isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n {\n     vector<valtype> vSolutions;\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {\n-        if (keystore.HaveWatchOnly(scriptPubKey.GetID()))\n+        if (keystore.HaveWatchOnly(scriptPubKey))\n             return MINE_WATCH_ONLY;\n         return MINE_NO;\n     }\n@@ -1485,27 +1483,21 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         keyID = CPubKey(vSolutions[0]).GetID();\n         if (keystore.HaveKey(keyID))\n             return MINE_SPENDABLE;\n-        if (keystore.HaveWatchOnly(keyID))\n-            return MINE_WATCH_ONLY;\n         break;\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n         if (keystore.HaveKey(keyID))\n             return MINE_SPENDABLE;\n-        if (keystore.HaveWatchOnly(keyID))\n-            return MINE_WATCH_ONLY;\n         break;\n     case TX_SCRIPTHASH:\n     {\n         CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n             isminetype ret = IsMine(keystore, subscript);\n-            if (ret)\n+            if (ret == MINE_SPENDABLE)\n                 return ret;\n         }\n-        if (keystore.HaveWatchOnly(scriptID))\n-            return MINE_WATCH_ONLY;\n         break;\n     }\n     case TX_MULTISIG:\n@@ -1522,7 +1514,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     }\n     }\n \n-    if (keystore.HaveWatchOnly(scriptPubKey.GetID()))\n+    if (keystore.HaveWatchOnly(scriptPubKey))\n         return MINE_WATCH_ONLY;\n     return MINE_NO;\n }"
      },
      {
        "sha": "edba5757e4489c080ed970ebbbc3621906634c8b",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
        "patch": "@@ -812,7 +812,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-isminetype IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest);\n void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);"
      },
      {
        "sha": "445d98b90656e75922c7a32baacf7a6eb75e4d68",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
        "patch": "@@ -145,7 +145,7 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return CCryptoKeyStore::AddCScript(redeemScript);\n }\n \n-bool CWallet::AddWatchOnly(const CTxDestination &dest)\n+bool CWallet::AddWatchOnly(const CScript &dest)\n {\n     if (!CCryptoKeyStore::AddWatchOnly(dest))\n         return false;\n@@ -155,9 +155,8 @@ bool CWallet::AddWatchOnly(const CTxDestination &dest)\n     return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n }\n \n-bool CWallet::LoadWatchOnly(const CTxDestination &dest)\n+bool CWallet::LoadWatchOnly(const CScript &dest)\n {\n-    LogPrintf(\"Loaded %s!\\n\", CBitcoinAddress(dest).ToString().c_str());\n     return CCryptoKeyStore::AddWatchOnly(dest);\n }\n \n@@ -729,17 +728,19 @@ int64_t CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n \n bool CWallet::IsChange(const CTxOut& txout) const\n {\n-    CTxDestination address;\n-\n     // TODO: fix handling of 'change' outputs. The assumption is that any\n-    // payment to a TX_PUBKEYHASH that is mine but isn't in the address book\n+    // payment to a script that is ours, but is not in the address book\n     // is change. That assumption is likely to break when we implement multisignature\n     // wallets that return change back into a multi-signature-protected address;\n     // a better way of identifying which outputs are 'the send' and which are\n     // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n     // which output, if any, was change).\n-    if (ExtractDestination(txout.scriptPubKey, address) && ::IsMine(*this, address) == MINE_SPENDABLE)\n+    if (::IsMine(*this, txout.scriptPubKey))\n     {\n+        CTxDestination address;\n+        if (!ExtractDestination(txout.scriptPubKey, address))\n+            return true;\n+\n         LOCK(cs_wallet);\n         if (!mapAddressBook.count(address))\n             return true;"
      },
      {
        "sha": "b44b73568ba49f78a9d6da861613d7fe5d080023",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
        "patch": "@@ -227,9 +227,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n \n     // Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnly(const CTxDestination &dest);\n+    bool AddWatchOnly(const CScript &dest);\n     // Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n-    bool LoadWatchOnly(const CTxDestination &dest);\n+    bool LoadWatchOnly(const CScript &dest);\n \n     bool Unlock(const SecureString& strWalletPassphrase);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);"
      },
      {
        "sha": "a95baf83d0dd5f93e4b9a0ced789e585c95ed3ea",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
        "patch": "@@ -112,10 +112,10 @@ bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n     return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n }\n \n-bool CWalletDB::WriteWatchOnly(const CTxDestination &dest)\n+bool CWalletDB::WriteWatchOnly(const CScript &dest)\n {\n     nWalletDBUpdated++;\n-    return Write(std::make_pair(std::string(\"watch\"), CBitcoinAddress(dest).ToString()), '1');\n+    return Write(std::make_pair(std::string(\"watchs\"), dest), '1');\n }\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n@@ -410,14 +410,14 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                     wss.fAnyUnordered = true;\n             }\n         }\n-        else if (strType == \"watch\")\n+        else if (strType == \"watchs\")\n         {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n+            CScript script;\n+            ssKey >> script;\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n-                pwallet->LoadWatchOnly(CBitcoinAddress(strAddress).Get());\n+                pwallet->LoadWatchOnly(script);\n \n             // Watch-only addresses have no birthday information for now,\n             // so set the wallet birthday to the beginning of time."
      },
      {
        "sha": "58b4571b16f2bed61a18151ad2b1f2fe9c6edb03",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
        "patch": "@@ -94,7 +94,7 @@ class CWalletDB : public CDB\n \n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n-    bool WriteWatchOnly(const CTxDestination &dest);\n+    bool WriteWatchOnly(const CScript &script);\n \n     bool WriteBestBlock(const CBlockLocator& locator);\n     bool ReadBestBlock(CBlockLocator& locator);"
      }
    ]
  },
  {
    "sha": "80dda36a07d09f99be861fa5271d0da5bd4f07dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGRkYTM2YTA3ZDA5Zjk5YmU4NjFmYTUyNzFkMGRhNWJkNGYwN2Rj",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-06-19T13:24:17Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:39Z"
      },
      "message": "removed default argument values for ismine filter",
      "tree": {
        "sha": "0ffa87d19657848e874dceed4c0c4df40b98f1b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ffa87d19657848e874dceed4c0c4df40b98f1b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80dda36a07d09f99be861fa5271d0da5bd4f07dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80dda36a07d09f99be861fa5271d0da5bd4f07dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80dda36a07d09f99be861fa5271d0da5bd4f07dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80dda36a07d09f99be861fa5271d0da5bd4f07dc/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5087d1ba08142bdf135333a0da08ef0f5fc7ef0"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 32,
      "deletions": 31
    },
    "files": [
      {
        "sha": "95c7fa7582786ac1e42a1a89eb0c6b082493f705",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80dda36a07d09f99be861fa5271d0da5bd4f07dc/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80dda36a07d09f99be861fa5271d0da5bd4f07dc/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=80dda36a07d09f99be861fa5271d0da5bd4f07dc",
        "patch": "@@ -54,8 +54,8 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n     int64_t nTime = wtx.GetTxTime();\n-    int64_t nCredit = wtx.GetCredit();\n-    int64_t nDebit = wtx.GetDebit();\n+    int64_t nCredit = wtx.GetCredit(MINE_SPENDABLE|MINE_WATCH_ONLY);\n+    int64_t nDebit = wtx.GetDebit(MINE_SPENDABLE|MINE_WATCH_ONLY);\n     int64_t nNet = nCredit - nDebit;\n \n     strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx);\n@@ -139,7 +139,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         //\n         int64_t nUnmatured = 0;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-            nUnmatured += wallet->GetCredit(txout);\n+            nUnmatured += wallet->GetCredit(txout, MINE_SPENDABLE|MINE_WATCH_ONLY);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n         if (wtx.IsInMainChain())\n             strHTML += BitcoinUnits::formatWithUnit(unit, nUnmatured)+ \" (\" + tr(\"matures in %n more block(s)\", \"\", wtx.GetBlocksToMaturity()) + \")\";\n@@ -228,10 +228,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                 if (wallet->IsMine(txin))\n-                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin)) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin, MINE_SPENDABLE|MINE_WATCH_ONLY)) + \"<br>\";\n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 if (wallet->IsMine(txout))\n-                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout)) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout, MINE_SPENDABLE|MINE_WATCH_ONLY)) + \"<br>\";\n         }\n     }\n \n@@ -281,10 +281,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         strHTML += \"<hr><br>\" + tr(\"Debug information\") + \"<br><br>\";\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n             if(wallet->IsMine(txin))\n-                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin)) + \"<br>\";\n+                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin, MINE_SPENDABLE|MINE_WATCH_ONLY)) + \"<br>\";\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             if(wallet->IsMine(txout))\n-                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout)) + \"<br>\";\n+                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout, MINE_SPENDABLE|MINE_WATCH_ONLY)) + \"<br>\";\n \n         strHTML += \"<br><b>\" + tr(\"Transaction\") + \":</b><br>\";\n         strHTML += GUIUtil::HtmlEscape(wtx.ToString(), true);"
      },
      {
        "sha": "49916fed55a18efaa7205b1b3bb44b662b599fcf",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80dda36a07d09f99be861fa5271d0da5bd4f07dc/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80dda36a07d09f99be861fa5271d0da5bd4f07dc/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=80dda36a07d09f99be861fa5271d0da5bd4f07dc",
        "patch": "@@ -33,7 +33,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     QList<TransactionRecord> parts;\n     int64_t nTime = wtx.GetTxTime();\n     int64_t nCredit = wtx.GetCredit(true);\n-    int64_t nDebit = wtx.GetDebit();\n+    int64_t nDebit = wtx.GetDebit(MINE_SPENDABLE|MINE_WATCH_ONLY);\n     int64_t nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;"
      },
      {
        "sha": "f745d25ab644071028655429f5dac8141c2ca238",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80dda36a07d09f99be861fa5271d0da5bd4f07dc/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80dda36a07d09f99be861fa5271d0da5bd4f07dc/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=80dda36a07d09f99be861fa5271d0da5bd4f07dc",
        "patch": "@@ -557,7 +557,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n }\n \n \n-int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth, const isminefilter& filter = MINE_SPENDABLE)\n+int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth, const isminefilter& filter)\n {\n     int64_t nBalance = 0;\n \n@@ -582,7 +582,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     return nBalance;\n }\n \n-int64_t GetAccountBalance(const string& strAccount, int nMinDepth, const isminefilter& filter = MINE_SPENDABLE)\n+int64_t GetAccountBalance(const string& strAccount, int nMinDepth, const isminefilter& filter)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n     return GetAccountBalance(walletdb, strAccount, nMinDepth, filter);\n@@ -786,7 +786,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, MINE_SPENDABLE);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -863,7 +863,7 @@ Value sendmany(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, MINE_SPENDABLE);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -1129,7 +1129,7 @@ static void MaybePushAddress(Object & entry, const CTxDestination &dest)\n         entry.push_back(Pair(\"address\", addr.ToString()));\n }\n \n-void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret, const isminefilter& filter=MINE_SPENDABLE)\n+void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret, const isminefilter& filter)\n {\n     int64_t nFee;\n     string strSentAccount;\n@@ -1552,13 +1552,13 @@ Value gettransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    int64_t nCredit = wtx.GetCredit();\n-    int64_t nDebit = wtx.GetDebit();\n+    int64_t nCredit = wtx.GetCredit(filter);\n+    int64_t nDebit = wtx.GetDebit(filter);\n     int64_t nNet = nCredit - nDebit;\n-    int64_t nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n+    int64_t nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n-    if (wtx.IsFromMe())\n+    if (wtx.IsFromMe(filter))\n         entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n \n     WalletTxToJSON(wtx, entry);"
      },
      {
        "sha": "e996fca3d2d6f04b151e35fa070745484ac75e9b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80dda36a07d09f99be861fa5271d0da5bd4f07dc/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80dda36a07d09f99be861fa5271d0da5bd4f07dc/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=80dda36a07d09f99be861fa5271d0da5bd4f07dc",
        "patch": "@@ -1216,7 +1216,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n \n         const CWalletTx *pcoin = output.tx;\n \n-        if (output.nDepth < (pcoin->IsFromMe() ? nConfMine : nConfTheirs))\n+        if (output.nDepth < (pcoin->IsFromMe(MINE_SPENDABLE|MINE_WATCH_ONLY) ? nConfMine : nConfTheirs))\n             continue;\n \n         int i = output.i;\n@@ -1845,7 +1845,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n                 continue;\n \n             int nDepth = pcoin->GetDepthInMainChain();\n-            if (nDepth < (pcoin->IsFromMe() ? 0 : 1))\n+            if (nDepth < (pcoin->IsFromMe(MINE_SPENDABLE|MINE_WATCH_ONLY) ? 0 : 1))\n                 continue;\n \n             for (unsigned int i = 0; i < pcoin->vout.size(); i++)"
      },
      {
        "sha": "ac90de3c9cda5273f74ccb1a266284715483df3b",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80dda36a07d09f99be861fa5271d0da5bd4f07dc/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80dda36a07d09f99be861fa5271d0da5bd4f07dc/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=80dda36a07d09f99be861fa5271d0da5bd4f07dc",
        "patch": "@@ -288,12 +288,12 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n     isminetype IsMine(const CTxIn& txin) const;\n-    int64_t GetDebit(const CTxIn& txin, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const;\n+    int64_t GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n     isminetype IsMine(const CTxOut& txout) const\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n-    int64_t GetCredit(const CTxOut& txout, const isminefilter& filter=(MINE_WATCH_ONLY|MINE_SPENDABLE)) const\n+    int64_t GetCredit(const CTxOut& txout, const isminefilter& filter) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n@@ -313,9 +313,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n                 return true;\n         return false;\n     }\n-    bool IsFromMe(const CTransaction& tx) const\n+    bool IsFromMe(const CTransaction& tx) const     // should probably be renamed to IsRelevantToMe\n     {\n-        return (GetDebit(tx) > 0);\n+        return (GetDebit(tx, MINE_SPENDABLE|MINE_WATCH_ONLY) > 0);\n     }\n     bool IsConflicting(const CTransaction& tx) const\n     {\n@@ -324,7 +324,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     \t        return true;\n    \t    return false;\n     }\n-    int64_t GetDebit(const CTransaction& tx, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const\n+    int64_t GetDebit(const CTransaction& tx, const isminefilter& filter) const\n     {\n         int64_t nDebit = 0;\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n@@ -335,7 +335,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nDebit;\n     }\n-    int64_t GetCredit(const CTransaction& tx, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const\n+    int64_t GetCredit(const CTransaction& tx, const isminefilter& filter) const\n     {\n         int64_t nCredit = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n@@ -614,7 +614,8 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    int64_t GetDebit(const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const\n+    // filter decides which addresses will count towards the debit\n+    int64_t GetDebit(const isminefilter& filter) const\n     {\n         if (vin.empty())\n             return 0;\n@@ -654,7 +655,7 @@ class CWalletTx : public CMerkleTx\n         // GetBalance can assume transactions in mapWallet won't change\n         if (fUseCache && fCreditCached)\n             return nCreditCached;\n-        nCreditCached = pwallet->GetCredit(*this);\n+        nCreditCached = pwallet->GetCredit(*this, MINE_SPENDABLE|MINE_WATCH_ONLY);\n         fCreditCached = true;\n         return nCreditCached;\n     }\n@@ -756,12 +757,12 @@ class CWalletTx : public CMerkleTx\n     }\n \n     void GetAmounts(std::list<std::pair<CTxDestination, int64_t> >& listReceived,\n-                    std::list<std::pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, std::string& strSentAccount, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const;\n+                    std::list<std::pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n \n     void GetAccountAmounts(const std::string& strAccount, int64_t& nReceived,\n-                           int64_t& nSent, int64_t& nFee, const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const;\n+                           int64_t& nSent, int64_t& nFee, const isminefilter& filter) const;\n \n-    bool IsFromMe(const isminefilter& filter=(MINE_SPENDABLE|MINE_WATCH_ONLY)) const\n+    bool IsFromMe(const isminefilter& filter) const\n     {\n         return (GetDebit(filter) > 0);\n     }\n@@ -776,7 +777,7 @@ class CWalletTx : public CMerkleTx\n             return true;\n         if (nDepth < 0)\n             return false;\n-        if (!bSpendZeroConfChange || !IsFromMe()) // using wtx's cached debit\n+        if (!bSpendZeroConfChange || !IsFromMe(MINE_SPENDABLE|MINE_WATCH_ONLY)) // using wtx's cached debit\n             return false;\n \n         // Trusted if all inputs are from us and are in the mempool:"
      }
    ]
  },
  {
    "sha": "23b0506c91020f69092389cf8b25576dcdf4e17e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2IwNTA2YzkxMDIwZjY5MDkyMzg5Y2Y4YjI1NTc2ZGNkZjRlMTdl",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-06-18T23:42:39Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:39Z"
      },
      "message": "Fixed some stuff in TransactionDesc",
      "tree": {
        "sha": "23d2732e780c9c6f177549fef29ebdb065af100c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23d2732e780c9c6f177549fef29ebdb065af100c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23b0506c91020f69092389cf8b25576dcdf4e17e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23b0506c91020f69092389cf8b25576dcdf4e17e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23b0506c91020f69092389cf8b25576dcdf4e17e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23b0506c91020f69092389cf8b25576dcdf4e17e/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80dda36a07d09f99be861fa5271d0da5bd4f07dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80dda36a07d09f99be861fa5271d0da5bd4f07dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80dda36a07d09f99be861fa5271d0da5bd4f07dc"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 16,
      "deletions": 22
    },
    "files": [
      {
        "sha": "faa2077ff70d2242f00558d469345c5d2504885b",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23b0506c91020f69092389cf8b25576dcdf4e17e/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23b0506c91020f69092389cf8b25576dcdf4e17e/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=23b0506c91020f69092389cf8b25576dcdf4e17e",
        "patch": "@@ -15,6 +15,7 @@\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"wallet.h\"\n+#include \"script.h\"\n \n #include <stdint.h>\n #include <string>\n@@ -89,27 +90,20 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         if (nNet > 0)\n         {\n             // Credit\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            if (CBitcoinAddress(rec->address).IsValid())\n             {\n-                if (wallet->IsMine(txout))\n+                CTxDestination address = CBitcoinAddress(rec->address).Get();\n+                if (wallet->mapAddressBook.count(address))\n                 {\n-                    if (CBitcoinAddress(rec->address).IsValid())\n-                    {\n-                        CTxDestination address = CBitcoinAddress(rec->address).Get();\n-                        if (wallet->mapAddressBook.count(address))\n-                        {\n-                            strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"unknown\") + \"<br>\";\n-                            strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n-                            strHTML += GUIUtil::HtmlEscape(rec->address);\n-                            QString addressOwned = wallet->IsMine(txout) == MINE_SPENDABLE ? tr(\"own address\") : tr(\"watch-only\");\n-                            if (!wallet->mapAddressBook[address].name.empty())\n-                                strHTML += \" (\" + addressOwned + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \")\";\n-                            else\n-                                strHTML += \" (\" + addressOwned + \")\";\n-                            strHTML += \"<br>\";\n-                        }\n-                    }\n-                    break;\n+                    strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"unknown\") + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n+                    strHTML += GUIUtil::HtmlEscape(rec->address);\n+                    QString addressOwned = (::IsMine(*wallet, address) == MINE_SPENDABLE) ? tr(\"own address\") : tr(\"watch-only\");\n+                    if (!wallet->mapAddressBook[address].name.empty())\n+                        strHTML += \" (\" + addressOwned + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \")\";\n+                    else\n+                        strHTML += \" (\" + addressOwned + \")\";\n+                    strHTML += \"<br>\";\n                 }\n             }\n         }"
      },
      {
        "sha": "cce2fa3f81ae161946e6af7d98eb8e073a5d8a6a",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23b0506c91020f69092389cf8b25576dcdf4e17e/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23b0506c91020f69092389cf8b25576dcdf4e17e/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=23b0506c91020f69092389cf8b25576dcdf4e17e",
        "patch": "@@ -52,6 +52,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 CTxDestination address;\n                 sub.idx = parts.size(); // sequence number\n                 sub.credit = txout.nValue;\n+                sub.involvesWatchAddress = mine == MINE_WATCH_ONLY;\n                 if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n                 {\n                     // Received by Bitcoin Address\n@@ -70,7 +71,6 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                     sub.type = TransactionRecord::Generated;\n                 }\n \n-                sub.involvesWatchAddress = mine == MINE_WATCH_ONLY;\n                 parts.append(sub);\n             }\n         }\n@@ -101,7 +101,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n \n             parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n                             -(nDebit - nChange), nCredit - nChange));\n-            parts.last().involvesWatchAddress = involvesWatchAddress;\n+            parts.last().involvesWatchAddress = involvesWatchAddress;   // maybe pass to TransactionRecord as constructor argument\n         }\n         else if (fAllFromMe)\n         {\n@@ -115,6 +115,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 const CTxOut& txout = wtx.vout[nOut];\n                 TransactionRecord sub(hash, nTime);\n                 sub.idx = parts.size();\n+                sub.involvesWatchAddress = involvesWatchAddress;\n \n                 if(wallet->IsMine(txout))\n                 {\n@@ -146,7 +147,6 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 }\n                 sub.debit = -nValue;\n \n-                sub.involvesWatchAddress = involvesWatchAddress;\n                 parts.append(sub);\n             }\n         }"
      }
    ]
  },
  {
    "sha": "519dd1c89afa2b7d0f2720eb70cd11de23d61006",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTlkZDFjODlhZmEyYjdkMGYyNzIwZWI3MGNkMTFkZTIzZDYxMDA2",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-06-20T03:02:14Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:40Z"
      },
      "message": "Added MINE_ALL = (spendable|watchonly)",
      "tree": {
        "sha": "56051a7e5b4b3476d9cf36098dcab57fdf5c099e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56051a7e5b4b3476d9cf36098dcab57fdf5c099e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/519dd1c89afa2b7d0f2720eb70cd11de23d61006",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/519dd1c89afa2b7d0f2720eb70cd11de23d61006",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/519dd1c89afa2b7d0f2720eb70cd11de23d61006",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/519dd1c89afa2b7d0f2720eb70cd11de23d61006/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23b0506c91020f69092389cf8b25576dcdf4e17e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23b0506c91020f69092389cf8b25576dcdf4e17e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23b0506c91020f69092389cf8b25576dcdf4e17e"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "7cfa5424f7954ce65b40d8063d734f475ebb3c67",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/519dd1c89afa2b7d0f2720eb70cd11de23d61006/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/519dd1c89afa2b7d0f2720eb70cd11de23d61006/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=519dd1c89afa2b7d0f2720eb70cd11de23d61006",
        "patch": "@@ -55,8 +55,8 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n     int64_t nTime = wtx.GetTxTime();\n-    int64_t nCredit = wtx.GetCredit(MINE_SPENDABLE|MINE_WATCH_ONLY);\n-    int64_t nDebit = wtx.GetDebit(MINE_SPENDABLE|MINE_WATCH_ONLY);\n+    int64_t nCredit = wtx.GetCredit(MINE_ALL);\n+    int64_t nDebit = wtx.GetDebit(MINE_ALL);\n     int64_t nNet = nCredit - nDebit;\n \n     strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx);\n@@ -133,7 +133,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         //\n         int64_t nUnmatured = 0;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-            nUnmatured += wallet->GetCredit(txout, MINE_SPENDABLE|MINE_WATCH_ONLY);\n+            nUnmatured += wallet->GetCredit(txout, MINE_ALL);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n         if (wtx.IsInMainChain())\n             strHTML += BitcoinUnits::formatWithUnit(unit, nUnmatured)+ \" (\" + tr(\"matures in %n more block(s)\", \"\", wtx.GetBlocksToMaturity()) + \")\";\n@@ -222,10 +222,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                 if (wallet->IsMine(txin))\n-                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin, MINE_SPENDABLE|MINE_WATCH_ONLY)) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin, MINE_ALL)) + \"<br>\";\n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 if (wallet->IsMine(txout))\n-                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout, MINE_SPENDABLE|MINE_WATCH_ONLY)) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout, MINE_ALL)) + \"<br>\";\n         }\n     }\n \n@@ -275,10 +275,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         strHTML += \"<hr><br>\" + tr(\"Debug information\") + \"<br><br>\";\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n             if(wallet->IsMine(txin))\n-                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin, MINE_SPENDABLE|MINE_WATCH_ONLY)) + \"<br>\";\n+                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin, MINE_ALL)) + \"<br>\";\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             if(wallet->IsMine(txout))\n-                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout, MINE_SPENDABLE|MINE_WATCH_ONLY)) + \"<br>\";\n+                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout, MINE_ALL)) + \"<br>\";\n \n         strHTML += \"<br><b>\" + tr(\"Transaction\") + \":</b><br>\";\n         strHTML += GUIUtil::HtmlEscape(wtx.ToString(), true);"
      },
      {
        "sha": "08092a5f1f42da932561644ba112fd2c0fcded9e",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/519dd1c89afa2b7d0f2720eb70cd11de23d61006/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/519dd1c89afa2b7d0f2720eb70cd11de23d61006/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=519dd1c89afa2b7d0f2720eb70cd11de23d61006",
        "patch": "@@ -33,7 +33,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     QList<TransactionRecord> parts;\n     int64_t nTime = wtx.GetTxTime();\n     int64_t nCredit = wtx.GetCredit(true);\n-    int64_t nDebit = wtx.GetDebit(MINE_SPENDABLE|MINE_WATCH_ONLY);\n+    int64_t nDebit = wtx.GetDebit(MINE_ALL);\n     int64_t nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;"
      },
      {
        "sha": "790822625a3fa6e3564c9572b4f4c2b099f43c4f",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/519dd1c89afa2b7d0f2720eb70cd11de23d61006/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/519dd1c89afa2b7d0f2720eb70cd11de23d61006/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=519dd1c89afa2b7d0f2720eb70cd11de23d61006",
        "patch": "@@ -200,6 +200,7 @@ enum isminetype\n     MINE_NO = 0,\n     MINE_WATCH_ONLY = 1,\n     MINE_SPENDABLE = 2,\n+    MINE_ALL = MINE_WATCH_ONLY | MINE_SPENDABLE\n };\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;"
      },
      {
        "sha": "2823e7fa34b48629da5178cb155c63e09024725f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/519dd1c89afa2b7d0f2720eb70cd11de23d61006/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/519dd1c89afa2b7d0f2720eb70cd11de23d61006/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=519dd1c89afa2b7d0f2720eb70cd11de23d61006",
        "patch": "@@ -1216,7 +1216,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n \n         const CWalletTx *pcoin = output.tx;\n \n-        if (output.nDepth < (pcoin->IsFromMe(MINE_SPENDABLE|MINE_WATCH_ONLY) ? nConfMine : nConfTheirs))\n+        if (output.nDepth < (pcoin->IsFromMe(MINE_ALL) ? nConfMine : nConfTheirs))\n             continue;\n \n         int i = output.i;\n@@ -1845,7 +1845,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n                 continue;\n \n             int nDepth = pcoin->GetDepthInMainChain();\n-            if (nDepth < (pcoin->IsFromMe(MINE_SPENDABLE|MINE_WATCH_ONLY) ? 0 : 1))\n+            if (nDepth < (pcoin->IsFromMe(MINE_ALL) ? 0 : 1))\n                 continue;\n \n             for (unsigned int i = 0; i < pcoin->vout.size(); i++)"
      },
      {
        "sha": "639f51e3cae1cb3d3d0d7570bd6868f6e6151041",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/519dd1c89afa2b7d0f2720eb70cd11de23d61006/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/519dd1c89afa2b7d0f2720eb70cd11de23d61006/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=519dd1c89afa2b7d0f2720eb70cd11de23d61006",
        "patch": "@@ -315,7 +315,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     }\n     bool IsFromMe(const CTransaction& tx) const     // should probably be renamed to IsRelevantToMe\n     {\n-        return (GetDebit(tx, MINE_SPENDABLE|MINE_WATCH_ONLY) > 0);\n+        return (GetDebit(tx, MINE_ALL) > 0);\n     }\n     bool IsConflicting(const CTransaction& tx) const\n     {\n@@ -655,7 +655,7 @@ class CWalletTx : public CMerkleTx\n         // GetBalance can assume transactions in mapWallet won't change\n         if (fUseCache && fCreditCached)\n             return nCreditCached;\n-        nCreditCached = pwallet->GetCredit(*this, MINE_SPENDABLE|MINE_WATCH_ONLY);\n+        nCreditCached = pwallet->GetCredit(*this, MINE_ALL);\n         fCreditCached = true;\n         return nCreditCached;\n     }\n@@ -777,7 +777,7 @@ class CWalletTx : public CMerkleTx\n             return true;\n         if (nDepth < 0)\n             return false;\n-        if (!bSpendZeroConfChange || !IsFromMe(MINE_SPENDABLE|MINE_WATCH_ONLY)) // using wtx's cached debit\n+        if (!bSpendZeroConfChange || !IsFromMe(MINE_ALL)) // using wtx's cached debit\n             return false;\n \n         // Trusted if all inputs are from us and are in the mempool:"
      }
    ]
  },
  {
    "sha": "f28707a845d4098fed55a6948887d60043fcfde7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjg3MDdhODQ1ZDQwOThmZWQ1NWE2OTQ4ODg3ZDYwMDQzZmNmZGU3",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-06-22T21:29:33Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:40Z"
      },
      "message": "fixed bug in ListReceived()",
      "tree": {
        "sha": "c39604420c1ce4231784186d7909bd06a197b262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c39604420c1ce4231784186d7909bd06a197b262"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f28707a845d4098fed55a6948887d60043fcfde7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f28707a845d4098fed55a6948887d60043fcfde7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f28707a845d4098fed55a6948887d60043fcfde7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f28707a845d4098fed55a6948887d60043fcfde7/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "519dd1c89afa2b7d0f2720eb70cd11de23d61006",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/519dd1c89afa2b7d0f2720eb70cd11de23d61006",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/519dd1c89afa2b7d0f2720eb70cd11de23d61006"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "560be0570af42d46aab33bbbc4d21e964ef15d83",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f28707a845d4098fed55a6948887d60043fcfde7/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f28707a845d4098fed55a6948887d60043fcfde7/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=f28707a845d4098fed55a6948887d60043fcfde7",
        "patch": "@@ -978,7 +978,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n                 continue;\n \n             isminefilter mine = IsMine(*pwalletMain, address);\n-            if(!mine & filter)\n+            if(!(mine & filter))\n                 continue;\n \n             tallyitem& item = mapTally[address];"
      }
    ]
  },
  {
    "sha": "53a2148f0c182b83da255972acb3110a74e9957a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2EyMTQ4ZjBjMTgyYjgzZGEyNTU5NzJhY2IzMTEwYTc0ZTk5NTdh",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-06-23T08:43:30Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:40Z"
      },
      "message": "fixed bug where validateaddress doesn't display information",
      "tree": {
        "sha": "2092a5eb8fb3a28e3a2bc566a323bb8824a521b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2092a5eb8fb3a28e3a2bc566a323bb8824a521b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53a2148f0c182b83da255972acb3110a74e9957a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53a2148f0c182b83da255972acb3110a74e9957a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53a2148f0c182b83da255972acb3110a74e9957a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53a2148f0c182b83da255972acb3110a74e9957a/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f28707a845d4098fed55a6948887d60043fcfde7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f28707a845d4098fed55a6948887d60043fcfde7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f28707a845d4098fed55a6948887d60043fcfde7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "56accc1b3abe7cf1dea8e5ef2e882a806c9d12e3",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53a2148f0c182b83da255972acb3110a74e9957a/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53a2148f0c182b83da255972acb3110a74e9957a/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=53a2148f0c182b83da255972acb3110a74e9957a",
        "patch": "@@ -115,7 +115,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n     Object operator()(const CScriptID &scriptID) const {\n         Object obj;\n         obj.push_back(Pair(\"isscript\", true));\n-        if (mine == MINE_SPENDABLE) {\n+        if (mine != MINE_NO) {\n             CScript subscript;\n             pwalletMain->GetCScript(scriptID, subscript);\n             std::vector<CTxDestination> addresses;"
      }
    ]
  },
  {
    "sha": "a3e192a3274817517671f624d5744297905e20d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2UxOTJhMzI3NDgxNzUxNzY3MWY2MjRkNTc0NDI5NzkwNWUyMGQy",
    "commit": {
      "author": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-01T09:00:22Z"
      },
      "committer": {
        "name": "JaSK",
        "email": "temp@temp.temp",
        "date": "2014-07-02T13:48:40Z"
      },
      "message": "replaced MINE_ with ISMINE_",
      "tree": {
        "sha": "33ad109f1fa040134cfd29b8c321614816db2978",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33ad109f1fa040134cfd29b8c321614816db2978"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3e192a3274817517671f624d5744297905e20d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3e192a3274817517671f624d5744297905e20d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3e192a3274817517671f624d5744297905e20d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3e192a3274817517671f624d5744297905e20d2/comments",
    "author": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdkfjlsfjlskdfjlsdjflsjf",
      "id": 48719704,
      "node_id": "MDQ6VXNlcjQ4NzE5NzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/48719704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf",
      "html_url": "https://github.com/sdkfjlsfjlskdfjlsdjflsjf",
      "followers_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/followers",
      "following_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/subscriptions",
      "organizations_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/orgs",
      "repos_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/repos",
      "events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdkfjlsfjlskdfjlsdjflsjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53a2148f0c182b83da255972acb3110a74e9957a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53a2148f0c182b83da255972acb3110a74e9957a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53a2148f0c182b83da255972acb3110a74e9957a"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 75,
      "deletions": 75
    },
    "files": [
      {
        "sha": "36e4d50e30014939b251a866b8f071ac43154545",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e192a3274817517671f624d5744297905e20d2/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e192a3274817517671f624d5744297905e20d2/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=a3e192a3274817517671f624d5744297905e20d2",
        "patch": "@@ -55,8 +55,8 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n     int64_t nTime = wtx.GetTxTime();\n-    int64_t nCredit = wtx.GetCredit(MINE_ALL);\n-    int64_t nDebit = wtx.GetDebit(MINE_ALL);\n+    int64_t nCredit = wtx.GetCredit(ISMINE_ALL);\n+    int64_t nDebit = wtx.GetDebit(ISMINE_ALL);\n     int64_t nNet = nCredit - nDebit;\n \n     strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx);\n@@ -98,7 +98,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                     strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"unknown\") + \"<br>\";\n                     strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n                     strHTML += GUIUtil::HtmlEscape(rec->address);\n-                    QString addressOwned = (::IsMine(*wallet, address) == MINE_SPENDABLE) ? tr(\"own address\") : tr(\"watch-only\");\n+                    QString addressOwned = (::IsMine(*wallet, address) == ISMINE_SPENDABLE) ? tr(\"own address\") : tr(\"watch-only\");\n                     if (!wallet->mapAddressBook[address].name.empty())\n                         strHTML += \" (\" + addressOwned + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \")\";\n                     else\n@@ -133,7 +133,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         //\n         int64_t nUnmatured = 0;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-            nUnmatured += wallet->GetCredit(txout, MINE_ALL);\n+            nUnmatured += wallet->GetCredit(txout, ISMINE_ALL);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n         if (wtx.IsInMainChain())\n             strHTML += BitcoinUnits::formatWithUnit(unit, nUnmatured)+ \" (\" + tr(\"matures in %n more block(s)\", \"\", wtx.GetBlocksToMaturity()) + \")\";\n@@ -150,14 +150,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     }\n     else\n     {\n-        isminetype fAllFromMe = MINE_SPENDABLE;\n+        isminetype fAllFromMe = ISMINE_SPENDABLE;\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n-        isminetype fAllToMe = MINE_SPENDABLE;\n+        isminetype fAllToMe = ISMINE_SPENDABLE;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n@@ -166,7 +166,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n \n         if (fAllFromMe)\n         {\n-            if(fAllFromMe == MINE_WATCH_ONLY)\n+            if(fAllFromMe == ISMINE_WATCH_ONLY)\n                 strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"watch-only\") + \"<br>\";\n \n             //\n@@ -176,7 +176,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             {\n                 // Ignore change\n                 isminetype toSelf = wallet->IsMine(txout);\n-                if ((toSelf == MINE_SPENDABLE) && (fAllFromMe == MINE_SPENDABLE))\n+                if ((toSelf == ISMINE_SPENDABLE) && (fAllFromMe == ISMINE_SPENDABLE))\n                     continue;\n \n                 if (!wtx.mapValue.count(\"to\") || wtx.mapValue[\"to\"].empty())\n@@ -189,9 +189,9 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                         if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].name.empty())\n                             strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \" \";\n                         strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n-                        if(toSelf == MINE_SPENDABLE)\n+                        if(toSelf == ISMINE_SPENDABLE)\n                             strHTML += \" (own address)\";\n-                        else if(toSelf == MINE_WATCH_ONLY)\n+                        else if(toSelf == ISMINE_WATCH_ONLY)\n                             strHTML += \" (watch-only)\";\n                         strHTML += \"<br>\";\n                     }\n@@ -222,10 +222,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             //\n             BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                 if (wallet->IsMine(txin))\n-                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin, MINE_ALL)) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 if (wallet->IsMine(txout))\n-                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout, MINE_ALL)) + \"<br>\";\n+                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n         }\n     }\n \n@@ -275,10 +275,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         strHTML += \"<hr><br>\" + tr(\"Debug information\") + \"<br><br>\";\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n             if(wallet->IsMine(txin))\n-                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin, MINE_ALL)) + \"<br>\";\n+                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             if(wallet->IsMine(txout))\n-                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout, MINE_ALL)) + \"<br>\";\n+                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n \n         strHTML += \"<br><b>\" + tr(\"Transaction\") + \":</b><br>\";\n         strHTML += GUIUtil::HtmlEscape(wtx.ToString(), true);\n@@ -305,8 +305,8 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                         strHTML += QString::fromStdString(CBitcoinAddress(address).ToString());\n                     }\n                     strHTML = strHTML + \" \" + tr(\"Amount\") + \"=\" + BitcoinUnits::formatWithUnit(unit, vout.nValue);\n-                    strHTML = strHTML + \" IsMine=\" + (wallet->IsMine(vout) & MINE_SPENDABLE ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n-                    strHTML = strHTML + \" IsWatchOnly=\" + (wallet->IsMine(vout) & MINE_WATCH_ONLY ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n+                    strHTML = strHTML + \" IsMine=\" + (wallet->IsMine(vout) & ISMINE_SPENDABLE ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n+                    strHTML = strHTML + \" IsWatchOnly=\" + (wallet->IsMine(vout) & ISMINE_WATCH_ONLY ? tr(\"true\") : tr(\"false\")) + \"</li>\";\n                 }\n             }\n         }"
      },
      {
        "sha": "7d29c212b31093e4472ca0f7c6f3fb4040b619ef",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e192a3274817517671f624d5744297905e20d2/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e192a3274817517671f624d5744297905e20d2/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=a3e192a3274817517671f624d5744297905e20d2",
        "patch": "@@ -33,7 +33,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     QList<TransactionRecord> parts;\n     int64_t nTime = wtx.GetTxTime();\n     int64_t nCredit = wtx.GetCredit(true);\n-    int64_t nDebit = wtx.GetDebit(MINE_ALL);\n+    int64_t nDebit = wtx.GetDebit(ISMINE_ALL);\n     int64_t nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;\n@@ -52,7 +52,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 CTxDestination address;\n                 sub.idx = parts.size(); // sequence number\n                 sub.credit = txout.nValue;\n-                sub.involvesWatchAddress = mine == MINE_WATCH_ONLY;\n+                sub.involvesWatchAddress = mine == ISMINE_WATCH_ONLY;\n                 if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n                 {\n                     // Received by Bitcoin Address\n@@ -78,19 +78,19 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     else\n     {\n         bool involvesWatchAddress = false;\n-        isminetype fAllFromMe = MINE_SPENDABLE;\n+        isminetype fAllFromMe = ISMINE_SPENDABLE;\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n-            if(mine == MINE_WATCH_ONLY) involvesWatchAddress = true;\n+            if(mine == ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n-        isminetype fAllToMe = MINE_SPENDABLE;\n+        isminetype fAllToMe = ISMINE_SPENDABLE;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n-            if(mine == MINE_WATCH_ONLY) involvesWatchAddress = true;\n+            if(mine == ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllToMe > mine) fAllToMe = mine;\n         }\n "
      },
      {
        "sha": "f51be2db2c482cc6a3db2dc30af7a01970b8b7ee",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e192a3274817517671f624d5744297905e20d2/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e192a3274817517671f624d5744297905e20d2/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=a3e192a3274817517671f624d5744297905e20d2",
        "patch": "@@ -104,7 +104,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n         Object obj;\n         CPubKey vchPubKey;\n         obj.push_back(Pair(\"isscript\", false));\n-        if (mine == MINE_SPENDABLE) {\n+        if (mine == ISMINE_SPENDABLE) {\n             pwalletMain->GetPubKey(keyID, vchPubKey);\n             obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n             obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n@@ -115,7 +115,7 @@ class DescribeAddressVisitor : public boost::static_visitor<Object>\n     Object operator()(const CScriptID &scriptID) const {\n         Object obj;\n         obj.push_back(Pair(\"isscript\", true));\n-        if (mine != MINE_NO) {\n+        if (mine != ISMINE_NO) {\n             CScript subscript;\n             pwalletMain->GetCScript(scriptID, subscript);\n             std::vector<CTxDestination> addresses;\n@@ -170,10 +170,10 @@ Value validateaddress(const Array& params, bool fHelp)\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n #ifdef ENABLE_WALLET\n-        isminetype mine = pwalletMain ? IsMine(*pwalletMain, dest) : MINE_NO;\n-        ret.push_back(Pair(\"ismine\", (mine & MINE_SPENDABLE) ? true : false));\n-        if (mine != MINE_NO) {\n-            ret.push_back(Pair(\"iswatchonly\", (mine & MINE_WATCH_ONLY) ? true: false));\n+        isminetype mine = pwalletMain ? IsMine(*pwalletMain, dest) : ISMINE_NO;\n+        ret.push_back(Pair(\"ismine\", (mine & ISMINE_SPENDABLE) ? true : false));\n+        if (mine != ISMINE_NO) {\n+            ret.push_back(Pair(\"iswatchonly\", (mine & ISMINE_WATCH_ONLY) ? true: false));\n             Object detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);\n             ret.insert(ret.end(), detail.begin(), detail.end());\n         }"
      },
      {
        "sha": "190c6b86b5d110052360880e9f4b20b0018ed8c6",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e192a3274817517671f624d5744297905e20d2/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e192a3274817517671f624d5744297905e20d2/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a3e192a3274817517671f624d5744297905e20d2",
        "patch": "@@ -623,10 +623,10 @@ Value getbalance(const Array& params, bool fHelp)\n     int nMinDepth = 1;\n     if (params.size() > 1)\n         nMinDepth = params[1].get_int();\n-    isminefilter filter = MINE_SPENDABLE;\n+    isminefilter filter = ISMINE_SPENDABLE;\n     if(params.size() > 2)\n         if(params[2].get_bool())\n-            filter = filter | MINE_WATCH_ONLY;\n+            filter = filter | ISMINE_WATCH_ONLY;\n \n     if (params[0].get_str() == \"*\") {\n         // Calculate total balance a different way from GetBalance()\n@@ -786,7 +786,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, MINE_SPENDABLE);\n+    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -863,7 +863,7 @@ Value sendmany(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, MINE_SPENDABLE);\n+    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -953,10 +953,10 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     if (params.size() > 1)\n         fIncludeEmpty = params[1].get_bool();\n \n-    isminefilter filter = MINE_SPENDABLE;\n+    isminefilter filter = ISMINE_SPENDABLE;\n     if(params.size() > 2)\n         if(params[2].get_bool())\n-            filter = filter | MINE_WATCH_ONLY;\n+            filter = filter | ISMINE_WATCH_ONLY;\n \n     // Tally\n     map<CBitcoinAddress, tallyitem> mapTally;\n@@ -985,7 +985,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n             item.nAmount += txout.nValue;\n             item.nConf = min(item.nConf, nDepth);\n             item.txids.push_back(wtx.GetHash());\n-            if (mine & MINE_WATCH_ONLY)\n+            if (mine & ISMINE_WATCH_ONLY)\n                 item.fIsWatchonly = true;\n         }\n     }\n@@ -1139,15 +1139,15 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, filter);\n \n     bool fAllAccounts = (strAccount == string(\"*\"));\n-    bool involvesWatchonly = wtx.IsFromMe(MINE_WATCH_ONLY);\n+    bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n \n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n         BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n         {\n             Object entry;\n-            if(involvesWatchonly || (::IsMine(*pwalletMain, s.first) & MINE_WATCH_ONLY))\n+            if(involvesWatchonly || (::IsMine(*pwalletMain, s.first) & ISMINE_WATCH_ONLY))\n                 entry.push_back(Pair(\"involvesWatchonly\", true));\n             entry.push_back(Pair(\"account\", strSentAccount));\n             MaybePushAddress(entry, s.first);\n@@ -1171,7 +1171,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n             if (fAllAccounts || (account == strAccount))\n             {\n                 Object entry;\n-                if(involvesWatchonly || (::IsMine(*pwalletMain, r.first) & MINE_WATCH_ONLY))\n+                if(involvesWatchonly || (::IsMine(*pwalletMain, r.first) & ISMINE_WATCH_ONLY))\n                     entry.push_back(Pair(\"involvesWatchonly\", true));\n                 entry.push_back(Pair(\"account\", account));\n                 MaybePushAddress(entry, r.first);\n@@ -1285,10 +1285,10 @@ Value listtransactions(const Array& params, bool fHelp)\n     int nFrom = 0;\n     if (params.size() > 2)\n         nFrom = params[2].get_int();\n-    isminefilter filter = MINE_SPENDABLE;\n+    isminefilter filter = ISMINE_SPENDABLE;\n     if(params.size() > 3)\n         if(params[3].get_bool())\n-            filter = filter | MINE_WATCH_ONLY;\n+            filter = filter | ISMINE_WATCH_ONLY;\n \n     if (nCount < 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n@@ -1359,10 +1359,10 @@ Value listaccounts(const Array& params, bool fHelp)\n     int nMinDepth = 1;\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n-    isminefilter includeWatchonly = MINE_SPENDABLE;\n+    isminefilter includeWatchonly = ISMINE_SPENDABLE;\n     if(params.size() > 1)\n         if(params[1].get_bool())\n-            includeWatchonly = includeWatchonly | MINE_WATCH_ONLY;\n+            includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n     map<string, int64_t> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n@@ -1451,7 +1451,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n     CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n-    isminefilter filter = MINE_SPENDABLE;\n+    isminefilter filter = ISMINE_SPENDABLE;\n \n     if (params.size() > 0)\n     {\n@@ -1473,7 +1473,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n \n     if(params.size() > 2)\n         if(params[2].get_bool())\n-            filter = filter | MINE_WATCH_ONLY;\n+            filter = filter | ISMINE_WATCH_ONLY;\n \n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n \n@@ -1542,10 +1542,10 @@ Value gettransaction(const Array& params, bool fHelp)\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n-    isminefilter filter = MINE_SPENDABLE;\n+    isminefilter filter = ISMINE_SPENDABLE;\n     if(params.size() > 1)\n         if(params[1].get_bool())\n-            filter = filter | MINE_WATCH_ONLY;\n+            filter = filter | ISMINE_WATCH_ONLY;\n \n     Object entry;\n     if (!pwalletMain->mapWallet.count(hash))"
      },
      {
        "sha": "238a25e72d7d08a2c290bcc0e575e72f961e1e35",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e192a3274817517671f624d5744297905e20d2/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e192a3274817517671f624d5744297905e20d2/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=a3e192a3274817517671f624d5744297905e20d2",
        "patch": "@@ -1469,8 +1469,8 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {\n         if (keystore.HaveWatchOnly(scriptPubKey))\n-            return MINE_WATCH_ONLY;\n-        return MINE_NO;\n+            return ISMINE_WATCH_ONLY;\n+        return ISMINE_NO;\n     }\n \n     CKeyID keyID;\n@@ -1482,20 +1482,20 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n         if (keystore.HaveKey(keyID))\n-            return MINE_SPENDABLE;\n+            return ISMINE_SPENDABLE;\n         break;\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n         if (keystore.HaveKey(keyID))\n-            return MINE_SPENDABLE;\n+            return ISMINE_SPENDABLE;\n         break;\n     case TX_SCRIPTHASH:\n     {\n         CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n             isminetype ret = IsMine(keystore, subscript);\n-            if (ret == MINE_SPENDABLE)\n+            if (ret == ISMINE_SPENDABLE)\n                 return ret;\n         }\n         break;\n@@ -1509,14 +1509,14 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         // in shared-wallet situations.\n         vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n         if (HaveKeys(keys, keystore) == keys.size())\n-            return MINE_SPENDABLE;\n+            return ISMINE_SPENDABLE;\n         break;\n     }\n     }\n \n     if (keystore.HaveWatchOnly(scriptPubKey))\n-        return MINE_WATCH_ONLY;\n-    return MINE_NO;\n+        return ISMINE_WATCH_ONLY;\n+    return ISMINE_NO;\n }\n \n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)"
      },
      {
        "sha": "e36be2db9e33957e98a760adc724f2bad3f16757",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e192a3274817517671f624d5744297905e20d2/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e192a3274817517671f624d5744297905e20d2/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=a3e192a3274817517671f624d5744297905e20d2",
        "patch": "@@ -197,10 +197,10 @@ enum\n /** IsMine() return codes */\n enum isminetype\n {\n-    MINE_NO = 0,\n-    MINE_WATCH_ONLY = 1,\n-    MINE_SPENDABLE = 2,\n-    MINE_ALL = MINE_WATCH_ONLY | MINE_SPENDABLE\n+    ISMINE_NO = 0,\n+    ISMINE_WATCH_ONLY = 1,\n+    ISMINE_SPENDABLE = 2,\n+    ISMINE_ALL = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE\n };\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;"
      },
      {
        "sha": "84b50c0f8cc0e147c9c1340d2c7fbf765fd2b2b1",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e192a3274817517671f624d5744297905e20d2/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e192a3274817517671f624d5744297905e20d2/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a3e192a3274817517671f624d5744297905e20d2",
        "patch": "@@ -707,7 +707,7 @@ isminetype CWallet::IsMine(const CTxIn &txin) const\n                 return IsMine(prev.vout[txin.prevout.n]);\n         }\n     }\n-    return MINE_NO;\n+    return ISMINE_NO;\n }\n \n int64_t CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n@@ -1139,10 +1139,10 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n \n             for (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n                 isminetype mine = IsMine(pcoin->vout[i]);\n-                if (!(IsSpent(wtxid, i)) && mine != MINE_NO &&\n+                if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&\n                     !IsLockedCoin((*it).first, i) && pcoin->vout[i].nValue > 0 &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->IsSelected((*it).first, i)))\n-                        vCoins.push_back(COutput(pcoin, i, nDepth, mine & MINE_SPENDABLE));\n+                        vCoins.push_back(COutput(pcoin, i, nDepth, mine & ISMINE_SPENDABLE));\n             }\n         }\n     }\n@@ -1216,7 +1216,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n \n         const CWalletTx *pcoin = output.tx;\n \n-        if (output.nDepth < (pcoin->IsFromMe(MINE_ALL) ? nConfMine : nConfTheirs))\n+        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n             continue;\n \n         int i = output.i;\n@@ -1845,7 +1845,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n                 continue;\n \n             int nDepth = pcoin->GetDepthInMainChain();\n-            if (nDepth < (pcoin->IsFromMe(MINE_ALL) ? 0 : 1))\n+            if (nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? 0 : 1))\n                 continue;\n \n             for (unsigned int i = 0; i < pcoin->vout.size(); i++)"
      },
      {
        "sha": "8a51bf9821d88f6edd397ab73984adf2e295f7b3",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e192a3274817517671f624d5744297905e20d2/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e192a3274817517671f624d5744297905e20d2/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=a3e192a3274817517671f624d5744297905e20d2",
        "patch": "@@ -315,7 +315,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     }\n     bool IsFromMe(const CTransaction& tx) const     // should probably be renamed to IsRelevantToMe\n     {\n-        return (GetDebit(tx, MINE_ALL) > 0);\n+        return (GetDebit(tx, ISMINE_ALL) > 0);\n     }\n     bool IsConflicting(const CTransaction& tx) const\n     {\n@@ -621,24 +621,24 @@ class CWalletTx : public CMerkleTx\n             return 0;\n \n         int64_t debit = 0;\n-        if(filter & MINE_SPENDABLE)\n+        if(filter & ISMINE_SPENDABLE)\n         {\n             if (fDebitCached)\n                 debit += nDebitCached;\n             else\n             {\n-                nDebitCached = pwallet->GetDebit(*this, MINE_SPENDABLE);\n+                nDebitCached = pwallet->GetDebit(*this, ISMINE_SPENDABLE);\n                 fDebitCached = true;\n                 debit += nDebitCached;\n             }\n         }\n-        if(filter & MINE_WATCH_ONLY)\n+        if(filter & ISMINE_WATCH_ONLY)\n         {\n             if(fWatchDebitCached)\n                 debit += nWatchDebitCached;\n             else\n             {\n-                nWatchDebitCached = pwallet->GetDebit(*this, MINE_WATCH_ONLY);\n+                nWatchDebitCached = pwallet->GetDebit(*this, ISMINE_WATCH_ONLY);\n                 fWatchDebitCached = true;\n                 debit += nWatchDebitCached;\n             }\n@@ -655,7 +655,7 @@ class CWalletTx : public CMerkleTx\n         // GetBalance can assume transactions in mapWallet won't change\n         if (fUseCache && fCreditCached)\n             return nCreditCached;\n-        nCreditCached = pwallet->GetCredit(*this, MINE_ALL);\n+        nCreditCached = pwallet->GetCredit(*this, ISMINE_ALL);\n         fCreditCached = true;\n         return nCreditCached;\n     }\n@@ -666,7 +666,7 @@ class CWalletTx : public CMerkleTx\n         {\n             if (fUseCache && fImmatureCreditCached)\n                 return nImmatureCreditCached;\n-            nImmatureCreditCached = pwallet->GetCredit(*this, MINE_SPENDABLE);\n+            nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n             fImmatureCreditCached = true;\n             return nImmatureCreditCached;\n         }\n@@ -693,7 +693,7 @@ class CWalletTx : public CMerkleTx\n             if (!pwallet->IsSpent(hashTx, i))\n             {\n                 const CTxOut &txout = vout[i];\n-                nCredit += pwallet->GetCredit(txout, MINE_SPENDABLE);\n+                nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n                 if (!MoneyRange(nCredit))\n                     throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n             }\n@@ -710,7 +710,7 @@ class CWalletTx : public CMerkleTx\n         {\n             if (fUseCache && fImmatureWatchCreditCached)\n                 return nImmatureWatchCreditCached;\n-            nImmatureWatchCreditCached = pwallet->GetCredit(*this, MINE_WATCH_ONLY);\n+            nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n             fImmatureWatchCreditCached = true;\n             return nImmatureWatchCreditCached;\n         }\n@@ -736,7 +736,7 @@ class CWalletTx : public CMerkleTx\n             if (!pwallet->IsSpent(GetHash(), i))\n             {\n                 const CTxOut &txout = vout[i];\n-                nCredit += pwallet->GetCredit(txout, MINE_WATCH_ONLY);\n+                nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n                 if (!MoneyRange(nCredit))\n                     throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n             }\n@@ -777,7 +777,7 @@ class CWalletTx : public CMerkleTx\n             return true;\n         if (nDepth < 0)\n             return false;\n-        if (!bSpendZeroConfChange || !IsFromMe(MINE_ALL)) // using wtx's cached debit\n+        if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n             return false;\n \n         // Trusted if all inputs are from us and are in the mempool:\n@@ -788,7 +788,7 @@ class CWalletTx : public CMerkleTx\n             if (parent == NULL)\n                 return false;\n             const CTxOut& parentOut = parent->vout[txin.prevout.n];\n-            if (pwallet->IsMine(parentOut) != MINE_SPENDABLE)\n+            if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n                 return false;\n         }\n         return true;"
      }
    ]
  }
]