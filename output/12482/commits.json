[
  {
    "sha": "b156ff7c30175f5d23bde97a56a2c34af2196466",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTU2ZmY3YzMwMTc1ZjVkMjNiZGU5N2E1NmEyYzM0YWYyMTk2NDY2",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-03-06T21:48:15Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-03-06T21:48:15Z"
      },
      "message": "[tests] bind functional test nodes to 127.0.0.1\n\nPrevents OSX firewall allow-this-application-to-accept-inbound-connections\npermission popups and is generally safer.\n\nTo prevent binding to 127.0.0.1, set self.bind_to_localhost_only = False.",
      "tree": {
        "sha": "2dbaaf83b0c4b0692269ad762917d8feb48a02b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2dbaaf83b0c4b0692269ad762917d8feb48a02b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b156ff7c30175f5d23bde97a56a2c34af2196466",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlqfDKIACgkQV/+b28ww\nEAnhig//SO8lL66gQKPfw2EqImqaNMAD3aWYbmTcrMZ9aYHlOVG/1aCzC4GZqzOQ\nvggD0ewc9Bo5kwJGbdDkKY7jx2KBNJlx2S/XgF1Rn2ivKNSaolgmVExhWkGy6oeE\nN/p28KOwpspxI7CzZhwZFF1v4EBX9fpx56XOUIT84GCfdEqho/HrmDFgpno/9D8q\nwsP6t3Br2vu8r5+Wn+uahJtt/8Ujkv+gfIhktsuQNe0g/0jG+u57IIg4nAiHo/+t\ngCCvnOwf62fmtiILZ1Xs0NscBTU0sCG44I+5II6YO460TRWnqk0HNhoAUmv2hpbT\nn4Qx6eG6RF1ruPh1hfrufr5ojRN/sCt5xp4v83qu9ucKvoO229a/NG8oAijOGfBh\nLyC9vFJahIQk6CGji8f4F1++L9UMOaMZjyBeyeZYVgoSXF4Px2c6+BfRgeymrwpD\nsBtQquM094BuaYahDnf2EP9g4vLVxGprvEqAopUlur+qc2MlK0Bt2TUHjlDhk3za\n8PofbnvhfQrx3nfb25c8AyaMXp1+qhuxGEnF78c9U8NN57csp+5bc56hLL9Kw+6R\n2gTZ4Rgst0RUsNr+ts8gxKbb4ph+1lpYK7RWUxQtPP46dtnWEwu5Oq0w+GNXwdBL\nNO+n8D44qV2PzeUU3LxRVlSR9yUAWHSNJu0/IuSBTqEsP+dY2Fw=\n=kiKY\n-----END PGP SIGNATURE-----",
        "payload": "tree 2dbaaf83b0c4b0692269ad762917d8feb48a02b2\nparent d3f4dd313e5fe58903caf2f4d04827e7f7944e17\nauthor Sjors Provoost <sjors@sprovoost.nl> 1520372895 -0500\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1520372895 -0500\n\n[tests] bind functional test nodes to 127.0.0.1\n\nPrevents OSX firewall allow-this-application-to-accept-inbound-connections\npermission popups and is generally safer.\n\nTo prevent binding to 127.0.0.1, set self.bind_to_localhost_only = False.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b156ff7c30175f5d23bde97a56a2c34af2196466",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b156ff7c30175f5d23bde97a56a2c34af2196466",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b156ff7c30175f5d23bde97a56a2c34af2196466/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f4dd313e5fe58903caf2f4d04827e7f7944e17"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 21,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d43c2cd5d088856db5f7d27a2102c11c10d4c6b8",
        "filename": "test/functional/rpc_bind.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/rpc_bind.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/rpc_bind.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_bind.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -14,6 +14,7 @@\n class RPCBindTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n+        self.bind_to_localhost_only = False\n         self.num_nodes = 1\n \n     def setup_network(self):"
      },
      {
        "sha": "86c1150abd323aa2cdb9808f9fa74857773fc6e9",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -63,6 +63,7 @@ def __init__(self):\n         self.nodes = []\n         self.mocktime = 0\n         self.supports_cli = False\n+        self.bind_to_localhost_only = True\n         self.set_test_params()\n \n         assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n@@ -215,15 +216,19 @@ def run_test(self):\n \n     def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, binary=None):\n         \"\"\"Instantiate TestNode objects\"\"\"\n-\n+        if self.bind_to_localhost_only:\n+            extra_confs = [[\"bind=127.0.0.1\"]] * num_nodes\n+        else:\n+            extra_confs = [[]] * num_nodes\n         if extra_args is None:\n             extra_args = [[]] * num_nodes\n         if binary is None:\n             binary = [None] * num_nodes\n+        assert_equal(len(extra_confs), num_nodes)\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, use_cli=self.options.usecli))\n+            self.nodes.append(TestNode(i, self.options.tmpdir, rpchost=rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, extra_conf=extra_confs[i], extra_args=extra_args[i], use_cli=self.options.usecli))\n \n     def start_node(self, i, *args, **kwargs):\n         \"\"\"Start a bitcoind\"\"\"\n@@ -395,7 +400,7 @@ def _initialize_chain(self):\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\" + datadir]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes.append(TestNode(i, self.options.cachedir, extra_conf=[\"bind=127.0.0.1\"], extra_args=[],rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n                 self.start_node(i)\n "
      },
      {
        "sha": "86e44e4c970e8babef9f140a0527a9e9b1ca01c9",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -16,6 +16,7 @@\n \n from .authproxy import JSONRPCException\n from .util import (\n+    append_config,\n     assert_equal,\n     get_rpc_proxy,\n     rpc_url,\n@@ -42,7 +43,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mocktime, coverage_dir, use_cli=False):\n+    def __init__(self, i, dirname, rpchost, timewait, binary, stderr, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n         self.index = i\n         self.datadir = os.path.join(dirname, \"node\" + str(i))\n         self.rpchost = rpchost\n@@ -57,6 +58,8 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n             self.binary = binary\n         self.stderr = stderr\n         self.coverage_dir = coverage_dir\n+        if extra_conf != None:\n+            append_config(dirname, i, extra_conf)\n         # Most callers will just need to add extra args to the standard list below.\n         # For those callers that need more flexibity, they can just set the args property directly.\n         # Note that common args are set in the config file (see initialize_datadir)"
      },
      {
        "sha": "a4b8d5af023a9a524c6d33dc15f38c71f4789f51",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -300,6 +300,12 @@ def initialize_datadir(dirname, n):\n def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\" + str(n))\n \n+def append_config(dirname, n, options):\n+    datadir = get_datadir_path(dirname, n)\n+    with open(os.path.join(datadir, \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+        for option in options:\n+            f.write(option + \"\\n\")\n+\n def get_auth_cookie(datadir):\n     user = None\n     password = None"
      },
      {
        "sha": "68a203150b37ba5df3e379e2fad44d58dbe26f53",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -84,7 +84,7 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.add_nodes(self.num_nodes, self.extra_args, timewait=60)\n+        self.add_nodes(self.num_nodes, extra_args=self.extra_args, timewait=60)\n         self.start_nodes()\n \n     def run_test (self):"
      },
      {
        "sha": "bfd46384815cbabcf2505afc0dc97e70082948c7",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -124,7 +124,7 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.add_nodes(self.num_nodes, extra_args)\n+        self.add_nodes(self.num_nodes, extra_args=extra_args)\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)"
      }
    ]
  }
]