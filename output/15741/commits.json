[
  {
    "sha": "366fe0be0b9b9691b7d26f9b592e586112ef645b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjZmZTBiZTBiOWI5NjkxYjdkMjZmOWI1OTJlNTg2MTEyZWY2NDVi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-03T22:56:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-18T16:57:58Z"
      },
      "message": "Add AddWatchOnlyWithDB, AddKeyOriginWithDB, AddCScriptWithDB functions\n\nAddWatchOnlyWithDB, AddKeyOriginWithDB, and AddCScriptWithDB add their\nrespective data to the wallet using the provided WalletBatch instead\nof creating a new WalletBatch object every time. This allows for batching\nwrites to the database.",
      "tree": {
        "sha": "a92cca77fb97ffd2f0627fedf5fd18a9a6e82279",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a92cca77fb97ffd2f0627fedf5fd18a9a6e82279"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/366fe0be0b9b9691b7d26f9b592e586112ef645b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/366fe0be0b9b9691b7d26f9b592e586112ef645b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/366fe0be0b9b9691b7d26f9b592e586112ef645b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/366fe0be0b9b9691b7d26f9b592e586112ef645b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56376f336548b53cf31e98a58dfb4db22cede6e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56376f336548b53cf31e98a58dfb4db22cede6e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56376f336548b53cf31e98a58dfb4db22cede6e5"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 27,
      "deletions": 14
    },
    "files": [
      {
        "sha": "bf2edb67deeffc649a54a4366ed63f07211e0df9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 11,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/366fe0be0b9b9691b7d26f9b592e586112ef645b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/366fe0be0b9b9691b7d26f9b592e586112ef645b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=366fe0be0b9b9691b7d26f9b592e586112ef645b",
        "patch": "@@ -362,12 +362,6 @@ void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata&\n     m_script_metadata[script_id] = meta;\n }\n \n-// Writes a keymetadata for a public key. overwrite specifies whether to overwrite an existing metadata for that key if there exists one.\n-bool CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)\n-{\n-    return WalletBatch(*database).WriteKeyMetadata(meta, pubkey, overwrite);\n-}\n-\n void CWallet::UpgradeKeyMetadata()\n {\n     AssertLockHeld(cs_wallet);\n@@ -432,10 +426,16 @@ void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n }\n \n bool CWallet::AddCScript(const CScript& redeemScript)\n+{\n+    WalletBatch batch(*database);\n+    return AddCScriptWithDB(batch, redeemScript);\n+}\n+\n+bool CWallet::AddCScriptWithDB(WalletBatch& batch, const CScript& redeemScript)\n {\n     if (!CCryptoKeyStore::AddCScript(redeemScript))\n         return false;\n-    if (WalletBatch(*database).WriteCScript(Hash160(redeemScript), redeemScript)) {\n+    if (batch.WriteCScript(Hash160(redeemScript), redeemScript)) {\n         UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n         return true;\n     }\n@@ -457,20 +457,32 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return CCryptoKeyStore::AddCScript(redeemScript);\n }\n \n-bool CWallet::AddWatchOnly(const CScript& dest)\n+bool CWallet::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest)\n {\n     if (!CCryptoKeyStore::AddWatchOnly(dest))\n         return false;\n     const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n     UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n-    if (WalletBatch(*database).WriteWatchOnly(dest, meta)) {\n+    if (batch.WriteWatchOnly(dest, meta)) {\n         UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n         return true;\n     }\n     return false;\n }\n \n+bool CWallet::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time)\n+{\n+    m_script_metadata[CScriptID(dest)].nCreateTime = create_time;\n+    return AddWatchOnlyWithDB(batch, dest);\n+}\n+\n+bool CWallet::AddWatchOnly(const CScript& dest)\n+{\n+    WalletBatch batch(*database);\n+    return AddWatchOnlyWithDB(batch, dest);\n+}\n+\n bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n {\n     m_script_metadata[CScriptID(dest)].nCreateTime = nCreateTime;\n@@ -4469,12 +4481,12 @@ bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n     return true;\n }\n \n-bool CWallet::AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info)\n+bool CWallet::AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info)\n {\n     LOCK(cs_wallet);\n     std::copy(info.fingerprint, info.fingerprint + 4, mapKeyMetadata[pubkey.GetID()].key_origin.fingerprint);\n     mapKeyMetadata[pubkey.GetID()].key_origin.path = info.path;\n     mapKeyMetadata[pubkey.GetID()].has_key_origin = true;\n     mapKeyMetadata[pubkey.GetID()].hdKeypath = WriteHDKeypath(info.path);\n-    return WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n+    return batch.WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n }"
      },
      {
        "sha": "487fc31e0d97da58c4d144cb089c2033425f78d1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/366fe0be0b9b9691b7d26f9b592e586112ef645b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/366fe0be0b9b9691b7d26f9b592e586112ef645b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=366fe0be0b9b9691b7d26f9b592e586112ef645b",
        "patch": "@@ -702,6 +702,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n      * nTimeFirstKey more intelligently for more efficient rescans.\n      */\n     bool AddWatchOnly(const CScript& dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /** Interface for accessing chain state. */\n     interfaces::Chain* m_chain;\n@@ -760,8 +761,6 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     // Map from Script ID to key metadata (for watch-only keys).\n     std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_wallet);\n \n-    bool WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, bool overwrite);\n-\n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID = 0;\n@@ -872,6 +871,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddCScript(const CScript& redeemScript) override;\n+    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n     bool LoadCScript(const CScript& redeemScript);\n \n     //! Adds a destination data tuple to the store, and saves it to disk\n@@ -887,6 +887,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool RemoveWatchOnly(const CScript &dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n@@ -1213,7 +1214,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n \n     /** Add a KeyOriginInfo to the wallet */\n-    bool AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info);\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "d6576e349e8a18289b0b1caa409c4de509250c3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjU3NmUzNDllOGExODI4OWIwYjFjYWE0MDljNGRlNTA5MjUwYzNi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-05T19:11:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-18T16:58:50Z"
      },
      "message": "Have WalletBatch automatically flush every 1000 updates\n\nSince it now automatically flushes, we don't need to have\nUpgradeKeyMetadata count and flush separately",
      "tree": {
        "sha": "73b6a8b18c5b26146625921cd7c6d42466fe750e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73b6a8b18c5b26146625921cd7c6d42466fe750e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6576e349e8a18289b0b1caa409c4de509250c3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6576e349e8a18289b0b1caa409c4de509250c3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6576e349e8a18289b0b1caa409c4de509250c3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6576e349e8a18289b0b1caa409c4de509250c3b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "366fe0be0b9b9691b7d26f9b592e586112ef645b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/366fe0be0b9b9691b7d26f9b592e586112ef645b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/366fe0be0b9b9691b7d26f9b592e586112ef645b"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "13fe5a2918fcc93e2b11b574555c71ab815f771c",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6576e349e8a18289b0b1caa409c4de509250c3b/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6576e349e8a18289b0b1caa409c4de509250c3b/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=d6576e349e8a18289b0b1caa409c4de509250c3b",
        "patch": "@@ -614,7 +614,9 @@ void BerkeleyBatch::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n+    if (env) { // env is nullptr for dummy databases (i.e. in tests). Don't actually flush if env is nullptr so we don't segfault\n+        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n+    }\n }\n \n void BerkeleyDatabase::IncrementUpdateCounter()"
      },
      {
        "sha": "26f48fccdcc012376a4e5f16689b98b8d11cf4e1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6576e349e8a18289b0b1caa409c4de509250c3b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6576e349e8a18289b0b1caa409c4de509250c3b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d6576e349e8a18289b0b1caa409c4de509250c3b",
        "patch": "@@ -370,7 +370,6 @@ void CWallet::UpgradeKeyMetadata()\n     }\n \n     std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*database);\n-    size_t cnt = 0;\n     for (auto& meta_pair : mapKeyMetadata) {\n         CKeyMetadata& meta = meta_pair.second;\n         if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n@@ -393,10 +392,6 @@ void CWallet::UpgradeKeyMetadata()\n             CPubKey pubkey;\n             if (GetPubKey(meta_pair.first, pubkey)) {\n                 batch->WriteKeyMetadata(meta, pubkey, true);\n-                if (++cnt % 1000 == 0) {\n-                    // avoid creating overlarge in-memory batches in case the wallet contains large amounts of keys\n-                    batch.reset(new WalletBatch(*database));\n-                }\n             }\n         }\n     }"
      },
      {
        "sha": "d4a3bba97abcebec64f37c28ce6f63f393e8bada",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6576e349e8a18289b0b1caa409c4de509250c3b/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6576e349e8a18289b0b1caa409c4de509250c3b/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d6576e349e8a18289b0b1caa409c4de509250c3b",
        "patch": "@@ -143,9 +143,11 @@ class CKeyMetadata\n };\n \n /** Access to the wallet database.\n- * This represents a single transaction at the\n- * database. It will be committed when the object goes out of scope.\n- * Optionally (on by default) it will flush to disk as well.\n+ * Opens the database and provides read and write access to it. Each read and write is its own transaction.\n+ * Multiple operation transactions can be started using TxnBegin() and committed using TxnCommit()\n+ * Otherwise the transaction will be committed when the object goes out of scope.\n+ * Optionally (on by default) it will flush to disk on close.\n+ * Every 1000 writes will automatically trigger a flush to disk.\n  */\n class WalletBatch\n {\n@@ -157,6 +159,9 @@ class WalletBatch\n             return false;\n         }\n         m_database.IncrementUpdateCounter();\n+        if (m_database.nUpdateCounter % 1000 == 0) {\n+            m_batch.Flush();\n+        }\n         return true;\n     }\n \n@@ -167,6 +172,9 @@ class WalletBatch\n             return false;\n         }\n         m_database.IncrementUpdateCounter();\n+        if (m_database.nUpdateCounter % 1000 == 0) {\n+            m_batch.Flush();\n+        }\n         return true;\n     }\n "
      }
    ]
  },
  {
    "sha": "ccb26cf347a6fcc861768bbfbbd652e683ffd5bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2IyNmNmMzQ3YTZmY2M4NjE3NjhiYmZiYmQ2NTJlNjgzZmZkNWJi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-03T22:57:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-18T16:59:17Z"
      },
      "message": "Batch writes for importmulti\n\nWhen writing all of the imported data to the wallet, use a common\nWalletBatch object so that batch writes are done and the writes\nfinish more quickly.\n\nAddKeypoolPubkey is no longer needed so it is also removed",
      "tree": {
        "sha": "ba68494d972c3a4441bd2268f8a3cf798a2f08e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba68494d972c3a4441bd2268f8a3cf798a2f08e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6576e349e8a18289b0b1caa409c4de509250c3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6576e349e8a18289b0b1caa409c4de509250c3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6576e349e8a18289b0b1caa409c4de509250c3b"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 7,
      "deletions": 14
    },
    "files": [
      {
        "sha": "18e58fac7a1069ba4aaa9287fbae1bba2a17f1b1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ccb26cf347a6fcc861768bbfbbd652e683ffd5bb",
        "patch": "@@ -1261,8 +1261,9 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n \n         // All good, time to import\n         pwallet->MarkDirty();\n+        WalletBatch batch(pwallet->GetDBHandle());\n         for (const auto& entry : import_data.import_scripts) {\n-            if (!pwallet->HaveCScript(CScriptID(entry)) && !pwallet->AddCScript(entry)) {\n+            if (!pwallet->HaveCScript(CScriptID(entry)) && !pwallet->AddCScriptWithDB(batch, entry)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding script to wallet\");\n              }\n          }\n@@ -1273,13 +1274,13 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n              assert(key.VerifyPubKey(pubkey));\n              pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n              // If the private key is not present in the wallet, insert it.\n-             if (!pwallet->HaveKey(id) && !pwallet->AddKeyPubKey(key, pubkey)) {\n+             if (!pwallet->HaveKey(id) && !pwallet->AddKeyPubKeyWithDB(batch, key, pubkey)) {\n                  throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n              }\n              pwallet->UpdateTimeFirstKey(timestamp);\n         }\n         for (const auto& entry : import_data.key_origins) {\n-            pwallet->AddKeyOrigin(entry.second.first, entry.second.second);\n+            pwallet->AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n         }\n         for (const CKeyID& id : ordered_pubkeys) {\n             auto entry = pubkey_map.find(id);\n@@ -1288,20 +1289,20 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             }\n              const CPubKey& pubkey = entry->second;\n              CPubKey temp;\n-             if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnly(GetScriptForRawPubKey(pubkey), timestamp)) {\n+             if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n             pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n \n             // Add to keypool only works with pubkeys\n             if (add_keypool) {\n-                pwallet->AddKeypoolPubkey(pubkey, internal);\n+                pwallet->AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n             }\n         }\n \n         for (const CScript& script : script_pub_keys) {\n             if (!have_solving_data || !::IsMine(*pwallet, script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n-                if (!pwallet->AddWatchOnly(script, timestamp)) {\n+                if (!pwallet->AddWatchOnlyWithDB(batch, script, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n             }"
      },
      {
        "sha": "dfe84238ffea9baac4bc2db1efcd7618b2750d98",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ccb26cf347a6fcc861768bbfbbd652e683ffd5bb",
        "patch": "@@ -3372,13 +3372,6 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     return true;\n }\n \n-void CWallet::AddKeypoolPubkey(const CPubKey& pubkey, const bool internal)\n-{\n-    WalletBatch batch(*database);\n-    AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-    NotifyCanGetAddressesChanged();\n-}\n-\n void CWallet::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)\n {\n     LOCK(cs_wallet);"
      },
      {
        "sha": "f826f9a1374351879aa601d38889aba227e6c9b4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ccb26cf347a6fcc861768bbfbbd652e683ffd5bb",
        "patch": "@@ -994,7 +994,6 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n-    void AddKeypoolPubkey(const CPubKey& pubkey, const bool internal);\n     void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n \n     /**"
      }
    ]
  },
  {
    "sha": "6154a09e01ed7433e590761a5c6957aaf7b5568d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTU0YTA5ZTAxZWQ3NDMzZTU5MDc2MWE1YzY5NTdhYWY3YjU1Njhk",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-04-04T09:12:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-28T15:03:18Z"
      },
      "message": "Move some of ProcessImport into CWallet::Import*\n\nThis maintains encapsulation of CWallet::database in the face of\nbatching, e.g. allows making the `WithDB` methods private.",
      "tree": {
        "sha": "fd8b0b5a90bf96711d024271f81e38916c0b2709",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd8b0b5a90bf96711d024271f81e38916c0b2709"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6154a09e01ed7433e590761a5c6957aaf7b5568d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6154a09e01ed7433e590761a5c6957aaf7b5568d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6154a09e01ed7433e590761a5c6957aaf7b5568d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6154a09e01ed7433e590761a5c6957aaf7b5568d/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccb26cf347a6fcc861768bbfbbd652e683ffd5bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccb26cf347a6fcc861768bbfbbd652e683ffd5bb"
      }
    ],
    "stats": {
      "total": 155,
      "additions": 101,
      "deletions": 54
    },
    "files": [
      {
        "sha": "3d1f95e9a5e3cd4e8ace2b2486ad1188d2824907",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 47,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6154a09e01ed7433e590761a5c6957aaf7b5568d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6154a09e01ed7433e590761a5c6957aaf7b5568d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=6154a09e01ed7433e590761a5c6957aaf7b5568d",
        "patch": "@@ -1261,56 +1261,17 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n \n         // All good, time to import\n         pwallet->MarkDirty();\n-        WalletBatch batch(pwallet->GetDBHandle());\n-        for (const auto& entry : import_data.import_scripts) {\n-            if (!pwallet->HaveCScript(CScriptID(entry)) && !pwallet->AddCScriptWithDB(batch, entry)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding script to wallet\");\n-             }\n-         }\n-         for (const auto& entry : privkey_map) {\n-             const CKey& key = entry.second;\n-             CPubKey pubkey = key.GetPubKey();\n-             const CKeyID& id = entry.first;\n-             assert(key.VerifyPubKey(pubkey));\n-             pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n-             // If the private key is not present in the wallet, insert it.\n-             if (!pwallet->HaveKey(id) && !pwallet->AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-             }\n-             pwallet->UpdateTimeFirstKey(timestamp);\n+        if (!pwallet->ImportScripts(import_data.import_scripts)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding script to wallet\");\n         }\n-        for (const auto& entry : import_data.key_origins) {\n-            pwallet->AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n+        if (!pwallet->ImportPrivKeys(privkey_map, timestamp)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n         }\n-        for (const CKeyID& id : ordered_pubkeys) {\n-            auto entry = pubkey_map.find(id);\n-            if (entry == pubkey_map.end()) {\n-                continue;\n-            }\n-             const CPubKey& pubkey = entry->second;\n-             CPubKey temp;\n-             if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-            pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-            // Add to keypool only works with pubkeys\n-            if (add_keypool) {\n-                pwallet->AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            }\n+        if (!pwallet->ImportPubKeys(ordered_pubkeys, pubkey_map, import_data.key_origins, add_keypool, internal, timestamp)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n         }\n-\n-        for (const CScript& script : script_pub_keys) {\n-            if (!have_solving_data || !::IsMine(*pwallet, script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n-                if (!pwallet->AddWatchOnlyWithDB(batch, script, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-                }\n-            }\n-            CTxDestination dest;\n-            ExtractDestination(script, dest);\n-            if (!internal && IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n-            }\n+        if (!pwallet->ImportScriptPubKeys(label, script_pub_keys, have_solving_data, internal, timestamp)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n         }\n \n         result.pushKV(\"success\", UniValue(true));"
      },
      {
        "sha": "5a98481c519de6b3756561d45fbe743cda8718b1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6154a09e01ed7433e590761a5c6957aaf7b5568d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6154a09e01ed7433e590761a5c6957aaf7b5568d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6154a09e01ed7433e590761a5c6957aaf7b5568d",
        "patch": "@@ -1625,6 +1625,80 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     return true;\n }\n \n+bool CWallet::ImportScripts(const std::set<CScript> scripts)\n+{\n+    WalletBatch batch(*database);\n+    for (const auto& entry : scripts) {\n+        if (!HaveCScript(CScriptID(entry)) && !AddCScriptWithDB(batch, entry)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n+{\n+    WalletBatch batch(*database);\n+    for (const auto& entry : privkey_map) {\n+        const CKey& key = entry.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        const CKeyID& id = entry.first;\n+        assert(key.VerifyPubKey(pubkey));\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+        // If the private key is not present in the wallet, insert it.\n+        if (!HaveKey(id) && !AddKeyPubKeyWithDB(batch, key, pubkey)) {\n+            return false;\n+        }\n+        UpdateTimeFirstKey(timestamp);\n+    }\n+    return true;\n+}\n+\n+bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n+{\n+    WalletBatch batch(*database);\n+    for (const auto& entry : key_origins) {\n+        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n+    }\n+    for (const CKeyID& id : ordered_pubkeys) {\n+        auto entry = pubkey_map.find(id);\n+        if (entry == pubkey_map.end()) {\n+            continue;\n+        }\n+        const CPubKey& pubkey = entry->second;\n+        CPubKey temp;\n+        if (!GetPubKey(id, temp) && !AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n+            return false;\n+        }\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+\n+        // Add to keypool only works with pubkeys\n+        if (add_keypool) {\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+            NotifyCanGetAddressesChanged();\n+        }\n+    }\n+    return true;\n+}\n+\n+bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool internal, const int64_t timestamp)\n+{\n+    WalletBatch batch(*database);\n+    for (const CScript& script : script_pub_keys) {\n+        if (!have_solving_data || !::IsMine(*this, script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n+            if (!AddWatchOnlyWithDB(batch, script, timestamp)) {\n+                return false;\n+            }\n+        }\n+        CTxDestination dest;\n+        ExtractDestination(script, dest);\n+        if (!internal && IsValidDestination(dest)) {\n+            SetAddressBook(dest, label, \"receive\");\n+        }\n+    }\n+    return true;\n+}\n+\n int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig)\n {\n     std::vector<CTxOut> txouts;"
      },
      {
        "sha": "e22beb13817f5761a6394d16e628479143c15267",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6154a09e01ed7433e590761a5c6957aaf7b5568d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6154a09e01ed7433e590761a5c6957aaf7b5568d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6154a09e01ed7433e590761a5c6957aaf7b5568d",
        "patch": "@@ -704,6 +704,20 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     bool AddWatchOnly(const CScript& dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    //! Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n+\n+    //! Adds a script to the store and saves it to disk\n+    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n+\n     /** Interface for accessing chain state. */\n     interfaces::Chain* m_chain;\n \n@@ -854,7 +868,6 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n@@ -871,7 +884,6 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddCScript(const CScript& redeemScript) override;\n-    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n     bool LoadCScript(const CScript& redeemScript);\n \n     //! Adds a destination data tuple to the store, and saves it to disk\n@@ -887,7 +899,6 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool RemoveWatchOnly(const CScript &dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n@@ -975,6 +986,11 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     bool DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, bool use_max_sig = false) const;\n     bool DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig = false) const;\n \n+    bool ImportScripts(const std::set<CScript> scripts) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     CFeeRate m_pay_tx_fee{DEFAULT_PAY_TX_FEE};\n     unsigned int m_confirm_target{DEFAULT_TX_CONFIRM_TARGET};\n     bool m_spend_zero_conf_change{DEFAULT_SPEND_ZEROCONF_CHANGE};\n@@ -994,7 +1010,6 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n-    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n \n     /**\n      * Reserves a key from the keypool and sets nIndex to its index\n@@ -1211,9 +1226,6 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n \n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n-\n-    /** Add a KeyOriginInfo to the wallet */\n-    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "6cb888b37d7022fbcf5b9c88a8d4f19454f32699",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2I4ODhiMzdkNzAyMmZiY2Y1YjljODhhOGQ0ZjE5NDU0ZjMyNjk5",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-04-04T09:33:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-28T15:03:42Z"
      },
      "message": "Apply the batch treatment to CWallet::SetAddressBook via ImportScriptPubKeys",
      "tree": {
        "sha": "d3e430b4bb9735eac8a176fb192c1ace9864dfcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3e430b4bb9735eac8a176fb192c1ace9864dfcb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cb888b37d7022fbcf5b9c88a8d4f19454f32699",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cb888b37d7022fbcf5b9c88a8d4f19454f32699",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cb888b37d7022fbcf5b9c88a8d4f19454f32699",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cb888b37d7022fbcf5b9c88a8d4f19454f32699/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6154a09e01ed7433e590761a5c6957aaf7b5568d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6154a09e01ed7433e590761a5c6957aaf7b5568d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6154a09e01ed7433e590761a5c6957aaf7b5568d"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2e20c0e0a4a587e3c5490aa5876f27aba81923e8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cb888b37d7022fbcf5b9c88a8d4f19454f32699/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cb888b37d7022fbcf5b9c88a8d4f19454f32699/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6cb888b37d7022fbcf5b9c88a8d4f19454f32699",
        "patch": "@@ -1693,7 +1693,7 @@ bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScri\n         CTxDestination dest;\n         ExtractDestination(script, dest);\n         if (!internal && IsValidDestination(dest)) {\n-            SetAddressBook(dest, label, \"receive\");\n+            SetAddressBookWithDB(batch, dest, label, \"receive\");\n         }\n     }\n     return true;\n@@ -3280,8 +3280,7 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n     return DBErrors::LOAD_OK;\n }\n \n-\n-bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& strPurpose)\n+bool CWallet::SetAddressBookWithDB(WalletBatch& batch, const CTxDestination& address, const std::string& strName, const std::string& strPurpose)\n {\n     bool fUpdated = false;\n     {\n@@ -3294,9 +3293,15 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& s\n     }\n     NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address) != ISMINE_NO,\n                              strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n-    if (!strPurpose.empty() && !WalletBatch(*database).WritePurpose(EncodeDestination(address), strPurpose))\n+    if (!strPurpose.empty() && !batch.WritePurpose(EncodeDestination(address), strPurpose))\n         return false;\n-    return WalletBatch(*database).WriteName(EncodeDestination(address), strName);\n+    return batch.WriteName(EncodeDestination(address), strName);\n+}\n+\n+bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& strPurpose)\n+{\n+    WalletBatch batch(*database);\n+    return SetAddressBookWithDB(batch, address, strName, strPurpose);\n }\n \n bool CWallet::DelAddressBook(const CTxDestination& address)"
      },
      {
        "sha": "f627cc59a280e7b54e203ab90b115d119ac2de69",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cb888b37d7022fbcf5b9c88a8d4f19454f32699/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cb888b37d7022fbcf5b9c88a8d4f19454f32699/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6cb888b37d7022fbcf5b9c88a8d4f19454f32699",
        "patch": "@@ -715,6 +715,8 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n \n     void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n \n+    bool SetAddressBookWithDB(WalletBatch& batch, const CTxDestination& address, const std::string& strName, const std::string& strPurpose);\n+\n     //! Adds a script to the store and saves it to disk\n     bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n "
      }
    ]
  },
  {
    "sha": "0db94e55dcbbfc741df463c404818d9033b4fff1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGI5NGU1NWRjYmJmYzc0MWRmNDYzYzQwNDgxOGQ5MDMzYjRmZmYx",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-05-18T10:01:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-28T15:03:54Z"
      },
      "message": "wallet: Pass WalletBatch to CWallet::UnsetWalletFlag",
      "tree": {
        "sha": "12800e57958760e320ef62c0790067a76a27b414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12800e57958760e320ef62c0790067a76a27b414"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0db94e55dcbbfc741df463c404818d9033b4fff1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0db94e55dcbbfc741df463c404818d9033b4fff1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0db94e55dcbbfc741df463c404818d9033b4fff1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0db94e55dcbbfc741df463c404818d9033b4fff1/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cb888b37d7022fbcf5b9c88a8d4f19454f32699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cb888b37d7022fbcf5b9c88a8d4f19454f32699",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cb888b37d7022fbcf5b9c88a8d4f19454f32699"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "da8b2c3f0cd4ca1af2116779b2c4f49494a81774",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db94e55dcbbfc741df463c404818d9033b4fff1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db94e55dcbbfc741df463c404818d9033b4fff1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0db94e55dcbbfc741df463c404818d9033b4fff1",
        "patch": "@@ -320,7 +320,7 @@ bool CWallet::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const C\n                                                  secret.GetPrivKey(),\n                                                  mapKeyMetadata[pubkey.GetID()]);\n     }\n-    UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n+    UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n     return true;\n }\n \n@@ -431,7 +431,7 @@ bool CWallet::AddCScriptWithDB(WalletBatch& batch, const CScript& redeemScript)\n     if (!CCryptoKeyStore::AddCScript(redeemScript))\n         return false;\n     if (batch.WriteCScript(Hash160(redeemScript), redeemScript)) {\n-        UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n+        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n         return true;\n     }\n     return false;\n@@ -460,7 +460,7 @@ bool CWallet::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest)\n     UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n     if (batch.WriteWatchOnly(dest, meta)) {\n-        UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n+        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n         return true;\n     }\n     return false;\n@@ -1561,10 +1561,16 @@ void CWallet::SetWalletFlag(uint64_t flags)\n }\n \n void CWallet::UnsetWalletFlag(uint64_t flag)\n+{\n+    WalletBatch batch(*database);\n+    UnsetWalletFlagWithDB(batch, flag);\n+}\n+\n+void CWallet::UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag)\n {\n     LOCK(cs_wallet);\n     m_wallet_flags &= ~flag;\n-    if (!WalletBatch(*database).WriteWalletFlags(m_wallet_flags))\n+    if (!batch.WriteWalletFlags(m_wallet_flags))\n         throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n }\n "
      },
      {
        "sha": "3f6f6808ae9c81e727abcdb60fc8fb0eff5d219d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db94e55dcbbfc741df463c404818d9033b4fff1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db94e55dcbbfc741df463c404818d9033b4fff1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0db94e55dcbbfc741df463c404818d9033b4fff1",
        "patch": "@@ -720,6 +720,9 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     //! Adds a script to the store and saves it to disk\n     bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n \n+    //! Unsets a wallet flag and saves it to disk\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag);\n+\n     /** Interface for accessing chain state. */\n     interfaces::Chain* m_chain;\n "
      }
    ]
  }
]