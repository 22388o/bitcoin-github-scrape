gwillen,2019-04-03T23:30:47Z,"utACK although it would be good to factor out the counting into a WalletWriteCache or something, that flushes itself at intervals so you don't have to do it manually.",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-479694760,479694760,
DrahtBot,2019-04-04T01:10:15Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15876](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15876.html) ([rpc] signer bump fee by Sjors)\n* [#15761]",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-479712248,479712248,
Empact,2019-04-04T09:18:16Z,"https://github.com/Empact/bitcoin/commit/dd5b0aaf58d843c2532b3ca1829bf90482e9dc52 `CWallet::AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info)` and `CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)` can be removed.\n\nhttps://github.com/Empact/bitcoin/commit/c5d9eec6529cb2ce185be92d199ac50790a400ff How about moving this functionality in",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-479819136,479819136,
Empact,2019-04-04T09:53:11Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-479831135,479831135,
MarcoFalke,2019-04-04T17:46:53Z,"See also:  \n\n* Use a single wallet batch for UpgradeKeyMetadata #15433 ",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-479996852,479996852,
achow101,2019-04-04T18:10:45Z,"I've pulled in @Empact's changes (Empact@dd5b0aa was squashed into 59ec41257f37f2a0438b10ef9776bf7ea3488e9a, cherry-picked the other two commits).",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-480005407,480005407,
gwillen,2019-04-04T22:59:32Z,"Especially if there are now multiple places we're manually batching writes like this, and more where we're considering it: Let me suggest again and more strongly that the batch object should be handling autoflushing after every X calls, instead of open-coding it in the caller like this. If it's appropriate for every caller, it could go into WalletBatch, else into a new class that's an extremely th",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-480092953,480092953,
Sjors,2019-04-05T01:32:44Z,Concept ACK. I tried the first two commits (so without address book change) with #14145 and importing 2x 1000 keys seems about 6 times faster. ,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-480119266,480119266,
Empact,2019-04-05T04:09:19Z,@gwillen Agree it should be done but would be appropriate as a follow-up ,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-480141948,480141948,
practicalswift,2019-04-05T11:45:05Z,Looks like `AddKeypoolPubkey` is no longer used and can be removed?,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-480246084,480246084,
achow101,2019-04-05T19:24:36Z,"I've implemented @gwillen's suggestion. `WalletBatch` will flush to disk automatically after every 1000 writes. This appears to be faster too as it does not close and reopen the database on every flush. With this change, I've also updated `UpgradeKeyMetadata`.\n\n> Looks like `AddKeypoolPubkey` is no longer used and can be removed?\n\nDone",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-480394233,480394233,
achow101,2019-04-05T21:50:04Z,I'm unsure why tests are currently failing.,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-480433154,480433154,
promag,2019-05-18T10:05:48Z,"@achow101 looks like `CWallet::UnsetWalletFlag` should reuse the batch instance:\n<img width=""670"" alt=""Screenshot 2019-05-18 at 10 45 19"" src=""https://user-images.githubusercontent.com/3534524/57967966-95483400-795c-11e9-817f-07c3174a05a9.png"">\n<img width=""533"" alt=""Screenshot 2019-05-18 at 11 07 28"" src=""https://user-images.githubusercontent.com/3534524/57968029-2e774a80-795d-11e9-8d0c-a53de7",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-493664957,493664957,
jonasschnelli,2019-05-18T10:14:09Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-493665506,493665506,
jb55,2019-05-18T14:15:05Z,@promag's patch brings my import speeds down from 8 minutes to about 10 seconds for 10000 keys,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-493680256,493680256,
achow101,2019-05-18T16:30:51Z,I've pulled in @promag's patch and updated it to match the convention we've been using for passing in a `WalletBatch`.,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-493689626,493689626,
promag,2019-05-18T16:37:29Z,@achow101 please update times in OP.,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-493690061,493690061,
achow101,2019-05-18T17:21:36Z,"I noticed that importing scripts would also be slow so I've added `AddCScriptWIthDB` in order to apply the same batching performance boost to such imports.\n\nAlso updated OP.",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-493692982,493692982,
jb55,2019-05-19T06:52:53Z,"tACK 87f7befca04a095a06af003f9fe20d2e3c155d2f sooo fast. tested a rescan with my all my trezor keys from HWI and it worked great. thanks @achow101, hw wallet + core is actually usable now (at least for watching :)!",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-493732077,493732077,
promag,2019-05-19T17:06:13Z,"Restarted travis, it was failing with 😕\n```\n47/121 - rpc_psbt.py failed, Duration: 5 s\nstdout:\n2019-05-18T17:46:43.670000Z TestFramework (INFO): Initializing test directory /tmp/test_runner_₿_🏃_20190518_173555/rpc_psbt_71\n2019-05-18T17:46:47.538000Z TestFramework (ERROR): Assertion failed\nTraceback (most recent call last):\n  File ""/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-493773979,493773979,
promag,2019-05-19T20:36:29Z,"utACK 87f7bef. nit, ampersand should be before space.",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-493789580,493789580,
Empact,2019-05-27T21:57:10Z,utACK https://github.com/bitcoin/bitcoin/pull/15741/commits/87f7befca04a095a06af003f9fe20d2e3c155d2f,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-496311817,496311817,
jb55,2019-05-28T21:40:15Z,utACK 0db94e5,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-496700447,496700447,
ariard,2019-05-29T02:16:35Z,"Tested ACK 0db94e5\n\nDrop import time for 10000 keys ranged descriptor from 495.57s to 3.626s with 2.8 GHz Intel Core i7.",https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-496757067,496757067,
Empact,2019-05-29T03:05:54Z,re-utACK https://github.com/bitcoin/bitcoin/pull/15741/commits/0db94e55dcbbfc741df463c404818d9033b4fff1 only change is re the privacy of `UnsetWalletFlagWithDB` and `AddCScriptWithDB`.,https://github.com/bitcoin/bitcoin/pull/15741#issuecomment-496765704,496765704,
gwillen,2019-04-03T23:31:53Z,"There is a weird indentation glitch here, although it looks like it was preexisting.",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r271971255,271971255,src/wallet/rpcdump.cpp
gwillen,2019-04-03T23:32:40Z,"Is this necessary? It's about to go out of scope, right?",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r271971423,271971423,src/wallet/rpcdump.cpp
Empact,2019-04-04T09:52:44Z,"nit: May be a bad example to follow, but `AddKeypoolPubkeyWithDB` has `batch` as the last argument, which makes as much sense to me.",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272102808,272102808,src/wallet/wallet.h
promag,2019-04-04T12:57:53Z,What is the problem of one batch only?,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272164997,272164997,src/wallet/rpcdump.cpp
achow101,2019-04-04T18:11:17Z,"The batch can get very large in memory if lots of keys are involved, so we limit the size to avoid blowing up memory during imports.",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272303357,272303357,src/wallet/rpcdump.cpp
achow101,2019-04-04T18:12:04Z,I was following the `AddKeyPubKeyWithDB` way of argument ordering.,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272303687,272303687,src/wallet/wallet.h
achow101,2019-04-04T18:12:21Z,Probably not. I did that just as a belt-and-suspenders thing.,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272303803,272303803,src/wallet/rpcdump.cpp
MarcoFalke,2019-04-05T20:29:51Z,"in commit ebb0ea85539b3e2f515fca89231c20ac86fb52d5:\n\nWhy is this no longer needed?",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272733923,272733923,src/wallet/wallet.cpp
achow101,2019-04-05T21:44:18Z,"When batch goes out of scope, it will write. This was just a belt and suspenders.",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272753131,272753131,src/wallet/wallet.cpp
gwillen,2019-04-05T21:53:43Z,The comment suggests that in this case -- unlike the batch write in importmulti -- there's a specific reason to force it to write before the end of the scope.,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272755099,272755099,src/wallet/wallet.cpp
promag,2019-04-05T22:08:11Z,"I get that this makes the code simple, but IMO this defeats the batch purpose. Like, it shouldn't be something to worry about here.",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272757790,272757790,src/wallet/walletdb.h
promag,2019-04-05T22:14:33Z,Why this change?,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272758955,272758955,src/wallet/db.cpp
gwillen,2019-04-05T22:28:12Z,"I don't understand what you mean by 'defeats the batch purpose'. Are there cases where the caller is depending on the batch not being flushed?\n\nI think it is far better engineering practice to deal with periodic flushing once, inside the batch-management code, than to deal with it independently at each callsite. If there's some situation where periodic flushing is undesirable, I think it would",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272761260,272761260,src/wallet/walletdb.h
achow101,2019-04-05T22:29:35Z,"So that tests pass. When there's a dummy database, env will be `nulltpr` and this causes a segfault in tests which use a dummy database.",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272761472,272761472,src/wallet/db.cpp
achow101,2019-04-05T22:42:12Z,reverted,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r272763479,272763479,src/wallet/wallet.cpp
promag,2019-04-08T13:48:32Z,Can't we make `env` is defined instead? Otherwise a comment would make sense as this doesn't really happen.,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r273055021,273055021,src/wallet/db.cpp
promag,2019-04-08T13:50:18Z,@gwillen I mean you should be able to create a batch with 1001 changes no? I was suggesting something on top of `WalletBatch` to do that.,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r273055976,273055976,src/wallet/walletdb.h
gwillen,2019-04-08T16:15:33Z,"Well, you can add as many changes as you want, it just flushes after every 1000. This should be completely transparent to the user. Unless there is some reason that flushing can hurt, like the caller is using the batch as though it were an atomic transaction?",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r273128590,273128590,src/wallet/walletdb.h
achow101,2019-04-08T16:58:18Z,"> Unless there is some reason that flushing can hurt, like the caller is using the batch as though it were an atomic transaction?\n\nThere is only one place where an atomic transaction is used, and if an atomic transaction is active, then `Flush()` will do nothing.",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r273145509,273145509,src/wallet/walletdb.h
achow101,2019-04-08T17:04:26Z,"> Can't we make `env` is defined instead?\n\nNo. `env` is nullptr for dummy databases which are used in tests. A check like this is used in many other places in this file in the form of `BerkeleyDatabase::IsDummy()`.\n\n> Otherwise a comment would make sense as this doesn't really happen.\n\nDone.",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r273148040,273148040,src/wallet/db.cpp
Empact,2019-04-10T08:50:15Z,"nit: could deal with it earlier (i.e. early return), and use `IsDummy` to make it more explicit.",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r273852590,273852590,src/wallet/db.cpp
Empact,2019-04-10T08:56:28Z,nit: could squash this into the previous,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r273855208,273855208,src/wallet/wallet.cpp
Empact,2019-04-10T09:00:11Z,nit: could squash into https://github.com/bitcoin/bitcoin/pull/15741/commits/c088227bd612920f0e2ea3a34d6e5037490d62c2,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r273856807,273856807,src/wallet/wallet.cpp
Empact,2019-04-10T09:07:22Z,"How about add an optional argument to `WalletBatch` that indicates the # of updates to flush after? This makes the operation opt-in/explicit and also allows for optionally adjusting the flushes to the number of operations - e.g. 2x600 rather than 1000 and 200, if that's desirable.",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r273859679,273859679,src/wallet/walletdb.h
promag,2019-04-14T14:24:20Z,Well I may be wrong but I see the batch as an atomic transaction. Making 1500 updates and then aborting the batch should not commit 1000 updates IMO.,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r275159416,275159416,src/wallet/walletdb.h
achow101,2019-04-14T15:39:24Z,"> Well I may be wrong but I see the batch as an atomic transaction. Making 1500 updates and then aborting the batch should not commit 1000 updates IMO.\n\nExcept that's not how the batch works normally. Batches are not atomic unless you explicitly make them so by starting a transaction with the underlying `BerkeleyBatch`.  In that case, then the flushing won't do anything. In the normal case, ea",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r275162342,275162342,src/wallet/walletdb.h
achow101,2019-04-14T15:51:33Z,Done,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r275162851,275162851,src/wallet/wallet.cpp
achow101,2019-04-14T15:51:38Z,Done,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r275162855,275162855,src/wallet/wallet.cpp
achow101,2019-04-14T15:52:26Z,"`IsDummy` is done by `BerkeleyDatabase`, not `BerkeleyBatch` so is not available to do here (although the check is completely identical).",https://github.com/bitcoin/bitcoin/pull/15741#discussion_r275162888,275162888,src/wallet/db.cpp
Sjors,2019-05-16T16:10:55Z,`NotifyCanGetAddressesChanged()` (I already tested that fixes QT receive screen),https://github.com/bitcoin/bitcoin/pull/15741#discussion_r284786945,284786945,src/wallet/rpcdump.cpp
Sjors,2019-05-16T16:31:40Z,So is the description of `WalletBatch` out of date? It says `This represents a single transaction at the database. It will be committed when the object goes out of scope.`,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r284795411,284795411,src/wallet/walletdb.h
achow101,2019-05-18T16:21:45Z,I believe that is out of date,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r285347845,285347845,src/wallet/walletdb.h
achow101,2019-05-18T16:30:36Z,I've updated the comment.,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r285348097,285348097,src/wallet/walletdb.h
achow101,2019-05-18T16:30:41Z,Done,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r285348102,285348102,src/wallet/rpcdump.cpp
Empact,2019-05-27T21:54:00Z,nit: could be `private`,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r287886771,287886771,src/wallet/wallet.h
Empact,2019-05-27T21:56:00Z,nit: could be `private`,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r287886940,287886940,src/wallet/wallet.h
achow101,2019-05-28T15:04:06Z,Done,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r288153384,288153384,src/wallet/wallet.h
achow101,2019-05-28T15:04:10Z,Done,https://github.com/bitcoin/bitcoin/pull/15741#discussion_r288153407,288153407,src/wallet/wallet.h
