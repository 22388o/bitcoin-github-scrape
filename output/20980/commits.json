[
  {
    "sha": "91142806cc2788702f822c434dcc79ee2590dc6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTE0MjgwNmNjMjc4ODcwMmY4MjJjNDM0ZGNjNzllZTI1OTBkYzZj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T18:35:45Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-12T19:47:29Z"
      },
      "message": "lint: Run mypy with --show-error-codes\n\nWhen using mypy ignore directives, the error code needs to be specified.\nSomehow mypy doesn't print it by default...",
      "tree": {
        "sha": "0a806698db34ab4ae28da98494b40fad28223ae2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a806698db34ab4ae28da98494b40fad28223ae2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91142806cc2788702f822c434dcc79ee2590dc6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91142806cc2788702f822c434dcc79ee2590dc6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91142806cc2788702f822c434dcc79ee2590dc6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91142806cc2788702f822c434dcc79ee2590dc6c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2ec37221a5636650573e0f451f39c9fd563e935",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ec37221a5636650573e0f451f39c9fd563e935",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ec37221a5636650573e0f451f39c9fd563e935"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c448fa6f9a6fbb2fb0bd188e1da2faed96f4a010",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91142806cc2788702f822c434dcc79ee2590dc6c/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91142806cc2788702f822c434dcc79ee2590dc6c/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=91142806cc2788702f822c434dcc79ee2590dc6c",
        "patch": "@@ -102,7 +102,7 @@ if ! PYTHONWARNINGS=\"ignore\" flake8 --ignore=B,C,E,F,I,N,W --select=$(IFS=\",\"; e\n     EXIT_CODE=1\n fi\n \n-if ! mypy --ignore-missing-imports $(git ls-files \"test/functional/*.py\" \"contrib/devtools/*.py\"); then\n+if ! mypy --ignore-missing-imports --show-error-codes $(git ls-files \"test/functional/*.py\" \"contrib/devtools/*.py\"); then\n     EXIT_CODE=1\n fi\n "
      }
    ]
  },
  {
    "sha": "d476bfcb4a392d814ed11d4f22d1723353d2bc57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDc2YmZjYjRhMzkyZDgxNGVkMTFkNGYyMmQxNzIzMzUzZDJiYzU3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-21T18:52:40Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-12T19:47:29Z"
      },
      "message": "devtools: Improve *-check.py tool detection\n\nThis is important to make sure that we're not testing tools different\nfrom the one we're building with.\n\nIntroduce determine_wellknown_cmd, which encapsulates how we\nshould handle well-known tools specification (IFS splitting, env\noverride, etc.).",
      "tree": {
        "sha": "7af643cfabdc1213642f2060a4fdd55d98474702",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7af643cfabdc1213642f2060a4fdd55d98474702"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d476bfcb4a392d814ed11d4f22d1723353d2bc57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d476bfcb4a392d814ed11d4f22d1723353d2bc57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d476bfcb4a392d814ed11d4f22d1723353d2bc57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d476bfcb4a392d814ed11d4f22d1723353d2bc57/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91142806cc2788702f822c434dcc79ee2590dc6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91142806cc2788702f822c434dcc79ee2590dc6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91142806cc2788702f822c434dcc79ee2590dc6c"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 50,
      "deletions": 24
    },
    "files": [
      {
        "sha": "073003d626fe4f628487471bd57ed2c0144f7a10",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d476bfcb4a392d814ed11d4f22d1723353d2bc57/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d476bfcb4a392d814ed11d4f22d1723353d2bc57/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=d476bfcb4a392d814ed11d4f22d1723353d2bc57",
        "patch": "@@ -58,6 +58,7 @@ DIST_SHARE = \\\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n            $(top_srcdir)/contrib/devtools/security-check.py \\\n+           $(top_srcdir)/contrib/devtools/utils.py \\\n            $(top_srcdir)/contrib/devtools/pixie.py\n \n WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n@@ -366,14 +367,14 @@ clean-local: clean-docs\n \n test-security-check:\n if TARGET_DARWIN\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n endif\n if TARGET_WINDOWS\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE\n endif\n if TARGET_LINUX\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n+\t$(AM_V_at) CC='$(CC)' CPPFILT='$(CPPFILT)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n endif"
      },
      {
        "sha": "cbe2eb95c547fd8e910d8e2e66eb1de02e499710",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d476bfcb4a392d814ed11d4f22d1723353d2bc57/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d476bfcb4a392d814ed11d4f22d1723353d2bc57/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=d476bfcb4a392d814ed11d4f22d1723353d2bc57",
        "patch": "@@ -12,12 +12,13 @@\n '''\n import subprocess\n import sys\n-import os\n from typing import List, Optional\n \n import lief\n import pixie\n \n+from utils import determine_wellknown_cmd\n+\n # Debian 8 (Jessie) EOL: 2020. https://wiki.debian.org/DebianReleases#Production_Releases\n #\n # - g++ version 4.9.2 (https://packages.debian.org/search?suite=jessie&arch=any&searchon=names&keywords=g%2B%2B)\n@@ -52,7 +53,6 @@\n '_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr',\n 'environ', '_environ', '__environ',\n }\n-CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n \n # Allowed NEEDED libraries\n ELF_ALLOWED_LIBRARIES = {\n@@ -140,7 +140,7 @@ class CPPFilt(object):\n     Use a pipe to the 'c++filt' command.\n     '''\n     def __init__(self):\n-        self.proc = subprocess.Popen(CPPFILT_CMD, stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)\n+        self.proc = subprocess.Popen(determine_wellknown_cmd('CPPFILT', 'c++filt'), stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)\n \n     def __call__(self, mangled):\n         self.proc.stdin.write(mangled + '\\n')"
      },
      {
        "sha": "ad6b620e8cd8841f9bdb5b747bd0e00b6eb719a2",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d476bfcb4a392d814ed11d4f22d1723353d2bc57/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d476bfcb4a392d814ed11d4f22d1723353d2bc57/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=d476bfcb4a392d814ed11d4f22d1723353d2bc57",
        "patch": "@@ -9,6 +9,8 @@\n import subprocess\n import unittest\n \n+from utils import determine_wellknown_cmd\n+\n def write_testcode(filename):\n     with open(filename, 'w', encoding=\"utf8\") as f:\n         f.write('''\n@@ -25,15 +27,15 @@ def clean_files(source, executable):\n     os.remove(executable)\n \n def call_security_check(cc, source, executable, options):\n-    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+    subprocess.run([*cc,source,'-o',executable] + options, check=True)\n     p = subprocess.run(['./contrib/devtools/security-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n     return (p.returncode, p.stdout.rstrip())\n \n class TestSecurityChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'gcc'\n+        cc = determine_wellknown_cmd('CC', 'gcc')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n@@ -54,7 +56,7 @@ def test_ELF(self):\n     def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n-        cc = 'x86_64-w64-mingw32-gcc'\n+        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n@@ -73,7 +75,7 @@ def test_PE(self):\n     def test_MACHO(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'clang'\n+        cc = determine_wellknown_cmd('CC', 'clang')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-Wl,-allow_stack_execute','-fno-stack-protector']),\n@@ -93,4 +95,3 @@ def test_MACHO(self):\n \n if __name__ == '__main__':\n     unittest.main()\n-"
      },
      {
        "sha": "4057858203163349d60bb348f9d856c2c6cce3da",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d476bfcb4a392d814ed11d4f22d1723353d2bc57/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d476bfcb4a392d814ed11d4f22d1723353d2bc57/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=d476bfcb4a392d814ed11d4f22d1723353d2bc57",
        "patch": "@@ -7,10 +7,13 @@\n '''\n import os\n import subprocess\n+from typing import List\n import unittest\n \n-def call_symbol_check(cc, source, executable, options):\n-    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+from utils import determine_wellknown_cmd\n+\n+def call_symbol_check(cc: List[str], source, executable, options):\n+    subprocess.run([*cc,source,'-o',executable] + options, check=True)\n     p = subprocess.run(['./contrib/devtools/symbol-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n     os.remove(source)\n     os.remove(executable)\n@@ -20,7 +23,7 @@ class TestSymbolChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'gcc'\n+        cc = determine_wellknown_cmd('CC', 'gcc')\n \n         # renameat2 was introduced in GLIBC 2.28, so is newer than the upper limit\n         # of glibc for all platforms\n@@ -82,7 +85,7 @@ def test_ELF(self):\n     def test_MACHO(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'clang'\n+        cc = determine_wellknown_cmd('CC', 'clang')\n \n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n@@ -119,7 +122,7 @@ def test_MACHO(self):\n     def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n-        cc = 'x86_64-w64-mingw32-gcc'\n+        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n \n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n@@ -155,4 +158,3 @@ def test_PE(self):\n \n if __name__ == '__main__':\n     unittest.main()\n-"
      },
      {
        "sha": "68ad1c3aba1915fe44309f802a16e74be4f54e42",
        "filename": "contrib/devtools/utils.py",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d476bfcb4a392d814ed11d4f22d1723353d2bc57/contrib/devtools/utils.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d476bfcb4a392d814ed11d4f22d1723353d2bc57/contrib/devtools/utils.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/utils.py?ref=d476bfcb4a392d814ed11d4f22d1723353d2bc57",
        "patch": "@@ -0,0 +1,22 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Common utility functions\n+'''\n+import shutil\n+import sys\n+import os\n+from typing import List\n+\n+\n+def determine_wellknown_cmd(envvar, progname) -> List[str]:\n+    maybe_env = os.getenv(envvar)\n+    maybe_which = shutil.which(progname)\n+    if maybe_env:\n+        return maybe_env.split(' ')  # Well-known vars are often meant to be word-split\n+    elif maybe_which:\n+        return [ maybe_which ]\n+    else:\n+        sys.exit(f\"{progname} not found\")"
      },
      {
        "sha": "586e7242cc594da5db84cee6420da330f97bb2d1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d476bfcb4a392d814ed11d4f22d1723353d2bc57/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d476bfcb4a392d814ed11d4f22d1723353d2bc57/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d476bfcb4a392d814ed11d4f22d1723353d2bc57",
        "patch": "@@ -801,23 +801,23 @@ clean-local:\n check-symbols: $(bin_PROGRAMS)\n if TARGET_DARWIN\n \t@echo \"Checking macOS dynamic libraries...\"\n-\t$(AM_V_at) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n if TARGET_WINDOWS\n \t@echo \"Checking Windows dynamic libraries...\"\n-\t$(AM_V_at) OBJDUMP=$(OBJDUMP) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n if GLIBC_BACK_COMPAT\n \t@echo \"Checking glibc back compat...\"\n-\t$(AM_V_at) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) CPPFILT='$(CPPFILT)' $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n check-security: $(bin_PROGRAMS)\n if HARDEN\n \t@echo \"Checking binary security...\"\n-\t$(AM_V_at) OBJDUMP=$(OBJDUMP) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py $(bin_PROGRAMS)\n endif\n \n libbitcoin_ipc_mpgen_input = \\"
      }
    ]
  },
  {
    "sha": "09bc25db64dc2793ed2478422dde880881687484",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWJjMjVkYjY0ZGMyNzkzZWQyNDc4NDIyZGRlODgwODgxNjg3NDg0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-11T01:46:05Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-12T19:47:29Z"
      },
      "message": "guix: Patch binutils to add security-related disable flags\n\nWe use these flags in our test-security-check make target, but they are\nonly available because debian patches them in.\n\nWe can patch them in for our Guix builds so that we can check the sanity\nof our security/symbol checking suite before running them.",
      "tree": {
        "sha": "0b005f38b4b823d7bc401b38d95ae98332116811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b005f38b4b823d7bc401b38d95ae98332116811"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09bc25db64dc2793ed2478422dde880881687484",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09bc25db64dc2793ed2478422dde880881687484",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09bc25db64dc2793ed2478422dde880881687484",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09bc25db64dc2793ed2478422dde880881687484/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d476bfcb4a392d814ed11d4f22d1723353d2bc57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d476bfcb4a392d814ed11d4f22d1723353d2bc57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d476bfcb4a392d814ed11d4f22d1723353d2bc57"
      }
    ],
    "stats": {
      "total": 179,
      "additions": 177,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3f1313d64b78e62827f41af82d9c1bf6bc6c75d7",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09bc25db64dc2793ed2478422dde880881687484/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09bc25db64dc2793ed2478422dde880881687484/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=09bc25db64dc2793ed2478422dde880881687484",
        "patch": "@@ -75,6 +75,10 @@ http://www.linuxfromscratch.org/hlfs/view/development/chapter05/gcc-pass1.html\"\n                 ((\"-rpath=\") \"-rpath-link=\"))\n               #t))))))))\n \n+(define (make-binutils-with-mingw-w64-disable-flags xbinutils)\n+  (package-with-extra-patches xbinutils\n+    (search-our-patches \"binutils-mingw-w64-disable-flags.patch\")))\n+\n (define (make-cross-toolchain target\n                               base-gcc-for-libc\n                               base-kernel-headers\n@@ -145,7 +149,7 @@ desirable for building Bitcoin Core release binaries.\"\n \n (define (make-mingw-pthreads-cross-toolchain target)\n   \"Create a cross-compilation toolchain package for TARGET\"\n-  (let* ((xbinutils (cross-binutils target))\n+  (let* ((xbinutils (make-binutils-with-mingw-w64-disable-flags (cross-binutils target)))\n          (pthreads-xlibc mingw-w64-x86_64-winpthreads)\n          (pthreads-xgcc (make-gcc-with-pthreads\n                          (cross-gcc target"
      },
      {
        "sha": "8f88eb9dfd5926e6ef83066ccb8ca51a12a5e980",
        "filename": "contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "status": "added",
        "additions": 171,
        "deletions": 0,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09bc25db64dc2793ed2478422dde880881687484/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09bc25db64dc2793ed2478422dde880881687484/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch?ref=09bc25db64dc2793ed2478422dde880881687484",
        "patch": "@@ -0,0 +1,171 @@\n+Description: Add disable opposites to the security-related flags\n+Author: Stephen Kitt <skitt@debian.org>\n+\n+This patch adds \"no-\" variants to disable the various security flags:\n+\"no-dynamicbase\", \"no-nxcompat\", \"no-high-entropy-va\", \"disable-reloc-section\".\n+\n+--- a/ld/emultempl/pe.em\n++++ b/ld/emultempl/pe.em\n+@@ -259,9 +261,11 @@\n+ \t\t\t\t\t(OPTION_ENABLE_LONG_SECTION_NAMES + 1)\n+ /* DLLCharacteristics flags.  */\n+ #define OPTION_DYNAMIC_BASE\t\t(OPTION_DISABLE_LONG_SECTION_NAMES + 1)\n+-#define OPTION_FORCE_INTEGRITY\t\t(OPTION_DYNAMIC_BASE + 1)\n++#define OPTION_NO_DYNAMIC_BASE\t\t(OPTION_DYNAMIC_BASE + 1)\n++#define OPTION_FORCE_INTEGRITY\t\t(OPTION_NO_DYNAMIC_BASE + 1)\n+ #define OPTION_NX_COMPAT\t\t(OPTION_FORCE_INTEGRITY + 1)\n+-#define OPTION_NO_ISOLATION\t\t(OPTION_NX_COMPAT + 1)\n++#define OPTION_NO_NX_COMPAT\t\t(OPTION_NX_COMPAT + 1)\n++#define OPTION_NO_ISOLATION\t\t(OPTION_NO_NX_COMPAT + 1)\n+ #define OPTION_NO_SEH\t\t\t(OPTION_NO_ISOLATION + 1)\n+ #define OPTION_NO_BIND\t\t\t(OPTION_NO_SEH + 1)\n+ #define OPTION_WDM_DRIVER\t\t(OPTION_NO_BIND + 1)\n+@@ -271,6 +275,7 @@\n+ #define OPTION_NO_INSERT_TIMESTAMP\t(OPTION_INSERT_TIMESTAMP + 1)\n+ #define OPTION_BUILD_ID\t\t\t(OPTION_NO_INSERT_TIMESTAMP + 1)\n+ #define OPTION_ENABLE_RELOC_SECTION\t(OPTION_BUILD_ID + 1)\n++#define OPTION_DISABLE_RELOC_SECTION\t(OPTION_ENABLE_RELOC_SECTION + 1)\n+ \n+ static void\n+ gld${EMULATION_NAME}_add_options\n+@@ -342,8 +347,10 @@\n+     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n+     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n+     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n++    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n+     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n+     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n++    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n+     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n+     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n+     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n+@@ -351,6 +358,7 @@\n+     {\"tsaware\", no_argument, NULL, OPTION_TERMINAL_SERVER_AWARE},\n+     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n+     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n++    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n+     {NULL, no_argument, NULL, 0}\n+   };\n+ \n+@@ -485,9 +494,12 @@\n+                                        in object files\\n\"));\n+   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n+                                        address space layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n+   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n++  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n+   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n+   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n++  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n+   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n+   fprintf (file, _(\"  --no-seh                   Image does not use SEH. No SE handler may\\n\\\n+                                        be called in this image\\n\"));\n+@@ -862,12 +874,21 @@\n+     case OPTION_ENABLE_RELOC_SECTION:\n+       pe_dll_enable_reloc_section = 1;\n+       break;\n++    case OPTION_DISABLE_RELOC_SECTION:\n++      pe_dll_enable_reloc_section = 0;\n++      /* fall through */\n++    case OPTION_NO_DYNAMIC_BASE:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n++      break;\n+     case OPTION_FORCE_INTEGRITY:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n+       break;\n+     case OPTION_NX_COMPAT:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n+       break;\n++    case OPTION_NO_NX_COMPAT:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n++      break;\n+     case OPTION_NO_ISOLATION:\n+       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n+       break;\n+--- a/ld/emultempl/pep.em\n++++ b/ld/emultempl/pep.em\n+@@ -237,9 +240,12 @@\n+   OPTION_ENABLE_LONG_SECTION_NAMES,\n+   OPTION_DISABLE_LONG_SECTION_NAMES,\n+   OPTION_HIGH_ENTROPY_VA,\n++  OPTION_NO_HIGH_ENTROPY_VA,\n+   OPTION_DYNAMIC_BASE,\n++  OPTION_NO_DYNAMIC_BASE,\n+   OPTION_FORCE_INTEGRITY,\n+   OPTION_NX_COMPAT,\n++  OPTION_NO_NX_COMPAT,\n+   OPTION_NO_ISOLATION,\n+   OPTION_NO_SEH,\n+   OPTION_NO_BIND,\n+@@ -248,7 +254,8 @@\n+   OPTION_NO_INSERT_TIMESTAMP,\n+   OPTION_TERMINAL_SERVER_AWARE,\n+   OPTION_BUILD_ID,\n+-  OPTION_ENABLE_RELOC_SECTION\n++  OPTION_ENABLE_RELOC_SECTION,\n++  OPTION_DISABLE_RELOC_SECTION\n+ };\n+ \n+ static void\n+@@ -315,9 +322,12 @@\n+     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n+     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n+     {\"high-entropy-va\", no_argument, NULL, OPTION_HIGH_ENTROPY_VA},\n++    {\"no-high-entropy-va\", no_argument, NULL, OPTION_NO_HIGH_ENTROPY_VA},\n+     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n++    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n+     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n+     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n++    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n+     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n+     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n+     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n+@@ -327,6 +337,7 @@\n+     {\"no-insert-timestamp\", no_argument, NULL, OPTION_NO_INSERT_TIMESTAMP},\n+     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n+     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n++    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n+     {NULL, no_argument, NULL, 0}\n+   };\n+ \n+@@ -448,11 +461,15 @@\n+                                        in object files\\n\"));\n+   fprintf (file, _(\"  --high-entropy-va                  Image is compatible with 64-bit address space\\n\\\n+                                        layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-high-entropy-va               Image is not compatible with 64-bit ASLR\\n\"));\n+   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n+                                        address space layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n+   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n++  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n+   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n+   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n++  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n+   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n+   fprintf (file, _(\"  --no-seh                   Image does not use SEH; no SE handler may\\n\\\n+                                        be called in this image\\n\"));\n+@@ -809,12 +826,24 @@\n+     case OPTION_ENABLE_RELOC_SECTION:\n+       pep_dll_enable_reloc_section = 1;\n+       break;\n++    case OPTION_DISABLE_RELOC_SECTION:\n++      pep_dll_enable_reloc_section = 0;\n++      /* fall through */\n++    case OPTION_NO_DYNAMIC_BASE:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n++      /* fall through */\n++    case OPTION_NO_HIGH_ENTROPY_VA:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA;\n++      break;\n+     case OPTION_FORCE_INTEGRITY:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n+       break;\n+     case OPTION_NX_COMPAT:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n+       break;\n++    case OPTION_NO_NX_COMPAT:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n++      break;\n+     case OPTION_NO_ISOLATION:\n+       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n+       break;"
      },
      {
        "sha": "238fa63c45c3d804bd72c70721b0cc382f04cc23",
        "filename": "test/lint/lint-spelling.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09bc25db64dc2793ed2478422dde880881687484/test/lint/lint-spelling.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09bc25db64dc2793ed2478422dde880881687484/test/lint/lint-spelling.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-spelling.sh?ref=09bc25db64dc2793ed2478422dde880881687484",
        "patch": "@@ -15,6 +15,6 @@ if ! command -v codespell > /dev/null; then\n fi\n \n IGNORE_WORDS_FILE=test/lint/lint-spelling.ignore-words.txt\n-if ! codespell --check-filenames --disable-colors --quiet-level=7 --ignore-words=${IGNORE_WORDS_FILE} $(git ls-files -- \":(exclude)build-aux/m4/\" \":(exclude)contrib/seeds/*.txt\" \":(exclude)depends/\" \":(exclude)doc/release-notes/\" \":(exclude)src/leveldb/\" \":(exclude)src/crc32c/\" \":(exclude)src/qt/locale/\" \":(exclude)src/qt/*.qrc\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)contrib/gitian-keys/keys.txt\"); then\n+if ! codespell --check-filenames --disable-colors --quiet-level=7 --ignore-words=${IGNORE_WORDS_FILE} $(git ls-files -- \":(exclude)build-aux/m4/\" \":(exclude)contrib/seeds/*.txt\" \":(exclude)depends/\" \":(exclude)doc/release-notes/\" \":(exclude)src/leveldb/\" \":(exclude)src/crc32c/\" \":(exclude)src/qt/locale/\" \":(exclude)src/qt/*.qrc\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)contrib/gitian-keys/keys.txt\" \":(exclude)contrib/guix/patches\"); then\n     echo \"^ Warning: codespell identified likely spelling errors. Any false positives? Add them to the list of ignored words in ${IGNORE_WORDS_FILE}\"\n fi"
      }
    ]
  },
  {
    "sha": "d1d20ae9176dc84fb2e69aafd9093bfc1782de5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWQyMGFlOTE3NmRjODRmYjJlNjlhYWZkOTA5M2JmYzE3ODJkZTVm",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-03-02T22:19:03Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-12T19:47:29Z"
      },
      "message": "build: Use and test PE binutils with --reloc-section\n\nAlso fix test-security-check.py to account for new PE PIE failure\nindication.",
      "tree": {
        "sha": "c05643ad817e750a4791bf3f5a6cb50a169b79f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c05643ad817e750a4791bf3f5a6cb50a169b79f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1d20ae9176dc84fb2e69aafd9093bfc1782de5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1d20ae9176dc84fb2e69aafd9093bfc1782de5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1d20ae9176dc84fb2e69aafd9093bfc1782de5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1d20ae9176dc84fb2e69aafd9093bfc1782de5f/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09bc25db64dc2793ed2478422dde880881687484",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09bc25db64dc2793ed2478422dde880881687484",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09bc25db64dc2793ed2478422dde880881687484"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 12,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a7578fab8ab3b87b04cc59ce5aa4cc12d5da3f95",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1d20ae9176dc84fb2e69aafd9093bfc1782de5f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1d20ae9176dc84fb2e69aafd9093bfc1782de5f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=d1d20ae9176dc84fb2e69aafd9093bfc1782de5f",
        "patch": "@@ -905,6 +905,7 @@ if test x$use_hardening != xno; then\n     ])\n   fi\n \n+  AX_CHECK_LINK_FLAG([[-Wl,--enable-reloc-section]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--enable-reloc-section\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"],, [[$LDFLAG_WERROR]])"
      },
      {
        "sha": "999261732bd581aa47e7bd9388c5d93016527df7",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1d20ae9176dc84fb2e69aafd9093bfc1782de5f/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1d20ae9176dc84fb2e69aafd9093bfc1782de5f/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=d1d20ae9176dc84fb2e69aafd9093bfc1782de5f",
        "patch": "@@ -59,15 +59,17 @@ def test_PE(self):\n         cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))  # -pie -fPIE does nothing unless --dynamicbase is also supplied\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n+            (1, executable+': failed HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n             (0, ''))\n \n         clean_files(source, executable)"
      }
    ]
  },
  {
    "sha": "d9a3d3255d3565181f2e3a7c450aa01ffa8d3163",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWEzZDMyNTVkMzU2NTE4MWYyZTNhN2M0NTBhYTAxZmZhOGQzMTYz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-21T19:04:13Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-05-12T19:47:29Z"
      },
      "message": "guix: Test security-check sanity before performing them",
      "tree": {
        "sha": "c5dc2d7144ece6c1cd32f5e40eb20a2abf6ab30d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5dc2d7144ece6c1cd32f5e40eb20a2abf6ab30d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9a3d3255d3565181f2e3a7c450aa01ffa8d3163",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9a3d3255d3565181f2e3a7c450aa01ffa8d3163",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9a3d3255d3565181f2e3a7c450aa01ffa8d3163",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9a3d3255d3565181f2e3a7c450aa01ffa8d3163/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1d20ae9176dc84fb2e69aafd9093bfc1782de5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1d20ae9176dc84fb2e69aafd9093bfc1782de5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1d20ae9176dc84fb2e69aafd9093bfc1782de5f"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "af6e6b948abfa18c378115f50236644995af2ee5",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9a3d3255d3565181f2e3a7c450aa01ffa8d3163/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9a3d3255d3565181f2e3a7c450aa01ffa8d3163/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=d9a3d3255d3565181f2e3a7c450aa01ffa8d3163",
        "patch": "@@ -305,10 +305,11 @@ mkdir -p \"$DISTSRC\"\n     # Build Bitcoin Core\n     make --jobs=\"$JOBS\" ${V:+V=1}\n \n-    # Perform basic ELF security checks on a series of executables.\n+    # Check that symbol/security checks tools are sane.\n+    make test-security-check ${V:+V=1}\n+    # Perform basic security checks on a series of executables.\n     make -C src --jobs=1 check-security ${V:+V=1}\n-    # Check that executables only contain allowed gcc, glibc and libstdc++\n-    # version symbols for Linux distro back-compatibility.\n+    # Check that executables only contain allowed version symbols.\n     make -C src --jobs=1 check-symbols  ${V:+V=1}\n \n     mkdir -p \"$OUTDIR\""
      }
    ]
  }
]