[
  {
    "sha": "86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmIyZDhlNjAwZjQwMWJiZmY4NGJiYzc3NGViNWEwMzg2ZWE3OGE0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-01T17:28:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-21T12:35:19Z"
      },
      "message": "refactor: Change * to & in MutableTransactionSignatureCreator",
      "tree": {
        "sha": "23a56297ef08b5f545ff19bec1aec46c1aecbb48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23a56297ef08b5f545ff19bec1aec46c1aecbb48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68c7acf6bb7733261865afdcc05ee687ef75489d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68c7acf6bb7733261865afdcc05ee687ef75489d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68c7acf6bb7733261865afdcc05ee687ef75489d"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 23,
      "deletions": 17
    },
    "files": [
      {
        "sha": "4e261e2e5af000596640d64d18e62d6e55965dbb",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
        "patch": "@@ -653,7 +653,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n         SignatureData sigdata = DataFromTransaction(mergedTx, i, coin.out);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            ProduceSignature(keystore, MutableTransactionSignatureCreator(&mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(keystore, MutableTransactionSignatureCreator(mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         UpdateInput(txin, sigdata);\n     }"
      },
      {
        "sha": "fe7bb719a8fd6ee9806193cfb04da124c297e3ce",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
        "patch": "@@ -220,7 +220,7 @@ void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransactio\n     // Construct a would-be spend of this output, to update sigdata with.\n     // Note that ProduceSignature is used to fill in metadata (not actual signatures),\n     // so provider does not need to provide any private keys (it can be a HidingSigningProvider).\n-    MutableTransactionSignatureCreator creator(&tx, /* index */ 0, out.nValue, SIGHASH_ALL);\n+    MutableTransactionSignatureCreator creator(tx, /* index */ 0, out.nValue, SIGHASH_ALL);\n     ProduceSignature(provider, creator, out.scriptPubKey, sigdata);\n \n     // Put redeem_script, witness_script, key paths, into PSBTOutput.\n@@ -270,7 +270,7 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n     if (use_dummy) {\n         sig_complete = ProduceSignature(provider, DUMMY_SIGNATURE_CREATOR, utxo.scriptPubKey, sigdata);\n     } else {\n-        MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+        MutableTransactionSignatureCreator creator(tx, index, utxo.nValue, sighash);\n         sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n     }\n     // Verify that a witness signature was produced in case one was required."
      },
      {
        "sha": "8806602ef5dc287501c309c16416e0250ba3f8cb",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
        "patch": "@@ -704,7 +704,7 @@ static RPCHelpMan combinerawtransaction()\n                 sigdata.MergeSignatureData(DataFromTransaction(txv, i, coin.out));\n             }\n         }\n-        ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&mergedTx, i, coin.out.nValue, 1), coin.out.scriptPubKey, sigdata);\n+        ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(mergedTx, i, coin.out.nValue, 1), coin.out.scriptPubKey, sigdata);\n \n         UpdateInput(txin, sigdata);\n     }"
      },
      {
        "sha": "2612ffeb7abfc6af8a551250dd75f7e5618c8883",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
        "patch": "@@ -14,7 +14,12 @@\n \n typedef std::vector<unsigned char> valtype;\n \n-MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n+MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction& tx_to, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn)\n+    : m_txto(tx_to),\n+      nIn(nInIn),\n+      nHashType(nHashTypeIn),\n+      amount(amountIn),\n+      checker(&m_txto, nIn, amountIn) {}\n \n bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const\n {\n@@ -26,7 +31,7 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     if (sigversion == SigVersion::WITNESS_V0 && !key.IsCompressed())\n         return false;\n \n-    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n+    uint256 hash = SignatureHash(scriptCode, m_txto, nIn, nHashType, amount, sigversion);\n     if (!key.Sign(hash, vchSig))\n         return false;\n     vchSig.push_back((unsigned char)nHashType);\n@@ -377,7 +382,7 @@ bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, C\n {\n     assert(nIn < txTo.vin.size());\n \n-    MutableTransactionSignatureCreator creator(&txTo, nIn, amount, nHashType);\n+    MutableTransactionSignatureCreator creator(txTo, nIn, amount, nHashType);\n \n     SignatureData sigdata;\n     bool ret = ProduceSignature(provider, creator, fromPubKey, sigdata);\n@@ -490,7 +495,7 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n         SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mtx.vout.size())) {\n-            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(*keystore, MutableTransactionSignatureCreator(mtx, i, amount, nHashType), prevPubKey, sigdata);\n         }\n \n         UpdateInput(txin, sigdata);"
      },
      {
        "sha": "a548b1196873547d83cdd390766533c2d2062c64",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
        "patch": "@@ -34,15 +34,16 @@ class BaseSignatureCreator {\n };\n \n /** A signature creator for transactions. */\n-class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n-    const CMutableTransaction* txTo;\n+class MutableTransactionSignatureCreator : public BaseSignatureCreator\n+{\n+    const CMutableTransaction& m_txto;\n     unsigned int nIn;\n     int nHashType;\n     CAmount amount;\n     const MutableTransactionSignatureChecker checker;\n \n public:\n-    MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn = SIGHASH_ALL);\n+    MutableTransactionSignatureCreator(const CMutableTransaction& txToIn LIFETIMEBOUND, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn = SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const override { return checker; }\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };"
      },
      {
        "sha": "e78d7ee2dc1735e698698d44cab8c2046fad9ad3",
        "filename": "src/test/fuzz/script_sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/test/fuzz/script_sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/test/fuzz/script_sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sign.cpp?ref=86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
        "patch": "@@ -111,7 +111,7 @@ FUZZ_TARGET_INIT(script_sign, initialize_script_sign)\n             }\n             if (n_in < script_tx_to.vin.size()) {\n                 (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n-                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                MutableTransactionSignatureCreator signature_creator{tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n                 std::vector<unsigned char> vch_sig;\n                 CKeyID address;\n                 if (fuzzed_data_provider.ConsumeBool()) {"
      },
      {
        "sha": "1925f287458c7ee0c3caf94f8d594ce5de2efcd1",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
        "patch": "@@ -1161,7 +1161,7 @@ SignatureData CombineSignatures(const CTxOut& txout, const CMutableTransaction&\n     SignatureData data;\n     data.MergeSignatureData(scriptSig1);\n     data.MergeSignatureData(scriptSig2);\n-    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&tx, 0, txout.nValue), txout.scriptPubKey, data);\n+    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(tx, 0, txout.nValue), txout.scriptPubKey, data);\n     return data;\n }\n "
      },
      {
        "sha": "27f2e6808f3a29bba5706d319f398a01fba29be3",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
        "patch": "@@ -465,7 +465,7 @@ SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutabl\n     SignatureData sigdata;\n     sigdata = DataFromTransaction(input1, 0, tx->vout[0]);\n     sigdata.MergeSignatureData(DataFromTransaction(input2, 0, tx->vout[0]));\n-    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&input1, 0, tx->vout[0].nValue), tx->vout[0].scriptPubKey, sigdata);\n+    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(input1, 0, tx->vout[0].nValue), tx->vout[0].scriptPubKey, sigdata);\n     return sigdata;\n }\n "
      },
      {
        "sha": "023e875e0861ac44dac419921273000f3d154a61",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86b2d8e600f401bbff84bbc774eb5a0386ea78a4/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=86b2d8e600f401bbff84bbc774eb5a0386ea78a4",
        "patch": "@@ -317,7 +317,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n \n         // Sign\n         SignatureData sigdata;\n-        BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(&valid_with_witness_tx, 0, 11*CENT, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata));\n+        BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(valid_with_witness_tx, 0, 11 * CENT, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata));\n         UpdateInput(valid_with_witness_tx.vin[0], sigdata);\n \n         // This should be valid under all script flags.\n@@ -343,9 +343,9 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n \n         // Sign\n-        for (int i=0; i<2; ++i) {\n+        for (int i = 0; i < 2; ++i) {\n             SignatureData sigdata;\n-            BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(&tx, i, 11*CENT, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata));\n+            BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(tx, i, 11 * CENT, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata));\n             UpdateInput(tx.vin[i], sigdata);\n         }\n "
      }
    ]
  }
]