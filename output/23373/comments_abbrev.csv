DrahtBot,2021-10-27 14:33:20,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23546](https://github.com/bitcoin/bitcoin/pull/23546) (scripted-diff: Use clang-tidy syntax for C++ named arguments (tes",https://github.com/bitcoin/bitcoin/pull/23373#issuecomment-952991812,952991812,
vasild,2021-11-04 10:29:14,"> Is all the code processing `-- DEBUG_LOG_OUT` still needed when we might do as well `-- -printttoconsole=1` ?\n\nNot needed anymore. I did not remove it because I do not want to break existing functionality - I do not know how many scripts out there use it, or in CI, or how many devs are just used to it. Given that it is just for testing/development purposes, not used in real/production nodes ",https://github.com/bitcoin/bitcoin/pull/23373#issuecomment-960629713,960629713,
vasild,2021-11-04 15:33:04,`9b6098f41f...0c541a6dba`: take suggestions and print the error from unit tests if parsing of the arguments fails.,https://github.com/bitcoin/bitcoin/pull/23373#issuecomment-961159635,961159635,
vasild,2021-11-05 14:31:36,"`0c541a6dba...17fac018c2`: address suggestions, biggest changes due to avoidance of `gArgs`.",https://github.com/bitcoin/bitcoin/pull/23373#issuecomment-961943197,961943197,
vasild,2021-11-05 17:06:01,`17fac018c2...b374709725`: address suggestions,https://github.com/bitcoin/bitcoin/pull/23373#issuecomment-962065431,962065431,
vasild,2021-11-12 11:14:50,`b374709725...51b241bf2a`: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/23373#issuecomment-967021455,967021455,
jonatack,2021-11-03 16:05:51,"5d774a98 (only if you retouch) `s/lookup/look up|fetch/` (""lookup"" is a noun or adjective, the verb form is ""look up"")\n",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742098863,742098863,src/test/fuzz/fuzz.cpp
mzumsande,2021-11-03 23:24:00,"There is an additional parameter `-cool` in the commit message of c79eb4ad9f0adf733a9da59d87dc3a0d10a90738, is this on purpose? Just noting that providing a non-recognized parameter like that causes an assertion for each unit test. I'm not sure if this is a problem or not.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742420319,742420319,src/test/main.cpp
vasild,2021-11-04 10:23:44,"Well, the `-cool` is on purpose, like, not by accident, but may as well be removed. I wanted to use it to show that any other option is also ok there, like e.g `-putanyoptionyouwanthere`. Will remove it.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742705155,742705155,src/test/main.cpp
vasild,2021-11-04 15:33:13,Done.,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742954959,742954959,src/test/fuzz/fuzz.cpp
vasild,2021-11-04 15:33:32,Removed.,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742955303,742955303,src/test/main.cpp
vasild,2021-11-04 15:37:06,"> providing a non-recognized parameter like that causes an assertion for each unit test\n\nRight, that was not very user (or developer) friendly. For example, the command:\n\n```sh\n./src/test/test_bitcoin --run_test=""net_tests/cnode_listen_port"" -- -foo\n```\n\nresulted in:\n\n```\nAssertion failed: (success), function BasicTestingSetup, file test/util/setup_common.cpp, line 104.\nunk",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742958564,742958564,src/test/main.cpp
MarcoFalke,2021-11-04 15:41:32,"Is it now impossible to use DEBUG_LOG_OUT? If yes, might as well remove it.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742962763,742962763,src/test/util/setup_common.cpp
vasild,2021-11-04 15:51:59,"No, it is not broken by this PR. For example, both commands below produce the same output:\n\n```sh\ntest_bitcoin --run_test=""net_tests/cnode_listen_port"" -- DEBUG_LOG_OUT\ntest_bitcoin --run_test=""net_tests/cnode_listen_port"" -- -printtoconsole=1\n```",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742973035,742973035,src/test/util/setup_common.cpp
MarcoFalke,2021-11-04 16:09:53,"```suggestion\n    m_node.addrman = std::make_unique<AddrMan>(/*asmap=*/ std::vector<bool>(),\n```\n\nnit: Could use the clang-tidy understandable syntax when touching this?",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742990186,742990186,src/test/util/setup_common.cpp
MarcoFalke,2021-11-04 16:10:36,"Seems odd to push the args into m_node.args, but then read them from gArgs. Would be clearer to use the same in both places.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742990848,742990848,src/test/util/setup_common.cpp
jonatack,2021-11-04 16:12:25,"9b6098f nit, sort\n```diff\n #include <test/util/setup_common.h>\n-#include <util/translation.h>\n #include <util/system.h>\n+#include <util/translation.h>\n```",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742992477,742992477,src/test/fuzz/connman.cpp
MarcoFalke,2021-11-04 16:13:37,"```suggestion\n        // Only take into account arguments that start with `--`. The others are for the fuzz engine:\n```\n\n(nit)",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742993739,742993739,src/test/fuzz/fuzz.cpp
MarcoFalke,2021-11-04 16:16:17,"It might be clearer to use `testing_setup.m_node.args`, since this is where they were put.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742996210,742996210,src/test/fuzz/deserialize.cpp
jonatack,2021-11-04 16:16:56,"c79eb4ad headers where std::functional is added\n```diff\n+++ src/test/util/setup_common.h\n+#include <functional>\n #include <type_traits>\n #include <vector>\n```\n```diff\n+++ src/test/main.cpp \n #include <test/util/setup_common.h>\n \n+#include <functional>\n #include <iostream>\n```\n...and so on.\n\n",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742996809,742996809,src/test/util/setup_common.h
MarcoFalke,2021-11-04 16:17:13,"The fetching is done implicitly, so mention that instead of mentioning `gArgs`?",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742997081,742997081,src/test/fuzz/fuzz.cpp
MarcoFalke,2021-11-04 16:17:55,Same (obviously everywhere),https://github.com/bitcoin/bitcoin/pull/23373#discussion_r742997711,742997711,src/test/addrman_tests.cpp
jonatack,2021-11-04 16:35:41,"c79eb4ad9f0adf733a9da59d87dc3a0d10a90738 Does it makes sense for `G_TEST_COMMAND_LINE_ARGUMENTS` to be named as a constant (as it should update at runtime, yes?)",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743013893,743013893,src/test/main.cpp
vasild,2021-11-05 10:02:16,"Good question. `G_TEST_COMMAND_LINE_ARGUMENTS` is a constant (its value is the function itself, we don't change it to another function). So, strictly speaking this is a `const` variable. But we use it as a function - `G_TEST_COMMAND_LINE_ARGUMENTS()`.  I used that name for consistency with the already existent `G_TEST_LOG_FUN` which is defined a few lines earlier.\n\nSemantically it is a functio",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743527974,743527974,src/test/main.cpp
MarcoFalke,2021-11-05 10:26:23,"Upper case might be correct, see #18568. Though, maybe the `G_` should be removed, as upper case implies `G_`?",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743543704,743543704,src/test/main.cpp
vasild,2021-11-05 10:27:03,"Reworded to\n```cpp\n * Later, depending on the fuzz test, `G_TEST_COMMAND_LINE_ARGUMENTS()` may be\n * called by `BasicTestingSetup` constructor to fetch those arguments and store\n * them in `BasicTestingSetup::m_node::args`.\n```\n\nIs it better?",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743544086,743544086,src/test/fuzz/fuzz.cpp
MarcoFalke,2021-11-05 10:29:49,"It *is called*, not *may be called*? Sounds better either way.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743545833,743545833,src/test/fuzz/fuzz.cpp
vasild,2021-11-05 11:12:33,"It is called if the fuzz test creates a `BasicTestingSetup` from its `initialize_...()` function, not all of them do, right?",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743572476,743572476,src/test/fuzz/fuzz.cpp
MarcoFalke,2021-11-05 11:40:04,"If there is no `BasicTestingSetup`, you can't fetch them either ;)\n\nBut as I said, both new versions are equally fine.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743591192,743591192,src/test/fuzz/fuzz.cpp
vasild,2021-11-05 13:48:08,Done.,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743675901,743675901,src/test/util/setup_common.cpp
vasild,2021-11-05 13:52:00,"Changed the PR to avoid using `gArgs` in all places.\n\nThe global was convenient in the addrman unit tests which have 4 different AddrMan-derived classes. I think now is better because all of them receive the same arguments as the base class `AddrMan`. This increased the size of commit `test: addrman unit tests: override-able check ratio`, I think it is justified.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743679361,743679361,src/test/util/setup_common.cpp
vasild,2021-11-05 13:52:34,Done.,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743679954,743679954,src/test/fuzz/fuzz.cpp
vasild,2021-11-05 13:53:59,"Done, it was necessary to define the `testing_setup` variable as a global, outside of the `initialize_...()` function so that it can be accessed by this code.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743681078,743681078,src/test/fuzz/deserialize.cpp
vasild,2021-11-05 13:54:25,Removed all usage of `gArgs`.,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743681391,743681391,src/test/addrman_tests.cpp
vasild,2021-11-05 13:54:36,Sorted.,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743681552,743681552,src/test/fuzz/connman.cpp
vasild,2021-11-05 13:56:03,"Anyway, for this PR I think consistency with the neighboring `G_TEST_LOG_FUN` is the most important. Marking this as resolved, feel free to comment further / unresolve it.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743682742,743682742,src/test/main.cpp
vasild,2021-11-05 14:10:04,Added `#include <functional>` in all places where `std::function` is used (relevant to this PR).,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743694026,743694026,src/test/util/setup_common.h
vasild,2021-11-05 14:21:25,Ok :),https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743703468,743703468,src/test/fuzz/fuzz.cpp
MarcoFalke,2021-11-05 14:49:02,why the `!`?,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743727403,743727403,src/bench/addrman.cpp
MarcoFalke,2021-11-05 14:53:02,Why is this check needed?,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743731070,743731070,src/test/fuzz/addrman.cpp
MarcoFalke,2021-11-05 14:54:45,same,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743732651,743732651,src/test/fuzz/connman.cpp
vasild,2021-11-05 15:47:13,"Because `false` was passed in the original code, denoting ""not deterministic"".",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743777099,743777099,src/bench/addrman.cpp
MarcoFalke,2021-11-05 15:53:25,It appears a bit confusing to me to set `DETERMINISTIC=true` and get non-determinism,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743781941,743781941,src/bench/addrman.cpp
vasild,2021-11-05 15:59:17,"`initialize_addrman()` will be called from `data_stream_addr_man`, `addrman` and `addrman_serdeser` tests. Without this check it will create and destroy the `BasicTestingSetup` object before/after each test. I do not know if this is a problem. The code I mimic (and which presumably works) is using `static` variable inside the `initialize_...()` function:\n\nhttps://github.com/bitcoin/bitcoin/blo",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743786724,743786724,src/test/fuzz/addrman.cpp
vasild,2021-11-05 16:10:19,"I think it is ok, but if it is confusing somebody then it is not good. Should I go back to `/*deterministic=*/false`?",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743795294,743795294,src/bench/addrman.cpp
MarcoFalke,2021-11-05 16:13:05,"It is only possible to run one fuzz target at a time and it is not possible to switch the fuzz target.\n\nThe reasons to use the initialize function is because globals that are initialized before main are bad. For fuzzing that means even globals that are never used can poison the coverage data or crash the fuzz target. Also, using the init function allows the fuzz engine to properly set up its o",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743797440,743797440,src/test/fuzz/addrman.cpp
MarcoFalke,2021-11-05 16:14:27,"no opinion on that, but if you want to keep `DETERMINISTIC`, it might be better set to false",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743798530,743798530,src/bench/addrman.cpp
vasild,2021-11-05 16:19:19,Why are those `initialize...()` functions using `static` variables?,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743802250,743802250,src/test/fuzz/addrman.cpp
MarcoFalke,2021-11-05 16:31:10,"`static` inside a function will only call the constructor when called the first time.\n\nThey use `static` because the constructed object needs to live after the function returned.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743811369,743811369,src/test/fuzz/addrman.cpp
vasild,2021-11-05 17:00:09,Reverted to `/*deterministic=*/false`.,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743833047,743833047,src/bench/addrman.cpp
vasild,2021-11-05 17:03:58,"> They use `static` because the constructed object needs to live after the function returned\n\nOh, yes, of course. I completely missed that aspect. Was only focusing on the fact that the `static` variables will be initialized only once even if the function is called multiple times.\n\nChanged now to do like the other tests, e.g. `src/test/fuzz/coins_view.cpp`.",https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743835889,743835889,src/test/fuzz/addrman.cpp
vasild,2021-11-05 17:04:52,Removed.,https://github.com/bitcoin/bitcoin/pull/23373#discussion_r743836494,743836494,src/test/fuzz/connman.cpp
