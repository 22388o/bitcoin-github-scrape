[
  {
    "sha": "a897af773a877d1cc87597016f719fcdedfb7074",
    "node_id": "C_kwDOABII59oAKGE4OTdhZjc3M2E4NzdkMWNjODc1OTcwMTZmNzE5ZmNkZWRmYjcwNzQ",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-10-08T16:11:40Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-12T10:49:30Z"
      },
      "message": "test: parse the command line arguments in unit tests\n\nRetrieve the command line arguments from boost and pass them to\n`BasicTestingSetup` so that we gain extra flexibility of passing any\nconfig options on the test command line, e.g.:\n\n```\ntest_bitcoin -- -printtoconsole=1 -checkaddrman=5\n```",
      "tree": {
        "sha": "46d792b95782cd7172bdeea70c5750e1ba686e3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46d792b95782cd7172bdeea70c5750e1ba686e3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a897af773a877d1cc87597016f719fcdedfb7074",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGORroACgkQVN8G9ktV\ny78UUx/+LJfBgqO3JLMnyg/3ZuqtmCVOF8KsXGjCbwYR1jG/DcPRxevE1TFwJDhA\npjbWOYRGNtDc0Yqqr/vRuJzl5q+97ygQiwnI+tlICqKzg4AAcuO5eTjnUjEXrLxs\nTULtaG5beDi+sm+lSK4deKkDqYTyqrLYeaE0ZtIdorjKMgiEohX2HR0XnsJTIdRP\nqzqfcKX96Fz9WexYIJef+4vV3BdH5qateeX2ih8TJXVJ2Pu91340nJtMO/UMbhRL\n4x1H5JuMZ+D8pa4KOzf1XHB4942bT0TAekFX03j/EXVRdxqsQhuXnKbpV8nKNfEp\n1efFXEb823GZmV3fnkpPXMSTthIdIIIjSBtXEv3V0NeoZ80Dmewwa8MXob05xBzE\nRpNmT4r7xySjhArE1BCa7/ZD45MHk8VTArKP/eHfTvirOSxAXVwYnyteJlI6GL5P\nwoC2tGsyC472ktNuXYcp0UkBUjXXFhSxvRdktto2/0Ysn5uinYTIEC38892aQB1h\nG1AgZYob0GYVuNNLGRrkePB3q0/4tyKbruKfxiyT12tsGbLFwe2ZGnT/LZg4r3mI\nzDnb/EfynlTDBYXRG3kMTz3UssaIVo4F8IM7jOoAiRjFMjb+VgLKAW7Tv+qgOU14\nIKdhp6gkZS+SKLmeSc+3qj1nFsib7+xx2XGws7dS9KyJRJwhnohtJtIOTwNuSEpr\nrmEMuX3fwKLuPEVN4jnYytkembAyZ5NawDflsCkn7KKshC6IituBrOy4F1c7zruE\n0B5kMIoyeDjS2Oixd/fDyGTcP6BaZYgz74N+L1Nc5Z/rx7IeOuMH4mdrtUWnTPn7\nrLkEGxCzz0ODKAIpkUgAKFQ7VNZE3iXHl2/Q/4pt6Pmx/xcaSfSA7SfFzohN4CQy\n1ClLvHVSO800qugwh4XPbSrrBz3OWkROAw77JnbMew0YM7t89NdaWHH6/LH2233A\n76ehKqp1mhk1LwifawCz6BMAR3hR+Jq8z4a4PvqAk/GaCz8HvhF+jc5GcSKf853T\njKTmZKNwrJtyH+Sq/hvw+qjjTq+OEwSaCGo7yi81F8ddmeTFaF6cUSIfjsI6OScy\nrfwOCOirHJMSrXV9yBcoQvMv4n7DmPnAv74+SmH0C3veDS/IHBksTWlJbvTwDmxY\nmlxx+Q1LUuoN3G4Ih/ynArp3q6opYDTf7QtR9zoKDovHN6E9gilPowD/+3M1QYzY\nigZxcbmLrAQXp1UidoviyszSTk7WTubnGaKFgsXzHll61eyA+47RlOmWOPn6sINQ\nXqQ3l4erHmEwOU40UqKiURLFGSBSC+pKWgNAuNNz/kQuNtBNX2mpK3gYiygphFve\nCAUf///aki0DRkvMuOH5AEShsdjKIg==\n=iyBi\n-----END PGP SIGNATURE-----",
        "payload": "tree 46d792b95782cd7172bdeea70c5750e1ba686e3b\nparent 1ff265a20c36ada4c7b1c5c88d31eb92ec9e8420\nauthor Vasil Dimov <vd@FreeBSD.org> 1633709500 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1636714170 +0100\n\ntest: parse the command line arguments in unit tests\n\nRetrieve the command line arguments from boost and pass them to\n`BasicTestingSetup` so that we gain extra flexibility of passing any\nconfig options on the test command line, e.g.:\n\n```\ntest_bitcoin -- -printtoconsole=1 -checkaddrman=5\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a897af773a877d1cc87597016f719fcdedfb7074",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a897af773a877d1cc87597016f719fcdedfb7074",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a897af773a877d1cc87597016f719fcdedfb7074/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ff265a20c36ada4c7b1c5c88d31eb92ec9e8420",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ff265a20c36ada4c7b1c5c88d31eb92ec9e8420",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ff265a20c36ada4c7b1c5c88d31eb92ec9e8420"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 35,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c3fdbacd26aaa850f45ab1edaa9e770502d2fbe7",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a897af773a877d1cc87597016f719fcdedfb7074/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a897af773a877d1cc87597016f719fcdedfb7074/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=a897af773a877d1cc87597016f719fcdedfb7074",
        "patch": "@@ -19,6 +19,8 @@ using namespace std::chrono_literals;\n \n const std::function<void(const std::string&)> G_TEST_LOG_FUN{};\n \n+const std::function<std::vector<const char*>()> G_TEST_COMMAND_LINE_ARGUMENTS{};\n+\n namespace {\n \n void GenerateTemplateResults(const std::vector<ankerl::nanobench::Result>& benchmarkResults, const std::string& filename, const char* tpl)"
      },
      {
        "sha": "e519ce4895867b05252707d43bb32e273477ee84",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a897af773a877d1cc87597016f719fcdedfb7074/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a897af773a877d1cc87597016f719fcdedfb7074/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=a897af773a877d1cc87597016f719fcdedfb7074",
        "patch": "@@ -22,6 +22,7 @@\n #include <QApplication>\n #include <QObject>\n #include <QTest>\n+#include <functional>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n@@ -39,6 +40,8 @@ Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);\n \n const std::function<void(const std::string&)> G_TEST_LOG_FUN{};\n \n+const std::function<std::vector<const char*>()> G_TEST_COMMAND_LINE_ARGUMENTS{};\n+\n // This is all you need to run all the tests\n int main(int argc, char* argv[])\n {"
      },
      {
        "sha": "1c994a53cfb8cad122dfbd3b6fbb0da68f47d234",
        "filename": "src/test/fuzz/fuzz.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a897af773a877d1cc87597016f719fcdedfb7074/src/test/fuzz/fuzz.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a897af773a877d1cc87597016f719fcdedfb7074/src/test/fuzz/fuzz.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.cpp?ref=a897af773a877d1cc87597016f719fcdedfb7074",
        "patch": "@@ -12,13 +12,16 @@\n \n #include <cstdint>\n #include <exception>\n+#include <functional>\n #include <memory>\n #include <string>\n #include <unistd.h>\n #include <vector>\n \n const std::function<void(const std::string&)> G_TEST_LOG_FUN{};\n \n+const std::function<std::vector<const char*>()> G_TEST_COMMAND_LINE_ARGUMENTS{};\n+\n std::map<std::string_view, std::tuple<TypeTestOneInput, TypeInitialize, TypeHidden>>& FuzzTargets()\n {\n     static std::map<std::string_view, std::tuple<TypeTestOneInput, TypeInitialize, TypeHidden>> g_fuzz_targets;"
      },
      {
        "sha": "1ad8fcce3ae3e49862ac3978abe464d7483d248a",
        "filename": "src/test/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a897af773a877d1cc87597016f719fcdedfb7074/src/test/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a897af773a877d1cc87597016f719fcdedfb7074/src/test/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main.cpp?ref=a897af773a877d1cc87597016f719fcdedfb7074",
        "patch": "@@ -11,6 +11,7 @@\n \n #include <test/util/setup_common.h>\n \n+#include <functional>\n #include <iostream>\n \n /** Redirect debug log to unit_test.log files */\n@@ -24,3 +25,17 @@ const std::function<void(const std::string&)> G_TEST_LOG_FUN = [](const std::str\n     if (!should_log) return;\n     std::cout << s;\n };\n+\n+/**\n+ * Retrieve the command line arguments from boost.\n+ * Allows usage like:\n+ * `test_bitcoin --run_test=\"net_tests/cnode_listen_port\" -- -checkaddrman=1 -printtoconsole=1`\n+ * which would return `[\"-checkaddrman=1\", \"-printtoconsole=1\"]`.\n+ */\n+const std::function<std::vector<const char*>()> G_TEST_COMMAND_LINE_ARGUMENTS = []() {\n+    std::vector<const char*> args;\n+    for (int i = 1; i < boost::unit_test::framework::master_test_suite().argc; ++i) {\n+        args.push_back(boost::unit_test::framework::master_test_suite().argv[i]);\n+    }\n+    return args;\n+};"
      },
      {
        "sha": "596ec1f954ae24a06668cdd4f9d51fe5618de1d6",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a897af773a877d1cc87597016f719fcdedfb7074/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a897af773a877d1cc87597016f719fcdedfb7074/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=a897af773a877d1cc87597016f719fcdedfb7074",
        "patch": "@@ -39,6 +39,7 @@\n #include <walletinitinterface.h>\n \n #include <functional>\n+#include <stdexcept>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n UrlDecodeFn* const URL_DECODE = nullptr;\n@@ -77,7 +78,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n       m_args{}\n {\n     m_node.args = &gArgs;\n-    const std::vector<const char*> arguments = Cat(\n+    std::vector<const char*> arguments = Cat(\n         {\n             \"dummy\",\n             \"-printtoconsole=0\",\n@@ -89,6 +90,9 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n             \"-debugexclude=leveldb\",\n         },\n         extra_args);\n+    if (G_TEST_COMMAND_LINE_ARGUMENTS) {\n+        arguments = Cat(arguments, G_TEST_COMMAND_LINE_ARGUMENTS());\n+    }\n     util::ThreadRename(\"test\");\n     fs::create_directories(m_path_root);\n     m_args.ForceSetArg(\"-datadir\", fs::PathToString(m_path_root));\n@@ -97,9 +101,9 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n     {\n         SetupServerArgs(*m_node.args);\n         std::string error;\n-        const bool success{m_node.args->ParseParameters(arguments.size(), arguments.data(), error)};\n-        assert(success);\n-        assert(error.empty());\n+        if (!m_node.args->ParseParameters(arguments.size(), arguments.data(), error)) {\n+            throw std::runtime_error{error};\n+        }\n     }\n     SelectParams(chainName);\n     SeedInsecureRand();"
      },
      {
        "sha": "28328bb3a54f10b43c06da88d7bf04ff62b9b623",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a897af773a877d1cc87597016f719fcdedfb7074/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a897af773a877d1cc87597016f719fcdedfb7074/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=a897af773a877d1cc87597016f719fcdedfb7074",
        "patch": "@@ -18,12 +18,16 @@\n #include <util/string.h>\n #include <util/vector.h>\n \n+#include <functional>\n #include <type_traits>\n #include <vector>\n \n /** This is connected to the logger. Can be used to redirect logs to any other log */\n extern const std::function<void(const std::string&)> G_TEST_LOG_FUN;\n \n+/** Retrieve the command line arguments. */\n+extern const std::function<std::vector<const char*>()> G_TEST_COMMAND_LINE_ARGUMENTS;\n+\n // Enable BOOST_CHECK_EQUAL for enum class types\n template <typename T>\n std::ostream& operator<<(typename std::enable_if<std::is_enum<T>::value, std::ostream>::type& stream, const T& e)"
      }
    ]
  },
  {
    "sha": "a08766c589fc5a311e71e69c250775897277b47c",
    "node_id": "C_kwDOABII59oAKGEwODc2NmM1ODlmYzVhMzExZTcxZTY5YzI1MDc3NTg5NzI3N2I0N2M",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-10-26T15:26:16Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-12T10:49:31Z"
      },
      "message": "fuzz: parse the command line arguments in fuzz tests\n\nRetrieve the command line arguments from the fuzzer and save them for\nlater retrieval by `BasicTestingSetup` so that we gain extra flexibility\nof passing any config options on the test command line, e.g.:\n\n```\nFUZZ=addrman ./src/test/fuzz/fuzz --checkaddrman=5\n```\n\nA fuzz test should call `MakeNoLogFileContext<>()` in its initialize\nfunction in order to invoke the constructor of `BasicTestingSetup`,\nwhich sets `gArgs`.",
      "tree": {
        "sha": "e8e8d2004f9d9bf384838a419857dba843e65498",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8e8d2004f9d9bf384838a419857dba843e65498"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a08766c589fc5a311e71e69c250775897277b47c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGORrsACgkQVN8G9ktV\ny78esx//UXF+ywOTPP8v6aT7EGMWZGU/Ft/u4X97AM+HB9po08xc1BUuOBbNht0m\nLkDfWwHePPrkqij2n114BthLEdYG2dTGaVaAoGy1zVK2sSBe+61I708OUvZJQGjW\nr6q+gpRspVCsI4xNjQY98B74Vvf1KD/mV/CpiiFv/dfGvqqe3fERHgnl/tGczQ4F\n779s2meeXmz33Qc4uidxgYgfF1f66pK0bdrTAwAl67IGnXSql8TUEBuWTctc3uaZ\nHBog4lACBAFUf0rtI4ffGue5Y1xkp+x84H5kcGOTdcZ8+9XqadU2nrvjiGZmTHCa\nAG/Mt1pLhQ6f9lC/zB+eF02ot34SCAKXdpOrwiNP7z7Pq2oZDllJ/EMChYY93gld\niBQRrnla8gZTiqAUHG6uOwY35l4HTGNCx0jpBofe/E6uRYZ2I+HCPHgGdjpaDYYl\n2LbSD0A4vUgY8L3jXPQS/T2UEe6dNM/cmMySwURgqifJvI3Z0DlRgs4z4s0Halh7\naYF9ddUF4uOkUh2IFTJzgqobJtYVw25bXpMkiVITFP0upXCP0bEx8QA0rmCXAELv\nOxmZ3sF/11EnduKEmTWJgNG9FOS2Xs2th1aU3dAVuVnnRnJQAYunHFlnRAjpNhiQ\nLdLh8VN0epkXQb3GsWZFFdrAqyMGVu9sErcNolqX5JQSpPBAVkLo8aLndTUnwZvT\nXxkVP4jEpJG4d0/ipTI8jQuaTu0UfIvJwXkjYjsOSZfemn/oRHb7J0cETNXxdQ2q\n2YagpYS68LXN23H6Tj1sdYztX6dSfo/kHRaEltVHTSdyFRNQ7KL5GQAu74z0IhAz\niHcict/zSb+eSZpSrlEIBheulDdcBZo/PPRq3Rgf9Hj+xRcA/lvVSwlmEx73ztCU\nI6TYR0+79CLG1D9T0vUrfn6Fw9Mu3GXJeJWehdkroWF1mP7PKvraARbp9fy/kxnD\n0OR/Ndbe8mBbZTppzGf7HpND5txCXBv1GQqox58VhYkjPFERO5dcD4JMuLXybFiO\nj7XS8z3JQBDEk/NwTDYDwB6NlKmIVZIjgCpzFf/gxC4ee8dmxzG330x/b1u3Hfxl\n8DbUA6TrkPAIRQ8lvj0IGlD/5Ss62M1CYHNJL1WLfyLKm1hkIx3ufu44A9iQvwKs\nbjKt+cQZPXS38f50sTY7dP42ftJYt+tBXzisjQXBRIBkUTqoA5mDTAJEgpgsFEDi\nXu3i0dcOffzza6Cmgjlo8XKFC8O9/v18ZsWj9MTBaEb8tvNZTUETe1kW0da1oNJY\niwjFDnp87P0f7kFmGK8vsvf9q3NTY8izjMfuddJl+TmFZ3BXKb+inwv5Ypl5JMzE\n5Hxy84PKi98HsVc3F0jbRwei1ZRM7w==\n=umAG\n-----END PGP SIGNATURE-----",
        "payload": "tree e8e8d2004f9d9bf384838a419857dba843e65498\nparent a897af773a877d1cc87597016f719fcdedfb7074\nauthor Vasil Dimov <vd@FreeBSD.org> 1635261976 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1636714171 +0100\n\nfuzz: parse the command line arguments in fuzz tests\n\nRetrieve the command line arguments from the fuzzer and save them for\nlater retrieval by `BasicTestingSetup` so that we gain extra flexibility\nof passing any config options on the test command line, e.g.:\n\n```\nFUZZ=addrman ./src/test/fuzz/fuzz --checkaddrman=5\n```\n\nA fuzz test should call `MakeNoLogFileContext<>()` in its initialize\nfunction in order to invoke the constructor of `BasicTestingSetup`,\nwhich sets `gArgs`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a08766c589fc5a311e71e69c250775897277b47c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a08766c589fc5a311e71e69c250775897277b47c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a08766c589fc5a311e71e69c250775897277b47c/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a897af773a877d1cc87597016f719fcdedfb7074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a897af773a877d1cc87597016f719fcdedfb7074",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a897af773a877d1cc87597016f719fcdedfb7074"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 24,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3f8b2f8d0825f28c1a4acc1453e00e5cbaf827ec",
        "filename": "src/test/fuzz/fuzz.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a08766c589fc5a311e71e69c250775897277b47c/src/test/fuzz/fuzz.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a08766c589fc5a311e71e69c250775897277b47c/src/test/fuzz/fuzz.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.cpp?ref=a08766c589fc5a311e71e69c250775897277b47c",
        "patch": "@@ -20,7 +20,28 @@\n \n const std::function<void(const std::string&)> G_TEST_LOG_FUN{};\n \n-const std::function<std::vector<const char*>()> G_TEST_COMMAND_LINE_ARGUMENTS{};\n+/**\n+ * A copy of the command line arguments that start with `--`.\n+ * First `LLVMFuzzerInitialize()` is called, which saves the arguments to `g_args`.\n+ * Later, depending on the fuzz test, `G_TEST_COMMAND_LINE_ARGUMENTS()` may be\n+ * called by `BasicTestingSetup` constructor to fetch those arguments and store\n+ * them in `BasicTestingSetup::m_node::args`.\n+ */\n+static std::vector<const char*> g_args;\n+\n+static void set_args(int argc, char** argv) {\n+    for (int i = 1; i < argc; ++i) {\n+        // Only take into account arguments that start with `--`. The others are for the fuzz engine:\n+        // `fuzz -runs=1 fuzz_seed_corpus/address_deserialize_v2 --checkaddrman=5`\n+        if (strlen(argv[i]) > 2 && argv[i][0] == '-' && argv[i][1] == '-') {\n+            g_args.push_back(argv[i]);\n+        }\n+    }\n+}\n+\n+const std::function<std::vector<const char*>()> G_TEST_COMMAND_LINE_ARGUMENTS = []() {\n+    return g_args;\n+};\n \n std::map<std::string_view, std::tuple<TypeTestOneInput, TypeInitialize, TypeHidden>>& FuzzTargets()\n {\n@@ -98,13 +119,15 @@ extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)\n // This function is used by libFuzzer\n extern \"C\" int LLVMFuzzerInitialize(int* argc, char*** argv)\n {\n+    set_args(*argc, *argv);\n     initialize();\n     return 0;\n }\n \n #if defined(PROVIDE_FUZZ_MAIN_FUNCTION)\n int main(int argc, char** argv)\n {\n+    set_args(argc, argv);\n     initialize();\n     static const auto& test_one_input = *Assert(g_test_one_input);\n #ifdef __AFL_INIT"
      }
    ]
  },
  {
    "sha": "ea1cba3971722df197a61b5c50b493910365193a",
    "node_id": "C_kwDOABII59oAKGVhMWNiYTM5NzE3MjJkZjE5N2E2MWI1YzUwYjQ5MzkxMDM2NTE5M2E",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-10-26T15:48:05Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-12T10:49:31Z"
      },
      "message": "bench: put addrman check ratio in a variable\n\nSo that it is easy to modify through the file `bench/addrman.cpp`.",
      "tree": {
        "sha": "066a58b8e430cb0dc63d367070632a75d9a4a097",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/066a58b8e430cb0dc63d367070632a75d9a4a097"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea1cba3971722df197a61b5c50b493910365193a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGORrwACgkQVN8G9ktV\ny78YYB//YmOfciR2bxsF5kMnTauI4DkwTmZeY9lwZIrO8zJZKis3duo4f2Z8IvIX\nNdKKYjsilQsxaWee2C3ePF5nZwdhMtgvHw12xqadcYoHa08o93tFANlZr+fEAmL1\nXkT4lRri+KPGILH3nZlRrHzxgVb0TldVrduHu/Jm8Q4bIRPdCbQZP2dfn5WbAKYc\nzswaowR09ySX2kFMIvyLJOREAtdQld6pgISZHsTKhnad+KwKGtAWbr/4q7B04IOl\nZfj8tEzu7inuqB3nNAkYpfg6rNiYmdRe/KZxLFkioKWSYs5BZ6upmHQjW1eYd+MC\nU5cgBMcP05G8Yr+2UU/CaeXeixgdUTM68sCm1sGpN6vXUAVAqV8ye9bZN7fcQviK\nQKTaaDlWLMf9JUe4uJXoLapMDpi9hQx7StpbVxKdctbE1v29UwA8/Ldfb626XZlM\nhvzZPG9tS0+j4VtNp3h7MfNWUAZldCNe35ou5pYB9ZfPLGqIpoCmMi9w5C5pnLYt\n+Qdq8+k0cUanUHdEujgz+vpyLnpWYuFw7EgM/1+oz+tbBdSZXxh0haZZUQ34GW6S\nIHb7FUkKiaAwnpePwfG47nkkFABcQjCl4sfHUwzKpko8kYpb2AuhkRvUmRw0AgYZ\nxMniIRGMpPyfQKBjl2mQUEjG7RwmDKmIkZrO0jbecIM07yI9JkYmw7FLjX9NWA9n\nOTHRN+yI9g4EA3n+zeKfwg94WyMQ8Bl3BTewES8aj6xDRryNxxbiWmjey5cp9EN1\nzlCA4RP+KgUeLU9F/DFDFr/Xmvy+HOZQVps6CoHj2xZzXZm9M5/D68oq3IIFk0Lr\nNLarnmpwsdAxUvD59lZVZ0xyWJtVdfHtrKzb+9UtxwsiZCokabMufT0pvWfxfXh/\nJz2WAUp7ntzsQ6uSAI2Uyhw72ksnmjZ+ZcVDydNAaQ7I7gAMUhauY16ZA4AySpjF\n2RBSnouMvo9j6tBHY94c75laK5U2wP3VujbAq6WIUvnvMSaLO+l3Tc+3Y/6ctrOJ\nlfbFdOYhSY9BfkGJn7gBHZUG3y4p3wWvL4mjqs2zFCqIncSWEO2RFl7p8sc/pIY9\nLPYISJ/tr1/I/MkaIfysGdO/8qr7Wb08eM4Dn/89NpBJuUh1mVcZCRJPBW+csQi4\nXPf7OxqTdoohRhN03y5VFq//B52+93lPT3/3aAdc19Zi6e2CwBRG5bh3QY9X9XH6\nrlqgPAFoghTNf4b094iFALhnW6PzDvxuVSPvUBD32GEWALQrgjSdKGi2ggff4/Lo\nc0SU37ycJnS41omHQfE3vCedgxKQRI77o8LeRAePmmJrS/6o+PsuY5iK7vMOJXHW\nc42+x2YDPBnq9dO2qVWspHE+gHzP4A==\n=5BGf\n-----END PGP SIGNATURE-----",
        "payload": "tree 066a58b8e430cb0dc63d367070632a75d9a4a097\nparent a08766c589fc5a311e71e69c250775897277b47c\nauthor Vasil Dimov <vd@FreeBSD.org> 1635263285 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1636714171 +0100\n\nbench: put addrman check ratio in a variable\n\nSo that it is easy to modify through the file `bench/addrman.cpp`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea1cba3971722df197a61b5c50b493910365193a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea1cba3971722df197a61b5c50b493910365193a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea1cba3971722df197a61b5c50b493910365193a/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a08766c589fc5a311e71e69c250775897277b47c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a08766c589fc5a311e71e69c250775897277b47c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a08766c589fc5a311e71e69c250775897277b47c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "23de0f12edf7f464dac9070ca6d9faf294cd1554",
        "filename": "src/bench/addrman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea1cba3971722df197a61b5c50b493910365193a/src/bench/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea1cba3971722df197a61b5c50b493910365193a/src/bench/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/addrman.cpp?ref=ea1cba3971722df197a61b5c50b493910365193a",
        "patch": "@@ -16,6 +16,9 @@\n static constexpr size_t NUM_SOURCES = 64;\n static constexpr size_t NUM_ADDRESSES_PER_SOURCE = 256;\n \n+static const std::vector<bool> EMPTY_ASMAP;\n+static constexpr uint32_t ADDRMAN_CONSISTENCY_CHECK_RATIO{0};\n+\n static std::vector<CAddress> g_sources;\n static std::vector<std::vector<CAddress>> g_addresses;\n \n@@ -74,14 +77,14 @@ static void AddrManAdd(benchmark::Bench& bench)\n     CreateAddresses();\n \n     bench.run([&] {\n-        AddrMan addrman{/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0};\n+        AddrMan addrman{EMPTY_ASMAP, /*deterministic=*/false, ADDRMAN_CONSISTENCY_CHECK_RATIO};\n         AddAddressesToAddrMan(addrman);\n     });\n }\n \n static void AddrManSelect(benchmark::Bench& bench)\n {\n-    AddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+    AddrMan addrman{EMPTY_ASMAP, /*deterministic=*/false, ADDRMAN_CONSISTENCY_CHECK_RATIO};\n \n     FillAddrMan(addrman);\n \n@@ -93,7 +96,7 @@ static void AddrManSelect(benchmark::Bench& bench)\n \n static void AddrManGetAddr(benchmark::Bench& bench)\n {\n-    AddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+    AddrMan addrman{EMPTY_ASMAP, /*deterministic=*/false, ADDRMAN_CONSISTENCY_CHECK_RATIO};\n \n     FillAddrMan(addrman);\n \n@@ -122,7 +125,7 @@ static void AddrManAddThenGood(benchmark::Bench& bench)\n         //\n         // This has some overhead (exactly the result of AddrManAdd benchmark), but that overhead is constant so improvements in\n         // AddrMan::Good() will still be noticeable.\n-        AddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+        AddrMan addrman{EMPTY_ASMAP, /*deterministic=*/false, ADDRMAN_CONSISTENCY_CHECK_RATIO};\n         AddAddressesToAddrMan(addrman);\n \n         markSomeAsGood(addrman);"
      }
    ]
  },
  {
    "sha": "fc6969bdccfd64fb24fe9e138be0539c6cf55073",
    "node_id": "C_kwDOABII59oAKGZjNjk2OWJkY2NmZDY0ZmIyNGZlOWUxMzhiZTA1MzljNmNmNTUwNzM",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-10-26T15:51:43Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-12T11:13:19Z"
      },
      "message": "test: addrman unit tests: override-able check ratio\n\nIn addrman unit tests, make it possible to override the check ratio from\nthe command line, without recompiling:\n\n```\ntest_bitcoin --run_test=\"addrman_tests/*\" -- -checkaddrman=1\n```\n\nAlso, make the arguments of the constructor of `AddrManTest` the\nsame as the arguments of `AddrMan`.",
      "tree": {
        "sha": "cab4a7cf1c632078bfe4457835f4833f9956ac53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cab4a7cf1c632078bfe4457835f4833f9956ac53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc6969bdccfd64fb24fe9e138be0539c6cf55073",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGOTFAACgkQVN8G9ktV\ny79uZSAApNmBNxDxEiKufqdPRoC9d7B3I5FqSnGscT2ZY56dGqXncW/F7TJwWZOE\nLa2bd4VJvKXwXtPlLNSmu4oXbbPUqsAeg0QCB0JpsupKc7zbt41r4dfR+wZWzQzA\n2z2HIztmQkhPKrq/cQ9P9+frZvCGkhc14f1GyoYvesDGLfKpddb6ljbH5aDL1cBZ\nlVec1C2s8ppyW9fagD/89nFKBwvwsoBc9I6urDzoeunO34+z1xXF3M3LjoGhnslx\nHpogr7dEir/y8sqKHcssoZ/xGAnukV/LFAH1JlxLvhz95ZvF2dWExPRxr675xTpw\n3W0P/sOYaEIOpuhI/9NAAUI1Q1evDbG+wBfrWfEPKeyRmPg4U/o9nC4JnioP4sk0\nSXtBImnlEnt1serOIwJavXKTwPb9gRqlnzN/TwlSjGT7uynrGE5AZXWniatTb6mu\nuH4Q2dz/4MfnCSXd+1GDf+p8WGDu8H7wcv5V/d63dI2ztxHCEwisgTDmuSEeG2PO\n6gtQnuOuNAqCW1p/yvoO6j37zwvKqQByfFyhW2asj0ynjfIo5qdw6fISUWmqTP5C\nB5mZBtbEn7Ph/wHbaw9rIvYYw+qkW/erj+cprwlVwD2a5u4dQYuVGC4eNvFnbwWr\nCq9gtO98nHjzSCiRdChmaL0U1kVn4LuyMnwHRle0fpl+WreuAiEzXeRjw4Lu/1uc\n3JFBgsXlrXX5rCtnHjEUWbanSQM0wwfHKF6cNkfe8wIeAJ1oHY7VMtdsr0YiCVuN\nqTZjM4dvqHgMTjKzP5CQoTKjhAsqpqgVYFH5KytlcaDymuEWH1ABgh5nCLKpaON7\nUwCYYh2I9b3vAI2xlKBjQpGEGolXmFDtW5iffvQnGMguRRwV9kluvSmen65JNbmh\n2AQnOMhLW+INd0Y5ESiIyKOXXqEMy6Vwwc2v/hTRxBrHY4RDhLO8u9qdmcHJJCyp\npYLhq9ALAPt2dDSxPR9aC5gmDd6iD3Mqy4KTMn5DwZK5RAGFmfpv2T2anlCAhgvC\nLuJWJPVYtA7WQbcXAr7m5QQ02RBOR6gbybIvqTgJm3NjLIQVKdQVCchzwS13Qmo0\nafft5nNjJlaxXuFhT40A5sLCkc4hI8a3KBR1Jzyk6o70EwHhdgUpH7BEHgVv5ED4\n/YWpLr4DuFzx8ucwcH93AyL3P2E+0zU04fJBgU5EShubK2CZ3FZjqJMZq37I2aFs\nUCJM9YbU0qXdQx2kieBPb7TUqayP6mbS81wgJitvMtWKpceLEfzJuWwHF6TXzv2W\nPUkAIgxd5n/tDbwMpjRAFYWKi3R6V+mk7r/gP91xccS9FHbRwNFOHmpDQVg4vV8h\njly6PC8b463KN5sJMy0XxZrZtlRgwQ==\n=C1TQ\n-----END PGP SIGNATURE-----",
        "payload": "tree cab4a7cf1c632078bfe4457835f4833f9956ac53\nparent ea1cba3971722df197a61b5c50b493910365193a\nauthor Vasil Dimov <vd@FreeBSD.org> 1635263503 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1636715599 +0100\n\ntest: addrman unit tests: override-able check ratio\n\nIn addrman unit tests, make it possible to override the check ratio from\nthe command line, without recompiling:\n\n```\ntest_bitcoin --run_test=\"addrman_tests/*\" -- -checkaddrman=1\n```\n\nAlso, make the arguments of the constructor of `AddrManTest` the\nsame as the arguments of `AddrMan`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc6969bdccfd64fb24fe9e138be0539c6cf55073",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc6969bdccfd64fb24fe9e138be0539c6cf55073",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc6969bdccfd64fb24fe9e138be0539c6cf55073/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea1cba3971722df197a61b5c50b493910365193a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea1cba3971722df197a61b5c50b493910365193a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea1cba3971722df197a61b5c50b493910365193a"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 49,
      "deletions": 34
    },
    "files": [
      {
        "sha": "f06bc7e2cbf3c2a66935803fe7c0790c2d9bc3a8",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 34,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc6969bdccfd64fb24fe9e138be0539c6cf55073/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc6969bdccfd64fb24fe9e138be0539c6cf55073/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=fc6969bdccfd64fb24fe9e138be0539c6cf55073",
        "patch": "@@ -22,11 +22,21 @@\n \n using namespace std::literals;\n \n+static const std::vector<bool> EMPTY_ASMAP;\n+static const bool DETERMINISTIC{true};\n+\n+static int32_t GetCheckRatio(const NodeContext& node_ctx)\n+{\n+    return std::clamp<int32_t>(node_ctx.args->GetIntArg(\"-checkaddrman\", 100), 0, 1000000);\n+}\n+\n class AddrManTest : public AddrMan\n {\n public:\n-    explicit AddrManTest(std::vector<bool> asmap = std::vector<bool>())\n-        : AddrMan(asmap, /*deterministic=*/true, /* consistency_check_ratio */ 100)\n+    explicit AddrManTest(std::vector<bool> asmap,\n+                         bool deterministic,\n+                         int32_t consistency_check_ratio)\n+        : AddrMan{asmap, deterministic, consistency_check_ratio}\n     {}\n \n     AddrInfo* Find(const CService& addr)\n@@ -106,7 +116,7 @@ BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(addrman_simple)\n {\n-    auto addrman = std::make_unique<AddrManTest>();\n+    auto addrman = std::make_unique<AddrManTest>(EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node));\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n@@ -140,7 +150,7 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n     BOOST_CHECK(addrman->size() >= 1);\n \n     // Test: reset addrman and test AddrMan::Add multiple addresses works as expected\n-    addrman = std::make_unique<AddrManTest>();\n+    addrman = std::make_unique<AddrManTest>(EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node));\n     std::vector<CAddress> vAddr;\n     vAddr.push_back(CAddress(ResolveService(\"250.1.1.3\", 8333), NODE_NONE));\n     vAddr.push_back(CAddress(ResolveService(\"250.1.1.4\", 8333), NODE_NONE));\n@@ -150,7 +160,7 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n@@ -179,7 +189,7 @@ BOOST_AUTO_TEST_CASE(addrman_ports)\n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n@@ -238,7 +248,7 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n@@ -267,7 +277,7 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n \n BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n@@ -297,7 +307,7 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n \n BOOST_AUTO_TEST_CASE(addrman_find)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n@@ -330,7 +340,7 @@ BOOST_AUTO_TEST_CASE(addrman_find)\n \n BOOST_AUTO_TEST_CASE(addrman_create)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n@@ -350,7 +360,7 @@ BOOST_AUTO_TEST_CASE(addrman_create)\n \n BOOST_AUTO_TEST_CASE(addrman_delete)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n@@ -370,7 +380,7 @@ BOOST_AUTO_TEST_CASE(addrman_delete)\n \n BOOST_AUTO_TEST_CASE(addrman_getaddr)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     // Test: Sanity check, GetAddr should never return anything if addrman\n     //  is empty.\n@@ -430,7 +440,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n \n BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket_legacy)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", 9999), NODE_NONE);\n@@ -485,7 +495,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket_legacy)\n \n BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket_legacy)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n@@ -563,7 +573,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket_legacy)\n // 101.8.0.0/16 AS8\n BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", 9999), NODE_NONE);\n@@ -618,7 +628,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n \n BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n@@ -700,9 +710,15 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\n {\n     std::vector<bool> asmap1 = FromBytes(asmap_raw, sizeof(asmap_raw) * 8);\n \n-    auto addrman_asmap1 = std::make_unique<AddrManTest>(asmap1);\n-    auto addrman_asmap1_dup = std::make_unique<AddrManTest>(asmap1);\n-    auto addrman_noasmap = std::make_unique<AddrManTest>();\n+    auto addrman_asmap1 =\n+        std::make_unique<AddrManTest>(asmap1, DETERMINISTIC, GetCheckRatio(m_node));\n+\n+    auto addrman_asmap1_dup =\n+        std::make_unique<AddrManTest>(asmap1, DETERMINISTIC, GetCheckRatio(m_node));\n+\n+    auto addrman_noasmap =\n+        std::make_unique<AddrManTest>(EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node));\n+\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n \n     CAddress addr = CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE);\n@@ -732,8 +748,8 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\n     BOOST_CHECK(bucketAndEntry_asmap1.second != bucketAndEntry_noasmap.second);\n \n     // deserializing non-asmaped peers.dat to asmaped addrman\n-    addrman_asmap1 = std::make_unique<AddrManTest>(asmap1);\n-    addrman_noasmap = std::make_unique<AddrManTest>();\n+    addrman_asmap1 = std::make_unique<AddrManTest>(asmap1, DETERMINISTIC, GetCheckRatio(m_node));\n+    addrman_noasmap = std::make_unique<AddrManTest>(EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node));\n     addrman_noasmap->Add({addr}, default_source);\n     stream << *addrman_noasmap;\n     stream >> *addrman_asmap1;\n@@ -744,8 +760,8 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\n     BOOST_CHECK(bucketAndEntry_asmap1_deser.second == bucketAndEntry_asmap1_dup.second);\n \n     // used to map to different buckets, now maps to the same bucket.\n-    addrman_asmap1 = std::make_unique<AddrManTest>(asmap1);\n-    addrman_noasmap = std::make_unique<AddrManTest>();\n+    addrman_asmap1 = std::make_unique<AddrManTest>(asmap1, DETERMINISTIC, GetCheckRatio(m_node));\n+    addrman_noasmap = std::make_unique<AddrManTest>(EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node));\n     CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.2.1.1\"), NODE_NONE);\n     addrman_noasmap->Add({addr, addr2}, default_source);\n@@ -765,7 +781,7 @@ BOOST_AUTO_TEST_CASE(remove_invalid)\n {\n     // Confirm that invalid addresses are ignored in unserialization.\n \n-    auto addrman = std::make_unique<AddrManTest>();\n+    auto addrman = std::make_unique<AddrManTest>(EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node));\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n \n     const CAddress new1{ResolveService(\"5.5.5.5\"), NODE_NONE};\n@@ -797,14 +813,14 @@ BOOST_AUTO_TEST_CASE(remove_invalid)\n     BOOST_REQUIRE(pos + sizeof(tried2_raw_replacement) <= stream.size());\n     memcpy(stream.data() + pos, tried2_raw_replacement, sizeof(tried2_raw_replacement));\n \n-    addrman = std::make_unique<AddrManTest>();\n+    addrman = std::make_unique<AddrManTest>(EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node));\n     stream >> *addrman;\n     BOOST_CHECK_EQUAL(addrman->size(), 2);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     BOOST_CHECK(addrman.size() == 0);\n \n@@ -836,7 +852,7 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n \n BOOST_AUTO_TEST_CASE(addrman_noevict)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     // Add 35 addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n@@ -892,7 +908,7 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n \n BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n {\n-    AddrManTest addrman;\n+    AddrManTest addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     BOOST_CHECK(addrman.size() == 0);\n \n@@ -956,8 +972,7 @@ static CDataStream AddrmanToStream(const AddrMan& addrman)\n \n BOOST_AUTO_TEST_CASE(load_addrman)\n {\n-    AddrMan addrman{/*asmap=*/ std::vector<bool>(), /*deterministic=*/ true,\n-                    /*consistency_check_ratio=*/ 100};\n+    AddrMan addrman{EMPTY_ASMAP, DETERMINISTIC, GetCheckRatio(m_node)};\n \n     CService addr1, addr2, addr3;\n     BOOST_CHECK(Lookup(\"250.7.1.1\", addr1, 8333, false));\n@@ -976,7 +991,7 @@ BOOST_AUTO_TEST_CASE(load_addrman)\n     // Test that the de-serialization does not throw an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrman);\n     bool exceptionThrown = false;\n-    AddrMan addrman1(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n+    AddrMan addrman1{EMPTY_ASMAP, !DETERMINISTIC, GetCheckRatio(m_node)};\n \n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n@@ -993,7 +1008,7 @@ BOOST_AUTO_TEST_CASE(load_addrman)\n     // Test that ReadFromStream creates an addrman with the correct number of addrs.\n     CDataStream ssPeers2 = AddrmanToStream(addrman);\n \n-    AddrMan addrman2(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n+    AddrMan addrman2{EMPTY_ASMAP, !DETERMINISTIC, GetCheckRatio(m_node)};\n     BOOST_CHECK(addrman2.size() == 0);\n     ReadFromStream(addrman2, ssPeers2);\n     BOOST_CHECK(addrman2.size() == 3);\n@@ -1033,7 +1048,7 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     // Test that the de-serialization of corrupted peers.dat throws an exception.\n     CDataStream ssPeers1 = MakeCorruptPeersDat();\n     bool exceptionThrown = false;\n-    AddrMan addrman1(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n+    AddrMan addrman1{EMPTY_ASMAP, !DETERMINISTIC, GetCheckRatio(m_node)};\n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n         unsigned char pchMsgTmp[4];\n@@ -1049,7 +1064,7 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     // Test that ReadFromStream fails if peers.dat is corrupt\n     CDataStream ssPeers2 = MakeCorruptPeersDat();\n \n-    AddrMan addrman2(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n+    AddrMan addrman2{EMPTY_ASMAP, !DETERMINISTIC, GetCheckRatio(m_node)};\n     BOOST_CHECK(addrman2.size() == 0);\n     BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }"
      }
    ]
  },
  {
    "sha": "2d65891024c99a7362fffc90b452b8c300d0b73b",
    "node_id": "C_kwDOABII59oAKDJkNjU4OTEwMjRjOTlhNzM2MmZmZmM5MGI0NTJiOGMzMDBkMGI3M2I",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-10-26T15:56:19Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-12T11:13:22Z"
      },
      "message": "test: non-addrman unit tests: override-able check ratio\n\nMake it possible to override from the command line (without recompiling)\nthe addrman check ratio in the common `TestingSetup::m_node::addrman`\n(used by all unit tests) instead of hardcoding it to 0:\n\n```\ntest_bitcoin --run_test=\"transaction_tests/tx_valid\" -- -checkaddrman=1\n```",
      "tree": {
        "sha": "250d240ec2679d3f6ff2bf64a14f27a3b092282e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/250d240ec2679d3f6ff2bf64a14f27a3b092282e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d65891024c99a7362fffc90b452b8c300d0b73b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGOTFIACgkQVN8G9ktV\ny78H5x//c/ftQq7zF4YzncW7YfHVwgvFY8flBxuQQkiXwUkPzw4qY9nbueUO42HX\nDQOGL473p6xq9zj7/5z2s5KxU/L2ObEZh9Ah9cUZiu9Sgtx5YTbgdwH83JP+1DDP\n6mZ20S/WoMzmPUTYX0rJPru3Gwg0qyw6wTN6apgUk6mAIbkRJOJzbiRaO25a8cRc\nmBWJcys56vAAEgEYQBldmk44k8Gja6sh4JPRwjtANkgE95wJFGN3reqVGiQ2q7om\nZJtGwlqM+BldENwRi533LeCCk4MKw6j+OwqRgSwxMXqOe4Ew3MGVDmfV9sS2nnUs\na0mIiF3BhPhql75fdlByrYMUX3zjX20meJKxNWtSuHNFtW5zijBOBOYa+9pCs6XL\nIvJsCwR4rQ7ewaBuJ9Rq9dtfIoefVDN0gmVZx/O/2oDNGI6cNmOpvWZFL4V7CxyI\nv5lZ81g2ma7iU7UwHmZuFKm8Zd4cDPSN+PfV9yDQDvPkN5bxXePRN0MfdNQHoS62\nfHvTF7654U0ZIcSCrrtxx06rGQEp4aDf+Qv3nrB1/MRihzoRzfEm47IbZiDg8H1Y\n6E4UxYsuGlDOmoN8HpbHmagRQgAfSjLdABeCPOIISeUwcUJO1Gxpg/Tn78M3sBag\nOAX5uDxaie/8m0JOCARBcP2NLc4/TTHbgKG0SPqr1ZDc+n2zFMXP1zYMJwv7MEaz\nBGKpRLma1POdyFlmw5lps5p4cE8bB4Q7F1mzyb/ItPJHSOPVwN6Fi2l7MLxP4mCq\nS4TqGkG0eucaQg5pq4peDyzrNpCPcawKZno2o+rlAJj3h0lUxEj+VA4d09+K1GWh\n00yrt3IuraVPq1iOdNgDZObYURByqBSogFVd9BKmwDL0iZgTQ2duxIC/VoJdW9d0\niz9O5JcfnZ+iK5Xwbn7xZ/0v4btIKSd35k/ZMXgJTj1hsB+RrqlRkKdLI/RLGDmH\nP+zZd4rUv/pFPPsrhMCXCSr1PH9ftqBvFUJGKBLQm3DZCr32VSZ+O2T3iXR3ZLgH\n2GeLmqHuDn89j7KSpOQYNxaoqGKNsXMXqQAaZD0OitxgPN11gRE2RdNapInjiHi2\nyb0DUcPDJb9pEpEOjCygp8OIyUpVbpwv4OrLXF2MRYQSX6nEOewQxNEA5ORgV9I8\nAYGA+h2zpaQrWvqg4ehYleLpi+TYYJjo7vxCXPm6Tp03D928vfgf52MFs+vh1HUw\npVk3bQ3RwDhv397UnzDe4yun3ahLxiahkgyO9glCXk+qJu1Y+oQ59Mmnb6XWBc06\nlm6vqEi2ovXqLcyPmjV4n28G8FdkXRGjtsr68OQL65VPVpFAsFq/alYUJj5k1t6J\nDmTDsqi3NpJTpCtpiuwjf7/cK9Xukg==\n=nb72\n-----END PGP SIGNATURE-----",
        "payload": "tree 250d240ec2679d3f6ff2bf64a14f27a3b092282e\nparent fc6969bdccfd64fb24fe9e138be0539c6cf55073\nauthor Vasil Dimov <vd@FreeBSD.org> 1635263779 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1636715602 +0100\n\ntest: non-addrman unit tests: override-able check ratio\n\nMake it possible to override from the command line (without recompiling)\nthe addrman check ratio in the common `TestingSetup::m_node::addrman`\n(used by all unit tests) instead of hardcoding it to 0:\n\n```\ntest_bitcoin --run_test=\"transaction_tests/tx_valid\" -- -checkaddrman=1\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d65891024c99a7362fffc90b452b8c300d0b73b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d65891024c99a7362fffc90b452b8c300d0b73b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d65891024c99a7362fffc90b452b8c300d0b73b/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc6969bdccfd64fb24fe9e138be0539c6cf55073",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc6969bdccfd64fb24fe9e138be0539c6cf55073",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc6969bdccfd64fb24fe9e138be0539c6cf55073"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7551bd8c315efb4ce41708cafd62796423d7d5a5",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d65891024c99a7362fffc90b452b8c300d0b73b/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d65891024c99a7362fffc90b452b8c300d0b73b/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=2d65891024c99a7362fffc90b452b8c300d0b73b",
        "patch": "@@ -196,7 +196,9 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n-    m_node.addrman = std::make_unique<AddrMan>(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+    m_node.addrman = std::make_unique<AddrMan>(/*asmap=*/std::vector<bool>(),\n+                                               /*deterministic=*/false,\n+                                               m_node.args->GetIntArg(\"-checkaddrman\", 0));\n     m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,"
      }
    ]
  },
  {
    "sha": "357ede5bebdb81eeaeb342a8534f482d182c870f",
    "node_id": "C_kwDOABII59oAKDM1N2VkZTViZWJkYjgxZWVhZWIzNDJhODUzNGY0ODJkMTgyYzg3MGY",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-10-26T16:07:21Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-12T11:13:23Z"
      },
      "message": "fuzz: addrman fuzz tests: override-able check ratio\n\nMake it possible to override from the command line (without recompiling)\nthe addrman check ratio in addrman fuzz tests instead of hardcoding it\nto 0:\n\n```\nFUZZ=addrman ./src/test/fuzz/fuzz --checkaddrman=5\n```",
      "tree": {
        "sha": "ecbf5c949dea6254dc0ef81abe5d231f4457b3f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecbf5c949dea6254dc0ef81abe5d231f4457b3f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/357ede5bebdb81eeaeb342a8534f482d182c870f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGOTFMACgkQVN8G9ktV\ny7+9qx/7BGuAfgwlKsfy29fHRhO7OsbKVD32Uva7lRxvt9Un1g7MXDn7bUTzFytu\nLAC0vhI8EJGOtlyKJX8o/Xspm+n7/Z2wyucnaKxhFiiMjFExag5KOH7YaS1wUFIa\nQFqZQB6lrivhgWfFrw99ZT/cK1D3tNYGGJ5oZudZr545AEZJwjmcy96LlUAL3FhA\nXsu1Qu8lJpFSMruIQwrJ+OSqUNzM0GI5gwuZqUCb3tva73LKxrF47v54cxtLXr6R\nILthcEe2CCvhHpv6hYFn4Zv1XtOciGfVtOyyyDylRYmNYrMQ+PoJeRq2lYpsJjvx\n/O75DXI6XDTWqfz/6zdOuIkwXieFjb8NhV0Qg6gr57w0hdlIR8EA+LizU2FKkbTh\nyvpEI7D+lJXKwOcg+78KIX8ltNPUkWv6KgVLAL8VWWg1Qz6CtYppuOPWm4PpWtV8\nW0G+kbO9wD1VriAUTOJ4wOh035Y0GY1xfA67UHKG3HIjyOBdnh+8CxyqR3m6KLDM\n+ZRwpF3Ah5eK7VCs5uYC7fcT8iKlTG6K99pSQ0twVmWnQdu9+5RsoXveuCwlgNAZ\nZCOITP5i1v6Wr+TUQen5V+RF67Jz/urhtIt4eWdAFFZWIegl0wKEbhiT4AF0bD/t\nhubueTpjYY2O2id2ozV+FcGI72UAiphToiY4KskHF+RtJChnKdSen8QoVUurV25V\nbIN45vJemgqijmbm61fDpRdvfJvSoPciCUBFvBjpZNbRaFv+eNYUn3ddpIkhHNXY\np17asMvmK/yA0x2bgUnJHqRhtXZcs0R9W0qeOTAxR1LSkTDHtM3kPhcApxtYUl2j\n0uCULX3D6yGYzIG3b+r81lvL6ak88gAHc0+aLjUID+QEEMZuIA/UNNWWhGK++2ru\n5Q9+F4bKk1lB27zsQWR2u7Mh2H43Hf5r5Bbpyrs4303VBw2npa+yhxbDBYzwHm2x\nNXMV6EsGXdFYWkG9LQKH9fyZREIfin+JSB0uph52vUgm+TG3r6rP2jG6yFzWtVyu\nmnSt08/Jb9Wt9MVvbBUe5baKHl0p9LD09ZM4E49TFnyNNzkkvPcvbvXrVV0ysHmX\nyzd2B5+HF7i4jdoJiVLss3tRoXAPrqerrVOfCA0p1jceaj9JTiaImCgomo7sjF0a\nBlE0vuf/0EZ6Vr9RKRVhqQiVYwcpa67l2cdt435F1l1UgJJmQ3cd0ypZo6Gm/CWb\nRbvSMOXdEHM3OItalJessxgjzRKxkpb1eLWhar8zkWC/ZKGyeYoxizIHMBjeIYlG\nyaOCUf0ZXd4ZyyR0Z0uhaMMI3n8wIXbMGTwGLkTYV8t/EK/+zuTswZVvphLe/Kc4\nOCNi+4vFRfDEksgTEpPyUWUUwx60Yg==\n=khqS\n-----END PGP SIGNATURE-----",
        "payload": "tree ecbf5c949dea6254dc0ef81abe5d231f4457b3f0\nparent 2d65891024c99a7362fffc90b452b8c300d0b73b\nauthor Vasil Dimov <vd@FreeBSD.org> 1635264441 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1636715603 +0100\n\nfuzz: addrman fuzz tests: override-able check ratio\n\nMake it possible to override from the command line (without recompiling)\nthe addrman check ratio in addrman fuzz tests instead of hardcoding it\nto 0:\n\n```\nFUZZ=addrman ./src/test/fuzz/fuzz --checkaddrman=5\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/357ede5bebdb81eeaeb342a8534f482d182c870f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/357ede5bebdb81eeaeb342a8534f482d182c870f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/357ede5bebdb81eeaeb342a8534f482d182c870f/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d65891024c99a7362fffc90b452b8c300d0b73b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d65891024c99a7362fffc90b452b8c300d0b73b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d65891024c99a7362fffc90b452b8c300d0b73b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 15,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8d0599aff2d7d395312861b2a8c0728966bf4597",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357ede5bebdb81eeaeb342a8534f482d182c870f/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357ede5bebdb81eeaeb342a8534f482d182c870f/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=357ede5bebdb81eeaeb342a8534f482d182c870f",
        "patch": "@@ -11,25 +11,37 @@\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n #include <time.h>\n #include <util/asmap.h>\n+#include <util/system.h>\n \n #include <cassert>\n #include <cstdint>\n #include <optional>\n #include <string>\n #include <vector>\n \n+namespace {\n+const BasicTestingSetup* g_setup;\n+\n+int32_t GetCheckRatio()\n+{\n+    return std::clamp<int32_t>(g_setup->m_node.args->GetIntArg(\"-checkaddrman\", 0), 0, 1000000);\n+}\n+} // namespace\n+\n void initialize_addrman()\n {\n-    SelectParams(CBaseChainParams::REGTEST);\n+    static const auto testing_setup = MakeNoLogFileContext<>(CBaseChainParams::REGTEST);\n+    g_setup = testing_setup.get();\n }\n \n FUZZ_TARGET_INIT(data_stream_addr_man, initialize_addrman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     CDataStream data_stream = ConsumeDataStream(fuzzed_data_provider);\n-    AddrMan addr_man(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+    AddrMan addr_man{/*asmap=*/std::vector<bool>(), /*deterministic=*/false, GetCheckRatio()};\n     try {\n         ReadFromStream(addr_man, data_stream);\n     } catch (const std::exception&) {\n@@ -113,7 +125,7 @@ class AddrManDeterministic : public AddrMan\n {\n public:\n     explicit AddrManDeterministic(std::vector<bool> asmap, FuzzedDataProvider& fuzzed_data_provider)\n-        : AddrMan(std::move(asmap), /* deterministic */ true, /* consistency_check_ratio */ 0)\n+        : AddrMan{std::move(asmap), /*deterministic=*/true, GetCheckRatio()}\n     {\n         WITH_LOCK(m_impl->cs, m_impl->insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});\n     }"
      }
    ]
  },
  {
    "sha": "51b241bf2ac84eb69e880f44579c0a7752e55a8b",
    "node_id": "C_kwDOABII59oAKDUxYjI0MWJmMmFjODRlYjY5ZTg4MGY0NDU3OWMwYTc3NTJlNTVhOGI",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-10-26T16:10:54Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-11-12T11:13:23Z"
      },
      "message": "fuzz: non-addrman fuzz tests: override-able check ratio\n\nMake it possible to override from the command line (without recompiling)\nthe addrman check ratio in non-addrman fuzz tests (connman and\ndeserialize) instead of hardcoding it to 0:\n\n```\nFUZZ=connman ./src/test/fuzz/fuzz --checkaddrman=5\n```",
      "tree": {
        "sha": "2a895a5039d60076481da207d81b0384b143c870",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a895a5039d60076481da207d81b0384b143c870"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51b241bf2ac84eb69e880f44579c0a7752e55a8b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGOTFQACgkQVN8G9ktV\ny79I5yAAl/sMA5N25/X7nGxlzdBLh7MCV3ca+VX7G4hbSgeyT0zx1o69OQBc0utq\nTbDeoeqTBHRwo9N++w8ZRokqCNbiYHukaSU375m3jV3+JIJTn6xy4Bn0ExY7/x+9\nGZKlKiKgmPO6W1xSUhj5uLuMR+18dA3nkXUueIg1/Z9xymkIHPitb6fjuPLnv5Pn\nsKdXUR3Lhu61R6Od+oxOaFj0RJFy5Ug1gS3RTpH+JV/jcHFMAOhnOlj+64+LWRv8\nXkjdChcb9nscIZvD/JRU5pX83wF1pJ/S67Ogo3PYUuQRK9x0Ji4/vrVRX8ImlwxC\nqNDutDdSucQ9wP8p8qHG0UYN6gXNF1xzuC+iTpq2fkJT76JN2xizvW7HU9zIAf0U\n251Gev6G9AEgAcMZI948/j4oYS0TThWAFopfL0pVdj5ZafcBiI3H59LSBAwhcnSC\n2MbJbQYNPsa6230DtwB6goY6HPRReW68F1rl1PbOFSFptgeG8K5KQTX2c9zROMr0\n/P06WSItLXqMaS2p5cbtYXc4pTom5BXjgyyoLHaH2P63f7OH7Wenn6n6yc+ckGU2\naKvIMx3WdlNKN5cDeszs3ObZHy2DlBD98IZj5DiUVmy0XabkbOo3azRHc/ANS8Az\nbddL9XdQ7IN2AT+2U/JujjQHLdlVJX5H42oUN+xlBbkrmCYDhnVsKSRlmaAblE0S\nwUUyfhS3evT5AD0rLR2nVRDmPp9bWjDxbyinT6mSMKmeVMbIBq/eR7f8V8PZsU6H\nUhhvRr4S2rPOUOKb1SByTs1I8v++k6y0B9XhZU0e5RoLNC09TRvOThnDNy/AhH1m\n7ceX6oI4cVOtnk1pnaxviMJTKL5d56ZSbgNPooDIYcRxwZpfq6Yt2xRqEmwmC8tg\np4oacfjc9oKTZhgIePHcoRP9/e1fClEJmCgW9q6NWl3lkvz5HkBwDn+DLRXJMSFA\nR/uhefI5ItNuVH9sxGFlRkyDV6avCkZ6JhgQol7m0gX334+3N2IeRKcYW2GnooRP\nSTegnT6UDEiTM5fMRGoyGUUwu0yeFgIdN4vdJm+hDuw+5QEdOjazmRk67HVn70Iv\nNVmcSZfK79MnUz2Xbz6Mf87qSFe7990SVgeXnMWoSOW1xz9qyQik72itdG1JzQou\nUjucc0ws6Walm2j4l38hsc5b8GyhgNNYwQH8lMgr+FY6kXzL5L7Z+bEpChD9yUu8\nBz5pM78GaNAYjf7lgCUeovTHn8QCYn9r09syORqK12kAnov4wswxbecMaTSHkZF1\nUClCxFlS6DZkkYDiA6XR3K2RGSA1XshdI4j6VX5q1lUgwHrl6DkEyu+/pwxrKqxr\ndEkm5EmMSvGx9BiSndGgdRc764FJSQ==\n=1irS\n-----END PGP SIGNATURE-----",
        "payload": "tree 2a895a5039d60076481da207d81b0384b143c870\nparent 357ede5bebdb81eeaeb342a8534f482d182c870f\nauthor Vasil Dimov <vd@FreeBSD.org> 1635264654 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1636715603 +0100\n\nfuzz: non-addrman fuzz tests: override-able check ratio\n\nMake it possible to override from the command line (without recompiling)\nthe addrman check ratio in non-addrman fuzz tests (connman and\ndeserialize) instead of hardcoding it to 0:\n\n```\nFUZZ=connman ./src/test/fuzz/fuzz --checkaddrman=5\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51b241bf2ac84eb69e880f44579c0a7752e55a8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51b241bf2ac84eb69e880f44579c0a7752e55a8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51b241bf2ac84eb69e880f44579c0a7752e55a8b/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "357ede5bebdb81eeaeb342a8534f482d182c870f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/357ede5bebdb81eeaeb342a8534f482d182c870f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/357ede5bebdb81eeaeb342a8534f482d182c870f"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cfbe4a79792887892ef59cc4c51f3701059f0b7b",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51b241bf2ac84eb69e880f44579c0a7752e55a8b/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51b241bf2ac84eb69e880f44579c0a7752e55a8b/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=51b241bf2ac84eb69e880f44579c0a7752e55a8b",
        "patch": "@@ -11,21 +11,29 @@\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <test/util/setup_common.h>\n+#include <util/system.h>\n #include <util/translation.h>\n \n #include <cstdint>\n #include <vector>\n \n+namespace {\n+const BasicTestingSetup* g_setup;\n+} // namespace\n+\n void initialize_connman()\n {\n     static const auto testing_setup = MakeNoLogFileContext<>();\n+    g_setup = testing_setup.get();\n }\n \n FUZZ_TARGET_INIT(connman, initialize_connman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    AddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+    AddrMan addrman(/*asmap=*/std::vector<bool>(),\n+                    /*deterministic=*/false,\n+                    g_setup->m_node.args->GetIntArg(\"-checkaddrman\", 0));\n     CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), addrman, fuzzed_data_provider.ConsumeBool()};\n     CNetAddr random_netaddr;\n     CNode random_node = ConsumeNode(fuzzed_data_provider);"
      },
      {
        "sha": "0b50fe359da475322635801ec4223029fba45f43",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51b241bf2ac84eb69e880f44579c0a7752e55a8b/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51b241bf2ac84eb69e880f44579c0a7752e55a8b/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=51b241bf2ac84eb69e880f44579c0a7752e55a8b",
        "patch": "@@ -22,7 +22,9 @@\n #include <pubkey.h>\n #include <script/keyorigin.h>\n #include <streams.h>\n+#include <test/util/setup_common.h>\n #include <undo.h>\n+#include <util/system.h>\n #include <version.h>\n \n #include <exception>\n@@ -33,8 +35,15 @@\n \n #include <test/fuzz/fuzz.h>\n \n+namespace {\n+const BasicTestingSetup* g_setup;\n+} // namespace\n+\n void initialize_deserialize()\n {\n+    static const auto testing_setup = MakeNoLogFileContext<>();\n+    g_setup = testing_setup.get();\n+\n     // Fuzzers using pubkey must hold an ECCVerifyHandle.\n     static const ECCVerifyHandle verify_handle;\n }\n@@ -189,7 +198,9 @@ FUZZ_TARGET_DESERIALIZE(blockmerkleroot, {\n     BlockMerkleRoot(block, &mutated);\n })\n FUZZ_TARGET_DESERIALIZE(addrman_deserialize, {\n-    AddrMan am(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n+    AddrMan am(/*asmap=*/std::vector<bool>(),\n+               /*deterministic=*/false,\n+               g_setup->m_node.args->GetIntArg(\"-checkaddrman\", 0));\n     DeserializeFromFuzzingInput(buffer, am);\n })\n FUZZ_TARGET_DESERIALIZE(blockheader_deserialize, {"
      }
    ]
  }
]