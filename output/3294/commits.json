[
  {
    "sha": "c8b74258bad399d39262ed11b892a729196cb297",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGI3NDI1OGJhZDM5OWQzOTI2MmVkMTFiODkyYTcyOTE5NmNiMjk3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-21T04:07:55Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-21T23:51:13Z"
      },
      "message": "setgenerate creates multiple blocks in -regtest mode\n\nI'm writing some wallet regression tests using -regtest mode, and\nneed to generate an initial multi-hundred-block chain. Repeatedly\ncalling setgenerate to generate one block is slow and doesn't\nwork properly, because block creation happens asynchronously.\n\nThis adds two features to setgenerate in -regtest mode:\n\n1) Instead of being interpreted as number of threads to start, the\nthird argument is the number of blocks to generate.\n\n2) setgenerate will not return until the block creation threads\nhave created the requested number of blocks.",
      "tree": {
        "sha": "b91c7296f6d8ecde1c0297d57a68ecc8dc257ce2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b91c7296f6d8ecde1c0297d57a68ecc8dc257ce2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8b74258bad399d39262ed11b892a729196cb297",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b74258bad399d39262ed11b892a729196cb297",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8b74258bad399d39262ed11b892a729196cb297",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b74258bad399d39262ed11b892a729196cb297/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34f5b0ab93e4f92e92531afa090caba06a031c68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34f5b0ab93e4f92e92531afa090caba06a031c68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34f5b0ab93e4f92e92531afa090caba06a031c68"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 45,
      "deletions": 11
    },
    "files": [
      {
        "sha": "3fe9f7eb99765d870d5b716cbc4137bc028ea9af",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8b74258bad399d39262ed11b892a729196cb297/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8b74258bad399d39262ed11b892a729196cb297/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=c8b74258bad399d39262ed11b892a729196cb297",
        "patch": "@@ -238,7 +238,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getdifficulty\",          &getdifficulty,          true,      false,      false },\n     { \"getnetworkhashps\",       &getnetworkhashps,       true,      false,      false },\n     { \"getgenerate\",            &getgenerate,            true,      false,      false },\n-    { \"setgenerate\",            &setgenerate,            true,      false,      true },\n+    { \"setgenerate\",            &setgenerate,            true,      true,       false },\n     { \"gethashespersec\",        &gethashespersec,        true,      false,      false },\n     { \"getinfo\",                &getinfo,                true,      false,      false },\n     { \"getmininginfo\",          &getmininginfo,          true,      false,      false },"
      },
      {
        "sha": "16eccc6de025c353b801f082d0e119ab4099a8f0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8b74258bad399d39262ed11b892a729196cb297/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8b74258bad399d39262ed11b892a729196cb297/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c8b74258bad399d39262ed11b892a729196cb297",
        "patch": "@@ -112,7 +112,7 @@ void Shutdown()\n     ShutdownRPCMining();\n     if (pwalletMain)\n         bitdb.Flush(false);\n-    GenerateBitcoins(false, NULL);\n+    GenerateBitcoins(false, NULL, 0);\n     StopNode();\n     {\n         LOCK(cs_main);\n@@ -1050,7 +1050,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n \n     // Generate coins in the background\n     if (pwalletMain)\n-        GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain);\n+        GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain, GetArg(\"-genproclimit\", -1));\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "b01b60cc34e96ccb91a384c3c1806c0fedd9b5bd",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8b74258bad399d39262ed11b892a729196cb297/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8b74258bad399d39262ed11b892a729196cb297/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=c8b74258bad399d39262ed11b892a729196cb297",
        "patch": "@@ -650,11 +650,10 @@ void static BitcoinMiner(CWallet *pwallet)\n     }\n }\n \n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet)\n+void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n {\n     static boost::thread_group* minerThreads = NULL;\n \n-    int nThreads = GetArg(\"-genproclimit\", -1);\n     if (nThreads < 0) {\n         if (Params().NetworkID() == CChainParams::REGTEST)\n             nThreads = 1;"
      },
      {
        "sha": "26151f6cd5bd6b2c90e7b8ab96d02244a93c0bbe",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8b74258bad399d39262ed11b892a729196cb297/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8b74258bad399d39262ed11b892a729196cb297/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=c8b74258bad399d39262ed11b892a729196cb297",
        "patch": "@@ -16,7 +16,7 @@ class CScript;\n class CWallet;\n \n /** Run the miner threads */\n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n+void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);"
      },
      {
        "sha": "16c8a504b954ee20767fa729d231fb32a307f79a",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 5,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8b74258bad399d39262ed11b892a729196cb297/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8b74258bad399d39262ed11b892a729196cb297/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=c8b74258bad399d39262ed11b892a729196cb297",
        "patch": "@@ -133,6 +133,7 @@ Value setgenerate(const Array& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. generate         (boolean, required) Set to true to turn on generation, off to turn off.\\n\"\n             \"2. genproclimit     (numeric, optional) Set the processor limit for when generation is on. Can be -1 for unlimited.\\n\"\n+            \"                    Note: in -regtest mode, genproclimit controls how many blocks are generated immediately.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nSet the generation on with a limit of one processor\\n\"\n             + HelpExampleCli(\"setgenerate\", \"true 1\") +\n@@ -144,21 +145,55 @@ Value setgenerate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"setgenerate\", \"true, 1\")\n         );\n \n+    if (pwalletMain == NULL)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n+\n     bool fGenerate = true;\n     if (params.size() > 0)\n         fGenerate = params[0].get_bool();\n \n+    int nGenProcLimit = -1;\n     if (params.size() > 1)\n     {\n-        int nGenProcLimit = params[1].get_int();\n-        mapArgs[\"-genproclimit\"] = itostr(nGenProcLimit);\n+        nGenProcLimit = params[1].get_int();\n         if (nGenProcLimit == 0)\n             fGenerate = false;\n     }\n-    mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n \n-    assert(pwalletMain != NULL);\n-    GenerateBitcoins(fGenerate, pwalletMain);\n+    // -regtest mode: don't return until nGenProcLimit blocks are generated\n+    if (fGenerate && Params().NetworkID() == CChainParams::REGTEST)\n+    {\n+        int nHeightStart = 0;\n+        int nHeightEnd = 0;\n+        int nHeight = 0;\n+        int nGenerate = (nGenProcLimit > 0 ? nGenProcLimit : 1);\n+        {   // Don't keep cs_main locked\n+            LOCK(cs_main);\n+            nHeightStart = chainActive.Height();\n+            nHeight = nHeightStart;\n+            nHeightEnd = nHeightStart+nGenerate;\n+        }\n+        int nHeightLast = -1;\n+        while (nHeight < nHeightEnd)\n+        {\n+            if (nHeightLast != nHeight)\n+            {\n+                nHeightLast = nHeight;\n+                GenerateBitcoins(fGenerate, pwalletMain, 1);\n+            }\n+            MilliSleep(1);\n+            {   // Don't keep cs_main locked\n+                LOCK(cs_main);\n+                nHeight = chainActive.Height();\n+            }\n+        }\n+    }\n+    else // Not -regtest: start generate thread, return immediately\n+    {\n+        mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n+        GenerateBitcoins(fGenerate, pwalletMain, nGenProcLimit);\n+    }\n+\n     return Value::null;\n }\n "
      }
    ]
  }
]