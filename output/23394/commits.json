[
  {
    "sha": "2478c6730a81dda3c56cb99087caf6abe49c85f5",
    "node_id": "C_kwDOABII59oAKDI0NzhjNjczMGE4MWRkYTNjNTZjYjk5MDg3Y2FmNmFiZTQ5Yzg1ZjU",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-10-28T17:46:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-11-12T17:04:20Z"
      },
      "message": "Make signing follow BIP340 exactly w.r.t. aux randomness\n\nlibsecp256k1's secp256k1_schnorrsig_sign only follows BIP340 exactly\nif an aux_rand32 argument is passed. When no randomness is used\n(as is the case in the current codebase here), there is no impact\non security between not providing aux_rand32 at all, or providing\nan empty one. Yet, for repeatability/testability it is simpler\nto always use an all-zero one.",
      "tree": {
        "sha": "62daa10ff38014d4c9abd855c01de843248d3b79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62daa10ff38014d4c9abd855c01de843248d3b79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2478c6730a81dda3c56cb99087caf6abe49c85f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2478c6730a81dda3c56cb99087caf6abe49c85f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2478c6730a81dda3c56cb99087caf6abe49c85f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2478c6730a81dda3c56cb99087caf6abe49c85f5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9dd5c8d6e59e27af98e99d2844d6ead8eec3162",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9dd5c8d6e59e27af98e99d2844d6ead8eec3162",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9dd5c8d6e59e27af98e99d2844d6ead8eec3162"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "86081b3464e153f619b5c38b3c6492386dc66b48",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2478c6730a81dda3c56cb99087caf6abe49c85f5/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2478c6730a81dda3c56cb99087caf6abe49c85f5/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=2478c6730a81dda3c56cb99087caf6abe49c85f5",
        "patch": "@@ -275,7 +275,7 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n-bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256* aux) const\n+bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const\n {\n     assert(sig.size() == 64);\n     secp256k1_keypair keypair;\n@@ -288,7 +288,7 @@ bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint2\n         uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n         if (!secp256k1_keypair_xonly_tweak_add(GetVerifyContext(), &keypair, tweak.data())) return false;\n     }\n-    bool ret = secp256k1_schnorrsig_sign(secp256k1_context_sign, sig.data(), hash.data(), &keypair, aux ? (unsigned char*)aux->data() : nullptr);\n+    bool ret = secp256k1_schnorrsig_sign(secp256k1_context_sign, sig.data(), hash.data(), &keypair, (unsigned char*)aux.data());\n     if (ret) {\n         // Additional verification step to prevent using a potentially corrupted signature\n         secp256k1_xonly_pubkey pubkey_verify;"
      },
      {
        "sha": "eab18b284ac6b9d80592454f8e66ea9d40f49c93",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2478c6730a81dda3c56cb99087caf6abe49c85f5/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2478c6730a81dda3c56cb99087caf6abe49c85f5/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=2478c6730a81dda3c56cb99087caf6abe49c85f5",
        "patch": "@@ -130,7 +130,7 @@ class CKey\n \n     /**\n      * Create a BIP-340 Schnorr signature, for the xonly-pubkey corresponding to *this,\n-     * optionally tweaked by *merkle_root. Additional nonce entropy can be provided through\n+     * optionally tweaked by *merkle_root. Additional nonce entropy is provided through\n      * aux.\n      *\n      * merkle_root is used to optionally perform tweaking of the private key, as specified\n@@ -143,7 +143,7 @@ class CKey\n      *                              (this is used for key path spending, with specific\n      *                              Merkle root of the script tree).\n      */\n-    bool SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root = nullptr, const uint256* aux = nullptr) const;\n+    bool SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256& aux) const;\n \n     //! Derive BIP32 child key.\n     bool Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;"
      },
      {
        "sha": "b282f39e6d297f65be15e569d120b8c85bbcc4fe",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2478c6730a81dda3c56cb99087caf6abe49c85f5/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2478c6730a81dda3c56cb99087caf6abe49c85f5/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=2478c6730a81dda3c56cb99087caf6abe49c85f5",
        "patch": "@@ -81,7 +81,8 @@ bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider&\n     uint256 hash;\n     if (!SignatureHashSchnorr(hash, execdata, *txTo, nIn, nHashType, sigversion, *m_txdata, MissingDataBehavior::FAIL)) return false;\n     sig.resize(64);\n-    if (!key.SignSchnorr(hash, sig, merkle_root, nullptr)) return false;\n+    // Use uint256{} as aux_rnd for now.\n+    if (!key.SignSchnorr(hash, sig, merkle_root, {})) return false;\n     if (nHashType) sig.push_back(nHashType);\n     return true;\n }"
      },
      {
        "sha": "2769dde3676cab2c0a63b97d82b1486754a0de25",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2478c6730a81dda3c56cb99087caf6abe49c85f5/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2478c6730a81dda3c56cb99087caf6abe49c85f5/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=2478c6730a81dda3c56cb99087caf6abe49c85f5",
        "patch": "@@ -321,7 +321,7 @@ BOOST_AUTO_TEST_CASE(bip340_test_vectors)\n         key.Set(sec.begin(), sec.end(), true);\n         XOnlyPubKey pubkey(key.GetPubKey());\n         BOOST_CHECK(std::equal(pubkey.begin(), pubkey.end(), pub.begin(), pub.end()));\n-        bool ok = key.SignSchnorr(msg256, sig64, nullptr, &aux256);\n+        bool ok = key.SignSchnorr(msg256, sig64, nullptr, aux256);\n         BOOST_CHECK(ok);\n         BOOST_CHECK(std::vector<unsigned char>(sig64, sig64 + 64) == sig);\n         // Verify those signatures for good measure.\n@@ -337,7 +337,7 @@ BOOST_AUTO_TEST_CASE(bip340_test_vectors)\n             BOOST_CHECK(tweaked);\n             XOnlyPubKey tweaked_key = tweaked->first;\n             aux256 = InsecureRand256();\n-            bool ok = key.SignSchnorr(msg256, sig64, &merkle_root, &aux256);\n+            bool ok = key.SignSchnorr(msg256, sig64, &merkle_root, aux256);\n             BOOST_CHECK(ok);\n             BOOST_CHECK(tweaked_key.VerifySchnorr(msg256, sig64));\n         }"
      }
    ]
  },
  {
    "sha": "51408250969e7ed171378369a995c90d4f813189",
    "node_id": "C_kwDOABII59oAKDUxNDA4MjUwOTY5ZTdlZDE3MTM3ODM2OWE5OTVjOTBkNGY4MTMxODk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-10-26T19:34:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-11-12T17:04:20Z"
      },
      "message": "tests: add more fields to TaprootInfo",
      "tree": {
        "sha": "5d75dacc6e9c55c109e6b55c8f686318729df5c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d75dacc6e9c55c109e6b55c8f686318729df5c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51408250969e7ed171378369a995c90d4f813189",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51408250969e7ed171378369a995c90d4f813189",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51408250969e7ed171378369a995c90d4f813189",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51408250969e7ed171378369a995c90d4f813189/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2478c6730a81dda3c56cb99087caf6abe49c85f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2478c6730a81dda3c56cb99087caf6abe49c85f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2478c6730a81dda3c56cb99087caf6abe49c85f5"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8dcc8c58fe94bd4209fa2e96f85b4610a4b15bdb",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51408250969e7ed171378369a995c90d4f813189/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51408250969e7ed171378369a995c90d4f813189/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=51408250969e7ed171378369a995c90d4f813189",
        "patch": "@@ -805,20 +805,20 @@ def taproot_tree_helper(scripts):\n         h = TaggedHash(\"TapLeaf\", bytes([version]) + ser_string(code))\n         if name is None:\n             return ([], h)\n-        return ([(name, version, code, bytes())], h)\n+        return ([(name, version, code, bytes(), h)], h)\n     elif len(scripts) == 2 and callable(scripts[1]):\n         # Two entries, and the right one is a function\n         left, left_h = taproot_tree_helper(scripts[0:1])\n         right_h = scripts[1](left_h)\n-        left = [(name, version, script, control + right_h) for name, version, script, control in left]\n+        left = [(name, version, script, control + right_h, leaf) for name, version, script, control, leaf in left]\n         right = []\n     else:\n         # Two or more entries: descend into each side\n         split_pos = len(scripts) // 2\n         left, left_h = taproot_tree_helper(scripts[0:split_pos])\n         right, right_h = taproot_tree_helper(scripts[split_pos:])\n-        left = [(name, version, script, control + right_h) for name, version, script, control in left]\n-        right = [(name, version, script, control + left_h) for name, version, script, control in right]\n+        left = [(name, version, script, control + right_h, leaf) for name, version, script, control, leaf in left]\n+        right = [(name, version, script, control + left_h, leaf) for name, version, script, control, leaf in right]\n     if right_h < left_h:\n         right_h, left_h = left_h, right_h\n     h = TaggedHash(\"TapBranch\", left_h + right_h)\n@@ -830,13 +830,14 @@ def taproot_tree_helper(scripts):\n # - negflag: whether the pubkey in the scriptPubKey was negated from internal_pubkey+tweak*G (bool).\n # - tweak: the tweak (32 bytes)\n # - leaves: a dict of name -> TaprootLeafInfo objects for all known leaves\n-TaprootInfo = namedtuple(\"TaprootInfo\", \"scriptPubKey,internal_pubkey,negflag,tweak,leaves\")\n+# - merkle_root: the script tree's Merkle root, or bytes() if no leaves are present\n+TaprootInfo = namedtuple(\"TaprootInfo\", \"scriptPubKey,internal_pubkey,negflag,tweak,leaves,merkle_root,output_pubkey\")\n \n # A TaprootLeafInfo object has the following fields:\n # - script: the leaf script (CScript or bytes)\n # - version: the leaf version (0xc0 for BIP342 tapscript)\n # - merklebranch: the merkle branch to use for this leaf (32*N bytes)\n-TaprootLeafInfo = namedtuple(\"TaprootLeafInfo\", \"script,version,merklebranch\")\n+TaprootLeafInfo = namedtuple(\"TaprootLeafInfo\", \"script,version,merklebranch,leaf_hash\")\n \n def taproot_construct(pubkey, scripts=None):\n     \"\"\"Construct a tree of Taproot spending conditions\n@@ -858,8 +859,8 @@ def taproot_construct(pubkey, scripts=None):\n     ret, h = taproot_tree_helper(scripts)\n     tweak = TaggedHash(\"TapTweak\", pubkey + h)\n     tweaked, negated = tweak_add_pubkey(pubkey, tweak)\n-    leaves = dict((name, TaprootLeafInfo(script, version, merklebranch)) for name, version, script, merklebranch in ret)\n-    return TaprootInfo(CScript([OP_1, tweaked]), pubkey, negated + 0, tweak, leaves)\n+    leaves = dict((name, TaprootLeafInfo(script, version, merklebranch, leaf)) for name, version, script, merklebranch, leaf in ret)\n+    return TaprootInfo(CScript([OP_1, tweaked]), pubkey, negated + 0, tweak, leaves, h, tweaked)\n \n def is_op_success(o):\n     return o == 0x50 or o == 0x62 or o == 0x89 or o == 0x8a or o == 0x8d or o == 0x8e or (o >= 0x7e and o <= 0x81) or (o >= 0x83 and o <= 0x86) or (o >= 0x95 and o <= 0x99) or (o >= 0xbb and o <= 0xfe)"
      }
    ]
  },
  {
    "sha": "a5bde018b42cd38979fee71d870e0140b10c73d6",
    "node_id": "C_kwDOABII59oAKGE1YmRlMDE4YjQyY2QzODk3OWZlZTcxZDg3MGUwMTQwYjEwYzczZDY",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-10-26T18:34:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-11-12T17:04:20Z"
      },
      "message": "tests: give feature_taproot access to sighash preimages",
      "tree": {
        "sha": "ddb6b94b75b4ad67ab93c4e838926eb79388c5ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ddb6b94b75b4ad67ab93c4e838926eb79388c5ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5bde018b42cd38979fee71d870e0140b10c73d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5bde018b42cd38979fee71d870e0140b10c73d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5bde018b42cd38979fee71d870e0140b10c73d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5bde018b42cd38979fee71d870e0140b10c73d6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51408250969e7ed171378369a995c90d4f813189",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51408250969e7ed171378369a995c90d4f813189",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51408250969e7ed171378369a995c90d4f813189"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 54,
      "deletions": 22
    },
    "files": [
      {
        "sha": "085b37a74d78870e671549c3545e56479b9720e8",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 25,
        "deletions": 9,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5bde018b42cd38979fee71d870e0140b10c73d6/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5bde018b42cd38979fee71d870e0140b10c73d6/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=a5bde018b42cd38979fee71d870e0140b10c73d6",
        "patch": "@@ -25,8 +25,9 @@\n     CScript,\n     CScriptNum,\n     CScriptOp,\n+    hash256,\n     LEAF_VERSION_TAPSCRIPT,\n-    LegacySignatureHash,\n+    LegacySignatureMsg,\n     LOCKTIME_THRESHOLD,\n     MAX_SCRIPT_ELEMENT_SIZE,\n     OP_0,\n@@ -70,8 +71,9 @@\n     SIGHASH_NONE,\n     SIGHASH_SINGLE,\n     SIGHASH_ANYONECANPAY,\n-    SegwitV0SignatureHash,\n-    TaprootSignatureHash,\n+    SegwitV0SignatureMsg,\n+    TaggedHash,\n+    TaprootSignatureMsg,\n     is_op_success,\n     taproot_construct,\n )\n@@ -194,8 +196,8 @@ def default_controlblock(ctx):\n     \"\"\"Default expression for \"controlblock\": combine leafversion, negflag, pubkey_internal, merklebranch.\"\"\"\n     return bytes([get(ctx, \"leafversion\") + get(ctx, \"negflag\")]) + get(ctx, \"pubkey_internal\") + get(ctx, \"merklebranch\")\n \n-def default_sighash(ctx):\n-    \"\"\"Default expression for \"sighash\": depending on mode, compute BIP341, BIP143, or legacy sighash.\"\"\"\n+def default_sigmsg(ctx):\n+    \"\"\"Default expression for \"sigmsg\": depending on mode, compute BIP341, BIP143, or legacy sigmsg.\"\"\"\n     tx = get(ctx, \"tx\")\n     idx = get(ctx, \"idx\")\n     hashtype = get(ctx, \"hashtype_actual\")\n@@ -208,18 +210,30 @@ def default_sighash(ctx):\n             codeseppos = get(ctx, \"codeseppos\")\n             leaf_ver = get(ctx, \"leafversion\")\n             script = get(ctx, \"script_taproot\")\n-            return TaprootSignatureHash(tx, utxos, hashtype, idx, scriptpath=True, script=script, leaf_ver=leaf_ver, codeseparator_pos=codeseppos, annex=annex)\n+            return TaprootSignatureMsg(tx, utxos, hashtype, idx, scriptpath=True, script=script, leaf_ver=leaf_ver, codeseparator_pos=codeseppos, annex=annex)\n         else:\n-            return TaprootSignatureHash(tx, utxos, hashtype, idx, scriptpath=False, annex=annex)\n+            return TaprootSignatureMsg(tx, utxos, hashtype, idx, scriptpath=False, annex=annex)\n     elif mode == \"witv0\":\n         # BIP143 signature hash\n         scriptcode = get(ctx, \"scriptcode\")\n         utxos = get(ctx, \"utxos\")\n-        return SegwitV0SignatureHash(scriptcode, tx, idx, hashtype, utxos[idx].nValue)\n+        return SegwitV0SignatureMsg(scriptcode, tx, idx, hashtype, utxos[idx].nValue)\n     else:\n         # Pre-segwit signature hash\n         scriptcode = get(ctx, \"scriptcode\")\n-        return LegacySignatureHash(scriptcode, tx, idx, hashtype)[0]\n+        return LegacySignatureMsg(scriptcode, tx, idx, hashtype)[0]\n+\n+def default_sighash(ctx):\n+    \"\"\"Default expression for \"sighash\": depending on mode, compute tagged hash or dsha256 of sigmsg.\"\"\"\n+    msg = get(ctx, \"sigmsg\")\n+    mode = get(ctx, \"mode\")\n+    if mode == \"taproot\":\n+        return TaggedHash(\"TapSighash\", msg)\n+    else:\n+        if msg is None:\n+            return (1).to_bytes(32, 'little')\n+        else:\n+            return hash256(msg)\n \n def default_tweak(ctx):\n     \"\"\"Default expression for \"tweak\": None if a leaf is specified, tap[0] otherwise.\"\"\"\n@@ -340,6 +354,8 @@ def default_scriptsig(ctx):\n     \"key_tweaked\": default_key_tweaked,\n     # The tweak to use (None for script path spends, the actual tweak for key path spends).\n     \"tweak\": default_tweak,\n+    # The sigmsg value (preimage of sighash)\n+    \"sigmsg\": default_sigmsg,\n     # The sighash value (32 bytes)\n     \"sighash\": default_sighash,\n     # The information about the chosen script path spend (TaprootLeafInfo object)."
      },
      {
        "sha": "46c723b06ab4464fbddc1aefc6ad954de65da590",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 29,
        "deletions": 13,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5bde018b42cd38979fee71d870e0140b10c73d6/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5bde018b42cd38979fee71d870e0140b10c73d6/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=a5bde018b42cd38979fee71d870e0140b10c73d6",
        "patch": "@@ -619,16 +619,15 @@ def FindAndDelete(script, sig):\n         r += script[last_sop_idx:]\n     return CScript(r)\n \n-def LegacySignatureHash(script, txTo, inIdx, hashtype):\n-    \"\"\"Consensus-correct SignatureHash\n+def LegacySignatureMsg(script, txTo, inIdx, hashtype):\n+    \"\"\"Preimage of the signature hash, if it exists.\n \n-    Returns (hash, err) to precisely match the consensus-critical behavior of\n-    the SIGHASH_SINGLE bug. (inIdx is *not* checked for validity)\n+    Returns either (None, err) to indicate error (which translates to sighash 1),\n+    or (msg, None).\n     \"\"\"\n-    HASH_ONE = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n \n     if inIdx >= len(txTo.vin):\n-        return (HASH_ONE, \"inIdx %d out of range (%d)\" % (inIdx, len(txTo.vin)))\n+        return (None, \"inIdx %d out of range (%d)\" % (inIdx, len(txTo.vin)))\n     txtmp = CTransaction(txTo)\n \n     for txin in txtmp.vin:\n@@ -645,7 +644,7 @@ def LegacySignatureHash(script, txTo, inIdx, hashtype):\n     elif (hashtype & 0x1f) == SIGHASH_SINGLE:\n         outIdx = inIdx\n         if outIdx >= len(txtmp.vout):\n-            return (HASH_ONE, \"outIdx %d out of range (%d)\" % (outIdx, len(txtmp.vout)))\n+            return (None, \"outIdx %d out of range (%d)\" % (outIdx, len(txtmp.vout)))\n \n         tmp = txtmp.vout[outIdx]\n         txtmp.vout = []\n@@ -665,15 +664,27 @@ def LegacySignatureHash(script, txTo, inIdx, hashtype):\n     s = txtmp.serialize_without_witness()\n     s += struct.pack(b\"<I\", hashtype)\n \n-    hash = hash256(s)\n+    return (s, None)\n \n-    return (hash, None)\n+def LegacySignatureHash(*args, **kwargs):\n+    \"\"\"Consensus-correct SignatureHash\n+\n+    Returns (hash, err) to precisely match the consensus-critical behavior of\n+    the SIGHASH_SINGLE bug. (inIdx is *not* checked for validity)\n+    \"\"\"\n+\n+    HASH_ONE = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n+    msg, err = LegacySignatureMsg(*args, **kwargs)\n+    if msg is None:\n+        return (HASH_ONE, err)\n+    else:\n+        return (hash256(msg), err)\n \n # TODO: Allow cached hashPrevouts/hashSequence/hashOutputs to be provided.\n # Performance optimization probably not necessary for python tests, however.\n # Note that this corresponds to sigversion == 1 in EvalScript, which is used\n # for version 0 witnesses.\n-def SegwitV0SignatureHash(script, txTo, inIdx, hashtype, amount):\n+def SegwitV0SignatureMsg(script, txTo, inIdx, hashtype, amount):\n \n     hashPrevouts = 0\n     hashSequence = 0\n@@ -711,8 +722,10 @@ def SegwitV0SignatureHash(script, txTo, inIdx, hashtype, amount):\n     ss += ser_uint256(hashOutputs)\n     ss += struct.pack(\"<i\", txTo.nLockTime)\n     ss += struct.pack(\"<I\", hashtype)\n+    return ss\n \n-    return hash256(ss)\n+def SegwitV0SignatureHash(*args, **kwargs):\n+    return hash256(SegwitV0SignatureMsg(*args, **kwargs))\n \n class TestFrameworkScript(unittest.TestCase):\n     def test_bn2vch(self):\n@@ -742,7 +755,7 @@ def test_cscriptnum_encoding(self):\n         for value in values:\n             self.assertEqual(CScriptNum.decode(CScriptNum.encode(CScriptNum(value))), value)\n \n-def TaprootSignatureHash(txTo, spent_utxos, hash_type, input_index = 0, scriptpath = False, script = CScript(), codeseparator_pos = -1, annex = None, leaf_ver = LEAF_VERSION_TAPSCRIPT):\n+def TaprootSignatureMsg(txTo, spent_utxos, hash_type, input_index = 0, scriptpath = False, script = CScript(), codeseparator_pos = -1, annex = None, leaf_ver = LEAF_VERSION_TAPSCRIPT):\n     assert (len(txTo.vin) == len(spent_utxos))\n     assert (input_index < len(txTo.vin))\n     out_type = SIGHASH_ALL if hash_type == 0 else hash_type & 3\n@@ -783,7 +796,10 @@ def TaprootSignatureHash(txTo, spent_utxos, hash_type, input_index = 0, scriptpa\n         ss += bytes([0])\n         ss += struct.pack(\"<i\", codeseparator_pos)\n     assert len(ss) ==  175 - (in_type == SIGHASH_ANYONECANPAY) * 49 - (out_type != SIGHASH_ALL and out_type != SIGHASH_SINGLE) * 32 + (annex is not None) * 32 + scriptpath * 37\n-    return TaggedHash(\"TapSighash\", ss)\n+    return ss\n+\n+def TaprootSignatureHash(*args, **kwargs):\n+    return TaggedHash(\"TapSighash\", TaprootSignatureMsg(*args, **kwargs))\n \n def taproot_tree_helper(scripts):\n     if len(scripts) == 0:"
      }
    ]
  },
  {
    "sha": "c98c53f20cadeda53f6a9323f72363593d174f68",
    "node_id": "C_kwDOABII59oAKGM5OGM1M2YyMGNhZGVkYTUzZjZhOTMyM2Y3MjM2MzU5M2QxNzRmNjg",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-10-27T19:07:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-11-12T17:04:20Z"
      },
      "message": "tests: abstract out precomputed BIP341 signature hash elements",
      "tree": {
        "sha": "a4aba388957e09a1eeef7f7d85cd922c07bf50a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4aba388957e09a1eeef7f7d85cd922c07bf50a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c98c53f20cadeda53f6a9323f72363593d174f68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98c53f20cadeda53f6a9323f72363593d174f68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c98c53f20cadeda53f6a9323f72363593d174f68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98c53f20cadeda53f6a9323f72363593d174f68/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5bde018b42cd38979fee71d870e0140b10c73d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5bde018b42cd38979fee71d870e0140b10c73d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5bde018b42cd38979fee71d870e0140b10c73d6"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 20,
      "deletions": 5
    },
    "files": [
      {
        "sha": "de71e19251ce2f73e17b7415e916e4c5844abb2a",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98c53f20cadeda53f6a9323f72363593d174f68/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98c53f20cadeda53f6a9323f72363593d174f68/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=c98c53f20cadeda53f6a9323f72363593d174f68",
        "patch": "@@ -755,6 +755,21 @@ def test_cscriptnum_encoding(self):\n         for value in values:\n             self.assertEqual(CScriptNum.decode(CScriptNum.encode(CScriptNum(value))), value)\n \n+def BIP341_sha_prevouts(txTo):\n+    return sha256(b\"\".join(i.prevout.serialize() for i in txTo.vin))\n+\n+def BIP341_sha_amounts(spent_utxos):\n+    return sha256(b\"\".join(struct.pack(\"<q\", u.nValue) for u in spent_utxos))\n+\n+def BIP341_sha_scriptpubkeys(spent_utxos):\n+    return sha256(b\"\".join(ser_string(u.scriptPubKey) for u in spent_utxos))\n+\n+def BIP341_sha_sequences(txTo):\n+    return sha256(b\"\".join(struct.pack(\"<I\", i.nSequence) for i in txTo.vin))\n+\n+def BIP341_sha_outputs(txTo):\n+    return sha256(b\"\".join(o.serialize() for o in txTo.vout))\n+\n def TaprootSignatureMsg(txTo, spent_utxos, hash_type, input_index = 0, scriptpath = False, script = CScript(), codeseparator_pos = -1, annex = None, leaf_ver = LEAF_VERSION_TAPSCRIPT):\n     assert (len(txTo.vin) == len(spent_utxos))\n     assert (input_index < len(txTo.vin))\n@@ -765,12 +780,12 @@ def TaprootSignatureMsg(txTo, spent_utxos, hash_type, input_index = 0, scriptpat\n     ss += struct.pack(\"<i\", txTo.nVersion)\n     ss += struct.pack(\"<I\", txTo.nLockTime)\n     if in_type != SIGHASH_ANYONECANPAY:\n-        ss += sha256(b\"\".join(i.prevout.serialize() for i in txTo.vin))\n-        ss += sha256(b\"\".join(struct.pack(\"<q\", u.nValue) for u in spent_utxos))\n-        ss += sha256(b\"\".join(ser_string(u.scriptPubKey) for u in spent_utxos))\n-        ss += sha256(b\"\".join(struct.pack(\"<I\", i.nSequence) for i in txTo.vin))\n+        ss += BIP341_sha_prevouts(txTo)\n+        ss += BIP341_sha_amounts(spent_utxos)\n+        ss += BIP341_sha_scriptpubkeys(spent_utxos)\n+        ss += BIP341_sha_sequences(txTo)\n     if out_type == SIGHASH_ALL:\n-        ss += sha256(b\"\".join(o.serialize() for o in txTo.vout))\n+        ss += BIP341_sha_outputs(txTo)\n     spend_type = 0\n     if annex is not None:\n         spend_type |= 1"
      }
    ]
  },
  {
    "sha": "ca83ffc2ea5fe08f16fff7df71c040d067f2afb0",
    "node_id": "C_kwDOABII59oAKGNhODNmZmMyZWE1ZmUwOGYxNmZmZjdkZjcxYzA0MGQwNjdmMmFmYjA",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-10-27T19:46:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-11-12T17:04:20Z"
      },
      "message": "tests: add deterministic signing mode to ECDSA\n\nThis does the following:\n* Adds a rfc6979 argument to test_framework/key.py's sign_ecdsa to\n  select (deterministic) RFC6979-based nonce generation.\n* Add a flag in feature_taproot.py's framework called \"deterministic\".\n* Make the Schnorr signing in feature_taproot.py randomized by default,\n  reverting to the old deterministic (aux_rnd=0x0000...00) behavior\n  if the deterministic context flag is set.\n* Make the ECDSA signing in feature_taproot.py use RFC6979-based nonces\n  when the deterministic context flag is set (keeping the old randomized\n  behavior otherwise).",
      "tree": {
        "sha": "803e6de3f7b48b54e4e608482f7124d49a7e79fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/803e6de3f7b48b54e4e608482f7124d49a7e79fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca83ffc2ea5fe08f16fff7df71c040d067f2afb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca83ffc2ea5fe08f16fff7df71c040d067f2afb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca83ffc2ea5fe08f16fff7df71c040d067f2afb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca83ffc2ea5fe08f16fff7df71c040d067f2afb0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c98c53f20cadeda53f6a9323f72363593d174f68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98c53f20cadeda53f6a9323f72363593d174f68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c98c53f20cadeda53f6a9323f72363593d174f68"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 25,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f2ae8b302dc84393c41eb737000369462efaabda",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca83ffc2ea5fe08f16fff7df71c040d067f2afb0/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca83ffc2ea5fe08f16fff7df71c040d067f2afb0/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=ca83ffc2ea5fe08f16fff7df71c040d067f2afb0",
        "patch": "@@ -253,14 +253,18 @@ def default_key_tweaked(ctx):\n def default_signature(ctx):\n     \"\"\"Default expression for \"signature\": BIP340 signature or ECDSA signature depending on mode.\"\"\"\n     sighash = get(ctx, \"sighash\")\n+    deterministic = get(ctx, \"deterministic\")\n     if get(ctx, \"mode\") == \"taproot\":\n         key = get(ctx, \"key_tweaked\")\n         flip_r = get(ctx, \"flag_flip_r\")\n         flip_p = get(ctx, \"flag_flip_p\")\n-        return sign_schnorr(key, sighash, flip_r=flip_r, flip_p=flip_p)\n+        aux = bytes([0] * 32)\n+        if not deterministic:\n+            aux = random.getrandbits(256).to_bytes(32, 'big')\n+        return sign_schnorr(key, sighash, flip_r=flip_r, flip_p=flip_p, aux=aux)\n     else:\n         key = get(ctx, \"key\")\n-        return key.sign_ecdsa(sighash)\n+        return key.sign_ecdsa(sighash, rfc6979=deterministic)\n \n def default_hashtype_actual(ctx):\n     \"\"\"Default expression for \"hashtype_actual\": hashtype, unless mismatching SIGHASH_SINGLE in taproot.\"\"\"\n@@ -392,6 +396,8 @@ def default_scriptsig(ctx):\n     \"leaf\": None,\n     # The input arguments to provide to the executed script\n     \"inputs\": [],\n+    # Use deterministic signing nonces\n+    \"deterministic\": False,\n \n     # == Parameters to be set before evaluation: ==\n     # - mode: what spending style to use (\"taproot\", \"witv0\", or \"legacy\")."
      },
      {
        "sha": "e5dea66963d9cec5b336a8eb7d671f8a18bb2014",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca83ffc2ea5fe08f16fff7df71c040d067f2afb0/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca83ffc2ea5fe08f16fff7df71c040d067f2afb0/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=ca83ffc2ea5fe08f16fff7df71c040d067f2afb0",
        "patch": "@@ -8,6 +8,7 @@\n anything but tests.\"\"\"\n import csv\n import hashlib\n+import hmac\n import os\n import random\n import unittest\n@@ -326,6 +327,16 @@ def generate_privkey():\n     \"\"\"Generate a valid random 32-byte private key.\"\"\"\n     return random.randrange(1, SECP256K1_ORDER).to_bytes(32, 'big')\n \n+def rfc6979_nonce(key):\n+    \"\"\"Compute signing nonce using RFC6979.\"\"\"\n+    v = bytes([1] * 32)\n+    k = bytes([0] * 32)\n+    k = hmac.new(k, v + b\"\\x00\" + key, 'sha256').digest()\n+    v = hmac.new(k, v, 'sha256').digest()\n+    k = hmac.new(k, v + b\"\\x01\" + key, 'sha256').digest()\n+    v = hmac.new(k, v, 'sha256').digest()\n+    return hmac.new(k, v, 'sha256').digest()\n+\n class ECKey():\n     \"\"\"A secp256k1 private key\"\"\"\n \n@@ -368,15 +379,18 @@ def get_pubkey(self):\n         ret.compressed = self.compressed\n         return ret\n \n-    def sign_ecdsa(self, msg, low_s=True):\n+    def sign_ecdsa(self, msg, low_s=True, rfc6979=False):\n         \"\"\"Construct a DER-encoded ECDSA signature with this key.\n \n         See https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm for the\n         ECDSA signer algorithm.\"\"\"\n         assert(self.valid)\n         z = int.from_bytes(msg, 'big')\n-        # Note: no RFC6979, but a simple random nonce (some tests rely on distinct transactions for the same operation)\n-        k = random.randrange(1, SECP256K1_ORDER)\n+        # Note: no RFC6979 by default, but a simple random nonce (some tests rely on distinct transactions for the same operation)\n+        if rfc6979:\n+            k = int.from_bytes(rfc6979_nonce(self.secret.to_bytes(32, 'big') + msg), 'big')\n+        else:\n+            k = random.randrange(1, SECP256K1_ORDER)\n         R = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, k)]))\n         r = R[0] % SECP256K1_ORDER\n         s = (modinv(k, SECP256K1_ORDER) * (z + self.secret * r)) % SECP256K1_ORDER"
      }
    ]
  },
  {
    "sha": "ac3037df1196b1d95ade2dfad4699ad3a6074903",
    "node_id": "C_kwDOABII59oAKGFjMzAzN2RmMTE5NmIxZDk1YWRlMmRmYWQ0Njk5YWQzYTYwNzQ5MDM",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-10-26T19:34:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-11-12T17:04:57Z"
      },
      "message": "tests: BIP341 test vector generation",
      "tree": {
        "sha": "001ce76eefcf7635244d3140b86a7cd61b26417d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/001ce76eefcf7635244d3140b86a7cd61b26417d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac3037df1196b1d95ade2dfad4699ad3a6074903",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac3037df1196b1d95ade2dfad4699ad3a6074903",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac3037df1196b1d95ade2dfad4699ad3a6074903",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac3037df1196b1d95ade2dfad4699ad3a6074903/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca83ffc2ea5fe08f16fff7df71c040d067f2afb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca83ffc2ea5fe08f16fff7df71c040d067f2afb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca83ffc2ea5fe08f16fff7df71c040d067f2afb0"
      }
    ],
    "stats": {
      "total": 257,
      "additions": 250,
      "deletions": 7
    },
    "files": [
      {
        "sha": "dccf8a718cccdc7c88c30ec1164d5e1d3caa9f57",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 250,
        "deletions": 7,
        "changes": 257,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac3037df1196b1d95ade2dfad4699ad3a6074903/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac3037df1196b1d95ade2dfad4699ad3a6074903/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=ac3037df1196b1d95ade2dfad4699ad3a6074903",
        "patch": "@@ -22,6 +22,11 @@\n )\n from test_framework.script import (\n     ANNEX_TAG,\n+    BIP341_sha_amounts,\n+    BIP341_sha_outputs,\n+    BIP341_sha_prevouts,\n+    BIP341_sha_scriptpubkeys,\n+    BIP341_sha_sequences,\n     CScript,\n     CScriptNum,\n     CScriptOp,\n@@ -79,6 +84,7 @@\n )\n from test_framework.script_util import (\n     key_to_p2pk_script,\n+    key_to_p2pkh_script,\n     key_to_p2wpkh_script,\n     keyhash_to_p2pkh_script,\n     script_to_p2sh_script,\n@@ -89,6 +95,7 @@\n from test_framework.key import generate_privkey, compute_xonly_pubkey, sign_schnorr, tweak_add_privkey, ECKey\n from test_framework.address import (\n     hash160,\n+    program_to_witness\n )\n from collections import OrderedDict, namedtuple\n from io import BytesIO\n@@ -97,6 +104,9 @@\n import os\n import random\n \n+# Whether or not to output generated test vectors, in JSON format.\n+GEN_TEST_VECTORS = False\n+\n # === Framework for building spending transactions. ===\n #\n # The computation is represented as a \"context\" dict, whose entries store potentially-unevaluated expressions that\n@@ -418,6 +428,7 @@ def flatten(lst):\n             ret.append(elem)\n     return ret\n \n+\n def spend(tx, idx, utxos, **kwargs):\n     \"\"\"Sign transaction input idx of tx, provided utxos is the list of outputs being spent.\n \n@@ -1276,6 +1287,14 @@ def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_w\n         else:\n             assert node.getbestblockhash() == self.lastblockhash, \"Failed to reject: \" + msg\n \n+    def init_blockinfo(self, node):\n+        # Initialize variables used by block_submit().\n+        self.lastblockhash = node.getbestblockhash()\n+        self.tip = int(self.lastblockhash, 16)\n+        block = node.getblock(self.lastblockhash)\n+        self.lastblockheight = block['height']\n+        self.lastblocktime = block['time']\n+\n     def test_spenders(self, node, spenders, input_counts):\n         \"\"\"Run randomized tests with a number of \"spenders\".\n \n@@ -1302,12 +1321,7 @@ def test_spenders(self, node, spenders, input_counts):\n             host_spks.append(spk)\n             host_pubkeys.append(bytes.fromhex(info['pubkey']))\n \n-        # Initialize variables used by block_submit().\n-        self.lastblockhash = node.getbestblockhash()\n-        self.tip = int(self.lastblockhash, 16)\n-        block = node.getblock(self.lastblockhash)\n-        self.lastblockheight = block['height']\n-        self.lastblocktime = block['time']\n+        self.init_blockinfo(node)\n \n         # Create transactions spending up to 50 of the wallet's inputs, with one output for each spender, and\n         # one change output at the end. The transaction is constructed on the Python side to enable\n@@ -1481,10 +1495,239 @@ def test_spenders(self, node, spenders, input_counts):\n         assert len(mismatching_utxos) == 0\n         self.log.info(\"  - Done\")\n \n+    def gen_test_vectors(self):\n+        \"\"\"Run a scenario that corresponds (and optionally produces) to BIP341 test vectors.\"\"\"\n+\n+        self.log.info(\"Unit test scenario...\")\n+\n+        # Deterministically mine coins to OP_TRUE in block 1\n+        assert self.nodes[1].getblockcount() == 0\n+        coinbase = CTransaction()\n+        coinbase.nVersion = 1\n+        coinbase.vin = [CTxIn(COutPoint(0, 0xffffffff), CScript([OP_1, OP_1]), 0xffffffff)]\n+        coinbase.vout = [CTxOut(5000000000, CScript([OP_1]))]\n+        coinbase.nLockTime = 0\n+        coinbase.rehash()\n+        assert coinbase.hash == \"f60c73405d499a956d3162e3483c395526ef78286458a4cb17b125aa92e49b20\"\n+        # Mine it\n+        block = create_block(hashprev=int(self.nodes[1].getbestblockhash(), 16), coinbase=coinbase)\n+        block.rehash()\n+        block.solve()\n+        self.nodes[1].submitblock(block.serialize().hex())\n+        assert self.nodes[1].getblockcount() == 1\n+        self.generate(self.nodes[1], COINBASE_MATURITY)\n+\n+        SEED = 317\n+        VALID_LEAF_VERS = list(range(0xc0, 0x100, 2)) + [0x66, 0x7e, 0x80, 0x84, 0x96, 0x98, 0xba, 0xbc, 0xbe]\n+        # Generate private keys\n+        prvs = [hashlib.sha256(SEED.to_bytes(2, 'big') + bytes([i])).digest() for i in range(100)]\n+        # Generate corresponding public x-only pubkeys\n+        pubs = [compute_xonly_pubkey(prv)[0] for prv in prvs]\n+        # Generate taproot objects\n+        inner_keys = [pubs[i] for i in range(7)]\n+\n+        script_lists = [\n+            None,\n+            [(\"0\", CScript([pubs[50], OP_CHECKSIG]), 0xc0)],\n+            [(\"0\", CScript([pubs[51], OP_CHECKSIG]), 0xc0)],\n+            [(\"0\", CScript([pubs[52], OP_CHECKSIG]), 0xc0), (\"1\", CScript([b\"BIP341\"]), VALID_LEAF_VERS[pubs[99][0] % 41])],\n+            [(\"0\", CScript([pubs[53], OP_CHECKSIG]), 0xc0), (\"1\", CScript([b\"Taproot\"]), VALID_LEAF_VERS[pubs[99][1] % 41])],\n+            [(\"0\", CScript([pubs[54], OP_CHECKSIG]), 0xc0), [(\"1\", CScript([pubs[55], OP_CHECKSIG]), 0xc0), (\"2\", CScript([pubs[56], OP_CHECKSIG]), 0xc0)]],\n+            [(\"0\", CScript([pubs[57], OP_CHECKSIG]), 0xc0), [(\"1\", CScript([pubs[58], OP_CHECKSIG]), 0xc0), (\"2\", CScript([pubs[59], OP_CHECKSIG]), 0xc0)]],\n+        ]\n+        taps = [taproot_construct(inner_keys[i], script_lists[i]) for i in range(len(inner_keys))]\n+\n+        # Require negated taps[0]\n+        assert taps[0].negflag\n+        # Require one negated and one non-negated in taps 1 and 2.\n+        assert taps[1].negflag != taps[2].negflag\n+        # Require one negated and one non-negated in taps 3 and 4.\n+        assert taps[3].negflag != taps[4].negflag\n+        # Require one negated and one non-negated in taps 5 and 6.\n+        assert taps[5].negflag != taps[6].negflag\n+\n+        cblks = [{leaf: get({**DEFAULT_CONTEXT, 'tap': taps[i], 'leaf': leaf}, 'controlblock') for leaf in taps[i].leaves} for i in range(7)]\n+        # Require one swapped and one unswapped in taps 3 and 4.\n+        assert (cblks[3]['0'][33:65] < cblks[3]['1'][33:65]) != (cblks[4]['0'][33:65] < cblks[4]['1'][33:65])\n+        # Require one swapped and one unswapped in taps 5 and 6, both at the top and child level.\n+        assert (cblks[5]['0'][33:65] < cblks[5]['1'][65:]) != (cblks[6]['0'][33:65] < cblks[6]['1'][65:])\n+        assert (cblks[5]['1'][33:65] < cblks[5]['2'][33:65]) != (cblks[6]['1'][33:65] < cblks[6]['2'][33:65])\n+        # Require within taps 5 (and thus also 6) that one level is swapped and the other is not.\n+        assert (cblks[5]['0'][33:65] < cblks[5]['1'][65:]) != (cblks[5]['1'][33:65] < cblks[5]['2'][33:65])\n+\n+        # Compute a deterministic set of scriptPubKeys\n+        tap_spks = []\n+        old_spks = []\n+        spend_info = {}\n+        # First, taproot scriptPubKeys, for the tap objects constructed above\n+        for i, tap in enumerate(taps):\n+            tap_spks.append(tap.scriptPubKey)\n+            d = {'key': prvs[i], 'tap': tap, 'mode': 'taproot'}\n+            spend_info[tap.scriptPubKey] = d\n+        # Then, a number of deterministically generated (keys 0x1,0x2,0x3) with 2x P2PKH, 1x P2WPKH spks.\n+        for i in range(1, 4):\n+            prv = ECKey()\n+            prv.set(i.to_bytes(32, 'big'), True)\n+            pub = prv.get_pubkey().get_bytes()\n+            d = {\"key\": prv}\n+            d[\"scriptcode\"] = key_to_p2pkh_script(pub)\n+            d[\"inputs\"] = [getter(\"sign\"), pub]\n+            if i < 3:\n+                # P2PKH\n+                d['spk'] = key_to_p2pkh_script(pub)\n+                d['mode'] = 'legacy'\n+            else:\n+                # P2WPKH\n+                d['spk'] = key_to_p2wpkh_script(pub)\n+                d['mode'] = 'witv0'\n+            old_spks.append(d['spk'])\n+            spend_info[d['spk']] = d\n+\n+        # Construct a deterministic chain of transactions creating UTXOs to the test's spk's (so that they\n+        # come from distinct txids).\n+        txn = []\n+        lasttxid = coinbase.sha256\n+        amount = 5000000000\n+        for i, spk in enumerate(old_spks + tap_spks):\n+            val = 42000000 * (i + 7)\n+            tx = CTransaction()\n+            tx.nVersion = 1\n+            tx.vin = [CTxIn(COutPoint(lasttxid, i & 1), CScript([]), 0xffffffff)]\n+            tx.vout = [CTxOut(val, spk), CTxOut(amount - val, CScript([OP_1]))]\n+            if i & 1:\n+                tx.vout = list(reversed(tx.vout))\n+            tx.nLockTime = 0\n+            tx.rehash()\n+            amount -= val\n+            lasttxid = tx.sha256\n+            txn.append(tx)\n+            spend_info[spk]['prevout'] = COutPoint(tx.sha256, i & 1)\n+            spend_info[spk]['utxo'] = CTxOut(val, spk)\n+        # Mine those transactions\n+        self.init_blockinfo(self.nodes[1])\n+        self.block_submit(self.nodes[1], txn, \"Crediting txn\", None, sigops_weight=10, accept=True)\n+\n+        # scriptPubKey computation\n+        tests = {\"version\": 1}\n+        spk_tests = tests.setdefault(\"scriptPubKey\", [])\n+        for i, tap in enumerate(taps):\n+            test_case = {}\n+            given = test_case.setdefault(\"given\", {})\n+            given['internalPubkey'] = tap.internal_pubkey.hex()\n+\n+            def pr(node):\n+                if node is None:\n+                    return None\n+                elif isinstance(node, tuple):\n+                    return {\"id\": int(node[0]), \"script\": node[1].hex(), \"leafVersion\": node[2]}\n+                elif len(node) == 1:\n+                    return pr(node[0])\n+                elif len(node) == 2:\n+                    return [pr(node[0]), pr(node[1])]\n+                else:\n+                    assert False\n+\n+            given['scriptTree'] = pr(script_lists[i])\n+            intermediary = test_case.setdefault(\"intermediary\", {})\n+            if len(tap.leaves):\n+                leafhashes = intermediary.setdefault('leafHashes', [None] * len(tap.leaves))\n+                for leaf in tap.leaves:\n+                    leafhashes[int(leaf)] = tap.leaves[leaf].leaf_hash.hex()\n+            intermediary['merkleRoot'] = tap.merkle_root.hex() if tap.merkle_root else None\n+            intermediary['tweak'] = tap.tweak.hex()\n+            intermediary['tweakedPubkey'] = tap.output_pubkey.hex()\n+            expected = test_case.setdefault(\"expected\", {})\n+            expected['scriptPubKey'] = tap.scriptPubKey.hex()\n+            expected['bip350Address'] = program_to_witness(1, bytes(tap.output_pubkey), True)\n+            if len(tap.leaves):\n+                control_blocks = expected.setdefault(\"scriptPathControlBlocks\", [None] * len(tap.leaves))\n+                for leaf in tap.leaves:\n+                    ctx = {**DEFAULT_CONTEXT, 'tap': tap, 'leaf': leaf}\n+                    control_blocks[int(leaf)] = get(ctx, \"controlblock\").hex()\n+            spk_tests.append(test_case)\n+\n+        # Construct a deterministic transaction spending all outputs created above.\n+        tx = CTransaction()\n+        tx.nVersion = 2\n+        tx.vin = []\n+        inputs = []\n+        input_spks = [tap_spks[0], tap_spks[1], old_spks[0], tap_spks[2], tap_spks[5], old_spks[2], tap_spks[6], tap_spks[3], tap_spks[4]]\n+        sequences = [0, 0xffffffff, 0xffffffff, 0xfffffffe, 0xfffffffe, 0, 0, 0xffffffff, 0xffffffff]\n+        hashtypes = [SIGHASH_SINGLE, SIGHASH_SINGLE|SIGHASH_ANYONECANPAY, SIGHASH_ALL, SIGHASH_ALL, SIGHASH_DEFAULT, SIGHASH_ALL, SIGHASH_NONE, SIGHASH_NONE|SIGHASH_ANYONECANPAY, SIGHASH_ALL|SIGHASH_ANYONECANPAY]\n+        for i, spk in enumerate(input_spks):\n+            tx.vin.append(CTxIn(spend_info[spk]['prevout'], CScript(), sequences[i]))\n+            inputs.append(spend_info[spk]['utxo'])\n+        tx.vout.append(CTxOut(1000000000, old_spks[1]))\n+        tx.vout.append(CTxOut(3410000000, pubs[98]))\n+        tx.nLockTime = 500000000\n+        precomputed = {\n+            \"hashAmounts\": BIP341_sha_amounts(inputs),\n+            \"hashPrevouts\": BIP341_sha_prevouts(tx),\n+            \"hashScriptPubkeys\": BIP341_sha_scriptpubkeys(inputs),\n+            \"hashSequences\": BIP341_sha_sequences(tx),\n+            \"hashOutputs\": BIP341_sha_outputs(tx)\n+        }\n+        keypath_tests = tests.setdefault(\"keyPathSpending\", [])\n+        tx_test = {}\n+        global_given = tx_test.setdefault(\"given\", {})\n+        global_given['rawUnsignedTx'] = tx.serialize().hex()\n+        utxos_spent = global_given.setdefault(\"utxosSpent\", [])\n+        for i in range(len(input_spks)):\n+            utxos_spent.append({\"scriptPubKey\": inputs[i].scriptPubKey.hex(), \"amountSats\": inputs[i].nValue})\n+        global_intermediary = tx_test.setdefault(\"intermediary\", {})\n+        for key in sorted(precomputed.keys()):\n+            global_intermediary[key] = precomputed[key].hex()\n+        test_list = tx_test.setdefault('inputSpending', [])\n+        for i in range(len(input_spks)):\n+            ctx = {\n+                **DEFAULT_CONTEXT,\n+                **spend_info[input_spks[i]],\n+                'tx': tx,\n+                'utxos': inputs,\n+                'idx': i,\n+                'hashtype': hashtypes[i],\n+                'deterministic': True\n+            }\n+            if ctx['mode'] == 'taproot':\n+                test_case = {}\n+                given = test_case.setdefault(\"given\", {})\n+                given['txinIndex'] = i\n+                given['internalPrivkey'] = get(ctx, 'key').hex()\n+                if get(ctx, \"tap\").merkle_root != bytes():\n+                    given['merkleRoot'] = get(ctx, \"tap\").merkle_root.hex()\n+                else:\n+                    given['merkleRoot'] = None\n+                given['hashType'] = get(ctx, \"hashtype\")\n+                intermediary = test_case.setdefault(\"intermediary\", {})\n+                intermediary['internalPubkey'] = get(ctx, \"tap\").internal_pubkey.hex()\n+                intermediary['tweak'] = get(ctx, \"tap\").tweak.hex()\n+                intermediary['tweakedPrivkey'] = get(ctx, \"key_tweaked\").hex()\n+                sigmsg = get(ctx, \"sigmsg\")\n+                intermediary['sigMsg'] = sigmsg.hex()\n+                intermediary['precomputedUsed'] = [key for key in sorted(precomputed.keys()) if sigmsg.count(precomputed[key])]\n+                intermediary['sigHash'] = get(ctx, \"sighash\").hex()\n+                expected = test_case.setdefault(\"expected\", {})\n+                expected['witness'] = [get(ctx, \"sign\").hex()]\n+                test_list.append(test_case)\n+            tx.wit.vtxinwit.append(CTxInWitness())\n+            tx.vin[i].scriptSig = CScript(flatten(get(ctx, \"scriptsig\")))\n+            tx.wit.vtxinwit[i].scriptWitness.stack = flatten(get(ctx, \"witness\"))\n+        aux = tx_test.setdefault(\"auxiliary\", {})\n+        aux['fullySignedTx'] = tx.serialize().hex()\n+        keypath_tests.append(tx_test)\n+        assert_equal(hashlib.sha256(tx.serialize()).hexdigest(), \"24bab662cb55a7f3bae29b559f651674c62bcc1cd442d44715c0133939107b38\")\n+        # Mine the spending transaction\n+        self.block_submit(self.nodes[1], [tx], \"Spending txn\", None, sigops_weight=10000, accept=True, witness=True)\n+\n+        if GEN_TEST_VECTORS:\n+            print(json.dumps(tests, indent=4, sort_keys=False))\n+\n+\n     def run_test(self):\n+        self.gen_test_vectors()\n+\n         # Post-taproot activation tests go first (pre-taproot tests' blocks are invalid post-taproot).\n         self.log.info(\"Post-activation tests...\")\n-        self.generate(self.nodes[1], COINBASE_MATURITY + 1)\n         self.test_spenders(self.nodes[1], spenders_taproot_active(), input_counts=[1, 2, 2, 2, 2, 3])\n \n         # Re-connect nodes in case they have been disconnected"
      }
    ]
  },
  {
    "sha": "f1c33ee4ac1056289f2e67b75755388549ada4ca",
    "node_id": "C_kwDOABII59oAKGYxYzMzZWU0YWMxMDU2Mjg5ZjJlNjdiNzU3NTUzODg1NDlhZGE0Y2E",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-10-27T23:16:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-11-12T17:05:00Z"
      },
      "message": "tests: implement BIP341 test vectors",
      "tree": {
        "sha": "65f8ecc6d94ef47124c96cd80e3bd918d05599fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65f8ecc6d94ef47124c96cd80e3bd918d05599fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1c33ee4ac1056289f2e67b75755388549ada4ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1c33ee4ac1056289f2e67b75755388549ada4ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1c33ee4ac1056289f2e67b75755388549ada4ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1c33ee4ac1056289f2e67b75755388549ada4ca/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac3037df1196b1d95ade2dfad4699ad3a6074903",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac3037df1196b1d95ade2dfad4699ad3a6074903",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac3037df1196b1d95ade2dfad4699ad3a6074903"
      }
    ],
    "stats": {
      "total": 578,
      "additions": 577,
      "deletions": 1
    },
    "files": [
      {
        "sha": "402cf188c4c7e78444f0da82c546dbbd1bb6d485",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f1c33ee4ac1056289f2e67b75755388549ada4ca",
        "patch": "@@ -16,6 +16,7 @@ FUZZ_BINARY=test/fuzz/fuzz$(EXEEXT)\n \n JSON_TEST_FILES = \\\n   test/data/script_tests.json \\\n+  test/data/bip341_wallet_vectors.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/blockfilters.json \\\n   test/data/key_io_valid.json \\"
      },
      {
        "sha": "d83ec7192b488a1772524d00dfa676651e856caa",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=f1c33ee4ac1056289f2e67b75755388549ada4ca",
        "patch": "@@ -1483,7 +1483,7 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n-static const CHashWriter HASHER_TAPSIGHASH = TaggedHash(\"TapSighash\");\n+const CHashWriter HASHER_TAPSIGHASH = TaggedHash(\"TapSighash\");\n const CHashWriter HASHER_TAPLEAF = TaggedHash(\"TapLeaf\");\n const CHashWriter HASHER_TAPBRANCH = TaggedHash(\"TapBranch\");\n "
      },
      {
        "sha": "513eaaf94c72da6e17dcd5edc53bf633b07210ab",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=f1c33ee4ac1056289f2e67b75755388549ada4ca",
        "patch": "@@ -229,6 +229,7 @@ static constexpr size_t TAPROOT_CONTROL_NODE_SIZE = 32;\n static constexpr size_t TAPROOT_CONTROL_MAX_NODE_COUNT = 128;\n static constexpr size_t TAPROOT_CONTROL_MAX_SIZE = TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * TAPROOT_CONTROL_MAX_NODE_COUNT;\n \n+extern const CHashWriter HASHER_TAPSIGHASH; //!< Hasher with tag \"TapSighash\" pre-fed to it.\n extern const CHashWriter HASHER_TAPLEAF;    //!< Hasher with tag \"TapLeaf\" pre-fed to it.\n extern const CHashWriter HASHER_TAPBRANCH;  //!< Hasher with tag \"TapBranch\" pre-fed to it.\n "
      },
      {
        "sha": "11261b00ba24afb90b62109505d9ca5ddd773b3b",
        "filename": "src/test/data/bip341_wallet_vectors.json",
        "status": "added",
        "additions": 452,
        "deletions": 0,
        "changes": 452,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/test/data/bip341_wallet_vectors.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/test/data/bip341_wallet_vectors.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/bip341_wallet_vectors.json?ref=f1c33ee4ac1056289f2e67b75755388549ada4ca",
        "patch": "@@ -0,0 +1,452 @@\n+{\n+    \"version\": 1,\n+    \"scriptPubKey\": [\n+        {\n+            \"given\": {\n+                \"internalPubkey\": \"d6889cb081036e0faefa3a35157ad71086b123b2b144b649798b494c300a961d\",\n+                \"scriptTree\": null\n+            },\n+            \"intermediary\": {\n+                \"merkleRoot\": null,\n+                \"tweak\": \"b86e7be8f39bab32a6f2c0443abbc210f0edac0e2c53d501b36b64437d9c6c70\",\n+                \"tweakedPubkey\": \"53a1f6e454df1aa2776a2814a721372d6258050de330b3c6d10ee8f4e0dda343\"\n+            },\n+            \"expected\": {\n+                \"scriptPubKey\": \"512053a1f6e454df1aa2776a2814a721372d6258050de330b3c6d10ee8f4e0dda343\",\n+                \"bip350Address\": \"bc1p2wsldez5mud2yam29q22wgfh9439spgduvct83k3pm50fcxa5dps59h4z5\"\n+            }\n+        },\n+        {\n+            \"given\": {\n+                \"internalPubkey\": \"187791b6f712a8ea41c8ecdd0ee77fab3e85263b37e1ec18a3651926b3a6cf27\",\n+                \"scriptTree\": {\n+                    \"id\": 0,\n+                    \"script\": \"20d85a959b0290bf19bb89ed43c916be835475d013da4b362117393e25a48229b8ac\",\n+                    \"leafVersion\": 192\n+                }\n+            },\n+            \"intermediary\": {\n+                \"leafHashes\": [\n+                    \"5b75adecf53548f3ec6ad7d78383bf84cc57b55a3127c72b9a2481752dd88b21\"\n+                ],\n+                \"merkleRoot\": \"5b75adecf53548f3ec6ad7d78383bf84cc57b55a3127c72b9a2481752dd88b21\",\n+                \"tweak\": \"cbd8679ba636c1110ea247542cfbd964131a6be84f873f7f3b62a777528ed001\",\n+                \"tweakedPubkey\": \"147c9c57132f6e7ecddba9800bb0c4449251c92a1e60371ee77557b6620f3ea3\"\n+            },\n+            \"expected\": {\n+                \"scriptPubKey\": \"5120147c9c57132f6e7ecddba9800bb0c4449251c92a1e60371ee77557b6620f3ea3\",\n+                \"bip350Address\": \"bc1pz37fc4cn9ah8anwm4xqqhvxygjf9rjf2resrw8h8w4tmvcs0863sa2e586\",\n+                \"scriptPathControlBlocks\": [\n+                    \"c1187791b6f712a8ea41c8ecdd0ee77fab3e85263b37e1ec18a3651926b3a6cf27\"\n+                ]\n+            }\n+        },\n+        {\n+            \"given\": {\n+                \"internalPubkey\": \"93478e9488f956df2396be2ce6c5cced75f900dfa18e7dabd2428aae78451820\",\n+                \"scriptTree\": {\n+                    \"id\": 0,\n+                    \"script\": \"20b617298552a72ade070667e86ca63b8f5789a9fe8731ef91202a91c9f3459007ac\",\n+                    \"leafVersion\": 192\n+                }\n+            },\n+            \"intermediary\": {\n+                \"leafHashes\": [\n+                    \"c525714a7f49c28aedbbba78c005931a81c234b2f6c99a73e4d06082adc8bf2b\"\n+                ],\n+                \"merkleRoot\": \"c525714a7f49c28aedbbba78c005931a81c234b2f6c99a73e4d06082adc8bf2b\",\n+                \"tweak\": \"6af9e28dbf9d6aaf027696e2598a5b3d056f5fd2355a7fd5a37a0e5008132d30\",\n+                \"tweakedPubkey\": \"e4d810fd50586274face62b8a807eb9719cef49c04177cc6b76a9a4251d5450e\"\n+            },\n+            \"expected\": {\n+                \"scriptPubKey\": \"5120e4d810fd50586274face62b8a807eb9719cef49c04177cc6b76a9a4251d5450e\",\n+                \"bip350Address\": \"bc1punvppl2stp38f7kwv2u2spltjuvuaayuqsthe34hd2dyy5w4g58qqfuag5\",\n+                \"scriptPathControlBlocks\": [\n+                    \"c093478e9488f956df2396be2ce6c5cced75f900dfa18e7dabd2428aae78451820\"\n+                ]\n+            }\n+        },\n+        {\n+            \"given\": {\n+                \"internalPubkey\": \"ee4fe085983462a184015d1f782d6a5f8b9c2b60130aff050ce221ecf3786592\",\n+                \"scriptTree\": [\n+                    {\n+                        \"id\": 0,\n+                        \"script\": \"20387671353e273264c495656e27e39ba899ea8fee3bb69fb2a680e22093447d48ac\",\n+                        \"leafVersion\": 192\n+                    },\n+                    {\n+                        \"id\": 1,\n+                        \"script\": \"06424950333431\",\n+                        \"leafVersion\": 250\n+                    }\n+                ]\n+            },\n+            \"intermediary\": {\n+                \"leafHashes\": [\n+                    \"8ad69ec7cf41c2a4001fd1f738bf1e505ce2277acdcaa63fe4765192497f47a7\",\n+                    \"f224a923cd0021ab202ab139cc56802ddb92dcfc172b9212261a539df79a112a\"\n+                ],\n+                \"merkleRoot\": \"6c2dc106ab816b73f9d07e3cd1ef2c8c1256f519748e0813e4edd2405d277bef\",\n+                \"tweak\": \"9e0517edc8259bb3359255400b23ca9507f2a91cd1e4250ba068b4eafceba4a9\",\n+                \"tweakedPubkey\": \"712447206d7a5238acc7ff53fbe94a3b64539ad291c7cdbc490b7577e4b17df5\"\n+            },\n+            \"expected\": {\n+                \"scriptPubKey\": \"5120712447206d7a5238acc7ff53fbe94a3b64539ad291c7cdbc490b7577e4b17df5\",\n+                \"bip350Address\": \"bc1pwyjywgrd0ffr3tx8laflh6228dj98xkjj8rum0zfpd6h0e930h6saqxrrm\",\n+                \"scriptPathControlBlocks\": [\n+                    \"c0ee4fe085983462a184015d1f782d6a5f8b9c2b60130aff050ce221ecf3786592f224a923cd0021ab202ab139cc56802ddb92dcfc172b9212261a539df79a112a\",\n+                    \"faee4fe085983462a184015d1f782d6a5f8b9c2b60130aff050ce221ecf37865928ad69ec7cf41c2a4001fd1f738bf1e505ce2277acdcaa63fe4765192497f47a7\"\n+                ]\n+            }\n+        },\n+        {\n+            \"given\": {\n+                \"internalPubkey\": \"f9f400803e683727b14f463836e1e78e1c64417638aa066919291a225f0e8dd8\",\n+                \"scriptTree\": [\n+                    {\n+                        \"id\": 0,\n+                        \"script\": \"2044b178d64c32c4a05cc4f4d1407268f764c940d20ce97abfd44db5c3592b72fdac\",\n+                        \"leafVersion\": 192\n+                    },\n+                    {\n+                        \"id\": 1,\n+                        \"script\": \"07546170726f6f74\",\n+                        \"leafVersion\": 192\n+                    }\n+                ]\n+            },\n+            \"intermediary\": {\n+                \"leafHashes\": [\n+                    \"64512fecdb5afa04f98839b50e6f0cb7b1e539bf6f205f67934083cdcc3c8d89\",\n+                    \"2cb2b90daa543b544161530c925f285b06196940d6085ca9474d41dc3822c5cb\"\n+                ],\n+                \"merkleRoot\": \"ab179431c28d3b68fb798957faf5497d69c883c6fb1e1cd9f81483d87bac90cc\",\n+                \"tweak\": \"639f0281b7ac49e742cd25b7f188657626da1ad169209078e2761cefd91fd65e\",\n+                \"tweakedPubkey\": \"77e30a5522dd9f894c3f8b8bd4c4b2cf82ca7da8a3ea6a239655c39c050ab220\"\n+            },\n+            \"expected\": {\n+                \"scriptPubKey\": \"512077e30a5522dd9f894c3f8b8bd4c4b2cf82ca7da8a3ea6a239655c39c050ab220\",\n+                \"bip350Address\": \"bc1pwl3s54fzmk0cjnpl3w9af39je7pv5ldg504x5guk2hpecpg2kgsqaqstjq\",\n+                \"scriptPathControlBlocks\": [\n+                    \"c1f9f400803e683727b14f463836e1e78e1c64417638aa066919291a225f0e8dd82cb2b90daa543b544161530c925f285b06196940d6085ca9474d41dc3822c5cb\",\n+                    \"c1f9f400803e683727b14f463836e1e78e1c64417638aa066919291a225f0e8dd864512fecdb5afa04f98839b50e6f0cb7b1e539bf6f205f67934083cdcc3c8d89\"\n+                ]\n+            }\n+        },\n+        {\n+            \"given\": {\n+                \"internalPubkey\": \"e0dfe2300b0dd746a3f8674dfd4525623639042569d829c7f0eed9602d263e6f\",\n+                \"scriptTree\": [\n+                    {\n+                        \"id\": 0,\n+                        \"script\": \"2072ea6adcf1d371dea8fba1035a09f3d24ed5a059799bae114084130ee5898e69ac\",\n+                        \"leafVersion\": 192\n+                    },\n+                    [\n+                        {\n+                            \"id\": 1,\n+                            \"script\": \"202352d137f2f3ab38d1eaa976758873377fa5ebb817372c71e2c542313d4abda8ac\",\n+                            \"leafVersion\": 192\n+                        },\n+                        {\n+                            \"id\": 2,\n+                            \"script\": \"207337c0dd4253cb86f2c43a2351aadd82cccb12a172cd120452b9bb8324f2186aac\",\n+                            \"leafVersion\": 192\n+                        }\n+                    ]\n+                ]\n+            },\n+            \"intermediary\": {\n+                \"leafHashes\": [\n+                    \"2645a02e0aac1fe69d69755733a9b7621b694bb5b5cde2bbfc94066ed62b9817\",\n+                    \"ba982a91d4fc552163cb1c0da03676102d5b7a014304c01f0c77b2b8e888de1c\",\n+                    \"9e31407bffa15fefbf5090b149d53959ecdf3f62b1246780238c24501d5ceaf6\"\n+                ],\n+                \"merkleRoot\": \"ccbd66c6f7e8fdab47b3a486f59d28262be857f30d4773f2d5ea47f7761ce0e2\",\n+                \"tweak\": \"b57bfa183d28eeb6ad688ddaabb265b4a41fbf68e5fed2c72c74de70d5a786f4\",\n+                \"tweakedPubkey\": \"91b64d5324723a985170e4dc5a0f84c041804f2cd12660fa5dec09fc21783605\"\n+            },\n+            \"expected\": {\n+                \"scriptPubKey\": \"512091b64d5324723a985170e4dc5a0f84c041804f2cd12660fa5dec09fc21783605\",\n+                \"bip350Address\": \"bc1pjxmy65eywgafs5tsunw95ruycpqcqnev6ynxp7jaasylcgtcxczs6n332e\",\n+                \"scriptPathControlBlocks\": [\n+                    \"c0e0dfe2300b0dd746a3f8674dfd4525623639042569d829c7f0eed9602d263e6fffe578e9ea769027e4f5a3de40732f75a88a6353a09d767ddeb66accef85e553\",\n+                    \"c0e0dfe2300b0dd746a3f8674dfd4525623639042569d829c7f0eed9602d263e6f9e31407bffa15fefbf5090b149d53959ecdf3f62b1246780238c24501d5ceaf62645a02e0aac1fe69d69755733a9b7621b694bb5b5cde2bbfc94066ed62b9817\",\n+                    \"c0e0dfe2300b0dd746a3f8674dfd4525623639042569d829c7f0eed9602d263e6fba982a91d4fc552163cb1c0da03676102d5b7a014304c01f0c77b2b8e888de1c2645a02e0aac1fe69d69755733a9b7621b694bb5b5cde2bbfc94066ed62b9817\"\n+                ]\n+            }\n+        },\n+        {\n+            \"given\": {\n+                \"internalPubkey\": \"55adf4e8967fbd2e29f20ac896e60c3b0f1d5b0efa9d34941b5958c7b0a0312d\",\n+                \"scriptTree\": [\n+                    {\n+                        \"id\": 0,\n+                        \"script\": \"2071981521ad9fc9036687364118fb6ccd2035b96a423c59c5430e98310a11abe2ac\",\n+                        \"leafVersion\": 192\n+                    },\n+                    [\n+                        {\n+                            \"id\": 1,\n+                            \"script\": \"20d5094d2dbe9b76e2c245a2b89b6006888952e2faa6a149ae318d69e520617748ac\",\n+                            \"leafVersion\": 192\n+                        },\n+                        {\n+                            \"id\": 2,\n+                            \"script\": \"20c440b462ad48c7a77f94cd4532d8f2119dcebbd7c9764557e62726419b08ad4cac\",\n+                            \"leafVersion\": 192\n+                        }\n+                    ]\n+                ]\n+            },\n+            \"intermediary\": {\n+                \"leafHashes\": [\n+                    \"f154e8e8e17c31d3462d7132589ed29353c6fafdb884c5a6e04ea938834f0d9d\",\n+                    \"737ed1fe30bc42b8022d717b44f0d93516617af64a64753b7a06bf16b26cd711\",\n+                    \"d7485025fceb78b9ed667db36ed8b8dc7b1f0b307ac167fa516fe4352b9f4ef7\"\n+                ],\n+                \"merkleRoot\": \"2f6b2c5397b6d68ca18e09a3f05161668ffe93a988582d55c6f07bd5b3329def\",\n+                \"tweak\": \"6579138e7976dc13b6a92f7bfd5a2fc7684f5ea42419d43368301470f3b74ed9\",\n+                \"tweakedPubkey\": \"75169f4001aa68f15bbed28b218df1d0a62cbbcf1188c6665110c293c907b831\"\n+            },\n+            \"expected\": {\n+                \"scriptPubKey\": \"512075169f4001aa68f15bbed28b218df1d0a62cbbcf1188c6665110c293c907b831\",\n+                \"bip350Address\": \"bc1pw5tf7sqp4f50zka7629jrr036znzew70zxyvvej3zrpf8jg8hqcssyuewe\",\n+                \"scriptPathControlBlocks\": [\n+                    \"c155adf4e8967fbd2e29f20ac896e60c3b0f1d5b0efa9d34941b5958c7b0a0312d3cd369a528b326bc9d2133cbd2ac21451acb31681a410434672c8e34fe757e91\",\n+                    \"c155adf4e8967fbd2e29f20ac896e60c3b0f1d5b0efa9d34941b5958c7b0a0312dd7485025fceb78b9ed667db36ed8b8dc7b1f0b307ac167fa516fe4352b9f4ef7f154e8e8e17c31d3462d7132589ed29353c6fafdb884c5a6e04ea938834f0d9d\",\n+                    \"c155adf4e8967fbd2e29f20ac896e60c3b0f1d5b0efa9d34941b5958c7b0a0312d737ed1fe30bc42b8022d717b44f0d93516617af64a64753b7a06bf16b26cd711f154e8e8e17c31d3462d7132589ed29353c6fafdb884c5a6e04ea938834f0d9d\"\n+                ]\n+            }\n+        }\n+    ],\n+    \"keyPathSpending\": [\n+        {\n+            \"given\": {\n+                \"rawUnsignedTx\": \"02000000097de20cbff686da83a54981d2b9bab3586f4ca7e48f57f5b55963115f3b334e9c010000000000000000d7b7cab57b1393ace2d064f4d4a2cb8af6def61273e127517d44759b6dafdd990000000000fffffffff8e1f583384333689228c5d28eac13366be082dc57441760d957275419a418420000000000fffffffff0689180aa63b30cb162a73c6d2a38b7eeda2a83ece74310fda0843ad604853b0100000000feffffffaa5202bdf6d8ccd2ee0f0202afbbb7461d9264a25e5bfd3c5a52ee1239e0ba6c0000000000feffffff956149bdc66faa968eb2be2d2faa29718acbfe3941215893a2a3446d32acd050000000000000000000e664b9773b88c09c32cb70a2a3e4da0ced63b7ba3b22f848531bbb1d5d5f4c94010000000000000000e9aa6b8e6c9de67619e6a3924ae25696bb7b694bb677a632a74ef7eadfd4eabf0000000000ffffffffa778eb6a263dc090464cd125c466b5a99667720b1c110468831d058aa1b82af10100000000ffffffff0200ca9a3b000000001976a91406afd46bcdfd22ef94ac122aa11f241244a37ecc88ac807840cb0000000020ac9a87f5594be208f8532db38cff670c450ed2fea8fcdefcc9a663f78bab962b0065cd1d\",\n+                \"utxosSpent\": [\n+                    {\n+                        \"scriptPubKey\": \"512053a1f6e454df1aa2776a2814a721372d6258050de330b3c6d10ee8f4e0dda343\",\n+                        \"amountSats\": 420000000\n+                    },\n+                    {\n+                        \"scriptPubKey\": \"5120147c9c57132f6e7ecddba9800bb0c4449251c92a1e60371ee77557b6620f3ea3\",\n+                        \"amountSats\": 462000000\n+                    },\n+                    {\n+                        \"scriptPubKey\": \"76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\",\n+                        \"amountSats\": 294000000\n+                    },\n+                    {\n+                        \"scriptPubKey\": \"5120e4d810fd50586274face62b8a807eb9719cef49c04177cc6b76a9a4251d5450e\",\n+                        \"amountSats\": 504000000\n+                    },\n+                    {\n+                        \"scriptPubKey\": \"512091b64d5324723a985170e4dc5a0f84c041804f2cd12660fa5dec09fc21783605\",\n+                        \"amountSats\": 630000000\n+                    },\n+                    {\n+                        \"scriptPubKey\": \"00147dd65592d0ab2fe0d0257d571abf032cd9db93dc\",\n+                        \"amountSats\": 378000000\n+                    },\n+                    {\n+                        \"scriptPubKey\": \"512075169f4001aa68f15bbed28b218df1d0a62cbbcf1188c6665110c293c907b831\",\n+                        \"amountSats\": 672000000\n+                    },\n+                    {\n+                        \"scriptPubKey\": \"5120712447206d7a5238acc7ff53fbe94a3b64539ad291c7cdbc490b7577e4b17df5\",\n+                        \"amountSats\": 546000000\n+                    },\n+                    {\n+                        \"scriptPubKey\": \"512077e30a5522dd9f894c3f8b8bd4c4b2cf82ca7da8a3ea6a239655c39c050ab220\",\n+                        \"amountSats\": 588000000\n+                    }\n+                ]\n+            },\n+            \"intermediary\": {\n+                \"hashAmounts\": \"58a6964a4f5f8f0b642ded0a8a553be7622a719da71d1f5befcefcdee8e0fde6\",\n+                \"hashOutputs\": \"a2e6dab7c1f0dcd297c8d61647fd17d821541ea69c3cc37dcbad7f90d4eb4bc5\",\n+                \"hashPrevouts\": \"e3b33bb4ef3a52ad1fffb555c0d82828eb22737036eaeb02a235d82b909c4c3f\",\n+                \"hashScriptPubkeys\": \"23ad0f61ad2bca5ba6a7693f50fce988e17c3780bf2b1e720cfbb38fbdd52e21\",\n+                \"hashSequences\": \"18959c7221ab5ce9e26c3cd67b22c24f8baa54bac281d8e6b05e400e6c3a957e\"\n+            },\n+            \"inputSpending\": [\n+                {\n+                    \"given\": {\n+                        \"txinIndex\": 0,\n+                        \"internalPrivkey\": \"6b973d88838f27366ed61c9ad6367663045cb456e28335c109e30717ae0c6baa\",\n+                        \"merkleRoot\": null,\n+                        \"hashType\": 3\n+                    },\n+                    \"intermediary\": {\n+                        \"internalPubkey\": \"d6889cb081036e0faefa3a35157ad71086b123b2b144b649798b494c300a961d\",\n+                        \"tweak\": \"b86e7be8f39bab32a6f2c0443abbc210f0edac0e2c53d501b36b64437d9c6c70\",\n+                        \"tweakedPrivkey\": \"2405b971772ad26915c8dcdf10f238753a9b837e5f8e6a86fd7c0cce5b7296d9\",\n+                        \"sigMsg\": \"0003020000000065cd1de3b33bb4ef3a52ad1fffb555c0d82828eb22737036eaeb02a235d82b909c4c3f58a6964a4f5f8f0b642ded0a8a553be7622a719da71d1f5befcefcdee8e0fde623ad0f61ad2bca5ba6a7693f50fce988e17c3780bf2b1e720cfbb38fbdd52e2118959c7221ab5ce9e26c3cd67b22c24f8baa54bac281d8e6b05e400e6c3a957e0000000000d0418f0e9a36245b9a50ec87f8bf5be5bcae434337b87139c3a5b1f56e33cba0\",\n+                        \"precomputedUsed\": [\n+                            \"hashAmounts\",\n+                            \"hashPrevouts\",\n+                            \"hashScriptPubkeys\",\n+                            \"hashSequences\"\n+                        ],\n+                        \"sigHash\": \"2514a6272f85cfa0f45eb907fcb0d121b808ed37c6ea160a5a9046ed5526d555\"\n+                    },\n+                    \"expected\": {\n+                        \"witness\": [\n+                            \"ed7c1647cb97379e76892be0cacff57ec4a7102aa24296ca39af7541246d8ff14d38958d4cc1e2e478e4d4a764bbfd835b16d4e314b72937b29833060b87276c03\"\n+                        ]\n+                    }\n+                },\n+                {\n+                    \"given\": {\n+                        \"txinIndex\": 1,\n+                        \"internalPrivkey\": \"1e4da49f6aaf4e5cd175fe08a32bb5cb4863d963921255f33d3bc31e1343907f\",\n+                        \"merkleRoot\": \"5b75adecf53548f3ec6ad7d78383bf84cc57b55a3127c72b9a2481752dd88b21\",\n+                        \"hashType\": 131\n+                    },\n+                    \"intermediary\": {\n+                        \"internalPubkey\": \"187791b6f712a8ea41c8ecdd0ee77fab3e85263b37e1ec18a3651926b3a6cf27\",\n+                        \"tweak\": \"cbd8679ba636c1110ea247542cfbd964131a6be84f873f7f3b62a777528ed001\",\n+                        \"tweakedPrivkey\": \"ea260c3b10e60f6de018455cd0278f2f5b7e454be1999572789e6a9565d26080\",\n+                        \"sigMsg\": \"0083020000000065cd1d00d7b7cab57b1393ace2d064f4d4a2cb8af6def61273e127517d44759b6dafdd9900000000808f891b00000000225120147c9c57132f6e7ecddba9800bb0c4449251c92a1e60371ee77557b6620f3ea3ffffffffffcef8fb4ca7efc5433f591ecfc57391811ce1e186a3793024def5c884cba51d\",\n+                        \"precomputedUsed\": [],\n+                        \"sigHash\": \"325a644af47e8a5a2591cda0ab0723978537318f10e6a63d4eed783b96a71a4d\"\n+                    },\n+                    \"expected\": {\n+                        \"witness\": [\n+                            \"052aedffc554b41f52b521071793a6b88d6dbca9dba94cf34c83696de0c1ec35ca9c5ed4ab28059bd606a4f3a657eec0bb96661d42921b5f50a95ad33675b54f83\"\n+                        ]\n+                    }\n+                },\n+                {\n+                    \"given\": {\n+                        \"txinIndex\": 3,\n+                        \"internalPrivkey\": \"d3c7af07da2d54f7a7735d3d0fc4f0a73164db638b2f2f7c43f711f6d4aa7e64\",\n+                        \"merkleRoot\": \"c525714a7f49c28aedbbba78c005931a81c234b2f6c99a73e4d06082adc8bf2b\",\n+                        \"hashType\": 1\n+                    },\n+                    \"intermediary\": {\n+                        \"internalPubkey\": \"93478e9488f956df2396be2ce6c5cced75f900dfa18e7dabd2428aae78451820\",\n+                        \"tweak\": \"6af9e28dbf9d6aaf027696e2598a5b3d056f5fd2355a7fd5a37a0e5008132d30\",\n+                        \"tweakedPrivkey\": \"97323385e57015b75b0339a549c56a948eb961555973f0951f555ae6039ef00d\",\n+                        \"sigMsg\": \"0001020000000065cd1de3b33bb4ef3a52ad1fffb555c0d82828eb22737036eaeb02a235d82b909c4c3f58a6964a4f5f8f0b642ded0a8a553be7622a719da71d1f5befcefcdee8e0fde623ad0f61ad2bca5ba6a7693f50fce988e17c3780bf2b1e720cfbb38fbdd52e2118959c7221ab5ce9e26c3cd67b22c24f8baa54bac281d8e6b05e400e6c3a957ea2e6dab7c1f0dcd297c8d61647fd17d821541ea69c3cc37dcbad7f90d4eb4bc50003000000\",\n+                        \"precomputedUsed\": [\n+                            \"hashAmounts\",\n+                            \"hashOutputs\",\n+                            \"hashPrevouts\",\n+                            \"hashScriptPubkeys\",\n+                            \"hashSequences\"\n+                        ],\n+                        \"sigHash\": \"bf013ea93474aa67815b1b6cc441d23b64fa310911d991e713cd34c7f5d46669\"\n+                    },\n+                    \"expected\": {\n+                        \"witness\": [\n+                            \"ff45f742a876139946a149ab4d9185574b98dc919d2eb6754f8abaa59d18b025637a3aa043b91817739554f4ed2026cf8022dbd83e351ce1fabc272841d2510a01\"\n+                        ]\n+                    }\n+                },\n+                {\n+                    \"given\": {\n+                        \"txinIndex\": 4,\n+                        \"internalPrivkey\": \"f36bb07a11e469ce941d16b63b11b9b9120a84d9d87cff2c84a8d4affb438f4e\",\n+                        \"merkleRoot\": \"ccbd66c6f7e8fdab47b3a486f59d28262be857f30d4773f2d5ea47f7761ce0e2\",\n+                        \"hashType\": 0\n+                    },\n+                    \"intermediary\": {\n+                        \"internalPubkey\": \"e0dfe2300b0dd746a3f8674dfd4525623639042569d829c7f0eed9602d263e6f\",\n+                        \"tweak\": \"b57bfa183d28eeb6ad688ddaabb265b4a41fbf68e5fed2c72c74de70d5a786f4\",\n+                        \"tweakedPrivkey\": \"a8e7aa924f0d58854185a490e6c41f6efb7b675c0f3331b7f14b549400b4d501\",\n+                        \"sigMsg\": \"0000020000000065cd1de3b33bb4ef3a52ad1fffb555c0d82828eb22737036eaeb02a235d82b909c4c3f58a6964a4f5f8f0b642ded0a8a553be7622a719da71d1f5befcefcdee8e0fde623ad0f61ad2bca5ba6a7693f50fce988e17c3780bf2b1e720cfbb38fbdd52e2118959c7221ab5ce9e26c3cd67b22c24f8baa54bac281d8e6b05e400e6c3a957ea2e6dab7c1f0dcd297c8d61647fd17d821541ea69c3cc37dcbad7f90d4eb4bc50004000000\",\n+                        \"precomputedUsed\": [\n+                            \"hashAmounts\",\n+                            \"hashOutputs\",\n+                            \"hashPrevouts\",\n+                            \"hashScriptPubkeys\",\n+                            \"hashSequences\"\n+                        ],\n+                        \"sigHash\": \"4f900a0bae3f1446fd48490c2958b5a023228f01661cda3496a11da502a7f7ef\"\n+                    },\n+                    \"expected\": {\n+                        \"witness\": [\n+                            \"b4010dd48a617db09926f729e79c33ae0b4e94b79f04a1ae93ede6315eb3669de185a17d2b0ac9ee09fd4c64b678a0b61a0a86fa888a273c8511be83bfd6810f\"\n+                        ]\n+                    }\n+                },\n+                {\n+                    \"given\": {\n+                        \"txinIndex\": 6,\n+                        \"internalPrivkey\": \"415cfe9c15d9cea27d8104d5517c06e9de48e2f986b695e4f5ffebf230e725d8\",\n+                        \"merkleRoot\": \"2f6b2c5397b6d68ca18e09a3f05161668ffe93a988582d55c6f07bd5b3329def\",\n+                        \"hashType\": 2\n+                    },\n+                    \"intermediary\": {\n+                        \"internalPubkey\": \"55adf4e8967fbd2e29f20ac896e60c3b0f1d5b0efa9d34941b5958c7b0a0312d\",\n+                        \"tweak\": \"6579138e7976dc13b6a92f7bfd5a2fc7684f5ea42419d43368301470f3b74ed9\",\n+                        \"tweakedPrivkey\": \"241c14f2639d0d7139282aa6abde28dd8a067baa9d633e4e7230287ec2d02901\",\n+                        \"sigMsg\": \"0002020000000065cd1de3b33bb4ef3a52ad1fffb555c0d82828eb22737036eaeb02a235d82b909c4c3f58a6964a4f5f8f0b642ded0a8a553be7622a719da71d1f5befcefcdee8e0fde623ad0f61ad2bca5ba6a7693f50fce988e17c3780bf2b1e720cfbb38fbdd52e2118959c7221ab5ce9e26c3cd67b22c24f8baa54bac281d8e6b05e400e6c3a957e0006000000\",\n+                        \"precomputedUsed\": [\n+                            \"hashAmounts\",\n+                            \"hashPrevouts\",\n+                            \"hashScriptPubkeys\",\n+                            \"hashSequences\"\n+                        ],\n+                        \"sigHash\": \"15f25c298eb5cdc7eb1d638dd2d45c97c4c59dcaec6679cfc16ad84f30876b85\"\n+                    },\n+                    \"expected\": {\n+                        \"witness\": [\n+                            \"a3785919a2ce3c4ce26f298c3d51619bc474ae24014bcdd31328cd8cfbab2eff3395fa0a16fe5f486d12f22a9cedded5ae74feb4bbe5351346508c5405bcfee002\"\n+                        ]\n+                    }\n+                },\n+                {\n+                    \"given\": {\n+                        \"txinIndex\": 7,\n+                        \"internalPrivkey\": \"c7b0e81f0a9a0b0499e112279d718cca98e79a12e2f137c72ae5b213aad0d103\",\n+                        \"merkleRoot\": \"6c2dc106ab816b73f9d07e3cd1ef2c8c1256f519748e0813e4edd2405d277bef\",\n+                        \"hashType\": 130\n+                    },\n+                    \"intermediary\": {\n+                        \"internalPubkey\": \"ee4fe085983462a184015d1f782d6a5f8b9c2b60130aff050ce221ecf3786592\",\n+                        \"tweak\": \"9e0517edc8259bb3359255400b23ca9507f2a91cd1e4250ba068b4eafceba4a9\",\n+                        \"tweakedPrivkey\": \"65b6000cd2bfa6b7cf736767a8955760e62b6649058cbc970b7c0871d786346b\",\n+                        \"sigMsg\": \"0082020000000065cd1d00e9aa6b8e6c9de67619e6a3924ae25696bb7b694bb677a632a74ef7eadfd4eabf00000000804c8b2000000000225120712447206d7a5238acc7ff53fbe94a3b64539ad291c7cdbc490b7577e4b17df5ffffffff\",\n+                        \"precomputedUsed\": [],\n+                        \"sigHash\": \"cd292de50313804dabe4685e83f923d2969577191a3e1d2882220dca88cbeb10\"\n+                    },\n+                    \"expected\": {\n+                        \"witness\": [\n+                            \"ea0c6ba90763c2d3a296ad82ba45881abb4f426b3f87af162dd24d5109edc1cdd11915095ba47c3a9963dc1e6c432939872bc49212fe34c632cd3ab9fed429c482\"\n+                        ]\n+                    }\n+                },\n+                {\n+                    \"given\": {\n+                        \"txinIndex\": 8,\n+                        \"internalPrivkey\": \"77863416be0d0665e517e1c375fd6f75839544eca553675ef7fdf4949518ebaa\",\n+                        \"merkleRoot\": \"ab179431c28d3b68fb798957faf5497d69c883c6fb1e1cd9f81483d87bac90cc\",\n+                        \"hashType\": 129\n+                    },\n+                    \"intermediary\": {\n+                        \"internalPubkey\": \"f9f400803e683727b14f463836e1e78e1c64417638aa066919291a225f0e8dd8\",\n+                        \"tweak\": \"639f0281b7ac49e742cd25b7f188657626da1ad169209078e2761cefd91fd65e\",\n+                        \"tweakedPrivkey\": \"ec18ce6af99f43815db543f47b8af5ff5df3b2cb7315c955aa4a86e8143d2bf5\",\n+                        \"sigMsg\": \"0081020000000065cd1da2e6dab7c1f0dcd297c8d61647fd17d821541ea69c3cc37dcbad7f90d4eb4bc500a778eb6a263dc090464cd125c466b5a99667720b1c110468831d058aa1b82af101000000002b0c230000000022512077e30a5522dd9f894c3f8b8bd4c4b2cf82ca7da8a3ea6a239655c39c050ab220ffffffff\",\n+                        \"precomputedUsed\": [\n+                            \"hashOutputs\"\n+                        ],\n+                        \"sigHash\": \"cccb739eca6c13a8a89e6e5cd317ffe55669bbda23f2fd37b0f18755e008edd2\"\n+                    },\n+                    \"expected\": {\n+                        \"witness\": [\n+                            \"bbc9584a11074e83bc8c6759ec55401f0ae7b03ef290c3139814f545b58a9f8127258000874f44bc46db7646322107d4d86aec8e73b8719a61fff761d75b5dd981\"\n+                        ]\n+                    }\n+                }\n+            ],\n+            \"auxiliary\": {\n+                \"fullySignedTx\": \"020000000001097de20cbff686da83a54981d2b9bab3586f4ca7e48f57f5b55963115f3b334e9c010000000000000000d7b7cab57b1393ace2d064f4d4a2cb8af6def61273e127517d44759b6dafdd990000000000fffffffff8e1f583384333689228c5d28eac13366be082dc57441760d957275419a41842000000006b4830450221008f3b8f8f0537c420654d2283673a761b7ee2ea3c130753103e08ce79201cf32a022079e7ab904a1980ef1c5890b648c8783f4d10103dd62f740d13daa79e298d50c201210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798fffffffff0689180aa63b30cb162a73c6d2a38b7eeda2a83ece74310fda0843ad604853b0100000000feffffffaa5202bdf6d8ccd2ee0f0202afbbb7461d9264a25e5bfd3c5a52ee1239e0ba6c0000000000feffffff956149bdc66faa968eb2be2d2faa29718acbfe3941215893a2a3446d32acd050000000000000000000e664b9773b88c09c32cb70a2a3e4da0ced63b7ba3b22f848531bbb1d5d5f4c94010000000000000000e9aa6b8e6c9de67619e6a3924ae25696bb7b694bb677a632a74ef7eadfd4eabf0000000000ffffffffa778eb6a263dc090464cd125c466b5a99667720b1c110468831d058aa1b82af10100000000ffffffff0200ca9a3b000000001976a91406afd46bcdfd22ef94ac122aa11f241244a37ecc88ac807840cb0000000020ac9a87f5594be208f8532db38cff670c450ed2fea8fcdefcc9a663f78bab962b0141ed7c1647cb97379e76892be0cacff57ec4a7102aa24296ca39af7541246d8ff14d38958d4cc1e2e478e4d4a764bbfd835b16d4e314b72937b29833060b87276c030141052aedffc554b41f52b521071793a6b88d6dbca9dba94cf34c83696de0c1ec35ca9c5ed4ab28059bd606a4f3a657eec0bb96661d42921b5f50a95ad33675b54f83000141ff45f742a876139946a149ab4d9185574b98dc919d2eb6754f8abaa59d18b025637a3aa043b91817739554f4ed2026cf8022dbd83e351ce1fabc272841d2510a010140b4010dd48a617db09926f729e79c33ae0b4e94b79f04a1ae93ede6315eb3669de185a17d2b0ac9ee09fd4c64b678a0b61a0a86fa888a273c8511be83bfd6810f0247304402202b795e4de72646d76eab3f0ab27dfa30b810e856ff3a46c9a702df53bb0d8cc302203ccc4d822edab5f35caddb10af1be93583526ccfbade4b4ead350781e2f8adcd012102f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f90141a3785919a2ce3c4ce26f298c3d51619bc474ae24014bcdd31328cd8cfbab2eff3395fa0a16fe5f486d12f22a9cedded5ae74feb4bbe5351346508c5405bcfee0020141ea0c6ba90763c2d3a296ad82ba45881abb4f426b3f87af162dd24d5109edc1cdd11915095ba47c3a9963dc1e6c432939872bc49212fe34c632cd3ab9fed429c4820141bbc9584a11074e83bc8c6759ec55401f0ae7b03ef290c3139814f545b58a9f8127258000874f44bc46db7646322107d4d86aec8e73b8719a61fff761d75b5dd9810065cd1d\"\n+            }\n+        }\n+    ]\n+}"
      },
      {
        "sha": "5a5cc6ab2926c250715b6689510e78962caffe6d",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=f1c33ee4ac1056289f2e67b75755388549ada4ca",
        "patch": "@@ -2,6 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <test/data/bip341_wallet_vectors.json.h>\n+\n #include <key.h>\n #include <key_io.h>\n #include <script/script.h>\n@@ -12,6 +14,8 @@\n \n #include <boost/test/unit_test.hpp>\n \n+#include <univalue.h>\n+\n \n BOOST_FIXTURE_TEST_SUITE(script_standard_tests, BasicTestingSetup)\n \n@@ -385,4 +389,46 @@ BOOST_AUTO_TEST_CASE(script_standard_taproot_builder)\n     BOOST_CHECK_EQUAL(EncodeDestination(builder.GetOutput()), \"bc1pj6gaw944fy0xpmzzu45ugqde4rz7mqj5kj0tg8kmr5f0pjq8vnaqgynnge\");\n }\n \n+BOOST_AUTO_TEST_CASE(bip341_spk_test_vectors)\n+{\n+    using control_set = decltype(TaprootSpendData::scripts)::mapped_type;\n+\n+    UniValue tests;\n+    tests.read((const char*)json_tests::bip341_wallet_vectors, sizeof(json_tests::bip341_wallet_vectors));\n+\n+    const auto& vectors = tests[\"scriptPubKey\"];\n+\n+    for (const auto& vec : vectors.getValues()) {\n+        TaprootBuilder spktest;\n+        std::map<std::pair<CScript, int>, int> scriptposes;\n+        std::function<void (const UniValue&, int)> parse_tree = [&](const UniValue& node, int depth) {\n+            if (node.isNull()) return;\n+            if (node.isObject()) {\n+                auto script_bytes = ParseHex(node[\"script\"].get_str());\n+                CScript script(script_bytes.begin(), script_bytes.end());\n+                int idx = node[\"id\"].get_int();\n+                int leaf_version = node[\"leafVersion\"].get_int();\n+                scriptposes[{script, leaf_version}] = idx;\n+                spktest.Add(depth, script, leaf_version);\n+            } else {\n+                parse_tree(node[0], depth + 1);\n+                parse_tree(node[1], depth + 1);\n+            }\n+        };\n+        parse_tree(vec[\"given\"][\"scriptTree\"], 0);\n+        spktest.Finalize(XOnlyPubKey(ParseHex(vec[\"given\"][\"internalPubkey\"].get_str())));\n+        BOOST_CHECK_EQUAL(HexStr(GetScriptForDestination(spktest.GetOutput())), vec[\"expected\"][\"scriptPubKey\"].get_str());\n+        BOOST_CHECK_EQUAL(EncodeDestination(spktest.GetOutput()), vec[\"expected\"][\"bip350Address\"].get_str());\n+        auto spend_data = spktest.GetSpendData();\n+        BOOST_CHECK_EQUAL(vec[\"intermediary\"][\"merkleRoot\"].isNull(), spend_data.merkle_root.IsNull());\n+        if (!spend_data.merkle_root.IsNull()) {\n+            BOOST_CHECK_EQUAL(vec[\"intermediary\"][\"merkleRoot\"].get_str(), HexStr(spend_data.merkle_root));\n+        }\n+        BOOST_CHECK_EQUAL(spend_data.scripts.size(), scriptposes.size());\n+        for (const auto& scriptpos : scriptposes) {\n+            BOOST_CHECK(spend_data.scripts[scriptpos.first] == control_set{ParseHex(vec[\"expected\"][\"scriptPathControlBlocks\"][scriptpos.second].get_str())});\n+        }\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "a89eab68e93ed4b2934cc736ce8a8981f6c7bc3d",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1c33ee4ac1056289f2e67b75755388549ada4ca/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f1c33ee4ac1056289f2e67b75755388549ada4ca",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <test/data/script_tests.json.h>\n+#include <test/data/bip341_wallet_vectors.json.h>\n \n #include <core_io.h>\n #include <fs.h>\n@@ -1743,4 +1744,79 @@ BOOST_AUTO_TEST_CASE(script_assets_test)\n     file.close();\n }\n \n+BOOST_AUTO_TEST_CASE(bip341_keypath_test_vectors)\n+{\n+    UniValue tests;\n+    tests.read((const char*)json_tests::bip341_wallet_vectors, sizeof(json_tests::bip341_wallet_vectors));\n+\n+    const auto& vectors = tests[\"keyPathSpending\"];\n+\n+    for (const auto& vec : vectors.getValues()) {\n+        auto txhex = ParseHex(vec[\"given\"][\"rawUnsignedTx\"].get_str());\n+        CMutableTransaction tx;\n+        VectorReader(SER_NETWORK, PROTOCOL_VERSION, txhex, 0) >> tx;\n+        std::vector<CTxOut> utxos;\n+        for (const auto& utxo_spent : vec[\"given\"][\"utxosSpent\"].getValues()) {\n+            auto script_bytes = ParseHex(utxo_spent[\"scriptPubKey\"].get_str());\n+            CScript script{script_bytes.begin(), script_bytes.end()};\n+            CAmount amount{utxo_spent[\"amountSats\"].get_int()};\n+            utxos.emplace_back(amount, script);\n+        }\n+\n+        PrecomputedTransactionData txdata;\n+        txdata.Init(tx, std::vector<CTxOut>{utxos}, true);\n+\n+        BOOST_CHECK(txdata.m_bip341_taproot_ready);\n+        BOOST_CHECK_EQUAL(HexStr(txdata.m_spent_amounts_single_hash), vec[\"intermediary\"][\"hashAmounts\"].get_str());\n+        BOOST_CHECK_EQUAL(HexStr(txdata.m_outputs_single_hash), vec[\"intermediary\"][\"hashOutputs\"].get_str());\n+        BOOST_CHECK_EQUAL(HexStr(txdata.m_prevouts_single_hash), vec[\"intermediary\"][\"hashPrevouts\"].get_str());\n+        BOOST_CHECK_EQUAL(HexStr(txdata.m_spent_scripts_single_hash), vec[\"intermediary\"][\"hashScriptPubkeys\"].get_str());\n+        BOOST_CHECK_EQUAL(HexStr(txdata.m_sequences_single_hash), vec[\"intermediary\"][\"hashSequences\"].get_str());\n+\n+        for (const auto& input : vec[\"inputSpending\"].getValues()) {\n+            int txinpos = input[\"given\"][\"txinIndex\"].get_int();\n+            int hashtype = input[\"given\"][\"hashType\"].get_int();\n+\n+            // Load key.\n+            auto privkey = ParseHex(input[\"given\"][\"internalPrivkey\"].get_str());\n+            CKey key;\n+            key.Set(privkey.begin(), privkey.end(), true);\n+\n+            // Load Merkle root.\n+            uint256 merkle_root;\n+            if (!input[\"given\"][\"merkleRoot\"].isNull()) {\n+                merkle_root = uint256{ParseHex(input[\"given\"][\"merkleRoot\"].get_str())};\n+            }\n+\n+            // Compute and verify (internal) public key.\n+            XOnlyPubKey pubkey{key.GetPubKey()};\n+            BOOST_CHECK_EQUAL(HexStr(pubkey), input[\"intermediary\"][\"internalPubkey\"].get_str());\n+\n+            // Sign and verify signature.\n+            FlatSigningProvider provider;\n+            provider.keys[key.GetPubKey().GetID()] = key;\n+            MutableTransactionSignatureCreator creator(&tx, txinpos, utxos[txinpos].nValue, &txdata, hashtype);\n+            std::vector<unsigned char> signature;\n+            BOOST_CHECK(creator.CreateSchnorrSig(provider, signature, pubkey, nullptr, &merkle_root, SigVersion::TAPROOT));\n+            BOOST_CHECK_EQUAL(HexStr(signature), input[\"expected\"][\"witness\"][0].get_str());\n+\n+            // We can't observe the tweak used inside the signing logic, so verify by recomputing it.\n+            BOOST_CHECK_EQUAL(HexStr(pubkey.ComputeTapTweakHash(merkle_root.IsNull() ? nullptr : &merkle_root)), input[\"intermediary\"][\"tweak\"].get_str());\n+\n+            // We can't observe the sighash used inside the signing logic, so verify by recomputing it.\n+            ScriptExecutionData sed;\n+            sed.m_annex_init = true;\n+            sed.m_annex_present = false;\n+            uint256 sighash;\n+            BOOST_CHECK(SignatureHashSchnorr(sighash, sed, tx, txinpos, hashtype, SigVersion::TAPROOT, txdata, MissingDataBehavior::FAIL));\n+            BOOST_CHECK_EQUAL(HexStr(sighash), input[\"intermediary\"][\"sigHash\"].get_str());\n+\n+            // To verify the sigmsg, hash the expected sigmsg, and compare it with the (expected) sighash.\n+            BOOST_CHECK_EQUAL(HexStr((CHashWriter(HASHER_TAPSIGHASH) << MakeSpan(ParseHex(input[\"intermediary\"][\"sigMsg\"].get_str()))).GetSHA256()), input[\"intermediary\"][\"sigHash\"].get_str());\n+        }\n+\n+    }\n+\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]