DrahtBot,2021-10-30 22:37:36,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/23394#issuecomment-955602994,955602994,
sipa,2021-11-02 22:34:40,"I'm going to convert this to construct tests in JSON format rather than Mediawiki, and also actually run it in that form directly.",https://github.com/bitcoin/bitcoin/pull/23394#issuecomment-958298427,958298427,
sipa,2021-11-07 20:47:45,Updated to address https://github.com/bitcoin/bips/pull/1225#pullrequestreview-799478503,https://github.com/bitcoin/bitcoin/pull/23394#issuecomment-962678071,962678071,
sipa,2021-11-10 22:38:29,Rebased.,https://github.com/bitcoin/bitcoin/pull/23394#issuecomment-965809935,965809935,
sipa,2021-11-12 17:09:47,Updated to address https://github.com/bitcoin/bips/pull/1225#discussion_r747460936.,https://github.com/bitcoin/bitcoin/pull/23394#issuecomment-967276505,967276505,
sipa,2021-11-13 00:03:52,Corresponding BIP change was merged: https://github.com/bitcoin/bips/pull/1225,https://github.com/bitcoin/bitcoin/pull/23394#issuecomment-967736162,967736162,
laanwj,2021-11-15 18:38:19,"Code review ACK f1c33ee4ac1056289f2e67b75755388549ada4ca\nAlso checked that `src/test/data/bip341_wallet_vectors.json` matches the file in bip341.",https://github.com/bitcoin/bitcoin/pull/23394#issuecomment-969203450,969203450,
laanwj,2021-11-15 20:36:33,"Closing: PR was merged, github didn't detect it",https://github.com/bitcoin/bitcoin/pull/23394#issuecomment-969298828,969298828,
junderw,2021-11-02 02:57:50,Why was this added? It isn't used anywhere in the changes.,https://github.com/bitcoin/bitcoin/pull/23394#discussion_r740687260,740687260,test/functional/test_framework/key.py
sipa,2021-11-02 03:55:23,"It is, indirectly through the ""deterministic"" flag in the feature_taproot's context, which on its turn is used in the test vector scenario (to make sure the fully signed transaction is exactly the same every run).",https://github.com/bitcoin/bitcoin/pull/23394#discussion_r740703197,740703197,test/functional/test_framework/key.py
junderw,2021-11-02 04:47:15,My mistake. I see it now. Thanks.,https://github.com/bitcoin/bitcoin/pull/23394#discussion_r740717596,740717596,test/functional/test_framework/key.py
sanket1729,2021-11-06 15:57:53,It just happens that pubs[99][0] &0xfe and pubs[99][1] & 0xfe are not colliding with annex tag (0x50). Maybe add an assert along with the other asserts that the above is not the case?,https://github.com/bitcoin/bitcoin/pull/23394#discussion_r744139885,744139885,test/functional/feature_taproot.py
sipa,2021-11-07 17:27:02,"Fixed, by restricting the selection to the set of leaf versions recommended in the BIP.",https://github.com/bitcoin/bitcoin/pull/23394#discussion_r744290318,744290318,test/functional/feature_taproot.py
laanwj,2021-11-08 15:47:39,"Instead of changing the meaning of `aux==nullptr` here, what about:\n\n- Remove the default arguments from `CKey::SignSchnorr` (they're unused)\n- Disallow nullptr by changing the argument to a `const uint256& aux`\n- Pass zero in from the caller if it wants to use zero\n\nThis seems more explicit and clear to me? (The behavior is not documented in the doc comment, in any case, right now)",https://github.com/bitcoin/bitcoin/pull/23394#discussion_r744853695,744853695,src/key.cpp
sipa,2021-11-08 16:56:19,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/23394#discussion_r744917153,744917153,src/key.cpp
