promag,2021-03-12 10:45:10,"Hey @kiminuo, can you amend the commit and remove my mention? Keep in mind that mentions in commits lead to notifications. Ty.",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-797405001,797405001,
kiminuo,2021-03-12 10:46:35,"> Hey @kiminuo, can you amend the commit and remove my mention? Keep in mind that mentions in commits lead to notifications. Ty.\n\nYes, sorry for that.",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-797405777,797405777,
jonasschnelli,2021-03-12 19:34:03,Thanks for picking this up.,https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-797707560,797707560,
DrahtBot,2021-03-16 11:09:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22891](https://github.com/bitcoin/bitcoin/pull/22891) (Add fee rate distribution in -getinfo by prayank23)\n\nIf you con",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-800167374,800167374,
jonatack,2021-03-21 10:31:34,"Concept ACK. For the test commit, maybe a more descriptive title that can be understood on its own.\n",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-803550651,803550651,
kiminuo,2021-03-21 20:23:22,@jonatack Thanks for the superb review! I'm working on incorporating your suggestions.,https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-803653818,803653818,
kiminuo,2021-03-26 09:07:05,"> It would be good if the functional test actually verified that the values are correctly calculated after creating a few txns; ATM it is only really a smoke test that verifies the output structure.\n\nThis is on my TODO list. So I will improve it over coming days.",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-808056236,808056236,
kiminuo,2021-03-29 06:31:14,"> Will re-review after the TODO you mention in [#21422 (comment)](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-808056236).\n\nThank you. I'm slowly getting familiar with Bitcoin's `BitcoinTestFramework`. I'm almost ready to start writing the test. So slow progress, but progress too. I would kind of want to start with `self.setup_clean_chain = True` because I will be more confident ",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-809108278,809108278,
kiminuo,2021-04-14 14:23:53,"> A couple more suggestions. Will re-review after the TODO you mention in [#21422 (comment)](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-808056236).\n\nI have improved the test. I find it much better than before but I still think it should be tested more. What do you think?",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-819558569,819558569,
JeremyRubin,2021-04-14 14:34:05,"Concept ACK!\n\nIt might make sense to have the API be more similar to https://numpy.org/doc/stable/reference/generated/numpy.histogram.html",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-819566377,819566377,
kiminuo,2021-04-14 14:42:54,"> It might make sense to have the API be more similar to https://numpy.org/doc/stable/reference/generated/numpy.histogram.html\n\nThank you for the suggestion, I'll have a look!",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-819572940,819572940,
laanwj,2021-06-03 11:06:32,"This, as merged on master, gives me the following build error with clang 13:\n```\nâ€¦/bitcoin/src/rpc/blockchain.cpp:1666:45: error: non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long') to 'uint32_t' (aka 'unsigned int') in initializer list [-Wc++11-narrowing]\n            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n                ",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-853786199,853786199,
laanwj,2021-06-07 15:35:26,"It builds succesfully now, thanks!",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-856042676,856042676,
luke-jr,2021-06-19 21:47:00,Note: This PR drops the REST support,https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-864467671,864467671,
kiminuo,2021-06-20 08:53:45,"> Note: This PR drops the REST support\n\nI have added a note about this in the PR description. Thanks.",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-864521472,864521472,
prayank23,2021-08-16 06:30:45,"Concept ACK. Tested the PR commits building on master branch.\n\n```\n$ bitcoin-cli getmempoolinfo ""[1,10,20,30]""\n\n  ""loaded"": true,\n  ""size"": 22,\n  ""bytes"": 4472,\n  ""usage"": 31152,\n  ""total_fee"": 0.00096947,\n  ""maxmempool"": 300000000,\n  ""mempoolminfee"": 0.00001000,\n  ""minrelaytxfee"": 0.00001000,\n  ""unbroadcastcount"": 0,\n  ""fee_histogram"": {\n    ""fee_rate_groups"": {\n  ",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-899258623,899258623,
prayank23,2021-11-03 19:30:17,"@kiminuo https://github.com/bitcoin/bitcoin/pull/22891 adds fee rate distribution bars in `-getinfo`. Its on top of this PR. Will be helpful if you could review :)\n\n![image](https://user-images.githubusercontent.com/13405205/140179579-34cd5599-fa09-47c5-a02c-d5e8abf3844b.png)\n\n\nAlso waiting for reviewers in this PR to leave some ACKs or comments to improve so that other projects can also",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-959858353,959858353,
kristapsk,2021-11-12 19:38:43,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-967404182,967404182,
sipa,2021-11-22 16:39:17,"Approach NACK as-is, this will result in distorted numbers. https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-975711424,975711424,
sipa,2021-11-24 21:21:49,"@kiminuo See https://github.com/sipa/bitcoin/commits/202111_mempoolfr for code that gets histogram data using the mining algorithm. Feel free to cherry pick or whatever; if you don't, I may clean it up to make use it after this PR is merged.\n\nNow, it is somewhat slow (currently ~150ms for me for ~12000 mempool transactions, which is only a small fraction of the maximum). If we expect that go t",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-978235017,978235017,
kiminuo,2021-11-25 08:23:04,"@sipa That looks great!\n\nIn my mind, I would attempt to do this:\n\n1. Create a PR with commit https://github.com/sipa/bitcoin/commit/b16d39624a73be7bfad28c7063d21b302646d95f (*Make CFeeRate work with uint64_t sizes*) as it would be nice to have it for this PR to avoid casting.\n2. Attempt to make this PR merge-worthy with the [approach (1)](https://github.com/bitcoin/bitcoin/pull/21422#dis",https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-978941401,978941401,
jonatack,2021-03-21 10:45:32,Use a named cast (and can be const),https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258602,598258602,src/rpc/blockchain.cpp
jonatack,2021-03-21 10:46:21,"```suggestion\n            for (int i = limits.size() - 1; i >= 0; --i) {\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258707,598258707,src/rpc/blockchain.cpp
jonatack,2021-03-21 10:46:47,"```suggestion\n                    ++count[i];\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258754,598258754,src/rpc/blockchain.cpp
jonatack,2021-03-21 10:49:09,"Are `size`, `asize` and `dsize` guaranteed to be non-zero? Can they be `const`?",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259105,598259105,src/rpc/blockchain.cpp
jonatack,2021-03-21 10:50:32,"```suggestion\n        for (size_t i = 0; i < limits.size(); ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259294,598259294,src/rpc/blockchain.cpp
jonatack,2021-03-21 10:51:28,"```suggestion\n        for (unsigned int i = 0; i < feelimits_univalue.size(); ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259362,598259362,src/rpc/blockchain.cpp
jonatack,2021-03-21 10:52:04,Can you add an example?,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259414,598259414,src/rpc/blockchain.cpp
jonatack,2021-03-21 10:58:31,"The decimal stdlib import should be before the framework imports per PEP8, separated by a blank line ",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598260229,598260229,test/functional/mempool_fee_histogram.py
jonatack,2021-03-21 11:00:31,"The new test file has incorrect permissions:\n```\n-rwxr-xr-x 1   5133 Mar 17 15:30 mempool_expiry.py*\n-rw-r--r-- 1   1716 Mar 21 11:56 mempool_fee_histogram.py\n-rwxr-xr-x 1   3494 Mar  1 11:53 mempool_limit.py*\n```\nI had to run `sudo chmod 755 test/functional/mempool_fee_histogram.py` to be able to call the test directly, e.g. with `test/functional/mempool_fee_histogram.py`",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598260474,598260474,test/functional/test_runner.py
jonatack,2021-03-21 11:06:03,"Is the argument a string or a JSON array? (if an array, I think there needs to be another line that specifies the element type, e.g. number, string, or amount, probably the latter).",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598261128,598261128,src/rpc/blockchain.cpp
kiminuo,2021-03-21 21:46:28,"@jonatack This is a part of the original PR I need to research more.\n\nDo you possibly have a tip where to learn how to properly compute `feeperbyte` value for a transaction? Or possibly who would know that? \n\nAnyway, I'm slowly skimming Bitcoin Core codebase so maybe I'll be lucky :-)",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598342760,598342760,src/rpc/blockchain.cpp
kiminuo,2021-03-22 07:20:55,"Addressed, thanks!",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472515,598472515,src/rpc/blockchain.cpp
kiminuo,2021-03-22 07:21:09,"Addressed, thanks!",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472588,598472588,src/rpc/blockchain.cpp
kiminuo,2021-03-22 07:21:16,"Addressed, thanks!",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472646,598472646,src/rpc/blockchain.cpp
kiminuo,2021-03-22 07:21:21,"Addressed, thanks!",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472692,598472692,src/rpc/blockchain.cpp
kiminuo,2021-03-22 07:23:09,"Hopefully, it's correct now. ",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598473434,598473434,test/functional/mempool_fee_histogram.py
kiminuo,2021-03-22 07:23:44,I fixed this. Thanks!,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598473687,598473687,test/functional/test_runner.py
kiminuo,2021-03-23 17:38:39,The argument is a JSON array of amounts (fees). I have fixed it.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599793002,599793002,src/rpc/blockchain.cpp
kiminuo,2021-03-23 18:31:07,I added an example.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599832829,599832829,src/rpc/blockchain.cpp
jonatack,2021-03-23 19:16:45,"For computing a fee rate per byte, have a look in `src/policy/feerate.{h, cpp}`. Here's a proposed diff (using the current code) to do explicit casts rather than implicit conversions and narrowing. The size denominators are calling `GetTxSize()`, which should be non-zero, but you can `CHECK_NONFATAL` on these. That said, you may be right that it can be done properly/better, as you asked, by using ",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599863046,599863046,src/rpc/blockchain.cpp
jonatack,2021-03-23 19:18:20,"(note, `CAmount` is `int64_t`, see `src/amount.h`)",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599864037,599864037,src/rpc/blockchain.cpp
jonatack,2021-03-23 19:25:16,"> The argument is a JSON array of amounts (fees). I have fixed it.\n\nYes, seems better now\n```\nArguments:\n1. fee_histogram    (json array, optional) Fee amounts\n     [\n       fee,         (numeric or string, required) A fee amount\n       ...\n     ]\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599868315,599868315,src/rpc/blockchain.cpp
jonatack,2021-03-23 19:33:41,"New examples look good, thanks.\n```\n> bitcoin-cli getmempoolinfo \n> bitcoin-cli getmempoolinfo [""0.00000001"",""0.00000010"",""0.00000100"",""0.00000200"",""0.00000400"",""0.00000800""]\n> curl --user myusername --data-binary '{""jsonrpc"": ""1.0"", ""id"": ""curltest"", ""method"": ""getmempoolinfo"", ""params"": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n> curl --user myusername --data-binary '{",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599873660,599873660,src/rpc/blockchain.cpp
jonatack,2021-03-23 19:36:53,"Looks like the help is missing the ""ranges"" JSON object, returned by the output, that encompasses the feerate groups (tested on signet):\n\nhelp\n```\n""fee_histogram"" : {        (json object)\n    ""<feerate-group>"" : {    (json object) Object per feerate group\n      ""sizes"" : n,           (numeric) Cumulated size of all transactions in feerate group\n      ""count"" : n,           (numeric) ",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599875604,599875604,src/rpc/blockchain.cpp
kiminuo,2021-03-23 19:39:12,Great!,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877072,599877072,src/rpc/blockchain.cpp
kiminuo,2021-03-23 19:40:01,Thanks. Will have a look!,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877546,599877546,src/rpc/blockchain.cpp
kiminuo,2021-03-23 19:40:40,I see. Will fix. Thank you,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877954,599877954,src/rpc/blockchain.cpp
jonatack,2021-03-23 19:44:07,"IIUC these should be feerates, not fees\n```suggestion\n                            {""fee_rate"", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, ""Fee rate to group the fees by""},\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599880561,599880561,src/rpc/blockchain.cpp
jonatack,2021-03-23 19:50:43,"If I understand correctly, this should be something like ""Fee statistics grouped by feerate ranges""",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599884912,599884912,src/rpc/blockchain.cpp
jonatack,2021-03-23 19:52:15,"```suggestion\n                                    {RPCResult::Type::NUM, ""size"", ""Cumulated size of all transactions in feerate group""},\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599886221,599886221,src/rpc/blockchain.cpp
jonatack,2021-03-23 19:56:13,"Probably both should be ""fees"" in this sentence, like in line 1603.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599888505,599888505,src/rpc/blockchain.cpp
jonatack,2021-03-23 19:57:21,"s/transaction/transactions/ in both lines 1600 and 1601\n\ns/than than/than/",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599889272,599889272,src/rpc/blockchain.cpp
jonatack,2021-03-24 06:42:11,"Ah, my comment didn't make it through the internet:\n\nIt would be good to use feerate values in sat/vB for both the user input and the output here, as we are slowly moving from BTC/kvB to sat/vB fee rate units, per user demand.\n\nCurrently, you can construct a feerate from a sat/vB amount with `CFeeRate{amount, COIN}`. I proposed `CFeeRate::FromSatB` and `FromBtcKb` named constructors in #20",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210241,600210241,src/rpc/blockchain.cpp
kiminuo,2021-03-24 06:43:29,"Fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210767,600210767,src/rpc/blockchain.cpp
kiminuo,2021-03-24 06:43:34,"Fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210809,600210809,src/rpc/blockchain.cpp
kiminuo,2021-03-24 06:43:39,"Fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210842,600210842,src/rpc/blockchain.cpp
kiminuo,2021-03-24 06:43:53,"Fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210927,600210927,src/rpc/blockchain.cpp
kiminuo,2021-03-24 06:46:19,"Originally, fee rates were in sats but then I found https://github.com/bitcoin/bitcoin/pull/12240 which made me think that sats -> BTC is preferred. ",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600211868,600211868,src/rpc/blockchain.cpp
kiminuo,2021-03-24 06:49:29,"So I will switch it back to use sats. Thanks for the `CFeeRate{amount, COIN}` tip!",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600213131,600213131,src/rpc/blockchain.cpp
kiminuo,2021-03-24 06:50:17,It should be fixed now. Even though I still think `ranges` is not a good word. `groups`?,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600213464,600213464,src/rpc/blockchain.cpp
kiminuo,2021-03-24 18:57:58,"@jonatack Do I understand correctly that `CAmount fpb = fee / size` is equivalent with `CAmount fpb = CFeeRate(fee, size).GetFee(1)`? Is that what you propose to use?\n",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600784015,600784015,src/rpc/blockchain.cpp
jonatack,2021-03-25 15:53:20,"naming style nit, per developer-notes.md \n```suggestion\n            CAmount fee_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601617528,601617528,src/rpc/blockchain.cpp
jonatack,2021-03-25 16:49:15,"missing quotes in the first example, I think, and perhaps use example fee rates that return more interesting results\n```diff\n-                    HelpExampleCli(""getmempoolinfo"", R""([1, 10, 100, 200, 400, 800])"") +\n+                    HelpExampleCli(""getmempoolinfo"", R""('[1, 5, 10, 25, 50, 100]')"") +\n                     HelpExampleRpc(""getmempoolinfo"", """") +\n-                    HelpEx",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601666661,601666661,src/rpc/blockchain.cpp
jonatack,2021-03-25 17:44:17,This field seems to be the same as the `total_fee` field above in the same output (except that it is now in sat/vB instead of BTC/kvB)?,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601711097,601711097,src/rpc/blockchain.cpp
jonatack,2021-03-25 18:07:44,"You can verify this with, for example\n```cpp\n            assert(fpb == CFeeRate(fee, size).GetFee(1));\n            assert(afpb == CFeeRate(afees, asize).GetFee(1));\n            assert(dfpb == CFeeRate(dfees, dsize).GetFee(1));\n            assert(tfpb == CFeeRate(afees + dfees - fee, asize + dsize - size).GetFee(1));\n```\n(I left this as a hint in the suggestions in https://github.com/",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601729062,601729062,src/rpc/blockchain.cpp
jonatack,2021-03-25 18:09:32,maybe `fee rate groups`,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601730401,601730401,src/rpc/blockchain.cpp
kiminuo,2021-03-26 08:59:39,Thanks! Applied.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602114346,602114346,src/rpc/blockchain.cpp
kiminuo,2021-03-26 09:00:58,You are right. I have used the values from the first chart on http://bitcoin-mempool.info website and those are actually the same as the values in the [original PR](https://github.com/bitcoin/bitcoin/pull/15836/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1497).,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602115185,602115185,src/rpc/blockchain.cpp
kiminuo,2021-03-26 09:02:14,"No. In short, it holds that `fee_histogram.total_fees <= total_fee`. More precisely, the `total_fees` (i.e. the histogram JSON property) here is a sum of `fees` JSON properties from fee rate groups (i.e. `ranges`). For example, `./bitcoin-cli getmempoolinfo ""[0]""` should show the difference but not on testnet because people mostly do not pay any fees there (ðŸ™„).\n\nHowever, I'm somewhat hesitant ",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602115899,602115899,src/rpc/blockchain.cpp
kiminuo,2021-03-26 09:04:03,Thanks! I like `CFeeRate` better as then I don't add new divisions myself. The asserts work for me okay.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602116946,602116946,src/rpc/blockchain.cpp
kiminuo,2021-03-26 09:04:50,I have changed it to `fee_rate_groups`. I think it looks nicer now. What do you think?,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602117386,602117386,src/rpc/blockchain.cpp
jonatack,2021-03-26 22:34:00,"Drive-by comment: now that you're constructing the fee rates with the `CFeeRate` ctor, there is no longer a need for these greater than zero checks. Will re-review the rest.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602616548,602616548,src/rpc/blockchain.cpp
jonatack,2021-03-26 22:36:47,LGTM,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602617365,602617365,src/rpc/blockchain.cpp
kiminuo,2021-03-27 11:25:05,"Yes, good point. Thank you",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602706785,602706785,src/rpc/blockchain.cpp
jonatack,2021-03-28 14:55:54,"A couple of missing headers and a suggested (tested) update now that we are using the `CFeeRate{CAmount, size_t}` ctor to construct the fee rates:\n\n<details><summary>diff</summary><p>\n\n```diff\ndiff --git a/src/rest.cpp b/src/rest.cpp\nindex 809daa0ef8..400972c092 100644\n--- a/src/rest.cpp\n+++ b/src/rest.cpp\n@@ -26,6 +26,8 @@\n \n #include <univalue.h>\n \n+#include <optional>",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602889335,602889335,src/rpc/blockchain.cpp
jonatack,2021-03-28 15:09:12,"suggestion\n```diff\n-def assert_no_key(k, d):\n-    if k in d:\n-        raise AssertionError(""%s in %s"" % (str(k), str(d)))\n+def assert_no_key(key, dictionary):\n+    if key in dictionary:\n+        raise AssertionError(f""Key '{key}' not expected to be found in {dictionary}"")\n```\n\nwhich uses Python f-strings per current practice and would improve the error message from, for example",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602890855,602890855,test/functional/test_framework/util.py
jonatack,2021-03-28 15:23:08,"Oh, and can add logging:\n\n```diff\ndiff --git a/test/functional/mempool_fee_histogram.py b/test/functional/mempool_fee_histogram.py\nindex 01fd7825b3..3edd31447b 100755\n--- a/test/functional/mempool_fee_histogram.py\n+++ b/test/functional/mempool_fee_histogram.py\n@@ -21,12 +21,12 @@ class MempoolFeeHistogramTest(BitcoinTestFramework):\n \n     def run_test(self):\n         node = sel",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602892365,602892365,test/functional/mempool_fee_histogram.py
kiminuo,2021-03-29 06:21:58,"Thank you for the valuable feedback! Addressed.\n\nShould I add `#include <optional>` to `blockchain.h` too? Did you notice those missing `#include <optional>` or is there a tool that would warn me in the future?",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603037933,603037933,src/rpc/blockchain.cpp
kiminuo,2021-03-29 06:23:49,"Nice, I didn't know about these f-string. Thanks.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603038570,603038570,test/functional/test_framework/util.py
kiminuo,2021-03-29 06:24:39,"Thank you, fixed!",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603038896,603038896,test/functional/mempool_fee_histogram.py
kiminuo,2021-03-31 10:50:06,"@jonatack I still struggle with this as I'm not sure whether this is correct or not. It is in the original PR but:\n\n* Is this how it should be done?\n* Is there a better way?\n* Is it a copy of some existing code?\n\nIt's very important and I don't really know the answer now. So I put it here even for my own reference.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r604793435,604793435,src/rpc/blockchain.cpp
kiminuo,2021-04-11 11:08:38,"I think we have the following choices here:\n\n1. Make it: ""to"": null\n2. Represent range with arrays: [1, 2], [2, 3], [3]\n3. Remove ""to""\n4. Remove both ""from"" & ""to""\n\nI would go with the option 1 or 3.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r611171247,611171247,src/rpc/blockchain.cpp
kiminuo,2021-04-12 08:44:39,This is useful #12118 to understand how txs are sorted in mempool.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r611438651,611438651,src/rpc/blockchain.cpp
MarcoFalke,2021-06-03 12:13:26,"tx size is limited to uint32_t on all platforms on master\n\n```suggestion\n            const uint32_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r644739703,644739703,src/rpc/blockchain.cpp
kiminuo,2021-06-03 18:13:30,"Thank you, I have tried to address that to avoid subsequent narrowing warnings.\n\nEdit: Any guidance on how to fix this correctly would be greatly appreaciated. ",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r645025479,645025479,src/rpc/blockchain.cpp
luke-jr,2021-06-18 17:55:40,Why are you downgrading these to `uint32_t`?,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654597871,654597871,src/rpc/blockchain.cpp
luke-jr,2021-06-18 18:00:24,"Should probably check for overflow explicitly if you use `int` here.\n\nOr something like:\n```suggestion\n            for (size_t i = limits.size(); i-- > 0; ) {\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654600168,654600168,src/rpc/blockchain.cpp
luke-jr,2021-06-19 21:32:02,This shouldn't interrupt `getrawmempool`...,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654842428,654842428,src/rpc/client.cpp
luke-jr,2021-06-19 21:34:33,Is `bin` reserved in Python?,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654842629,654842629,test/functional/mempool_fee_histogram.py
luke-jr,2021-06-19 21:57:35,Need to `#include <optional>` in this header,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654844704,654844704,src/rpc/blockchain.h
kiminuo,2021-06-20 07:58:12,It is not according to https://docs.python.org/3/reference/lexical_analysis.html#keywords,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654894740,654894740,test/functional/mempool_fee_histogram.py
kiminuo,2021-06-20 08:38:38,"Yes, thank you.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654899586,654899586,src/rpc/client.cpp
kiminuo,2021-06-20 08:38:47,"Yes, thank you.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654899601,654899601,src/rpc/blockchain.h
kiminuo,2021-06-20 08:42:30,I have applied your suggestion. It is certainly not straightforward though.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654900143,654900143,src/rpc/blockchain.cpp
kiminuo,2021-06-20 08:52:35,"Your question is probably related to Marco's comment here: https://github.com/bitcoin/bitcoin/pull/21422#discussion_r644739703. And as I said there, any guidance on this would be greatly appreciated.\n\nEdit: I have rebased this PR so that this PR builds on *tx size is limited to uint32_t on all platforms on master*",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654901418,654901418,src/rpc/blockchain.cpp
luke-jr,2021-08-12 16:46:38,"This should be above, after &lt;any&gt;",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r687916086,687916086,src/rest.cpp
luke-jr,2021-08-12 17:18:58,"Putting such an assumption here is unnecessarily bug-prone for no benefit. All the functions involved return 64-bit types, so should not be truncated. Furthermore, GetSizeWith* may very well include multiple transactions. `size_t` is the right type here IMO.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r687939272,687939272,src/rpc/blockchain.cpp
kiminuo,2021-08-13 06:36:12,"Fixed, thank you.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r688278205,688278205,src/rest.cpp
MarcoFalke,2021-08-16 07:20:51,"> Putting such an assumption here is unnecessarily bug-prone for no benefit.\n\nThen #21848 should be reverted first. Otherwise using size_t here is compiled down to the same code anyway.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r689293178,689293178,src/rpc/blockchain.cpp
0xB10C,2021-11-22 12:37:55,"nit: I guess  `CAmount` works here, but the values actually represent a feerate (âˆˆ N*) and not an [`/** Amount in satoshis (Can be negative) */`](https://github.com/bitcoin/bitcoin/blob/95d19f8c1a40a7531d2bb00febd245d127293a64/src/consensus/amount.h#L11).\n\nMaybe?\n ```suggestion\ntypedef std::vector<uint64_t> MempoolHistogramFeeRates;\n```\n\nFeel free to ignore this though.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754233659,754233659,src/rpc/blockchain.h
0xB10C,2021-11-22 13:24:58,I think `/kvB` was mistakenly added here and should be dropped. `total_fee` is not a feerate. Do you know if this was meant to be added somewhere else?,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754275234,754275234,src/rpc/blockchain.cpp
brunoerg,2021-11-22 13:37:15,What's the reason for this `i > 0` here?,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754286176,754286176,src/rpc/blockchain.cpp
kiminuo,2021-11-22 14:37:28,"So you take one value at a time and compare it with the previous one to make sure that the sequence is an increasing one. For `i == 0`, you don't have any previous value to compare with.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754337592,754337592,src/rpc/blockchain.cpp
0xB10C,2021-11-22 15:02:19,"These are the coinbase transactions for block 1 and block 2 not block 101 and block 102. The coinbase utxos for block 101 and block 102 aren't mature. However, I don't think it's important that the UTXOs are Coinbase UTXOs.\n\nI found the ASCII art to be harder/took longer to understand than e.g. a comment like:\n\n```\n We have two UTXOs (utxo_1 and utxo_2) and create three changeless transa",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754361619,754361619,test/functional/mempool_fee_histogram.py
0xB10C,2021-11-22 15:17:04,"Is there a reason to limit this to specifically 30? \n\nIf there is, I think it should be a constant and it should be tested. \n\nIf not, I could image someone might want to use this with `[1, 2, 3, ..., 9999, 10000]` (or even more).",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754375897,754375897,src/rpc/blockchain.cpp
0xB10C,2021-11-22 16:06:41,"nit: could add\n```suggestion\n                                        {RPCResult::Type::NUM, ""size"", ""Cumulative size of all transactions in the fee rate group (in vBytes)""},\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754423967,754423967,src/rpc/blockchain.cpp
0xB10C,2021-11-22 16:08:26,"`total_fees` is not a feerate.\n```suggestion\n                                {RPCResult::Type::NUM, ""total_fees"", ""Total available fees in mempool (in "" + CURRENCY_ATOM + "")""},\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754425604,754425604,src/rpc/blockchain.cpp
brunoerg,2021-11-22 16:10:16,Perfect. Thank you.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754427248,754427248,src/rpc/blockchain.cpp
sipa,2021-11-22 16:19:21,Using `std::move(feelimits)` will avoid a vector copy. Same with the `MempoolInfoToJSON` call below.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754435154,754435154,src/rpc/blockchain.cpp
sipa,2021-11-22 16:21:23,Why not use uint64_t for everything? `GetSizeWithAncestors()` returns a uint64_t too.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754436963,754436963,src/rpc/blockchain.cpp
sipa,2021-11-22 16:23:10,"I think using ancestor feerates here is going to distort the result, because multiple transactions can have shared ancestors. Using descendant feerates is even more questionable to me, as they don't matter for transaction selection in blocks at all.\n\nImagine a situation with 3 transactions (example due to @Xekyo): one parent at 1 sat/vbyte, with two children each at 7 sat/vbyte, with all trans",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676,754438676,src/rpc/blockchain.cpp
0xB10C,2021-11-22 16:35:24,"nit: my definition of feerate is `fee per size`. This doesn't really work with `fee rate per byte` as it would be a `fee per size per size`? Also not sure about variable names like `afpb` and `dfpb`. Why not just spell it out as e.g. `ancestor_feerate` and `descendant_feerate`?\n\n\n(I'm assuming `tfpb` means `total_feerate`?)\n\n```suggestion\n            const CAmount fee{e.GetFee()}, ance",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754449922,754449922,src/rpc/blockchain.cpp
0xB10C,2021-11-22 16:37:32,"Can you explain these two lines?\n\n```C++\n1670    const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n1671    const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n```",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754451768,754451768,src/rpc/blockchain.cpp
Xekyo,2021-11-22 18:28:14,"This also sounds like a fee not a feerate, i.e. should not have a `/vB`.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754535552,754535552,src/rpc/blockchain.cpp
Xekyo,2021-11-22 18:37:23,"I'm confused by these as well.\n\nThis breaks down when there are multiple descendants or ancestors in various scenarios (all txs assumed to be same size). \n\nIf you e.g. had a parent transaction paying 5 sat/vB that had a child paying 1 sat/vB, the child would be irrelevant for the parent's effective feerate and vice versa. If you however have a parent paying 3 sat/vB, and two children where",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754541557,754541557,src/rpc/blockchain.cpp
kiminuo,2021-11-22 20:15:25,"> I think using ancestor feerates here is going to distort the result, because multiple transactions can have shared ancestors. Using descendant feerates is even more questionable to me, as they don't matter for transaction selection in blocks at all.\n\nSo I have adopted #15836 and did some modifications but I left L1665-L1667 as they were in the original PR because I was not sure why it was im",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754603944,754603944,src/rpc/blockchain.cpp
kiminuo,2021-11-22 20:19:07,I can only say this: https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754603944 and that I will try to fix it.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754606100,754606100,src/rpc/blockchain.cpp
jamesob,2021-11-22 21:22:26,`feeLimits` seems like a confusing name for this - maybe change to e.g. `histogramFloors`?,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754644262,754644262,src/rpc/blockchain.cpp
jamesob,2021-11-22 22:42:08,`feeLimits` also a confusing name here (see comment above),https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754688921,754688921,src/rpc/blockchain.cpp
kiminuo,2021-11-23 07:41:20,I think it was originally suggested here: https://github.com/bitcoin/bitcoin/pull/21422#pullrequestreview-621285483 but you are right. I will drop it. Thank you.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754859474,754859474,src/rpc/blockchain.cpp
kiminuo,2021-11-23 07:46:38,Thanks,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754862170,754862170,src/rpc/blockchain.cpp
kiminuo,2021-11-23 07:48:36,"Yes, thank you.\n\n(https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754859474)",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754863243,754863243,src/rpc/blockchain.cpp
kiminuo,2021-11-23 07:51:53,"Yes, thanks.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754864922,754864922,src/rpc/blockchain.cpp
kiminuo,2021-11-23 07:56:37,"The idea behind the limit was that I didn't want to let it be unbounded (`MempoolInfoToJSON` acquires `pool.cs` lock). If this is not a concern, I can remove the check or I can increase it substantially. \n\nI'm not sure what option is better really.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754867510,754867510,src/rpc/blockchain.cpp
kiminuo,2021-11-23 08:55:02,"The text is more clear. Thanks.\n\n(A *nicer* diagram would be even more clear ... :))",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754906415,754906415,test/functional/mempool_fee_histogram.py
brunoerg,2021-11-23 11:19:12,"Test is failing here. `TypeError: generatetoaddress() missing 1 required keyword-only argument: 'invalid_call'`. I think there is something wrong with the implementation of this function in `test_node` and I don't see any other test calling `generate` from node, I will take a look on it. But I think you can use `generatetoaddress` from `test_framework`. ",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755026497,755026497,test/functional/mempool_fee_histogram.py
kiminuo,2021-11-23 12:00:11,"Yes, that's also a reason why I converted the PR to a draft. I have done as much as I could today. I will continue tomorrow.\n\nedit: Any help is certainly welcome. :)\n\nedit 2: It might be so that master branch has merged a PR that modifies this. I vaguely remember that I have seen a PR like that. If so, then rebase + fixing the call would do the trick probably.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755055504,755055504,test/functional/mempool_fee_histogram.py
jamesob,2021-11-23 15:09:01,Is this necessary? Can't just write `assert(key not in dict)` inline?,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755222173,755222173,test/functional/test_framework/util.py
sipa,2021-11-23 18:27:26,@kiminuo Just in case it needs to be said: no need to apologize for trying to improve things. The final state of the code is everyone's responsibility; developers and reviewers.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755402684,755402684,src/rpc/blockchain.cpp
kiminuo,2021-11-23 19:52:44,It is not. Good idea. Thanks.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755458122,755458122,test/functional/test_framework/util.py
kiminuo,2021-11-23 19:55:27,"Yes, makes sense.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755459841,755459841,src/rpc/blockchain.cpp
kiminuo,2021-11-23 19:59:12,Rebased because of #23300.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755462169,755462169,test/functional/mempool_fee_histogram.py
kiminuo,2021-11-23 20:17:31,"It is more complicated because of this line:\n\n```cpp\nconst CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)}; // Fee rate per byte\n```\n\n(https://github.com/bitcoin/bitcoin/pull/21422/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1688)\n\nI think your suggestion seems reasonable but then I don't really know whether there are some edge cases I don't know abo",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755473318,755473318,src/rpc/blockchain.h
kiminuo,2021-11-24 09:16:21,"Now we have:\n\n```cpp\nconst CAmount fee{e.GetFee()};\nconst uint32_t size{(uint32_t)e.GetTxSize()};\nconst CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)};\n```\n\n`CFeeRate` has the following constructor: `CFeeRate::CFeeRate(const CAmount& nFeePaid, uint32_t num_bytes)`. If `size` is casted to `uint64_t`, then I will get a warning unless I do some other casting.\n\nAny suggestion how ",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755839122,755839122,src/rpc/blockchain.cpp
kiminuo,2021-11-24 10:14:50,"@sipa\n\n> * (1) use only transaction feerates directly (no ancestors/descendants), and have a result that ignores CPFP-like mechanics.\n\nI have picked (1) approach for now because: I can modify the PR in reasonable time and then it can serve as some sort of baseline. So we can still decide later whether the approach is the best. \n\nAnyway, there are still questions: \n\n* Is (2) much be",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755889258,755889258,src/rpc/blockchain.cpp
kiminuo,2021-11-24 10:18:03,"> nit: my definition of feerate is `fee per size`. This doesn't really work with `fee rate per byte` as it would be a `fee per size per size`?\n\nYeah, I have the same definition of fee rate as ""fee per size"".\n\nI've been trying to align with Sipa's [approach (1)](https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676) for now.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755891888,755891888,src/rpc/blockchain.cpp
kiminuo,2021-11-24 10:19:00,@0xB10C Would it make more sense to have a limit or having no limit? I'm not sure what is preferrable.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755892709,755892709,src/rpc/blockchain.cpp
kiminuo,2021-11-24 10:19:53,Hopefully addressed. Thanks.,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755893412,755893412,src/rpc/blockchain.cpp
brunoerg,2021-11-24 11:09:38,Great. #23300 solves it! ,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755945405,755945405,test/functional/mempool_fee_histogram.py
luke-jr,2021-11-24 16:42:01,"It really depends on the use case for the histogram. If people are trying to make decisions on what fee to use, it's probably better to under-estimate the fee rate of a given transaction (by applying a CPFP logic excessively) than over-estimate it (by ignoring CPFP, etc). Are there other use cases that would be impacted?",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756256802,756256802,src/rpc/blockchain.cpp
sipa,2021-11-24 16:43:01,"> * Is (2) much better than (1) or not?\n\nIt depends on how much CPFP is going on of course in the mempool overall. I think (2) is ""perfect"" in the sense that it exactly answers the question how much vbytes are competing at every feerate level for block space, according to Bitcoin Core's own block building algorithm. But I think (1) is probably a good first approximation.\n\n> * Is there room",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756257689,756257689,src/rpc/blockchain.cpp
kiminuo,2021-11-25 08:34:36,"@luke-jr \n\n> It really depends on the use case for the histogram. If people are trying to make decisions on what fee to use, it's probably better to under-estimate the fee rate of a given transaction (by applying a CPFP logic excessively) than over-estimate it (by ignoring CPFP, etc).\n\nFrom practicality point of view, I agree. But I would still like to follow [this plan](https://github.com",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756670249,756670249,src/rpc/blockchain.cpp
0xB10C,2021-11-25 16:45:00,"Agree, yes. I've tried changing this and it gave me a bunch of warnings. I'd say ignore this comment unless someone else finds this to be problematic.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757035495,757035495,src/rpc/blockchain.h
0xB10C,2021-11-25 16:53:16,"Good point on the lock.. Can we benchmark the time the RPC takes with 10, 100. 1000, 10000 histogram bins? I think if it scales linear O(n) and somewhere between 10ms or so, then it's fine to have no limit. Users selecting a million bins should expect that this could take a bit longer than only 10 bins.\n\nI'll see if I can test that.",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757040403,757040403,src/rpc/blockchain.cpp
kiminuo,2021-11-25 20:02:39,Ok!,https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757108924,757108924,src/rpc/blockchain.h
kiminuo,2021-11-25 20:22:49,"https://github.com/bitcoin/bitcoin/pull/21422/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1685-R1699 takes `O(#mempoolTxs * #bins)` \n\nLooking at https://jochen-hoenicke.de/queue/#BTC,1y,count, to have some sense about numbers, it can be something like: 20_000 * 10_000 = 200_000_000 that should be computed in a less than a second.\n\nIf you can test it, it woul",https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757114611,757114611,src/rpc/blockchain.cpp
