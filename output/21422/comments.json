[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797405001",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-797405001",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 797405001,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzQwNTAwMQ==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T10:45:10Z",
    "updated_at": "2021-03-12T10:45:10Z",
    "author_association": "MEMBER",
    "body": "Hey @kiminuo, can you amend the commit and remove my mention? Keep in mind that mentions in commits lead to notifications. Ty.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797405001/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797405777",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-797405777",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 797405777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzQwNTc3Nw==",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?u=b48a1208deda9bd1756f21a35341ce98265355c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T10:46:35Z",
    "updated_at": "2021-03-12T10:46:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Hey @kiminuo, can you amend the commit and remove my mention? Keep in mind that mentions in commits lead to notifications. Ty.\r\n\r\nYes, sorry for that.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797405777/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797707560",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-797707560",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 797707560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzcwNzU2MA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T19:34:03Z",
    "updated_at": "2021-03-12T19:34:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for picking this up.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797707560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800167374",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-800167374",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 800167374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDE2NzM3NA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-16T11:09:02Z",
    "updated_at": "2021-11-24T04:52:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22891](https://github.com/bitcoin/bitcoin/pull/22891) (Add fee rate distribution in -getinfo by prayank23)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800167374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803550651",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-803550651",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 803550651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzU1MDY1MQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-21T10:31:34Z",
    "updated_at": "2021-03-21T10:31:34Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. For the test commit, maybe a more descriptive title that can be understood on its own.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803550651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803653818",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-803653818",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 803653818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzY1MzgxOA==",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?u=b48a1208deda9bd1756f21a35341ce98265355c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-21T20:23:22Z",
    "updated_at": "2021-03-21T20:23:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonatack Thanks for the superb review! I'm working on incorporating your suggestions.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803653818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808056236",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-808056236",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 808056236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwODA1NjIzNg==",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?u=b48a1208deda9bd1756f21a35341ce98265355c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-26T09:07:05Z",
    "updated_at": "2021-03-26T09:07:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It would be good if the functional test actually verified that the values are correctly calculated after creating a few txns; ATM it is only really a smoke test that verifies the output structure.\r\n\r\nThis is on my TODO list. So I will improve it over coming days.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808056236/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809108278",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-809108278",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 809108278,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTEwODI3OA==",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?u=b48a1208deda9bd1756f21a35341ce98265355c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-29T06:31:14Z",
    "updated_at": "2021-03-29T06:31:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Will re-review after the TODO you mention in [#21422 (comment)](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-808056236).\r\n\r\nThank you. I'm slowly getting familiar with Bitcoin's `BitcoinTestFramework`. I'm almost ready to start writing the test. So slow progress, but progress too. I would kind of want to start with `self.setup_clean_chain = True` because I will be more confident about the blockchain's state. It can be improved further later.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809108278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819558569",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-819558569",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 819558569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxOTU1ODU2OQ==",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?u=b48a1208deda9bd1756f21a35341ce98265355c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-14T14:23:53Z",
    "updated_at": "2021-04-14T14:23:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "> A couple more suggestions. Will re-review after the TODO you mention in [#21422 (comment)](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-808056236).\r\n\r\nI have improved the test. I find it much better than before but I still think it should be tested more. What do you think?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819558569/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819566377",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-819566377",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 819566377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxOTU2NjM3Nw==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-14T14:34:05Z",
    "updated_at": "2021-04-14T14:34:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK!\r\n\r\nIt might make sense to have the API be more similar to https://numpy.org/doc/stable/reference/generated/numpy.histogram.html",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819566377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819572940",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-819572940",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 819572940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxOTU3Mjk0MA==",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?u=b48a1208deda9bd1756f21a35341ce98265355c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-14T14:42:54Z",
    "updated_at": "2021-04-14T14:42:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It might make sense to have the API be more similar to https://numpy.org/doc/stable/reference/generated/numpy.histogram.html\r\n\r\nThank you for the suggestion, I'll have a look!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819572940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853786199",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-853786199",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 853786199,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1Mzc4NjE5OQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-03T11:06:32Z",
    "updated_at": "2021-06-03T11:06:32Z",
    "author_association": "MEMBER",
    "body": "This, as merged on master, gives me the following build error with clang 13:\r\n```\r\n\u2026/bitcoin/src/rpc/blockchain.cpp:1666:45: error: non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long') to 'uint32_t' (aka 'unsigned int') in initializer list [-Wc++11-narrowing]\r\n            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\r\n                                            ^~~~\r\n\u2026/bitcoin/src/rpc/blockchain.cpp:1666:45: note: insert an explicit cast to silence this issue\r\n            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\r\n                                            ^~~~\r\n                                            static_cast<uint32_t>( )\r\n\u2026/bitcoin/src/rpc/blockchain.cpp:1667:48: error: non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long') to 'uint32_t' (aka 'unsigned int') in initializer list [-Wc++11-narrowing]\r\n            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\r\n                                               ^~~~~\r\n\u2026/bitcoin/src/rpc/blockchain.cpp:1667:48: note: insert an explicit cast to silence this issue\r\n            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\r\n                                               ^~~~~\r\n                                               static_cast<uint32_t>( )\r\n\u2026/bitcoin/src/rpc/blockchain.cpp:1668:48: error: non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long') to 'uint32_t' (aka 'unsigned int') in initializer list [-Wc++11-narrowing]\r\n            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\r\n                                               ^~~~~\r\n\u2026/bitcoin/src/rpc/blockchain.cpp:1668:48: note: insert an explicit cast to silence this issue\r\n            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\r\n                                               ^~~~~\r\n                                               static_cast<uint32_t>( )\r\n\u2026/bitcoin/src/rpc/blockchain.cpp:1671:62: error: non-constant-expression cannot be narrowed from type 'unsigned long' to 'uint32_t' (aka 'unsigned int') in initializer list [-Wc++11-narrowing]\r\n            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\r\n                                                             ^~~~~~~~~~~~~~~~~~~~\r\n\u2026/bitcoin/src/rpc/blockchain.cpp:1671:62: note: insert an explicit cast to silence this issue\r\n            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\r\n                                                             ^~~~~~~~~~~~~~~~~~~~\r\n                                                             static_cast<uint32_t>( )\r\n4 errors generated.\r\nmake[2]: *** [Makefile:9273: rpc/libbitcoin_server_a-blockchain.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: Leaving directory '/store2/build/bitcoin/bitcoin/src'\r\nmake[1]: *** [Makefile:16124: all-recursive] Error 1\r\nmake[1]: Leaving directory '/store2/build/bitcoin/bitcoin/src'\r\nmake: *** [Makefile:821: all-recursive] Error 1\r\n```\r\nI can't say I've ever seen these before.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853786199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856042676",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-856042676",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 856042676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NjA0MjY3Ng==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-07T15:35:26Z",
    "updated_at": "2021-06-07T15:35:26Z",
    "author_association": "MEMBER",
    "body": "It builds succesfully now, thanks!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856042676/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864467671",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-864467671",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 864467671,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NDQ2NzY3MQ==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-19T21:47:00Z",
    "updated_at": "2021-06-19T21:47:00Z",
    "author_association": "MEMBER",
    "body": "Note: This PR drops the REST support",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864467671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864521472",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-864521472",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 864521472,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NDUyMTQ3Mg==",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?u=b48a1208deda9bd1756f21a35341ce98265355c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-20T08:53:45Z",
    "updated_at": "2021-06-20T08:53:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Note: This PR drops the REST support\r\n\r\nI have added a note about this in the PR description. Thanks.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864521472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899258623",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-899258623",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 899258623,
    "node_id": "IC_kwDOABII5841mZj_",
    "user": {
      "login": "prayank23",
      "id": 13405205,
      "node_id": "MDQ6VXNlcjEzNDA1MjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405205?u=03240c7cca7b55e5b9239eeab7a5914663a42b91&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prayank23",
      "html_url": "https://github.com/prayank23",
      "followers_url": "https://api.github.com/users/prayank23/followers",
      "following_url": "https://api.github.com/users/prayank23/following{/other_user}",
      "gists_url": "https://api.github.com/users/prayank23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prayank23/subscriptions",
      "organizations_url": "https://api.github.com/users/prayank23/orgs",
      "repos_url": "https://api.github.com/users/prayank23/repos",
      "events_url": "https://api.github.com/users/prayank23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prayank23/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-16T06:30:45Z",
    "updated_at": "2021-08-16T06:30:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK. Tested the PR commits building on master branch.\r\n\r\n```\r\n$ bitcoin-cli getmempoolinfo \"[1,10,20,30]\"\r\n\r\n  \"loaded\": true,\r\n  \"size\": 22,\r\n  \"bytes\": 4472,\r\n  \"usage\": 31152,\r\n  \"total_fee\": 0.00096947,\r\n  \"maxmempool\": 300000000,\r\n  \"mempoolminfee\": 0.00001000,\r\n  \"minrelaytxfee\": 0.00001000,\r\n  \"unbroadcastcount\": 0,\r\n  \"fee_histogram\": {\r\n    \"fee_rate_groups\": {\r\n      \"1\": {\r\n        \"size\": 3274,\r\n        \"count\": 15,\r\n        \"fees\": 4577,\r\n        \"from\": 1,\r\n        \"to\": 9\r\n      },\r\n      \"10\": {\r\n        \"size\": 141,\r\n        \"count\": 1,\r\n        \"fees\": 2800,\r\n        \"from\": 10,\r\n        \"to\": 19\r\n      },\r\n      \"20\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 20,\r\n        \"to\": 29\r\n      },\r\n      \"30\": {\r\n        \"size\": 1057,\r\n        \"count\": 6,\r\n        \"fees\": 89570,\r\n        \"from\": 30,\r\n        \"to\": null\r\n      }\r\n    },\r\n    \"total_fees\": 96947\r\n  }\r\n}\r\n\r\n```\r\n\r\n[Fee distribution chart](https://github.com/prayank23/bitcoin-histogram) using the results from `bitcoin-cli getmempoolinfo \"[1,10,20,30]\"`:\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/129519871-06ca6071-cf39-4f68-8370-eb4ae11f44c3.png)\r\n\r\n\r\n```python\r\nfrom flask import Flask, render_template\r\nimport requests\r\nimport json\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/')\r\n\r\ndef chart(chartID = 'chart_ID', chart_type = 'bar', chart_height = 200):\r\n\tsize_group1 = size(1)\r\n\tsize_group2 = size(10)\r\n\tsize_group3 = size(20)\r\n\t\r\n\tchart = {\"renderTo\": chartID, \"type\": chart_type, \"height\": chart_height,}\r\n\tseries = [{\"name\": 'Size (vByte)', \"data\": [int(size_group1), int(size_group2), int(size_group3)]}]\r\n\ttitle = {\"text\": 'Fee rate distribution'}\r\n\txAxis = {\"categories\": ['1-9', '10-19', '20-29']}\r\n\tyAxis = {\"title\": {\"text\": ''}}\r\n\treturn render_template('index.html', chartID=chartID, chart=chart, series=series, title=title, xAxis=xAxis, yAxis=yAxis)\r\n\r\ndef size(group):\r\n\turl = \"http://127.0.0.1:18333/\"\r\n\tpayload = \"{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\": \\\"bitcoin-histogram\\\", \\\"method\\\": \\\"getmempoolinfo\\\", \\\"params\\\": [[1,10,20,30]]}\"\r\n\theaders = {\r\n  \t  'Authorization': 'Basic dXNlcjMzOnBhc3N3b3JkMzM=',\r\n  \t  'Content-Type': 'text/plain'\r\n\t}\r\n\tresponse = requests.request(\"POST\", url, headers=headers, data=payload, )\r\n\tfee_dist = response.json()\r\n\tsize_group = fee_dist['result']['fee_histogram']['fee_rate_groups'][\"\" +str(group)+ \"\"]['size']\t\r\n\treturn str(size_group)\r\n\r\nif __name__ == \"__main__\":\r\n\tapp.run(debug = True, host='127.0.0.1', port=8080, passthrough_errors=True)\r\n```\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899258623/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/959858353",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-959858353",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 959858353,
    "node_id": "IC_kwDOABII5845Nkax",
    "user": {
      "login": "prayank23",
      "id": 13405205,
      "node_id": "MDQ6VXNlcjEzNDA1MjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405205?u=03240c7cca7b55e5b9239eeab7a5914663a42b91&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prayank23",
      "html_url": "https://github.com/prayank23",
      "followers_url": "https://api.github.com/users/prayank23/followers",
      "following_url": "https://api.github.com/users/prayank23/following{/other_user}",
      "gists_url": "https://api.github.com/users/prayank23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prayank23/subscriptions",
      "organizations_url": "https://api.github.com/users/prayank23/orgs",
      "repos_url": "https://api.github.com/users/prayank23/repos",
      "events_url": "https://api.github.com/users/prayank23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prayank23/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-03T19:30:17Z",
    "updated_at": "2021-11-03T19:30:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kiminuo https://github.com/bitcoin/bitcoin/pull/22891 adds fee rate distribution bars in `-getinfo`. Its on top of this PR. Will be helpful if you could review :)\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/140179579-34cd5599-fa09-47c5-a02c-d5e8abf3844b.png)\r\n\r\n\r\nAlso waiting for reviewers in this PR to leave some ACKs or comments to improve so that other projects can also use this histogram",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/959858353/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/967404182",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-967404182",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 967404182,
    "node_id": "IC_kwDOABII5845qWqW",
    "user": {
      "login": "kristapsk",
      "id": 4500994,
      "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4500994?u=85c0215b4144f580341a17fc5af4dad33c2d8123&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kristapsk",
      "html_url": "https://github.com/kristapsk",
      "followers_url": "https://api.github.com/users/kristapsk/followers",
      "following_url": "https://api.github.com/users/kristapsk/following{/other_user}",
      "gists_url": "https://api.github.com/users/kristapsk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
      "organizations_url": "https://api.github.com/users/kristapsk/orgs",
      "repos_url": "https://api.github.com/users/kristapsk/repos",
      "events_url": "https://api.github.com/users/kristapsk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kristapsk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-12T19:38:43Z",
    "updated_at": "2021-11-12T19:38:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/967404182/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/975711424",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-975711424",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 975711424,
    "node_id": "IC_kwDOABII5846KCzA",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-22T16:39:17Z",
    "updated_at": "2021-11-22T16:39:17Z",
    "author_association": "MEMBER",
    "body": "Approach NACK as-is, this will result in distorted numbers. https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/975711424/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978235017",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-978235017",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 978235017,
    "node_id": "IC_kwDOABII5846Tq6J",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-24T21:21:49Z",
    "updated_at": "2021-11-24T22:28:42Z",
    "author_association": "MEMBER",
    "body": "@kiminuo See https://github.com/sipa/bitcoin/commits/202111_mempoolfr for code that gets histogram data using the mining algorithm. Feel free to cherry pick or whatever; if you don't, I may clean it up to make use it after this PR is merged.\r\n\r\nNow, it is somewhat slow (currently ~150ms for me for ~12000 mempool transactions, which is only a small fraction of the maximum). If we expect that go that direction, maybe that calls for having the functionality in a separate RPC than `getmempoolinfo`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978235017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978941401",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-978941401",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
    "id": 978941401,
    "node_id": "IC_kwDOABII5846WXXZ",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?u=b48a1208deda9bd1756f21a35341ce98265355c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-11-25T08:23:04Z",
    "updated_at": "2021-11-25T08:23:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sipa That looks great!\r\n\r\nIn my mind, I would attempt to do this:\r\n\r\n1. Create a PR with commit https://github.com/sipa/bitcoin/commit/b16d39624a73be7bfad28c7063d21b302646d95f (*Make CFeeRate work with uint64_t sizes*) as it would be nice to have it for this PR to avoid casting.\r\n2. Attempt to make this PR merge-worthy with the [approach (1)](https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676) knowing that the histogram values may not be entirely precise.\r\n    * We can document the behavior and maybe we can reserve the right to change the underlying algorithm in the future to.. or is it too daring?\r\n3. Attempt to merge your https://github.com/sipa/bitcoin/commits/202111_mempoolfr branch with the intent to make the histogram values more precise.\r\n\r\nDoes it sound good or not?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978941401/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258602",
    "pull_request_review_id": 617005701,
    "id": 598258602,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1ODYwMg==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Use a named cast (and can be const)",
    "created_at": "2021-03-21T10:45:32Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258602",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258602"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258602"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258602/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1518,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258707",
    "pull_request_review_id": 617005701,
    "id": 598258707,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1ODcwNw==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 48,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n            for (int i = limits.size() - 1; i >= 0; --i) {\r\n```",
    "created_at": "2021-03-21T10:46:21Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258707",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258707"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258707"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1532,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258754",
    "pull_request_review_id": 617005701,
    "id": 598258754,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1ODc1NA==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n                    ++count[i];\r\n```",
    "created_at": "2021-03-21T10:46:47Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258754",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258754"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258754"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1535,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259105",
    "pull_request_review_id": 617005701,
    "id": 598259105,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1OTEwNQ==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Are `size`, `asize` and `dsize` guaranteed to be non-zero? Can they be `const`?",
    "created_at": "2021-03-21T10:49:09Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259105",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259105"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259105"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259105/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1527,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259294",
    "pull_request_review_id": 617005701,
    "id": 598259294,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1OTI5NA==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); i++) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        for (size_t i = 0; i < limits.size(); ++i) {\r\n```",
    "created_at": "2021-03-21T10:50:32Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259294",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259294"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259294"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259294/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1544,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259362",
    "pull_request_review_id": 617005701,
    "id": 598259362,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1OTM2Mg==",
    "diff_hunk": "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureMemPool(request.context));\n+    MempoolHistogramFeeLimits feelimits;\n+    std::optional<MempoolHistogramFeeLimits> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+        for (unsigned int i = 0; i < feelimits_univalue.size(); i++) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        for (unsigned int i = 0; i < feelimits_univalue.size(); ++i) {\r\n```",
    "created_at": "2021-03-21T10:51:28Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259362",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259362"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259362"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1614,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259414",
    "pull_request_review_id": 617005701,
    "id": 598259414,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1OTQxNA==",
    "diff_hunk": "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 119,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can you add an example?",
    "created_at": "2021-03-21T10:52:04Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259414",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259414"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259414"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1605,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598260229",
    "pull_request_review_id": 617005701,
    "id": 598260229,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI2MDIyOQ==",
    "diff_hunk": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+from decimal import Decimal",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": null,
    "original_position": 14,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The decimal stdlib import should be before the framework imports per PEP8, separated by a blank line ",
    "created_at": "2021-03-21T10:58:31Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598260229",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598260229"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598260229"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598260229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 14,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598260474",
    "pull_request_review_id": 617005701,
    "id": 598260474,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI2MDQ3NA==",
    "diff_hunk": "@@ -225,6 +225,7 @@\n     'feature_nulldummy.py --descriptors',\n     'mempool_accept.py',\n     'mempool_expiry.py',\n+    'mempool_fee_histogram.py',",
    "path": "test/functional/test_runner.py",
    "position": 4,
    "original_position": 4,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The new test file has incorrect permissions:\r\n```\r\n-rwxr-xr-x 1   5133 Mar 17 15:30 mempool_expiry.py*\r\n-rw-r--r-- 1   1716 Mar 21 11:56 mempool_fee_histogram.py\r\n-rwxr-xr-x 1   3494 Mar  1 11:53 mempool_limit.py*\r\n```\r\nI had to run `sudo chmod 755 test/functional/mempool_fee_histogram.py` to be able to call the test directly, e.g. with `test/functional/mempool_fee_histogram.py`",
    "created_at": "2021-03-21T11:00:31Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598260474",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598260474"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598260474"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598260474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 243,
    "original_line": 243,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598261128",
    "pull_request_review_id": 617007432,
    "id": 598261128,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI2MTEyOA==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); i++) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    // {\"with_fee_histogram\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for including the fee histogram in the response\"},\n+                    {\"fee_histogram\", RPCArg::Type::STR, /* default */ \"false\", \"Provide fee limits in format: '1,2,3,5,200,1000'\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 93,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is the argument a string or a JSON array? (if an array, I think there needs to be another line that specifies the element type, e.g. number, string, or amount, probably the latter).",
    "created_at": "2021-03-21T11:06:03Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598261128",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598261128"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598261128"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598261128/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1576,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598342760",
    "pull_request_review_id": 617065184,
    "id": 598342760,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODM0Mjc2MA==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@jonatack This is a part of the original PR I need to research more.\r\n\r\nDo you possibly have a tip where to learn how to properly compute `feeperbyte` value for a transaction? Or possibly who would know that? \r\n\r\nAnyway, I'm slowly skimming Bitcoin Core codebase so maybe I'll be lucky :-)",
    "created_at": "2021-03-21T21:46:28Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598342760",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598342760"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598342760"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598342760/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1527,
    "side": "RIGHT",
    "in_reply_to_id": 598259105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472515",
    "pull_request_review_id": 617206365,
    "id": 598472515,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MjUxNQ==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 48,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Addressed, thanks!",
    "created_at": "2021-03-22T07:20:55Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472515",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472515"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472515"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1532,
    "side": "RIGHT",
    "in_reply_to_id": 598258707
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472588",
    "pull_request_review_id": 617206471,
    "id": 598472588,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MjU4OA==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Addressed, thanks!",
    "created_at": "2021-03-22T07:21:09Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472588",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472588"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472588"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1535,
    "side": "RIGHT",
    "in_reply_to_id": 598258754
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472646",
    "pull_request_review_id": 617206522,
    "id": 598472646,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MjY0Ng==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); i++) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Addressed, thanks!",
    "created_at": "2021-03-22T07:21:16Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472646",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472646"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472646"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472646/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1544,
    "side": "RIGHT",
    "in_reply_to_id": 598259294
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472692",
    "pull_request_review_id": 617206566,
    "id": 598472692,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MjY5Mg==",
    "diff_hunk": "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureMemPool(request.context));\n+    MempoolHistogramFeeLimits feelimits;\n+    std::optional<MempoolHistogramFeeLimits> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+        for (unsigned int i = 0; i < feelimits_univalue.size(); i++) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Addressed, thanks!",
    "created_at": "2021-03-22T07:21:21Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472692",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472692"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472692"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472692/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1614,
    "side": "RIGHT",
    "in_reply_to_id": 598259362
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598473434",
    "pull_request_review_id": 617207546,
    "id": 598473434,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MzQzNA==",
    "diff_hunk": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+from decimal import Decimal",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": null,
    "original_position": 14,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hopefully, it's correct now. ",
    "created_at": "2021-03-22T07:23:09Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598473434",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598473434"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598473434"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598473434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 14,
    "side": "RIGHT",
    "in_reply_to_id": 598260229
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598473687",
    "pull_request_review_id": 617207865,
    "id": 598473687,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MzY4Nw==",
    "diff_hunk": "@@ -225,6 +225,7 @@\n     'feature_nulldummy.py --descriptors',\n     'mempool_accept.py',\n     'mempool_expiry.py',\n+    'mempool_fee_histogram.py',",
    "path": "test/functional/test_runner.py",
    "position": 4,
    "original_position": 4,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I fixed this. Thanks!",
    "created_at": "2021-03-22T07:23:44Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598473687",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598473687"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598473687"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598473687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 243,
    "original_line": 243,
    "side": "RIGHT",
    "in_reply_to_id": 598260474
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599793002",
    "pull_request_review_id": 618888213,
    "id": 599793002,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTc5MzAwMg==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); i++) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    // {\"with_fee_histogram\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for including the fee histogram in the response\"},\n+                    {\"fee_histogram\", RPCArg::Type::STR, /* default */ \"false\", \"Provide fee limits in format: '1,2,3,5,200,1000'\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 93,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The argument is a JSON array of amounts (fees). I have fixed it.",
    "created_at": "2021-03-23T17:38:39Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599793002",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599793002"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599793002"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599793002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1576,
    "side": "RIGHT",
    "in_reply_to_id": 598261128
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599832829",
    "pull_request_review_id": 618938369,
    "id": 599832829,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTgzMjgyOQ==",
    "diff_hunk": "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 119,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I added an example.",
    "created_at": "2021-03-23T18:31:07Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599832829",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599832829"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599832829"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599832829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1605,
    "side": "RIGHT",
    "in_reply_to_id": 598259414
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599863046",
    "pull_request_review_id": 618977549,
    "id": 599863046,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg2MzA0Ng==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "For computing a fee rate per byte, have a look in `src/policy/feerate.{h, cpp}`. Here's a proposed diff (using the current code) to do explicit casts rather than implicit conversions and narrowing. The size denominators are calling `GetTxSize()`, which should be non-zero, but you can `CHECK_NONFATAL` on these. That said, you may be right that it can be done properly/better, as you asked, by using the `CFeeRate` ctors.\r\n\r\n<details><summary>diff</summary><p>\r\n\r\n```diff\r\n         for (const CTxMemPoolEntry& e : pool.mapTx) {\r\n-            const int size = (int)e.GetTxSize();\r\n-            CAmount fee = e.GetFee();\r\n-            uint64_t asize = e.GetSizeWithAncestors();\r\n-            CAmount afees = e.GetModFeesWithAncestors();\r\n-            uint64_t dsize = e.GetSizeWithDescendants();\r\n-            CAmount dfees = e.GetModFeesWithDescendants();\r\n-\r\n-            CAmount fpb = fee / size; // fee per byte\r\n-            CAmount afpb = afees / asize; // fee per byte including ancestors\r\n-            CAmount dfpb = dfees / dsize; // fee per byte including descendants\r\n-            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\r\n-            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\r\n+            const CAmount fee{e.GetFee()};\r\n+            const CAmount afees{e.GetModFeesWithAncestors()};\r\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\r\n+\r\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\r\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\r\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\r\n+\r\n+            CHECK_NONFATAL(size > 0);\r\n+            CHECK_NONFATAL(asize > 0);\r\n+            CHECK_NONFATAL(dsize > 0);\r\n+            CHECK_NONFATAL(asize + dsize - size > 0);\r\n+\r\n+            CAmount fpb{fee / size};     // fee per byte\r\n+            CAmount afpb{afees / asize}; // fee per byte including ancestors\r\n+            CAmount dfpb{dfees / dsize}; // fee per byte including descendants\r\n+            CAmount tfpb{(afees + dfees - fee) / (asize + dsize - size)};\r\n+            CAmount feeperbyte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\r\n```\r\n</p></details>\r\n",
    "created_at": "2021-03-23T19:16:45Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599863046",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599863046"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599863046"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599863046/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1527,
    "side": "RIGHT",
    "in_reply_to_id": 598259105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599864037",
    "pull_request_review_id": 618978887,
    "id": 599864037,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg2NDAzNw==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(note, `CAmount` is `int64_t`, see `src/amount.h`)",
    "created_at": "2021-03-23T19:18:20Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599864037",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599864037"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599864037"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599864037/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1527,
    "side": "RIGHT",
    "in_reply_to_id": 598259105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599868315",
    "pull_request_review_id": 618984524,
    "id": 599868315,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg2ODMxNQ==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); i++) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    // {\"with_fee_histogram\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for including the fee histogram in the response\"},\n+                    {\"fee_histogram\", RPCArg::Type::STR, /* default */ \"false\", \"Provide fee limits in format: '1,2,3,5,200,1000'\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 93,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> The argument is a JSON array of amounts (fees). I have fixed it.\r\n\r\nYes, seems better now\r\n```\r\nArguments:\r\n1. fee_histogram    (json array, optional) Fee amounts\r\n     [\r\n       fee,         (numeric or string, required) A fee amount\r\n       ...\r\n     ]\r\n```",
    "created_at": "2021-03-23T19:25:16Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599868315",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599868315"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599868315"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599868315/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1576,
    "side": "RIGHT",
    "in_reply_to_id": 598261128
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599873660",
    "pull_request_review_id": 618991407,
    "id": 599873660,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg3MzY2MA==",
    "diff_hunk": "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 119,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "New examples look good, thanks.\r\n```\r\n> bitcoin-cli getmempoolinfo \r\n> bitcoin-cli getmempoolinfo [\"0.00000001\",\"0.00000010\",\"0.00000100\",\"0.00000200\",\"0.00000400\",\"0.00000800\"]\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getmempoolinfo\", \"params\": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getmempoolinfo\", \"params\": [[\"0.00000001\",\"0.00000010\",\"0.00000100\",\"0.00000200\",\"0.00000400\",\"0.00000800\"]]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n```\r\n",
    "created_at": "2021-03-23T19:33:41Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599873660",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599873660"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599873660"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599873660/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1605,
    "side": "RIGHT",
    "in_reply_to_id": 598259414
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599875604",
    "pull_request_review_id": 618993997,
    "id": 599875604,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg3NTYwNA==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Looks like the help is missing the \"ranges\" JSON object, returned by the output, that encompasses the feerate groups (tested on signet):\r\n\r\nhelp\r\n```\r\n\"fee_histogram\" : {        (json object)\r\n    \"<feerate-group>\" : {    (json object) Object per feerate group\r\n      \"sizes\" : n,           (numeric) Cumulated size of all transactions in feerate group\r\n      \"count\" : n,           (numeric) Amount of transactions in feerate group\r\n      \"fees\" : n,            (numeric) Cumulated fee of all transactions in feerate group\r\n      \"from_feerate\" : n,    (numeric) Group contains transaction with feerates equal or greater than this value\r\n      \"to_feerate\" : n       (numeric) Group contains transaction with feerates less than than this value\r\n    },\r\n```\r\nactual output\r\n```\r\n  \"fee_histogram\": {\r\n    \"ranges\": {\r\n      \"0.00000001\": {\r\n        \"sizes\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from_feerate\": \"0.00000001\",\r\n        \"to_feerate\": \"0.0000001\"\r\n      },\r\n      ...\r\n```\r\n",
    "created_at": "2021-03-23T19:36:53Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599875604",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599875604"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599875604"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599875604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1595,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877072",
    "pull_request_review_id": 618995866,
    "id": 599877072,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg3NzA3Mg==",
    "diff_hunk": "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 119,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Great!",
    "created_at": "2021-03-23T19:39:12Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877072",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877072"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877072"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877072/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1605,
    "side": "RIGHT",
    "in_reply_to_id": 598259414
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877546",
    "pull_request_review_id": 618996495,
    "id": 599877546,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg3NzU0Ng==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks. Will have a look!",
    "created_at": "2021-03-23T19:40:01Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877546",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877546"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877546"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1527,
    "side": "RIGHT",
    "in_reply_to_id": 598259105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877954",
    "pull_request_review_id": 618997026,
    "id": 599877954,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg3Nzk1NA==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I see. Will fix. Thank you",
    "created_at": "2021-03-23T19:40:40Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877954",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877954"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877954"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877954/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1595,
    "side": "RIGHT",
    "in_reply_to_id": 599875604
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599880561",
    "pull_request_review_id": 619000071,
    "id": 599880561,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg4MDU2MQ==",
    "diff_hunk": "@@ -1501,14 +1502,82 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; --i) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee amounts\",\n+                        {\n+                            {\"fee\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A fee amount\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 94,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "IIUC these should be feerates, not fees\r\n```suggestion\r\n                            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"Fee rate to group the fees by\"},\r\n```",
    "created_at": "2021-03-23T19:44:07Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599880561",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599880561"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599880561"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599880561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1577,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599884912",
    "pull_request_review_id": 619005710,
    "id": 599884912,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg4NDkxMg==",
    "diff_hunk": "@@ -1501,14 +1502,82 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; --i) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee amounts\",",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 92,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If I understand correctly, this should be something like \"Fee statistics grouped by feerate ranges\"",
    "created_at": "2021-03-23T19:50:43Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599884912",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599884912"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599884912"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599884912/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1575,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599886221",
    "pull_request_review_id": 619007089,
    "id": 599886221,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg4NjIyMQ==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 111,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n                                    {RPCResult::Type::NUM, \"size\", \"Cumulated size of all transactions in feerate group\"},\r\n```",
    "created_at": "2021-03-23T19:52:15Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599886221",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599886221"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599886221"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599886221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1597,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599888505",
    "pull_request_review_id": 619010167,
    "id": 599888505,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg4ODUwNQ==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 113,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Probably both should be \"fees\" in this sentence, like in line 1603.",
    "created_at": "2021-03-23T19:56:13Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599888505",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599888505"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599888505"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599888505/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1599,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599889272",
    "pull_request_review_id": 619011160,
    "id": 599889272,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg4OTI3Mg==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 115,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "s/transaction/transactions/ in both lines 1600 and 1601\r\n\r\ns/than than/than/",
    "created_at": "2021-03-23T19:57:21Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599889272",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599889272"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599889272"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599889272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1601,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210241",
    "pull_request_review_id": 619369988,
    "id": 600210241,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMDI0MQ==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, my comment didn't make it through the internet:\r\n\r\nIt would be good to use feerate values in sat/vB for both the user input and the output here, as we are slowly moving from BTC/kvB to sat/vB fee rate units, per user demand.\r\n\r\nCurrently, you can construct a feerate from a sat/vB amount with `CFeeRate{amount, COIN}`. I proposed `CFeeRate::FromSatB` and `FromBtcKb` named constructors in #20790, #20391, #20546 but none of the three are/were merged.",
    "created_at": "2021-03-24T06:42:11Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210241",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210241"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210241"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210241/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1527,
    "side": "RIGHT",
    "in_reply_to_id": 598259105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210767",
    "pull_request_review_id": 619370649,
    "id": 600210767,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMDc2Nw==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 115,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed, thanks!",
    "created_at": "2021-03-24T06:43:29Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210767",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210767"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210767"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1601,
    "side": "RIGHT",
    "in_reply_to_id": 599889272
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210809",
    "pull_request_review_id": 619370683,
    "id": 600210809,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMDgwOQ==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 113,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed, thanks!",
    "created_at": "2021-03-24T06:43:34Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210809",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210809"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210809"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210809/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1599,
    "side": "RIGHT",
    "in_reply_to_id": 599888505
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210842",
    "pull_request_review_id": 619370727,
    "id": 600210842,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMDg0Mg==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 111,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed, thanks!",
    "created_at": "2021-03-24T06:43:39Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210842",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210842"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210842"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1597,
    "side": "RIGHT",
    "in_reply_to_id": 599886221
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210927",
    "pull_request_review_id": 619370843,
    "id": 600210927,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMDkyNw==",
    "diff_hunk": "@@ -1501,14 +1502,82 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; --i) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee amounts\",",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 92,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed, thanks!",
    "created_at": "2021-03-24T06:43:53Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210927",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210927"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210927"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1575,
    "side": "RIGHT",
    "in_reply_to_id": 599884912
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600211868",
    "pull_request_review_id": 619372049,
    "id": 600211868,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMTg2OA==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Originally, fee rates were in sats but then I found https://github.com/bitcoin/bitcoin/pull/12240 which made me think that sats -> BTC is preferred. ",
    "created_at": "2021-03-24T06:46:19Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600211868",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600211868"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600211868"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600211868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1527,
    "side": "RIGHT",
    "in_reply_to_id": 598259105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600213131",
    "pull_request_review_id": 619373626,
    "id": 600213131,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMzEzMQ==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "So I will switch it back to use sats. Thanks for the `CFeeRate{amount, COIN}` tip!",
    "created_at": "2021-03-24T06:49:29Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600213131",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600213131"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600213131"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600213131/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1527,
    "side": "RIGHT",
    "in_reply_to_id": 598259105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600213464",
    "pull_request_review_id": 619374017,
    "id": 600213464,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMzQ2NA==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It should be fixed now. Even though I still think `ranges` is not a good word. `groups`?",
    "created_at": "2021-03-24T06:50:17Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600213464",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600213464"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600213464"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600213464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1595,
    "side": "RIGHT",
    "in_reply_to_id": 599875604
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600784015",
    "pull_request_review_id": 620130983,
    "id": 600784015,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDc4NDAxNQ==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@jonatack Do I understand correctly that `CAmount fpb = fee / size` is equivalent with `CAmount fpb = CFeeRate(fee, size).GetFee(1)`? Is that what you propose to use?\r\n",
    "created_at": "2021-03-24T18:57:58Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600784015",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600784015"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600784015"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600784015/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1527,
    "side": "RIGHT",
    "in_reply_to_id": 598259105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601617528",
    "pull_request_review_id": 621285483,
    "id": 601617528,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTYxNzUyOA==",
    "diff_hunk": "@@ -1501,14 +1502,88 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\n+\n+            CHECK_NONFATAL(size > 0);\n+            CHECK_NONFATAL(asize > 0);\n+            CHECK_NONFATAL(dsize > 0);\n+            CHECK_NONFATAL(asize + dsize - size > 0);\n+\n+            CAmount fpb{fee / size};     // fee per byte\n+            CAmount afpb{afees / asize}; // fee per byte including ancestors\n+            CAmount dfpb{dfees / dsize}; // fee per byte including descendants\n+            CAmount tfpb{(afees + dfees - fee) / (asize + dsize - size)};\n+            CAmount feeperbyte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "naming style nit, per developer-notes.md \r\n```suggestion\r\n            CAmount fee_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\r\n```",
    "created_at": "2021-03-25T15:53:20Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601617528",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601617528"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601617528"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601617528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1535,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601666661",
    "pull_request_review_id": 621285483,
    "id": 601666661,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTY2NjY2MQ==",
    "diff_hunk": "@@ -1520,15 +1595,42 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"ranges\", \"Feerate groups\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulated size of all transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulated fees of all transactions in feerate group (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transactions with feerates equal or greater than this value (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transactions with feerates less than this value (in satoshis)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in satoshis)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"([1, 10, 100, 200, 400, 800])\") +",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 132,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "missing quotes in the first example, I think, and perhaps use example fee rates that return more interesting results\r\n```diff\r\n-                    HelpExampleCli(\"getmempoolinfo\", R\"([1, 10, 100, 200, 400, 800])\") +\r\n+                    HelpExampleCli(\"getmempoolinfo\", R\"('[1, 5, 10, 25, 50, 100]')\") +\r\n                     HelpExampleRpc(\"getmempoolinfo\", \"\") +\r\n-                    HelpExampleRpc(\"getmempoolinfo\", R\"([1, 10, 100, 200, 400, 800])\")\r\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([1, 5, 10, 25, 50, 100])\")\r\n```\r\n",
    "created_at": "2021-03-25T16:49:15Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601666661",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601666661"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601666661"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601666661/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1616,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601711097",
    "pull_request_review_id": 621285483,
    "id": 601711097,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTcxMTA5Nw==",
    "diff_hunk": "@@ -1520,15 +1595,42 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"ranges\", \"Feerate groups\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulated size of all transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulated fees of all transactions in feerate group (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transactions with feerates equal or greater than this value (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transactions with feerates less than this value (in satoshis)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in satoshis)\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 125,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This field seems to be the same as the `total_fee` field above in the same output (except that it is now in sat/vB instead of BTC/kvB)?",
    "created_at": "2021-03-25T17:44:17Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601711097",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601711097"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601711097"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601711097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1611,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601729062",
    "pull_request_review_id": 621434271,
    "id": 601729062,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTcyOTA2Mg==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You can verify this with, for example\r\n```cpp\r\n            assert(fpb == CFeeRate(fee, size).GetFee(1));\r\n            assert(afpb == CFeeRate(afees, asize).GetFee(1));\r\n            assert(dfpb == CFeeRate(dfees, dsize).GetFee(1));\r\n            assert(tfpb == CFeeRate(afees + dfees - fee, asize + dsize - size).GetFee(1));\r\n```\r\n(I left this as a hint in the suggestions in https://github.com/bitcoin/bitcoin/pull/21422#pullrequestreview-621285483, but please remove it and decide what you think is best)",
    "created_at": "2021-03-25T18:07:44Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601729062",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601729062"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601729062"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601729062/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1527,
    "side": "RIGHT",
    "in_reply_to_id": 598259105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601730401",
    "pull_request_review_id": 621435975,
    "id": 601730401,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTczMDQwMQ==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "maybe `fee rate groups`",
    "created_at": "2021-03-25T18:09:32Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601730401",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601730401"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601730401"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601730401/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1595,
    "side": "RIGHT",
    "in_reply_to_id": 599875604
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602114346",
    "pull_request_review_id": 621906152,
    "id": 602114346,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjExNDM0Ng==",
    "diff_hunk": "@@ -1501,14 +1502,88 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\n+\n+            CHECK_NONFATAL(size > 0);\n+            CHECK_NONFATAL(asize > 0);\n+            CHECK_NONFATAL(dsize > 0);\n+            CHECK_NONFATAL(asize + dsize - size > 0);\n+\n+            CAmount fpb{fee / size};     // fee per byte\n+            CAmount afpb{afees / asize}; // fee per byte including ancestors\n+            CAmount dfpb{dfees / dsize}; // fee per byte including descendants\n+            CAmount tfpb{(afees + dfees - fee) / (asize + dsize - size)};\n+            CAmount feeperbyte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! Applied.",
    "created_at": "2021-03-26T08:59:39Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602114346",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602114346"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602114346"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602114346/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1535,
    "side": "RIGHT",
    "in_reply_to_id": 601617528
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602115185",
    "pull_request_review_id": 621907309,
    "id": 602115185,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjExNTE4NQ==",
    "diff_hunk": "@@ -1520,15 +1595,42 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"ranges\", \"Feerate groups\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulated size of all transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulated fees of all transactions in feerate group (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transactions with feerates equal or greater than this value (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transactions with feerates less than this value (in satoshis)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in satoshis)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"([1, 10, 100, 200, 400, 800])\") +",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 132,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You are right. I have used the values from the first chart on http://bitcoin-mempool.info website and those are actually the same as the values in the [original PR](https://github.com/bitcoin/bitcoin/pull/15836/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1497).",
    "created_at": "2021-03-26T09:00:58Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602115185",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602115185"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602115185"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602115185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1616,
    "side": "RIGHT",
    "in_reply_to_id": 601666661
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602115899",
    "pull_request_review_id": 621908331,
    "id": 602115899,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjExNTg5OQ==",
    "diff_hunk": "@@ -1520,15 +1595,42 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"ranges\", \"Feerate groups\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulated size of all transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulated fees of all transactions in feerate group (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transactions with feerates equal or greater than this value (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transactions with feerates less than this value (in satoshis)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in satoshis)\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 125,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No. In short, it holds that `fee_histogram.total_fees <= total_fee`. More precisely, the `total_fees` (i.e. the histogram JSON property) here is a sum of `fees` JSON properties from fee rate groups (i.e. `ranges`). For example, `./bitcoin-cli getmempoolinfo \"[0]\"` should show the difference but not on testnet because people mostly do not pay any fees there (\ud83d\ude44).\r\n\r\nHowever, I'm somewhat hesitant whether `total_fees` is useful or not. One can certainly compute it as it is a simple sum of already provided data. So it feels like I should remove it so that Bitcoin Core provides raw data and let customer applications do complex things based on the raw data. Of course, this is very subjective. I'm not sure. I'm neutral on this.",
    "created_at": "2021-03-26T09:02:14Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602115899",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602115899"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602115899"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602115899/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1611,
    "side": "RIGHT",
    "in_reply_to_id": 601711097
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602116946",
    "pull_request_review_id": 621909832,
    "id": 602116946,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjExNjk0Ng==",
    "diff_hunk": "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "81cd4bb4822ed236fd561c8686f464abb3b1492a",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! I like `CFeeRate` better as then I don't add new divisions myself. The asserts work for me okay.",
    "created_at": "2021-03-26T09:04:03Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602116946",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602116946"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602116946"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602116946/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1527,
    "side": "RIGHT",
    "in_reply_to_id": 598259105
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602117386",
    "pull_request_review_id": 621910527,
    "id": 602117386,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjExNzM4Ng==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I have changed it to `fee_rate_groups`. I think it looks nicer now. What do you think?",
    "created_at": "2021-03-26T09:04:50Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602117386",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602117386"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602117386"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602117386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1595,
    "side": "RIGHT",
    "in_reply_to_id": 599875604
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602616548",
    "pull_request_review_id": 622572094,
    "id": 602616548,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjYxNjU0OA==",
    "diff_hunk": "@@ -1501,34 +1501,140 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\n+\n+            CHECK_NONFATAL(size > 0);\n+            CHECK_NONFATAL(asize > 0);\n+            CHECK_NONFATAL(dsize > 0);\n+            CHECK_NONFATAL(asize + dsize - size > 0);",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 37,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "ccb043c8099f7a4cadd85274221b67dda0731caf",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Drive-by comment: now that you're constructing the fee rates with the `CFeeRate` ctor, there is no longer a need for these greater than zero checks. Will re-review the rest.",
    "created_at": "2021-03-26T22:34:00Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602616548",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602616548"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602616548"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602616548/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1528,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602617365",
    "pull_request_review_id": 622573036,
    "id": 602617365,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjYxNzM2NQ==",
    "diff_hunk": "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "LGTM",
    "created_at": "2021-03-26T22:36:47Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602617365",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602617365"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602617365"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602617365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1595,
    "side": "RIGHT",
    "in_reply_to_id": 599875604
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602706785",
    "pull_request_review_id": 622641995,
    "id": 602706785,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjcwNjc4NQ==",
    "diff_hunk": "@@ -1501,34 +1501,140 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\n+\n+            CHECK_NONFATAL(size > 0);\n+            CHECK_NONFATAL(asize > 0);\n+            CHECK_NONFATAL(dsize > 0);\n+            CHECK_NONFATAL(asize + dsize - size > 0);",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 37,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "ccb043c8099f7a4cadd85274221b67dda0731caf",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, good point. Thank you",
    "created_at": "2021-03-27T11:25:05Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602706785",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602706785"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602706785"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602706785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1528,
    "side": "RIGHT",
    "in_reply_to_id": 602616548
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602889335",
    "pull_request_review_id": 622754580,
    "id": 602889335,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjg4OTMzNQ==",
    "diff_hunk": "@@ -1501,34 +1501,135 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "7b6da9fa33c94553436721d39634b53b706a1e72",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A couple of missing headers and a suggested (tested) update now that we are using the `CFeeRate{CAmount, size_t}` ctor to construct the fee rates:\r\n\r\n<details><summary>diff</summary><p>\r\n\r\n```diff\r\ndiff --git a/src/rest.cpp b/src/rest.cpp\r\nindex 809daa0ef8..400972c092 100644\r\n--- a/src/rest.cpp\r\n+++ b/src/rest.cpp\r\n@@ -26,6 +26,8 @@\r\n \r\n #include <univalue.h>\r\n \r\n+#include <optional>\r\n+\r\n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\r\ndiff --git a/src/rpc/blockchain.cpp b/src/rpc/blockchain.cpp\r\nindex d4035c3d0a..5e44990b57 100644\r\n--- a/src/rpc/blockchain.cpp\r\n+++ b/src/rpc/blockchain.cpp\r\n@@ -45,6 +45,7 @@\r\n #include <condition_variable>\r\n #include <memory>\r\n #include <mutex>\r\n+#include <optional>\r\n \r\n struct CUpdatedBlock\r\n {\r\n@@ -1503,7 +1504,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHi\r\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\r\n \r\n     if (feeLimits) {\r\n-        const MempoolHistogramFeeRates& limits = feeLimits.value();\r\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\r\n \r\n         /* Keep histogram per...\r\n          * ... cumulated tx sizes\r\n@@ -1514,23 +1515,18 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHi\r\n         std::vector<CAmount> fees(limits.size(), 0);\r\n \r\n         for (const CTxMemPoolEntry& e : pool.mapTx) {\r\n-            const CAmount fee{e.GetFee()};\r\n-            const CAmount afees{e.GetModFeesWithAncestors()};\r\n-            const CAmount dfees{e.GetModFeesWithDescendants()};\r\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\r\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};\r\n \r\n-            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\r\n-            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\r\n-            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\r\n-\r\n-            const CAmount fpb{CFeeRate(fee, size).GetFee(1)};     // fee per byte\r\n-            const CAmount afpb{CFeeRate(afees, asize).GetFee(1)}; // fee per byte including ancestors\r\n-            const CAmount dfpb{CFeeRate(dfees, dsize).GetFee(1)}; // fee per byte including descendants\r\n-            const CAmount tfpb{CFeeRate(afees + dfees - fee, asize + dsize - size).GetFee(1)};\r\n-            const CAmount fee_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\r\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // fee rate per byte\r\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // fee rate per byte including ancestors\r\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // fee rate per byte including descendants\r\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\r\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\r\n \r\n             // Distribute fee rates into fee limits\r\n             for (int i = limits.size() - 1; i >= 0; --i) {\r\n-                if (fee_per_byte >= limits[i]) {\r\n+                if (fee_rate_per_byte >= limits[i]) {\r\n                     sizes[i] += size;\r\n                     ++count[i];\r\n                     fees[i] += fee;\r\n```\r\n</p></details>\r\n",
    "created_at": "2021-03-28T14:55:54Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602889335",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602889335"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602889335"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602889335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1523,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602890855",
    "pull_request_review_id": 622754580,
    "id": 602890855,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjg5MDg1NQ==",
    "diff_hunk": "@@ -55,6 +55,11 @@ def assert_greater_than(thing1, thing2):\n         raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n \n \n+def assert_no_key(k, d):\n+    if k in d:\n+        raise AssertionError(\"%s in %s\" % (str(k), str(d)))",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 6,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "7b6da9fa33c94553436721d39634b53b706a1e72",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "suggestion\r\n```diff\r\n-def assert_no_key(k, d):\r\n-    if k in d:\r\n-        raise AssertionError(\"%s in %s\" % (str(k), str(d)))\r\n+def assert_no_key(key, dictionary):\r\n+    if key in dictionary:\r\n+        raise AssertionError(f\"Key '{key}' not expected to be found in {dictionary}\")\r\n```\r\n\r\nwhich uses Python f-strings per current practice and would improve the error message from, for example\r\n\r\n```\r\n    raise AssertionError(\"%s in %s\" % (str(k), str(d)))\r\nAssertionError: size in {'loaded': True, 'size': 1, 'bytes': 219, 'usage': 1072, 'total_fee': Decimal('0.00004380'), 'maxmempool': 300000000, 'mempoolminfee': Decimal('0.00001000'), 'minrelaytxfee': Decimal('0.00001000'), 'unbroadcastcount': 1}\r\n```\r\nto\r\n```\r\n    raise AssertionError(f\"Key '{key}' not expected to be found in {dictionary}\")\r\nAssertionError: Key 'size' not expected to be found in {'loaded': True, 'size': 1, 'bytes': 219, 'usage': 1072, 'total_fee': Decimal('0.00004380'), 'maxmempool': 300000000, 'mempoolminfee': Decimal('0.00001000'), 'minrelaytxfee': Decimal('0.00001000'), 'unbroadcastcount': 1}\r\n```\r\n",
    "created_at": "2021-03-28T15:09:12Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602890855",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602890855"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602890855"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602890855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602892365",
    "pull_request_review_id": 622756564,
    "id": 602892365,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjg5MjM2NQ==",
    "diff_hunk": "@@ -0,0 +1,49 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        info = node.getmempoolinfo()\n+        assert_no_key('fee_histogram', info)\n+\n+        info = node.getmempoolinfo([100, 200, 300, 400, 500])",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": null,
    "original_position": 30,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "7b6da9fa33c94553436721d39634b53b706a1e72",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, and can add logging:\r\n\r\n```diff\r\ndiff --git a/test/functional/mempool_fee_histogram.py b/test/functional/mempool_fee_histogram.py\r\nindex 01fd7825b3..3edd31447b 100755\r\n--- a/test/functional/mempool_fee_histogram.py\r\n+++ b/test/functional/mempool_fee_histogram.py\r\n@@ -21,12 +21,12 @@ class MempoolFeeHistogramTest(BitcoinTestFramework):\r\n \r\n     def run_test(self):\r\n         node = self.nodes[0]\r\n-\r\n         node.sendtoaddress(node.getnewaddress(), 1)\r\n \r\n-        info = node.getmempoolinfo()\r\n-        assert_no_key('fee_histogram', info)\r\n+        self.log.info(\"Test getmempoolinfo does not return fee histogram by default\")\r\n+        assert_no_key('fee_histogram', node.getmempoolinfo())\r\n \r\n+        self.log.info(\"Test getmempoolinfo returns fee histogram if fee rate array is passed\")\r\n         info = node.getmempoolinfo([100, 200, 300, 400, 500])\r\n```\r\n",
    "created_at": "2021-03-28T15:23:08Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602892365",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602892365"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602892365"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602892365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603037933",
    "pull_request_review_id": 622894767,
    "id": 603037933,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzAzNzkzMw==",
    "diff_hunk": "@@ -1501,34 +1501,135 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "7b6da9fa33c94553436721d39634b53b706a1e72",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thank you for the valuable feedback! Addressed.\r\n\r\nShould I add `#include <optional>` to `blockchain.h` too? Did you notice those missing `#include <optional>` or is there a tool that would warn me in the future?",
    "created_at": "2021-03-29T06:21:58Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603037933",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603037933"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603037933"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603037933/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1523,
    "side": "RIGHT",
    "in_reply_to_id": 602889335
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603038570",
    "pull_request_review_id": 622895590,
    "id": 603038570,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzAzODU3MA==",
    "diff_hunk": "@@ -55,6 +55,11 @@ def assert_greater_than(thing1, thing2):\n         raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n \n \n+def assert_no_key(k, d):\n+    if k in d:\n+        raise AssertionError(\"%s in %s\" % (str(k), str(d)))",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 6,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "7b6da9fa33c94553436721d39634b53b706a1e72",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nice, I didn't know about these f-string. Thanks.",
    "created_at": "2021-03-29T06:23:49Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603038570",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603038570"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603038570"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603038570/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT",
    "in_reply_to_id": 602890855
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603038896",
    "pull_request_review_id": 622896003,
    "id": 603038896,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzAzODg5Ng==",
    "diff_hunk": "@@ -0,0 +1,49 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        info = node.getmempoolinfo()\n+        assert_no_key('fee_histogram', info)\n+\n+        info = node.getmempoolinfo([100, 200, 300, 400, 500])",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": null,
    "original_position": 30,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "7b6da9fa33c94553436721d39634b53b706a1e72",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thank you, fixed!",
    "created_at": "2021-03-29T06:24:39Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603038896",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603038896"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603038896"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603038896/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 602892365
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/604793435",
    "pull_request_review_id": 625150489,
    "id": 604793435,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc5MzQzNQ==",
    "diff_hunk": "@@ -1503,34 +1504,130 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // fee rate per byte including descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 41,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3b2db54fbd3a40ef44a1af28d046f920ef2c9620",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@jonatack I still struggle with this as I'm not sure whether this is correct or not. It is in the original PR but:\r\n\r\n* Is this how it should be done?\r\n* Is there a better way?\r\n* Is it a copy of some existing code?\r\n\r\nIt's very important and I don't really know the answer now. So I put it here even for my own reference.",
    "created_at": "2021-03-31T10:50:06Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r604793435",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/604793435"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r604793435"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/604793435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1523,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1671,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611171247",
    "pull_request_review_id": 633000042,
    "id": 611171247,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTE3MTI0Nw==",
    "diff_hunk": "@@ -1503,34 +1504,130 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // fee rate per byte including descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (int i = limits.size() - 1; i >= 0; --i) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", \"max\"); // TODO.",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 64,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3b2db54fbd3a40ef44a1af28d046f920ef2c9620",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think we have the following choices here:\r\n\r\n1. Make it: \"to\": null\r\n2. Represent range with arrays: [1, 2], [2, 3], [3]\r\n3. Remove \"to\"\r\n4. Remove both \"from\" & \"to\"\r\n\r\nI would go with the option 1 or 3.",
    "created_at": "2021-04-11T11:08:38Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r611171247",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611171247"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r611171247"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611171247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1550,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611438651",
    "pull_request_review_id": 633282993,
    "id": 611438651,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTQzODY1MQ==",
    "diff_hunk": "@@ -1503,34 +1504,130 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // fee rate per byte including descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 41,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "3b2db54fbd3a40ef44a1af28d046f920ef2c9620",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is useful #12118 to understand how txs are sorted in mempool.",
    "created_at": "2021-04-12T08:44:39Z",
    "updated_at": "2021-04-18T11:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r611438651",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611438651"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r611438651"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611438651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1523,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1671,
    "side": "RIGHT",
    "in_reply_to_id": 604793435
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644739703",
    "pull_request_review_id": 675206546,
    "id": 644739703,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDczOTcwMw==",
    "diff_hunk": "@@ -1545,34 +1546,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "tx size is limited to uint32_t on all platforms on master\r\n\r\n```suggestion\r\n            const uint32_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};\r\n```",
    "created_at": "2021-06-03T12:13:26Z",
    "updated_at": "2021-06-03T12:13:26Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r644739703",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644739703"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r644739703"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644739703/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1563,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645025479",
    "pull_request_review_id": 675594028,
    "id": 645025479,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTAyNTQ3OQ==",
    "diff_hunk": "@@ -1545,34 +1546,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thank you, I have tried to address that to avoid subsequent narrowing warnings.\r\n\r\nEdit: Any guidance on how to fix this correctly would be greatly appreaciated. ",
    "created_at": "2021-06-03T18:13:30Z",
    "updated_at": "2021-06-03T20:43:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r645025479",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645025479"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r645025479"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645025479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1563,
    "side": "RIGHT",
    "in_reply_to_id": 644739703
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654597871",
    "pull_request_review_id": 687628439,
    "id": 654597871,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDU5Nzg3MQ==",
    "diff_hunk": "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why are you downgrading these to `uint32_t`?",
    "created_at": "2021-06-18T17:55:40Z",
    "updated_at": "2021-06-19T21:46:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654597871",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654597871"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654597871"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654597871/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1663,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654600168",
    "pull_request_review_id": 687628439,
    "id": 654600168,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDYwMDE2OA==",
    "diff_hunk": "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (int i = limits.size() - 1; i >= 0; --i) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should probably check for overflow explicitly if you use `int` here.\r\n\r\nOr something like:\r\n```suggestion\r\n            for (size_t i = limits.size(); i-- > 0; ) {\r\n```",
    "created_at": "2021-06-18T18:00:24Z",
    "updated_at": "2021-06-19T21:46:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654600168",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654600168"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654600168"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654600168/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1675,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654842428",
    "pull_request_review_id": 687628439,
    "id": 654842428,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg0MjQyOA==",
    "diff_hunk": "@@ -149,6 +149,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n+    { \"getmempoolinfo\", 0, \"fee_histogram\" },",
    "path": "src/rpc/client.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This shouldn't interrupt `getrawmempool`...",
    "created_at": "2021-06-19T21:32:02Z",
    "updated_at": "2021-06-19T21:46:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654842428",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654842428"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654842428"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654842428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 153,
    "original_line": 153,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654842629",
    "pull_request_review_id": 687628439,
    "id": 654842629,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg0MjYyOQ==",
    "diff_hunk": "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(102)\n+\n+        # We have two utxos and we do this:\n+        #\n+        # coinbase-tx-101 <- tx1 (5 sat/vB) <- tx2 (14 sat/vB) <----\\\n+        # coinbase-tx-102 <--------------------------------------- tx3 (6 sat/vB)\n+\n+        self.log.info(\"Test getmempoolinfo does not return fee histogram by default\")\n+        assert_no_key('fee_histogram', node.getmempoolinfo())\n+\n+        self.log.info(\"Test getmempoolinfo returns empty fee histogram when mempool is empty\")\n+        info = node.getmempoolinfo([1, 2, 3])\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(0, non_empty_groups)\n+        assert_equal(3, empty_groups)\n+        assert_equal(0, total_fees)\n+\n+        self.log.info(\"Test that we have two spendable utxos and lock the second one\")\n+        utxos = node.listunspent()\n+        assert_equal(2, len(utxos))\n+        node.lockunspent(False, [{\"txid\": utxos[1][\"txid\"], \"vout\": utxos[1][\"vout\"]}])\n+\n+        self.log.info(\"Send tx1 transaction with 5 sat/vB fee rate\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"50.0\"), fee_rate=5, subtractfeefromamount=True)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 1 transaction (tx1: 5 sat/vB)\")\n+        info = node.getmempoolinfo([1, 3, 5, 10])\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(1, non_empty_groups)\n+        assert_equal(3, empty_groups)\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['5']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+        self.log.info(\"Send tx2 transaction with 14 sat/vB fee rate (spends tx1 utxo)\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"25.0\"), fee_rate=14)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 2 transactions (tx1: 5 sat/vB, tx2: 14 sat/vB)\")\n+        info = node.getmempoolinfo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n+\n+        # Both tx1 and tx2 are supposed to be reported in 8 sat/vB fee rate group\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(1, non_empty_groups)\n+        assert_equal(14, empty_groups)\n+        assert_equal(2, info['fee_histogram']['fee_rate_groups']['8']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+        # Unlock the second UTXO which we locked\n+        node.lockunspent(True, [{\"txid\": utxos[1][\"txid\"], \"vout\": utxos[1][\"vout\"]}])\n+\n+        self.log.info(\"Send tx3 transaction with 6 sat/vB fee rate (spends all available utxos)\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"99.9\"), fee_rate=6)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 3 transactions (tx1: 5 sat/vB, tx2: 14 sat/vB, tx3: 6 sat/vB)\")\n+        info = node.getmempoolinfo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n+\n+        # Verify that each of 6, 7 and 8 sat/vB fee rate groups contain one transaction\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(3, non_empty_groups)\n+        assert_equal(12, empty_groups)\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['6']['count'])\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['7']['count'])\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['8']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+\n+    def histogram_stats(self, histogram):\n+        total_fees = 0\n+        empty_count = 0\n+        non_empty_count = 0\n+\n+        for key, bin in histogram['fee_rate_groups'].items():",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": 98,
    "original_position": 97,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is `bin` reserved in Python?",
    "created_at": "2021-06-19T21:34:33Z",
    "updated_at": "2021-06-19T21:46:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654842629",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654842629"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654842629"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654842629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 98,
    "original_line": 98,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654844704",
    "pull_request_review_id": 687852918,
    "id": 654844704,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg0NDcwNA==",
    "diff_hunk": "@@ -41,8 +41,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;\n+\n /** Mempool information to JSON */\n-UniValue MempoolInfoToJSON(const CTxMemPool& pool);\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHistogramFeeRates> feeLimits);",
    "path": "src/rpc/blockchain.h",
    "position": null,
    "original_position": 8,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Need to `#include <optional>` in this header",
    "created_at": "2021-06-19T21:57:35Z",
    "updated_at": "2021-06-19T21:57:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654844704",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654844704"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654844704"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654844704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654894740",
    "pull_request_review_id": 687878515,
    "id": 654894740,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg5NDc0MA==",
    "diff_hunk": "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(102)\n+\n+        # We have two utxos and we do this:\n+        #\n+        # coinbase-tx-101 <- tx1 (5 sat/vB) <- tx2 (14 sat/vB) <----\\\n+        # coinbase-tx-102 <--------------------------------------- tx3 (6 sat/vB)\n+\n+        self.log.info(\"Test getmempoolinfo does not return fee histogram by default\")\n+        assert_no_key('fee_histogram', node.getmempoolinfo())\n+\n+        self.log.info(\"Test getmempoolinfo returns empty fee histogram when mempool is empty\")\n+        info = node.getmempoolinfo([1, 2, 3])\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(0, non_empty_groups)\n+        assert_equal(3, empty_groups)\n+        assert_equal(0, total_fees)\n+\n+        self.log.info(\"Test that we have two spendable utxos and lock the second one\")\n+        utxos = node.listunspent()\n+        assert_equal(2, len(utxos))\n+        node.lockunspent(False, [{\"txid\": utxos[1][\"txid\"], \"vout\": utxos[1][\"vout\"]}])\n+\n+        self.log.info(\"Send tx1 transaction with 5 sat/vB fee rate\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"50.0\"), fee_rate=5, subtractfeefromamount=True)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 1 transaction (tx1: 5 sat/vB)\")\n+        info = node.getmempoolinfo([1, 3, 5, 10])\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(1, non_empty_groups)\n+        assert_equal(3, empty_groups)\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['5']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+        self.log.info(\"Send tx2 transaction with 14 sat/vB fee rate (spends tx1 utxo)\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"25.0\"), fee_rate=14)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 2 transactions (tx1: 5 sat/vB, tx2: 14 sat/vB)\")\n+        info = node.getmempoolinfo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n+\n+        # Both tx1 and tx2 are supposed to be reported in 8 sat/vB fee rate group\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(1, non_empty_groups)\n+        assert_equal(14, empty_groups)\n+        assert_equal(2, info['fee_histogram']['fee_rate_groups']['8']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+        # Unlock the second UTXO which we locked\n+        node.lockunspent(True, [{\"txid\": utxos[1][\"txid\"], \"vout\": utxos[1][\"vout\"]}])\n+\n+        self.log.info(\"Send tx3 transaction with 6 sat/vB fee rate (spends all available utxos)\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"99.9\"), fee_rate=6)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 3 transactions (tx1: 5 sat/vB, tx2: 14 sat/vB, tx3: 6 sat/vB)\")\n+        info = node.getmempoolinfo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n+\n+        # Verify that each of 6, 7 and 8 sat/vB fee rate groups contain one transaction\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(3, non_empty_groups)\n+        assert_equal(12, empty_groups)\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['6']['count'])\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['7']['count'])\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['8']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+\n+    def histogram_stats(self, histogram):\n+        total_fees = 0\n+        empty_count = 0\n+        non_empty_count = 0\n+\n+        for key, bin in histogram['fee_rate_groups'].items():",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": 98,
    "original_position": 97,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is not according to https://docs.python.org/3/reference/lexical_analysis.html#keywords",
    "created_at": "2021-06-20T07:58:12Z",
    "updated_at": "2021-06-20T07:58:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654894740",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654894740"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654894740"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654894740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 98,
    "original_line": 98,
    "side": "RIGHT",
    "in_reply_to_id": 654842629
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654899586",
    "pull_request_review_id": 687881868,
    "id": 654899586,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg5OTU4Ng==",
    "diff_hunk": "@@ -149,6 +149,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n+    { \"getmempoolinfo\", 0, \"fee_histogram\" },",
    "path": "src/rpc/client.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, thank you.",
    "created_at": "2021-06-20T08:38:38Z",
    "updated_at": "2021-06-20T08:38:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654899586",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654899586"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654899586"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654899586/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 153,
    "original_line": 153,
    "side": "RIGHT",
    "in_reply_to_id": 654842428
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654899601",
    "pull_request_review_id": 687881892,
    "id": 654899601,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg5OTYwMQ==",
    "diff_hunk": "@@ -41,8 +41,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;\n+\n /** Mempool information to JSON */\n-UniValue MempoolInfoToJSON(const CTxMemPool& pool);\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHistogramFeeRates> feeLimits);",
    "path": "src/rpc/blockchain.h",
    "position": null,
    "original_position": 8,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, thank you.",
    "created_at": "2021-06-20T08:38:47Z",
    "updated_at": "2021-06-20T08:38:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654899601",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654899601"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654899601"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654899601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT",
    "in_reply_to_id": 654844704
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654900143",
    "pull_request_review_id": 687882257,
    "id": 654900143,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDkwMDE0Mw==",
    "diff_hunk": "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (int i = limits.size() - 1; i >= 0; --i) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I have applied your suggestion. It is certainly not straightforward though.",
    "created_at": "2021-06-20T08:42:30Z",
    "updated_at": "2021-06-20T08:42:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654900143",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654900143"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654900143"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654900143/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1675,
    "side": "RIGHT",
    "in_reply_to_id": 654600168
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654901418",
    "pull_request_review_id": 687883093,
    "id": 654901418,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDkwMTQxOA==",
    "diff_hunk": "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Your question is probably related to Marco's comment here: https://github.com/bitcoin/bitcoin/pull/21422#discussion_r644739703. And as I said there, any guidance on this would be greatly appreciated.\r\n\r\nEdit: I have rebased this PR so that this PR builds on *tx size is limited to uint32_t on all platforms on master*",
    "created_at": "2021-06-20T08:52:35Z",
    "updated_at": "2021-06-20T08:55:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654901418",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654901418"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654901418"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654901418/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1663,
    "side": "RIGHT",
    "in_reply_to_id": 654597871
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687916086",
    "pull_request_review_id": 728853354,
    "id": 687916086,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzkxNjA4Ng==",
    "diff_hunk": "@@ -29,6 +29,8 @@\n \n #include <univalue.h>\n \n+#include <optional>",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "36f5e224f5f555ed68d373f0c1ee739ff6d4bf46",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This should be above, after &lt;any&gt;",
    "created_at": "2021-08-12T16:46:38Z",
    "updated_at": "2021-08-12T16:46:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r687916086",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687916086"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r687916086"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687916086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 32,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687939272",
    "pull_request_review_id": 728883855,
    "id": 687939272,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzkzOTI3Mg==",
    "diff_hunk": "@@ -1545,34 +1546,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Putting such an assumption here is unnecessarily bug-prone for no benefit. All the functions involved return 64-bit types, so should not be truncated. Furthermore, GetSizeWith* may very well include multiple transactions. `size_t` is the right type here IMO.",
    "created_at": "2021-08-12T17:18:58Z",
    "updated_at": "2021-08-12T17:18:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r687939272",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687939272"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r687939272"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687939272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1563,
    "side": "RIGHT",
    "in_reply_to_id": 644739703
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688278205",
    "pull_request_review_id": 729304206,
    "id": 688278205,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODI3ODIwNQ==",
    "diff_hunk": "@@ -29,6 +29,8 @@\n \n #include <univalue.h>\n \n+#include <optional>",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "36f5e224f5f555ed68d373f0c1ee739ff6d4bf46",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed, thank you.",
    "created_at": "2021-08-13T06:36:12Z",
    "updated_at": "2021-08-13T06:36:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r688278205",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688278205"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r688278205"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688278205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 32,
    "side": "RIGHT",
    "in_reply_to_id": 687916086
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689293178",
    "pull_request_review_id": 730396365,
    "id": 689293178,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTI5MzE3OA==",
    "diff_hunk": "@@ -1545,34 +1546,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Putting such an assumption here is unnecessarily bug-prone for no benefit.\r\n\r\nThen #21848 should be reverted first. Otherwise using size_t here is compiled down to the same code anyway.",
    "created_at": "2021-08-16T07:20:51Z",
    "updated_at": "2021-08-16T07:20:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r689293178",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689293178"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r689293178"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689293178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1563,
    "side": "RIGHT",
    "in_reply_to_id": 644739703
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754233659",
    "pull_request_review_id": 812481523,
    "id": 754233659,
    "node_id": "PRRC_kwDOABII584s9LE7",
    "diff_hunk": "@@ -41,8 +42,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;",
    "path": "src/rpc/blockchain.h",
    "position": 12,
    "original_position": 12,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I guess  `CAmount` works here, but the values actually represent a feerate (\u2208 N*) and not an [`/** Amount in satoshis (Can be negative) */`](https://github.com/bitcoin/bitcoin/blob/95d19f8c1a40a7531d2bb00febd245d127293a64/src/consensus/amount.h#L11).\r\n\r\nMaybe?\r\n ```suggestion\r\ntypedef std::vector<uint64_t> MempoolHistogramFeeRates;\r\n```\r\n\r\nFeel free to ignore this though.",
    "created_at": "2021-11-22T12:37:55Z",
    "updated_at": "2021-11-22T16:50:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754233659",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754233659"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754233659"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754233659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 45,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754275234",
    "pull_request_review_id": 812481523,
    "id": 754275234,
    "node_id": "PRRC_kwDOABII584s9VOi",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 105,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think `/kvB` was mistakenly added here and should be dropped. `total_fee` is not a feerate. Do you know if this was meant to be added somewhere else?",
    "created_at": "2021-11-22T13:24:58Z",
    "updated_at": "2021-11-22T16:50:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754275234",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754275234"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754275234"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754275234/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1731,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754286176",
    "pull_request_review_id": 812542880,
    "id": 754286176,
    "node_id": "PRRC_kwDOABII584s9X5g",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid number of parameters\");\n+        }\n+\n+        for (size_t i = 0; i < feelimits_univalue.size(); ++i) {\n+            int64_t value = feelimits_univalue[i].get_int64();\n+\n+            if (value < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Non-negative values are expected\");\n+            } else if (i > 0 && feelimits.back() >= value) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 152,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "brunoerg",
      "id": 19480819,
      "node_id": "MDQ6VXNlcjE5NDgwODE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brunoerg",
      "html_url": "https://github.com/brunoerg",
      "followers_url": "https://api.github.com/users/brunoerg/followers",
      "following_url": "https://api.github.com/users/brunoerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/brunoerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
      "organizations_url": "https://api.github.com/users/brunoerg/orgs",
      "repos_url": "https://api.github.com/users/brunoerg/repos",
      "events_url": "https://api.github.com/users/brunoerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brunoerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What's the reason for this `i > 0` here?",
    "created_at": "2021-11-22T13:37:15Z",
    "updated_at": "2021-11-22T13:37:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754286176",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754286176"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754286176"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754286176/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1767,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754337592",
    "pull_request_review_id": 812615823,
    "id": 754337592,
    "node_id": "PRRC_kwDOABII584s9kc4",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid number of parameters\");\n+        }\n+\n+        for (size_t i = 0; i < feelimits_univalue.size(); ++i) {\n+            int64_t value = feelimits_univalue[i].get_int64();\n+\n+            if (value < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Non-negative values are expected\");\n+            } else if (i > 0 && feelimits.back() >= value) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 152,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "So you take one value at a time and compare it with the previous one to make sure that the sequence is an increasing one. For `i == 0`, you don't have any previous value to compare with.",
    "created_at": "2021-11-22T14:37:28Z",
    "updated_at": "2021-11-22T14:37:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754337592",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754337592"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754337592"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754337592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1767,
    "side": "RIGHT",
    "in_reply_to_id": 754286176
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754361619",
    "pull_request_review_id": 812481523,
    "id": 754361619,
    "node_id": "PRRC_kwDOABII584s9qUT",
    "diff_hunk": "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(102)\n+\n+        # We have two utxos and we do this:\n+        #\n+        # coinbase-tx-101 <- tx1 (5 sat/vB) <- tx2 (14 sat/vB) <----\\\n+        # coinbase-tx-102 <--------------------------------------- tx3 (6 sat/vB)",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": null,
    "original_position": 32,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "These are the coinbase transactions for block 1 and block 2 not block 101 and block 102. The coinbase utxos for block 101 and block 102 aren't mature. However, I don't think it's important that the UTXOs are Coinbase UTXOs.\r\n\r\nI found the ASCII art to be harder/took longer to understand than e.g. a comment like:\r\n\r\n```\r\n We have two UTXOs (utxo_1 and utxo_2) and create three changeless transactions:\r\n - tx1 (5 sat/vB): spending utxo_1\r\n - tx2 (14 sat/vB): spending output from tx1\r\n - tx3 (6 sat/vB): spending utxo_2 and the output from tx2 \r\n```",
    "created_at": "2021-11-22T15:02:19Z",
    "updated_at": "2021-11-22T16:50:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754361619",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754361619"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754361619"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754361619/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 29,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 32,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754375897",
    "pull_request_review_id": 812481523,
    "id": 754375897,
    "node_id": "PRRC_kwDOABII584s9tzZ",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 143,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is there a reason to limit this to specifically 30? \r\n\r\nIf there is, I think it should be a constant and it should be tested. \r\n\r\nIf not, I could image someone might want to use this with `[1, 2, 3, ..., 9999, 10000]` (or even more).",
    "created_at": "2021-11-22T15:17:04Z",
    "updated_at": "2021-11-22T16:50:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754375897",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754375897"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754375897"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754375897/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1758,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754423967",
    "pull_request_review_id": 812481523,
    "id": 754423967,
    "node_id": "PRRC_kwDOABII584s95if",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: could add\r\n```suggestion\r\n                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group (in vBytes)\"},\r\n```",
    "created_at": "2021-11-22T16:06:41Z",
    "updated_at": "2021-11-22T16:50:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754423967",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754423967"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754423967"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754423967/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1742,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754425604",
    "pull_request_review_id": 812481523,
    "id": 754425604,
    "node_id": "PRRC_kwDOABII584s958E",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 123,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`total_fees` is not a feerate.\r\n```suggestion\r\n                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \")\"},\r\n```",
    "created_at": "2021-11-22T16:08:26Z",
    "updated_at": "2021-11-22T16:50:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754425604",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754425604"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754425604"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754425604/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1748,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754427248",
    "pull_request_review_id": 812738675,
    "id": 754427248,
    "node_id": "PRRC_kwDOABII584s96Vw",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid number of parameters\");\n+        }\n+\n+        for (size_t i = 0; i < feelimits_univalue.size(); ++i) {\n+            int64_t value = feelimits_univalue[i].get_int64();\n+\n+            if (value < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Non-negative values are expected\");\n+            } else if (i > 0 && feelimits.back() >= value) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 152,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "brunoerg",
      "id": 19480819,
      "node_id": "MDQ6VXNlcjE5NDgwODE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brunoerg",
      "html_url": "https://github.com/brunoerg",
      "followers_url": "https://api.github.com/users/brunoerg/followers",
      "following_url": "https://api.github.com/users/brunoerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/brunoerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
      "organizations_url": "https://api.github.com/users/brunoerg/orgs",
      "repos_url": "https://api.github.com/users/brunoerg/repos",
      "events_url": "https://api.github.com/users/brunoerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brunoerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Perfect. Thank you.",
    "created_at": "2021-11-22T16:10:16Z",
    "updated_at": "2021-11-22T16:10:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754427248",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754427248"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754427248"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754427248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1767,
    "side": "RIGHT",
    "in_reply_to_id": 754286176
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754435154",
    "pull_request_review_id": 812749707,
    "id": 754435154,
    "node_id": "PRRC_kwDOABII584s98RS",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid number of parameters\");\n+        }\n+\n+        for (size_t i = 0; i < feelimits_univalue.size(); ++i) {\n+            int64_t value = feelimits_univalue[i].get_int64();\n+\n+            if (value < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Non-negative values are expected\");\n+            } else if (i > 0 && feelimits.back() >= value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Strictly increasing values are expected\");\n+            }\n+\n+            feelimits.push_back(value);\n+        }\n+        feelimits_opt = std::optional<MempoolHistogramFeeRates>(feelimits);",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 158,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Using `std::move(feelimits)` will avoid a vector copy. Same with the `MempoolInfoToJSON` call below.",
    "created_at": "2021-11-22T16:19:21Z",
    "updated_at": "2021-11-22T16:30:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754435154",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754435154"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754435154"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754435154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1780,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754436963",
    "pull_request_review_id": 812749707,
    "id": 754436963,
    "node_id": "PRRC_kwDOABII584s98tj",
    "diff_hunk": "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why not use uint64_t for everything? `GetSizeWithAncestors()` returns a uint64_t too.",
    "created_at": "2021-11-22T16:21:23Z",
    "updated_at": "2021-11-22T16:30:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754436963",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754436963"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754436963"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754436963/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1663,
    "side": "RIGHT",
    "in_reply_to_id": 654597871
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754438676",
    "pull_request_review_id": 812749707,
    "id": 754438676,
    "node_id": "PRRC_kwDOABII584s99IU",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think using ancestor feerates here is going to distort the result, because multiple transactions can have shared ancestors. Using descendant feerates is even more questionable to me, as they don't matter for transaction selection in blocks at all.\r\n\r\nImagine a situation with 3 transactions (example due to @Xekyo): one parent at 1 sat/vbyte, with two children each at 7 sat/vbyte, with all transactions the same size. The current code will classify the parent at 5 sat/vbyte, and the children each at 4 sat/vbyte. That's not accurate; e.g. the (weight-weighted) average of the reported feerates is 4.33, while the real average is 5, so this doesn't reflect the actual state of the mempool. It also doesn't correspond to the decisions actually made by miners, which with the current CPFP code would consider first a package of 1 parent + 1 child at 4 sat/vbyte, and then another child at 7 sat/vbyte.\r\n\r\nMy suggestion would be either:\r\n* (1) use only transaction feerates directly (no ancestors/descendants), and have a result that ignores CPFP-like mechanics. \r\n* (2) invoke the mining code to actually build a giant \"block\" from the entire mempool (ignoring weight limits), and have it report the feerates of its included packages (which are similar to what you'd get with ancestor fees/sizes, but is guaranteed not to count any transaction twice).",
    "created_at": "2021-11-22T16:23:10Z",
    "updated_at": "2021-11-22T18:37:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754438676"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754438676/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1667,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754449922",
    "pull_request_review_id": 812481523,
    "id": 754449922,
    "node_id": "PRRC_kwDOABII584s9_4C",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: my definition of feerate is `fee per size`. This doesn't really work with `fee rate per byte` as it would be a `fee per size per size`? Also not sure about variable names like `afpb` and `dfpb`. Why not just spell it out as e.g. `ancestor_feerate` and `descendant_feerate`?\r\n\r\n\r\n(I'm assuming `tfpb` means `total_feerate`?)\r\n\r\n```suggestion\r\n            const CAmount fee{e.GetFee()}, ancestor_fees{e.GetModFeesWithAncestors()}, descendant_fees{e.GetModFeesWithDescendants()};\r\n            const uint32_t size{(uint32_t)e.GetTxSize()}, ancestor_size{(uint32_t)e.GetSizeWithAncestors()}, descendant_size{(uint32_t)e.GetSizeWithDescendants()};\r\n\r\n            const CAmount feerate{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\r\n            const CAmount ancestor_feerate{CFeeRate{ancestor_fees, ancestor_size}.GetFee(1)}; // Fee rate per byte including ancestors\r\n            const CAmount descendant_feerate{CFeeRate{descendant_fees, descendant_size}.GetFee(1)}; // Fee rate per byte including descendants\r\n\r\n            // Fee rate per byte including ancestors & descendants\r\n            const CAmount total_feerate{CFeeRate{ancestor_fees + descendant_fees - fee, ancestor_size + descendant_size - size}.GetFee(1)};\r\n            const CAmount feerate{std::max(std::min(descendant_feerate, total_feerate), std::min(feerate, ancestor_feerate))};\r\n```",
    "created_at": "2021-11-22T16:35:24Z",
    "updated_at": "2021-11-22T16:50:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754449922",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754449922"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754449922"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754449922/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1662,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1671,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754451768",
    "pull_request_review_id": 812481523,
    "id": 754451768,
    "node_id": "PRRC_kwDOABII584s-AU4",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can you explain these two lines?\r\n\r\n```C++\r\n1670    const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\r\n1671    const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\r\n```",
    "created_at": "2021-11-22T16:37:32Z",
    "updated_at": "2021-11-22T16:50:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754451768",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754451768"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754451768"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754451768/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1670,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1671,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754535552",
    "pull_request_review_id": 812885610,
    "id": 754535552,
    "node_id": "PRRC_kwDOABII584s-UyA",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 119,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This also sounds like a fee not a feerate, i.e. should not have a `/vB`.",
    "created_at": "2021-11-22T18:28:14Z",
    "updated_at": "2021-11-22T18:45:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754535552",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754535552"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754535552"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754535552/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1744,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754541557",
    "pull_request_review_id": 812885610,
    "id": 754541557,
    "node_id": "PRRC_kwDOABII584s-WP1",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm confused by these as well.\r\n\r\nThis breaks down when there are multiple descendants or ancestors in various scenarios (all txs assumed to be same size). \r\n\r\nIf you e.g. had a parent transaction paying 5 sat/vB that had a child paying 1 sat/vB, the child would be irrelevant for the parent's effective feerate and vice versa. If you however have a parent paying 3 sat/vB, and two children where one pays 5 sat/vB and one pays 1 sat/vB. The one with the 5 sat/vB would form a CPFP situation with the parent, while the other child would be effectively unrelated: since the parent's feerate is larger than the child's, the ancestor will be included before the child independently. Only children pay for parents, parents don't pay for children in this case. ;)\r\n\r\nBeyond that, many transactions will have overlapping ancestries or descendants, which means that the bucketing across the complete graph of related transactions would often count related txs multiple times, e.g. where a parent paying 3 sat/vB has two children paying 4 sat/vB and 7 sat/vB, only the latter will form a CPFP and the parent will already be included when the child with 4 sat/vB is up for transaction selection.",
    "created_at": "2021-11-22T18:37:23Z",
    "updated_at": "2021-11-22T18:45:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754541557",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754541557"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754541557"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754541557/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1670,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1671,
    "side": "RIGHT",
    "in_reply_to_id": 754451768
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754603944",
    "pull_request_review_id": 812977683,
    "id": 754603944,
    "node_id": "PRRC_kwDOABII584s-leo",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> I think using ancestor feerates here is going to distort the result, because multiple transactions can have shared ancestors. Using descendant feerates is even more questionable to me, as they don't matter for transaction selection in blocks at all.\r\n\r\nSo I have adopted #15836 and did some modifications but I left L1665-L1667 as they were in the original PR because I was not sure why it was implemented that way. My attempts to contact the original author were unsuccessful for me to understand the motivation. Anyway, I knew back then that I didn't have a good explanation for the lines ... evidently rightly so. I should have added a comment warning about this though, that's my mistake, sorry for that.\r\n\r\nThank you for the analysis and the suggestions. I'll try to address the issue.",
    "created_at": "2021-11-22T20:15:25Z",
    "updated_at": "2021-11-22T20:15:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754603944",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754603944"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754603944"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754603944/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1667,
    "side": "RIGHT",
    "in_reply_to_id": 754438676
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754606100",
    "pull_request_review_id": 812980597,
    "id": 754606100,
    "node_id": "PRRC_kwDOABII584s-mAU",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I can only say this: https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754603944 and that I will try to fix it.",
    "created_at": "2021-11-22T20:19:07Z",
    "updated_at": "2021-11-22T20:19:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754606100",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754606100"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754606100"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754606100/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1670,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1671,
    "side": "RIGHT",
    "in_reply_to_id": 754451768
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754644262",
    "pull_request_review_id": 813031121,
    "id": 754644262,
    "node_id": "PRRC_kwDOABII584s-vUm",
    "diff_hunk": "@@ -1630,7 +1631,7 @@ static RPCHelpMan getchaintips()\n     };\n }\n \n-UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHistogramFeeRates> feeLimits)",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`feeLimits` seems like a confusing name for this - maybe change to e.g. `histogramFloors`?",
    "created_at": "2021-11-22T21:22:26Z",
    "updated_at": "2021-11-23T15:10:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754644262",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754644262"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754644262"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754644262/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1634,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754688921",
    "pull_request_review_id": 813031121,
    "id": 754688921,
    "node_id": "PRRC_kwDOABII584s-6OZ",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 137,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`feeLimits` also a confusing name here (see comment above)",
    "created_at": "2021-11-22T22:42:08Z",
    "updated_at": "2021-11-23T15:10:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754688921",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754688921"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754688921"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754688921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1752,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754859474",
    "pull_request_review_id": 813301588,
    "id": 754859474,
    "node_id": "PRRC_kwDOABII584s_j3S",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 105,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it was originally suggested here: https://github.com/bitcoin/bitcoin/pull/21422#pullrequestreview-621285483 but you are right. I will drop it. Thank you.",
    "created_at": "2021-11-23T07:41:20Z",
    "updated_at": "2021-11-23T07:41:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754859474",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754859474"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754859474"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754859474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1731,
    "side": "RIGHT",
    "in_reply_to_id": 754275234
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754862170",
    "pull_request_review_id": 813305199,
    "id": 754862170,
    "node_id": "PRRC_kwDOABII584s_kha",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks",
    "created_at": "2021-11-23T07:46:38Z",
    "updated_at": "2021-11-23T07:46:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754862170",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754862170"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754862170"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754862170/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1742,
    "side": "RIGHT",
    "in_reply_to_id": 754423967
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754863243",
    "pull_request_review_id": 813306554,
    "id": 754863243,
    "node_id": "PRRC_kwDOABII584s_kyL",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 123,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, thank you.\r\n\r\n(https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754859474)",
    "created_at": "2021-11-23T07:48:36Z",
    "updated_at": "2021-11-23T07:48:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754863243",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754863243"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754863243"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754863243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1748,
    "side": "RIGHT",
    "in_reply_to_id": 754425604
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754864922",
    "pull_request_review_id": 813308852,
    "id": 754864922,
    "node_id": "PRRC_kwDOABII584s_lMa",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 119,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, thanks.",
    "created_at": "2021-11-23T07:51:53Z",
    "updated_at": "2021-11-23T07:51:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754864922",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754864922"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754864922"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754864922/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1744,
    "side": "RIGHT",
    "in_reply_to_id": 754535552
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754867510",
    "pull_request_review_id": 813312386,
    "id": 754867510,
    "node_id": "PRRC_kwDOABII584s_l02",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 143,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The idea behind the limit was that I didn't want to let it be unbounded (`MempoolInfoToJSON` acquires `pool.cs` lock). If this is not a concern, I can remove the check or I can increase it substantially. \r\n\r\nI'm not sure what option is better really.",
    "created_at": "2021-11-23T07:56:37Z",
    "updated_at": "2021-11-23T07:56:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754867510",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754867510"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754867510"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754867510/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1758,
    "side": "RIGHT",
    "in_reply_to_id": 754375897
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754906415",
    "pull_request_review_id": 813364663,
    "id": 754906415,
    "node_id": "PRRC_kwDOABII584s_vUv",
    "diff_hunk": "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(102)\n+\n+        # We have two utxos and we do this:\n+        #\n+        # coinbase-tx-101 <- tx1 (5 sat/vB) <- tx2 (14 sat/vB) <----\\\n+        # coinbase-tx-102 <--------------------------------------- tx3 (6 sat/vB)",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": null,
    "original_position": 32,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The text is more clear. Thanks.\r\n\r\n(A *nicer* diagram would be even more clear ... :))",
    "created_at": "2021-11-23T08:55:02Z",
    "updated_at": "2021-11-23T08:55:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754906415",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754906415"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754906415"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754906415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 29,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 32,
    "side": "RIGHT",
    "in_reply_to_id": 754361619
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755026497",
    "pull_request_review_id": 813526690,
    "id": 755026497,
    "node_id": "PRRC_kwDOABII584tAMpB",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(COINBASE_MATURITY + 2)",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": null,
    "original_position": 28,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "47b5c3e03a71bb4c51e4948effec2a12943a7071",
    "user": {
      "login": "brunoerg",
      "id": 19480819,
      "node_id": "MDQ6VXNlcjE5NDgwODE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brunoerg",
      "html_url": "https://github.com/brunoerg",
      "followers_url": "https://api.github.com/users/brunoerg/followers",
      "following_url": "https://api.github.com/users/brunoerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/brunoerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
      "organizations_url": "https://api.github.com/users/brunoerg/orgs",
      "repos_url": "https://api.github.com/users/brunoerg/repos",
      "events_url": "https://api.github.com/users/brunoerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brunoerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Test is failing here. `TypeError: generatetoaddress() missing 1 required keyword-only argument: 'invalid_call'`. I think there is something wrong with the implementation of this function in `test_node` and I don't see any other test calling `generate` from node, I will take a look on it. But I think you can use `generatetoaddress` from `test_framework`. ",
    "created_at": "2021-11-23T11:19:12Z",
    "updated_at": "2021-11-23T11:19:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755026497",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755026497"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755026497"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755026497/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755055504",
    "pull_request_review_id": 813565730,
    "id": 755055504,
    "node_id": "PRRC_kwDOABII584tATuQ",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(COINBASE_MATURITY + 2)",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": null,
    "original_position": 28,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "47b5c3e03a71bb4c51e4948effec2a12943a7071",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, that's also a reason why I converted the PR to a draft. I have done as much as I could today. I will continue tomorrow.\r\n\r\nedit: Any help is certainly welcome. :)\r\n\r\nedit 2: It might be so that master branch has merged a PR that modifies this. I vaguely remember that I have seen a PR like that. If so, then rebase + fixing the call would do the trick probably.",
    "created_at": "2021-11-23T12:00:11Z",
    "updated_at": "2021-11-23T12:08:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755055504",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755055504"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755055504"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755055504/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT",
    "in_reply_to_id": 755026497
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755222173",
    "pull_request_review_id": 813031121,
    "id": 755222173,
    "node_id": "PRRC_kwDOABII584tA8ad",
    "diff_hunk": "@@ -56,6 +56,11 @@ def assert_greater_than(thing1, thing2):\n         raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n \n \n+def assert_no_key(key, dictionary):",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 4,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "47b5c3e03a71bb4c51e4948effec2a12943a7071",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is this necessary? Can't just write `assert(key not in dict)` inline?",
    "created_at": "2021-11-23T15:09:01Z",
    "updated_at": "2021-11-23T15:10:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755222173",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755222173"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755222173"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755222173/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755402684",
    "pull_request_review_id": 814038308,
    "id": 755402684,
    "node_id": "PRRC_kwDOABII584tBoe8",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@kiminuo Just in case it needs to be said: no need to apologize for trying to improve things. The final state of the code is everyone's responsibility; developers and reviewers.",
    "created_at": "2021-11-23T18:27:26Z",
    "updated_at": "2021-11-23T19:58:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755402684",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755402684"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755402684"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755402684/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1667,
    "side": "RIGHT",
    "in_reply_to_id": 754438676
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755458122",
    "pull_request_review_id": 814113307,
    "id": 755458122,
    "node_id": "PRRC_kwDOABII584tB2BK",
    "diff_hunk": "@@ -56,6 +56,11 @@ def assert_greater_than(thing1, thing2):\n         raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n \n \n+def assert_no_key(key, dictionary):",
    "path": "test/functional/test_framework/util.py",
    "position": null,
    "original_position": 4,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "47b5c3e03a71bb4c51e4948effec2a12943a7071",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is not. Good idea. Thanks.",
    "created_at": "2021-11-23T19:52:44Z",
    "updated_at": "2021-11-23T19:52:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755458122",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755458122"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755458122"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755458122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT",
    "in_reply_to_id": 755222173
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755459841",
    "pull_request_review_id": 814115591,
    "id": 755459841,
    "node_id": "PRRC_kwDOABII584tB2cB",
    "diff_hunk": "@@ -1630,7 +1631,7 @@ static RPCHelpMan getchaintips()\n     };\n }\n \n-UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHistogramFeeRates> feeLimits)",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 13,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, makes sense.",
    "created_at": "2021-11-23T19:55:27Z",
    "updated_at": "2021-11-23T19:55:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755459841",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755459841"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755459841"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755459841/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1634,
    "side": "RIGHT",
    "in_reply_to_id": 754644262
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755462169",
    "pull_request_review_id": 814118761,
    "id": 755462169,
    "node_id": "PRRC_kwDOABII584tB3AZ",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(COINBASE_MATURITY + 2)",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": null,
    "original_position": 28,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "47b5c3e03a71bb4c51e4948effec2a12943a7071",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Rebased because of #23300.",
    "created_at": "2021-11-23T19:59:12Z",
    "updated_at": "2021-11-23T19:59:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755462169",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755462169"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755462169"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755462169/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT",
    "in_reply_to_id": 755026497
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755473318",
    "pull_request_review_id": 814134213,
    "id": 755473318,
    "node_id": "PRRC_kwDOABII584tB5um",
    "diff_hunk": "@@ -41,8 +42,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;",
    "path": "src/rpc/blockchain.h",
    "position": 12,
    "original_position": 12,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is more complicated because of this line:\r\n\r\n```cpp\r\nconst CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)}; // Fee rate per byte\r\n```\r\n\r\n(https://github.com/bitcoin/bitcoin/pull/21422/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1688)\r\n\r\nI think your suggestion seems reasonable but then I don't really know whether there are some edge cases I don't know about.",
    "created_at": "2021-11-23T20:17:31Z",
    "updated_at": "2021-11-23T20:17:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755473318",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755473318"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755473318"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755473318/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 45,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 754233659
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755839122",
    "pull_request_review_id": 814614751,
    "id": 755839122,
    "node_id": "PRRC_kwDOABII584tDTCS",
    "diff_hunk": "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Now we have:\r\n\r\n```cpp\r\nconst CAmount fee{e.GetFee()};\r\nconst uint32_t size{(uint32_t)e.GetTxSize()};\r\nconst CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)};\r\n```\r\n\r\n`CFeeRate` has the following constructor: `CFeeRate::CFeeRate(const CAmount& nFeePaid, uint32_t num_bytes)`. If `size` is casted to `uint64_t`, then I will get a warning unless I do some other casting.\r\n\r\nAny suggestion how to improve this?",
    "created_at": "2021-11-24T09:16:21Z",
    "updated_at": "2021-11-24T09:17:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755839122",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755839122"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755839122"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755839122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1663,
    "side": "RIGHT",
    "in_reply_to_id": 654597871
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755889258",
    "pull_request_review_id": 814682640,
    "id": 755889258,
    "node_id": "PRRC_kwDOABII584tDfRq",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@sipa\r\n\r\n> * (1) use only transaction feerates directly (no ancestors/descendants), and have a result that ignores CPFP-like mechanics.\r\n\r\nI have picked (1) approach for now because: I can modify the PR in reasonable time and then it can serve as some sort of baseline. So we can still decide later whether the approach is the best. \r\n\r\nAnyway, there are still questions: \r\n\r\n* Is (2) much better than (1) or not? \r\n* Is there room for having both (1) and (2) possibly?\r\n* (2) seems hard-ish to implement. If that is true, one concern here is whether the additional complexity is worth it. I don't know.\r\n\r\nbtw: I was interested how https://jochen-hoenicke.de/queue/#BTC,24h,fee works and it seems that #15836 was actually heavily inspired by: https://github.com/jhoenicke/mempool/blob/31d8dcb896ebc8139d3e60c3f275b94811293777/mempool_sql.py#L44-L49.",
    "created_at": "2021-11-24T10:14:50Z",
    "updated_at": "2021-11-24T10:14:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755889258",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755889258"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755889258"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755889258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1667,
    "side": "RIGHT",
    "in_reply_to_id": 754438676
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755891888",
    "pull_request_review_id": 814686295,
    "id": 755891888,
    "node_id": "PRRC_kwDOABII584tDf6w",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 43,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> nit: my definition of feerate is `fee per size`. This doesn't really work with `fee rate per byte` as it would be a `fee per size per size`?\r\n\r\nYeah, I have the same definition of fee rate as \"fee per size\".\r\n\r\nI've been trying to align with Sipa's [approach (1)](https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676) for now.",
    "created_at": "2021-11-24T10:18:03Z",
    "updated_at": "2021-11-24T10:18:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755891888",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755891888"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755891888"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755891888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1662,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1671,
    "side": "RIGHT",
    "in_reply_to_id": 754449922
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755892709",
    "pull_request_review_id": 814687356,
    "id": 755892709,
    "node_id": "PRRC_kwDOABII584tDgHl",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 143,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@0xB10C Would it make more sense to have a limit or having no limit? I'm not sure what is preferrable.",
    "created_at": "2021-11-24T10:19:00Z",
    "updated_at": "2021-11-24T10:19:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755892709",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755892709"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755892709"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755892709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1758,
    "side": "RIGHT",
    "in_reply_to_id": 754375897
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755893412",
    "pull_request_review_id": 814688273,
    "id": 755893412,
    "node_id": "PRRC_kwDOABII584tDgSk",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid number of parameters\");\n+        }\n+\n+        for (size_t i = 0; i < feelimits_univalue.size(); ++i) {\n+            int64_t value = feelimits_univalue[i].get_int64();\n+\n+            if (value < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Non-negative values are expected\");\n+            } else if (i > 0 && feelimits.back() >= value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Strictly increasing values are expected\");\n+            }\n+\n+            feelimits.push_back(value);\n+        }\n+        feelimits_opt = std::optional<MempoolHistogramFeeRates>(feelimits);",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 158,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hopefully addressed. Thanks.",
    "created_at": "2021-11-24T10:19:53Z",
    "updated_at": "2021-11-24T10:19:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755893412",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755893412"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755893412"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755893412/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1780,
    "side": "RIGHT",
    "in_reply_to_id": 754435154
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755945405",
    "pull_request_review_id": 814745709,
    "id": 755945405,
    "node_id": "PRRC_kwDOABII584tDs-9",
    "diff_hunk": "@@ -0,0 +1,119 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(COINBASE_MATURITY + 2)",
    "path": "test/functional/mempool_fee_histogram.py",
    "position": null,
    "original_position": 28,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "47b5c3e03a71bb4c51e4948effec2a12943a7071",
    "user": {
      "login": "brunoerg",
      "id": 19480819,
      "node_id": "MDQ6VXNlcjE5NDgwODE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brunoerg",
      "html_url": "https://github.com/brunoerg",
      "followers_url": "https://api.github.com/users/brunoerg/followers",
      "following_url": "https://api.github.com/users/brunoerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/brunoerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
      "organizations_url": "https://api.github.com/users/brunoerg/orgs",
      "repos_url": "https://api.github.com/users/brunoerg/repos",
      "events_url": "https://api.github.com/users/brunoerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brunoerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Great. #23300 solves it! ",
    "created_at": "2021-11-24T11:09:38Z",
    "updated_at": "2021-11-24T11:09:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755945405",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755945405"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755945405"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755945405/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT",
    "in_reply_to_id": 755026497
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756256802",
    "pull_request_review_id": 815157984,
    "id": 756256802,
    "node_id": "PRRC_kwDOABII584tE5Ai",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It really depends on the use case for the histogram. If people are trying to make decisions on what fee to use, it's probably better to under-estimate the fee rate of a given transaction (by applying a CPFP logic excessively) than over-estimate it (by ignoring CPFP, etc). Are there other use cases that would be impacted?",
    "created_at": "2021-11-24T16:42:01Z",
    "updated_at": "2021-11-24T16:42:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756256802",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756256802"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756256802"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756256802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1667,
    "side": "RIGHT",
    "in_reply_to_id": 754438676
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756257689",
    "pull_request_review_id": 815159116,
    "id": 756257689,
    "node_id": "PRRC_kwDOABII584tE5OZ",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> * Is (2) much better than (1) or not?\r\n\r\nIt depends on how much CPFP is going on of course in the mempool overall. I think (2) is \"perfect\" in the sense that it exactly answers the question how much vbytes are competing at every feerate level for block space, according to Bitcoin Core's own block building algorithm. But I think (1) is probably a good first approximation.\r\n\r\n> * Is there room for having both (1) and (2) possibly?\r\n\r\nI don't think so. We should just use the best algorithm we have, and I think (2) is strictly better, but obviously a lot more work.\r\n\r\n> * (2) seems hard-ish to implement. If that is true, one concern here is whether the additional complexity is worth it. I don't know.\r\n\r\nIt's certainly more code changes. I'm not sure whether it's worth it, but that discussion can be left to a future improvement too.\r\n\r\nRe: johoe's site using that formula... interesting find. This earlier version of the code has a bit more comments: https://github.com/jhoenicke/mempool/blob/548698d6d255a2e1b7d6f1981403d3de55c2182a/mempool-sql.pl#L30L38. I see where it's coming from now, but I can't imagine that it doesn't add as many inaccuracies as that it improves (see examples above).",
    "created_at": "2021-11-24T16:43:01Z",
    "updated_at": "2021-11-24T16:43:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756257689",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756257689"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756257689"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756257689/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1667,
    "side": "RIGHT",
    "in_reply_to_id": 754438676
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756670249",
    "pull_request_review_id": 815688559,
    "id": 756670249,
    "node_id": "PRRC_kwDOABII584tGd8p",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 39,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "6466eb65ad18599c314125d7b62cc317d865f6f7",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@luke-jr \r\n\r\n> It really depends on the use case for the histogram. If people are trying to make decisions on what fee to use, it's probably better to under-estimate the fee rate of a given transaction (by applying a CPFP logic excessively) than over-estimate it (by ignoring CPFP, etc).\r\n\r\nFrom practicality point of view, I agree. But I would still like to follow [this plan](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-978941401) as it converges to the best possible solution.\r\n\r\n@sipa \r\n\r\n> Re: johoe's site using that formula... interesting find. This earlier version of the code has a bit more comments: https://github.com/jhoenicke/mempool/blob/548698d6d255a2e1b7d6f1981403d3de55c2182a/mempool-sql.pl#L30L38. I see where it's coming from now, \r\n\r\nAh, that's good to know. \r\n\r\n> but I can't imagine that it doesn't add as many inaccuracies as that it improves (see examples above).\r\n\r\nWithout thinking about it too deeply, my guess is that one can come up with pathological mempool state cases to force it report bad values. If it behaves ok-ish for real-world mempools, I don't really know. Anyway, https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-978941401 makes sense to me (the worst alternative there is basically that people disagree and then we would chase approach (2) immediately).",
    "created_at": "2021-11-25T08:34:36Z",
    "updated_at": "2021-11-25T08:34:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756670249",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756670249"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756670249"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756670249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1667,
    "side": "RIGHT",
    "in_reply_to_id": 754438676
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757035495",
    "pull_request_review_id": 816182352,
    "id": 757035495,
    "node_id": "PRRC_kwDOABII584tH3Hn",
    "diff_hunk": "@@ -41,8 +42,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;",
    "path": "src/rpc/blockchain.h",
    "position": 12,
    "original_position": 12,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree, yes. I've tried changing this and it gave me a bunch of warnings. I'd say ignore this comment unless someone else finds this to be problematic.",
    "created_at": "2021-11-25T16:45:00Z",
    "updated_at": "2021-11-25T16:45:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757035495",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757035495"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757035495"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757035495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 45,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 754233659
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757040403",
    "pull_request_review_id": 816188627,
    "id": 757040403,
    "node_id": "PRRC_kwDOABII584tH4UT",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 143,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point on the lock.. Can we benchmark the time the RPC takes with 10, 100. 1000, 10000 histogram bins? I think if it scales linear O(n) and somewhere between 10ms or so, then it's fine to have no limit. Users selecting a million bins should expect that this could take a bit longer than only 10 bins.\r\n\r\nI'll see if I can test that.",
    "created_at": "2021-11-25T16:53:16Z",
    "updated_at": "2021-11-25T16:53:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757040403",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757040403"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757040403"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757040403/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1758,
    "side": "RIGHT",
    "in_reply_to_id": 754375897
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757108924",
    "pull_request_review_id": 816274742,
    "id": 757108924,
    "node_id": "PRRC_kwDOABII584tIJC8",
    "diff_hunk": "@@ -41,8 +42,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;",
    "path": "src/rpc/blockchain.h",
    "position": 12,
    "original_position": 12,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ok!",
    "created_at": "2021-11-25T20:02:39Z",
    "updated_at": "2021-11-25T20:02:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757108924",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757108924"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757108924"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757108924/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 45,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 754233659
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757114611",
    "pull_request_review_id": 816281698,
    "id": 757114611,
    "node_id": "PRRC_kwDOABII584tIKbz",
    "diff_hunk": "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 143,
    "commit_id": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "original_commit_id": "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "https://github.com/bitcoin/bitcoin/pull/21422/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1685-R1699 takes `O(#mempoolTxs * #bins)` \r\n\r\nLooking at https://jochen-hoenicke.de/queue/#BTC,1y,count, to have some sense about numbers, it can be something like: 20_000 * 10_000 = 200_000_000 that should be computed in a less than a second.\r\n\r\nIf you can test it, it would be great. Thinking about it, maybe it's easy just to modify the test we have to add a lot of transactions and just measure the time. So it should be relatively easy I guess.",
    "created_at": "2021-11-25T20:22:49Z",
    "updated_at": "2021-11-25T20:22:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757114611",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757114611"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757114611"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757114611/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1758,
    "side": "RIGHT",
    "in_reply_to_id": 754375897
  }
]