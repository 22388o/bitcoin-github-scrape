[
  {
    "sha": "807c1cea25f534293397451d92f29a7e17175f3c",
    "node_id": "C_kwDOABII59oAKDgwN2MxY2VhMjVmNTM0MjkzMzk3NDUxZDkyZjI5YTdlMTcxNzVmM2M",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-03-06T19:30:17Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-11-24T09:31:41Z"
      },
      "message": "Introduce fee histogram in getmempoolinfo RPC command\n\nCo-authored-by: Jonas Schnelli <dev@jonasschnelli.ch>\nCo-authored-by: Jon Atack <jon@atack.com>",
      "tree": {
        "sha": "d32f65c707ae682555a991693a5c3526d4acd658",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d32f65c707ae682555a991693a5c3526d4acd658"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/807c1cea25f534293397451d92f29a7e17175f3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/807c1cea25f534293397451d92f29a7e17175f3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/807c1cea25f534293397451d92f29a7e17175f3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/807c1cea25f534293397451d92f29a7e17175f3c/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4018e23aa7e7bb57d721c7c41c55dfbb659b8c34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4018e23aa7e7bb57d721c7c41c55dfbb659b8c34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4018e23aa7e7bb57d721c7c41c55dfbb659b8c34"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 115,
      "deletions": 9
    },
    "files": [
      {
        "sha": "1284d474d526c12bce0f07492a1459c81582036f",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/807c1cea25f534293397451d92f29a7e17175f3c/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/807c1cea25f534293397451d92f29a7e17175f3c/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=807c1cea25f534293397451d92f29a7e17175f3c",
        "patch": "@@ -24,6 +24,7 @@\n #include <version.h>\n \n #include <any>\n+#include <optional>\n \n #include <boost/algorithm/string.hpp>\n \n@@ -375,7 +376,7 @@ static bool rest_mempool_info(const std::any& context, HTTPRequest* req, const s\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        UniValue mempoolInfoObject = MempoolInfoToJSON(*mempool);\n+        UniValue mempoolInfoObject = MempoolInfoToJSON(*mempool, std::nullopt);\n \n         std::string strJSON = mempoolInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");"
      },
      {
        "sha": "23b8e26b57a4f99edfb86d6f5cd4458cf48c5c2c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 108,
        "deletions": 7,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/807c1cea25f534293397451d92f29a7e17175f3c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/807c1cea25f534293397451d92f29a7e17175f3c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=807c1cea25f534293397451d92f29a7e17175f3c",
        "patch": "@@ -51,6 +51,7 @@\n #include <condition_variable>\n #include <memory>\n #include <mutex>\n+#include <optional>\n \n struct CUpdatedBlock\n {\n@@ -1654,7 +1655,7 @@ static RPCHelpMan getchaintips()\n     };\n }\n \n-UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHistogramFeeRates>& histogram_floors)\n {\n     // Make sure this call is atomic in the pool.\n     LOCK(pool.cs);\n@@ -1665,18 +1666,78 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n     size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n+    ret.pushKV(\"maxmempool\", (int64_t)maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (histogram_floors) {\n+        const MempoolHistogramFeeRates& floors{histogram_floors.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(floors.size(), 0);\n+        std::vector<uint64_t> count(floors.size(), 0);\n+        std::vector<CAmount> fees(floors.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()};\n+            const CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)};\n+\n+            // Distribute fee rates\n+            for (size_t i = floors.size(); i-- > 0;) {\n+                if (fee_rate >= floors[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < floors.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", floors.at(i));\n+\n+            if (i == floors.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", floors[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(floors.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n@@ -1688,15 +1749,55 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group (in vBytes)\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \")\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \")\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates histogram_floors;\n+    std::optional<MempoolHistogramFeeRates> histogram_floors_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue histogram_floors_univalue = request.params[0].get_array();\n+\n+        if (histogram_floors_univalue.size() == 0 || histogram_floors_univalue.size() > 30) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid number of parameters\");\n+        }\n+\n+        for (size_t i = 0; i < histogram_floors_univalue.size(); ++i) {\n+            int64_t value = histogram_floors_univalue[i].get_int64();\n+\n+            if (value < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Non-negative values are expected\");\n+            } else if (i > 0 && histogram_floors.back() >= value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Strictly increasing values are expected\");\n+            }\n+\n+            histogram_floors.push_back(value);\n+        }\n+        histogram_floors_opt = std::optional<MempoolHistogramFeeRates>(std::move(histogram_floors));\n+    }\n+\n+    return MempoolInfoToJSON(EnsureAnyMemPool(request.context), histogram_floors_opt);\n },\n     };\n }"
      },
      {
        "sha": "16cb7cce8b7d083c2fb244703bacb34728b4e5b1",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/807c1cea25f534293397451d92f29a7e17175f3c/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/807c1cea25f534293397451d92f29a7e17175f3c/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=807c1cea25f534293397451d92f29a7e17175f3c",
        "patch": "@@ -11,6 +11,7 @@\n #include <sync.h>\n \n #include <any>\n+#include <optional>\n #include <stdint.h>\n #include <vector>\n \n@@ -41,8 +42,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, TxVerbosity verbosity) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;\n+\n /** Mempool information to JSON */\n-UniValue MempoolInfoToJSON(const CTxMemPool& pool);\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHistogramFeeRates>& histogram_floors);\n \n /** Mempool to JSON */\n UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose = false, bool include_mempool_sequence = false);"
      },
      {
        "sha": "8a8cdef713f1ed1239fa70e1a98fd00a482f8157",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/807c1cea25f534293397451d92f29a7e17175f3c/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/807c1cea25f534293397451d92f29a7e17175f3c/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=807c1cea25f534293397451d92f29a7e17175f3c",
        "patch": "@@ -150,6 +150,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getblockstats\", 1, \"stats\" },\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n+    { \"getmempoolinfo\", 0, \"fee_histogram\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"getrawmempool\", 1, \"mempool_sequence\" },\n     { \"estimatesmartfee\", 0, \"conf_target\" },"
      }
    ]
  },
  {
    "sha": "2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "node_id": "C_kwDOABII59oAKDJkMmJhZTcwYWI1NmFlMTVhMjE3NjhlY2Y2NDJmMjc0NzY4N2FhOTc",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-03-06T21:54:05Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-11-24T09:31:41Z"
      },
      "message": "test: Add mempool fee histogram test coverage\n\nOriginal commit: https://github.com/bitcoin/bitcoin/commit/0b6ba66238c377116bc6c21e19cffbf1b6dfc788\n\nCo-authored-by: Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com>\nCo-authored-by: Jon Atack <jon@atack.com>",
      "tree": {
        "sha": "7e8d7c74b1dda25073ace2dd2c50d5aafb85b803",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e8d7c74b1dda25073ace2dd2c50d5aafb85b803"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d2bae70ab56ae15a21768ecf642f2747687aa97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d2bae70ab56ae15a21768ecf642f2747687aa97/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "807c1cea25f534293397451d92f29a7e17175f3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/807c1cea25f534293397451d92f29a7e17175f3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/807c1cea25f534293397451d92f29a7e17175f3c"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 119,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b6e710446304a295b6c617120f709dd8cac2b395",
        "filename": "test/functional/mempool_fee_histogram.py",
        "status": "added",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d2bae70ab56ae15a21768ecf642f2747687aa97/test/functional/mempool_fee_histogram.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d2bae70ab56ae15a21768ecf642f2747687aa97/test/functional/mempool_fee_histogram.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_fee_histogram.py?ref=2d2bae70ab56ae15a21768ecf642f2747687aa97",
        "patch": "@@ -0,0 +1,118 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        self.generate(self.nodes[0], COINBASE_MATURITY + 2, sync_fun=self.no_op)\n+\n+        # We have two UTXOs (utxo_1 and utxo_2) and we create three changeless transactions:\n+        # - tx1 (5 sat/vB): spending utxo_1\n+        # - tx2 (14 sat/vB): spending output from tx1\n+        # - tx3 (6 sat/vB): spending utxo_2 and the output from tx2\n+\n+        self.log.info(\"Test getmempoolinfo does not return fee histogram by default\")\n+        assert(\"fee_histogram\" not in node.getmempoolinfo())\n+\n+        self.log.info(\"Test getmempoolinfo returns empty fee histogram when mempool is empty\")\n+        info = node.getmempoolinfo([1, 2, 3])\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(0, non_empty_groups)\n+        assert_equal(3, empty_groups)\n+        assert_equal(0, total_fees)\n+\n+        self.log.info(\"Test that we have two spendable UTXOs and lock the second one\")\n+        utxos = node.listunspent()\n+        assert_equal(2, len(utxos))\n+        node.lockunspent(False, [{\"txid\": utxos[1][\"txid\"], \"vout\": utxos[1][\"vout\"]}])\n+\n+        self.log.info(\"Send tx1 transaction with 5 sat/vB fee rate\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"50.0\"), fee_rate=5, subtractfeefromamount=True)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 1 transaction (tx1: 5 sat/vB)\")\n+        info = node.getmempoolinfo([1, 3, 5, 10])\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(1, non_empty_groups)\n+        assert_equal(3, empty_groups)\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['5']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+        self.log.info(\"Send tx2 transaction with 14 sat/vB fee rate (spends tx1 UTXO)\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"25.0\"), fee_rate=14)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 2 transactions (tx1: 5 sat/vB, tx2: 14 sat/vB)\")\n+        info = node.getmempoolinfo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n+\n+        # Verify that tx1 and tx2 are reported in 5 sat/vB and 14 sat/vB in fee rate groups respectively\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(2, non_empty_groups)\n+        assert_equal(13, empty_groups)\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['5']['count'])\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['14']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+        # Unlock the second UTXO which we locked\n+        node.lockunspent(True, [{\"txid\": utxos[1][\"txid\"], \"vout\": utxos[1][\"vout\"]}])\n+\n+        self.log.info(\"Send tx3 transaction with 6 sat/vB fee rate (spends all available UTXOs)\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"99.9\"), fee_rate=6)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 3 transactions (tx1: 5 sat/vB, tx2: 14 sat/vB, tx3: 6 sat/vB)\")\n+        info = node.getmempoolinfo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n+\n+        # Verify that each of 5, 6 and 14 sat/vB fee rate groups contain one transaction\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(3, non_empty_groups)\n+        assert_equal(12, empty_groups)\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['5']['count'])\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['6']['count'])\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['14']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+\n+    def histogram_stats(self, histogram):\n+        total_fees = 0\n+        empty_count = 0\n+        non_empty_count = 0\n+\n+        for key, bin in histogram['fee_rate_groups'].items():\n+            assert_equal(int(key), bin['from'])\n+            if bin['fees'] > 0:\n+                assert_greater_than(bin['count'], 0)\n+            else:\n+                assert_equal(bin['count'], 0)\n+            assert_greater_than_or_equal(bin['fees'], 0)\n+            assert_greater_than_or_equal(bin['size'], 0)\n+            if bin['to'] is not None:\n+                assert_greater_than_or_equal(bin['to'], bin['from'])\n+            total_fees += bin['fees']\n+\n+            if bin['count'] == 0:\n+                empty_count += 1\n+            else:\n+                non_empty_count += 1\n+\n+        return (non_empty_count, empty_count, total_fees)\n+\n+if __name__ == '__main__':\n+    MempoolFeeHistogramTest().main()"
      },
      {
        "sha": "c8390789f405f65c401dbfbcd6132bc2d9339a2e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d2bae70ab56ae15a21768ecf642f2747687aa97/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d2bae70ab56ae15a21768ecf642f2747687aa97/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2d2bae70ab56ae15a21768ecf642f2747687aa97",
        "patch": "@@ -240,6 +240,7 @@\n     'feature_nulldummy.py --descriptors',\n     'mempool_accept.py',\n     'mempool_expiry.py',\n+    'mempool_fee_histogram.py',\n     'wallet_import_rescan.py --legacy-wallet',\n     'wallet_import_with_label.py --legacy-wallet',\n     'wallet_importdescriptors.py --descriptors',"
      }
    ]
  }
]