[
  {
    "sha": "7e195e8459ad741368db6bb574981fccb1707268",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTE5NWU4NDU5YWQ3NDEzNjhkYjZiYjU3NDk4MWZjY2IxNzA3MjY4",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-12-03T08:10:10Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-01-06T15:19:04Z"
      },
      "message": "[Qt] massive options/settings rework (no core changes)\n\n- add new options for database cache and script verification threads\n- add label which displays options that are overridden by command-line\n  parameters\n- proxy settings are not applied on-the-fly anymore and require a client\n  restart (ApplyProxySettings() was removed and was not working very well\n  anyway)\n- re-work options reset and require a client shutdown (as it is much\n  easier to do it this way without having to mess with what can be changed\n  on-the-fly and what needs a restart anyway)\n- options reset now writes default values for every single option\n- when changing an option which requires a client restart display a 10\n  second warning message in statusLabel (via a QTimer)\n- when applying the changes via ok change that to a persistent message,\n  which is displayed even after closing optionsdialog and re-open it, when\n  no client restart was made\n- remove dialog boxes used when changing language or proxy settings\n- add setRestartRequired() and isRestartRequired() to OptionsModel and\n  use the set function when updating options to signal OptionsDialog\n  when a restart is needed\n- resize optionsdialog a little and add some min sizes for certain GUI\n  elements\n- remove apply button from optionsdialog\n- save and restore optionsdialog window position\n- update nTransactionFee in QSettings with a set -paytxfee value when\n  opening optionsdialog (I'm not sure about this yet, perhaps revert to\n  not updating QSettings and just display current -paytxfee value in\n  optionsdialog.)",
      "tree": {
        "sha": "d14b125aac61867a028af5dab191926789848182",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d14b125aac61867a028af5dab191926789848182"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e195e8459ad741368db6bb574981fccb1707268",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e195e8459ad741368db6bb574981fccb1707268",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e195e8459ad741368db6bb574981fccb1707268",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e195e8459ad741368db6bb574981fccb1707268/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "65515c0d05678334a52f686eaaa2bac1ff285a5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65515c0d05678334a52f686eaaa2bac1ff285a5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65515c0d05678334a52f686eaaa2bac1ff285a5a"
      }
    ],
    "stats": {
      "total": 682,
      "additions": 441,
      "deletions": 241
    },
    "files": [
      {
        "sha": "9056ab7696717dee2cdf5e819e6b70b6ecb6a4ce",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 175,
        "deletions": 44,
        "changes": 219,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e195e8459ad741368db6bb574981fccb1707268/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e195e8459ad741368db6bb574981fccb1707268/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=7e195e8459ad741368db6bb574981fccb1707268",
        "patch": "@@ -6,8 +6,8 @@\n    <rect>\n     <x>0</x>\n     <y>0</y>\n-    <width>540</width>\n-    <height>380</height>\n+    <width>560</width>\n+    <height>400</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -19,9 +19,6 @@\n   <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n    <item>\n     <widget class=\"QTabWidget\" name=\"tabWidget\">\n-     <property name=\"tabPosition\">\n-      <enum>QTabWidget::North</enum>\n-     </property>\n      <property name=\"currentIndex\">\n       <number>0</number>\n      </property>\n@@ -86,21 +83,44 @@\n          </property>\n         </widget>\n        </item>\n-       <item>\n-        <spacer name=\"verticalSpacer_Main\">\n-         <property name=\"orientation\">\n-          <enum>Qt::Vertical</enum>\n-         </property>\n-         <property name=\"sizeHint\" stdset=\"0\">\n-          <size>\n-           <width>20</width>\n-           <height>40</height>\n-          </size>\n-         </property>\n-        </spacer>\n-       </item>\n        <item>\n         <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2_Main\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"databaseCacheLabel\">\n+           <property name=\"text\">\n+            <string>Size of &amp;database cache</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>databaseCache</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QSpinBox\" name=\"databaseCache\">\n+           <property name=\"toolTip\">\n+            <string>Set database cache size in megabytes (default: 25)</string>\n+           </property>\n+           <property name=\"maximum\">\n+            <number>1024</number>\n+           </property>\n+           <property name=\"value\">\n+            <number>25</number>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"databaseCacheUnitLabel\">\n+           <property name=\"text\">\n+            <string>MB</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n          <item>\n           <spacer name=\"horizontalSpacer_2_Main\">\n            <property name=\"orientation\">\n@@ -114,21 +134,64 @@\n            </property>\n           </spacer>\n          </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_3_Main\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"threadsScriptVerifLabel\">\n+           <property name=\"text\">\n+            <string>Number of script &amp;verification threads</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>threadsScriptVerif</cstring>\n+           </property>\n+          </widget>\n+         </item>\n          <item>\n-          <widget class=\"QPushButton\" name=\"resetButton\">\n+          <widget class=\"QSpinBox\" name=\"threadsScriptVerif\">\n            <property name=\"toolTip\">\n-            <string>Reset all client options to default.</string>\n+            <string>Set the number of script verification threads (up to 16, 0 = auto, &lt;0 = leave that many cores free, default: 0)</string>\n            </property>\n-           <property name=\"text\">\n-            <string>&amp;Reset Options</string>\n+           <property name=\"minimum\">\n+            <number>-16</number>\n            </property>\n-           <property name=\"autoDefault\">\n-            <bool>false</bool>\n+           <property name=\"maximum\">\n+            <number>16</number>\n            </property>\n           </widget>\n          </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_3_Main\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n         </layout>\n        </item>\n+       <item>\n+        <spacer name=\"verticalSpacer_Main\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>40</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n       </layout>\n      </widget>\n      <widget class=\"QWidget\" name=\"tabNetwork\">\n@@ -149,15 +212,15 @@\n        <item>\n         <widget class=\"QCheckBox\" name=\"connectSocks\">\n          <property name=\"toolTip\">\n-          <string>Connect to the Bitcoin network through a SOCKS proxy (e.g. when connecting through Tor).</string>\n+          <string>Connect to the Bitcoin network through a SOCKS proxy.</string>\n          </property>\n          <property name=\"text\">\n-          <string>&amp;Connect through SOCKS proxy:</string>\n+          <string>&amp;Connect through SOCKS proxy (default proxy):</string>\n          </property>\n         </widget>\n        </item>\n        <item>\n-        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_Network\">\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_1_Network\">\n          <item>\n           <widget class=\"QLabel\" name=\"proxyIpLabel\">\n            <property name=\"text\">\n@@ -173,14 +236,20 @@\n          </item>\n          <item>\n           <widget class=\"QValidatedLineEdit\" name=\"proxyIp\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n            <property name=\"maximumSize\">\n             <size>\n              <width>140</width>\n              <height>16777215</height>\n             </size>\n            </property>\n            <property name=\"toolTip\">\n-            <string>IP address of the proxy (e.g. 127.0.0.1)</string>\n+            <string>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</string>\n            </property>\n           </widget>\n          </item>\n@@ -199,6 +268,12 @@\n          </item>\n          <item>\n           <widget class=\"QLineEdit\" name=\"proxyPort\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n            <property name=\"maximumSize\">\n             <size>\n              <width>55</width>\n@@ -231,7 +306,7 @@\n           </widget>\n          </item>\n          <item>\n-          <spacer name=\"horizontalSpacer_Network\">\n+          <spacer name=\"horizontalSpacer_1_Network\">\n            <property name=\"orientation\">\n             <enum>Qt::Horizontal</enum>\n            </property>\n@@ -390,8 +465,67 @@\n      </widget>\n     </widget>\n    </item>\n+   <item>\n+    <widget class=\"QFrame\" name=\"frame\">\n+     <layout class=\"QVBoxLayout\" name=\"verticalLayout_Bottom\">\n+      <item>\n+       <layout class=\"QHBoxLayout\" name=\"horizontalLayout_Bottom\">\n+        <item>\n+         <widget class=\"QLabel\" name=\"overriddenByCommandLineInfoLabel\">\n+          <property name=\"text\">\n+           <string>Active command-line options that override above options: </string>\n+          </property>\n+          <property name=\"textFormat\">\n+           <enum>Qt::PlainText</enum>\n+          </property>\n+         </widget>\n+        </item>\n+        <item>\n+         <spacer name=\"horizontalSpacer_Bottom\">\n+          <property name=\"orientation\">\n+           <enum>Qt::Horizontal</enum>\n+          </property>\n+          <property name=\"sizeHint\" stdset=\"0\">\n+           <size>\n+            <width>40</width>\n+            <height>20</height>\n+           </size>\n+          </property>\n+         </spacer>\n+        </item>\n+       </layout>\n+      </item>\n+      <item>\n+       <widget class=\"QLabel\" name=\"overriddenByCommandLineLabel\">\n+        <property name=\"text\">\n+         <string/>\n+        </property>\n+        <property name=\"textFormat\">\n+         <enum>Qt::PlainText</enum>\n+        </property>\n+        <property name=\"wordWrap\">\n+         <bool>true</bool>\n+        </property>\n+       </widget>\n+      </item>\n+     </layout>\n+    </widget>\n+   </item>\n    <item>\n     <layout class=\"QHBoxLayout\" name=\"horizontalLayout_Buttons\">\n+     <item>\n+      <widget class=\"QPushButton\" name=\"resetButton\">\n+       <property name=\"toolTip\">\n+        <string>Reset all client options to default.</string>\n+       </property>\n+       <property name=\"text\">\n+        <string>&amp;Reset Options</string>\n+       </property>\n+       <property name=\"autoDefault\">\n+        <bool>false</bool>\n+       </property>\n+      </widget>\n+     </item>\n      <item>\n       <spacer name=\"horizontalSpacer_1\">\n        <property name=\"orientation\">\n@@ -407,6 +541,12 @@\n      </item>\n      <item>\n       <widget class=\"QLabel\" name=\"statusLabel\">\n+       <property name=\"minimumSize\">\n+        <size>\n+         <width>200</width>\n+         <height>0</height>\n+        </size>\n+       </property>\n        <property name=\"font\">\n         <font>\n          <weight>75</weight>\n@@ -454,16 +594,6 @@\n        </property>\n       </widget>\n      </item>\n-     <item>\n-      <widget class=\"QPushButton\" name=\"applyButton\">\n-       <property name=\"text\">\n-        <string>&amp;Apply</string>\n-       </property>\n-       <property name=\"autoDefault\">\n-        <bool>false</bool>\n-       </property>\n-      </widget>\n-     </item>\n     </layout>\n    </item>\n   </layout>\n@@ -473,17 +603,18 @@\n    <class>BitcoinAmountField</class>\n    <extends>QLineEdit</extends>\n    <header>bitcoinamountfield.h</header>\n-  </customwidget>\n-  <customwidget>\n-   <class>QValueComboBox</class>\n-   <extends>QComboBox</extends>\n-   <header>qvaluecombobox.h</header>\n+   <container>1</container>\n   </customwidget>\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n    <header>qvalidatedlineedit.h</header>\n   </customwidget>\n+  <customwidget>\n+   <class>QValueComboBox</class>\n+   <extends>QComboBox</extends>\n+   <header>qvaluecombobox.h</header>\n+  </customwidget>\n  </customwidgets>\n  <resources/>\n  <connections/>"
      },
      {
        "sha": "d024e3b7aa6375c50cde3fa69313716d7625a15e",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 68,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e195e8459ad741368db6bb574981fccb1707268/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e195e8459ad741368db6bb574981fccb1707268/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=7e195e8459ad741368db6bb574981fccb1707268",
        "patch": "@@ -10,6 +10,7 @@\n #include \"ui_optionsdialog.h\"\n \n #include \"bitcoinunits.h\"\n+#include \"guiutil.h\"\n #include \"monitoreddatamapper.h\"\n #include \"optionsmodel.h\"\n \n@@ -19,17 +20,20 @@\n #include <QIntValidator>\n #include <QLocale>\n #include <QMessageBox>\n+#include <QTimer>\n \n OptionsDialog::OptionsDialog(QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::OptionsDialog),\n     model(0),\n     mapper(0),\n-    fRestartWarningDisplayed_Proxy(false),\n-    fRestartWarningDisplayed_Lang(false),\n     fProxyIpValid(true)\n {\n     ui->setupUi(this);\n+    GUIUtil::restoreWindowGeometry(\"nOptionsDialogWindow\", this->size(), this);\n+\n+    /* Main elements init */\n+    ui->databaseCache->setMaximum(sizeof(void*) > 4 ? 4096 : 1024);\n \n     /* Network elements init */\n #ifndef USE_UPNP\n@@ -40,6 +44,7 @@ OptionsDialog::OptionsDialog(QWidget *parent) :\n     ui->proxyPort->setEnabled(false);\n     ui->proxyPort->setValidator(new QIntValidator(1, 65535, this));\n \n+    /** SOCKS version is only selectable for default proxy and is always 5 for IPv6 and Tor */\n     ui->socksVersion->setEnabled(false);\n     ui->socksVersion->addItem(\"5\", 5);\n     ui->socksVersion->addItem(\"4\", 4);\n@@ -95,16 +100,13 @@ OptionsDialog::OptionsDialog(QWidget *parent) :\n     mapper->setSubmitPolicy(QDataWidgetMapper::ManualSubmit);\n     mapper->setOrientation(Qt::Vertical);\n \n-    /* enable apply button when data modified */\n-    connect(mapper, SIGNAL(viewModified()), this, SLOT(enableApplyButton()));\n-    /* disable apply button when new data loaded */\n-    connect(mapper, SIGNAL(currentIndexChanged(int)), this, SLOT(disableApplyButton()));\n     /* setup/change UI elements when proxy IP is invalid/valid */\n-    connect(this, SIGNAL(proxyIpValid(QValidatedLineEdit *, bool)), this, SLOT(handleProxyIpValid(QValidatedLineEdit *, bool)));\n+    connect(this, SIGNAL(proxyIpChecks(QValidatedLineEdit *, int)), this, SLOT(doProxyIpChecks(QValidatedLineEdit *, int)));\n }\n \n OptionsDialog::~OptionsDialog()\n {\n+    GUIUtil::saveWindowGeometry(\"nOptionsDialogWindow\", this);\n     delete ui;\n }\n \n@@ -114,6 +116,15 @@ void OptionsDialog::setModel(OptionsModel *model)\n \n     if(model)\n     {\n+        /* check if client restart is needed and show persistent message */\n+        if (model->isRestartRequired())\n+            showRestartWarning(true);\n+\n+        QString strLabel = model->getOverriddenByCommandLine();\n+        if (strLabel.isEmpty())\n+            strLabel = tr(\"none\");\n+        ui->overriddenByCommandLineLabel->setText(strLabel);\n+\n         connect(model, SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n         mapper->setModel(model);\n@@ -124,18 +135,24 @@ void OptionsDialog::setModel(OptionsModel *model)\n     /* update the display unit, to not use the default (\"BTC\") */\n     updateDisplayUnit();\n \n-    /* warn only when language selection changes by user action (placed here so init via mapper doesn't trigger this) */\n-    connect(ui->lang, SIGNAL(valueChanged()), this, SLOT(showRestartWarning_Lang()));\n+    /* warn when one of the following settings changes by user action (placed here so init via mapper doesn't trigger them) */\n \n-    /* disable apply button after settings are loaded as there is nothing to save */\n-    disableApplyButton();\n+    /* Main */\n+    connect(ui->databaseCache, SIGNAL(valueChanged(int)), this, SLOT(showRestartWarning()));\n+    connect(ui->threadsScriptVerif, SIGNAL(valueChanged(int)), this, SLOT(showRestartWarning()));\n+    /* Network */\n+    connect(ui->connectSocks, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n+    /* Display */\n+    connect(ui->lang, SIGNAL(valueChanged()), this, SLOT(showRestartWarning()));\n }\n \n void OptionsDialog::setMapper()\n {\n     /* Main */\n     mapper->addMapping(ui->transactionFee, OptionsModel::Fee);\n     mapper->addMapping(ui->bitcoinAtStartup, OptionsModel::StartAtStartup);\n+    mapper->addMapping(ui->threadsScriptVerif, OptionsModel::ThreadsScriptVerif);\n+    mapper->addMapping(ui->databaseCache, OptionsModel::DatabaseCache);\n \n     /* Network */\n     mapper->addMapping(ui->mapPortUpnp, OptionsModel::MapPortUPnP);\n@@ -158,31 +175,20 @@ void OptionsDialog::setMapper()\n     mapper->addMapping(ui->coinControlFeatures, OptionsModel::CoinControlFeatures);\n }\n \n-void OptionsDialog::enableApplyButton()\n-{\n-    ui->applyButton->setEnabled(true);\n-}\n-\n-void OptionsDialog::disableApplyButton()\n-{\n-    ui->applyButton->setEnabled(false);\n-}\n-\n-void OptionsDialog::enableSaveButtons()\n+void OptionsDialog::enableOkButton()\n {\n-    /* prevent enabling of the save buttons when data modified, if there is an invalid proxy address present */\n+    /* prevent enabling of the OK button when data modified, if there is an invalid proxy address present */\n     if(fProxyIpValid)\n-        setSaveButtonState(true);\n+        setOkButtonState(true);\n }\n \n-void OptionsDialog::disableSaveButtons()\n+void OptionsDialog::disableOkButton()\n {\n-    setSaveButtonState(false);\n+    setOkButtonState(false);\n }\n \n-void OptionsDialog::setSaveButtonState(bool fState)\n+void OptionsDialog::setOkButtonState(bool fState)\n {\n-    ui->applyButton->setEnabled(fState);\n     ui->okButton->setEnabled(fState);\n }\n \n@@ -192,24 +198,15 @@ void OptionsDialog::on_resetButton_clicked()\n     {\n         // confirmation dialog\n         QMessageBox::StandardButton btnRetVal = QMessageBox::question(this, tr(\"Confirm options reset\"),\n-            tr(\"Some settings may require a client restart to take effect.\") + \"<br><br>\" + tr(\"Do you want to proceed?\"),\n+            tr(\"Client restart required to activate changes.\") + \"<br><br>\" + tr(\"Client will be shutdown, do you want to proceed?\"),\n             QMessageBox::Yes | QMessageBox::Cancel, QMessageBox::Cancel);\n \n         if(btnRetVal == QMessageBox::Cancel)\n             return;\n \n-        disableApplyButton();\n-\n-        /* disable restart warning messages display */\n-        fRestartWarningDisplayed_Lang = fRestartWarningDisplayed_Proxy = true;\n-\n-        /* reset all options and save the default values (QSettings) */\n+        /* reset all options and close Bitcoin-Qt */\n         model->Reset();\n-        mapper->toFirst();\n-        mapper->submit();\n-\n-        /* re-enable restart warning messages display */\n-        fRestartWarningDisplayed_Lang = fRestartWarningDisplayed_Proxy = false;\n+        QApplication::quit();\n     }\n }\n \n@@ -224,28 +221,26 @@ void OptionsDialog::on_cancelButton_clicked()\n     reject();\n }\n \n-void OptionsDialog::on_applyButton_clicked()\n+void OptionsDialog::showRestartWarning(bool fPersistent)\n {\n-    mapper->submit();\n-    disableApplyButton();\n-}\n+    ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");\n \n-void OptionsDialog::showRestartWarning_Proxy()\n-{\n-    if(!fRestartWarningDisplayed_Proxy)\n+    if(fPersistent)\n+    {\n+        ui->statusLabel->setText(tr(\"Client restart required to activate changes.\"));\n+    }\n+    else\n     {\n-        QMessageBox::warning(this, tr(\"Warning\"), tr(\"This setting will take effect after restarting Bitcoin.\"), QMessageBox::Ok);\n-        fRestartWarningDisplayed_Proxy = true;\n+        ui->statusLabel->setText(tr(\"This change would require a client restart.\"));\n+        // clear non-persistent status label after 10 seconds\n+        // Todo: should perhaps be a class attribute, if we extend the use of statusLabel\n+        QTimer::singleShot(10000, this, SLOT(clearStatusLabel()));\n     }\n }\n \n-void OptionsDialog::showRestartWarning_Lang()\n+void OptionsDialog::clearStatusLabel()\n {\n-    if(!fRestartWarningDisplayed_Lang)\n-    {\n-        QMessageBox::warning(this, tr(\"Warning\"), tr(\"This setting will take effect after restarting Bitcoin.\"), QMessageBox::Ok);\n-        fRestartWarningDisplayed_Lang = true;\n-    }\n+    ui->statusLabel->clear();\n }\n \n void OptionsDialog::updateDisplayUnit()\n@@ -257,22 +252,25 @@ void OptionsDialog::updateDisplayUnit()\n     }\n }\n \n-void OptionsDialog::handleProxyIpValid(QValidatedLineEdit *object, bool fState)\n+void OptionsDialog::doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort)\n {\n-    // this is used in a check before re-enabling the save buttons\n-    fProxyIpValid = fState;\n+    Q_UNUSED(nProxyPort);\n \n-    if(fProxyIpValid)\n+    const std::string strAddrProxy = pUiProxyIp->text().toStdString();\n+    CService addrProxy;\n+\n+    /* Check for a valid IPv4 / IPv6 address */\n+    if (!(fProxyIpValid = LookupNumeric(strAddrProxy.c_str(), addrProxy)))\n     {\n-        enableSaveButtons();\n-        ui->statusLabel->clear();\n+        disableOkButton();\n+        pUiProxyIp->setValid(false);\n+        ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");\n+        ui->statusLabel->setText(tr(\"The supplied proxy address is invalid.\"));\n     }\n     else\n     {\n-        disableSaveButtons();\n-        object->setValid(fProxyIpValid);\n-        ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel->setText(tr(\"The supplied proxy address is invalid.\"));\n+        enableOkButton();\n+        ui->statusLabel->clear();\n     }\n }\n \n@@ -282,9 +280,7 @@ bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n     {\n         if(object == ui->proxyIp)\n         {\n-            CService addr;\n-            /* Check proxyIp for a valid IPv4/IPv6 address and emit the proxyIpValid signal */\n-            emit proxyIpValid(ui->proxyIp, LookupNumeric(ui->proxyIp->text().toStdString().c_str(), addr));\n+            emit proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n         }\n     }\n     return QDialog::eventFilter(object, event);"
      },
      {
        "sha": "6b62069660ff292ed66eae01b29b79842a4d6796",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e195e8459ad741368db6bb574981fccb1707268/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e195e8459ad741368db6bb574981fccb1707268/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=7e195e8459ad741368db6bb574981fccb1707268",
        "patch": "@@ -31,35 +31,28 @@ class OptionsDialog : public QDialog\n     bool eventFilter(QObject *object, QEvent *event);\n \n private slots:\n-    /* enable only apply button */\n-    void enableApplyButton();\n-    /* disable only apply button */\n-    void disableApplyButton();\n-    /* enable apply button and OK button */\n-    void enableSaveButtons();\n-    /* disable apply button and OK button */\n-    void disableSaveButtons();\n-    /* set apply button and OK button state (enabled / disabled) */\n-    void setSaveButtonState(bool fState);\n+    /* enable OK button */\n+    void enableOkButton();\n+    /* disable OK button */\n+    void disableOkButton();\n+    /* set OK button state (enabled / disabled) */\n+    void setOkButtonState(bool fState);\n     void on_resetButton_clicked();\n     void on_okButton_clicked();\n     void on_cancelButton_clicked();\n-    void on_applyButton_clicked();\n \n-    void showRestartWarning_Proxy();\n-    void showRestartWarning_Lang();\n+    void showRestartWarning(bool fPersistent = false);\n+    void clearStatusLabel();\n     void updateDisplayUnit();\n-    void handleProxyIpValid(QValidatedLineEdit *object, bool fState);\n+    void doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n \n signals:\n-    void proxyIpValid(QValidatedLineEdit *object, bool fValid);\n+    void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n \n private:\n     Ui::OptionsDialog *ui;\n     OptionsModel *model;\n     MonitoredDataMapper *mapper;\n-    bool fRestartWarningDisplayed_Proxy;\n-    bool fRestartWarningDisplayed_Lang;\n     bool fProxyIpValid;\n };\n "
      },
      {
        "sha": "c7817a94a8eeaaa62a62378820828a6976724d5b",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 179,
        "deletions": 108,
        "changes": 287,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e195e8459ad741368db6bb574981fccb1707268/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e195e8459ad741368db6bb574981fccb1707268/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=7e195e8459ad741368db6bb574981fccb1707268",
        "patch": "@@ -18,86 +18,122 @@\n #include \"walletdb.h\"\n \n #include <QSettings>\n+#include <QStringList>\n \n OptionsModel::OptionsModel(QObject *parent) :\n     QAbstractListModel(parent)\n {\n     Init();\n }\n \n-bool static ApplyProxySettings()\n-{\n-    QSettings settings;\n-    CService addrProxy(settings.value(\"addrProxy\", \"127.0.0.1:9050\").toString().toStdString());\n-    int nSocksVersion(settings.value(\"nSocksVersion\", 5).toInt());\n-    if (!settings.value(\"fUseProxy\", false).toBool()) {\n-        addrProxy = CService();\n-        nSocksVersion = 0;\n-        return false;\n-    }\n-    if (nSocksVersion && !addrProxy.IsValid())\n-        return false;\n-    if (!IsLimited(NET_IPV4))\n-        SetProxy(NET_IPV4, addrProxy, nSocksVersion);\n-    if (nSocksVersion > 4) {\n-#ifdef USE_IPV6\n-        if (!IsLimited(NET_IPV6))\n-            SetProxy(NET_IPV6, addrProxy, nSocksVersion);\n-#endif\n-        SetNameProxy(addrProxy, nSocksVersion);\n-    }\n-    return true;\n-}\n-\n+// Writes all missing QSettings with their default values\n void OptionsModel::Init()\n {\n     QSettings settings;\n \n+    // Ensure restart flag is unset on client startup\n+    setRestartRequired(false);\n+\n     // These are Qt-only settings:\n-    nDisplayUnit = settings.value(\"nDisplayUnit\", BitcoinUnits::BTC).toInt();\n+\n+    // Window\n+    if (!settings.contains(\"fMinimizeToTray\"))\n+        settings.setValue(\"fMinimizeToTray\", false);\n+    fMinimizeToTray = settings.value(\"fMinimizeToTray\").toBool();\n+\n+    if (!settings.contains(\"fMinimizeOnClose\"))\n+        settings.setValue(\"fMinimizeOnClose\", false);\n+    fMinimizeOnClose = settings.value(\"fMinimizeOnClose\").toBool();\n+\n+    // Display\n+    if (!settings.contains(\"nDisplayUnit\"))\n+        settings.setValue(\"nDisplayUnit\", BitcoinUnits::BTC);\n+    nDisplayUnit = settings.value(\"nDisplayUnit\").toInt();\n+\n+    if (!settings.contains(\"bDisplayAddresses\"))\n+        settings.setValue(\"bDisplayAddresses\", false);\n     bDisplayAddresses = settings.value(\"bDisplayAddresses\", false).toBool();\n-    fMinimizeToTray = settings.value(\"fMinimizeToTray\", false).toBool();\n-    fMinimizeOnClose = settings.value(\"fMinimizeOnClose\", false).toBool();\n-    nTransactionFee = settings.value(\"nTransactionFee\").toLongLong();\n-    language = settings.value(\"language\", \"\").toString();\n+\n+    if (!settings.contains(\"fCoinControlFeatures\"))\n+        settings.setValue(\"fCoinControlFeatures\", false);\n     fCoinControlFeatures = settings.value(\"fCoinControlFeatures\", false).toBool();\n \n-    // These are shared with core Bitcoin; we want\n-    // command-line options to override the GUI settings:\n-    if (settings.contains(\"fUseUPnP\"))\n-        SoftSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool());\n-    if (settings.contains(\"addrProxy\") && settings.value(\"fUseProxy\").toBool())\n-        SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString());\n-    if (settings.contains(\"nSocksVersion\") && settings.value(\"fUseProxy\").toBool())\n-        SoftSetArg(\"-socks\", settings.value(\"nSocksVersion\").toString().toStdString());\n-    if (!language.isEmpty())\n-        SoftSetArg(\"-lang\", language.toStdString());\n+    // These are shared with the core or have a command-line parameter\n+    // and we want command-line parameters to overwrite the GUI settings.\n+    //\n+    // If setting doesn't exist create it with defaults.\n+    //\n+    // If SoftSetArg() or SoftSetBoolArg() return false we were overridden\n+    // by command-line and show this in the UI.\n+\n+    // Main\n+    if (!settings.contains(\"nTransactionFee\"))\n+        settings.setValue(\"nTransactionFee\", 0);\n+\n+    if (!settings.contains(\"nDatabaseCache\"))\n+        settings.setValue(\"nDatabaseCache\", 25);\n+    if (!SoftSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-dbcache \";\n+\n+    if (!settings.contains(\"nThreadsScriptVerif\"))\n+        settings.setValue(\"nThreadsScriptVerif\", 0);\n+    if (!SoftSetArg(\"-par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-par \";\n+\n+    // Network\n+    if (!settings.contains(\"fUseUPnP\"))\n+#ifdef USE_UPNP\n+        settings.setValue(\"fUseUPnP\", true);\n+#else\n+        settings.setValue(\"fUseUPnP\", false);\n+#endif\t\n+    if (!SoftSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool()))\n+        strOverriddenByCommandLine += \"-upnp \";\n+\n+    if (!settings.contains(\"fUseProxy\"))\n+        settings.setValue(\"fUseProxy\", false);\n+    if (!settings.contains(\"addrProxy\"))\n+        settings.setValue(\"addrProxy\", \"127.0.0.1:9050\");\n+    // Only try to set -proxy, if user has enabled fUseProxy\n+    if (settings.value(\"fUseProxy\").toBool() && !SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-proxy \";\n+    if (!settings.contains(\"nSocksVersion\"))\n+        settings.setValue(\"nSocksVersion\", 5);\n+    // Only try to set -socks, if user has enabled fUseProxy\n+    if (settings.value(\"fUseProxy\").toBool() && !SoftSetArg(\"-socks\", settings.value(\"nSocksVersion\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-socks \";\n+\n+    // Display\n+    if (!settings.contains(\"language\"))\n+        settings.setValue(\"language\", \"\");\n+    if (!SoftSetArg(\"-lang\", settings.value(\"language\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-lang\";\n+\n+    language = settings.value(\"language\").toString();\n }\n \n void OptionsModel::Reset()\n {\n     QSettings settings;\n \n-    // Remove all entries in this QSettings object\n+    // Remove all entries from our QSettings object\n     settings.clear();\n \n     // default setting for OptionsModel::StartAtStartup - disabled\n     if (GUIUtil::GetStartOnSystemStartup())\n         GUIUtil::SetStartOnSystemStartup(false);\n \n-    // Re-Init to get default values\n-    Init();\n-\n     // Ensure Upgrade() is not running again by setting the bImportFinished flag\n     settings.setValue(\"bImportFinished\", true);\n }\n \n-bool OptionsModel::Upgrade()\n+void OptionsModel::Upgrade()\n {\n     QSettings settings;\n \n+    // Already upgraded\n     if (settings.contains(\"bImportFinished\"))\n-        return false; // Already upgraded\n+        return;\n \n     settings.setValue(\"bImportFinished\", true);\n \n@@ -145,18 +181,16 @@ bool OptionsModel::Upgrade()\n             walletdb.EraseSetting(\"addrProxy\");\n         }\n     }\n-    ApplyProxySettings();\n-    Init();\n \n-    return true;\n+    Init();\n }\n \n-\n int OptionsModel::rowCount(const QModelIndex & parent) const\n {\n     return OptionIDRowCount;\n }\n \n+// read QSettings values and return them\n QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n     if(role == Qt::EditRole)\n@@ -165,59 +199,63 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n         switch(index.row())\n         {\n         case StartAtStartup:\n-            return QVariant(GUIUtil::GetStartOnSystemStartup());\n+            return GUIUtil::GetStartOnSystemStartup();\n         case MinimizeToTray:\n-            return QVariant(fMinimizeToTray);\n+            return fMinimizeToTray;\n         case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\", GetBoolArg(\"-upnp\", true));\n+            return settings.value(\"fUseUPnP\");\n #else\n-            return QVariant(false);\n+            return false;\n #endif\n         case MinimizeOnClose:\n-            return QVariant(fMinimizeOnClose);\n-        case ProxyUse: {\n-            proxyType proxy;\n-            return QVariant(GetProxy(NET_IPV4, proxy));\n-        }\n+            return fMinimizeOnClose;\n+\n+        // default proxy\n+        case ProxyUse:\n+            return settings.value(\"fUseProxy\", false);\n         case ProxyIP: {\n-            proxyType proxy;\n-            if (GetProxy(NET_IPV4, proxy))\n-                return QVariant(QString::fromStdString(proxy.first.ToStringIP()));\n-            else\n-                return QVariant(QString::fromStdString(\"127.0.0.1\"));\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(0);\n         }\n         case ProxyPort: {\n-            proxyType proxy;\n-            if (GetProxy(NET_IPV4, proxy))\n-                return QVariant(proxy.first.GetPort());\n-            else\n-                return QVariant(9050);\n-        }\n-        case ProxySocksVersion: {\n-            proxyType proxy;\n-            if (GetProxy(NET_IPV4, proxy))\n-                return QVariant(proxy.second);\n-            else\n-                return QVariant(5);\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(1);\n         }\n+        case ProxySocksVersion:\n+            return settings.value(\"nSocksVersion\", 5);\n+\n         case Fee:\n-            return QVariant((qint64) nTransactionFee);\n+            // Attention: Init() is called before nTransactionFee is set in AppInit2()!\n+            // To ensure we can change the fee on-the-fly update our QSetting when\n+            // opening OptionsDialog, which queries Fee via the mapper.\n+            if (nTransactionFee != settings.value(\"nTransactionFee\").toLongLong())\n+                settings.setValue(\"nTransactionFee\", (qint64)nTransactionFee);\n+            // Todo: Consider to revert back to use just nTransactionFee here, if we don't want\n+            // -paytxfee to update our QSettings!\n+            return settings.value(\"nTransactionFee\");\n         case DisplayUnit:\n-            return QVariant(nDisplayUnit);\n+            return nDisplayUnit;\n         case DisplayAddresses:\n-            return QVariant(bDisplayAddresses);\n+            return bDisplayAddresses;\n         case Language:\n-            return settings.value(\"language\", \"\");\n+            return settings.value(\"language\");\n         case CoinControlFeatures:\n-            return QVariant(fCoinControlFeatures);\n+            return fCoinControlFeatures;\n+        case DatabaseCache:\n+            return settings.value(\"nDatabaseCache\");\n+        case ThreadsScriptVerif:\n+            return settings.value(\"nThreadsScriptVerif\");\n         default:\n             return QVariant();\n         }\n     }\n     return QVariant();\n }\n \n+// write QSettings values\n bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n {\n     bool successful = true; /* set to false on parse error */\n@@ -233,52 +271,58 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             fMinimizeToTray = value.toBool();\n             settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n             break;\n-        case MapPortUPnP:\n+        case MapPortUPnP: // core option - can be changed on-the-fly\n             settings.setValue(\"fUseUPnP\", value.toBool());\n             MapPort(value.toBool());\n             break;\n         case MinimizeOnClose:\n             fMinimizeOnClose = value.toBool();\n             settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n             break;\n+\n+        // default proxy\n         case ProxyUse:\n-            settings.setValue(\"fUseProxy\", value.toBool());\n-            successful = ApplyProxySettings();\n+            if (settings.value(\"fUseProxy\") != value) {\n+                settings.setValue(\"fUseProxy\", value.toBool());\n+                setRestartRequired(true);\n+            }\n             break;\n         case ProxyIP: {\n-            proxyType proxy;\n-            proxy.first = CService(\"127.0.0.1\", 9050);\n-            GetProxy(NET_IPV4, proxy);\n-\n-            CNetAddr addr(value.toString().toStdString());\n-            proxy.first.SetIP(addr);\n-            settings.setValue(\"addrProxy\", proxy.first.ToStringIPPort().c_str());\n-            successful = ApplyProxySettings();\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed IP\n+            if (!settings.contains(\"addrProxy\") || strlIpPort.at(0) != value.toString()) {\n+                // construct new value from new IP and current port\n+                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n+                settings.setValue(\"addrProxy\", strNewValue);\n+                setRestartRequired(true);\n+            }\n         }\n         break;\n         case ProxyPort: {\n-            proxyType proxy;\n-            proxy.first = CService(\"127.0.0.1\", 9050);\n-            GetProxy(NET_IPV4, proxy);\n-\n-            proxy.first.SetPort(value.toInt());\n-            settings.setValue(\"addrProxy\", proxy.first.ToStringIPPort().c_str());\n-            successful = ApplyProxySettings();\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed port\n+            if (!settings.contains(\"addrProxy\") || strlIpPort.at(1) != value.toString()) {\n+                // construct new value from current IP and new port\n+                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n+                settings.setValue(\"addrProxy\", strNewValue);\n+                setRestartRequired(true);\n+            }\n         }\n         break;\n         case ProxySocksVersion: {\n-            proxyType proxy;\n-            proxy.second = 5;\n-            GetProxy(NET_IPV4, proxy);\n-\n-            proxy.second = value.toInt();\n-            settings.setValue(\"nSocksVersion\", proxy.second);\n-            successful = ApplyProxySettings();\n+            if (settings.value(\"nSocksVersion\") != value) {\n+                settings.setValue(\"nSocksVersion\", value.toInt());\n+                setRestartRequired(true);\n+            }\n         }\n         break;\n-        case Fee:\n+\n+        case Fee: // core option - can be changed on-the-fly\n+            // Todo: Add is valid check  and warn via message, if not\n             nTransactionFee = value.toLongLong();\n-            settings.setValue(\"nTransactionFee\", (qint64) nTransactionFee);\n+            settings.setValue(\"nTransactionFee\", (qint64)nTransactionFee);\n             emit transactionFeeChanged(nTransactionFee);\n             break;\n         case DisplayUnit:\n@@ -291,13 +335,28 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             settings.setValue(\"bDisplayAddresses\", bDisplayAddresses);\n             break;\n         case Language:\n-            settings.setValue(\"language\", value);\n+            if (settings.value(\"language\") != value) {\n+                settings.setValue(\"language\", value);\n+                setRestartRequired(true);\n+            }\n             break;\n         case CoinControlFeatures:\n             fCoinControlFeatures = value.toBool();\n             settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n             emit coinControlFeaturesChanged(fCoinControlFeatures);\n             break;\n+        case DatabaseCache:\n+            if (settings.value(\"nDatabaseCache\") != value) {\n+                settings.setValue(\"nDatabaseCache\", value);\n+                setRestartRequired(true);\n+            }\n+            break;\n+        case ThreadsScriptVerif:\n+            if (settings.value(\"nThreadsScriptVerif\") != value) {\n+                settings.setValue(\"nThreadsScriptVerif\", value);\n+                setRestartRequired(true);\n+            }\n+            break;\n         default:\n             break;\n         }\n@@ -317,3 +376,15 @@ bool OptionsModel::getProxySettings(QString& proxyIP, quint16 &proxyPort) const\n     proxyPort = addrProxy.GetPort();\n     return true;\n }\n+\n+void OptionsModel::setRestartRequired(bool fRequired)\n+{\n+    QSettings settings;\n+    return settings.setValue(\"fRestartRequired\", fRequired);\n+}\n+\n+bool OptionsModel::isRestartRequired()\n+{\n+    QSettings settings;\n+    return settings.value(\"fRestartRequired\", false).toBool();\n+}"
      },
      {
        "sha": "d05cb46746075ff8b0166884d135d7271c5a1e9d",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e195e8459ad741368db6bb574981fccb1707268/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e195e8459ad741368db6bb574981fccb1707268/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=7e195e8459ad741368db6bb574981fccb1707268",
        "patch": "@@ -34,14 +34,16 @@ class OptionsModel : public QAbstractListModel\n         DisplayAddresses,       // bool\n         Language,               // QString\n         CoinControlFeatures,    // bool\n+        ThreadsScriptVerif,     // int\n+        DatabaseCache,          // int\n         OptionIDRowCount,\n     };\n \n     void Init();\n     void Reset();\n \n     /* Migrate settings from wallet.dat after app initialization */\n-    bool Upgrade(); /* returns true if settings upgraded */\n+    void Upgrade();\n \n     int rowCount(const QModelIndex & parent = QModelIndex()) const;\n     QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const;\n@@ -52,17 +54,24 @@ class OptionsModel : public QAbstractListModel\n     bool getMinimizeOnClose() { return fMinimizeOnClose; }\n     int getDisplayUnit() { return nDisplayUnit; }\n     bool getDisplayAddresses() { return bDisplayAddresses; }\n-    QString getLanguage() { return language; }\n     bool getProxySettings(QString& proxyIP, quint16 &proxyPort) const;\n     bool getCoinControlFeatures() { return fCoinControlFeatures; }\n+    const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }\n+\n+    /* Restart flag helper */\n+    void setRestartRequired(bool fRequired);\n+    bool isRestartRequired();\n \n private:\n-    int nDisplayUnit;\n-    bool bDisplayAddresses;\n+    /* Qt-only settings */\n     bool fMinimizeToTray;\n     bool fMinimizeOnClose;\n     QString language;\n+    int nDisplayUnit;\n+    bool bDisplayAddresses;\n     bool fCoinControlFeatures;\n+    /* settings that were overriden by command-line */\n+    QString strOverriddenByCommandLine;\n \n signals:\n     void displayUnitChanged(int unit);"
      }
    ]
  }
]