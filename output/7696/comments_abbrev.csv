paveljanik,2016-03-16T07:49:31Z,"Travis fails with:\n\n```\ntest/net_tests.cpp(93): error: in ""addrman_tests/caddrdb_deserialiation"": check addrman1.size() == 3 has failed\ntest/net_tests.cpp(105): error: in ""addrman_tests/caddrdb_deserialiation"": check addrman2.size() == 3 has failed\n```\n\nBut only in one configuration.\n",https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-197200010,197200010,
jonasschnelli,2016-03-16T12:33:40Z,"Concept ACK, more tests are better. Haven't verified the tests though.\n",https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-197298916,197298916,
EthanHeilman,2016-03-16T15:10:04Z,"@paveljanik The non-determinism of the test passing is worrying especially because the test that was failing was not testing new behavior. I haven't been able to replicate this failure locally, any idea what is happening with it?\n",https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-197375145,197375145,
EthanHeilman,2016-03-16T15:12:14Z,Can someone add the labels bug and data corruption.\n,https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-197376035,197376035,
laanwj,2016-03-24T16:20:30Z,"Concept ACK.\n\nInstead of relying on the output of CAddrDB::Read to be ""clean"" in case of an error I'd prefer a different approach, though: ignore and reset its output when the function fails. In my experience this is a more robust approach - it's easy to forget resetting it in some code path. In a lot of APIs the output of failing functions is thus undefined.\n",https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-200908357,200908357,
EthanHeilman,2016-03-24T21:48:24Z,"@laanwj I'm not sure I follow, do you want the ""clearing"" to happen closer to the source of the error? In the serialization code? \n",https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-201039632,201039632,
laanwj,2016-03-25T09:51:29Z,"@EthanHeilman At the call site:\n\n```\n        if (adb.Read(addrman))\n            LogPrintf(""Loaded %i addresses from peers.dat  %dms\n"", addrman.size(), GetTimeMillis() - nStart);\n        else {\n            addrman.clear(); // Addrman can be in an inconsistent state after failure, reset it\n            LogPrintf(""Invalid or missing peers.dat; recreating\n"");\n            DumpAddresses();\n   ",https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-201223722,201223722,
EthanHeilman,2016-03-25T16:27:52Z,"@laanwj Good idea, I amended the commit to include addrman.Clear in StartNode's Read() error condition.\n",https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-201350876,201350876,
EthanHeilman,2016-04-18T19:20:48Z,Does this pull-request need any additional changes?\n,https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-211538159,211538159,
laanwj,2016-04-19T13:33:06Z,"I still don't really like passing the hash into bool CAddrDB::Read, I think it makes for an awful API :)\n",https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-211924495,211924495,
EthanHeilman,2016-05-04T23:26:19Z,@laanwj I removed hash from CAddrDB::Read \n,https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-217037535,217037535,
sipa,2016-05-05T16:33:51Z,utACK 1475ecf61141e03f63a79d59831c411e0e8a5c0a\n,https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-217203200,217203200,
laanwj,2016-05-05T17:32:27Z,"@EthanHeilman Looks good to me now, thanks. utACK\n",https://github.com/bitcoin/bitcoin/pull/7696#issuecomment-217219099,217219099,
paveljanik,2016-03-16T07:43:13Z,strange test name ;-) `z` missing\n,https://github.com/bitcoin/bitcoin/pull/7696#discussion_r56292422,56292422,src/test/net_tests.cpp
paveljanik,2016-03-16T07:47:08Z,"You test addrman, not net. Please name the file `addrman_tests.cpp`.\n",https://github.com/bitcoin/bitcoin/pull/7696#discussion_r56292683,56292683,src/Makefile.test.include
EthanHeilman,2016-03-16T12:23:37Z,"I am testing CAddrDB, which is called from and lives in net.h and net.cpp not CAddrMan.\n",https://github.com/bitcoin/bitcoin/pull/7696#discussion_r56324033,56324033,src/Makefile.test.include
jonasschnelli,2016-03-16T12:32:11Z,No strong opinion: IMO we don't need to use an identical filename for what is tested in the test. I think `addrman_tests.cpp` would be more clear.\n,https://github.com/bitcoin/bitcoin/pull/7696#discussion_r56324926,56324926,src/Makefile.test.include
EthanHeilman,2016-03-16T12:36:03Z,"Thanks. I changed it to caddrdb_read, since that is a better descriptor of what I am testing.\n",https://github.com/bitcoin/bitcoin/pull/7696#discussion_r56325375,56325375,src/test/net_tests.cpp
EthanHeilman,2016-03-16T12:49:38Z,"If someone feels strongly I'm happy to move it to addrman_tests.cpp. I wrote all the tests in addrman_tests and choose to put this test in net_tests since it feels more common to net than addrman.\n\nIdeally CAddrDB, CBanDB and other files which manage interaction with the data directory should be refactored into a common file/class but that is much larger task (for instance CBanDB is very tightly",https://github.com/bitcoin/bitcoin/pull/7696#discussion_r56326921,56326921,src/Makefile.test.include
laanwj,2016-03-25T16:31:15Z,"Could make sense to move the hash check to the outer read function - after all, it's not part of the inner stream but of the wrapping file.\nWould simplify testing as there'd be no need to pass hashIn here.\n",https://github.com/bitcoin/bitcoin/pull/7696#discussion_r57460774,57460774,src/net.cpp
EthanHeilman,2016-03-25T17:07:03Z,"My thinking with passing hashIn as a parameter was that it would allow me to write a test on the ""inner read"" to verify an error is thrown if hashIn is not the same as the hash of ssPeers. Something like:\n\n``` c++\nBOOST_AUTO_TEST_CASE(caddrdb_hash)\n{\n    CAddrManUncorrupted addrmanUncorrupted;\n    CService addr1 = CService(""250.7.1.1"", 8333);\n    addrmanUncorrupted.Add(CAddress(addr1), CSer",https://github.com/bitcoin/bitcoin/pull/7696#discussion_r57464394,57464394,src/net.cpp
laanwj,2016-03-25T17:36:39Z,"Ok, yes, that makes sense.\n\n> How interested are you in a system for mocking out filesystem objects rather than having to do everything at the stream level?\n\nDepends on the (non-test) code impact. I'm not entirely sure that is necessary - e.g. you could create a temporary file and make it read that.\n",https://github.com/bitcoin/bitcoin/pull/7696#discussion_r57468001,57468001,src/net.cpp
EthanHeilman,2016-03-25T18:51:51Z,"> Depends on the (non-test) code impact. \n\nIt is on my list of things to investigate, but I was considering creating a class which wraps File/fopen and can be mocked out in unitests similar to RandomInt in addrman.h.\n\nhttps://github.com/bitcoin/bitcoin/blob/master/src/addrman.h#L239\n\nI share your concern as this would require a big diff when all the instances of File are replaced with mockab",https://github.com/bitcoin/bitcoin/pull/7696#discussion_r57476892,57476892,src/net.cpp
laanwj,2016-03-26T07:22:59Z,"> YMMV, but in my experience tmp files in unittests cause hard to debug test failures due to filesystem weirdness and added state (file deletes sometimes fail).\n\nI agree. It's somewhat preferable to not clutter files around the place.\nOn the other hand it actually tests the filesystem interaction then :)\n\n> I share your concern as this would require a big diff when all the instances of File a",https://github.com/bitcoin/bitcoin/pull/7696#discussion_r57510529,57510529,src/net.cpp
sipa,2016-05-17T08:35:55Z,adddrman\n,https://github.com/bitcoin/bitcoin/pull/7696#discussion_r63483473,63483473,src/test/net_tests.cpp
