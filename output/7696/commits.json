[
  {
    "sha": "1475ecf61141e03f63a79d59831c411e0e8a5c0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDc1ZWNmNjExNDFlMDNmNjNhNzlkNTk4MzFjNDExZTBlOGE1YzBh",
    "commit": {
      "author": {
        "name": "EthanHeilman",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2016-03-16T16:54:30Z"
      },
      "committer": {
        "name": "Ethan Heilman",
        "email": "Ethan.R.Heilman@gmail.com",
        "date": "2016-05-04T22:55:01Z"
      },
      "message": "Fix de-serialization bug where AddrMan is corrupted after exception\n* CAddrDB modified so that when de-serialization code throws an exception Addrman is reset to a clean state\n* CAddrDB modified to make unit tests possible\n* Regression test created to ensure bug is fixed\n* StartNode modifed to clear adrman if CAddrDB::Read returns an error code.",
      "tree": {
        "sha": "34edb793a879c504177833183433cacbdac1284b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34edb793a879c504177833183433cacbdac1284b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1475ecf61141e03f63a79d59831c411e0e8a5c0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1475ecf61141e03f63a79d59831c411e0e8a5c0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1475ecf61141e03f63a79d59831c411e0e8a5c0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1475ecf61141e03f63a79d59831c411e0e8a5c0a/comments",
    "author": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "326f010332a68b5b8bbf2ae9c1413d580b1bb9be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/326f010332a68b5b8bbf2ae9c1413d580b1bb9be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/326f010332a68b5b8bbf2ae9c1413d580b1bb9be"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 146,
      "deletions": 0
    },
    "files": [
      {
        "sha": "edeca6b28c2e28766514bfe794e0a7b30a6233e0",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1475ecf61141e03f63a79d59831c411e0e8a5c0a/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1475ecf61141e03f63a79d59831c411e0e8a5c0a/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=1475ecf61141e03f63a79d59831c411e0e8a5c0a",
        "patch": "@@ -60,6 +60,7 @@ BITCOIN_TESTS =\\\n   test/merkle_tests.cpp \\\n   test/miner_tests.cpp \\\n   test/multisig_tests.cpp \\\n+  test/net_tests.cpp \\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\\n   test/policyestimator_tests.cpp \\"
      },
      {
        "sha": "cf53816034c15e8cfb73326419ba876e3fde08c2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1475ecf61141e03f63a79d59831c411e0e8a5c0a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1475ecf61141e03f63a79d59831c411e0e8a5c0a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1475ecf61141e03f63a79d59831c411e0e8a5c0a",
        "patch": "@@ -1944,6 +1944,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (adb.Read(addrman))\n             LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", addrman.size(), GetTimeMillis() - nStart);\n         else {\n+            addrman.Clear(); // Addrman can be in an inconsistent state after failure, reset it\n             LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n             DumpAddresses();\n         }\n@@ -2336,6 +2337,11 @@ bool CAddrDB::Read(CAddrMan& addr)\n     if (hashIn != hashTmp)\n         return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n \n+    return Read(addr, ssPeers);\n+}\n+\n+bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n+{\n     unsigned char pchMsgTmp[4];\n     try {\n         // de-serialize file header (network specific magic number) and ..\n@@ -2349,6 +2355,8 @@ bool CAddrDB::Read(CAddrMan& addr)\n         ssPeers >> addr;\n     }\n     catch (const std::exception& e) {\n+        // de-serialization has failed, ensure addrman is left in a clean state\n+        addr.Clear();\n         return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n "
      },
      {
        "sha": "dfa270544f22fd26ec7765dbae5fefbad5ba6b16",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1475ecf61141e03f63a79d59831c411e0e8a5c0a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1475ecf61141e03f63a79d59831c411e0e8a5c0a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1475ecf61141e03f63a79d59831c411e0e8a5c0a",
        "patch": "@@ -779,6 +779,7 @@ class CAddrDB\n     CAddrDB();\n     bool Write(const CAddrMan& addr);\n     bool Read(CAddrMan& addr);\n+    bool Read(CAddrMan& addr, CDataStream& ssPeers);\n };\n \n /** Access to the banlist database (banlist.dat) */"
      },
      {
        "sha": "6debf6ac5e168eb6d95853689ccb059cf981a04e",
        "filename": "src/test/net_tests.cpp",
        "status": "added",
        "additions": 136,
        "deletions": 0,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1475ecf61141e03f63a79d59831c411e0e8a5c0a/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1475ecf61141e03f63a79d59831c411e0e8a5c0a/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=1475ecf61141e03f63a79d59831c411e0e8a5c0a",
        "patch": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include \"addrman.h\"\n+#include \"test/test_bitcoin.h\"\n+#include <string>\n+#include <boost/test/unit_test.hpp>\n+#include \"hash.h\"\n+#include \"serialize.h\"\n+#include \"streams.h\"\n+#include \"net.h\"\n+#include \"chainparams.h\"\n+\n+using namespace std;\n+\n+class CAddrManSerializationMock : public CAddrMan\n+{\n+public:\n+    virtual void Serialize(CDataStream& s, int nType, int nVersionDummy) const = 0;\n+};\n+\n+class CAddrManUncorrupted : public CAddrManSerializationMock\n+{\n+public:\n+    void Serialize(CDataStream& s, int nType, int nVersionDummy) const\n+    {\n+        CAddrMan::Serialize(s, nType, nVersionDummy);\n+    }\n+};\n+\n+class CAddrManCorrupted : public CAddrManSerializationMock\n+{\n+public:\n+    void Serialize(CDataStream& s, int nType, int nVersionDummy) const\n+    {\n+        // Produces corrupt output that claims addrman has 20 addrs when it only has one addr.\n+        unsigned char nVersion = 1;\n+        s << nVersion;\n+        s << ((unsigned char)32);\n+        s << nKey;\n+        s << 10; // nNew\n+        s << 10; // nTried\n+\n+        int nUBuckets = ADDRMAN_NEW_BUCKET_COUNT ^ (1 << 30);\n+        s << nUBuckets;\n+\n+        CAddress addr = CAddress(CService(\"252.1.1.1\", 7777));\n+        CAddrInfo info = CAddrInfo(addr, CNetAddr(\"252.2.2.2\"));\n+        s << info;\n+    }\n+};\n+\n+CDataStream AddrmanToStream(CAddrManSerializationMock& addrman)\n+{\n+    CDataStream ssPeersIn(SER_DISK, CLIENT_VERSION);\n+    ssPeersIn << FLATDATA(Params().MessageStart());\n+    ssPeersIn << addrman;\n+    std::string str = ssPeersIn.str();\n+    vector<unsigned char> vchData(str.begin(), str.end());\n+    return CDataStream(vchData, SER_DISK, CLIENT_VERSION);\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(net_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(caddrdb_read)\n+{\n+    CAddrManUncorrupted addrmanUncorrupted;\n+\n+    CService addr1 = CService(\"250.7.1.1\", 8333);\n+    CService addr2 = CService(\"250.7.2.2\", 9999);\n+    CService addr3 = CService(\"250.7.3.3\", 9999);\n+\n+    // Add three addresses to new table.\n+    addrmanUncorrupted.Add(CAddress(addr1), CService(\"252.5.1.1\", 8333));\n+    addrmanUncorrupted.Add(CAddress(addr2), CService(\"252.5.1.1\", 8333));\n+    addrmanUncorrupted.Add(CAddress(addr3), CService(\"252.5.1.1\", 8333));\n+\n+    // Test that the de-serialization does not throw an exception.\n+    CDataStream ssPeers1 = AddrmanToStream(addrmanUncorrupted);\n+    bool exceptionThrown = false;\n+    CAddrMan addrman1;\n+\n+    BOOST_CHECK(addrman1.size() == 0);\n+    try {\n+        unsigned char pchMsgTmp[4];\n+        ssPeers1 >> FLATDATA(pchMsgTmp);\n+        ssPeers1 >> addrman1;\n+    } catch (const std::exception& e) {\n+        exceptionThrown = true;\n+    }\n+\n+    BOOST_CHECK(addrman1.size() == 3);\n+    BOOST_CHECK(exceptionThrown == false);\n+\n+    // Test that CAddrDB::Read creates an addrman with the correct number of addrs.\n+    CDataStream ssPeers2 = AddrmanToStream(addrmanUncorrupted);\n+\n+    CAddrMan addrman2;\n+    CAddrDB adb;\n+    BOOST_CHECK(addrman2.size() == 0);\n+    adb.Read(addrman2, ssPeers2);\n+    BOOST_CHECK(addrman2.size() == 3);\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n+{\n+    CAddrManCorrupted addrmanCorrupted;\n+\n+    // Test that the de-serialization of corrupted addrman throws an exception.\n+    CDataStream ssPeers1 = AddrmanToStream(addrmanCorrupted);\n+    bool exceptionThrown = false;\n+    CAddrMan addrman1;\n+    BOOST_CHECK(addrman1.size() == 0);\n+    try {\n+        unsigned char pchMsgTmp[4];\n+        ssPeers1 >> FLATDATA(pchMsgTmp);\n+        ssPeers1 >> addrman1;\n+    } catch (const std::exception& e) {\n+        exceptionThrown = true;\n+    }\n+    // Even through de-serialization failed adddrman is not left in a clean state.\n+    BOOST_CHECK(addrman1.size() == 1);\n+    BOOST_CHECK(exceptionThrown);\n+\n+    // Test that CAddrDB::Read leaves addrman in a clean state if de-serialization fails.\n+    CDataStream ssPeers2 = AddrmanToStream(addrmanCorrupted);\n+\n+    CAddrMan addrman2;\n+    CAddrDB adb;\n+    BOOST_CHECK(addrman2.size() == 0);\n+    adb.Read(addrman2, ssPeers2);\n+    BOOST_CHECK(addrman2.size() == 0);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]