[
  {
    "sha": "739d6155d3bbdeca38bb19daf70e6ff0af022455",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzlkNjE1NWQzYmJkZWNhMzhiYjE5ZGFmNzBlNmZmMGFmMDIyNDU1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-24T04:40:50Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-04-24T18:32:39Z"
      },
      "message": "chainparams: use SeedSpec6's rather than CAddress's for fixed seeds\n\nThis negates the need for CAddress here at all",
      "tree": {
        "sha": "b62a21792562d7864a892f5c5b9ce11fe6befc78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b62a21792562d7864a892f5c5b9ce11fe6befc78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/739d6155d3bbdeca38bb19daf70e6ff0af022455",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/739d6155d3bbdeca38bb19daf70e6ff0af022455",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/739d6155d3bbdeca38bb19daf70e6ff0af022455",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/739d6155d3bbdeca38bb19daf70e6ff0af022455/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1623f6e3375430b42e7120dc02e8df8c7c22fc16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1623f6e3375430b42e7120dc02e8df8c7c22fc16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1623f6e3375430b42e7120dc02e8df8c7c22fc16"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 32,
      "deletions": 30
    },
    "files": [
      {
        "sha": "a3434bd6e884fa6913d39078c0adbcda311438b3",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 27,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/739d6155d3bbdeca38bb19daf70e6ff0af022455/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/739d6155d3bbdeca38bb19daf70e6ff0af022455/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=739d6155d3bbdeca38bb19daf70e6ff0af022455",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"chainparams.h\"\n \n-#include \"random.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -15,35 +14,11 @@\n \n using namespace std;\n \n-struct SeedSpec6 {\n-    uint8_t addr[16];\n-    uint16_t port;\n-};\n-\n #include \"chainparamsseeds.h\"\n \n /**\n  * Main network\n  */\n-\n-//! Convert the pnSeeds6 array into usable address objects.\n-static void convertSeed6(std::vector<CAddress> &vSeedsOut, const SeedSpec6 *data, unsigned int count)\n-{\n-    // It'll only connect to one or two seed nodes because once it connects,\n-    // it'll get a pile of addresses with newer timestamps.\n-    // Seed nodes are given a random 'last seen time' of between one and two\n-    // weeks ago.\n-    const int64_t nOneWeek = 7*24*60*60;\n-    for (unsigned int i = 0; i < count; i++)\n-    {\n-        struct in6_addr ip;\n-        memcpy(&ip, data[i].addr, sizeof(ip));\n-        CAddress addr(CService(ip, data[i].port));\n-        addr.nTime = GetTime() - GetRand(nOneWeek) - nOneWeek;\n-        vSeedsOut.push_back(addr);\n-    }\n-}\n-\n /**\n  * What makes a good checkpoint block?\n  * + Is surrounded by blocks with reasonable timestamps\n@@ -164,7 +139,7 @@ class CMainParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();\n \n-        convertSeed6(vFixedSeeds, pnSeed6_main, ARRAYLEN(pnSeed6_main));\n+        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n \n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n@@ -220,7 +195,7 @@ class CTestNetParams : public CMainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n \n-        convertSeed6(vFixedSeeds, pnSeed6_test, ARRAYLEN(pnSeed6_test));\n+        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_test, pnSeed6_test + ARRAYLEN(pnSeed6_test));\n \n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;"
      },
      {
        "sha": "bf76eb110a6ab0011186f099968555d1c310d165",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/739d6155d3bbdeca38bb19daf70e6ff0af022455/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/739d6155d3bbdeca38bb19daf70e6ff0af022455/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=739d6155d3bbdeca38bb19daf70e6ff0af022455",
        "patch": "@@ -19,6 +19,12 @@ struct CDNSSeedData {\n     CDNSSeedData(const std::string &strName, const std::string &strHost) : name(strName), host(strHost) {}\n };\n \n+struct SeedSpec6 {\n+    uint8_t addr[16];\n+    uint16_t port;\n+};\n+\n+\n /**\n  * CChainParams defines various tweakable parameters of a given instance of the\n  * Bitcoin system. There are three: the main network on which people trade goods\n@@ -67,7 +73,7 @@ class CChainParams\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n-    const std::vector<CAddress>& FixedSeeds() const { return vFixedSeeds; }\n+    const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     virtual const Checkpoints::CCheckpointData& Checkpoints() const = 0;\n protected:\n     CChainParams() {}\n@@ -83,7 +89,7 @@ class CChainParams\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n     std::string strNetworkID;\n     CBlock genesis;\n-    std::vector<CAddress> vFixedSeeds;\n+    std::vector<SeedSpec6> vFixedSeeds;\n     bool fRequireRPCPassword;\n     bool fMiningRequiresPeers;\n     bool fDefaultConsistencyChecks;"
      },
      {
        "sha": "1481ad917eea00f13ff1f9e59eb80907a09f11af",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/739d6155d3bbdeca38bb19daf70e6ff0af022455/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/739d6155d3bbdeca38bb19daf70e6ff0af022455/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=739d6155d3bbdeca38bb19daf70e6ff0af022455",
        "patch": "@@ -141,6 +141,27 @@ bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n     return nBestScore >= 0;\n }\n \n+//! Convert the pnSeeds6 array into usable address objects.\n+static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn)\n+{\n+    // It'll only connect to one or two seed nodes because once it connects,\n+    // it'll get a pile of addresses with newer timestamps.\n+    // Seed nodes are given a random 'last seen time' of between one and two\n+    // weeks ago.\n+    const int64_t nOneWeek = 7*24*60*60;\n+    std::vector<CAddress> vSeedsOut;\n+    vSeedsOut.reserve(vSeedsIn.size());\n+    for (std::vector<SeedSpec6>::const_iterator i(vSeedsIn.begin()); i != vSeedsIn.end(); ++i)\n+    {\n+        struct in6_addr ip;\n+        memcpy(&ip, i->addr, sizeof(ip));\n+        CAddress addr(CService(ip, i->port));\n+        addr.nTime = GetTime() - GetRand(nOneWeek) - nOneWeek;\n+        vSeedsOut.push_back(addr);\n+    }\n+    return vSeedsOut;\n+}\n+\n // get best local address for a particular peer as a CAddress\n // Otherwise, return the unroutable 0.0.0.0 but filled in with\n // the normal parameters, since the IP may be changed to a useful\n@@ -1192,7 +1213,7 @@ void ThreadOpenConnections()\n             static bool done = false;\n             if (!done) {\n                 LogPrintf(\"Adding fixed seed nodes as DNS doesn't seem to be available.\\n\");\n-                addrman.Add(Params().FixedSeeds(), CNetAddr(\"127.0.0.1\"));\n+                addrman.Add(convertSeed6(Params().FixedSeeds()), CNetAddr(\"127.0.0.1\"));\n                 done = true;\n             }\n         }"
      }
    ]
  }
]