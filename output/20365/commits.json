[
  {
    "sha": "6d3af3ab627096a824cb6a7ca1ebeddc7530361c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDNhZjNhYjYyNzA5NmE4MjRjYjZhN2NhMWViZWRkYzc1MzAzNjFj",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-11-11T04:40:02Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-11-11T04:40:02Z"
      },
      "message": "wallettool: pass in DatabaseOptions into MakeWallet",
      "tree": {
        "sha": "aaaf428c6f7245b8f7f6a44baceac173d15b3a96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aaaf428c6f7245b8f7f6a44baceac173d15b3a96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d3af3ab627096a824cb6a7ca1ebeddc7530361c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d3af3ab627096a824cb6a7ca1ebeddc7530361c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d3af3ab627096a824cb6a7ca1ebeddc7530361c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d3af3ab627096a824cb6a7ca1ebeddc7530361c/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa8dd34e918cd80db215df8937aaf6bb1552fcd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8dd34e918cd80db215df8937aaf6bb1552fcd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8dd34e918cd80db215df8937aaf6bb1552fcd9"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 8,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4e8bfd615cb6ef8e8727a393d2a7a91df216a855",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d3af3ab627096a824cb6a7ca1ebeddc7530361c/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d3af3ab627096a824cb6a7ca1ebeddc7530361c/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=6d3af3ab627096a824cb6a7ca1ebeddc7530361c",
        "patch": "@@ -36,15 +36,9 @@ static void WalletCreate(CWallet* wallet_instance)\n     wallet_instance->TopUpKeyPool();\n }\n \n-static std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::path& path, bool create)\n+static std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::path& path, DatabaseOptions options)\n {\n-    DatabaseOptions options;\n     DatabaseStatus status;\n-    if (create) {\n-        options.require_create = true;\n-    } else {\n-        options.require_existing = true;\n-    }\n     bilingual_str error;\n     std::unique_ptr<WalletDatabase> database = MakeDatabase(path, options, status, error);\n     if (!database) {\n@@ -85,7 +79,7 @@ static std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::pa\n         }\n     }\n \n-    if (create) WalletCreate(wallet_instance.get());\n+    if (options.require_create) WalletCreate(wallet_instance.get());\n \n     return wallet_instance;\n }\n@@ -110,14 +104,18 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n     fs::path path = fs::absolute(name, GetWalletDir());\n \n     if (command == \"create\") {\n-        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ true);\n+        DatabaseOptions options;\n+        options.require_create = true;\n+        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n     } else if (command == \"info\" || command == \"salvage\") {\n         if (command == \"info\") {\n-            std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, /* create= */ false);\n+            DatabaseOptions options;\n+            options.require_existing = true;\n+            std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n             if (!wallet_instance) return false;\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();"
      }
    ]
  },
  {
    "sha": "345e88eecf1b28607d5da3af38e19794a8a115ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDVlODhlZWNmMWIyODYwN2Q1ZGEzYWYzOGUxOTc5NGE4YTExNWNl",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-11-11T04:41:53Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-11-11T04:41:53Z"
      },
      "message": "wallettool: add param to create descriptors wallet",
      "tree": {
        "sha": "a98c0d616444b7df4cadf2ca0a548c36221d4476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a98c0d616444b7df4cadf2ca0a548c36221d4476"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/345e88eecf1b28607d5da3af38e19794a8a115ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/345e88eecf1b28607d5da3af38e19794a8a115ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/345e88eecf1b28607d5da3af38e19794a8a115ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/345e88eecf1b28607d5da3af38e19794a8a115ce/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d3af3ab627096a824cb6a7ca1ebeddc7530361c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d3af3ab627096a824cb6a7ca1ebeddc7530361c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d3af3ab627096a824cb6a7ca1ebeddc7530361c"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 15,
      "deletions": 6
    },
    "files": [
      {
        "sha": "6671838104e417224e08144e556486ed34159139",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/345e88eecf1b28607d5da3af38e19794a8a115ce/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/345e88eecf1b28607d5da3af38e19794a8a115ce/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=345e88eecf1b28607d5da3af38e19794a8a115ce",
        "patch": "@@ -27,6 +27,7 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for create\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n     argsman.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);"
      },
      {
        "sha": "538389e4c03994a86d174721f38e1c802b4c005f",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/345e88eecf1b28607d5da3af38e19794a8a115ce/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/345e88eecf1b28607d5da3af38e19794a8a115ce/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=345e88eecf1b28607d5da3af38e19794a8a115ce",
        "patch": "@@ -21,16 +21,19 @@ static void WalletToolReleaseWallet(CWallet* wallet)\n     delete wallet;\n }\n \n-static void WalletCreate(CWallet* wallet_instance)\n+static void WalletCreate(CWallet* wallet_instance, uint64_t wallet_creation_flags)\n {\n     LOCK(wallet_instance->cs_wallet);\n \n     wallet_instance->SetMinVersion(FEATURE_HD_SPLIT);\n+    wallet_instance->AddWalletFlags(wallet_creation_flags);\n \n-    // generate a new HD seed\n-    auto spk_man = wallet_instance->GetOrCreateLegacyScriptPubKeyMan();\n-    CPubKey seed = spk_man->GenerateNewSeed();\n-    spk_man->SetHDSeed(seed);\n+    if (!wallet_instance->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        auto spk_man = wallet_instance->GetOrCreateLegacyScriptPubKeyMan();\n+        spk_man->SetupGeneration(false);\n+    } else {\n+        wallet_instance->SetupDescriptorScriptPubKeyMans();\n+    }\n \n     tfm::format(std::cout, \"Topping up keypool...\\n\");\n     wallet_instance->TopUpKeyPool();\n@@ -79,7 +82,7 @@ static std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::pa\n         }\n     }\n \n-    if (options.require_create) WalletCreate(wallet_instance.get());\n+    if (options.require_create) WalletCreate(wallet_instance.get(), options.create_flags);\n \n     return wallet_instance;\n }\n@@ -106,6 +109,11 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n     if (command == \"create\") {\n         DatabaseOptions options;\n         options.require_create = true;\n+        if (gArgs.GetBoolArg(\"-descriptors\", false)) {\n+            options.create_flags |= WALLET_FLAG_DESCRIPTORS;\n+            options.require_format = DatabaseFormat::SQLITE;\n+        }\n+\n         std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());"
      }
    ]
  },
  {
    "sha": "173cc9b7be335b5dd2cc1bb112dfa6ec5c13ec12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzNjYzliN2JlMzM1YjVkZDJjYzFiYjExMmRmYTZlYzVjMTNlYzEy",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-11-13T10:52:28Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-11-13T10:52:28Z"
      },
      "message": "test: walettool create descriptors",
      "tree": {
        "sha": "c7d0f61fb07972df01ce61a640b4ccbe791e299f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7d0f61fb07972df01ce61a640b4ccbe791e299f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/173cc9b7be335b5dd2cc1bb112dfa6ec5c13ec12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/173cc9b7be335b5dd2cc1bb112dfa6ec5c13ec12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/173cc9b7be335b5dd2cc1bb112dfa6ec5c13ec12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/173cc9b7be335b5dd2cc1bb112dfa6ec5c13ec12/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "345e88eecf1b28607d5da3af38e19794a8a115ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/345e88eecf1b28607d5da3af38e19794a8a115ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/345e88eecf1b28607d5da3af38e19794a8a115ce"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 47,
      "deletions": 75
    },
    "files": [
      {
        "sha": "35576f00ea3de1a1e1443761e11f8429e4211c49",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 47,
        "deletions": 75,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/173cc9b7be335b5dd2cc1bb112dfa6ec5c13ec12/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/173cc9b7be335b5dd2cc1bb112dfa6ec5c13ec12/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=173cc9b7be335b5dd2cc1bb112dfa6ec5c13ec12",
        "patch": "@@ -28,8 +28,11 @@ def skip_test_if_missing_module(self):\n \n     def bitcoin_wallet_process(self, *args):\n         binary = self.config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-wallet' + self.config[\"environment\"][\"EXEEXT\"]\n-        args = ['-datadir={}'.format(self.nodes[0].datadir), '-chain=%s' % self.chain] + list(args)\n-        return subprocess.Popen([binary] + args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n+        default_args = ['-datadir={}'.format(self.nodes[0].datadir), '-chain=%s' % self.chain]\n+        if self.options.descriptors:\n+            default_args.append('-descriptors')\n+\n+        return subprocess.Popen([binary] + default_args + list(args), stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n \n     def assert_raises_tool_error(self, error, *args):\n         p = self.bitcoin_wallet_process(*args)\n@@ -63,6 +66,36 @@ def log_wallet_timestamp_comparison(self, old, new):\n         result = 'unchanged' if new == old else 'increased!'\n         self.log.debug('Wallet file timestamp {}'.format(result))\n \n+    def get_expected_info_output(self, name=\"\", transactions=0, keypool=2, address=0):\n+        wallet_name = self.default_wallet_name if name == \"\" else name\n+        output_types = 3  # p2pkh, p2sh, segwit\n+        if self.options.descriptors:\n+            return textwrap.dedent('''\\\n+                Wallet info\n+                ===========\n+                Name: %s\n+                Format: sqlite\n+                Descriptors: yes\n+                Encrypted: no\n+                HD (hd seed available): yes\n+                Keypool Size: %d\n+                Transactions: %d\n+                Address Book: %d\n+            ''' % (wallet_name, keypool * output_types, transactions, address))\n+        else:\n+            return textwrap.dedent('''\\\n+                Wallet info\n+                ===========\n+                Name: %s\n+                Format: bdb\n+                Descriptors: no\n+                Encrypted: no\n+                HD (hd seed available): yes\n+                Keypool Size: %d\n+                Transactions: %d\n+                Address Book: %d\n+            ''' % (wallet_name, keypool, transactions, address * output_types))\n+\n     def test_invalid_tool_commands_and_args(self):\n         self.log.info('Testing that various invalid commands raise with specific error messages')\n         self.assert_raises_tool_error('Invalid command: foo', 'foo')\n@@ -98,33 +131,7 @@ def test_tool_wallet_info(self):\n         # shasum_before = self.wallet_shasum()\n         timestamp_before = self.wallet_timestamp()\n         self.log.debug('Wallet file timestamp before calling info: {}'.format(timestamp_before))\n-        if self.options.descriptors:\n-            out = textwrap.dedent('''\\\n-                Wallet info\n-                ===========\n-                Name: default_wallet\n-                Format: sqlite\n-                Descriptors: yes\n-                Encrypted: no\n-                HD (hd seed available): yes\n-                Keypool Size: 6\n-                Transactions: 0\n-                Address Book: 1\n-            ''')\n-        else:\n-            out = textwrap.dedent('''\\\n-                Wallet info\n-                ===========\n-                Name: \\\n-\n-                Format: bdb\n-                Descriptors: no\n-                Encrypted: no\n-                HD (hd seed available): yes\n-                Keypool Size: 2\n-                Transactions: 0\n-                Address Book: 3\n-            ''')\n+        out = self.get_expected_info_output(address=1)\n         self.assert_tool_output(out, '-wallet=' + self.default_wallet_name, 'info')\n         timestamp_after = self.wallet_timestamp()\n         self.log.debug('Wallet file timestamp after calling info: {}'.format(timestamp_after))\n@@ -155,33 +162,7 @@ def test_tool_wallet_info_after_transaction(self):\n         shasum_before = self.wallet_shasum()\n         timestamp_before = self.wallet_timestamp()\n         self.log.debug('Wallet file timestamp before calling info: {}'.format(timestamp_before))\n-        if self.options.descriptors:\n-            out = textwrap.dedent('''\\\n-                Wallet info\n-                ===========\n-                Name: default_wallet\n-                Format: sqlite\n-                Descriptors: yes\n-                Encrypted: no\n-                HD (hd seed available): yes\n-                Keypool Size: 6\n-                Transactions: 1\n-                Address Book: 1\n-            ''')\n-        else:\n-            out = textwrap.dedent('''\\\n-                Wallet info\n-                ===========\n-                Name: \\\n-\n-                Format: bdb\n-                Descriptors: no\n-                Encrypted: no\n-                HD (hd seed available): yes\n-                Keypool Size: 2\n-                Transactions: 1\n-                Address Book: 3\n-            ''')\n+        out = self.get_expected_info_output(transactions=1, address=1)\n         self.assert_tool_output(out, '-wallet=' + self.default_wallet_name, 'info')\n         shasum_after = self.wallet_shasum()\n         timestamp_after = self.wallet_timestamp()\n@@ -199,19 +180,7 @@ def test_tool_wallet_create_on_existing_wallet(self):\n         shasum_before = self.wallet_shasum()\n         timestamp_before = self.wallet_timestamp()\n         self.log.debug('Wallet file timestamp before calling create: {}'.format(timestamp_before))\n-        out = textwrap.dedent('''\\\n-            Topping up keypool...\n-            Wallet info\n-            ===========\n-            Name: foo\n-            Format: bdb\n-            Descriptors: no\n-            Encrypted: no\n-            HD (hd seed available): yes\n-            Keypool Size: 2000\n-            Transactions: 0\n-            Address Book: 0\n-        ''')\n+        out = \"Topping up keypool...\\n\" + self.get_expected_info_output(name=\"foo\", keypool=2000)\n         self.assert_tool_output(out, '-wallet=foo', 'create')\n         shasum_after = self.wallet_shasum()\n         timestamp_after = self.wallet_timestamp()\n@@ -237,9 +206,13 @@ def test_getwalletinfo_on_different_wallet(self):\n         self.log.debug('Wallet file timestamp after calling getwalletinfo: {}'.format(timestamp_after))\n \n         assert_equal(0, out['txcount'])\n-        assert_equal(1000, out['keypoolsize'])\n-        assert_equal(1000, out['keypoolsize_hd_internal'])\n-        assert_equal(True, 'hdseedid' in out)\n+        if not self.options.descriptors:\n+            assert_equal(1000, out['keypoolsize'])\n+            assert_equal(1000, out['keypoolsize_hd_internal'])\n+            assert_equal(True, 'hdseedid' in out)\n+        else:\n+            assert_equal(3000, out['keypoolsize'])\n+            assert_equal(3000, out['keypoolsize_hd_internal'])\n \n         self.log_wallet_timestamp_comparison(timestamp_before, timestamp_after)\n         assert_equal(timestamp_before, timestamp_after)\n@@ -261,10 +234,9 @@ def run_test(self):\n         # Warning: The following tests are order-dependent.\n         self.test_tool_wallet_info()\n         self.test_tool_wallet_info_after_transaction()\n+        self.test_tool_wallet_create_on_existing_wallet()\n+        self.test_getwalletinfo_on_different_wallet()\n         if not self.options.descriptors:\n-            # TODO: Wallet tool needs more create options at which point these can be enabled.\n-            self.test_tool_wallet_create_on_existing_wallet()\n-            self.test_getwalletinfo_on_different_wallet()\n             # Salvage is a legacy wallet only thing\n             self.test_salvage()\n "
      }
    ]
  }
]