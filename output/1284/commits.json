[
  {
    "sha": "9f5b11e6fd99e30b22be3335dec342acd6a8d28a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjViMTFlNmZkOTllMzBiMjJiZTMzMzVkZWMzNDJhY2Q2YThkMjhh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-13T09:36:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-13T16:41:19Z"
      },
      "message": "Move help message out of AppInit2\n\n- Solves #1278, attempts to address #1049\n- Removes \\t's from help message that are removed afterwards anyway\n- Moves UI-specific command-line options help to UI code\n- Moves \"-detachdb\" out of #ifdef USE_UPNP",
      "tree": {
        "sha": "bef4fd82a5e723ae3943860cbf9ac8a6387877da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bef4fd82a5e723ae3943860cbf9ac8a6387877da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f5b11e6fd99e30b22be3335dec342acd6a8d28a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5b11e6fd99e30b22be3335dec342acd6a8d28a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f5b11e6fd99e30b22be3335dec342acd6a8d28a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5b11e6fd99e30b22be3335dec342acd6a8d28a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e794a9ab7449cee8ea9f2d2e23ff764f71a91c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e794a9ab7449cee8ea9f2d2e23ff764f71a91c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e794a9ab7449cee8ea9f2d2e23ff764f71a91c9"
      }
    ],
    "stats": {
      "total": 316,
      "additions": 185,
      "deletions": 131
    },
    "files": [
      {
        "sha": "0d3679657bca6c7e09128d8dec68f05a09040465",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 126,
        "deletions": 129,
        "changes": 255,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5b11e6fd99e30b22be3335dec342acd6a8d28a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5b11e6fd99e30b22be3335dec342acd6a8d28a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9f5b11e6fd99e30b22be3335dec342acd6a8d28a",
        "patch": "@@ -100,14 +100,52 @@ int main(int argc, char* argv[])\n \n     return 1;\n }\n-#endif\n \n bool AppInit(int argc, char* argv[])\n {\n     bool fRet = false;\n     try\n     {\n-        fRet = AppInit2(argc, argv);\n+        //\n+        // Parameters\n+        //\n+        // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n+        ParseParameters(argc, argv);\n+        if (!boost::filesystem::is_directory(GetDataDir(false)))\n+        {\n+            fprintf(stderr, \"Error: Specified directory does not exist\\n\");\n+            Shutdown(NULL);\n+        }\n+        ReadConfigFile(mapArgs, mapMultiArgs);\n+\n+        if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+        {\n+            // First part of help message is specific to bitcoind / RPC client\n+            std::string strUsage = _(\"Bitcoin version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+                _(\"Usage:\") + \"\\n\" +\n+                  \"  bitcoind [options]                     \" + \"\\n\" +\n+                  \"  bitcoind [options] <command> [params]  \" + _(\"Send command to -server or bitcoind\") + \"\\n\" +\n+                  \"  bitcoind [options] help                \" + _(\"List commands\") + \"\\n\" +\n+                  \"  bitcoind [options] help <command>      \" + _(\"Get help for a command\") + \"\\n\";\n+\n+            strUsage += \"\\n\" + HelpMessage();\n+\n+            fprintf(stderr, \"%s\", strUsage.c_str());\n+            return false;\n+        }\n+\n+        // Command-line RPC\n+        for (int i = 1; i < argc; i++)\n+            if (!IsSwitchChar(argv[i][0]) && !(strlen(argv[i]) > 7 && strncasecmp(argv[i], \"bitcoin:\", 8) == 0))\n+                fCommandLine = true;\n+\n+        if (fCommandLine)\n+        {\n+            int ret = CommandLineRPC(argc, argv);\n+            exit(ret);\n+        }\n+\n+        fRet = AppInit2();\n     }\n     catch (std::exception& e) {\n         PrintException(&e, \"AppInit()\");\n@@ -118,6 +156,7 @@ bool AppInit(int argc, char* argv[])\n         Shutdown(NULL);\n     return fRet;\n }\n+#endif\n \n bool static InitError(const std::string &str)\n {\n@@ -142,7 +181,89 @@ bool static Bind(const CService &addr) {\n     return true;\n }\n \n-bool AppInit2(int argc, char* argv[])\n+// Core-specific options shared between UI and daemon\n+std::string HelpMessage()\n+{\n+    string strUsage = _(\"Options:\") + \"\\n\" +\n+        \"  -conf=<file>           \" + _(\"Specify configuration file (default: bitcoin.conf)\") + \"\\n\" +\n+        \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\" +\n+        \"  -gen                   \" + _(\"Generate coins\") + \"\\n\" +\n+        \"  -gen=0                 \" + _(\"Don't generate coins\") + \"\\n\" +\n+        \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\" +\n+        \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\" +\n+        \"  -dblogsize=<n>         \" + _(\"Set database disk log size in megabytes (default: 100)\") + \"\\n\" +\n+        \"  -timeout=<n>           \" + _(\"Specify connection timeout (in milliseconds)\") + \"\\n\" +\n+        \"  -proxy=<ip:port>       \" + _(\"Connect through socks proxy\") + \"\\n\" +\n+        \"  -socks=<n>             \" + _(\"Select the version of socks proxy to use (4 or 5, 5 is default)\") + \"\\n\" +\n+        \"  -noproxy=<net>         \" + _(\"Do not use proxy for connections to network <net> (IPv4 or IPv6)\") + \"\\n\" +\n+        \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \"\\n\" +\n+        \"  -proxydns              \" + _(\"Pass DNS requests to (SOCKS5) proxy\") + \"\\n\" +\n+        \"  -port=<port>           \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\" +\n+        \"  -maxconnections=<n>    \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\" +\n+        \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\" +\n+        \"  -connect=<ip>          \" + _(\"Connect only to the specified node\") + \"\\n\" +\n+        \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\" +\n+        \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\" +\n+        \"  -blocknet=<net>        \" + _(\"Do not connect to addresses in network <net> (IPv4 or IPv6)\") + \"\\n\" +\n+        \"  -discover              \" + _(\"Try to discover public IP address (default: 1)\") + \"\\n\" +\n+        \"  -irc                   \" + _(\"Find peers using internet relay chat (default: 0)\") + \"\\n\" +\n+        \"  -listen                \" + _(\"Accept connections from outside (default: 1)\") + \"\\n\" +\n+        \"  -bind=<addr>           \" + _(\"Bind to given address. Use [host]:port notation for IPv6\") + \"\\n\" +\n+        \"  -dnsseed               \" + _(\"Find peers using DNS lookup (default: 1)\") + \"\\n\" +\n+        \"  -banscore=<n>          \" + _(\"Threshold for disconnecting misbehaving peers (default: 100)\") + \"\\n\" +\n+        \"  -bantime=<n>           \" + _(\"Number of seconds to keep misbehaving peers from reconnecting (default: 86400)\") + \"\\n\" +\n+        \"  -maxreceivebuffer=<n>  \" + _(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: 10000)\") + \"\\n\" +\n+        \"  -maxsendbuffer=<n>     \" + _(\"Maximum per-connection send buffer, <n>*1000 bytes (default: 10000)\") + \"\\n\" +\n+#ifdef USE_UPNP\n+#if USE_UPNP\n+        \"  -upnp                  \" + _(\"Use Universal Plug and Play to map the listening port (default: 1)\") + \"\\n\" +\n+#else\n+        \"  -upnp                  \" + _(\"Use Universal Plug and Play to map the listening port (default: 0)\") + \"\\n\" +\n+#endif\n+#endif\n+        \"  -detachdb              \" + _(\"Detach block and address databases. Increases shutdown time (default: 0)\") + \"\\n\" +\n+        \"  -paytxfee=<amt>        \" + _(\"Fee per KB to add to transactions you send\") + \"\\n\" +\n+#ifdef QT_GUI\n+        \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\" +\n+#endif\n+#if !defined(WIN32) && !defined(QT_GUI)\n+        \"  -daemon                \" + _(\"Run in the background as a daemon and accept commands\") + \"\\n\" +\n+#endif\n+        \"  -testnet               \" + _(\"Use the test network\") + \"\\n\" +\n+        \"  -debug                 \" + _(\"Output extra debugging information\") + \"\\n\" +\n+        \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp\") + \"\\n\" +\n+        \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\" +\n+#ifdef WIN32\n+        \"  -printtodebugger       \" + _(\"Send trace/debug info to debugger\") + \"\\n\" +\n+#endif\n+        \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\" +\n+        \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\" +\n+        \"  -rpcport=<port>        \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\") + \"\\n\" +\n+        \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\" +\n+        \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\" +\n+        \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\" +\n+        \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \"\\n\" +\n+        \"  -keypool=<n>           \" + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\" +\n+        \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\" +\n+        \"  -checkblocks=<n>       \" + _(\"How many blocks to check at startup (default: 2500, 0 = all)\") + \"\\n\" +\n+        \"  -checklevel=<n>        \" + _(\"How thorough the block verification is (0-6, default: 1)\") + \"\\n\" +\n+        \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000?.dat file\") + \"\\n\" +\n+        \"  -?                     \" + _(\"This help message\") + \"\\n\";\n+\n+    strUsage += string() +\n+        _(\"\\nSSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\" +\n+        \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\" +\n+        \"  -rpcsslcertificatechainfile=<file.cert>  \" + _(\"Server certificate file (default: server.cert)\") + \"\\n\" +\n+        \"  -rpcsslprivatekeyfile=<file.pem>         \" + _(\"Server private key (default: server.pem)\") + \"\\n\" +\n+        \"  -rpcsslciphers=<ciphers>                 \" + _(\"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\") + \"\\n\";\n+\n+    return strUsage;\n+}\n+\n+/** Initialize bitcoin.\n+ *  @pre Parameters should be parsed and config file should be read.\n+ */\n+bool AppInit2()\n {\n #ifdef _MSC_VER\n     // Turn off microsoft heap dump noise\n@@ -167,120 +288,6 @@ bool AppInit2(int argc, char* argv[])\n     sigaction(SIGHUP, &sa, NULL);\n #endif\n \n-    //\n-    // Parameters\n-    //\n-    // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n-#if !defined(QT_GUI)\n-    ParseParameters(argc, argv);\n-    if (!boost::filesystem::is_directory(GetDataDir(false)))\n-    {\n-        fprintf(stderr, \"Error: Specified directory does not exist\\n\");\n-        Shutdown(NULL);\n-    }\n-    ReadConfigFile(mapArgs, mapMultiArgs);\n-#endif\n-\n-    if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n-    {\n-        string strUsage = string() +\n-          _(\"Bitcoin version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n-          _(\"Usage:\") + \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\" +\n-            \"  bitcoind [options]                   \\t  \" + \"\\n\" +\n-            \"  bitcoind [options] <command> [params]\\t  \" + _(\"Send command to -server or bitcoind\") + \"\\n\" +\n-            \"  bitcoind [options] help              \\t\\t  \" + _(\"List commands\") + \"\\n\" +\n-            \"  bitcoind [options] help <command>    \\t\\t  \" + _(\"Get help for a command\") + \"\\n\" +\n-          _(\"Options:\") + \"\\n\" +\n-            \"  -conf=<file>     \\t\\t  \" + _(\"Specify configuration file (default: bitcoin.conf)\") + \"\\n\" +\n-            \"  -pid=<file>      \\t\\t  \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\" +\n-            \"  -gen             \\t\\t  \" + _(\"Generate coins\") + \"\\n\" +\n-            \"  -gen=0           \\t\\t  \" + _(\"Don't generate coins\") + \"\\n\" +\n-            \"  -min             \\t\\t  \" + _(\"Start minimized\") + \"\\n\" +\n-            \"  -splash          \\t\\t  \" + _(\"Show splash screen on startup (default: 1)\") + \"\\n\" +\n-            \"  -datadir=<dir>   \\t\\t  \" + _(\"Specify data directory\") + \"\\n\" +\n-            \"  -dbcache=<n>     \\t\\t  \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\" +\n-            \"  -dblogsize=<n>   \\t\\t  \" + _(\"Set database disk log size in megabytes (default: 100)\") + \"\\n\" +\n-            \"  -timeout=<n>     \\t  \"   + _(\"Specify connection timeout (in milliseconds)\") + \"\\n\" +\n-            \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks proxy\") + \"\\n\" +\n-            \"  -socks=<n>       \\t  \"   + _(\"Select the version of socks proxy to use (4 or 5, 5 is default)\") + \"\\n\" +\n-            \"  -noproxy=<net>   \\t  \"   + _(\"Do not use proxy for connections to network <net> (IPv4 or IPv6)\") + \"\\n\" +\n-            \"  -dns             \\t  \"   + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \"\\n\" +\n-            \"  -proxydns        \\t  \"   + _(\"Pass DNS requests to (SOCKS5) proxy\") + \"\\n\" +\n-            \"  -port=<port>     \\t\\t  \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\" +\n-            \"  -maxconnections=<n>\\t  \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\" +\n-            \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\" +\n-            \"  -connect=<ip>    \\t\\t  \" + _(\"Connect only to the specified node\") + \"\\n\" +\n-            \"  -seednode=<ip>   \\t\\t  \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\" +\n-            \"  -externalip=<ip> \\t  \"   + _(\"Specify your own public address\") + \"\\n\" +\n-            \"  -blocknet=<net>  \\t  \"   + _(\"Do not connect to addresses in network <net> (IPv4 or IPv6)\") + \"\\n\" +\n-            \"  -discover        \\t  \"   + _(\"Try to discover public IP address (default: 1)\") + \"\\n\" +\n-            \"  -irc             \\t  \"   + _(\"Find peers using internet relay chat (default: 0)\") + \"\\n\" +\n-            \"  -listen          \\t  \"   + _(\"Accept connections from outside (default: 1)\") + \"\\n\" +\n-            \"  -bind=<addr>     \\t  \"   + _(\"Bind to given address. Use [host]:port notation for IPv6\") + \"\\n\" +\n-#ifdef QT_GUI\n-            \"  -lang=<lang>     \\t\\t  \" + _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\") + \"\\n\" +\n-#endif\n-            \"  -dnsseed         \\t  \"   + _(\"Find peers using DNS lookup (default: 1)\") + \"\\n\" +\n-            \"  -banscore=<n>    \\t  \"   + _(\"Threshold for disconnecting misbehaving peers (default: 100)\") + \"\\n\" +\n-            \"  -bantime=<n>     \\t  \"   + _(\"Number of seconds to keep misbehaving peers from reconnecting (default: 86400)\") + \"\\n\" +\n-            \"  -maxreceivebuffer=<n>\\t  \" + _(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: 10000)\") + \"\\n\" +\n-            \"  -maxsendbuffer=<n>\\t  \"   + _(\"Maximum per-connection send buffer, <n>*1000 bytes (default: 10000)\") + \"\\n\" +\n-#ifdef USE_UPNP\n-#if USE_UPNP\n-            \"  -upnp            \\t  \"   + _(\"Use Universal Plug and Play to map the listening port (default: 1)\") + \"\\n\" +\n-#else\n-            \"  -upnp            \\t  \"   + _(\"Use Universal Plug and Play to map the listening port (default: 0)\") + \"\\n\" +\n-#endif\n-            \"  -detachdb        \\t  \"   + _(\"Detach block and address databases. Increases shutdown time (default: 0)\") + \"\\n\" +\n-#endif\n-            \"  -paytxfee=<amt>  \\t  \"   + _(\"Fee per KB to add to transactions you send\") + \"\\n\" +\n-#ifdef QT_GUI\n-            \"  -server          \\t\\t  \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\" +\n-#endif\n-#if !defined(WIN32) && !defined(QT_GUI)\n-            \"  -daemon          \\t\\t  \" + _(\"Run in the background as a daemon and accept commands\") + \"\\n\" +\n-#endif\n-            \"  -testnet         \\t\\t  \" + _(\"Use the test network\") + \"\\n\" +\n-            \"  -debug           \\t\\t  \" + _(\"Output extra debugging information\") + \"\\n\" +\n-            \"  -logtimestamps   \\t  \"   + _(\"Prepend debug output with timestamp\") + \"\\n\" +\n-            \"  -printtoconsole  \\t  \"   + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\" +\n-#ifdef WIN32\n-            \"  -printtodebugger \\t  \"   + _(\"Send trace/debug info to debugger\") + \"\\n\" +\n-#endif\n-            \"  -rpcuser=<user>  \\t  \"   + _(\"Username for JSON-RPC connections\") + \"\\n\" +\n-            \"  -rpcpassword=<pw>\\t  \"   + _(\"Password for JSON-RPC connections\") + \"\\n\" +\n-            \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\") + \"\\n\" +\n-            \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\" +\n-            \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\" +\n-            \"  -blocknotify=<cmd> \"     + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\" +\n-            \"  -upgradewallet   \\t  \"   + _(\"Upgrade wallet to latest format\") + \"\\n\" +\n-            \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\" +\n-            \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\" +\n-            \"  -checkblocks=<n> \\t\\t  \" + _(\"How many blocks to check at startup (default: 2500, 0 = all)\") + \"\\n\" +\n-            \"  -checklevel=<n>  \\t\\t  \" + _(\"How thorough the block verification is (0-6, default: 1)\") + \"\\n\" +\n-            \"  -loadblock=<file>\\t  \"   + _(\"Imports blocks from external blk000?.dat file\") + \"\\n\";\n-\n-        strUsage += string() +\n-            _(\"\\nSSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\" +\n-            \"  -rpcssl                                \\t  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\" +\n-            \"  -rpcsslcertificatechainfile=<file.cert>\\t  \" + _(\"Server certificate file (default: server.cert)\") + \"\\n\" +\n-            \"  -rpcsslprivatekeyfile=<file.pem>       \\t  \" + _(\"Server private key (default: server.pem)\") + \"\\n\" +\n-            \"  -rpcsslciphers=<ciphers>               \\t  \" + _(\"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\") + \"\\n\";\n-\n-        strUsage += string() +\n-            \"  -?               \\t\\t  \" + _(\"This help message\") + \"\\n\";\n-\n-        // Remove tabs\n-        strUsage.erase(std::remove(strUsage.begin(), strUsage.end(), '\\t'), strUsage.end());\n-#if defined(QT_GUI) && defined(WIN32)\n-        // On windows, show a message box, as there is no stderr\n-        ThreadSafeMessageBox(strUsage, _(\"Usage\"), wxOK | wxMODAL);\n-#else\n-        fprintf(stderr, \"%s\", strUsage.c_str());\n-#endif\n-        return false;\n-    }\n-\n     fTestNet = GetBoolArg(\"-testnet\");\n     if (fTestNet)\n     {\n@@ -309,18 +316,6 @@ bool AppInit2(int argc, char* argv[])\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\");\n \n-#ifndef QT_GUI\n-    for (int i = 1; i < argc; i++)\n-        if (!IsSwitchChar(argv[i][0]) && !(strlen(argv[i]) > 7 && strncasecmp(argv[i], \"bitcoin:\", 8) == 0))\n-            fCommandLine = true;\n-\n-    if (fCommandLine)\n-    {\n-        int ret = CommandLineRPC(argc, argv);\n-        exit(ret);\n-    }\n-#endif\n-\n #if !defined(WIN32) && !defined(QT_GUI)\n     if (fDaemon)\n     {\n@@ -660,6 +655,8 @@ bool AppInit2(int argc, char* argv[])\n         CreateThread(ThreadRPCServer, NULL);\n \n #if !defined(QT_GUI)\n+    // Loop until process is exit()ed from shutdown() function,\n+    // called from ThreadRPCServer thread when a \"stop\" command is received.\n     while (1)\n         Sleep(5000);\n #endif"
      },
      {
        "sha": "9a8f98cce9e2630a4b41ed02fca80031f344d6f0",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5b11e6fd99e30b22be3335dec342acd6a8d28a/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5b11e6fd99e30b22be3335dec342acd6a8d28a/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=9f5b11e6fd99e30b22be3335dec342acd6a8d28a",
        "patch": "@@ -11,6 +11,7 @@ extern CWallet* pwalletMain;\n \n void Shutdown(void* parg);\n bool AppInit(int argc, char* argv[]);\n-bool AppInit2(int argc, char* argv[]);\n+bool AppInit2();\n+std::string HelpMessage();\n \n #endif"
      },
      {
        "sha": "ab0a37abff7ffb84ed4c1c4e8c52fde171b06084",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 1,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5b11e6fd99e30b22be3335dec342acd6a8d28a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5b11e6fd99e30b22be3335dec342acd6a8d28a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9f5b11e6fd99e30b22be3335dec342acd6a8d28a",
        "patch": "@@ -129,6 +129,53 @@ static void handleRunawayException(std::exception *e)\n     exit(1);\n }\n \n+/** Help message for Bitcoin-Qt, shown with --help. */\n+class HelpMessageBox: public QMessageBox\n+{\n+public:\n+    HelpMessageBox(QWidget *parent = 0);\n+\n+    void exec();\n+private:\n+    QString header;\n+    QString coreOptions;\n+    QString uiOptions;\n+};\n+#include <QSpacerItem>\n+#include <QGridLayout>\n+HelpMessageBox::HelpMessageBox(QWidget *parent):\n+    QMessageBox(parent)\n+{\n+    header = tr(\"Bitcoin-Qt\") + \" \" + tr(\"version\") + \" \" +\n+            QString::fromStdString(FormatFullVersion()) + \"\\n\\n\" +\n+        tr(\"Usage:\") + \"\\n\" +\n+          \"  bitcoin-qt [options]                     \" + \"\\n\";\n+    coreOptions = QString::fromStdString(HelpMessage());\n+    uiOptions = tr(\"UI options\") + \":\\n\" +\n+            \"  -lang=<lang>           \" + tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\") + \"\\n\" +\n+            \"  -min                   \" + tr(\"Start minimized\") + \"\\n\" +\n+            \"  -splash                \" + tr(\"Show splash screen on startup (default: 1)\") + \"\\n\";\n+\n+    setWindowTitle(tr(\"Bitcoin-Qt\"));\n+    setTextFormat(Qt::PlainText);\n+    // setMinimumWidth is ignored for QMessageBox so put in nonbreaking spaces to make it wider.\n+    QChar em_space(0x2003);\n+    setText(header + QString(em_space).repeated(40));\n+    setDetailedText(coreOptions + \"\\n\" + uiOptions);\n+}\n+\n+void HelpMessageBox::exec()\n+{\n+#if defined(WIN32)\n+    // On windows, show a message box, as there is no stderr in windowed applications\n+    QMessageBox::exec();\n+#else\n+    // On other operating systems, the expected action is to print the message to the console.\n+    QString strUsage = header + \"\\n\" + coreOptions + \"\\n\" + uiOptions;\n+    fprintf(stderr, \"%s\", strUsage.toStdString().c_str());\n+#endif\n+}\n+\n #ifdef WIN32\n #define strncasecmp strnicmp\n #endif\n@@ -218,6 +265,15 @@ int main(int argc, char *argv[])\n     if (translator.load(lang_territory, \":/translations/\"))\n         app.installTranslator(&translator);\n \n+    // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n+    // but before showing splash screen.\n+    if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        HelpMessageBox help;\n+        help.exec();\n+        return 1;\n+    }\n+\n     QSplashScreen splash(QPixmap(\":/images/splash\"), 0);\n     if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\"))\n     {\n@@ -238,7 +294,7 @@ int main(int argc, char *argv[])\n \n         BitcoinGUI window;\n         guiref = &window;\n-        if(AppInit2(argc, argv))\n+        if(AppInit2())\n         {\n             {\n                 // Put this in a block, so that the Model objects are cleaned up before"
      }
    ]
  }
]