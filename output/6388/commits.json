[
  {
    "sha": "71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWNiZWFhZDlhOTI5YmE2YTdiNjJkOWIzN2EwOWIyMTRhZTAwYzFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-07T12:53:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-13T11:11:41Z"
      },
      "message": "rpc: Implement random-cookie based authentication\n\nWhen no `-rpcpassword` is specified, use a special 'cookie' file for\nauthentication. This file is generated with random content when the\ndaemon starts, and deleted when it exits. Read access to this file\ncontrols who can access through RPC. By default this file is stored in\nthe data directory but it be overriden with `-rpccookiefile`.\n\nThis is similar to Tor CookieAuthentication: see\nhttps://www.torproject.org/docs/tor-manual.html.en\n\nAlternative to #6258. Like that pull, this allows running bitcoind\nwithout any manual configuration. However, daemons should ideally never write to\ntheir configuration files, so I prefer this solution.",
      "tree": {
        "sha": "63148f270b290394d416ea7d4063d3bc1bbe7541",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63148f270b290394d416ea7d4063d3bc1bbe7541"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d9362d5ac1ec405955503dc67caf59e716df5e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d9362d5ac1ec405955503dc67caf59e716df5e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d9362d5ac1ec405955503dc67caf59e716df5e4"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 105,
      "deletions": 27
    },
    "files": [
      {
        "sha": "1c5a3128749341be78517424bf8b1d1dd18c280d",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a",
        "patch": "@@ -97,12 +97,6 @@ static bool AppInitRPC(int argc, char* argv[])\n \n UniValue CallRPC(const string& strMethod, const UniValue& params)\n {\n-    if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n-        throw runtime_error(strprintf(\n-            _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n-              \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n-                GetConfigFile().string().c_str()));\n-\n     // Connect to localhost\n     bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n     boost::asio::io_service io_service;\n@@ -116,10 +110,24 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n     if (!fConnected)\n         throw CConnectionFailed(\"couldn't connect to server\");\n \n+    // Find credentials to use\n+    std::string strRPCUserColonPass;\n+    if (mapArgs[\"-rpcpassword\"] == \"\") {\n+        // Try fall back to cookie-based authentication if no password is provided\n+        if (!GetAuthCookie(&strRPCUserColonPass)) {\n+            throw runtime_error(strprintf(\n+                _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n+                  \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n+                    GetConfigFile().string().c_str()));\n+\n+        }\n+    } else {\n+        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n+    }\n+\n     // HTTP basic authentication\n-    string strUserPass64 = EncodeBase64(mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"]);\n     map<string, string> mapRequestHeaders;\n-    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + strUserPass64;\n+    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + EncodeBase64(strRPCUserColonPass);\n \n     // Send request\n     string strRequest = JSONRPCRequest(strMethod, params, 1);"
      },
      {
        "sha": "2e5c9137340869641f4773b36a65a2605d7c5542",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a",
        "patch": "@@ -6,13 +6,15 @@\n #include \"rpcprotocol.h\"\n \n #include \"clientversion.h\"\n+#include \"random.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"utiltime.h\"\n #include \"version.h\"\n \n #include <stdint.h>\n+#include <fstream>\n \n #include <boost/algorithm/string.hpp>\n #include <boost/asio.hpp>\n@@ -287,3 +289,68 @@ UniValue JSONRPCError(int code, const string& message)\n     error.push_back(Pair(\"message\", message));\n     return error;\n }\n+\n+/** Username used when cookie authentication is in use (arbitrary, only for\n+ * recognizability in debugging/logging purposes)\n+ */\n+static const std::string COOKIEAUTH_USER = \"__cookie__\";\n+/** Default name for auth cookie file */\n+static const std::string COOKIEAUTH_FILE = \".cookie\";\n+\n+boost::filesystem::path GetAuthCookieFile()\n+{\n+    boost::filesystem::path path(GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n+    if (!path.is_complete()) path = GetDataDir() / path;\n+    return path;\n+}\n+\n+bool GenerateAuthCookie(std::string *cookie_out)\n+{\n+    unsigned char rand_pwd[32];\n+    GetRandBytes(rand_pwd, 32);\n+    std::string cookie = COOKIEAUTH_USER + \":\" + EncodeBase64(&rand_pwd[0],32);\n+\n+    /** the umask determines what permissions are used to create this file -\n+     * these are set to 077 in init.cpp unless overridden with -sysperms.\n+     */\n+    std::ofstream file;\n+    boost::filesystem::path filepath = GetAuthCookieFile();\n+    file.open(filepath.string().c_str());\n+    if (!file.is_open()) {\n+        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath.string());\n+        return false;\n+    }\n+    file << cookie;\n+    file.close();\n+    LogPrintf(\"Generated RPC authentication cookie %s\\n\", filepath.string());\n+\n+    if (cookie_out)\n+        *cookie_out = cookie;\n+    return true;\n+}\n+\n+bool GetAuthCookie(std::string *cookie_out)\n+{\n+    std::ifstream file;\n+    std::string cookie;\n+    boost::filesystem::path filepath = GetAuthCookieFile();\n+    file.open(filepath.string().c_str());\n+    if (!file.is_open())\n+        return false;\n+    std::getline(file, cookie);\n+    file.close();\n+\n+    if (cookie_out)\n+        *cookie_out = cookie;\n+    return true;\n+}\n+\n+void DeleteAuthCookie()\n+{\n+    try {\n+        boost::filesystem::remove(GetAuthCookieFile());\n+    } catch (const boost::filesystem::filesystem_error& e) {\n+        LogPrintf(\"%s: Unable to remove random auth cookie file: %s\\n\", __func__, e.what());\n+    }\n+}\n+"
      },
      {
        "sha": "2360ec2c60673f16efcf552fd232458a3ecd2e42",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a",
        "patch": "@@ -14,6 +14,7 @@\n #include <boost/iostreams/stream.hpp>\n #include <boost/asio.hpp>\n #include <boost/asio/ssl.hpp>\n+#include <boost/filesystem.hpp>\n \n #include \"univalue/univalue.h\"\n \n@@ -165,4 +166,13 @@ UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const Un\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n UniValue JSONRPCError(int code, const std::string& message);\n \n+/** Get name of RPC authentication cookie file */\n+boost::filesystem::path GetAuthCookieFile();\n+/** Generate a new RPC authentication cookie and write it to disk */\n+bool GenerateAuthCookie(std::string *cookie_out);\n+/** Read the RPC authentication cookie from disk */\n+bool GetAuthCookie(std::string *cookie_out);\n+/** Delete RPC authentication cookie from disk */\n+void DeleteAuthCookie();\n+\n #endif // BITCOIN_RPCPROTOCOL_H"
      },
      {
        "sha": "bcad06a0c119be8d295b10b8f523561cbbee25cb",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 19,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a",
        "patch": "@@ -597,27 +597,18 @@ void StartRPCThreads()\n         strAllowed += subnet.ToString() + \" \";\n     LogPrint(\"rpc\", \"Allowing RPC connections from: %s\\n\", strAllowed);\n \n-    strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     if (mapArgs[\"-rpcpassword\"] == \"\")\n     {\n-        unsigned char rand_pwd[32];\n-        GetRandBytes(rand_pwd, 32);\n-        uiInterface.ThreadSafeMessageBox(strprintf(\n-            _(\"To use bitcoind, or the -server option to bitcoin-qt, you must set an rpcpassword in the configuration file:\\n\"\n-              \"%s\\n\"\n-              \"It is recommended you use the following random password:\\n\"\n-              \"rpcuser=bitcoinrpc\\n\"\n-              \"rpcpassword=%s\\n\"\n-              \"(you do not need to remember this password)\\n\"\n-              \"The username and password MUST NOT be the same.\\n\"\n-              \"If the file does not exist, create it with owner-readable-only file permissions.\\n\"\n-              \"It is also recommended to set alertnotify so you are notified of problems;\\n\"\n-              \"for example: alertnotify=echo %%s | mail -s \\\"Bitcoin Alert\\\" admin@foo.com\\n\"),\n-                GetConfigFile().string(),\n-                EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32)),\n-                \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::SECURE);\n-        StartShutdown();\n-        return;\n+        LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n+        if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n+            uiInterface.ThreadSafeMessageBox(\n+                _(\"Error: A fatal internal error occured, see debug.log for details\"), // Same message as AbortNode\n+                \"\", CClientUIInterface::MSG_ERROR);\n+            StartShutdown();\n+            return;\n+        }\n+    } else {\n+        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     }\n \n     assert(rpc_io_service == NULL);\n@@ -768,6 +759,8 @@ void StopRPCThreads()\n     }\n     deadlineTimers.clear();\n \n+    DeleteAuthCookie();\n+\n     rpc_io_service->stop();\n     g_rpcSignals.Stopped();\n     if (rpc_worker_group != NULL)"
      }
    ]
  },
  {
    "sha": "093729055358ecf155b74ce1b2870d3eb9064355",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTM3MjkwNTUzNThlY2YxNTViNzRjZTFiMjg3MGQzZWI5MDY0MzU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-13T11:31:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-13T11:34:26Z"
      },
      "message": "doc: mention RPC random cookie authentication in release notes",
      "tree": {
        "sha": "56073db4857228c0c5f4ebd34f477851c39efb61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56073db4857228c0c5f4ebd34f477851c39efb61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/093729055358ecf155b74ce1b2870d3eb9064355",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/093729055358ecf155b74ce1b2870d3eb9064355",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/093729055358ecf155b74ce1b2870d3eb9064355",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/093729055358ecf155b74ce1b2870d3eb9064355/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71cbeaad9a929ba6a7b62d9b37a09b214ae00c1a"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d5ac70380f9622f2eabc46dcff40d68aa9ca2a56",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/093729055358ecf155b74ce1b2870d3eb9064355/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/093729055358ecf155b74ce1b2870d3eb9064355/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=093729055358ecf155b74ce1b2870d3eb9064355",
        "patch": "@@ -4,6 +4,21 @@ release-notes at release time)\n Notable changes\n ===============\n \n+Random-cookie RPC authentication\n+---------------------------------\n+\n+When no `-rpcpassword` is specified, the daemon now uses a special 'cookie'\n+file for authentication. This file is generated with random content when the\n+daemon starts, and deleted when it exits. Its contents are used as\n+authentication token. Read access to this file controls who can access through\n+RPC. By default it is stored in the data directory but its location can be\n+overridden with the option `-rpccookiefile`.\n+\n+This is similar to Tor's CookieAuthentication: see\n+https://www.torproject.org/docs/tor-manual.html.en\n+\n+This allows running bitcoind without having to do any manual configuration.\n+\n Example header\n ----------------------\n "
      }
    ]
  }
]