[
  {
    "sha": "9a44db2e46af2b73e0dbaa929244161b18c15162",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTQ0ZGIyZTQ2YWYyYjczZTBkYmFhOTI5MjQ0MTYxYjE4YzE1MTYy",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-07-09T08:15:50Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-07-09T12:21:15Z"
      },
      "message": "Add outputtype module\n\nMoves OutputType into its own module",
      "tree": {
        "sha": "caff85feeaa6af556416c94af0dd10e33c19a954",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caff85feeaa6af556416c94af0dd10e33c19a954"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a44db2e46af2b73e0dbaa929244161b18c15162",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a44db2e46af2b73e0dbaa929244161b18c15162",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a44db2e46af2b73e0dbaa929244161b18c15162",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a44db2e46af2b73e0dbaa929244161b18c15162/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88a15ebc8d317a6fd4851adb344ff944d497284c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88a15ebc8d317a6fd4851adb344ff944d497284c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88a15ebc8d317a6fd4851adb344ff944d497284c"
      }
    ],
    "stats": {
      "total": 208,
      "additions": 122,
      "deletions": 86
    },
    "files": [
      {
        "sha": "f058a9f4473962362d5ab76d00706d26c8b8a8a3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a44db2e46af2b73e0dbaa929244161b18c15162/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a44db2e46af2b73e0dbaa929244161b18c15162/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9a44db2e46af2b73e0dbaa929244161b18c15162",
        "patch": "@@ -135,6 +135,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   netmessagemaker.h \\\n   noui.h \\\n+  outputtype.h \\\n   policy/feerate.h \\\n   policy/fees.h \\\n   policy/policy.h \\\n@@ -265,6 +266,7 @@ libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   interfaces/wallet.cpp \\\n+  outputtype.cpp \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n   wallet/feebumper.cpp \\"
      },
      {
        "sha": "025d8a96fd088be37a030747d1afac683615f3fd",
        "filename": "src/outputtype.cpp",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a44db2e46af2b73e0dbaa929244161b18c15162/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a44db2e46af2b73e0dbaa929244161b18c15162/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=9a44db2e46af2b73e0dbaa929244161b18c15162",
        "patch": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <outputtype.h>\n+\n+#include <keystore.h>\n+#include <pubkey.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+\n+#include <assert.h>\n+#include <string>\n+\n+static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n+static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n+static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n+\n+bool ParseOutputType(const std::string& type, OutputType& output_type)\n+{\n+    if (type == OUTPUT_TYPE_STRING_LEGACY) {\n+        output_type = OutputType::LEGACY;\n+        return true;\n+    } else if (type == OUTPUT_TYPE_STRING_P2SH_SEGWIT) {\n+        output_type = OutputType::P2SH_SEGWIT;\n+        return true;\n+    } else if (type == OUTPUT_TYPE_STRING_BECH32) {\n+        output_type = OutputType::BECH32;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+const std::string& FormatOutputType(OutputType type)\n+{\n+    switch (type) {\n+    case OutputType::LEGACY: return OUTPUT_TYPE_STRING_LEGACY;\n+    case OutputType::P2SH_SEGWIT: return OUTPUT_TYPE_STRING_P2SH_SEGWIT;\n+    case OutputType::BECH32: return OUTPUT_TYPE_STRING_BECH32;\n+    default: assert(false);\n+    }\n+}\n+\n+CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n+{\n+    switch (type) {\n+    case OutputType::LEGACY: return key.GetID();\n+    case OutputType::P2SH_SEGWIT:\n+    case OutputType::BECH32: {\n+        if (!key.IsCompressed()) return key.GetID();\n+        CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n+        CScript witprog = GetScriptForDestination(witdest);\n+        if (type == OutputType::P2SH_SEGWIT) {\n+            return CScriptID(witprog);\n+        } else {\n+            return witdest;\n+        }\n+    }\n+    default: assert(false);\n+    }\n+}\n+\n+std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key)\n+{\n+    CKeyID keyid = key.GetID();\n+    if (key.IsCompressed()) {\n+        CTxDestination segwit = WitnessV0KeyHash(keyid);\n+        CTxDestination p2sh = CScriptID(GetScriptForDestination(segwit));\n+        return std::vector<CTxDestination>{std::move(keyid), std::move(p2sh), std::move(segwit)};\n+    } else {\n+        return std::vector<CTxDestination>{std::move(keyid)};\n+    }\n+}\n+\n+"
      },
      {
        "sha": "0c55ac9b1879a8f4de96d729dde64d3ab429dc7e",
        "filename": "src/outputtype.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a44db2e46af2b73e0dbaa929244161b18c15162/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a44db2e46af2b73e0dbaa929244161b18c15162/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=9a44db2e46af2b73e0dbaa929244161b18c15162",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_OUTPUTTYPE_H\n+#define BITCOIN_OUTPUTTYPE_H\n+\n+#include <script/standard.h>\n+\n+#include <string>\n+#include <vector>\n+\n+enum class OutputType {\n+    LEGACY,\n+    P2SH_SEGWIT,\n+    BECH32,\n+\n+    /**\n+     * Special output type for change outputs only. Automatically choose type\n+     * based on address type setting and the types other of non-change outputs\n+     * (see -changetype option documentation and implementation in\n+     * CWallet::TransactionChangeType for details).\n+     */\n+    CHANGE_AUTO,\n+};\n+\n+bool ParseOutputType(const std::string& str, OutputType& output_type);\n+const std::string& FormatOutputType(OutputType type);\n+\n+/**\n+ * Get a destination of the requested type (if possible) to the specified key.\n+ * The caller must make sure LearnRelatedScripts has been called beforehand.\n+ */\n+CTxDestination GetDestinationForKey(const CPubKey& key, OutputType);\n+\n+/** Get all destinations (potentially) supported by the wallet for the given key. */\n+std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n+\n+#endif // BITCOIN_OUTPUTTYPE_H\n+"
      },
      {
        "sha": "076134cdd1e618e718e76255ab2d02f104ddec2b",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a44db2e46af2b73e0dbaa929244161b18c15162/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a44db2e46af2b73e0dbaa929244161b18c15162/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=9a44db2e46af2b73e0dbaa929244161b18c15162",
        "patch": "@@ -7,6 +7,7 @@\n #include <init.h>\n #include <net.h>\n #include <scheduler.h>\n+#include <outputtype.h>\n #include <util.h>\n #include <utilmoneystr.h>\n #include <validation.h>"
      },
      {
        "sha": "1574f78c5ed5df6caedd65aea79d9f1aa86bf15a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a44db2e46af2b73e0dbaa929244161b18c15162/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a44db2e46af2b73e0dbaa929244161b18c15162/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9a44db2e46af2b73e0dbaa929244161b18c15162",
        "patch": "@@ -11,6 +11,7 @@\n #include <validation.h>\n #include <key_io.h>\n #include <net.h>\n+#include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>"
      },
      {
        "sha": "b61b919978ba1177bc8fb9911fea8a5604dec532",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 60,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a44db2e46af2b73e0dbaa929244161b18c15162/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a44db2e46af2b73e0dbaa929244161b18c15162/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9a44db2e46af2b73e0dbaa929244161b18c15162",
        "patch": "@@ -4453,35 +4453,6 @@ bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n     return ret;\n }\n \n-static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n-static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n-static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n-\n-bool ParseOutputType(const std::string& type, OutputType& output_type)\n-{\n-    if (type == OUTPUT_TYPE_STRING_LEGACY) {\n-        output_type = OutputType::LEGACY;\n-        return true;\n-    } else if (type == OUTPUT_TYPE_STRING_P2SH_SEGWIT) {\n-        output_type = OutputType::P2SH_SEGWIT;\n-        return true;\n-    } else if (type == OUTPUT_TYPE_STRING_BECH32) {\n-        output_type = OutputType::BECH32;\n-        return true;\n-    }\n-    return false;\n-}\n-\n-const std::string& FormatOutputType(OutputType type)\n-{\n-    switch (type) {\n-    case OutputType::LEGACY: return OUTPUT_TYPE_STRING_LEGACY;\n-    case OutputType::P2SH_SEGWIT: return OUTPUT_TYPE_STRING_P2SH_SEGWIT;\n-    case OutputType::BECH32: return OUTPUT_TYPE_STRING_BECH32;\n-    default: assert(false);\n-    }\n-}\n-\n void CWallet::LearnRelatedScripts(const CPubKey& key, OutputType type)\n {\n     if (key.IsCompressed() && (type == OutputType::P2SH_SEGWIT || type == OutputType::BECH32)) {\n@@ -4499,37 +4470,6 @@ void CWallet::LearnAllRelatedScripts(const CPubKey& key)\n     LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n }\n \n-CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n-{\n-    switch (type) {\n-    case OutputType::LEGACY: return key.GetID();\n-    case OutputType::P2SH_SEGWIT:\n-    case OutputType::BECH32: {\n-        if (!key.IsCompressed()) return key.GetID();\n-        CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n-        CScript witprog = GetScriptForDestination(witdest);\n-        if (type == OutputType::P2SH_SEGWIT) {\n-            return CScriptID(witprog);\n-        } else {\n-            return witdest;\n-        }\n-    }\n-    default: assert(false);\n-    }\n-}\n-\n-std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key)\n-{\n-    CKeyID keyid = key.GetID();\n-    if (key.IsCompressed()) {\n-        CTxDestination segwit = WitnessV0KeyHash(keyid);\n-        CTxDestination p2sh = CScriptID(GetScriptForDestination(segwit));\n-        return std::vector<CTxDestination>{std::move(keyid), std::move(p2sh), std::move(segwit)};\n-    } else {\n-        return std::vector<CTxDestination>{std::move(keyid)};\n-    }\n-}\n-\n CTxDestination CWallet::AddAndGetDestinationForScript(const CScript& script, OutputType type)\n {\n     // Note that scripts over 520 bytes are not yet supported."
      },
      {
        "sha": "f065abd9b1fa00bf330ac9297824407ba1055fab",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 26,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a44db2e46af2b73e0dbaa929244161b18c15162/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a44db2e46af2b73e0dbaa929244161b18c15162/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9a44db2e46af2b73e0dbaa929244161b18c15162",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_WALLET_WALLET_H\n \n #include <amount.h>\n+#include <outputtype.h>\n #include <policy/feerate.h>\n #include <streams.h>\n #include <tinyformat.h>\n@@ -93,20 +94,6 @@ enum WalletFeature\n     FEATURE_LATEST = FEATURE_PRE_SPLIT_KEYPOOL\n };\n \n-enum class OutputType {\n-    LEGACY,\n-    P2SH_SEGWIT,\n-    BECH32,\n-\n-    /**\n-     * Special output type for change outputs only. Automatically choose type\n-     * based on address type setting and the types other of non-change outputs\n-     * (see -changetype option documentation and implementation in\n-     * CWallet::TransactionChangeType for details).\n-     */\n-    CHANGE_AUTO,\n-};\n-\n //! Default for -addresstype\n constexpr OutputType DEFAULT_ADDRESS_TYPE{OutputType::P2SH_SEGWIT};\n \n@@ -1266,18 +1253,6 @@ class CAccount\n     }\n };\n \n-bool ParseOutputType(const std::string& str, OutputType& output_type);\n-const std::string& FormatOutputType(OutputType type);\n-\n-/**\n- * Get a destination of the requested type (if possible) to the specified key.\n- * The caller must make sure LearnRelatedScripts has been called beforehand.\n- */\n-CTxDestination GetDestinationForKey(const CPubKey& key, OutputType);\n-\n-/** Get all destinations (potentially) supported by the wallet for the given key. */\n-std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n-\n /** RAII object to check and reserve a wallet rescan */\n class WalletRescanReserver\n {"
      }
    ]
  },
  {
    "sha": "d58055d25f41e942e04ffeae5f25e37a60ee8829",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTgwNTVkMjVmNDFlOTQyZTA0ZmZlYWU1ZjI1ZTM3YTYwZWU4ODI5",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-07-09T09:30:39Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-07-09T14:06:19Z"
      },
      "message": "Move AddAndGetDestinationForScript from wallet to outputype module\n\nMakes AddAndGetDestinationForScript use a generic CKeyStore rather than\nthe wallet, and makes it always add the script to the keystore, rather\nthan only adding related (redeem) scripts.",
      "tree": {
        "sha": "b672c2f0cdb88537a9112d7b750b65589c0b9853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b672c2f0cdb88537a9112d7b750b65589c0b9853"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d58055d25f41e942e04ffeae5f25e37a60ee8829",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58055d25f41e942e04ffeae5f25e37a60ee8829",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d58055d25f41e942e04ffeae5f25e37a60ee8829",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58055d25f41e942e04ffeae5f25e37a60ee8829/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a44db2e46af2b73e0dbaa929244161b18c15162",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a44db2e46af2b73e0dbaa929244161b18c15162",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a44db2e46af2b73e0dbaa929244161b18c15162"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 34,
      "deletions": 31
    },
    "files": [
      {
        "sha": "3ff28bf9c20ae91c78e7a681cdb458a65f51bb1b",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58055d25f41e942e04ffeae5f25e37a60ee8829/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58055d25f41e942e04ffeae5f25e37a60ee8829/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=d58055d25f41e942e04ffeae5f25e37a60ee8829",
        "patch": "@@ -73,4 +73,29 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key)\n     }\n }\n \n+CTxDestination AddAndGetDestinationForScript(CKeyStore& keystore, const CScript& script, OutputType type)\n+{\n+    // Add script to keystore\n+    keystore.AddCScript(script);\n+    // Note that scripts over 520 bytes are not yet supported.\n+    switch (type) {\n+    case OutputType::LEGACY:\n+        return CScriptID(script);\n+    case OutputType::P2SH_SEGWIT:\n+    case OutputType::BECH32: {\n+        CTxDestination witdest = WitnessV0ScriptHash(script);\n+        CScript witprog = GetScriptForDestination(witdest);\n+        // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n+        if (!IsSolvable(keystore, witprog)) return CScriptID(script);\n+        // Add the redeemscript, so that P2WSH and P2SH-P2WSH outputs are recognized as ours.\n+        keystore.AddCScript(witprog);\n+        if (type == OutputType::BECH32) {\n+            return witdest;\n+        } else {\n+            return CScriptID(witprog);\n+        }\n+    }\n+    default: assert(false);\n+    }\n+}\n "
      },
      {
        "sha": "21623e3b49d0294dd17da94ca2d6434fe51563e0",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58055d25f41e942e04ffeae5f25e37a60ee8829/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58055d25f41e942e04ffeae5f25e37a60ee8829/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=d58055d25f41e942e04ffeae5f25e37a60ee8829",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_OUTPUTTYPE_H\n #define BITCOIN_OUTPUTTYPE_H\n \n+#include <keystore.h>\n #include <script/standard.h>\n \n #include <string>\n@@ -37,5 +38,12 @@ CTxDestination GetDestinationForKey(const CPubKey& key, OutputType);\n /** Get all destinations (potentially) supported by the wallet for the given key. */\n std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n \n+/**\n+ * Get a destination of the requested type (if possible) to the specified script.\n+ * This function will automatically add the script (and any other\n+ * necessary scripts) to the keystore.\n+ */\n+CTxDestination AddAndGetDestinationForScript(CKeyStore& keystore, const CScript& script, OutputType);\n+\n #endif // BITCOIN_OUTPUTTYPE_H\n "
      },
      {
        "sha": "40fdbea719df5dee30a0953abd95e97ad67f6265",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58055d25f41e942e04ffeae5f25e37a60ee8829/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58055d25f41e942e04ffeae5f25e37a60ee8829/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d58055d25f41e942e04ffeae5f25e37a60ee8829",
        "patch": "@@ -1363,8 +1363,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n \n     // Construct using pay-to-script-hash:\n     CScript inner = CreateMultisigRedeemscript(required, pubkeys);\n-    pwallet->AddCScript(inner);\n-    CTxDestination dest = pwallet->AddAndGetDestinationForScript(inner, output_type);\n+    CTxDestination dest = AddAndGetDestinationForScript(*pwallet, inner, output_type);\n     pwallet->SetAddressBook(dest, label, \"send\");\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "60e13e5a454c76b8f1e14b4bcf58d4552114c71e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58055d25f41e942e04ffeae5f25e37a60ee8829/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58055d25f41e942e04ffeae5f25e37a60ee8829/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d58055d25f41e942e04ffeae5f25e37a60ee8829",
        "patch": "@@ -4470,26 +4470,3 @@ void CWallet::LearnAllRelatedScripts(const CPubKey& key)\n     LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n }\n \n-CTxDestination CWallet::AddAndGetDestinationForScript(const CScript& script, OutputType type)\n-{\n-    // Note that scripts over 520 bytes are not yet supported.\n-    switch (type) {\n-    case OutputType::LEGACY:\n-        return CScriptID(script);\n-    case OutputType::P2SH_SEGWIT:\n-    case OutputType::BECH32: {\n-        CTxDestination witdest = WitnessV0ScriptHash(script);\n-        CScript witprog = GetScriptForDestination(witdest);\n-        // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n-        if (!IsSolvable(*this, witprog)) return CScriptID(script);\n-        // Add the redeemscript, so that P2WSH and P2SH-P2WSH outputs are recognized as ours.\n-        AddCScript(witprog);\n-        if (type == OutputType::BECH32) {\n-            return witdest;\n-        } else {\n-            return CScriptID(witprog);\n-        }\n-    }\n-    default: assert(false);\n-    }\n-}"
      },
      {
        "sha": "8213d4d68827531275e182e9529f23a1bd94c181",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58055d25f41e942e04ffeae5f25e37a60ee8829/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58055d25f41e942e04ffeae5f25e37a60ee8829/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d58055d25f41e942e04ffeae5f25e37a60ee8829",
        "patch": "@@ -1181,12 +1181,6 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     void LearnAllRelatedScripts(const CPubKey& key);\n \n-    /**\n-     * Get a destination of the requested type (if possible) to the specified script.\n-     * This function will automatically add the necessary scripts to the wallet.\n-     */\n-    CTxDestination AddAndGetDestinationForScript(const CScript& script, OutputType);\n-\n     /** Whether a given output is spendable by this wallet */\n     bool OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibility_filter) const;\n };"
      }
    ]
  },
  {
    "sha": "b9024fdda33e5c7a2e61705822ded034dd4f8e3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTAyNGZkZGEzM2U1YzdhMmU2MTcwNTgyMmRlZDAzNGRkNGY4ZTNi",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-25T08:43:31Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-07-09T14:07:58Z"
      },
      "message": "segwit support for createmultisig RPC",
      "tree": {
        "sha": "75f08555094c5486f6ca105154b8c28911b72885",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75f08555094c5486f6ca105154b8c28911b72885"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9024fdda33e5c7a2e61705822ded034dd4f8e3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9024fdda33e5c7a2e61705822ded034dd4f8e3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9024fdda33e5c7a2e61705822ded034dd4f8e3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9024fdda33e5c7a2e61705822ded034dd4f8e3b/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d58055d25f41e942e04ffeae5f25e37a60ee8829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58055d25f41e942e04ffeae5f25e37a60ee8829",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d58055d25f41e942e04ffeae5f25e37a60ee8829"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 17,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d6899c4b68686197313050050561100d3b11f31c",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9024fdda33e5c7a2e61705822ded034dd4f8e3b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9024fdda33e5c7a2e61705822ded034dd4f8e3b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b9024fdda33e5c7a2e61705822ded034dd4f8e3b",
        "patch": "@@ -226,6 +226,7 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   net_processing.cpp \\\n   noui.cpp \\\n+  outputtype.cpp \\\n   policy/fees.cpp \\\n   policy/policy.cpp \\\n   policy/rbf.cpp \\\n@@ -266,7 +267,6 @@ libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   interfaces/wallet.cpp \\\n-  outputtype.cpp \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n   wallet/feebumper.cpp \\"
      },
      {
        "sha": "09812bb980a3f7a9ddf766713d6103fc9a6201d2",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9024fdda33e5c7a2e61705822ded034dd4f8e3b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9024fdda33e5c7a2e61705822ded034dd4f8e3b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=b9024fdda33e5c7a2e61705822ded034dd4f8e3b",
        "patch": "@@ -12,6 +12,7 @@\n #include <httpserver.h>\n #include <net.h>\n #include <netbase.h>\n+#include <outputtype.h>\n #include <rpc/blockchain.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n@@ -91,9 +92,9 @@ class CWallet;\n \n static UniValue createmultisig(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n     {\n-        std::string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n+        std::string msg = \"createmultisig nrequired [\\\"key\\\",...] ( \\\"address_type\\\" )\\n\"\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n             \"It returns a json object with the address and redeemScript.\\n\"\n             \"\\nArguments:\\n\"\n@@ -103,6 +104,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n             \"       \\\"key\\\"                    (string) The hex-encoded public key\\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n+            \"3. \\\"address_type\\\"               (string, optional) The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is legacy.\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -133,12 +135,21 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n         }\n     }\n \n+    // Get the output type\n+    OutputType output_type = OutputType::LEGACY;\n+    if (!request.params[2].isNull()) {\n+        if (!ParseOutputType(request.params[2].get_str(), output_type)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[2].get_str()));\n+        }\n+    }\n+\n     // Construct using pay-to-script-hash:\n-    CScript inner = CreateMultisigRedeemscript(required, pubkeys);\n-    CScriptID innerID(inner);\n+    const CScript inner = CreateMultisigRedeemscript(required, pubkeys);\n+    CBasicKeyStore keystore;\n+    const CTxDestination dest = AddAndGetDestinationForScript(keystore, inner, output_type);\n \n     UniValue result(UniValue::VOBJ);\n-    result.pushKV(\"address\", EncodeDestination(innerID));\n+    result.pushKV(\"address\", EncodeDestination(dest));\n     result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n \n     return result;"
      }
    ]
  },
  {
    "sha": "f40b3b82dfe873dd55ee24f4d6dec5d43756260a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDBiM2I4MmRmZTg3M2RkNTVlZTI0ZjRkNmRlYzVkNDM3NTYyNjBh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-25T08:44:58Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-07-09T14:09:37Z"
      },
      "message": "[tests] functional test for createmultisig RPC",
      "tree": {
        "sha": "7b467f4310fe55416fed94cd8f0b756b3977ec41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b467f4310fe55416fed94cd8f0b756b3977ec41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f40b3b82dfe873dd55ee24f4d6dec5d43756260a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f40b3b82dfe873dd55ee24f4d6dec5d43756260a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f40b3b82dfe873dd55ee24f4d6dec5d43756260a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f40b3b82dfe873dd55ee24f4d6dec5d43756260a/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9024fdda33e5c7a2e61705822ded034dd4f8e3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9024fdda33e5c7a2e61705822ded034dd4f8e3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9024fdda33e5c7a2e61705822ded034dd4f8e3b"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 99,
      "deletions": 0
    },
    "files": [
      {
        "sha": "97e614c8883e8b650b4d5b6ff7f99ea9053e66f8",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "added",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f40b3b82dfe873dd55ee24f4d6dec5d43756260a/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f40b3b82dfe873dd55ee24f4d6dec5d43756260a/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=f40b3b82dfe873dd55ee24f4d6dec5d43756260a",
        "patch": "@@ -0,0 +1,98 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+import decimal\n+\n+class RpcCreateMultiSigTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+    def get_keys(self):\n+        node0,node1,node2 = self.nodes\n+        self.add = [node1.getnewaddress() for _ in range(self.nkeys)]\n+        self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in self.add]\n+        self.priv = [node1.dumpprivkey(a) for a in self.add]\n+        self.final = node2.getnewaddress()\n+\n+    def run_test(self):\n+        node0,node1,node2 = self.nodes\n+\n+        # 50 BTC each, rest will be 25 BTC each\n+        node0.generate(149)\n+        self.sync_all()\n+\n+        self.moved = 0\n+        for self.nkeys in [3,5]:\n+            for self.nsigs in [2,3]:\n+                for self.output_type in [\"bech32\", \"p2sh-segwit\", \"legacy\"]:\n+                    self.get_keys()\n+                    self.do_multisig()\n+\n+        self.checkbalances()\n+\n+    def checkbalances(self):\n+        node0,node1,node2 = self.nodes\n+        node0.generate(100)\n+        self.sync_all()\n+\n+        bal0 = node0.getbalance()\n+        bal1 = node1.getbalance()\n+        bal2 = node2.getbalance()\n+\n+        height = node0.getblockchaininfo()[\"blocks\"]\n+        assert 150 < height < 350\n+        total = 149*50 + (height-149-100)*25\n+        assert bal1 == 0\n+        assert bal2 == self.moved\n+        assert bal0+bal1+bal2 == total\n+\n+    def do_multisig(self):\n+        node0,node1,node2 = self.nodes\n+\n+        msig = node2.createmultisig(self.nsigs, self.pub, self.output_type)\n+        madd = msig[\"address\"]\n+        mredeem = msig[\"redeemScript\"]\n+        if self.output_type == 'bech32':\n+            assert madd[0:4] == \"bcrt\"  # actually a bech32 address\n+\n+        # compare against addmultisigaddress\n+        msigw = node1.addmultisigaddress(self.nsigs, self.pub, None, self.output_type)\n+        maddw = msigw[\"address\"]\n+        mredeemw = msigw[\"redeemScript\"]\n+        # addmultisigiaddress and createmultisig work the same\n+        assert maddw == madd\n+        assert mredeemw == mredeem\n+\n+        txid = node0.sendtoaddress(madd, 40)\n+\n+        tx = node0.getrawtransaction(txid, True)\n+        vout = [v[\"n\"] for v in tx[\"vout\"] if madd in v[\"scriptPubKey\"].get(\"addresses\",[])]\n+        assert len(vout) == 1\n+        vout = vout[0]\n+        scriptPubKey = tx[\"vout\"][vout][\"scriptPubKey\"][\"hex\"]\n+        value = tx[\"vout\"][vout][\"value\"]\n+        prevtxs = [{\"txid\": txid, \"vout\": vout, \"scriptPubKey\": scriptPubKey, \"redeemScript\": mredeem, \"amount\": value}]\n+\n+        node0.generate(1)\n+\n+        outval = value - decimal.Decimal(\"0.00001000\")\n+        rawtx = node2.createrawtransaction([{\"txid\": txid, \"vout\": vout}], [{self.final: outval}])\n+\n+        rawtx2 = node2.signrawtransactionwithkey(rawtx, self.priv[0:self.nsigs-1], prevtxs)\n+        rawtx3 = node2.signrawtransactionwithkey(rawtx2[\"hex\"], [self.priv[-1]], prevtxs)\n+\n+        self.moved += outval\n+        tx = node0.sendrawtransaction(rawtx3[\"hex\"], True)\n+        blk = node0.generate(1)[0]\n+        assert tx in node0.getblock(blk)[\"tx\"]\n+\n+        txinfo = node0.getrawtransaction(tx, True, blk)\n+        self.log.info(\"n/m=%d/%d %s size=%d vsize=%d weight=%d\" % (self.nsigs, self.nkeys, self.output_type, txinfo[\"size\"], txinfo[\"vsize\"], txinfo[\"weight\"]))\n+\n+if __name__ == '__main__':\n+    RpcCreateMultiSigTest().main()"
      },
      {
        "sha": "6f1e409f626cfb38f853fa70354fc9b9aa7cf9d3",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f40b3b82dfe873dd55ee24f4d6dec5d43756260a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f40b3b82dfe873dd55ee24f4d6dec5d43756260a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f40b3b82dfe873dd55ee24f4d6dec5d43756260a",
        "patch": "@@ -113,6 +113,7 @@\n     'mining_prioritisetransaction.py',\n     'p2p_invalid_block.py',\n     'p2p_invalid_tx.py',\n+    'rpc_createmultisig.py',\n     'feature_versionbits_warning.py',\n     'rpc_preciousblock.py',\n     'wallet_importprunedfunds.py',"
      }
    ]
  }
]