[
  {
    "sha": "ea36284d17b1b03fb716e8dd9b74dc8515a6e1a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTM2Mjg0ZDE3YjFiMDNmYjcxNmU4ZGQ5Yjc0ZGM4NTE1YTZlMWE0",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-12-23T03:05:54Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-12-23T05:16:04Z"
      },
      "message": "Use subprocess.Popen call directly, remove use of thread pool.",
      "tree": {
        "sha": "ac7201c97aada45530df979df24cd3ac75bd011f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac7201c97aada45530df979df24cd3ac75bd011f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea36284d17b1b03fb716e8dd9b74dc8515a6e1a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea36284d17b1b03fb716e8dd9b74dc8515a6e1a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea36284d17b1b03fb716e8dd9b74dc8515a6e1a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea36284d17b1b03fb716e8dd9b74dc8515a6e1a4/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98de9eb1aa84e712c3f4add0cf5602444dfa6dfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98de9eb1aa84e712c3f4add0cf5602444dfa6dfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98de9eb1aa84e712c3f4add0cf5602444dfa6dfd"
      }
    ],
    "stats": {
      "total": 202,
      "additions": 109,
      "deletions": 93
    },
    "files": [
      {
        "sha": "6de3668feef6c4bed3170bcc28b8b6fe7f1910b2",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 109,
        "deletions": 93,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea36284d17b1b03fb716e8dd9b74dc8515a6e1a4/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea36284d17b1b03fb716e8dd9b74dc8515a6e1a4/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=ea36284d17b1b03fb716e8dd9b74dc8515a6e1a4",
        "patch": "@@ -5,13 +5,13 @@\n \"\"\"Run fuzz test targets.\n \"\"\"\n \n-from concurrent.futures import ThreadPoolExecutor, as_completed\n import argparse\n import configparser\n import logging\n import os\n import subprocess\n import sys\n+import time\n \n \n def main():\n@@ -144,108 +144,118 @@ def main():\n         logging.error(\"subprocess timed out: Currently only libFuzzer is supported\")\n         sys.exit(1)\n \n-    with ThreadPoolExecutor(max_workers=args.par) as fuzz_pool:\n-        if args.generate:\n-            return generate_corpus_seeds(\n-                fuzz_pool=fuzz_pool,\n-                build_dir=config[\"environment\"][\"BUILDDIR\"],\n-                seed_dir=args.seed_dir,\n-                targets=test_list_selection,\n-            )\n-\n-        if args.m_dir:\n-            merge_inputs(\n-                fuzz_pool=fuzz_pool,\n-                corpus=args.seed_dir,\n-                test_list=test_list_selection,\n-                build_dir=config[\"environment\"][\"BUILDDIR\"],\n-                merge_dir=args.m_dir,\n-            )\n-            return\n+    if args.generate:\n+        return generate_corpus_seeds(\n+            max_jobs=args.par,\n+            build_dir=config[\"environment\"][\"BUILDDIR\"],\n+            seed_dir=args.seed_dir,\n+            targets=test_list_selection,\n+        )\n \n-        run_once(\n-            fuzz_pool=fuzz_pool,\n+    if args.m_dir:\n+        merge_inputs(\n+            max_jobs=args.par,\n             corpus=args.seed_dir,\n             test_list=test_list_selection,\n             build_dir=config[\"environment\"][\"BUILDDIR\"],\n-            use_valgrind=args.valgrind,\n+            merge_dir=args.m_dir,\n         )\n+        return\n+\n+    run_once(\n+        max_jobs=args.par,\n+        corpus=args.seed_dir,\n+        test_list=test_list_selection,\n+        build_dir=config[\"environment\"][\"BUILDDIR\"],\n+        use_valgrind=args.valgrind,\n+    )\n \n-\n-def generate_corpus_seeds(*, fuzz_pool, build_dir, seed_dir, targets):\n+def generate_corpus_seeds(*, max_jobs, build_dir, seed_dir, targets):\n     \"\"\"Generates new corpus seeds.\n \n     Run {targets} without input, and outputs the generated corpus seeds to\n     {seed_dir}.\n     \"\"\"\n     logging.info(\"Generating corpus seeds to {}\".format(seed_dir))\n \n-    def job(command, t):\n-        logging.debug(\"Running '{}'\\n\".format(\" \".join(command)))\n-        logging.debug(\"Command '{}' output:\\n'{}'\\n\".format(\n-            ' '.join(command),\n-            subprocess.run(\n-                command,\n-                env={\n-                    'FUZZ': t\n-                },\n-                check=True,\n-                stderr=subprocess.PIPE,\n-                universal_newlines=True,\n-            ).stderr))\n-\n-    futures = []\n+    jobs = []\n     for target in targets:\n         target_seed_dir = os.path.join(seed_dir, target)\n         os.makedirs(target_seed_dir, exist_ok=True)\n-        command = [\n+        args = [\n             os.path.join(build_dir, 'src', 'test', 'fuzz', 'fuzz'),\n             \"-runs=100000\",\n             target_seed_dir,\n         ]\n-        futures.append(fuzz_pool.submit(job, command, target))\n-\n-    for future in as_completed(futures):\n-        future.result()\n-\n-\n-def merge_inputs(*, fuzz_pool, corpus, test_list, build_dir, merge_dir):\n+        jobs.append([target, args])\n+\n+    running_jobs = set()\n+    while len(jobs) > 0 or len(running_jobs) > 0:\n+        if len(running_jobs) < max_jobs and len(jobs) > 0:\n+            target, args = jobs.pop()\n+            logging.debug(\"Running '{}' '{}'\\n\".format(target, \" \".join(args)))\n+            job = subprocess.Popen(\n+                args,\n+                env={\n+                    'FUZZ': target\n+                },\n+                stdout=subprocess.PIPE,\n+                stderr=subprocess.PIPE,\n+                universal_newlines=True)\n+            running_jobs.add(job)\n+\n+        dead_jobs = set()\n+        for job in running_jobs:\n+            ret = job.poll()\n+            if ret is not None:\n+                logging.debug(\"args:'{}'\\nstdout: '{}'\\nstderr: '{}'\\n\".format(' '.join(job.args), job.stdout.read(), job.stderr.read()))\n+                dead_jobs.add(job)\n+        running_jobs -= dead_jobs\n+        time.sleep(0.1)\n+\n+def merge_inputs(*, max_jobs, corpus, test_list, build_dir, merge_dir):\n     logging.info(\"Merge the inputs in the passed dir into the seed_dir. Passed dir {}\".format(merge_dir))\n     jobs = []\n-    for t in test_list:\n+    for target in test_list:\n+        os.makedirs(os.path.join(corpus, target), exist_ok=True)\n+        os.makedirs(os.path.join(merge_dir, target), exist_ok=True)\n         args = [\n             os.path.join(build_dir, 'src', 'test', 'fuzz', 'fuzz'),\n             '-merge=1',\n             '-use_value_profile=1',  # Also done by oss-fuzz https://github.com/google/oss-fuzz/issues/1406#issuecomment-387790487\n-            os.path.join(corpus, t),\n-            os.path.join(merge_dir, t),\n+            os.path.join(corpus, target),\n+            os.path.join(merge_dir, target),\n         ]\n-        os.makedirs(os.path.join(corpus, t), exist_ok=True)\n-        os.makedirs(os.path.join(merge_dir, t), exist_ok=True)\n-\n-        def job(t, args):\n-            output = 'Run {} with args {}\\n'.format(t, \" \".join(args))\n-            output += subprocess.run(\n+        jobs.append([target, args])\n+\n+    running_jobs = set()\n+    while len(jobs) > 0 or len(running_jobs) > 0:\n+        if len(running_jobs) < max_jobs and len(jobs) > 0:\n+            target, args = jobs.pop()\n+            logging.debug(\"Running '{}' '{}'\\n\".format(target, \" \".join(args)))\n+            job = subprocess.Popen(\n                 args,\n                 env={\n-                    'FUZZ': t\n+                    'FUZZ': target\n                 },\n-                check=True,\n+                stdout=subprocess.PIPE,\n                 stderr=subprocess.PIPE,\n-                universal_newlines=True,\n-            ).stderr\n-            logging.debug(output)\n-\n-        jobs.append(fuzz_pool.submit(job, t, args))\n-\n-    for future in as_completed(jobs):\n-        future.result()\n-\n-\n-def run_once(*, fuzz_pool, corpus, test_list, build_dir, use_valgrind):\n+                universal_newlines=True)\n+            running_jobs.add(job)\n+\n+        dead_jobs = set()\n+        for job in running_jobs:\n+            ret = job.poll()\n+            if ret is not None:\n+                logging.debug(\"args:'{}'\\nstdout: '{}'\\nstderr: '{}'\\n\".format(' '.join(job.args), job.stdout.read(), job.stderr.read()))\n+                dead_jobs.add(job)\n+        running_jobs -= dead_jobs\n+        time.sleep(0.01)\n+\n+def run_once(*, max_jobs, corpus, test_list, build_dir, use_valgrind):\n     jobs = []\n-    for t in test_list:\n-        corpus_path = os.path.join(corpus, t)\n+    for target in test_list:\n+        corpus_path = os.path.join(corpus, target)\n         os.makedirs(corpus_path, exist_ok=True)\n         args = [\n             os.path.join(build_dir, 'src', 'test', 'fuzz', 'fuzz'),\n@@ -254,28 +264,34 @@ def run_once(*, fuzz_pool, corpus, test_list, build_dir, use_valgrind):\n         ]\n         if use_valgrind:\n             args = ['valgrind', '--quiet', '--error-exitcode=1'] + args\n-\n-        def job(t, args):\n-            output = 'Run {} with args {}'.format(t, args)\n-            result = subprocess.run(args, env={'FUZZ': t}, stderr=subprocess.PIPE, universal_newlines=True)\n-            output += result.stderr\n-            return output, result\n-\n-        jobs.append(fuzz_pool.submit(job, t, args))\n-\n-    for future in as_completed(jobs):\n-        output, result = future.result()\n-        logging.debug(output)\n-        try:\n-            result.check_returncode()\n-        except subprocess.CalledProcessError as e:\n-            if e.stdout:\n-                logging.info(e.stdout)\n-            if e.stderr:\n-                logging.info(e.stderr)\n-            logging.info(\"Target \\\"{}\\\" failed with exit code {}\".format(\" \".join(result.args), e.returncode))\n-            sys.exit(1)\n-\n+        jobs.append([target, args])\n+\n+    running_jobs = set()\n+    while len(jobs) > 0 or len(running_jobs) > 0:\n+        if len(running_jobs) < max_jobs and len(jobs) > 0:\n+            target, args = jobs.pop()\n+            logging.debug(\"Running '{}' '{}'\\n\".format(target, \" \".join(args)))\n+            job = subprocess.Popen(\n+                args,\n+                env={\n+                    'FUZZ': target\n+                },\n+                stdout=subprocess.PIPE,\n+                stderr=subprocess.PIPE,\n+                universal_newlines=True)\n+            running_jobs.add(job)\n+\n+        dead_jobs = set()\n+        for job in running_jobs:\n+            ret = job.poll()\n+            if ret is not None:\n+                logging.debug(\"args:'{}'\\nstdout: '{}'\\nstderr: '{}'\\n\".format(' '.join(job.args), job.stdout.read(), job.stderr.read()))\n+                if ret != 0:\n+                    logging.error(\"Target failed with exit code {}\".format(ret))\n+                    sys.exit(1)\n+                dead_jobs.add(job)\n+        running_jobs -= dead_jobs\n+        time.sleep(0.01)\n \n def parse_test_list(*, fuzz_bin):\n     test_list_all = subprocess.run("
      }
    ]
  },
  {
    "sha": "1ff0dc525f051bbc7a93312dd622340ca8f4f52c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmYwZGM1MjVmMDUxYmJjN2E5MzMxMmRkNjIyMzQwY2E4ZjRmNTJj",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-12-23T04:32:48Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-12-23T18:07:27Z"
      },
      "message": "Infinite loop generating random seeds",
      "tree": {
        "sha": "4f65fd0e56555552c5b72d3529ee7981de355b41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f65fd0e56555552c5b72d3529ee7981de355b41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ff0dc525f051bbc7a93312dd622340ca8f4f52c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ff0dc525f051bbc7a93312dd622340ca8f4f52c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ff0dc525f051bbc7a93312dd622340ca8f4f52c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ff0dc525f051bbc7a93312dd622340ca8f4f52c/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea36284d17b1b03fb716e8dd9b74dc8515a6e1a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea36284d17b1b03fb716e8dd9b74dc8515a6e1a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea36284d17b1b03fb716e8dd9b74dc8515a6e1a4"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 26,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0dc20b3cb3450202c7bddc6ff09e19c7a74fa8b6",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 26,
        "deletions": 10,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ff0dc525f051bbc7a93312dd622340ca8f4f52c/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ff0dc525f051bbc7a93312dd622340ca8f4f52c/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=1ff0dc525f051bbc7a93312dd622340ca8f4f52c",
        "patch": "@@ -12,7 +12,7 @@\n import subprocess\n import sys\n import time\n-\n+import random\n \n def main():\n     parser = argparse.ArgumentParser(\n@@ -178,22 +178,32 @@ def generate_corpus_seeds(*, max_jobs, build_dir, seed_dir, targets):\n     \"\"\"\n     logging.info(\"Generating corpus seeds to {}\".format(seed_dir))\n \n-    jobs = []\n-    for target in targets:\n+    def generate_job():\n+        target = random.choice(targets)\n+        mutate_depth = random.randint(1, 15)\n+        use_value_profile = 0\n+        if random.randint(1, 10) == 1:\n+            use_value_profile = 1\n+        max_len = 2**random.randint(6, 12)\n+        if random.randint(1, 20) == 1:\n+            max_len = 0\n         target_seed_dir = os.path.join(seed_dir, target)\n         os.makedirs(target_seed_dir, exist_ok=True)\n         args = [\n             os.path.join(build_dir, 'src', 'test', 'fuzz', 'fuzz'),\n-            \"-runs=100000\",\n+            \"-max_total_time=1800\",\n+            \"-reload=0\",\n+            \"-mutate_depth={}\".format(mutate_depth),\n+            \"-use_value_profile={}\".format(use_value_profile),\n+            \"-max_len={}\".format(max_len),\n             target_seed_dir,\n         ]\n-        jobs.append([target, args])\n+        return [target, args]\n \n     running_jobs = set()\n-    while len(jobs) > 0 or len(running_jobs) > 0:\n-        if len(running_jobs) < max_jobs and len(jobs) > 0:\n-            target, args = jobs.pop()\n-            logging.debug(\"Running '{}' '{}'\\n\".format(target, \" \".join(args)))\n+    while True:\n+        if len(running_jobs) < max_jobs:\n+            target, args = generate_job()\n             job = subprocess.Popen(\n                 args,\n                 env={\n@@ -202,13 +212,19 @@ def generate_corpus_seeds(*, max_jobs, build_dir, seed_dir, targets):\n                 stdout=subprocess.PIPE,\n                 stderr=subprocess.PIPE,\n                 universal_newlines=True)\n+            logging.debug(\"started pid: {} target: '{}' arghs: '{}'\\n\".format(job.pid, target, \" \".join(args)))\n             running_jobs.add(job)\n \n         dead_jobs = set()\n         for job in running_jobs:\n+            try:\n+                outs,errs = job.communicate(timeout=0)\n+                logging.debug(\"pid: {} args:'{}'\\nstdout: '{}'\\nstderr: '{}'\\n\".format(job.pid, ' '.join(job.args), outs, err))\n+            except subprocess.TimeoutExpired:\n+                pass\n             ret = job.poll()\n             if ret is not None:\n-                logging.debug(\"args:'{}'\\nstdout: '{}'\\nstderr: '{}'\\n\".format(' '.join(job.args), job.stdout.read(), job.stderr.read()))\n+                logging.debug(\"pid: {} args:'{}'\\nstdout: '{}'\\nstderr: '{}'\\n\".format(job.pid, ' '.join(job.args), job.stdout.read(), job.stderr.read()))\n                 dead_jobs.add(job)\n         running_jobs -= dead_jobs\n         time.sleep(0.1)"
      }
    ]
  }
]