[
  {
    "sha": "5372deb4a7ace4bfe9d1291372ccd68ad4451629",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzcyZGViNGE3YWNlNGJmZTlkMTI5MTM3MmNjZDY4YWQ0NDUxNjI5",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-01T12:56:11Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-13T13:48:03Z"
      },
      "message": "qt: Use QVariant instead of int for BitcoinUnit in QSettings\n\nThis change improves type safety.",
      "tree": {
        "sha": "4a09da04c4745321191f2a07c3a03a8fb4244bd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a09da04c4745321191f2a07c3a03a8fb4244bd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5372deb4a7ace4bfe9d1291372ccd68ad4451629",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl81RJMACgkQQQEIES5+\nqB+OiQ//XRW7/7WWTKIO1kAkIzt2Xkk7fvhgURtCdePWJy3wI5J6hrkHq8fsgjgx\n0u6UTjZItXgIX/+epxurtJCYzA5y6Z9OdLemRJthcvwVKMudnJRotQXg0MICvLWL\nESsVeJmMS3mn0O0Jp6oFlqhHQ/COejXV/ozbgPS+G85ft8+eGnx9MYVuYJMYpHuR\nB/4GyNNQQiPaJodTfwbBsDCwHFPBxnIhmfqWOh4ZBDgCSVx/U/j8V/szkaKE4xLw\nZdB/w+u+tSfc2Fo+hXGJz2oyp2FMVyhVGO5tEY/iK4QcvDdxlT4D1aTs4SekdZHX\n9qFrg3855z8nKSKj+NsGMwmqaoAP3TvGqs5Bal4aHs6JjLHHlqzkwi7rdl+/JuSB\noCmzLLpexj6AvddEgJLVMiRNvnrnP6DCASnLwchN/9ML+ZVHxrosw25KetlD1XXt\nzVhj+9msXccQMNcjg9I7PGpJHYGfPs7lU3DqOfouwtbS8YsbCy4uASUnIIODHuBn\nKVmZjRbBPfZodEYHqQJoPf8HFNLq0RTMK4CfwMFa6cxGelv/vnSArmbskzadjlsm\ne5UHLNLexFk8sR0nOmh2g/G8SLmz6YIEcV2NC6p9wUOGP8809fMQlsHtdVuKbJOP\nHfULnPTZ1Xfyaxs4v6PfaeaPsb5NXcD/cBLZQ4Cx20GFHSvPXPI=\n=/AZF\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a09da04c4745321191f2a07c3a03a8fb4244bd6\nparent 6757b3ac8f670cbc188fc7531394e713975c9351\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591016171 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1597326483 +0300\n\nqt: Use QVariant instead of int for BitcoinUnit in QSettings\n\nThis change improves type safety.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5372deb4a7ace4bfe9d1291372ccd68ad4451629",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5372deb4a7ace4bfe9d1291372ccd68ad4451629",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5372deb4a7ace4bfe9d1291372ccd68ad4451629/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6757b3ac8f670cbc188fc7531394e713975c9351",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6757b3ac8f670cbc188fc7531394e713975c9351",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6757b3ac8f670cbc188fc7531394e713975c9351"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 63,
      "deletions": 12
    },
    "files": [
      {
        "sha": "6721b565f7b5a60d72809c857f697d3b84c4417e",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5372deb4a7ace4bfe9d1291372ccd68ad4451629/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5372deb4a7ace4bfe9d1291372ccd68ad4451629/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=5372deb4a7ace4bfe9d1291372ccd68ad4451629",
        "patch": "@@ -82,6 +82,8 @@ static void RegisterMetaTypes()\n     qRegisterMetaType<std::function<void()>>(\"std::function<void()>\");\n     qRegisterMetaType<QMessageBox::Icon>(\"QMessageBox::Icon\");\n     qRegisterMetaType<interfaces::BlockAndHeaderTipInfo>(\"interfaces::BlockAndHeaderTipInfo\");\n+\n+    qRegisterMetaTypeStreamOperators<BitcoinUnit>(\"BitcoinUnit\");\n }\n \n static QString GetLangTerritory()"
      },
      {
        "sha": "9ac6a54fdacbd8a6787f57ae587fc20389a6ca20",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5372deb4a7ace4bfe9d1291372ccd68ad4451629/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5372deb4a7ace4bfe9d1291372ccd68ad4451629/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=5372deb4a7ace4bfe9d1291372ccd68ad4451629",
        "patch": "@@ -244,3 +244,39 @@ CAmount BitcoinUnits::maxMoney()\n {\n     return MAX_MONEY;\n }\n+\n+namespace {\n+qint8 ToQuint8(BitcoinUnit unit)\n+{\n+    switch (unit) {\n+    case BitcoinUnits::BTC: return 0;\n+    case BitcoinUnits::mBTC: return 1;\n+    case BitcoinUnits::uBTC: return 2;\n+    case BitcoinUnits::SAT: return 3;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n+}\n+\n+BitcoinUnit FromQuint8(qint8 num)\n+{\n+    switch (num) {\n+    case 3: return BitcoinUnits::SAT;\n+    case 2: return BitcoinUnits::uBTC;\n+    case 1: return BitcoinUnits::mBTC;\n+    default: return BitcoinUnits::BTC;\n+    }\n+}\n+} // namespace\n+\n+QDataStream& operator<<(QDataStream& out, const BitcoinUnit& unit)\n+{\n+    return out << ToQuint8(unit);\n+}\n+\n+QDataStream& operator>>(QDataStream& in, BitcoinUnit& unit)\n+{\n+    quint8 input;\n+    in >> input;\n+    unit = FromQuint8(input);\n+    return in;\n+}"
      },
      {
        "sha": "a67d991cd13fba58b057270179f0ea4ba5fcbd86",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5372deb4a7ace4bfe9d1291372ccd68ad4451629/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5372deb4a7ace4bfe9d1291372ccd68ad4451629/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=5372deb4a7ace4bfe9d1291372ccd68ad4451629",
        "patch": "@@ -8,6 +8,7 @@\n #include <amount.h>\n \n #include <QAbstractListModel>\n+#include <QDataStream>\n #include <QString>\n \n // U+2009 THIN SPACE = UTF-8 E2 80 89\n@@ -45,6 +46,7 @@ class BitcoinUnits: public QAbstractListModel\n         uBTC,\n         SAT\n     };\n+    Q_ENUM(Unit)\n \n     enum class SeparatorStyle\n     {\n@@ -111,4 +113,7 @@ class BitcoinUnits: public QAbstractListModel\n };\n typedef BitcoinUnits::Unit BitcoinUnit;\n \n+QDataStream& operator<<(QDataStream& out, const BitcoinUnit& unit);\n+QDataStream& operator>>(QDataStream& in, BitcoinUnit& unit);\n+\n #endif // BITCOIN_QT_BITCOINUNITS_H"
      },
      {
        "sha": "ea901e337dd4b9be42c245500362187f841489b4",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5372deb4a7ace4bfe9d1291372ccd68ad4451629/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5372deb4a7ace4bfe9d1291372ccd68ad4451629/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=5372deb4a7ace4bfe9d1291372ccd68ad4451629",
        "patch": "@@ -22,6 +22,7 @@\n #include <QDebug>\n #include <QSettings>\n #include <QStringList>\n+#include <QVariant>\n \n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n@@ -68,9 +69,15 @@ void OptionsModel::Init(bool resetSettings)\n     fMinimizeOnClose = settings.value(\"fMinimizeOnClose\").toBool();\n \n     // Display\n-    if (!settings.contains(\"nDisplayUnit\"))\n-        settings.setValue(\"nDisplayUnit\", BitcoinUnits::BTC);\n-    nDisplayUnit = settings.value(\"nDisplayUnit\").toInt();\n+    if (!settings.contains(\"display_unit\")) {\n+        settings.setValue(\"display_unit\", QVariant::fromValue(BitcoinUnit::BTC));\n+    }\n+    QVariant unit = settings.value(\"display_unit\");\n+    if (unit.isValid()) {\n+        m_display_unit = unit.value<BitcoinUnit>();\n+    } else {\n+        m_display_unit = BitcoinUnit::BTC;\n+    }\n \n     if (!settings.contains(\"strThirdPartyTxUrls\"))\n         settings.setValue(\"strThirdPartyTxUrls\", \"\");\n@@ -306,7 +313,7 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             return settings.value(\"bSpendZeroConfChange\");\n #endif\n         case DisplayUnit:\n-            return nDisplayUnit;\n+            return QVariant::fromValue(m_display_unit);\n         case ThirdPartyTxUrls:\n             return strThirdPartyTxUrls;\n         case Language:\n@@ -484,12 +491,11 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n /** Updates current unit in memory, settings and emits displayUnitChanged(newUnit) signal */\n void OptionsModel::setDisplayUnit(const QVariant &value)\n {\n-    if (!value.isNull())\n-    {\n+    if (!value.isNull()) {\n         QSettings settings;\n-        nDisplayUnit = value.toInt();\n-        settings.setValue(\"nDisplayUnit\", nDisplayUnit);\n-        Q_EMIT displayUnitChanged(nDisplayUnit);\n+        m_display_unit = value.value<BitcoinUnit>();\n+        settings.setValue(\"display_unit\", QVariant::fromValue(m_display_unit));\n+        Q_EMIT displayUnitChanged(static_cast<int>(m_display_unit));\n     }\n }\n "
      },
      {
        "sha": "0afa8c547c4ea986a50a9cc1a625c5b2cb0c9da3",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5372deb4a7ace4bfe9d1291372ccd68ad4451629/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5372deb4a7ace4bfe9d1291372ccd68ad4451629/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=5372deb4a7ace4bfe9d1291372ccd68ad4451629",
        "patch": "@@ -6,11 +6,13 @@\n #define BITCOIN_QT_OPTIONSMODEL_H\n \n #include <amount.h>\n-#include <cstdint>\n+#include <qt/bitcoinunits.h>\n #include <qt/guiconstants.h>\n \n #include <QAbstractListModel>\n \n+#include <cstdint>\n+\n namespace interfaces {\n class Node;\n }\n@@ -79,7 +81,7 @@ class OptionsModel : public QAbstractListModel\n     bool getHideTrayIcon() const { return fHideTrayIcon; }\n     bool getMinimizeToTray() const { return fMinimizeToTray; }\n     bool getMinimizeOnClose() const { return fMinimizeOnClose; }\n-    int getDisplayUnit() const { return nDisplayUnit; }\n+    int getDisplayUnit() const { return static_cast<int>(m_display_unit); }\n     QString getThirdPartyTxUrls() const { return strThirdPartyTxUrls; }\n     bool getCoinControlFeatures() const { return fCoinControlFeatures; }\n     const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }\n@@ -101,7 +103,7 @@ class OptionsModel : public QAbstractListModel\n     bool fMinimizeToTray;\n     bool fMinimizeOnClose;\n     QString language;\n-    int nDisplayUnit;\n+    BitcoinUnit m_display_unit;\n     QString strThirdPartyTxUrls;\n     bool fCoinControlFeatures;\n     /* settings that were overridden by command-line */"
      }
    ]
  },
  {
    "sha": "8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDk4MTdiMTE0MjUwNWExYTk5YzViYzViNWI2OWYyOGEwYjVjYTEw",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-07-10T09:07:12Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-13T13:48:04Z"
      },
      "message": "refactor: Make BitcoinUnits::Unit a scoped enum",
      "tree": {
        "sha": "b332ef8df89010c50beb1b0407e1f0abd29e1cce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b332ef8df89010c50beb1b0407e1f0abd29e1cce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl81RJQACgkQQQEIES5+\nqB/Pcw/9HGSiV2XiXIw51OzBWW8ulnwFvRiAWeO/rQCHXeXAavIZEMpszqk92LQh\nBxK26VS5whEudZkmOItO+38tM2ToyfOUZtK5feAdYaymzGERXGPrtpYTtYbn2JqG\nzTElYE3j/Xa0NShW62KVATDiSj8PUD0CWQvqI0G0z6OzmZppRtKdcLzkeEPlEQ6G\ntNWWvfSK26Trp1PBKKhbnP7FfSk7FD4FfKewwa+mm51fIPWqcNoWmiKyGSeth7L1\na1FduwN+EWr4VfPz1WvwhTfqmJqXb85avHdAzhNN3IwrNxhqRYW5RW7IASDnSUrT\n9TyUp0tUzrrnok8NRGEE6iunnvGx/rwGmWvDIxhobdmQfzfvL7jyY1d1WhUONwZB\nq/c7liHQ4ispbZNV/QDnA9nR+jGfaOtEWkw7on1og+PIVtKalLEL+6vrMQbwz580\nMcgPVim5sSRg9LUrVDwF/mwQbyr2zc2i+gubPuZutFHv4NttboeVDFfGGfoPrqMH\nmJsEOcodC0vi+8B6XoBn5yUOZ5Ez7lS6KhzNZJ/TkOBeKjfizFg4Lua+VPG43AKI\nwqkMoXBJxQOaUUom6dxc9ZJkRiZkk7lAmfpGRsiD6ARBf+xRdd+7VeR2V24GxsX8\nIuBRnHQNP5vTOtMuBKCKliX/F6eFvkRqcw4J/tC0ClbuPTmkdxs=\n=1hyX\n-----END PGP SIGNATURE-----",
        "payload": "tree b332ef8df89010c50beb1b0407e1f0abd29e1cce\nparent 5372deb4a7ace4bfe9d1291372ccd68ad4451629\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1594372032 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1597326484 +0300\n\nrefactor: Make BitcoinUnits::Unit a scoped enum\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5372deb4a7ace4bfe9d1291372ccd68ad4451629",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5372deb4a7ace4bfe9d1291372ccd68ad4451629",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5372deb4a7ace4bfe9d1291372ccd68ad4451629"
      }
    ],
    "stats": {
      "total": 231,
      "additions": 118,
      "deletions": 113
    },
    "files": [
      {
        "sha": "fd26ac69460c5a0e56400073c2ab6b2daf6cc545",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -9,11 +9,14 @@\n #include <qt/guiutil.h>\n #include <qt/qvaluecombobox.h>\n \n-#include <QApplication>\n #include <QAbstractSpinBox>\n+#include <QApplication>\n #include <QHBoxLayout>\n #include <QKeyEvent>\n #include <QLineEdit>\n+#include <QVariant>\n+\n+#include <cassert>\n \n /** QSpinBox that uses fixed-point numbers internally and uses our own\n  * formatting/parsing functions.\n@@ -96,7 +99,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         setValue(val);\n     }\n \n-    void setDisplayUnit(int unit)\n+    void setDisplayUnit(BitcoinUnit unit)\n     {\n         bool valid = false;\n         CAmount val = value(&valid);\n@@ -122,7 +125,7 @@ class AmountSpinBox: public QAbstractSpinBox\n \n             const QFontMetrics fm(fontMetrics());\n             int h = lineEdit()->minimumSizeHint().height();\n-            int w = GUIUtil::TextWidth(fm, BitcoinUnits::format(BitcoinUnits::BTC, BitcoinUnits::maxMoney(), false, BitcoinUnits::SeparatorStyle::ALWAYS));\n+            int w = GUIUtil::TextWidth(fm, BitcoinUnits::format(BitcoinUnit::BTC, BitcoinUnits::maxMoney(), false, BitcoinUnits::SeparatorStyle::ALWAYS));\n             w += 2; // cursor blinking space\n \n             QStyleOptionSpinBox opt;\n@@ -148,7 +151,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     }\n \n private:\n-    int currentUnit{BitcoinUnits::BTC};\n+    BitcoinUnit currentUnit{BitcoinUnit::BTC};\n     CAmount singleStep{CAmount(100000)}; // satoshis\n     mutable QSize cachedMinimumSizeHint;\n     bool m_allow_empty{true};\n@@ -326,14 +329,14 @@ void BitcoinAmountField::unitChanged(int idx)\n     unit->setToolTip(unit->itemData(idx, Qt::ToolTipRole).toString());\n \n     // Determine new unit ID\n-    int newUnit = unit->itemData(idx, BitcoinUnits::UnitRole).toInt();\n-\n-    amount->setDisplayUnit(newUnit);\n+    QVariant new_unit = unit->currentData(BitcoinUnits::UnitRole);\n+    assert(new_unit.isValid());\n+    amount->setDisplayUnit(new_unit.value<BitcoinUnit>());\n }\n \n-void BitcoinAmountField::setDisplayUnit(int newUnit)\n+void BitcoinAmountField::setDisplayUnit(BitcoinUnit new_unit)\n {\n-    unit->setValue(newUnit);\n+    unit->setValue(QVariant::fromValue(new_unit));\n }\n \n void BitcoinAmountField::setSingleStep(const CAmount& step)"
      },
      {
        "sha": "78e0716ee1cfef102eab6c65a2de562d778a27a4",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_BITCOINAMOUNTFIELD_H\n \n #include <amount.h>\n+#include <qt/bitcoinunits.h>\n \n #include <QWidget>\n \n@@ -52,7 +53,7 @@ class BitcoinAmountField: public QWidget\n     bool validate();\n \n     /** Change unit used to display amount. */\n-    void setDisplayUnit(int unit);\n+    void setDisplayUnit(BitcoinUnit new_unit);\n \n     /** Make field empty and ready for new input. */\n     void clear();"
      },
      {
        "sha": "98e781f03b7641f4a88c3f75836bb43a3e84c52d",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -1184,7 +1184,7 @@ void BitcoinGUI::showEvent(QShowEvent *event)\n }\n \n #ifdef ENABLE_WALLET\n-void BitcoinGUI::incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label, const QString& walletName)\n+void BitcoinGUI::incomingTransaction(const QString& date, BitcoinUnit unit, const CAmount& amount, const QString& type, const QString& address, const QString& label, const QString& walletName)\n {\n     // On new transaction, make an info balloon\n     QString msg = tr(\"Date: %1\\n\").arg(date) +\n@@ -1446,11 +1446,10 @@ UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *pl\n {\n     createContextMenu();\n     setToolTip(tr(\"Unit to show amounts in. Click to select another unit.\"));\n-    QList<BitcoinUnits::Unit> units = BitcoinUnits::availableUnits();\n+    QList<BitcoinUnit> units = BitcoinUnits::availableUnits();\n     int max_width = 0;\n     const QFontMetrics fm(font());\n-    for (const BitcoinUnits::Unit unit : units)\n-    {\n+    for (const BitcoinUnit unit : units) {\n         max_width = qMax(max_width, GUIUtil::TextWidth(fm, BitcoinUnits::longName(unit)));\n     }\n     setMinimumSize(max_width, 0);\n@@ -1468,10 +1467,9 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n void UnitDisplayStatusBarControl::createContextMenu()\n {\n     menu = new QMenu(this);\n-    for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n-    {\n+    for (const BitcoinUnit u : BitcoinUnits::availableUnits()) {\n         QAction *menuAction = new QAction(QString(BitcoinUnits::longName(u)), this);\n-        menuAction->setData(QVariant(u));\n+        menuAction->setData(QVariant::fromValue(u));\n         menu->addAction(menuAction);\n     }\n     connect(menu, &QMenu::triggered, this, &UnitDisplayStatusBarControl::onMenuSelection);\n@@ -1493,7 +1491,7 @@ void UnitDisplayStatusBarControl::setOptionsModel(OptionsModel *_optionsModel)\n }\n \n /** When Display Units are changed on OptionsModel it will refresh the display text of the control on the status bar */\n-void UnitDisplayStatusBarControl::updateDisplayUnit(int newUnits)\n+void UnitDisplayStatusBarControl::updateDisplayUnit(BitcoinUnit newUnits)\n {\n     setText(BitcoinUnits::longName(newUnits));\n }"
      },
      {
        "sha": "17306131c38ed9bf4df2765d5b56f68ea64e40a9",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -9,6 +9,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <qt/bitcoinunits.h>\n #include <qt/optionsdialog.h>\n \n #include <amount.h>\n@@ -257,7 +258,7 @@ public Q_SLOTS:\n     bool handlePaymentRequest(const SendCoinsRecipient& recipient);\n \n     /** Show incoming transaction notification for new transactions. */\n-    void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label, const QString& walletName);\n+    void incomingTransaction(const QString& date, BitcoinUnit unit, const CAmount& amount, const QString& type, const QString& address, const QString& label, const QString& walletName);\n #endif // ENABLE_WALLET\n \n private:\n@@ -346,7 +347,7 @@ class UnitDisplayStatusBarControl : public QLabel\n \n private Q_SLOTS:\n     /** When Display Units are changed on OptionsModel it will refresh the display text of the control on the status bar */\n-    void updateDisplayUnit(int newUnits);\n+    void updateDisplayUnit(BitcoinUnit newUnits);\n     /** Tells underlying optionsModel to update its current display unit. */\n     void onMenuSelection(QAction* action);\n };"
      },
      {
        "sha": "ba9ea2cf126f74e57fffe77ca9784bdb6355480c",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 49,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -14,89 +14,89 @@ BitcoinUnits::BitcoinUnits(QObject *parent):\n {\n }\n \n-QList<BitcoinUnits::Unit> BitcoinUnits::availableUnits()\n+QList<BitcoinUnit> BitcoinUnits::availableUnits()\n {\n-    QList<BitcoinUnits::Unit> unitlist;\n-    unitlist.append(BTC);\n-    unitlist.append(mBTC);\n-    unitlist.append(uBTC);\n-    unitlist.append(SAT);\n+    QList<BitcoinUnit> unitlist;\n+    unitlist.append(Unit::BTC);\n+    unitlist.append(Unit::mBTC);\n+    unitlist.append(Unit::uBTC);\n+    unitlist.append(Unit::SAT);\n     return unitlist;\n }\n \n-bool BitcoinUnits::valid(int unit)\n+bool BitcoinUnits::valid(Unit unit)\n {\n     switch(unit)\n     {\n-    case BTC:\n-    case mBTC:\n-    case uBTC:\n-    case SAT:\n+    case Unit::BTC:\n+    case Unit::mBTC:\n+    case Unit::uBTC:\n+    case Unit::SAT:\n         return true;\n     default:\n         return false;\n     }\n }\n \n-QString BitcoinUnits::longName(int unit)\n+QString BitcoinUnits::longName(Unit unit)\n {\n     switch(unit)\n     {\n-    case BTC: return QString(\"BTC\");\n-    case mBTC: return QString(\"mBTC\");\n-    case uBTC: return QString::fromUtf8(\"\u00b5BTC (bits)\");\n-    case SAT: return QString(\"Satoshi (sat)\");\n+    case Unit::BTC: return QString(\"BTC\");\n+    case Unit::mBTC: return QString(\"mBTC\");\n+    case Unit::uBTC: return QString::fromUtf8(\"\u00b5BTC (bits)\");\n+    case Unit::SAT: return QString(\"Satoshi (sat)\");\n     default: return QString(\"???\");\n     }\n }\n \n-QString BitcoinUnits::shortName(int unit)\n+QString BitcoinUnits::shortName(Unit unit)\n {\n     switch(unit)\n     {\n-    case uBTC: return QString::fromUtf8(\"bits\");\n-    case SAT: return QString(\"sat\");\n+    case Unit::uBTC: return QString::fromUtf8(\"bits\");\n+    case Unit::SAT: return QString(\"sat\");\n     default: return longName(unit);\n     }\n }\n \n-QString BitcoinUnits::description(int unit)\n+QString BitcoinUnits::description(Unit unit)\n {\n     switch(unit)\n     {\n-    case BTC: return QString(\"Bitcoins\");\n-    case mBTC: return QString(\"Milli-Bitcoins (1 / 1\" THIN_SP_UTF8 \"000)\");\n-    case uBTC: return QString(\"Micro-Bitcoins (bits) (1 / 1\" THIN_SP_UTF8 \"000\" THIN_SP_UTF8 \"000)\");\n-    case SAT: return QString(\"Satoshi (sat) (1 / 100\" THIN_SP_UTF8 \"000\" THIN_SP_UTF8 \"000)\");\n+    case Unit::BTC: return QString(\"Bitcoins\");\n+    case Unit::mBTC: return QString(\"Milli-Bitcoins (1 / 1\" THIN_SP_UTF8 \"000)\");\n+    case Unit::uBTC: return QString(\"Micro-Bitcoins (bits) (1 / 1\" THIN_SP_UTF8 \"000\" THIN_SP_UTF8 \"000)\");\n+    case Unit::SAT: return QString(\"Satoshi (sat) (1 / 100\" THIN_SP_UTF8 \"000\" THIN_SP_UTF8 \"000)\");\n     default: return QString(\"???\");\n     }\n }\n \n-qint64 BitcoinUnits::factor(int unit)\n+qint64 BitcoinUnits::factor(Unit unit)\n {\n     switch(unit)\n     {\n-    case BTC: return 100000000;\n-    case mBTC: return 100000;\n-    case uBTC: return 100;\n-    case SAT: return 1;\n+    case Unit::BTC: return 100000000;\n+    case Unit::mBTC: return 100000;\n+    case Unit::uBTC: return 100;\n+    case Unit::SAT: return 1;\n     default: return 100000000;\n     }\n }\n \n-int BitcoinUnits::decimals(int unit)\n+int BitcoinUnits::decimals(Unit unit)\n {\n     switch(unit)\n     {\n-    case BTC: return 8;\n-    case mBTC: return 5;\n-    case uBTC: return 2;\n-    case SAT: return 0;\n+    case Unit::BTC: return 8;\n+    case Unit::mBTC: return 5;\n+    case Unit::uBTC: return 2;\n+    case Unit::SAT: return 0;\n     default: return 0;\n     }\n }\n \n-QString BitcoinUnits::format(int unit, const CAmount& nIn, bool fPlus, SeparatorStyle separators, bool justify)\n+QString BitcoinUnits::format(Unit unit, const CAmount& nIn, bool fPlus, SeparatorStyle separators, bool justify)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n@@ -141,19 +141,19 @@ QString BitcoinUnits::format(int unit, const CAmount& nIn, bool fPlus, Separator\n // Please take care to use formatHtmlWithUnit instead, when\n // appropriate.\n \n-QString BitcoinUnits::formatWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)\n+QString BitcoinUnits::formatWithUnit(Unit unit, const CAmount& amount, bool plussign, SeparatorStyle separators)\n {\n     return format(unit, amount, plussign, separators) + QString(\" \") + shortName(unit);\n }\n \n-QString BitcoinUnits::formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)\n+QString BitcoinUnits::formatHtmlWithUnit(Unit unit, const CAmount& amount, bool plussign, SeparatorStyle separators)\n {\n     QString str(formatWithUnit(unit, amount, plussign, separators));\n     str.replace(QChar(THIN_SP_CP), QString(THIN_SP_HTML));\n     return QString(\"<span style='white-space: nowrap;'>%1</span>\").arg(str);\n }\n \n-QString BitcoinUnits::formatWithPrivacy(int unit, const CAmount& amount, SeparatorStyle separators, bool privacy)\n+QString BitcoinUnits::formatWithPrivacy(Unit unit, const CAmount& amount, SeparatorStyle separators, bool privacy)\n {\n     assert(amount >= 0);\n     QString value;\n@@ -165,7 +165,7 @@ QString BitcoinUnits::formatWithPrivacy(int unit, const CAmount& amount, Separat\n     return value + QString(\" \") + shortName(unit);\n }\n \n-bool BitcoinUnits::parse(int unit, const QString &value, CAmount *val_out)\n+bool BitcoinUnits::parse(Unit unit, const QString& value, CAmount* val_out)\n {\n     if(!valid(unit) || value.isEmpty())\n         return false; // Refuse to parse invalid unit or empty string\n@@ -204,7 +204,7 @@ bool BitcoinUnits::parse(int unit, const QString &value, CAmount *val_out)\n     return ok;\n }\n \n-QString BitcoinUnits::getAmountColumnTitle(int unit)\n+QString BitcoinUnits::getAmountColumnTitle(Unit unit)\n {\n     QString amountTitle = QObject::tr(\"Amount\");\n     if (BitcoinUnits::valid(unit))\n@@ -234,7 +234,7 @@ QVariant BitcoinUnits::data(const QModelIndex &index, int role) const\n         case Qt::ToolTipRole:\n             return QVariant(description(unit));\n         case UnitRole:\n-            return QVariant(static_cast<int>(unit));\n+            return QVariant::fromValue(unit);\n         }\n     }\n     return QVariant();\n@@ -249,21 +249,21 @@ namespace {\n qint8 ToQuint8(BitcoinUnit unit)\n {\n     switch (unit) {\n-    case BitcoinUnits::BTC: return 0;\n-    case BitcoinUnits::mBTC: return 1;\n-    case BitcoinUnits::uBTC: return 2;\n-    case BitcoinUnits::SAT: return 3;\n+    case BitcoinUnit::BTC: return 0;\n+    case BitcoinUnit::mBTC: return 1;\n+    case BitcoinUnit::uBTC: return 2;\n+    case BitcoinUnit::SAT: return 3;\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n \n BitcoinUnit FromQuint8(qint8 num)\n {\n     switch (num) {\n-    case 3: return BitcoinUnits::SAT;\n-    case 2: return BitcoinUnits::uBTC;\n-    case 1: return BitcoinUnits::mBTC;\n-    default: return BitcoinUnits::BTC;\n+    case 3: return BitcoinUnit::SAT;\n+    case 2: return BitcoinUnit::uBTC;\n+    case 1: return BitcoinUnit::mBTC;\n+    default: return BitcoinUnit::BTC;\n     }\n }\n } // namespace"
      },
      {
        "sha": "0785b74879cb47585a6700ca4da45cc36d6ecb7d",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -39,8 +39,7 @@ class BitcoinUnits: public QAbstractListModel\n     /** Bitcoin units.\n       @note Source: https://en.bitcoin.it/wiki/Units . Please add only sensible ones\n      */\n-    enum Unit\n-    {\n+    enum class Unit {\n         BTC,\n         mBTC,\n         uBTC,\n@@ -62,29 +61,29 @@ class BitcoinUnits: public QAbstractListModel\n     //! Get list of units, for drop-down box\n     static QList<Unit> availableUnits();\n     //! Is unit ID valid?\n-    static bool valid(int unit);\n+    static bool valid(Unit unit);\n     //! Long name\n-    static QString longName(int unit);\n+    static QString longName(Unit unit);\n     //! Short name\n-    static QString shortName(int unit);\n+    static QString shortName(Unit unit);\n     //! Longer description\n-    static QString description(int unit);\n+    static QString description(Unit unit);\n     //! Number of Satoshis (1e-8) per unit\n-    static qint64 factor(int unit);\n+    static qint64 factor(Unit unit);\n     //! Number of decimals left\n-    static int decimals(int unit);\n+    static int decimals(Unit unit);\n     //! Format as string\n-    static QString format(int unit, const CAmount& amount, bool plussign = false, SeparatorStyle separators = SeparatorStyle::STANDARD, bool justify = false);\n+    static QString format(Unit unit, const CAmount& amount, bool plussign = false, SeparatorStyle separators = SeparatorStyle::STANDARD, bool justify = false);\n     //! Format as string (with unit)\n-    static QString formatWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=SeparatorStyle::STANDARD);\n+    static QString formatWithUnit(Unit unit, const CAmount& amount, bool plussign = false, SeparatorStyle separators = SeparatorStyle::STANDARD);\n     //! Format as HTML string (with unit)\n-    static QString formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=SeparatorStyle::STANDARD);\n+    static QString formatHtmlWithUnit(Unit unit, const CAmount& amount, bool plussign = false, SeparatorStyle separators = SeparatorStyle::STANDARD);\n     //! Format as string (with unit) of fixed length to preserve privacy, if it is set.\n-    static QString formatWithPrivacy(int unit, const CAmount& amount, SeparatorStyle separators, bool privacy);\n+    static QString formatWithPrivacy(Unit unit, const CAmount& amount, SeparatorStyle separators, bool privacy);\n     //! Parse string to coin amount\n-    static bool parse(int unit, const QString &value, CAmount *val_out);\n+    static bool parse(Unit unit, const QString& value, CAmount* val_out);\n     //! Gets title for amount column including current display unit if optionsModel reference available */\n-    static QString getAmountColumnTitle(int unit);\n+    static QString getAmountColumnTitle(Unit unit);\n     ///@}\n \n     //! @name AbstractListModel implementation\n@@ -109,7 +108,7 @@ class BitcoinUnits: public QAbstractListModel\n     static CAmount maxMoney();\n \n private:\n-    QList<BitcoinUnits::Unit> unitlist;\n+    QList<Unit> unitlist;\n };\n typedef BitcoinUnits::Unit BitcoinUnit;\n "
      },
      {
        "sha": "b6ceee9d02775ee65c29e4e66f6c65c59f435431",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -517,7 +517,7 @@ void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *\n     }\n \n     // actually update labels\n-    int nDisplayUnit = BitcoinUnits::BTC;\n+    BitcoinUnit nDisplayUnit = BitcoinUnit::BTC;\n     if (model && model->getOptionsModel())\n         nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n \n@@ -591,7 +591,7 @@ void CoinControlDialog::updateView()\n     QFlags<Qt::ItemFlag> flgCheckbox = Qt::ItemIsSelectable | Qt::ItemIsEnabled | Qt::ItemIsUserCheckable;\n     QFlags<Qt::ItemFlag> flgTristate = Qt::ItemIsSelectable | Qt::ItemIsEnabled | Qt::ItemIsUserCheckable | Qt::ItemIsTristate;\n \n-    int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n+    BitcoinUnit nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n \n     for (const auto& coins : model->wallet().listCoins()) {\n         CCoinControlWidgetItem* itemWalletAddress{nullptr};"
      },
      {
        "sha": "133ebd3c81fa2aab0f229c3ef372bb1d33c4d823",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -155,8 +155,7 @@ bool parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out)\n         {\n             if(!i->second.isEmpty())\n             {\n-                if(!BitcoinUnits::parse(BitcoinUnits::BTC, i->second, &rv.amount))\n-                {\n+                if (!BitcoinUnits::parse(BitcoinUnit::BTC, i->second, &rv.amount)) {\n                     return false;\n                 }\n             }\n@@ -188,7 +187,7 @@ QString formatBitcoinURI(const SendCoinsRecipient &info)\n \n     if (info.amount)\n     {\n-        ret += QString(\"?amount=%1\").arg(BitcoinUnits::format(BitcoinUnits::BTC, info.amount, false, BitcoinUnits::SeparatorStyle::NEVER));\n+        ret += QString(\"?amount=%1\").arg(BitcoinUnits::format(BitcoinUnit::BTC, info.amount, false, BitcoinUnits::SeparatorStyle::NEVER));\n         paramCount++;\n     }\n "
      },
      {
        "sha": "795628d7f0c1f259b6161d34d6c09f202e7ae361",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -495,7 +495,7 @@ void OptionsModel::setDisplayUnit(const QVariant &value)\n         QSettings settings;\n         m_display_unit = value.value<BitcoinUnit>();\n         settings.setValue(\"display_unit\", QVariant::fromValue(m_display_unit));\n-        Q_EMIT displayUnitChanged(static_cast<int>(m_display_unit));\n+        Q_EMIT displayUnitChanged(m_display_unit);\n     }\n }\n "
      },
      {
        "sha": "034ffd68ed85cd83a66f61ce23cfc876a1a018b1",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -55,7 +55,7 @@ class OptionsModel : public QAbstractListModel\n         ProxyUseTor,            // bool\n         ProxyIPTor,             // QString\n         ProxyPortTor,           // int\n-        DisplayUnit,            // BitcoinUnits::Unit\n+        DisplayUnit,            // BitcoinUnit\n         ThirdPartyTxUrls,       // QString\n         Language,               // QString\n         CoinControlFeatures,    // bool\n@@ -81,7 +81,7 @@ class OptionsModel : public QAbstractListModel\n     bool getHideTrayIcon() const { return fHideTrayIcon; }\n     bool getMinimizeToTray() const { return fMinimizeToTray; }\n     bool getMinimizeOnClose() const { return fMinimizeOnClose; }\n-    int getDisplayUnit() const { return static_cast<int>(m_display_unit); }\n+    BitcoinUnit getDisplayUnit() const { return m_display_unit; }\n     QString getThirdPartyTxUrls() const { return strThirdPartyTxUrls; }\n     bool getCoinControlFeatures() const { return fCoinControlFeatures; }\n     const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }\n@@ -115,7 +115,7 @@ class OptionsModel : public QAbstractListModel\n     // Check settings version and upgrade default values if required\n     void checkAndMigrate();\n Q_SIGNALS:\n-    void displayUnitChanged(int unit);\n+    void displayUnitChanged(BitcoinUnit unit);\n     void coinControlFeaturesChanged(bool);\n     void hideTrayIconChanged(bool);\n };"
      },
      {
        "sha": "61ea99f2896b5f2a8564b26f89831794f5b8780d",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -29,9 +29,9 @@ class TxViewDelegate : public QAbstractItemDelegate\n {\n     Q_OBJECT\n public:\n-    explicit TxViewDelegate(const PlatformStyle *_platformStyle, QObject *parent=nullptr):\n-        QAbstractItemDelegate(parent), unit(BitcoinUnits::BTC),\n-        platformStyle(_platformStyle)\n+    explicit TxViewDelegate(const PlatformStyle* _platformStyle, QObject* parent = nullptr)\n+        : QAbstractItemDelegate(parent), unit(BitcoinUnit::BTC),\n+          platformStyle(_platformStyle)\n     {\n \n     }\n@@ -106,7 +106,7 @@ class TxViewDelegate : public QAbstractItemDelegate\n         return QSize(DECORATION_SIZE, DECORATION_SIZE);\n     }\n \n-    int unit;\n+    BitcoinUnit unit;\n     const PlatformStyle *platformStyle;\n \n };\n@@ -176,7 +176,7 @@ OverviewPage::~OverviewPage()\n \n void OverviewPage::setBalance(const interfaces::WalletBalances& balances)\n {\n-    int unit = walletModel->getOptionsModel()->getDisplayUnit();\n+    BitcoinUnit unit = walletModel->getOptionsModel()->getDisplayUnit();\n     m_balances = balances;\n     if (walletModel->wallet().isLegacy()) {\n         if (walletModel->wallet().privateKeysDisabled()) {"
      },
      {
        "sha": "1b83d1c027e28f07c48bf1914ba0bf7f6a4651ae",
        "filename": "src/qt/psbtoperationsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/psbtoperationsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/psbtoperationsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/psbtoperationsdialog.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -165,7 +165,7 @@ std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransac\n         ExtractDestination(out.scriptPubKey, address);\n         totalAmount += out.nValue;\n         tx_description.append(tr(\" * Sends %1 to %2\")\n-            .arg(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, out.nValue))\n+            .arg(BitcoinUnits::formatWithUnit(BitcoinUnit::BTC, out.nValue))\n             .arg(QString::fromStdString(EncodeDestination(address))));\n         tx_description.append(\"<br>\");\n     }\n@@ -177,7 +177,7 @@ std::string PSBTOperationsDialog::renderTransaction(const PartiallySignedTransac\n         tx_description.append(tr(\"Unable to calculate transaction fee or total transaction amount.\"));\n     } else {\n         tx_description.append(tr(\"Pays transaction fee: \"));\n-        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, *analysis.fee));\n+        tx_description.append(BitcoinUnits::formatWithUnit(BitcoinUnit::BTC, *analysis.fee));\n \n         // add total amount in all subdivision units\n         tx_description.append(\"<hr />\");"
      },
      {
        "sha": "01d5f9d197b6cc9a259d4a2471afdcb6950c64d4",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -345,8 +345,7 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n     question_string.append(\"<hr />\");\n     CAmount totalAmount = m_current_transaction->getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n-    for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n-    {\n+    for (const BitcoinUnit u : BitcoinUnits::availableUnits()) {\n         if(u != model->getOptionsModel()->getDisplayUnit())\n             alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n     }"
      },
      {
        "sha": "53606bd030bdb9edcadbe9327e34e153b5395156",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -7,24 +7,25 @@\n \n #include <interfaces/chain.h>\n #include <interfaces/node.h>\n+#include <key_io.h>\n #include <qt/bitcoinamountfield.h>\n+#include <qt/bitcoinunits.h>\n #include <qt/clientmodel.h>\n #include <qt/optionsmodel.h>\n+#include <qt/overviewpage.h>\n #include <qt/platformstyle.h>\n #include <qt/qvalidatedlineedit.h>\n+#include <qt/receivecoinsdialog.h>\n+#include <qt/receiverequestdialog.h>\n+#include <qt/recentrequeststablemodel.h>\n #include <qt/sendcoinsdialog.h>\n #include <qt/sendcoinsentry.h>\n #include <qt/transactiontablemodel.h>\n #include <qt/transactionview.h>\n #include <qt/walletmodel.h>\n-#include <key_io.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n #include <wallet/wallet.h>\n-#include <qt/overviewpage.h>\n-#include <qt/receivecoinsdialog.h>\n-#include <qt/recentrequeststablemodel.h>\n-#include <qt/receiverequestdialog.h>\n \n #include <memory>\n \n@@ -175,7 +176,7 @@ void TestGUI(interfaces::Node& node)\n         // Check balance in send dialog\n         QLabel* balanceLabel = sendCoinsDialog.findChild<QLabel*>(\"labelBalance\");\n         QString balanceText = balanceLabel->text();\n-        int unit = walletModel.getOptionsModel()->getDisplayUnit();\n+        BitcoinUnit unit = walletModel.getOptionsModel()->getDisplayUnit();\n         CAmount balance = walletModel.wallet().getBalance();\n         QString balanceComparison = BitcoinUnits::formatWithUnit(unit, balance, false, BitcoinUnits::SeparatorStyle::ALWAYS);\n         QCOMPARE(balanceText, balanceComparison);\n@@ -201,7 +202,7 @@ void TestGUI(interfaces::Node& node)\n     overviewPage.setWalletModel(&walletModel);\n     QLabel* balanceLabel = overviewPage.findChild<QLabel*>(\"labelBalance\");\n     QString balanceText = balanceLabel->text().trimmed();\n-    int unit = walletModel.getOptionsModel()->getDisplayUnit();\n+    BitcoinUnit unit = walletModel.getOptionsModel()->getDisplayUnit();\n     CAmount balance = walletModel.wallet().getBalance();\n     QString balanceComparison = BitcoinUnits::formatWithUnit(unit, balance, false, BitcoinUnits::SeparatorStyle::ALWAYS);\n     QCOMPARE(balanceText, balanceComparison);"
      },
      {
        "sha": "3d790cba38e465f8cc1f53763227ac9b88be6125",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -77,7 +77,7 @@ bool GetPaymentRequestMerchant(const std::string& pr, QString& merchant)\n     return false;\n }\n \n-QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit)\n+QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord* rec, BitcoinUnit unit)\n {\n     int numBlocks;\n     interfaces::WalletTxStatus status;"
      },
      {
        "sha": "ecd5b95c5e90d00f59f6c80de56db1868e440bf6",
        "filename": "src/qt/transactiondesc.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/transactiondesc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/transactiondesc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.h?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_QT_TRANSACTIONDESC_H\n #define BITCOIN_QT_TRANSACTIONDESC_H\n \n+#include <qt/bitcoinunits.h>\n+\n #include <QObject>\n #include <QString>\n \n@@ -24,7 +26,7 @@ class TransactionDesc: public QObject\n     Q_OBJECT\n \n public:\n-    static QString toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit);\n+    static QString toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord* rec, BitcoinUnit unit);\n \n private:\n     TransactionDesc() {}"
      },
      {
        "sha": "5416e5c3b81d82dc115a8199738efbd31c97c6bf",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -5,6 +5,7 @@\n #include <qt/transactiontablemodel.h>\n \n #include <qt/addresstablemodel.h>\n+#include <qt/bitcoinunits.h>\n #include <qt/clientmodel.h>\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n@@ -195,7 +196,7 @@ class TransactionTablePriv\n         return nullptr;\n     }\n \n-    QString describe(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit)\n+    QString describe(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord* rec, BitcoinUnit unit)\n     {\n         return TransactionDesc::toHTML(node, wallet, rec, unit);\n     }"
      },
      {
        "sha": "146c9dd65cc9a65893fbdd513e160232ac7c75ce",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_WALLETVIEW_H\n \n #include <amount.h>\n+#include <qt/bitcoinunits.h>\n \n #include <QStackedWidget>\n \n@@ -125,7 +126,7 @@ public Q_SLOTS:\n     /** HD-Enabled status of wallet changed (only possible during startup) */\n     void hdEnabledStatusChanged();\n     /** Notify that a new transaction appeared */\n-    void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label, const QString& walletName);\n+    void incomingTransaction(const QString& date, BitcoinUnit unit, const CAmount& amount, const QString& type, const QString& address, const QString& label, const QString& walletName);\n     /** Notify that the out of sync warning icon has been pressed */\n     void outOfSyncWarningClicked();\n };"
      }
    ]
  },
  {
    "sha": "86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjM1N2YxODUxZTgyMTFjZDc1NTFjZDZiZDdlNmU2ZTY5ZThkYmYy",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-07-10T09:08:19Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-13T13:48:04Z"
      },
      "message": "refactor: Remove BitcoinUnits::valid() function\n\nSince BitcoinUnits::Unit became a scoped enum, BitcoinUnits::valid()\ngets needless.",
      "tree": {
        "sha": "5627001777036d8f4cb2a1c849e3bc6e9b5ec07b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5627001777036d8f4cb2a1c849e3bc6e9b5ec07b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl81RJQACgkQQQEIES5+\nqB+xhA/+Nq8gqlZwi7RSF7aYJWuED8pb3psnnq6ztNftQIjua828+IO2LWymKrPa\npCQD6sfwe8uD5/bV2GwhXCIu7e+f6/OEMgOFAOJcgYOb3esw99V1d9n5bqd+Tr/x\n2wuPd+RXt0rpur6Aqc12Nm3R7Y99mkCFE20MD7eOsKlTR3vM7qb1HoKJ1wpeMG72\nnnFYUyZuSAOxJJcxlRy7C9HME8Qq0x3oTkrLQcFAHwa4GRzBq9J0wARZ8D/KwNCU\nmBI/H0Ozs/8LxlEKVVvpGl5yHD08yJLE2iQfU3Yb7F1dyRWf72UtlFhNTfZ/yGvu\neOPPkZgDBIUhh0kxTI47NJeEEIicnx8iIsfFbzLh98aZnDozqV9dzlQtKzlIyHmN\n5Ju+Y61KF2XdSNYp7SlwYlrtNw3ATiGOueSPpVynMWBMAS4473XPgoz+rFNSUDx5\n8OmVBAdmyHHQJQGiWKYLZ7Ti32hk1wN41wk+lwL+xaL7oob9zyIygM5Cn4j3ye95\nSrnoCPYeRURifr7lBWGM3v7O20JOF3Sj0UFO16MnuT27MGqHtx2aTgX1mt9uPw9i\n0ChOVZuGKQX1lNdM/wjB+pK7aWlMbJcbcvY8I7FpR5Pcb7ReAwhyvcfJWbIyKZ1T\n3IfVXlOTfkKanAulSd25UFyUXzHmy7vKQzwWtOfuYZSjp7xiyKA=\n=gUAf\n-----END PGP SIGNATURE-----",
        "payload": "tree 5627001777036d8f4cb2a1c849e3bc6e9b5ec07b\nparent 8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1594372099 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1597326484 +0300\n\nrefactor: Remove BitcoinUnits::valid() function\n\nSince BitcoinUnits::Unit became a scoped enum, BitcoinUnits::valid()\ngets needless.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d9817b1142505a1a99c5bc5b5b69f28a0b5ca10"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 4,
      "deletions": 27
    },
    "files": [
      {
        "sha": "e13741940b80e6343e71f957a5ee5d698ca5ad7d",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 23,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2",
        "patch": "@@ -24,20 +24,6 @@ QList<BitcoinUnit> BitcoinUnits::availableUnits()\n     return unitlist;\n }\n \n-bool BitcoinUnits::valid(Unit unit)\n-{\n-    switch(unit)\n-    {\n-    case Unit::BTC:\n-    case Unit::mBTC:\n-    case Unit::uBTC:\n-    case Unit::SAT:\n-        return true;\n-    default:\n-        return false;\n-    }\n-}\n-\n QString BitcoinUnits::longName(Unit unit)\n {\n     switch(unit)\n@@ -100,8 +86,6 @@ QString BitcoinUnits::format(Unit unit, const CAmount& nIn, bool fPlus, Separato\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n-    if(!valid(unit))\n-        return QString(); // Refuse to format invalid unit\n     qint64 n = (qint64)nIn;\n     qint64 coin = factor(unit);\n     int num_decimals = decimals(unit);\n@@ -167,8 +151,9 @@ QString BitcoinUnits::formatWithPrivacy(Unit unit, const CAmount& amount, Separa\n \n bool BitcoinUnits::parse(Unit unit, const QString& value, CAmount* val_out)\n {\n-    if(!valid(unit) || value.isEmpty())\n+    if (value.isEmpty()) {\n         return false; // Refuse to parse invalid unit or empty string\n+    }\n     int num_decimals = decimals(unit);\n \n     // Ignore spaces and thin spaces when parsing\n@@ -206,12 +191,7 @@ bool BitcoinUnits::parse(Unit unit, const QString& value, CAmount* val_out)\n \n QString BitcoinUnits::getAmountColumnTitle(Unit unit)\n {\n-    QString amountTitle = QObject::tr(\"Amount\");\n-    if (BitcoinUnits::valid(unit))\n-    {\n-        amountTitle += \" (\"+BitcoinUnits::shortName(unit) + \")\";\n-    }\n-    return amountTitle;\n+    return QObject::tr(\"Amount\") + \" (\" + shortName(unit) + \")\";\n }\n \n int BitcoinUnits::rowCount(const QModelIndex &parent) const"
      },
      {
        "sha": "d466c1188743e7186244781eb678343a312a6cdf",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2",
        "patch": "@@ -47,8 +47,7 @@ class BitcoinUnits: public QAbstractListModel\n     };\n     Q_ENUM(Unit)\n \n-    enum class SeparatorStyle\n-    {\n+    enum class SeparatorStyle {\n         NEVER,\n         STANDARD,\n         ALWAYS\n@@ -60,8 +59,6 @@ class BitcoinUnits: public QAbstractListModel\n \n     //! Get list of units, for drop-down box\n     static QList<Unit> availableUnits();\n-    //! Is unit ID valid?\n-    static bool valid(Unit unit);\n     //! Long name\n     static QString longName(Unit unit);\n     //! Short name"
      }
    ]
  },
  {
    "sha": "243205f85b8b10e4f43865557cdd8ea3aa71c380",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDMyMDVmODViOGIxMGU0ZjQzODY1NTU3Y2RkOGVhM2FhNzFjMzgw",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-07-10T09:08:34Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-08-13T13:48:04Z"
      },
      "message": "refactor: Remove default cases for scoped enum",
      "tree": {
        "sha": "d08c704483f44b8abf280698dc50ef96c98adc8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d08c704483f44b8abf280698dc50ef96c98adc8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/243205f85b8b10e4f43865557cdd8ea3aa71c380",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl81RJQACgkQQQEIES5+\nqB/aPw//cAEyYGybjKhGZ6Ar6bcnZe1ZWdKrJLun9OoRgkf/l/pBdHvsGnNB0JRF\nauA65kENTxvsa45MSe+RX8l0OnKLejLOPl6DRIy8c8xhqZf//rkmtqDzqEv+dyoG\nsGkbesBPsVOUzDQD6B9mv0hIeOlvmGedxC0TSiU8koFNOAQf8//4pgrGVvCfcH4K\niF0Uurlz3b8HdRu5gzWHVDvyAPFcVGc3eGcf/nzT3V9xJ62dtZzpwNO/asmV7vxJ\nvysTwNyYBvfX1B9+VuCNW5n7WhR+3e8vwYfA/3Y+YeGQapDb/uftSBBAcFj0C3yP\nyYj57qBefLm3DaYljdIXrSU+ieot5ZIfZD7NCPkWEFZvZOyKeTCVhAfHB5UWcZ29\nw5G4Ot+u6lwK74ILFR6Igd1gBLUpBziNQ5N+vY+NA0KlJXJMfRU/0Qu5g8dsNHXB\nJcI6cPo/BRKtkaLmSYhFUMsH6cx1jH7rHERjfB/k8HdVc0i7xX9qqyrQMIwKACLE\naIODyotGnEmFSHH4gI35GkOpMVmija+ZOHgTXIZAy3zROdPiVw2BjmPBKVDwaBWD\nE70nK0t+xPoGlJQrAiMCZ34Csg0M216TfyDOCiVZC4t7cSF/pxail3socNiBGmPP\nd+QY9b8/P8/I5wWbboFJ0Q/g90TqeMNK5dkq/JyRq1cjoJS0cLI=\n=wD09\n-----END PGP SIGNATURE-----",
        "payload": "tree d08c704483f44b8abf280698dc50ef96c98adc8d\nparent 86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1594372114 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1597326484 +0300\n\nrefactor: Remove default cases for scoped enum\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/243205f85b8b10e4f43865557cdd8ea3aa71c380",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/243205f85b8b10e4f43865557cdd8ea3aa71c380",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/243205f85b8b10e4f43865557cdd8ea3aa71c380/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86357f1851e8211cd7551cd6bd7e6e6e69e8dbf2"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 18,
      "deletions": 21
    },
    "files": [
      {
        "sha": "b6f3ef5c0c48926c8959be6d5789784e40804c1e",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 21,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/243205f85b8b10e4f43865557cdd8ea3aa71c380/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/243205f85b8b10e4f43865557cdd8ea3aa71c380/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=243205f85b8b10e4f43865557cdd8ea3aa71c380",
        "patch": "@@ -26,60 +26,57 @@ QList<BitcoinUnit> BitcoinUnits::availableUnits()\n \n QString BitcoinUnits::longName(Unit unit)\n {\n-    switch(unit)\n-    {\n+    switch (unit) {\n     case Unit::BTC: return QString(\"BTC\");\n     case Unit::mBTC: return QString(\"mBTC\");\n     case Unit::uBTC: return QString::fromUtf8(\"\u00b5BTC (bits)\");\n     case Unit::SAT: return QString(\"Satoshi (sat)\");\n-    default: return QString(\"???\");\n-    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n QString BitcoinUnits::shortName(Unit unit)\n {\n-    switch(unit)\n-    {\n-    case Unit::uBTC: return QString::fromUtf8(\"bits\");\n+    switch (unit) {\n+    case Unit::BTC: return longName(unit);\n+    case Unit::mBTC: return longName(unit);\n+    case Unit::uBTC: return QString(\"bits\");\n     case Unit::SAT: return QString(\"sat\");\n-    default: return longName(unit);\n-    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n QString BitcoinUnits::description(Unit unit)\n {\n-    switch(unit)\n-    {\n+    switch (unit) {\n     case Unit::BTC: return QString(\"Bitcoins\");\n     case Unit::mBTC: return QString(\"Milli-Bitcoins (1 / 1\" THIN_SP_UTF8 \"000)\");\n     case Unit::uBTC: return QString(\"Micro-Bitcoins (bits) (1 / 1\" THIN_SP_UTF8 \"000\" THIN_SP_UTF8 \"000)\");\n     case Unit::SAT: return QString(\"Satoshi (sat) (1 / 100\" THIN_SP_UTF8 \"000\" THIN_SP_UTF8 \"000)\");\n-    default: return QString(\"???\");\n-    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n qint64 BitcoinUnits::factor(Unit unit)\n {\n-    switch(unit)\n-    {\n+    switch (unit) {\n     case Unit::BTC: return 100000000;\n     case Unit::mBTC: return 100000;\n     case Unit::uBTC: return 100;\n     case Unit::SAT: return 1;\n-    default: return 100000000;\n-    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n int BitcoinUnits::decimals(Unit unit)\n {\n-    switch(unit)\n-    {\n+    switch (unit) {\n     case Unit::BTC: return 8;\n     case Unit::mBTC: return 5;\n     case Unit::uBTC: return 2;\n     case Unit::SAT: return 0;\n-    default: return 0;\n-    }\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n \n QString BitcoinUnits::format(Unit unit, const CAmount& nIn, bool fPlus, SeparatorStyle separators, bool justify)"
      }
    ]
  }
]