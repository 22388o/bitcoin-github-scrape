[
  {
    "sha": "1cce4391204876539c34d769495af970d1781d70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2NlNDM5MTIwNDg3NjUzOWMzNGQ3Njk0OTVhZjk3MGQxNzgxZDcw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-15T23:24:26Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-08-20T23:07:03Z"
      },
      "message": "Optimizations: Consensus: In main::AcceptToMemoryPool, main::ConnectBlock, and miner::CreateNewBlock and\n\nIn all of them, reject transactions creating new money earlier.\nConsensus::CheckTxInputs gets nTxFee as output parameter and is separated from main::CheckInputs [renamed CheckInputsScripts]\n\n- Consensus::CheckTxInputs (called by the rest):\n\nDon't calculate nValueOut twice\nDon't check nFees < 0 twice\n\n- main::AcceptToMemoryPool:\n\nDon't call CCoinsViewCache::HaveInputs twice\nDon't calculate nValueIn 3 times\nDon't calculate nValueOut 5 times\n\n- miner::CreateNewBlock:\n\nDon't call CCoinsViewCache::HaveInputs twice\nDon't calculate nValueIn twice\nDon't calculate nValueOut 3 times\n\n- main::ConnectBlock:\n\nStill call CCoinsViewCache::HaveInputs twice\nDon't calculate nValueIn twice\nDon't calculate nValueOut 3 times",
      "tree": {
        "sha": "4706f08a0fd0ba7334cd07f9711ee151d6c2122f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4706f08a0fd0ba7334cd07f9711ee151d6c2122f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cce4391204876539c34d769495af970d1781d70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cce4391204876539c34d769495af970d1781d70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cce4391204876539c34d769495af970d1781d70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cce4391204876539c34d769495af970d1781d70/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f13ddc54142788261e3e0a16386cfcefb9bdc5"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 58,
      "deletions": 49
    },
    "files": [
      {
        "sha": "a6301d700f20035982a4bc9ed6ee742a8e886105",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cce4391204876539c34d769495af970d1781d70/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cce4391204876539c34d769495af970d1781d70/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=1cce4391204876539c34d769495af970d1781d70",
        "patch": "@@ -6,11 +6,34 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include \"amount.h\"\n+\n+class CCoinsViewCache;\n+class CTransaction;\n+class CValidationState;\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n+/**\n+ * Consensus validations:\n+ * Check_ means checking everything possible with the data provided\n+ * (that has not been checked in previous cheaper functions for the same data structure).\n+ * Verify_ means all data provided was enough for this level and its \"consensus-verified\".\n+ */\n+namespace Consensus {\n+\n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * Preconditions: tx.IsCoinBase() is false.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& nTxFee);\n+\n+} // namespace Consensus\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "2b875e8ac4ca484b9ddf3b251cb29b6c9ba4f7b0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 40,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cce4391204876539c34d769495af970d1781d70/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cce4391204876539c34d769495af970d1781d70/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1cce4391204876539c34d769495af970d1781d70",
        "patch": "@@ -825,8 +825,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     {\n         CCoinsView dummy;\n         CCoinsViewCache view(&dummy);\n-\n-        CAmount nValueIn = 0;\n         {\n         LOCK(pool.cs);\n         CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n@@ -847,19 +845,17 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             }\n         }\n \n-        // are the actual inputs available?\n-        if (!view.HaveInputs(tx))\n-            return state.Invalid(false, REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n-\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n         }\n \n+        CAmount nFees;\n+        if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nFees))\n+            return error(\"%s: Consensus::CheckTxInputs: %s\", __func__, state.GetRejectReason());\n+\n         // Check for non-standard pay-to-script-hash in inputs\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n@@ -875,10 +871,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n                 strprintf(\"%d > %d\", nSigOps, MAX_STANDARD_TX_SIGOPS));\n \n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n-\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n@@ -923,7 +916,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n+        if (!CheckInputsScripts(tx, state, view, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n             return false;\n \n         // Check again against just the consensus-critical mandatory script\n@@ -935,11 +928,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // There is a similar check in CreateNewBlock() to prevent creating\n         // invalid blocks, however allowing such transactions into the mempool\n         // can be exploited as a DoS attack.\n-        if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n-        {\n+        if (!CheckInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n             return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s, %s\",\n                 __func__, hash.ToString(), FormatStateMessage(state));\n-        }\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, !IsInitialBlockDownload());\n@@ -1293,15 +1284,14 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n }\n \n namespace Consensus {\n-bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& nTxFee)\n {\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n+            return state.Invalid(false, REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n \n         CAmount nValueIn = 0;\n-        CAmount nFees = 0;\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n         {\n             const COutPoint &prevout = tx.vin[i].prevout;\n@@ -1323,28 +1313,24 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n \n         }\n \n-        if (nValueIn < tx.GetValueOut())\n+        // Tally transaction fees\n+        CAmount nValueOut = tx.GetValueOut();\n+        if (nValueIn < nValueOut)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n-                strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n+                strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(nValueOut)));\n \n-        // Tally transaction fees\n-        CAmount nTxFee = nValueIn - tx.GetValueOut();\n-        if (nTxFee < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n-        nFees += nTxFee;\n-        if (!MoneyRange(nFees))\n+        nTxFee = nValueIn - nValueOut;\n+        if (!MoneyRange(nTxFee))\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+\n     return true;\n }\n }// namespace Consensus\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputsScripts(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {\n-        if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n-            return false;\n-\n         if (pvChecks)\n             pvChecks->reserve(tx.vin.size());\n \n@@ -1355,7 +1341,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // Skip ECDSA signature verification when connecting blocks\n         // before the last block chain checkpoint. This is safe because block merkle hashes are\n         // still computed and checked, and any change will be caught at the next checkpoint.\n-        if (fScriptChecks) {\n             for (unsigned int i = 0; i < tx.vin.size(); i++) {\n                 const COutPoint &prevout = tx.vin[i].prevout;\n                 const CCoins* coins = inputs.AccessCoins(prevout.hash);\n@@ -1389,7 +1374,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                     return state.DoS(100,false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n                 }\n             }\n-        }\n     }\n \n     return true;\n@@ -1760,10 +1744,15 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n         if (!tx.IsCoinBase())\n         {\n-            if (!view.HaveInputs(tx))\n+            if (!view.HaveInputs(tx)) // Redundant check with different DoS score\n                 return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n+            CAmount nTxFees;\n+            if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nTxFees))\n+                return error(\"%s: Consensus::CheckTxInputs on %s: %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n+            nFees += nTxFees;\n+\n             if (fStrictPayToScriptHash)\n             {\n                 // Add in sigops done by pay-to-script-hash inputs;\n@@ -1775,13 +1764,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                                      REJECT_INVALID, \"bad-blk-sigops\");\n             }\n \n-            nFees += view.GetValueIn(tx)-tx.GetValueOut();\n-\n-            std::vector<CScriptCheck> vChecks;\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n-                return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n-                    tx.GetHash().ToString(), FormatStateMessage(state));\n-            control.Add(vChecks);\n+            if (fScriptChecks) {\n+                std::vector<CScriptCheck> vChecks;\n+                if (!CheckInputsScripts(tx, state, view, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n+                    return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n+                                 tx.GetHash().ToString(), FormatStateMessage(state));\n+                control.Add(vChecks);\n+            }\n         }\n \n         CTxUndo undoDummy;"
      },
      {
        "sha": "72f7477610247d5b7f0cb576fbddd89843b9cf26",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cce4391204876539c34d769495af970d1781d70/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cce4391204876539c34d769495af970d1781d70/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1cce4391204876539c34d769495af970d1781d70",
        "patch": "@@ -277,7 +277,7 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& ma\n  * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n  * instead of being performed inline.\n  */\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks,\n+bool CheckInputsScripts(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view,\n                  unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);\n \n /** Apply the effects of this transaction on the UTXO set represented by view */"
      },
      {
        "sha": "c2a883947bdf726564155a7e6b31649a71ef2a6d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cce4391204876539c34d769495af970d1781d70/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cce4391204876539c34d769495af970d1781d70/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=1cce4391204876539c34d769495af970d1781d70",
        "patch": "@@ -102,6 +102,7 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n     const CChainParams& chainparams = Params();\n+    CValidationState state;\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n@@ -276,20 +277,18 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n             }\n \n-            if (!view.HaveInputs(tx))\n+            CAmount nTxFees;\n+            if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nTxFees))\n                 continue;\n \n-            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n-\n             nTxSigOps += GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n             // Note that flags: we don't want to set mempool/IsStandard()\n             // policy here, but we still have to ensure that the block we\n             // create only contains transactions that are valid in new blocks.\n-            CValidationState state;\n-            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+            if (!CheckInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n                 continue;\n \n             UpdateCoins(tx, state, view, nHeight);"
      },
      {
        "sha": "9966eab08bc5bdbb4e2b8bb69d50b6468cfbd47e",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cce4391204876539c34d769495af970d1781d70/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cce4391204876539c34d769495af970d1781d70/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=1cce4391204876539c34d769495af970d1781d70",
        "patch": "@@ -34,7 +34,7 @@ extern unsigned nMaxDatacarrierBytes;\n  * but in the future other flags may be added, such as a soft-fork to enforce\n  * strict DER encoding.\n  * \n- * Failing one of these tests may trigger a DoS ban - see CheckInputs() for\n+ * Failing one of these tests may trigger a DoS ban - see CheckInputsScripts() for\n  * details.\n  */\n static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;"
      },
      {
        "sha": "4e664199ad1fa5213605d3fda045090e35cb8775",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cce4391204876539c34d769495af970d1781d70/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cce4391204876539c34d769495af970d1781d70/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=1cce4391204876539c34d769495af970d1781d70",
        "patch": "@@ -275,7 +275,6 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             waitingOnDependants.push_back(&it->second);\n         else {\n             CValidationState state;\n-            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n             UpdateCoins(tx, state, mempoolDuplicate, 1000000);\n         }\n     }\n@@ -289,7 +288,6 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             stepsSinceLastRemove++;\n             assert(stepsSinceLastRemove < waitingOnDependants.size());\n         } else {\n-            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, NULL));\n             UpdateCoins(entry->GetTx(), state, mempoolDuplicate, 1000000);\n             stepsSinceLastRemove = 0;\n         }"
      }
    ]
  }
]