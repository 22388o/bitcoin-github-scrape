fanquake,2018-11-25T23:28:47Z,"@hebasto Can you also link to #14058 from the PR description, as that is the issue #14072 was solving.",https://github.com/bitcoin/bitcoin/pull/14803#issuecomment-441483714,441483714,
hebasto,2018-11-25T23:32:16Z,@fanquake Done.,https://github.com/bitcoin/bitcoin/pull/14803#issuecomment-441483944,441483944,
gmaxwell,2018-11-26T02:01:46Z,"Thanks for working on this.\n\nSimply making the check flag atomic doesn't really seem correct to me-- why would we be checking the same block object twice concurrently?  Just making the test atomic prevents the that particular bit of UB but it doesn't mean that there isn't wasted work, or even the potential of a deadlock.\n\nCan someone please summarize how the same block can get checked in p",https://github.com/bitcoin/bitcoin/pull/14803#issuecomment-441497316,441497316,
DrahtBot,2018-11-26T02:44:29Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14829](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14829.html) (travis: Enable functional tests in the Thre",https://github.com/bitcoin/bitcoin/pull/14803#issuecomment-441503000,441503000,
promag,2018-11-26T11:49:13Z,"I agree with @gmaxwell, why make data structure thread safe?\n\nBeside, `CBlock::operator=` doesn't look thread safe to me, can't `m_checked` change between load and store?",https://github.com/bitcoin/bitcoin/pull/14803#issuecomment-441612405,441612405,
MarcoFalke,2018-11-26T17:28:31Z,"The race happens because we run 10 threads in parallel that check 1000 random blocks in sequence. With only about 100 blocks in total, it is unlikely that every thread picks blocks that have not yet been picked by another thread.\nSo I think there are at least two alternative solutions:\n\n* Assume that we only ever call `ProcessNewBlock` for each block once, so we'd rewrite the unit test to no",https://github.com/bitcoin/bitcoin/pull/14803#issuecomment-441725508,441725508,
promag,2018-11-26T17:37:06Z,I think 2nd option is the most reasonable.,https://github.com/bitcoin/bitcoin/pull/14803#issuecomment-441728415,441728415,
sipa,2018-11-26T18:09:30Z,"My preference is avoid adding synchronization primitives to structures that don't need it. Here it seems the case that the validation logic doesn't actually supported multi-threaded block validation, but the unit tests verify (a small) part of it regardless. That seems overkill. ",https://github.com/bitcoin/bitcoin/pull/14803#issuecomment-441739553,441739553,
MarcoFalke,2018-11-26T20:27:30Z,"If it doesn't support multi-threaded block validation, it should still be fixed to avoid multiple threads calling it at the same time, because that is a thing that can happen in practice with the rpc thread running along the ""main thread"".",https://github.com/bitcoin/bitcoin/pull/14803#issuecomment-441785930,441785930,
gmaxwell,2018-11-27T21:58:57Z,"It doesn't support multithreaded validation and there are lot of things that prevent that, which is why I was concerned.  Why doesn't the lock on the block index or even cs main prevent concurrency here?\n\nI'd missed that the original case was a unit test.",https://github.com/bitcoin/bitcoin/pull/14803#issuecomment-442233211,442233211,
MarcoFalke,2018-11-27T22:12:27Z,"> Why doesn't the lock on the block index or even cs main prevent concurrency here?\n\nThe cs main lock was moved down in this change ""Harden against mistakes handling invalid blocks"" #9765  by @sdaftuar \n\nSo unless there was a reason to not put it before `CheckBlock`, I suggest to move it up by one line.\n",https://github.com/bitcoin/bitcoin/pull/14803#issuecomment-442237566,442237566,
