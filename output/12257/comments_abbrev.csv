luke-jr,2018-01-24T07:52:03Z,"It doesn't avoid reuse (you still need to sign for each input), and has security issues in the event of QC (but that's already a hypothetical big issue for us anyway), but seems useful anyway.\n\nIs this affected by the current coin control grouping defect, where it includes change in the same group as unrelated outputs? That would be a serious privacy risk, I think, since it would basically tel",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-360048702,360048702,
kallewoof,2018-01-24T08:07:43Z,"@luke-jr:\n> It doesn't avoid reuse (you still need to sign for each input), and has security issues in the event of QC (but that's already a hypothetical big issue for us anyway), but seems useful anyway.\n\nTogether with `-avoidreuse` in #10386 it avoids reuse, I think. Are there any cases I'm missing?\n\n> Is this affected by the current coin control grouping defect, where it includes chan",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-360051914,360051914,
ziggamon,2018-01-24T10:49:06Z,"Does this also keep track of the change outputs in case more coins arrive later to `A`?\n\nImagine your example, where the coins from `A` go to `C`, with a change output to what we now call `D`.\n\nIf more coins arrive at `A` later, will they be spent together with `D`?\n",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-360092824,360092824,
kallewoof,2018-01-24T12:18:05Z,"@ziggamon Change outputs will go to a different destination so they will be considered separate from their inputs. In other words, `D` in your case will not be considered related to `A` in this case, and will not be associated with any coins arriving at `A` afterwards.",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-360113119,360113119,
NicolasDorier,2018-01-30T13:47:27Z,"Some notes I am leaving here but to think about:\n\n* Making it default is the right way, but we should keep in mind that people relying on address reuse will pay way higher fee, so they need to be notified appropriately.\nVirtually all japanese exchanges are using address reuse (1 address per customer), this change would impact them a lot. I am unsure if they depend on Bitcoin Core Wallet thou",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-361597920,361597920,
kallewoof,2018-01-31T01:52:54Z,"@NicolasDorier \n> Making it default is the right way, but we should keep in mind that people relying on address reuse will pay way higher fee, so they need to be notified appropriately.\n\nI think keeping it off by default for now is reasonable, until we get enough of an idea of the general consensus among people. I suspect, though, that most people won't care, as long as it doesn't give overl",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-361797462,361797462,
kallewoof,2018-02-27T06:16:50Z,"I added `coincontrol.cpp` and moved `SetNull` into it, setting it to the default given in `DEFAULT_AVOIDPARTIALSPENDS`. This cleans up use as it is always a bool with an up-to-date value even when default is used.",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-368759789,368759789,
laanwj,2018-03-05T20:08:55Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-370547626,370547626,
NicolasDorier,2018-03-07T14:40:48Z,"Code Review ACK, though it would be nice to have the remaining TODO in the test done.\n\nI am also wondering potential performance problem for wallet with lots of UTXOs. I already heard complaints that core was getting quite slow at doing transactions when for big wallets. (though this could be worked around by asking people to turn on `avoidpartialspends`)",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-371159249,371159249,
kallewoof,2018-03-07T15:39:25Z,"> I am also wondering potential performance problem for wallet with lots of UTXOs. I already heard complaints that core was getting quite slow at doing transactions when for big wallets. (though this could be worked around by asking people to turn on avoidpartialspends)\n\nI think wallets with a ton of outputs would want to use avoidpartialspends as it would affect them minimally fee-wise, and i",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-371179101,371179101,
kallewoof,2018-03-15T10:17:03Z,I rebased this on top of the new coin selection algorithm.,https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-373327079,373327079,
kallewoof,2018-05-10T02:01:37Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-387928694,387928694,
kallewoof,2018-06-12T06:27:16Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-396479607,396479607,
kallewoof,2018-07-02T05:38:18Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-401677390,401677390,
kallewoof,2018-07-17T10:18:28Z,"Rebased and addressed all nits except [@sipa's request to move the 'try avoiding' part into SelectCoins](https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202492813): I cannot access fees easily, since select coins handles sets of coins, rather than transactions. It may be reasonable to switch to simply using 'number of inputs' rather than 'absolute fee', in which case this can be moved to",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-405533415,405533415,
kallewoof,2018-07-18T02:31:50Z,"(mostly @sipa) The policy change in 750db05 is actually a necessary part of the algorithm, so it was re-added. Consider sending 1.1 btc from this utxo set:\n* 1.0 btc to A\n* 0.3 btc to A\n* 0.2 btc to B\n* 1.0 btc to C\n\nThe implementation change will see three ""coins"": A (1.3 btc), B (0.2), and C (1.0). It will see A as 'lowest larger', and not use it, because sum(B:C) can cover the payme",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-405789226,405789226,
sipa,2018-07-18T02:47:34Z,"@kallewoof I understand your argument that it may be desirable, but I don't understand why it is necessary.\n\nHow is it different from a scenario in the existing code where there are only 3 UTXOs (with sizes 1.3 BTC, 0.2 BTC, and 1 BTC)?",https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-405791570,405791570,
kallewoof,2018-07-18T03:40:55Z,After discussing with @sipa (and after realizing this only applies to the knapsack solver which is intended to be removed in the near future) I removed the policy change again.,https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-405799152,405799152,
gmaxwell,2018-07-18T17:32:42Z,ACK,https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-406012652,406012652,
laanwj,2018-07-24T13:33:57Z,utACK 232f96f5c8a3920c09db92f4dbac2ad7d10ce8cf,https://github.com/bitcoin/bitcoin/pull/12257#issuecomment-407408225,407408225,
NicolasDorier,2018-01-30T13:42:21Z,"I think this is avoidable complexity, because `avoidpartial` will be always higher fees.\nI think it is OK, you pay fee for privacy, while giving incentive to privacy over fee by default.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r164743943,164743943,src/wallet/wallet.cpp
NicolasDorier,2018-01-30T13:53:06Z,"I think `coinControl->m_avoid_partial_spends` should be a boolean, and `coinControl` should set its value based on the arg `avoidpartialspends` just after being created. (At worse, just before this call for now)\n\nThis will make the code easier to reason about.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r164746945,164746945,src/wallet/wallet.cpp
NicolasDorier,2018-01-30T13:56:10Z,what about `std::optional<bool>` ?,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r164747804,164747804,src/wallet/coincontrol.h
MarcoFalke,2018-01-30T14:19:01Z, (since C++17) ðŸ˜› ,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r164754352,164754352,src/wallet/coincontrol.h
NicolasDorier,2018-01-30T14:31:12Z,Ah I forgot we were using boost for that... I would still prefer boost than a short though.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r164757918,164757918,src/wallet/coincontrol.h
kallewoof,2018-01-31T01:47:45Z,"Actually `avoidpartial` gives the same fee a lot of the times, from what I've seen so far. It depends on your utxo set, of course.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r164934280,164934280,src/wallet/wallet.cpp
kallewoof,2018-01-31T01:49:08Z,"Unfortunately that means either adding a coincontrol.cpp file and moving the constructor there, or adding a dependency on the `gArg` thing in `coincontrol.h`, which seems a bit overkill just for this. I'm very open to suggestions though; the short thing is an undesired hack.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r164934469,164934469,src/wallet/wallet.cpp
NicolasDorier,2018-01-31T15:26:34Z,"I am unsure yet, but I think you can make the diff way smaller by keeping the old signature of this method and building the `OutputGroup` at the scope (local variable) of this function only.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r165086889,165086889,src/wallet/wallet.cpp
kallewoof,2018-02-01T04:42:16Z,This method doesn't know whether you want single or grouped as it doesn't have coincontrol. Would have to add a bool for that at least. Not sure it'll become smaller though. It'll just move code around.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r165258739,165258739,src/wallet/wallet.cpp
NicolasDorier,2018-02-01T08:24:12Z,"So the way I did it with NBitcoin is to keep the concept of group internal to only the method which does coin packing.\n\nIf grouping is deactivated, I group by random, that way there is a single code path for everything.\n\nI think it is a way smaller code change because all consumer of `SelectCoinsMinConf` do not have to change (you can make the `bool` default to `false` to keep original beh",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r165284475,165284475,src/wallet/wallet.cpp
NicolasDorier,2018-02-05T08:05:49Z,would say `Privacy is improved as an address...`,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r165901799,165901799,doc/man/bitcoind.1
kallewoof,2018-02-05T08:09:14Z,Changed,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r165902270,165902270,doc/man/bitcoind.1
kallewoof,2018-02-13T03:35:41Z,I discussed with @NicolasDorier and we concluded that the current way this is done is okay (NBitcoin does it differently so it made sense there).,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r167753546,167753546,src/wallet/wallet.cpp
kallewoof,2018-02-23T07:34:47Z,Changed to using a `boost::optional`.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r170182753,170182753,src/wallet/coincontrol.h
luke-jr,2018-02-27T02:38:10Z,"""by key"". Outputs don't have addresses.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r170800643,170800643,src/init.cpp
luke-jr,2018-02-27T02:45:21Z,Seems this would be better as a method on CCoinControl...,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r170801487,170801487,src/wallet/wallet.cpp
kallewoof,2018-02-27T04:50:33Z,"Coin control needs `gArgs` in that case, and currently there is no `.cpp` file so it'd have to be included in the header.\n\nI'm actually starting to think maybe coin control could use a `.cpp` file...",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r170814766,170814766,src/wallet/wallet.cpp
kallewoof,2018-02-27T04:54:36Z,"I see what you're saying, but in this case I think 'address' is fine; we speak of address reuse, after all. While outputs themselves don't have addresses, the funding to each output was done to a specific address; if that address was the same, then this PR will group them together.\n\nMaybe `Group outputs by key (address), selecting all or...` would be fine, though?",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r170815179,170815179,src/init.cpp
luke-jr,2018-02-28T02:22:33Z,"Also, this should be in `wallet/init`",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r171127972,171127972,src/init.cpp
luke-jr,2018-02-28T02:24:07Z,"Similarly, in `wallet/wallet.h`",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r171128124,171128124,src/validation.h
luke-jr,2018-02-28T04:33:19Z,"Change from uint64_t max to int64_t max should be documented somewhere, probably done alone in a separate bugfix commit.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r171141289,171141289,src/wallet/wallet.cpp
luke-jr,2018-02-28T04:39:25Z,This policy change should be documented in the commit message.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r171141879,171141879,src/wallet/wallet.cpp
kallewoof,2018-02-28T05:52:04Z,Moved,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r171148885,171148885,src/init.cpp
kallewoof,2018-02-28T05:52:23Z,"Split into its own commit, and documented change in commit message.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r171148934,171148934,src/wallet/wallet.cpp
kallewoof,2018-02-28T05:52:36Z,"Split into its own commit, and documented policy change.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r171148962,171148962,src/wallet/wallet.cpp
NicolasDorier,2018-03-07T14:06:35Z,As we discussed you might not need `&&` because you can pass temporary object to the function with `const Tsrc&`,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r172851205,172851205,src/util.h
NicolasDorier,2018-03-07T14:11:48Z,"nit: You don't have to do this, but I think it would be better if this commit was self contained, as now the clients of `TransactionWithinChainLimit` are not compiling anymore. To verify your change is valid we need to check other commits later. This make it harder to review.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r172852831,172852831,src/txmempool.cpp
achow101,2018-04-11T16:53:45Z,Shouldn't this change be part of 27872fa1cf4f7ca5e0c136554078448dc7f92d1d?,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r180825503,180825503,src/wallet/wallet.cpp
kallewoof,2018-04-12T00:53:46Z,Yes! Thanks for noticing.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r180939016,180939016,src/wallet/wallet.cpp
sipa,2018-07-13T23:06:45Z,Const rvalue references aren't very useful.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202492032,202492032,src/wallet/wallet.h
sipa,2018-07-13T23:08:00Z,Can you avoid this cyclic module dependency (between coinselection and wallet) by moving `OutputGroup` to coinselection.h?,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202492161,202492161,src/wallet/coinselection.cpp
sipa,2018-07-13T23:14:20Z,"Can this branching for avoid_partial_spends on/off be done in `CWallet::SelectCoins` (where all different combinations of confirmation levels and depth limits are tried), instead of creating a second place of iterating through things?",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202492813,202492813,src/wallet/wallet.cpp
sipa,2018-07-13T23:14:59Z,"This feels like a completely unrelated change to the coin selection algorithm. If it's useful, I'd like to see simulation results first, and even then it's probably better in a separate PR.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202492867,202492867,src/wallet/coinselection.cpp
MarcoFalke,2018-07-14T11:42:33Z,"Generally, we initialize all non-static class members where they are declared. Ensure determinism by avoiding accidental use of uninitialized values. Also, static analyzers balk about this. Initializing the members in the declaration makes it easy to spot uninitialized ones.\n\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#c-data-structures",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202513201,202513201,src/wallet/coincontrol.cpp
MarcoFalke,2018-07-14T11:45:43Z,nit: same for all members here. Can just inline into `CAmount long_term_fee{0};` above to avoid duplication.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202513243,202513243,src/wallet/wallet.h
kallewoof,2018-07-17T05:02:44Z,"`OutputGroup` depends heavily on `COutput`, which is integral to the wallet. I could move it, but it feels like `COutput` doesn't really belong in coin selection.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202894897,202894897,src/wallet/coinselection.cpp
kallewoof,2018-07-17T05:04:18Z,Dropped the relevant commit. I will make a PR once I have simulation results to back the change after merge.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202895072,202895072,src/wallet/coinselection.cpp
sipa,2018-07-17T05:04:57Z,"Why not? See the wallet as a user of the coin selection algorithm, filling in the relevant data in its native data type.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202895135,202895135,src/wallet/coinselection.cpp
sipa,2018-07-17T05:08:31Z,"Oh, I see. COutput contains a CWalletTx. Yeah, no, that doesn't belong in coinselection.\n\nBut why does the coin selection code need access to CWalletTx's?",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202895534,202895534,src/wallet/coinselection.cpp
kallewoof,2018-07-17T05:20:39Z,"It would duplicate the initialization in the `SetNull()` method as well as in the variable declarations. I assume that's okay, then?",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202897077,202897077,src/wallet/coincontrol.cpp
kallewoof,2018-07-17T05:28:24Z,Done,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202897929,202897929,src/wallet/wallet.h
kallewoof,2018-07-17T06:18:42Z,"It needs the `tx->tx->vout[output.i].nValue` and `tx->IsEquivalentTo()` (but can probably work around the latter).\n\nI could replace this with a new struct without the `CWalletTx` reference, if I provided the values, txid, and index, I think.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202904681,202904681,src/wallet/coinselection.cpp
kallewoof,2018-07-17T06:20:23Z,"Actually, I can probably use `CInputCoin` if I keep the value ivar. Will try that.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202904924,202904924,src/wallet/coinselection.cpp
kallewoof,2018-07-17T10:15:37Z,"I would love to, but it relies on absolute fee to determine whether to force-use the avoid partial variant, which is not available in `SelectCoins`.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202967723,202967723,src/wallet/wallet.cpp
kallewoof,2018-07-17T10:24:35Z,`CInputCoin` worked great after some tweakery.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202970162,202970162,src/wallet/coinselection.cpp
kallewoof,2018-07-17T10:26:40Z,"FWIW, because the system tries to avoid spending larger than target if it can, this actually turns out to be a significant part of the algorithm. I've kept it out for now, but I feel that it needs to be in there, or the code will *intentionally* avoid spending reuse-groups.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r202970692,202970692,src/wallet/coinselection.cpp
MarcoFalke,2018-07-17T12:40:39Z,"Ah, sorry. I had missed that `SetNull()` is used in the gui code once.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203004142,203004142,src/wallet/coincontrol.cpp
kallewoof,2018-07-18T03:42:44Z,NP! I am unsure if c942091 should be dropped or if it's a-good to have. Keeping it unless/until someone complains.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203243555,203243555,src/wallet/coincontrol.cpp
sdaftuar,2018-07-18T18:54:15Z,Can you explain why this is taking `std::max`?  I think the correct calculation would involve taking the set of ancestors or descendants of the group and counting the unique entries.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203491824,203491824,src/wallet/coinselection.cpp
sipa,2018-07-18T19:45:54Z,No need for a forward declaration here. wallet/wallet.h already includes wallet/coinselection.h where it is defined.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203505968,203505968,src/wallet/wallet.h
sipa,2018-07-18T19:47:03Z,"If all local variables have a default initialized, you don't need the SetNull call in the constructor anymore.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203506343,203506343,src/wallet/coincontrol.h
sipa,2018-07-18T19:50:50Z,"More efficient: `m_outputs(std::move(outputs))`. The expression 'outputs' here is not an rvalue reference, so this is not automatic.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203507457,203507457,src/wallet/coinselection.h
sipa,2018-07-18T19:54:58Z,What is the forward declare for?,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203508548,203508548,src/wallet/coinselection.h
sipa,2018-07-18T19:58:56Z,That's a really crazy function name. What about `CreateTransactionInternal` or so?,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203509847,203509847,src/wallet/wallet.cpp
kallewoof,2018-07-19T02:37:29Z,"The `descendants` value is already a complete count of all descendants starting from the top ancestor of the transaction in question. Here we only really care about who has the most.\n\nEdit: to explain this further, the behavior should be the same as if the utxo's were selected one at a time; in this case, their individual descendants count would determine their applicability for the current se",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203586923,203586923,src/wallet/coinselection.cpp
kallewoof,2018-07-19T02:41:22Z,"They don't -- specifically the new argument requires `gArgs` which are not available here.\n\nI should probably drop ""Declare-&-initialize..."" commit.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203587337,203587337,src/wallet/coincontrol.h
kallewoof,2018-07-19T02:46:00Z,Huh.. I thought `&&` made it an rvalue. Guess I need to re-read that explanation. Done.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203587901,203587901,src/wallet/coinselection.h
kallewoof,2018-07-19T02:46:14Z,Leftover. Removed.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203587925,203587925,src/wallet/coinselection.h
kallewoof,2018-07-19T02:46:21Z,Renamed.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203587946,203587946,src/wallet/wallet.cpp
kallewoof,2018-07-19T02:51:23Z,Dropped that commit.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203588558,203588558,src/wallet/coincontrol.h
sdaftuar,2018-07-19T14:12:07Z,"I believe this calculation may be fine for descendants (if I'm correctly understanding what the descendants variable represents -- it could use a code comment explaining exactly what it is, I think the `descendants` variable is the max number of descendants of any ancestor of a given coin?), however I think it is incorrect for ancestors.\n\nI believe the ancestor count is the actual number of an",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203741762,203741762,src/wallet/coinselection.cpp
kallewoof,2018-07-19T14:40:18Z,"> I believe the ancestor count is the actual number of ancestors a given coin has. If you just take the max across all coins in an output group, then if you have e.g. 30 2-ancestor coins in an output group, you may treat them as a 2-ancestor output group, when in fact you have 60 ancestors in any transaction that includes the group.\n\nAha! This is a very good point. I will think about a remedy ",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r203753054,203753054,src/wallet/coinselection.cpp
sdaftuar,2018-07-20T21:00:37Z,"I think I would prefer that we not do this -- I'm not sure that `-avoidpartialspends` works very well on wallets that have substantial address reuse, in particular I think you can devolve into cases where you'd produce giant transactions that take forever to sign and would never pass policy (or consensus) limits, in extreme cases.\n\nI'm going to comment elsewhere about places I think we can mit",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204168100,204168100,src/wallet/wallet.cpp
sdaftuar,2018-07-20T21:20:16Z,"Perhaps we should not create groups that would be excessively large to send together?  For instance if someone has a couple thousand outputs to the same address, then as a group they would become unspendable (because the resulting transaction would be too big).  \n\nIt might be pretty annoying for our users if they became vulnerable to weird DoS attacks where people create lots of dust to preven",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204171876,204171876,src/wallet/wallet.cpp
kallewoof,2018-07-20T21:40:30Z,The code only selects the avoiding tx if its fee is lower than the original. I don't think you'd ever run into that case for someone with substantial address reuse.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204175960,204175960,src/wallet/wallet.cpp
sdaftuar,2018-07-20T21:45:30Z,"But even running the code on a wallet with a large number of outputs with the same scriptPubKey can be very slow.  Nothing stops the code from eg trying to generate a multi-megabyte transaction and then hit a huge slow down while trying to sign such a transaction, before the transaction gets rejected.  (I have an RPC test that demonstrates this possibility.)",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204177020,204177020,src/wallet/wallet.cpp
kallewoof,2018-07-20T21:49:29Z,"Good point. I've set a cap at 10 outputs per group. Perhaps this should be a `-option`...\n\nThat being said, the code (at least BnB algo; knapsack is being deprecated) already removes dust from the group before running coin select. https://github.com/kallewoof/bitcoin/blob/19bbab013860c84475cce98a55179a1167348269/src/wallet/wallet.cpp#L2415-L2422",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204177652,204177652,src/wallet/wallet.cpp
kallewoof,2018-07-20T21:55:49Z,"Now that there is a cap on the utxo count per output group, I think parts of this is mitigated, but I'm not sure I've convinced myself this is necessary. Perhaps a 3-state flag (try, on, off) with default=try, so people can disable it...",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204178714,204178714,src/wallet/wallet.cpp
kallewoof,2018-07-21T11:55:24Z,Removing this. No harm in doing the try style later.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204209135,204209135,src/wallet/wallet.cpp
laanwj,2018-07-23T15:59:38Z,"should we call these `insert`? I think it's a bit confusing for readability, as it implies the built-in std function is used in ways that the original one cannot be.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204457524,204457524,src/util.h
laanwj,2018-07-23T16:12:12Z,"what makes this different from\n```c++\nint m_input_bytes = -1;\n```\n(my guess is that it is the same, in which case I think that syntax is preferable because it is already used in so many places)",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204464838,204464838,src/wallet/coinselection.h
kallewoof,2018-07-23T16:32:47Z,I was considering putting them under a `util::` namespace or somehing to emphasize they're actually not `std` but since we are no longer `using namespace std` it felt unnecessary. I'm up for renaming if it still feels confusing though.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204472454,204472454,src/util.h
kallewoof,2018-07-23T16:44:02Z,"It is the same. We already use this syntax in a variety of places. See e.g. \n\nhttps://github.com/bitcoin/bitcoin/blob/7ebd8c6385253bfa30175169a22f93474d8ddfaf/src/wallet/wallet.h#L97-L101\n\nhttps://github.com/bitcoin/bitcoin/blob/7ebd8c6385253bfa30175169a22f93474d8ddfaf/src/wallet/wallet.h#L674-L675\n",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204475934,204475934,src/wallet/coinselection.h
laanwj,2018-07-23T17:54:11Z,"okay! well then my only comment is that mixing the syntaxes in the same class looks inconsistent, but I don't care strongly",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204498056,204498056,src/wallet/coinselection.h
sdaftuar,2018-07-23T20:51:16Z,"Rather than use std::max, it seems like we could just sum the ancestor values -- that risks overcounting, but what's the downside?  I believe the goal of tracking this stuff is so that calls to SelectCoinsMinConf has a better chance of producing a transaction that passes the mempool chain limits, so if we err on the side of caution here I think that's just strictly better.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204549758,204549758,src/wallet/coinselection.cpp
sdaftuar,2018-07-23T21:08:38Z,"I think you meant `if (gmap[dst].m_outputs.size() == 10)`?  `gmap.count(dst)` should always be 0 or 1.\n\nAlso -- I'm not sure if there's some negative side effect from deterministically creating these subgroups of outputs.  Intuitively it seems safer to me if we randomly constructed these groups somehow to prevent someone from triggering some kind of coinselection issue by giving us coins that ",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204554549,204554549,src/wallet/wallet.cpp
kallewoof,2018-07-24T02:32:17Z,"Oh, hum. I actually thought the {} syntax was preferred and didn't fix the other stuff to avoid diff bloat.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204607747,204607747,src/wallet/coinselection.h
kallewoof,2018-07-24T06:07:12Z,I ended up moving into `util::` after all.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204632762,204632762,src/util.h
kallewoof,2018-07-24T06:08:30Z,"Oh, actually, the other two lines are removed at the end as they are no longer needed.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r204632965,204632965,src/wallet/coinselection.h
kallewoof,2018-07-30T16:31:04Z,"I'm not sure it's a big risk, but I also think it's better to be safe than sorry. I envision a replacement of `push_back` with `insert(begin() + random(size())` (forgive pseudo-code-abbrev) in\n\nhttps://github.com/bitcoin/bitcoin/blob/4d550ffab64d79a44fcaa76f6e30c28f01614d3f/src/wallet/coinselection.cpp#L298\n\nWill make a PR unless someone beats me to it.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r206238572,206238572,src/wallet/wallet.cpp
kallewoof,2018-07-30T16:33:56Z,"Yeah, worst case the user has to wait for the inputs to confirm before they can spend them. (Is there a case where that could be a pontential problem? Can't think of one.)",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r206239426,206239426,src/wallet/coinselection.cpp
kallewoof,2018-07-30T16:40:21Z,"Hm.. actually, that's not sufficient due to the capping at 10. I guess shuffling the entire vector at the top in `CWallet::GroupOutputs` is the way to go.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r206241468,206241468,src/wallet/wallet.cpp
kallewoof,2018-07-30T17:00:27Z,"Adding shuffling in #13808. ~~I chose to put it in the `GroupOutputs` method since it can skip the shuffle for `is_single` and `size() <= 10` cases.~~ Moved outside, due to `const`ness.",https://github.com/bitcoin/bitcoin/pull/12257#discussion_r206247858,206247858,src/wallet/wallet.cpp
kallewoof,2018-07-30T19:51:27Z,See #13812 ,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r206299150,206299150,src/wallet/coinselection.cpp
promag,2018-07-30T21:00:21Z,`gmap.count(dst) == 10` is always false and is not fixed in #13808.,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r206319728,206319728,src/wallet/wallet.cpp
kallewoof,2018-07-30T21:07:09Z,It's fixed in #13805,https://github.com/bitcoin/bitcoin/pull/12257#discussion_r206321748,206321748,src/wallet/wallet.cpp
