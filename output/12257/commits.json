[
  {
    "sha": "173e18a289088c6087ba6fac708e322aa63b7a94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzNlMThhMjg5MDg4YzYwODdiYTZmYWM3MDhlMzIyYWE2M2I3YTk0",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-17T05:05:04Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-24T06:05:36Z"
      },
      "message": "utils: Add insert() convenience templates",
      "tree": {
        "sha": "a1f2e1c3909b8315ebf98f97904dc401b7fbe5d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1f2e1c3909b8315ebf98f97904dc401b7fbe5d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/173e18a289088c6087ba6fac708e322aa63b7a94",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAltWwbAACgkQV692LbM1\nMyInqQ/+J9RXXt3tSE5RQb66SMPtxh0lFFSIbQRI6VtGSNm/QyFo0gqt67w5risN\nYgHVGOkLZIySDw9zxlZW/ac6nhHyJ7jIgWrMCL+7O5dI2ZnXlyCtLGxJuRPvkxFs\nfgaPA6WFG7qLvs+psgBFkVbES9YYGPhIRiX0ZE3ew9FFrFOULao/Q5nBL8DbET/0\nfFqHUgSsWjEOLty3cmPUT1KvdAdrvuugO2dMZfVfnRAWe2ZGr2joTM63xGxJxDLT\nxjYeVhb4ks8SnCtjUjMmic4FR/Cgat5nXK3tvWXdlSpvpSVY/o1/WTMOTLD3fFT7\n04NBbEtsBm15sPEbVD6Fa4KU7o/PzaGQjhbtkzuo+J+KzNJZZDYXevzHtMkHvauS\nwjldctvsGBoZlWj33GdSuC5XraCGvF1qe+QuSncis2oh4XoI08eJWkWnvmu5zItq\nJ2p/uykTmdi0hYWUc9QM3qXaUaPqkF1q1+yp3w4HaCixucv9MbYjUfWByPZTpRRm\n71/5JnvLptogysnA5N4wf2D8CFrA+tQLCDxsexVMg2A8fo8iVeB7mqTMCitkUqko\nrtaB0bfPyMpb296crNd2QhbhM4h3XGFMfaBB+q3MR7+BaXVl3iU6eeYif/9aOKuz\nnYwEjyRzcF3BNksG/EV8sWTmLCFkVyuY6E3ESfFITaylp9FctLQ=\n=ZrnY\n-----END PGP SIGNATURE-----",
        "payload": "tree a1f2e1c3909b8315ebf98f97904dc401b7fbe5d4\nparent 07ce278455757fb46dab95fb9b97a3f6b1b84faf\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1531803904 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532412336 +0900\n\nutils: Add insert() convenience templates\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/173e18a289088c6087ba6fac708e322aa63b7a94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/173e18a289088c6087ba6fac708e322aa63b7a94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/173e18a289088c6087ba6fac708e322aa63b7a94/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07ce278455757fb46dab95fb9b97a3f6b1b84faf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07ce278455757fb46dab95fb9b97a3f6b1b84faf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07ce278455757fb46dab95fb9b97a3f6b1b84faf"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c3003e66a65d7ba08ebe7b4f4f97cc27b3b790ab",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/173e18a289088c6087ba6fac708e322aa63b7a94/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/173e18a289088c6087ba6fac708e322aa63b7a94/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=173e18a289088c6087ba6fac708e322aa63b7a94",
        "patch": "@@ -355,4 +355,18 @@ std::string CopyrightHolders(const std::string& strPrefix);\n  */\n int ScheduleBatchPriority(void);\n \n+namespace util {\n+\n+//! Simplification of std insertion\n+template <typename Tdst, typename Tsrc>\n+inline void insert(Tdst& dst, const Tsrc& src) {\n+    dst.insert(dst.begin(), src.begin(), src.end());\n+}\n+template <typename TsetT, typename Tsrc>\n+inline void insert(std::set<TsetT>& dst, const Tsrc& src) {\n+    dst.insert(src.begin(), src.end());\n+}\n+\n+} // namespace util\n+\n #endif // BITCOIN_UTIL_H"
      }
    ]
  },
  {
    "sha": "a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDQzZDdhMGNhMzMzYjBiYWU2M2UwNGI1ZDQ3NmY5YWQ5YzdhZWFj",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-19T02:40:13Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-24T06:05:36Z"
      },
      "message": "moveonly: CoinElegibilityFilter into coinselection.h",
      "tree": {
        "sha": "f8639a75168aee037612510b6ba1c7d4f23dc083",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8639a75168aee037612510b6ba1c7d4f23dc083"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAltWwbAACgkQV692LbM1\nMyIFKw//bfDElUTzzz2am4uulZaBiWj5j6r/LqhA7soE07GTpCYwmq+PLvRvnkHz\nIs7whpwgSYQjyLLUllfIrlNdIKwJAOWrQAJ7st4Hr28Ee3nu8nRvg9BIg3JdPQYk\nMfB063yqVKXfXTORUcDOB/1Z3xM3HBmmmG7tbD7ccks2j9LbyWT3MxV1LhX0ybsZ\nLFFlkfWAf3/lLv7uONR5egvGLG1D06b+usU4p6dVSfLH2pSbSahNnSG2SSquBBi9\nw2s8D3xWIKzoBagQbObMcVr3I/JJ0XfuwxlL/7kAdf0IoqC6T7aNJaBTfA7vadl5\nJWcBjpwOYiiyQ2mx14hwy9++iypWn9h+MhoWCrneZuOxQ8gxvNUJgioqmzEI192e\ng1ErMNvkC4F9OeBNQGhkZPd3mw40bp4O9QJ2IeG1UDNWw2uAYm4TLeo4uwttjKKw\ncKXQGwfKNt31GSgyOJey8OyHto2wx1XHS+jlKV1BDF4t8XXm5pAOPwE++6rZEJlU\nPGQuuhCCdJy6Oefz5QTidJNeb4ND+lv3cZ+Al7oMlakrRDScC1xACKdQAg7U7OUG\niq/l+CSG2t4L4ut3R4wGW834psdyn1WTAM3KdiE/0BYxhqhLmb7T3WiWDOlY56Nx\nSo3z9nwy6vWDC5j7+WnYXP6beRmpnz9b5docJ4H4161rWN/4Dhw=\n=g7Sd\n-----END PGP SIGNATURE-----",
        "payload": "tree f8639a75168aee037612510b6ba1c7d4f23dc083\nparent 173e18a289088c6087ba6fac708e322aa63b7a94\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1531968013 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532412336 +0900\n\nmoveonly: CoinElegibilityFilter into coinselection.h\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "173e18a289088c6087ba6fac708e322aa63b7a94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/173e18a289088c6087ba6fac708e322aa63b7a94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/173e18a289088c6087ba6fac708e322aa63b7a94"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "64111f3939ec4a380ed0fd18c58785cf8620bd33",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac",
        "patch": "@@ -47,6 +47,17 @@ class CInputCoin {\n     }\n };\n \n+struct CoinEligibilityFilter\n+{\n+    const int conf_mine;\n+    const int conf_theirs;\n+    const uint64_t max_ancestors;\n+    const uint64_t max_descendants;\n+\n+    CoinEligibilityFilter(int conf_mine, int conf_theirs, uint64_t max_ancestors) : conf_mine(conf_mine), conf_theirs(conf_theirs), max_ancestors(max_ancestors), max_descendants(max_ancestors) {}\n+    CoinEligibilityFilter(int conf_mine, int conf_theirs, uint64_t max_ancestors, uint64_t max_descendants) : conf_mine(conf_mine), conf_theirs(conf_theirs), max_ancestors(max_ancestors), max_descendants(max_descendants) {}\n+};\n+\n bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n \n // Original coin selection algorithm as a fallback"
      },
      {
        "sha": "173ebec537ff0503c2581cd78232facf47bc4066",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac",
        "patch": "@@ -652,17 +652,6 @@ struct CoinSelectionParams\n     CoinSelectionParams() {}\n };\n \n-struct CoinEligibilityFilter\n-{\n-    const int conf_mine;\n-    const int conf_theirs;\n-    const uint64_t max_ancestors;\n-    const uint64_t max_descendants;\n-\n-    CoinEligibilityFilter(int conf_mine, int conf_theirs, uint64_t max_ancestors) : conf_mine(conf_mine), conf_theirs(conf_theirs), max_ancestors(max_ancestors), max_descendants(max_ancestors) {}\n-    CoinEligibilityFilter(int conf_mine, int conf_theirs, uint64_t max_ancestors, uint64_t max_descendants) : conf_mine(conf_mine), conf_theirs(conf_theirs), max_ancestors(max_ancestors), max_descendants(max_descendants) {}\n-};\n-\n class WalletRescanReserver; //forward declarations for ScanForWalletTransactions/RescanFromTime\n /**\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,"
      }
    ]
  },
  {
    "sha": "65b3eda458221644616d0fdd6ba0fe01bdbce893",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWIzZWRhNDU4MjIxNjQ0NjE2ZDBmZGQ2YmEwZmUwMWJkYmNlODkz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-17T07:56:06Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-24T06:05:36Z"
      },
      "message": "wallet: Add input bytes to CInputCoin\n\nWith nInputBytes, coin selection can execute without a reference to the COutput",
      "tree": {
        "sha": "c94e1b3f7ee693291c2ba32fafc83c0ba58ea85e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c94e1b3f7ee693291c2ba32fafc83c0ba58ea85e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65b3eda458221644616d0fdd6ba0fe01bdbce893",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAltWwbAACgkQV692LbM1\nMyLQBRAAlCVgEktJ6Xg9k8oRMd/f7y+vk9WMW2CUTo1tqzJLf7Z++Q+BOxGY3Roe\nRfgU9/bNAywEqjYOl2Y7pgzmNEduQv01PK27xvlEgZVeVi2hX4uwyb0Glx219nts\niW2FcJeYAOJS1OFvURPDOPPbfb7tm2U6PLTbJC4XJJLUjsOviB5VFDA7CGksNgyX\nwXJZ74IKDXbOHKBWO7/nT54FDN02ZOdew9JFAUJOqZaMSitJAGIsQXYjEaejFTvU\n8TIng63M4ju2BxTxmVhScFsu3WEHkVUPSawjPXNK+Lv26KBE35SuYquja+Fgy+xk\njtHiL6sfhMY+M6RL+Mef2mxAp7xWXlkys5S1+Uo/xgH+wzkMER98NrVquPnwotqo\nQ/7gyMIOPU2masYLEKZj3yHB2BCDIM63JQb6OCoyXJYR1yzKi+5c3H+4vwW+D90u\nYu4e3FpQ7amumhlW2p77FupML0TgNnQNCZ5H0mWaZHi1ICaEozNoxI5CUnEuwNWV\nl/c2mnnnqCeB8qIU7fj2Hb3Pr9pETfgfvauETrPSLSazy5Wr1I+1iYRLjVOHETFL\n3WU/FufWHL7rQ6yWnWwC/W/wno/HZhgoIeD+6NLVdOjLHAKgqglD+3uI08emvatq\nv+2rt7hrSqui9o1Xiifc1O9kB/TqCOlsM6dB54U71Fn4lJscut8=\n=4pqd\n-----END PGP SIGNATURE-----",
        "payload": "tree c94e1b3f7ee693291c2ba32fafc83c0ba58ea85e\nparent a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1531814166 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532412336 +0900\n\nwallet: Add input bytes to CInputCoin\n\nWith nInputBytes, coin selection can execute without a reference to the COutput\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65b3eda458221644616d0fdd6ba0fe01bdbce893",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65b3eda458221644616d0fdd6ba0fe01bdbce893",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65b3eda458221644616d0fdd6ba0fe01bdbce893/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a443d7a0ca333b0bae63e04b5d476f9ad9c7aeac"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "218d20fb4781e172c2f1af2725e10462e4d93a19",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65b3eda458221644616d0fdd6ba0fe01bdbce893/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65b3eda458221644616d0fdd6ba0fe01bdbce893/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=65b3eda458221644616d0fdd6ba0fe01bdbce893",
        "patch": "@@ -28,12 +28,20 @@ class CInputCoin {\n         effective_value = txout.nValue;\n     }\n \n+    CInputCoin(const CTransactionRef& tx, unsigned int i, int input_bytes) : CInputCoin(tx, i)\n+    {\n+        m_input_bytes = input_bytes;\n+    }\n+\n     COutPoint outpoint;\n     CTxOut txout;\n     CAmount effective_value;\n     CAmount fee = 0;\n     CAmount long_term_fee = 0;\n \n+    /** Pre-computed estimated size of this output as a fully-signed input in a transaction. Can be -1 if it could not be calculated */\n+    int m_input_bytes{-1};\n+\n     bool operator<(const CInputCoin& rhs) const {\n         return outpoint < rhs.outpoint;\n     }"
      },
      {
        "sha": "4a38545146dcfcdc647b1947c49eafa0171c1c89",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65b3eda458221644616d0fdd6ba0fe01bdbce893/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65b3eda458221644616d0fdd6ba0fe01bdbce893/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=65b3eda458221644616d0fdd6ba0fe01bdbce893",
        "patch": "@@ -525,6 +525,11 @@ class COutput\n     }\n \n     std::string ToString() const;\n+\n+    inline CInputCoin GetInputCoin() const\n+    {\n+        return CInputCoin(tx->tx, i, nInputBytes);\n+    }\n };\n \n "
      }
    ]
  },
  {
    "sha": "bb629cb9dc567cc819724d9f4852652926e60cbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjYyOWNiOWRjNTY3Y2M4MTk3MjRkOWY0ODUyNjUyOTI2ZTYwY2Jm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-17T05:26:35Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-24T06:05:37Z"
      },
      "message": "Add -avoidpartialspends and m_avoid_partial_spends",
      "tree": {
        "sha": "d73ac0990b2f6def9b8b471158d1a8f3913323bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d73ac0990b2f6def9b8b471158d1a8f3913323bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb629cb9dc567cc819724d9f4852652926e60cbf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAltWwbEACgkQV692LbM1\nMyKvvQ/9EOmGL3LnM7dv6snUySyKc86ElSERlSt4AyOfh8pjG8JURHlXojUlHV5i\nKHOwm7vd4239KHnpsJZXp49irj3TWdFhSDAwFeUC7678BlX9S4ixRbUqDNj823Sw\n+WeUdi2SALgsWzVC6gId2zayRalYTUnWfDz/Mz96L6nYajN7El2sZECXqUnRNE7M\ntzH8jV2C2u3RYiv9JPxGEH2xyRiCrLLIc5OpFSnUiSHle9a9J6piIrLEdHXdHrbg\nBHKSMRPiNfmasH18b8VAaee4gkP+BC33SSD07Jnq4T1nT02xy2IdaIswa1yIiP87\nGzF5DYga/T2SWvkU6aWRpwPWAGG3NM1hwNdn6YORBOHlisStNC1+yFUjgoQn6DHo\nO6InfvfifN23w7RxJkz5So1ZDsCH/e5GZ1kLlxAsFMDs9CrkF2heyWr3p1oJJRVo\nU+QLB3jn9+XYCd53AdqDKM4+Ow+Zh7TF5WCfrcJuQUdhrBLoFFVjBiKBdlNnwdY9\nY5so0tVnjl15wkpNaWCD+kIJ/vZJXvjrNECCiKaaVzU+UNtLe11wQxRX0wwONh6j\nMBNScYfMouYhLrcm6dSbqcwme3DBPVkClfI4j/y7JeULWhFEoNZlau/pW+vsLTIo\nFeYLeu0Vlmr98PpW6dPc9+1d8lxzzGWcYSgeqKIWBHnxpqERD64=\n=9uvK\n-----END PGP SIGNATURE-----",
        "payload": "tree d73ac0990b2f6def9b8b471158d1a8f3913323bd\nparent 65b3eda458221644616d0fdd6ba0fe01bdbce893\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1531805195 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532412337 +0900\n\nAdd -avoidpartialspends and m_avoid_partial_spends\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb629cb9dc567cc819724d9f4852652926e60cbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb629cb9dc567cc819724d9f4852652926e60cbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb629cb9dc567cc819724d9f4852652926e60cbf/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65b3eda458221644616d0fdd6ba0fe01bdbce893",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65b3eda458221644616d0fdd6ba0fe01bdbce893",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65b3eda458221644616d0fdd6ba0fe01bdbce893"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 30,
      "deletions": 13
    },
    "files": [
      {
        "sha": "60ecf07a59135b34653c22a6e0cdecc64301924f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb629cb9dc567cc819724d9f4852652926e60cbf/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb629cb9dc567cc819724d9f4852652926e60cbf/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bb629cb9dc567cc819724d9f4852652926e60cbf",
        "patch": "@@ -274,6 +274,7 @@ libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   interfaces/wallet.cpp \\\n+  wallet/coincontrol.cpp \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n   wallet/feebumper.cpp \\"
      },
      {
        "sha": "645981faa4639b365fbcc1013c6ed02761cd1b50",
        "filename": "src/wallet/coincontrol.cpp",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb629cb9dc567cc819724d9f4852652926e60cbf/src/wallet/coincontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb629cb9dc567cc819724d9f4852652926e60cbf/src/wallet/coincontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.cpp?ref=bb629cb9dc567cc819724d9f4852652926e60cbf",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coincontrol.h>\n+\n+#include <util.h>\n+\n+void CCoinControl::SetNull()\n+{\n+    destChange = CNoDestination();\n+    m_change_type.reset();\n+    fAllowOtherInputs = false;\n+    fAllowWatchOnly = false;\n+    m_avoid_partial_spends = gArgs.GetBoolArg(\"-avoidpartialspends\", DEFAULT_AVOIDPARTIALSPENDS);\n+    setSelected.clear();\n+    m_feerate.reset();\n+    fOverrideFeeRate = false;\n+    m_confirm_target.reset();\n+    m_signal_bip125_rbf.reset();\n+    m_fee_mode = FeeEstimateMode::UNSET;\n+}\n+"
      },
      {
        "sha": "fbe6c43e24d16fc05b7d63a984dcd2b9bac38921",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb629cb9dc567cc819724d9f4852652926e60cbf/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb629cb9dc567cc819724d9f4852652926e60cbf/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=bb629cb9dc567cc819724d9f4852652926e60cbf",
        "patch": "@@ -32,6 +32,8 @@ class CCoinControl\n     boost::optional<unsigned int> m_confirm_target;\n     //! Override the wallet's m_signal_rbf if set\n     boost::optional<bool> m_signal_bip125_rbf;\n+    //! Avoid partial use of funds sent to a given address\n+    bool m_avoid_partial_spends;\n     //! Fee estimation mode to control arguments to estimateSmartFee\n     FeeEstimateMode m_fee_mode;\n \n@@ -40,19 +42,7 @@ class CCoinControl\n         SetNull();\n     }\n \n-    void SetNull()\n-    {\n-        destChange = CNoDestination();\n-        m_change_type.reset();\n-        fAllowOtherInputs = false;\n-        fAllowWatchOnly = false;\n-        setSelected.clear();\n-        m_feerate.reset();\n-        fOverrideFeeRate = false;\n-        m_confirm_target.reset();\n-        m_signal_bip125_rbf.reset();\n-        m_fee_mode = FeeEstimateMode::UNSET;\n-    }\n+    void SetNull();\n \n     bool HasSelected() const\n     {"
      },
      {
        "sha": "52c7e6c70f3407e16e2809f05affcb8311e37270",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb629cb9dc567cc819724d9f4852652926e60cbf/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb629cb9dc567cc819724d9f4852652926e60cbf/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=bb629cb9dc567cc819724d9f4852652926e60cbf",
        "patch": "@@ -54,6 +54,7 @@ const WalletInitInterface& g_wallet_init_interface = WalletInit();\n void WalletInit::AddWalletOptions() const\n {\n     gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-avoidpartialspends\", strprintf(_(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u)\"), DEFAULT_AVOIDPARTIALSPENDS), false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \""
      },
      {
        "sha": "b636924fe27f1d50f1c955b45a5df5de37d8beeb",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb629cb9dc567cc819724d9f4852652926e60cbf/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb629cb9dc567cc819724d9f4852652926e60cbf/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bb629cb9dc567cc819724d9f4852652926e60cbf",
        "patch": "@@ -55,6 +55,8 @@ static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n //! Default for -walletrejectlongchains\n static const bool DEFAULT_WALLET_REJECT_LONG_CHAINS = false;\n+//! Default for -avoidpartialspends\n+static const bool DEFAULT_AVOIDPARTIALSPENDS = false;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n //! -walletrbf default"
      }
    ]
  },
  {
    "sha": "87ebce25d66952f5ce565bb5130dcf5e24049872",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2ViY2UyNWQ2Njk1MmY1Y2U1NjViYjUxMzBkY2Y1ZTI0MDQ5ODcy",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-19T02:43:03Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-24T06:05:37Z"
      },
      "message": "wallet: Add output grouping",
      "tree": {
        "sha": "5f14a8fcaacc353277f7624f9d33674f532e04ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f14a8fcaacc353277f7624f9d33674f532e04ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87ebce25d66952f5ce565bb5130dcf5e24049872",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAltWwbEACgkQV692LbM1\nMyL6eQ//RYm77FmM50rtYARfYMot7ujJ8HkhNVTVrJ+MdErVB5TDB4tVcxDZhYv1\nHhRe+lFD3UR/We89GOQyUW22pLe7gRvQD78wJWNX9LjRE4Xr5dVW7en1PzfVN4G8\nsdE8gCN4R0Ujd9vrXbaQ5y3mbgZRykXE8fS37sx8dVLAymaA3WiZzXqImApCN0M5\nikdx3SOjLFPavLfc49rDxlLwCexzh4hO1uxcRPF/m58FglTxCB1Yw5Dlb1ztsuI/\nRpHp6Z8ZnwCakppHul+6/Bcm4Hstn5s7xb29e1MvPeAfUrlJBZCb64aUjwD8iidV\nl15qlLRYSkIWGVC1RcwnFt1tfNjn1VIqEA2YMqEoTYbYNKMYj3lU9seeGq1VR67c\nRkfYd3rPXa+DuVhbuQu5r0qsfbA54Z/6A7jALw+IXwk5GxP2CTgIHBlT7YHUxZ3f\nZpbUX14nZhyQh+Dc+ugJEd5ErQGMpq+QG17T7y5jIIGfArp/WKBmQRjhefaVTKml\nbalYtrjd7eQYROl0BWhoiXGhrag+sAGR8Sucrq9k09hFUyKpJEid8NbKgFrvTo5F\nxOndEGBRqxSUssk1Hue8GslQFicpAweOpRMsIisRY9n5jGm3pxcFGMFwVdWlrlIO\nBpM8FwZxofA5KFCIxPzye1sRJt6m2CLCiUFNXAEs+E1nV5a3FeA=\n=Km3o\n-----END PGP SIGNATURE-----",
        "payload": "tree 5f14a8fcaacc353277f7624f9d33674f532e04ce\nparent bb629cb9dc567cc819724d9f4852652926e60cbf\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1531968183 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532412337 +0900\n\nwallet: Add output grouping\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ebce25d66952f5ce565bb5130dcf5e24049872",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87ebce25d66952f5ce565bb5130dcf5e24049872",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ebce25d66952f5ce565bb5130dcf5e24049872/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb629cb9dc567cc819724d9f4852652926e60cbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb629cb9dc567cc819724d9f4852652926e60cbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb629cb9dc567cc819724d9f4852652926e60cbf"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 94,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8bc4e10b8de31442b4b773c86525b3b0d58b12bb",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ebce25d66952f5ce565bb5130dcf5e24049872/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ebce25d66952f5ce565bb5130dcf5e24049872/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=87ebce25d66952f5ce565bb5130dcf5e24049872",
        "patch": "@@ -298,3 +298,40 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins\n \n     return true;\n }\n+\n+/******************************************************************************\n+\n+ OutputGroup\n+\n+ ******************************************************************************/\n+\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+    m_outputs.push_back(output);\n+    m_from_me &= from_me;\n+    m_value += output.effective_value;\n+    m_depth = std::min(m_depth, depth);\n+    // m_ancestors is currently the max ancestor count for all coins in the group; however, this is\n+    // not ideal, as a wallet will consider e.g. thirty 2-ancestor coins as having two ancestors,\n+    // when in reality it has 60 ancestors.\n+    m_ancestors = std::max(m_ancestors, ancestors);\n+    // m_descendants is the count as seen from the top ancestor, not the descendants as seen from the\n+    // coin itself; thus, this value is accurate\n+    m_descendants = std::max(m_descendants, descendants);\n+    effective_value = m_value;\n+}\n+\n+std::vector<CInputCoin>::iterator OutputGroup::Discard(const CInputCoin& output) {\n+    auto it = m_outputs.begin();\n+    while (it != m_outputs.end() && it->outpoint != output.outpoint) ++it;\n+    if (it == m_outputs.end()) return it;\n+    m_value -= output.effective_value;\n+    effective_value -= output.effective_value;\n+    return m_outputs.erase(it);\n+}\n+\n+bool OutputGroup::EligibleForSpending(const CoinEligibilityFilter& eligibility_filter) const\n+{\n+    return m_depth >= (m_from_me ? eligibility_filter.conf_mine : eligibility_filter.conf_theirs)\n+        && m_ancestors <= eligibility_filter.max_ancestors\n+        && m_descendants <= eligibility_filter.max_descendants;\n+}"
      },
      {
        "sha": "0211851750f5e2990d72cb10e4bed337b695040a",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ebce25d66952f5ce565bb5130dcf5e24049872/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ebce25d66952f5ce565bb5130dcf5e24049872/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=87ebce25d66952f5ce565bb5130dcf5e24049872",
        "patch": "@@ -66,8 +66,38 @@ struct CoinEligibilityFilter\n     CoinEligibilityFilter(int conf_mine, int conf_theirs, uint64_t max_ancestors, uint64_t max_descendants) : conf_mine(conf_mine), conf_theirs(conf_theirs), max_ancestors(max_ancestors), max_descendants(max_descendants) {}\n };\n \n+struct OutputGroup\n+{\n+    std::vector<CInputCoin> m_outputs;\n+    bool m_from_me{true};\n+    CAmount m_value{0};\n+    int m_depth{999};\n+    size_t m_ancestors{0};\n+    size_t m_descendants{0};\n+    CAmount effective_value{0};\n+    CAmount fee{0};\n+    CAmount long_term_fee{0};\n+\n+    OutputGroup() {}\n+    OutputGroup(std::vector<CInputCoin>&& outputs, bool from_me, CAmount value, int depth, size_t ancestors, size_t descendants)\n+    : m_outputs(std::move(outputs))\n+    , m_from_me(from_me)\n+    , m_value(value)\n+    , m_depth(depth)\n+    , m_ancestors(ancestors)\n+    , m_descendants(descendants)\n+    {}\n+    OutputGroup(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) : OutputGroup() {\n+        Insert(output, depth, from_me, ancestors, descendants);\n+    }\n+    void Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants);\n+    std::vector<CInputCoin>::iterator Discard(const CInputCoin& output);\n+    bool EligibleForSpending(const CoinEligibilityFilter& eligibility_filter) const;\n+};\n+\n bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n \n // Original coin selection algorithm as a fallback\n bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);\n+\n #endif // BITCOIN_WALLET_COINSELECTION_H"
      },
      {
        "sha": "03c829357ba23be76c5c78c366ba5d62ff1d53f9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ebce25d66952f5ce565bb5130dcf5e24049872/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ebce25d66952f5ce565bb5130dcf5e24049872/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=87ebce25d66952f5ce565bb5130dcf5e24049872",
        "patch": "@@ -4438,3 +4438,29 @@ void CWallet::LearnAllRelatedScripts(const CPubKey& key)\n     LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n }\n \n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const {\n+    std::vector<OutputGroup> groups;\n+    std::map<CTxDestination, OutputGroup> gmap;\n+    CTxDestination dst;\n+    for (const auto& output : outputs) {\n+        if (output.fSpendable) {\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            size_t ancestors, descendants;\n+            mempool.GetTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n+                if (gmap.count(dst) == 10) {\n+                    groups.push_back(gmap[dst]);\n+                    gmap.erase(dst);\n+                }\n+                gmap[dst].Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+            } else {\n+                groups.emplace_back(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+            }\n+        }\n+    }\n+    if (!single_coin) {\n+        for (const auto& it : gmap) groups.push_back(it.second);\n+    }\n+    return groups;\n+}"
      },
      {
        "sha": "f3e3a78f83f29aaa9348bd83085da6b9d7deed21",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87ebce25d66952f5ce565bb5130dcf5e24049872/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87ebce25d66952f5ce565bb5130dcf5e24049872/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=87ebce25d66952f5ce565bb5130dcf5e24049872",
        "patch": "@@ -534,9 +534,6 @@ class COutput\n     }\n };\n \n-\n-\n-\n /** Private key that includes an expiration date in case it never gets used. */\n class CWalletKey\n {\n@@ -864,6 +861,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n+    std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      }
    ]
  },
  {
    "sha": "59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWQ2ZjdiNGUyZjg0N2VjMWYyZmY0NmM4NGU2MTU3NjU1OTg0Zjg1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-19T02:45:26Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-24T06:05:37Z"
      },
      "message": "wallet: Switch to using output groups instead of coins in coin selection",
      "tree": {
        "sha": "259887780c4798f97fbf006d41849224f611706d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/259887780c4798f97fbf006d41849224f611706d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAltWwbEACgkQV692LbM1\nMyJY1w/8DgahXPe6ZWcvmLqVQ6Cfqib1ye/+BMJCSFp4rzcog3So3E5y3L1wzmTP\nhefCgP+aA2Gh3cEalTh9WHsF1pfwGvonOrsVu7Ljfy6BjYmC6M6b6pQFaqBKHx2P\nvKGtPbQMTx44FfPy9CzOR/nwzKRNAkOie+WC5CkDQB3/53Pt7lXrfVcqUzneK/A4\nTTQiNhWkRuEYPFDhy5SXlUUltr0xApexziVLyBBu4Jsutpg49/T+RMj9y8aXWpWC\nDa6LZd5Dl1ipoTj8JGptRbuwwpB21lDsMwt2mmMG3d+rNh+yZE5uNRtLZ/1J8Q4L\nSiXL87NBlpY54ZK1VCDaK3itJ6Ra7xBBAwQJkSyMc761GCOAvG84XUkY7BFFAbVF\nhA/b5zgt1RvJIQLqnM98EflksNiAa9RIPwL/dheC5xU4uxT1HwsoQHM+Gqe9STpz\noX6pyvXfSaBTumlkRHnvwKsHwwfWQYGssNBGpgvMHE6iezrjDzOfojkhOqWs5JVY\nhJcraCQCAUTk7g5yLVsMlm0O8wQjIOxQzTLKiSbXo8aUlYInkJgkQ3HPvaV+ep5X\n5ix2O8NfWzjV1Gm36lN+7Fn8gi6KvWnQ5uYVl4BqK8DKd1thoUsG8YucgyniOwp5\nbozJJnm6M7+SWgm8mkPKc1XmSM2AW9Bstb6rB1GYNKLWCxwbcbs=\n=9upO\n-----END PGP SIGNATURE-----",
        "payload": "tree 259887780c4798f97fbf006d41849224f611706d\nparent 87ebce25d66952f5ce565bb5130dcf5e24049872\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1531968326 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532412337 +0900\n\nwallet: Switch to using output groups instead of coins in coin selection\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87ebce25d66952f5ce565bb5130dcf5e24049872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87ebce25d66952f5ce565bb5130dcf5e24049872",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87ebce25d66952f5ce565bb5130dcf5e24049872"
      }
    ],
    "stats": {
      "total": 335,
      "additions": 175,
      "deletions": 160
    },
    "files": [
      {
        "sha": "7510d53c888b2b5becb76bef7a896e74dac89c86",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
        "patch": "@@ -8,7 +8,7 @@\n \n #include <set>\n \n-static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<COutput>& vCoins)\n+static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<OutputGroup>& groups)\n {\n     int nInput = 0;\n \n@@ -21,7 +21,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<CO\n \n     int nAge = 6 * 24;\n     COutput output(wtx, nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n-    vCoins.push_back(output);\n+    groups.emplace_back(output.GetInputCoin(), 0, false, 0, 0);\n }\n \n // Simple benchmark for wallet coin selection. Note that it maybe be necessary\n@@ -37,37 +37,41 @@ static void CoinSelection(benchmark::State& state)\n     LOCK(wallet.cs_wallet);\n \n     // Add coins.\n-    std::vector<COutput> vCoins;\n+    std::vector<OutputGroup> groups;\n     for (int i = 0; i < 1000; ++i) {\n-        addCoin(1000 * COIN, wallet, vCoins);\n+        addCoin(1000 * COIN, wallet, groups);\n     }\n-    addCoin(3 * COIN, wallet, vCoins);\n+    addCoin(3 * COIN, wallet, groups);\n \n     const CoinEligibilityFilter filter_standard(1, 6, 0);\n     const CoinSelectionParams coin_selection_params(true, 34, 148, CFeeRate(0), 0);\n     while (state.KeepRunning()) {\n         std::set<CInputCoin> setCoinsRet;\n         CAmount nValueRet;\n         bool bnb_used;\n-        bool success = wallet.SelectCoinsMinConf(1003 * COIN, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used);\n+        bool success = wallet.SelectCoinsMinConf(1003 * COIN, filter_standard, groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used);\n         assert(success);\n         assert(nValueRet == 1003 * COIN);\n         assert(setCoinsRet.size() == 2);\n     }\n }\n \n typedef std::set<CInputCoin> CoinSet;\n+static const CWallet testWallet(\"dummy\", WalletDatabase::CreateDummy());\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp\n-static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<OutputGroup>& set)\n {\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    set.emplace_back(MakeTransactionRef(tx), nInput);\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(COutput(wtx.get(), nInput, 0, true, true, true).GetInputCoin(), 0, true, 0, 0);\n+    wtxn.emplace_back(std::move(wtx));\n }\n // Copied from src/wallet/test/coinselector_tests.cpp\n-static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+static CAmount make_hard_case(int utxos, std::vector<OutputGroup>& utxo_pool)\n {\n     utxo_pool.clear();\n     CAmount target = 0;\n@@ -82,7 +86,7 @@ static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n static void BnBExhaustion(benchmark::State& state)\n {\n     // Setup\n-    std::vector<CInputCoin> utxo_pool;\n+    std::vector<OutputGroup> utxo_pool;\n     CoinSet selection;\n     CAmount value_ret = 0;\n     CAmount not_input_fees = 0;"
      },
      {
        "sha": "99e0832abfa79b6e9af5c6cec25ad2e8c0e9c7b7",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 62,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
        "patch": "@@ -8,7 +8,7 @@\n \n // Descending order comparator\n struct {\n-    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    bool operator()(const OutputGroup& a, const OutputGroup& b) const\n     {\n         return a.effective_value > b.effective_value;\n     }\n@@ -59,7 +59,7 @@ struct {\n \n static const size_t TOTAL_TRIES = 100000;\n \n-bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n {\n     out_set.clear();\n     CAmount curr_value = 0;\n@@ -70,7 +70,7 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n \n     // Calculate curr_available_value\n     CAmount curr_available_value = 0;\n-    for (const CInputCoin& utxo : utxo_pool) {\n+    for (const OutputGroup& utxo : utxo_pool) {\n         // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n         assert(utxo.effective_value > 0);\n         curr_available_value += utxo.effective_value;\n@@ -123,11 +123,11 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n \n             // Output was included on previous iterations, try excluding now.\n             curr_selection.back() = false;\n-            CInputCoin& utxo = utxo_pool.at(curr_selection.size() - 1);\n+            OutputGroup& utxo = utxo_pool.at(curr_selection.size() - 1);\n             curr_value -= utxo.effective_value;\n             curr_waste -= utxo.fee - utxo.long_term_fee;\n         } else { // Moving forwards, continuing down this branch\n-            CInputCoin& utxo = utxo_pool.at(curr_selection.size());\n+            OutputGroup& utxo = utxo_pool.at(curr_selection.size());\n \n             // Remove this utxo from the curr_available_value utxo amount\n             curr_available_value -= utxo.effective_value;\n@@ -156,32 +156,32 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n     value_ret = 0;\n     for (size_t i = 0; i < best_selection.size(); ++i) {\n         if (best_selection.at(i)) {\n-            out_set.insert(utxo_pool.at(i));\n-            value_ret += utxo_pool.at(i).txout.nValue;\n+            util::insert(out_set, utxo_pool.at(i).m_outputs);\n+            value_ret += utxo_pool.at(i).m_value;\n         }\n     }\n \n     return true;\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+static void ApproximateBestSubset(const std::vector<OutputGroup>& groups, const CAmount& nTotalLower, const CAmount& nTargetValue,\n                                   std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n {\n     std::vector<char> vfIncluded;\n \n-    vfBest.assign(vValue.size(), true);\n+    vfBest.assign(groups.size(), true);\n     nBest = nTotalLower;\n \n     FastRandomContext insecure_rand;\n \n     for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n     {\n-        vfIncluded.assign(vValue.size(), false);\n+        vfIncluded.assign(groups.size(), false);\n         CAmount nTotal = 0;\n         bool fReachedTarget = false;\n         for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n         {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n+            for (unsigned int i = 0; i < groups.size(); i++)\n             {\n                 //The solver here uses a randomized algorithm,\n                 //the randomness serves no real security purpose but is just\n@@ -191,7 +191,7 @@ static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const C\n                 //the selection random.\n                 if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n                 {\n-                    nTotal += vValue[i].txout.nValue;\n+                    nTotal += groups[i].m_value;\n                     vfIncluded[i] = true;\n                     if (nTotal >= nTargetValue)\n                     {\n@@ -201,7 +201,7 @@ static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const C\n                             nBest = nTotal;\n                             vfBest = vfIncluded;\n                         }\n-                        nTotal -= vValue[i].txout.nValue;\n+                        nTotal -= groups[i].m_value;\n                         vfIncluded[i] = false;\n                     }\n                 }\n@@ -210,86 +210,75 @@ static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const C\n     }\n }\n \n-bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet)\n+bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet)\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n-    std::vector<CInputCoin> vValue;\n+    boost::optional<OutputGroup> lowest_larger;\n+    std::vector<OutputGroup> applicable_groups;\n     CAmount nTotalLower = 0;\n \n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+    random_shuffle(groups.begin(), groups.end(), GetRandInt);\n \n-    for (const CInputCoin &coin : vCoins)\n-    {\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n+    for (const OutputGroup& group : groups) {\n+        if (group.m_value == nTargetValue) {\n+            util::insert(setCoinsRet, group.m_outputs);\n+            nValueRet += group.m_value;\n             return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n+        } else if (group.m_value < nTargetValue + MIN_CHANGE) {\n+            applicable_groups.push_back(group);\n+            nTotalLower += group.m_value;\n+        } else if (!lowest_larger || group.m_value < lowest_larger->m_value) {\n+            lowest_larger = group;\n         }\n     }\n \n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n+    if (nTotalLower == nTargetValue) {\n+        for (const auto& group : applicable_groups) {\n+            util::insert(setCoinsRet, group.m_outputs);\n+            nValueRet += group.m_value;\n         }\n         return true;\n     }\n \n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n+    if (nTotalLower < nTargetValue) {\n+        if (!lowest_larger) return false;\n+        util::insert(setCoinsRet, lowest_larger->m_outputs);\n+        nValueRet += lowest_larger->m_value;\n         return true;\n     }\n \n     // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), descending);\n+    std::sort(applicable_groups.begin(), applicable_groups.end(), descending);\n     std::vector<char> vfBest;\n     CAmount nBest;\n \n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+    ApproximateBestSubset(applicable_groups, nTotalLower, nTargetValue, vfBest, nBest);\n+    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE) {\n+        ApproximateBestSubset(applicable_groups, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+    }\n \n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n+    if (lowest_larger &&\n+        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || lowest_larger->m_value <= nBest)) {\n+        util::insert(setCoinsRet, lowest_larger->m_outputs);\n+        nValueRet += lowest_larger->m_value;\n+    } else {\n+        for (unsigned int i = 0; i < applicable_groups.size(); i++) {\n+            if (vfBest[i]) {\n+                util::insert(setCoinsRet, applicable_groups[i].m_outputs);\n+                nValueRet += applicable_groups[i].m_value;\n             }\n+        }\n \n         if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n             LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \"); /* Continued */\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n+            for (unsigned int i = 0; i < applicable_groups.size(); i++) {\n                 if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue)); /* Continued */\n+                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(applicable_groups[i].m_value)); /* Continued */\n                 }\n             }\n             LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));"
      },
      {
        "sha": "01fd6d17c8a8a6d8b1157caec8068693c26f5ad2",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
        "patch": "@@ -95,9 +95,9 @@ struct OutputGroup\n     bool EligibleForSpending(const CoinEligibilityFilter& eligibility_filter) const;\n };\n \n-bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n+bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n \n // Original coin selection algorithm as a fallback\n-bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);\n+bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);\n \n #endif // BITCOIN_WALLET_COINSELECTION_H"
      },
      {
        "sha": "15617605779806ce96a58f94096be55b4e45e5cf",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 52,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
        "patch": "@@ -102,6 +102,22 @@ static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n     return target;\n }\n \n+inline std::vector<OutputGroup>& GroupCoins(const std::vector<CInputCoin>& coins)\n+{\n+    static std::vector<OutputGroup> static_groups;\n+    static_groups.clear();\n+    for (auto& coin : coins) static_groups.emplace_back(coin, 0, true, 0, 0);\n+    return static_groups;\n+}\n+\n+inline std::vector<OutputGroup>& GroupCoins(const std::vector<COutput>& coins)\n+{\n+    static std::vector<OutputGroup> static_groups;\n+    static_groups.clear();\n+    for (auto& coin : coins) static_groups.emplace_back(coin.GetInputCoin(), coin.nDepth, coin.tx->fDebitCached && coin.tx->nDebitCached == 1 /* HACK: we can't figure out the is_me flag so we use the conditions defined above; perhaps set safe to false for !fIsFromMe in add_coin() */, 0, 0);\n+    return static_groups;\n+}\n+\n // Branch and bound coin selection tests\n BOOST_AUTO_TEST_CASE(bnb_search_test)\n {\n@@ -121,7 +137,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n \n     // Empty utxo pool\n-    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n     selection.clear();\n \n     // Add utxos\n@@ -132,28 +148,28 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n \n     // Select 1 Cent\n     add_coin(1 * CENT, 1, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     actual_selection.clear();\n     selection.clear();\n \n     // Select 2 Cent\n     add_coin(2 * CENT, 2, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     actual_selection.clear();\n     selection.clear();\n \n     // Select 5 Cent\n     add_coin(3 * CENT, 3, actual_selection);\n     add_coin(2 * CENT, 2, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     actual_selection.clear();\n     selection.clear();\n \n     // Select 11 Cent, not possible\n-    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 11 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 11 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n     actual_selection.clear();\n     selection.clear();\n \n@@ -163,7 +179,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(3 * CENT, 3, actual_selection);\n     add_coin(2 * CENT, 2, actual_selection);\n     add_coin(1 * CENT, 1, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     actual_selection.clear();\n     selection.clear();\n@@ -173,18 +189,18 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(5 * CENT, 5, actual_selection);\n     add_coin(3 * CENT, 3, actual_selection);\n     add_coin(2 * CENT, 2, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 5000, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000, selection, value_ret, not_input_fees));\n \n     // Select 0.25 Cent, not possible\n-    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 0.25 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n     actual_selection.clear();\n     selection.clear();\n \n     // Iteration exhaustion test\n     CAmount target = make_hard_case(17, utxo_pool);\n-    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret, not_input_fees)); // Should exhaust\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), target, 0, selection, value_ret, not_input_fees)); // Should exhaust\n     target = make_hard_case(14, utxo_pool);\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret, not_input_fees)); // Should not exhaust\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), target, 0, selection, value_ret, not_input_fees)); // Should not exhaust\n \n     // Test same value early bailout optimization\n     add_coin(7 * CENT, 7, actual_selection);\n@@ -200,7 +216,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     for (int i = 0; i < 50000; ++i) {\n         add_coin(5 * CENT, 7, utxo_pool);\n     }\n-    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 30 * CENT, 5000, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000, selection, value_ret, not_input_fees));\n \n     ////////////////////\n     // Behavior tests //\n@@ -212,7 +228,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n     // Run 100 times, to make sure it is never finding a solution\n     for (int i = 0; i < 100; ++i) {\n-        BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 2 * CENT, selection, value_ret, not_input_fees));\n+        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 2 * CENT, selection, value_ret, not_input_fees));\n     }\n \n     // Make sure that effective value is working in SelectCoinsMinConf when BnB is used\n@@ -223,7 +239,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     empty_wallet();\n     add_coin(1);\n     vCoins.at(0).nInputBytes = 40; // Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail\n-    BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n+    BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n \n     // Make sure that we aren't using BnB when there are preset inputs\n     empty_wallet();\n@@ -252,24 +268,24 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         empty_wallet();\n \n         // with an empty wallet we can't even pay one cent\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n \n         add_coin(1*CENT, 4);        // add a new 1 cent coin\n \n         // with a new 1 cent coin, we still can't find a mature 1 cent\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n \n         // but we can find a new 1 cent\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf( 1 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf( 1 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n \n         add_coin(2*CENT);           // add a mature 2 cent coin\n \n         // we can't make 3 cents of mature coins\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 3 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 3 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n \n         // we can make 3 cents of new coins\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf( 3 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf( 3 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 3 * CENT);\n \n         add_coin(5*CENT);           // add a mature 5 cent coin,\n@@ -279,33 +295,33 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         // now we have new: 1+10=11 (of which 10 was self-sent), and mature: 2+5+20=27.  total = 38\n \n         // we can't make 38 cents only if we disallow new coins:\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf(38 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf(38 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         // we can't even make 37 cents if we don't allow new coins even if they're from us\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf(38 * CENT, filter_standard_extra, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf(38 * CENT, filter_standard_extra, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         // but we can make 37 cents if we accept new coins from ourself\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(37 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(37 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 37 * CENT);\n         // and we can make 38 cents if we accept all new coins\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(38 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(38 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 38 * CENT);\n \n         // try making 34 cents from 1,2,5,10,20 - we can't do it exactly\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(34 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(34 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 35 * CENT);       // but 35 cents is closest\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n \n         // when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf( 7 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf( 7 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 7 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n         // when we try making 8 cents, the smaller coins (1,2,5) are exactly enough.\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf( 8 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf( 8 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK(nValueRet == 8 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // when we try making 9 cents, no subset of smaller coins is enough, and we get the next bigger coin (10)\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf( 9 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf( 9 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 10 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -319,30 +335,30 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(30*CENT); // now we have 6+7+8+20+30 = 71 cents total\n \n         // check that we have 71 and not 72\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(71 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf(72 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(71 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf(72 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n \n         // now try making 16 cents.  the best smaller coins can do is 6+7+8 = 21; not as good at the next biggest coin, 20\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 20 * CENT); // we should get 20 in one coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         add_coin( 5*CENT); // now we have 5+6+7+8+20+30 = 75 cents total\n \n         // now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, better than the next biggest coin, 20\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT); // we should get 18 in 3 coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         add_coin( 18*CENT); // now we have 5+6+7+8+18+20+30\n \n         // and now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, the same as the next biggest coin, 18\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT);  // we should get 18 in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U); // because in the event of a tie, the biggest coin wins\n \n         // now try making 11 cents.  we should get 5+6\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(11 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(11 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 11 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n@@ -351,11 +367,11 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin( 2*COIN);\n         add_coin( 3*COIN);\n         add_coin( 4*COIN); // now we have 5+6+7+8+18+20+30+100+200+300+400 = 1094 cents\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(95 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(95 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * COIN);  // we should get 1 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(195 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(195 * CENT, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -370,22 +386,22 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n         // try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE\n         // we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(MIN_CHANGE, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(MIN_CHANGE, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);\n \n         // but if we add a bigger coin, small change is avoided\n         add_coin(1111*MIN_CHANGE);\n \n         // try making 1 from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // if we add more small coins:\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 7 / 10);\n \n         // and try again to make 1.0 * MIN_CHANGE\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // run the 'mtgox' test (see http://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n@@ -394,7 +410,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         for (int j = 0; j < 20; j++)\n             add_coin(50000 * COIN);\n \n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(500000 * COIN, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(500000 * COIN, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 500000 * COIN); // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 10U); // in ten coins\n \n@@ -407,7 +423,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 7 / 10);\n         add_coin(1111 * MIN_CHANGE);\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 1111 * MIN_CHANGE); // we get the bigger coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -417,7 +433,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 8 / 10);\n         add_coin(1111 * MIN_CHANGE);\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(MIN_CHANGE, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(MIN_CHANGE, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);   // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n \n@@ -428,12 +444,12 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(MIN_CHANGE * 100);\n \n         // trying to make 100.01 from these three coins\n-        BOOST_CHECK(testWallet.SelectCoinsMinConf(MIN_CHANGE * 10001 / 100, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK(testWallet.SelectCoinsMinConf(MIN_CHANGE * 10001 / 100, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE * 10105 / 100); // we should get all coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change\n-        BOOST_CHECK(testWallet.SelectCoinsMinConf(MIN_CHANGE * 9990 / 100, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        BOOST_CHECK(testWallet.SelectCoinsMinConf(MIN_CHANGE * 9990 / 100, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n@@ -443,7 +459,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n              // Create 676 inputs (=  (old MAX_STANDARD_TX_SIZE == 100000)  / 148 bytes per input)\n              for (uint16_t j = 0; j < 676; j++)\n                  add_coin(amt);\n-             BOOST_CHECK(testWallet.SelectCoinsMinConf(2000, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+             BOOST_CHECK(testWallet.SelectCoinsMinConf(2000, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n              if (amt - 2000 < MIN_CHANGE) {\n                  // needs more than one input:\n                  uint16_t returnSize = std::ceil((2000.0 + MIN_CHANGE)/amt);\n@@ -465,17 +481,17 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n                 // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n                 // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, GroupCoins(vCoins), setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n+                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, GroupCoins(vCoins), setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n                 if (equal_sets(setCoinsRet, setCoinsRet2))\n                     fails++;\n             }\n@@ -495,8 +511,8 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n             {\n                 // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n                 // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, filter_standard, vCoins, setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, filter_standard, vCoins, setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n+                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, filter_standard, GroupCoins(vCoins), setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n+                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, filter_standard, GroupCoins(vCoins), setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n                 if (equal_sets(setCoinsRet, setCoinsRet2))\n                     fails++;\n             }\n@@ -521,7 +537,7 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n         add_coin(1000 * COIN);\n     add_coin(3 * COIN);\n \n-    BOOST_CHECK(testWallet.SelectCoinsMinConf(1003 * COIN, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+    BOOST_CHECK(testWallet.SelectCoinsMinConf(1003 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n     BOOST_CHECK_EQUAL(nValueRet, 1003 * COIN);\n     BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n@@ -559,8 +575,8 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n         CoinSet out_set;\n         CAmount out_value = 0;\n         bool bnb_used = false;\n-        BOOST_CHECK(testWallet.SelectCoinsMinConf(target, filter_standard, vCoins, out_set, out_value, coin_selection_params_bnb, bnb_used) ||\n-                    testWallet.SelectCoinsMinConf(target, filter_standard, vCoins, out_set, out_value, coin_selection_params_knapsack, bnb_used));\n+        BOOST_CHECK(testWallet.SelectCoinsMinConf(target, filter_standard, GroupCoins(vCoins), out_set, out_value, coin_selection_params_bnb, bnb_used) ||\n+                    testWallet.SelectCoinsMinConf(target, filter_standard, GroupCoins(vCoins), out_set, out_value, coin_selection_params_knapsack, bnb_used));\n         BOOST_CHECK_GE(out_value, target);\n     }\n }"
      },
      {
        "sha": "3c7e3302fb16104f8aeab8e8b76fd3aed503c8c6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 33,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
        "patch": "@@ -2431,15 +2431,14 @@ bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibi\n     return true;\n }\n \n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> vCoins,\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<OutputGroup> groups,\n                                  std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    std::vector<CInputCoin> utxo_pool;\n+    std::vector<OutputGroup> utxo_pool;\n     if (coin_selection_params.use_bnb) {\n-\n         // Get long term estimate\n         FeeCalculation feeCalc;\n         CCoinControl temp;\n@@ -2450,33 +2449,36 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         CAmount cost_of_change = GetDiscardRate(*this, ::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n         // Filter by the min conf specs and add to utxo_pool and calculate effective value\n-        for (const COutput &output : vCoins)\n-        {\n-            if (!OutputEligibleForSpending(output, eligibility_filter))\n-                continue;\n-\n-            CInputCoin coin(output.tx->tx, output.i);\n-            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n-            // Only include outputs that are positive effective value (i.e. not dust)\n-            if (coin.effective_value > 0) {\n-                coin.fee = output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes);\n-                coin.long_term_fee = output.nInputBytes < 0 ? 0 : long_term_feerate.GetFee(output.nInputBytes);\n-                utxo_pool.push_back(coin);\n+        for (OutputGroup& group : groups) {\n+            if (!group.EligibleForSpending(eligibility_filter)) continue;\n+\n+            group.fee = 0;\n+            group.long_term_fee = 0;\n+            group.effective_value = 0;\n+            for (auto it = group.m_outputs.begin(); it != group.m_outputs.end(); ) {\n+                const CInputCoin& coin = *it;\n+                CAmount effective_value = coin.txout.nValue - (coin.m_input_bytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes));\n+                // Only include outputs that are positive effective value (i.e. not dust)\n+                if (effective_value > 0) {\n+                    group.fee += coin.m_input_bytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n+                    group.long_term_fee += coin.m_input_bytes < 0 ? 0 : long_term_feerate.GetFee(coin.m_input_bytes);\n+                    group.effective_value += effective_value;\n+                    ++it;\n+                } else {\n+                    it = group.Discard(coin);\n+                }\n             }\n+            if (group.effective_value > 0) utxo_pool.push_back(group);\n         }\n         // Calculate the fees for things that aren't inputs\n         CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n         bnb_used = true;\n         return SelectCoinsBnB(utxo_pool, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n     } else {\n         // Filter by the min conf specs and add to utxo_pool\n-        for (const COutput &output : vCoins)\n-        {\n-            if (!OutputEligibleForSpending(output, eligibility_filter))\n-                continue;\n-\n-            CInputCoin coin = CInputCoin(output.tx->tx, output.i);\n-            utxo_pool.push_back(coin);\n+        for (const OutputGroup& group : groups) {\n+            if (!group.EligibleForSpending(eligibility_filter)) continue;\n+            utxo_pool.push_back(group);\n         }\n         bnb_used = false;\n         return KnapsackSolver(nTargetValue, utxo_pool, setCoinsRet, nValueRet);\n@@ -2498,7 +2500,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (!out.fSpendable)\n                  continue;\n             nValueRet += out.tx->tx->vout[out.i].nValue;\n-            setCoinsRet.insert(CInputCoin(out.tx->tx, out.i));\n+            setCoinsRet.insert(out.GetInputCoin());\n         }\n         return (nValueRet >= nTargetValue);\n     }\n@@ -2532,27 +2534,31 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     // remove preset inputs from vCoins\n     for (std::vector<COutput>::iterator it = vCoins.begin(); it != vCoins.end() && coin_control.HasSelected();)\n     {\n-        if (setPresetCoins.count(CInputCoin(it->tx->tx, it->i)))\n+        if (setPresetCoins.count(it->GetInputCoin()))\n             it = vCoins.erase(it);\n         else\n             ++it;\n     }\n \n+    // form groups from remaining coins; note that preset coins will not\n+    // automatically have their associated (same address) coins included\n+    std::vector<OutputGroup> groups = GroupOutputs(vCoins, !coin_control.m_avoid_partial_spends);\n+\n     size_t max_ancestors = (size_t)std::max<int64_t>(1, gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT));\n     size_t max_descendants = (size_t)std::max<int64_t>(1, gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT));\n     bool fRejectLongChains = gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n \n     bool res = nTargetValue <= nValueFromPresetInputs ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 6, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 6, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 1, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, 2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n \n     // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n-    setCoinsRet.insert(setPresetCoins.begin(), setPresetCoins.end());\n+    util::insert(setCoinsRet, setPresetCoins);\n \n     // add preset inputs to the total value selected\n     nValueRet += nValueFromPresetInputs;\n@@ -2666,7 +2672,7 @@ OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vec\n }\n \n bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet,\n-                                int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n+                         int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n {\n     CAmount nValue = 0;\n     int nChangePosRequest = nChangePosInOut;"
      },
      {
        "sha": "6c8063c47c55ff8fa4e4f0f1d6ea35eac7f7aaf1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59d6f7b4e2f847ec1f2ff46c84e6157655984f85/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
        "patch": "@@ -857,7 +857,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * completion the coin set and corresponding actual target value is\n      * assembled\n      */\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> vCoins,\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<OutputGroup> groups,\n         std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;"
      }
    ]
  },
  {
    "sha": "0128121101fb3ee82f3abd3973a967a4226ffe0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTI4MTIxMTAxZmIzZWU4MmYzYWJkMzk3M2E5NjdhNDIyNmZmZTBl",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-01-24T05:59:08Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-24T06:05:37Z"
      },
      "message": "test: Add basic testing for wallet groups",
      "tree": {
        "sha": "f3bd4481e95ed5b2761c0a785263e67614e9a10f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3bd4481e95ed5b2761c0a785263e67614e9a10f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0128121101fb3ee82f3abd3973a967a4226ffe0e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAltWwbEACgkQV692LbM1\nMyJ7nw//SH3qdW1Fm49Catx8pqUb3I/d7pQDKD3LBNZaydi11NMMCn2/+64DPuvY\nBreqA+2sFBvTbLKKCzGYa5NfA+xZv/XHn40fosHFf1uXVAtqGaj6lZ2hg4tgxwm8\nCKTZWrL9+9Xd7Qr/yQqV+KCN3I9enzr4ZbnDLeQLjZL/P9x3Cgs7C5WMnMMKFJsN\ngyzx/n/zklrcNBqHphtc6of2ZDNUgTTRbdRHhGoWxFNwzjLBoXAGnd0fSwdsEu8W\nB8YzJXxJfQhupvpgOXNe2DJxJ658WAkbjVFkoksS6vVTFt2NdmUhmrbhEG7figwe\nJ7DvSAYteiMfGgtjGxoOdS6w4omfrnnKJ3eN2rg1gnn+9+GglLoIwXmsjcXwBfIG\nO697Vj8vC+sjQ0c62rORwmKXSmIHof3ctR5LBnsC82+o3yuWWjI51ct+dQ7i5wZ9\nEp+vYzRHmlGggtYwj4djo9gB9WI1c4V3XkOdtORcRFBOEV8I2ZQWnmd3N64fUWBI\npKXjAM3N6T4Ivky4A+GplPV3H6x4lQ7HkWkpNgMoePQs1huXQFa8QHWfEbLBdKG+\n9Uiml20cfUNl0ZJ9jAGTW4PI9CCO5Ah0LpEO0J9xMXSTNCy00ZGEP74qgSUwXLS7\n0Dcqa7MkdVzClBT0KfMf/4YawG8HJGCdFzxAw42rHrOfU48ZAzY=\n=8IyD\n-----END PGP SIGNATURE-----",
        "payload": "tree f3bd4481e95ed5b2761c0a785263e67614e9a10f\nparent 59d6f7b4e2f847ec1f2ff46c84e6157655984f85\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1516773548 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532412337 +0900\n\ntest: Add basic testing for wallet groups\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0128121101fb3ee82f3abd3973a967a4226ffe0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0128121101fb3ee82f3abd3973a967a4226ffe0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0128121101fb3ee82f3abd3973a967a4226ffe0e/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59d6f7b4e2f847ec1f2ff46c84e6157655984f85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59d6f7b4e2f847ec1f2ff46c84e6157655984f85"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 68,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d324cd9bba8f67c4d1c706e3c72601013de183d5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0128121101fb3ee82f3abd3973a967a4226ffe0e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0128121101fb3ee82f3abd3973a967a4226ffe0e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=0128121101fb3ee82f3abd3973a967a4226ffe0e",
        "patch": "@@ -105,6 +105,7 @@\n     'rpc_users.py',\n     'feature_proxy.py',\n     'rpc_signrawtransaction.py',\n+    'wallet_groups.py',\n     'p2p_disconnect_ban.py',\n     'rpc_decodescript.py',\n     'rpc_blockchain.py',"
      },
      {
        "sha": "0d27815da08b4dbadd0814d270290259e00e588d",
        "filename": "test/functional/wallet_groups.py",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0128121101fb3ee82f3abd3973a967a4226ffe0e/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0128121101fb3ee82f3abd3973a967a4226ffe0e/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=0128121101fb3ee82f3abd3973a967a4226ffe0e",
        "patch": "@@ -0,0 +1,67 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet group functionality.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+def assert_approx(v, vexp, vspan=0.00001):\n+    if v < vexp - vspan:\n+        raise AssertionError(\"%s < [%s..%s]\" % (str(v), str(vexp - vspan), str(vexp + vspan)))\n+    if v > vexp + vspan:\n+        raise AssertionError(\"%s > [%s..%s]\" % (str(v), str(vexp - vspan), str(vexp + vspan)))\n+\n+class WalletGroupTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        self.extra_args = [[], [], ['-avoidpartialspends']]\n+\n+    def run_test (self):\n+        # Mine some coins\n+        self.nodes[0].generate(110)\n+\n+        # Get some addresses from the two nodes\n+        addr1 = [self.nodes[1].getnewaddress() for i in range(3)]\n+        addr2 = [self.nodes[2].getnewaddress() for i in range(3)]\n+        addrs = addr1 + addr2\n+\n+        # Send 1 + 0.5 coin to each address\n+        [self.nodes[0].sendtoaddress(addr, 1.0) for addr in addrs]\n+        [self.nodes[0].sendtoaddress(addr, 0.5) for addr in addrs]\n+\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # For each node, send 0.2 coins back to 0;\n+        # - node[1] should pick one 0.5 UTXO and leave the rest\n+        # - node[2] should pick one (1.0 + 0.5) UTXO group corresponding to a\n+        #   given address, and leave the rest\n+        txid1 = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 0.2)\n+        tx1 = self.nodes[1].getrawtransaction(txid1, True)\n+        # txid1 should have 1 input and 2 outputs\n+        assert_equal(1, len(tx1[\"vin\"]))\n+        assert_equal(2, len(tx1[\"vout\"]))\n+        # one output should be 0.2, the other should be ~0.3\n+        v = [vout[\"value\"] for vout in tx1[\"vout\"]]\n+        v.sort()\n+        assert_approx(v[0], 0.2)\n+        assert_approx(v[1], 0.3, 0.0001)\n+\n+        txid2 = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 0.2)\n+        tx2 = self.nodes[2].getrawtransaction(txid2, True)\n+        # txid2 should have 2 inputs and 2 outputs\n+        assert_equal(2, len(tx2[\"vin\"]))\n+        assert_equal(2, len(tx2[\"vout\"]))\n+        # one output should be 0.2, the other should be ~1.3\n+        v = [vout[\"value\"] for vout in tx2[\"vout\"]]\n+        v.sort()\n+        assert_approx(v[0], 0.2)\n+        assert_approx(v[1], 1.3, 0.0001)\n+\n+if __name__ == '__main__':\n+    WalletGroupTest().main ()"
      }
    ]
  },
  {
    "sha": "43e04d13b1ffc02b1082176e87f420198b40c7b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0M2UwNGQxM2IxZmZjMDJiMTA4MjE3NmU4N2Y0MjAxOThiNDBjN2Ix",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-03-15T05:33:33Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-24T06:05:38Z"
      },
      "message": "wallet: Remove deprecated OutputEligibleForSpending",
      "tree": {
        "sha": "b204fcb0ce6e9edacd6ae5da913c043605582844",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b204fcb0ce6e9edacd6ae5da913c043605582844"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43e04d13b1ffc02b1082176e87f420198b40c7b1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAltWwbIACgkQV692LbM1\nMyKnGw/+Jn6j1i4NUndLGyKu5mGwGYmOlilbnaTrcNgV7KrZ45ptMBwcwNEi8rS+\nxY6O5TvsiEX8kgS+dC5X4JwQdYzPtVG00ZO13eoUkWeiYQEUqKATgGfs51tveQwc\n7H2lQKsYlIvb3H8UamDX8Ikf8xTL4goFv/wozC88JRr7BqYJgmKVO5ejqWLpZj6P\n4LvH7Bz7kwgJEiaNeRQ+3JSq2xt98Q7UODqdrcEQHw4a8CTjp8oFtvWe1rVmumPy\ngTUzwTk60Yj7xky98TpKrHQbnASYIVDcA+IJ+IM31wiFYxlmcmgb/DTYj5QMbWv/\ntjjl1bC24UhojzjYhQHtMtmdekPmchQYOV4O2+O/rDvX8km0BRqkL83SHeNqLcmW\nKZ/WVz0ICG4+Y5c//XIEZBiF33IPfTyR+Su3Wl7y62zbSHcQVwZ6Ix7TJ1LS+Zi+\n2ocamAmQ4IZPIYsabHgW0VMp0fXtCefu4xs+B4encA+/rhB6EioE60EiaqOpZfD1\nOAt36aHmMjfIgII4aHj6obuGL2ZqBkWJ+tKUOOCT7h0O1+r+FAg7fPTbGjncLbat\nnkdfHx/GRCnzuvWK4FAznuvzU+7DdUa0QVjxmAwQA6Z5HA8wWNaLhGHLlD1MbwVI\nb4LZXenWW5FBDiMy9Xy3Hnq49BaQ2M564bomUFiimHGzJzvx+To=\n=UQtt\n-----END PGP SIGNATURE-----",
        "payload": "tree b204fcb0ce6e9edacd6ae5da913c043605582844\nparent 0128121101fb3ee82f3abd3973a967a4226ffe0e\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1521092013 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532412338 +0900\n\nwallet: Remove deprecated OutputEligibleForSpending\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43e04d13b1ffc02b1082176e87f420198b40c7b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/43e04d13b1ffc02b1082176e87f420198b40c7b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43e04d13b1ffc02b1082176e87f420198b40c7b1/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0128121101fb3ee82f3abd3973a967a4226ffe0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0128121101fb3ee82f3abd3973a967a4226ffe0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0128121101fb3ee82f3abd3973a967a4226ffe0e"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 0,
      "deletions": 20
    },
    "files": [
      {
        "sha": "e6c513a531cf5eb06eca6b2ccc8bf5db3da5ec70",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43e04d13b1ffc02b1082176e87f420198b40c7b1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43e04d13b1ffc02b1082176e87f420198b40c7b1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=43e04d13b1ffc02b1082176e87f420198b40c7b1",
        "patch": "@@ -2414,23 +2414,6 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibility_filter) const\n-{\n-    if (!output.fSpendable)\n-        return false;\n-\n-    if (output.nDepth < (output.tx->IsFromMe(ISMINE_ALL) ? eligibility_filter.conf_mine : eligibility_filter.conf_theirs))\n-        return false;\n-\n-    size_t ancestors, descendants;\n-    mempool.GetTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-    if (ancestors > eligibility_filter.max_ancestors || descendants > eligibility_filter.max_descendants) {\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<OutputGroup> groups,\n                                  std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const\n {"
      },
      {
        "sha": "122649d5755d6bfb3c23c140b26229fcefbb852c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43e04d13b1ffc02b1082176e87f420198b40c7b1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43e04d13b1ffc02b1082176e87f420198b40c7b1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=43e04d13b1ffc02b1082176e87f420198b40c7b1",
        "patch": "@@ -1188,9 +1188,6 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     void LearnAllRelatedScripts(const CPubKey& key);\n \n-    /** Whether a given output is spendable by this wallet */\n-    bool OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibility_filter) const;\n-\n     /** set a single wallet flag */\n     void SetWalletFlag(uint64_t flags);\n "
      }
    ]
  },
  {
    "sha": "e00b4699cc6d2ee5697d38dd6607eb2631c9b77a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDBiNDY5OWNjNmQyZWU1Njk3ZDM4ZGQ2NjA3ZWIyNjMxYzliNzdh",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-17T09:24:07Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-24T06:05:38Z"
      },
      "message": "clean-up: Remove no longer used ivars from CInputCoin",
      "tree": {
        "sha": "3144b2dd3c4c6762d17f891aa53f492da2c39820",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3144b2dd3c4c6762d17f891aa53f492da2c39820"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e00b4699cc6d2ee5697d38dd6607eb2631c9b77a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAltWwbIACgkQV692LbM1\nMyKcOg/+N+DWx30FYyev+BZNdIgao6E7IO5Nx1/85sPj6eRrTucmRTQtXAbdnLYF\naTGtlzjq0Jt6nWAFhLAuALE2NykL1F8tO0oZ4IhUCv4rW6DwTzdI77O2zBVXZsaR\nHIevWUIcBdNAOhiokAHpzVwC7zSGZn+fK+H5sS6e13RG+8GbW3p6GiCqQ/Elg+yi\n2YwXH8a0jAIDVK2cI1Q5iPmlX9SFMDJQ6ZNmeEA3Xn31KxNfykAyg4vKBAq1JVgp\nR/bBJIH8IbBzWOkxoadIrmtmbpSgLMmGjKDg6OoJLkK3w6PHuiXWFAIJOln9OMdb\nWn7l9vqPjLomhdy6STZKJqqFP5Po1vT2A3Db+YXOGhD1vnvcq3UugZv2Hhkqakxb\nLGVr0GnOME4oCQOqH5Iz19F9v21Ka4Eg1dyy107HII575K8ieBdZa192ZRNyy4QM\n3HBTDy+Hn8CCCP0FauOa3yzizz95xQxbgemJh1kg3JGupI7qIhskqT52amcQsTI8\n9rtARSD8uEvWSsPz0b8PCb6HaetMqu5zvHif/B7gnK+leCul9M+L9qposq2QfH16\nTchaxVK2cbMBUXkFrzwfiTeGI/Trd7ZC35C3+4/m0rULWBkaG3RAqfyja5awIYTK\n8TShNq8vQC4z51vKWYt+s8e1n6YG4JZMp30TIHmEKYfkWWhAvOc=\n=Z8Bf\n-----END PGP SIGNATURE-----",
        "payload": "tree 3144b2dd3c4c6762d17f891aa53f492da2c39820\nparent 43e04d13b1ffc02b1082176e87f420198b40c7b1\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1531819447 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532412338 +0900\n\nclean-up: Remove no longer used ivars from CInputCoin\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e00b4699cc6d2ee5697d38dd6607eb2631c9b77a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e00b4699cc6d2ee5697d38dd6607eb2631c9b77a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e00b4699cc6d2ee5697d38dd6607eb2631c9b77a/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "43e04d13b1ffc02b1082176e87f420198b40c7b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43e04d13b1ffc02b1082176e87f420198b40c7b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43e04d13b1ffc02b1082176e87f420198b40c7b1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1be776e6958fea331ba930cd8ec0386314058069",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e00b4699cc6d2ee5697d38dd6607eb2631c9b77a/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e00b4699cc6d2ee5697d38dd6607eb2631c9b77a/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=e00b4699cc6d2ee5697d38dd6607eb2631c9b77a",
        "patch": "@@ -36,8 +36,6 @@ class CInputCoin {\n     COutPoint outpoint;\n     CTxOut txout;\n     CAmount effective_value;\n-    CAmount fee = 0;\n-    CAmount long_term_fee = 0;\n \n     /** Pre-computed estimated size of this output as a fully-signed input in a transaction. Can be -1 if it could not be calculated */\n     int m_input_bytes{-1};"
      }
    ]
  },
  {
    "sha": "232f96f5c8a3920c09db92f4dbac2ad7d10ce8cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzJmOTZmNWM4YTM5MjBjMDlkYjkyZjRkYmFjMmFkN2QxMGNlOGNm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-18T09:37:09Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-24T06:05:38Z"
      },
      "message": "doc: Add release notes for -avoidpartialspends",
      "tree": {
        "sha": "9dd97437ad51db45db9b790ea9d702eddfc8776e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dd97437ad51db45db9b790ea9d702eddfc8776e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/232f96f5c8a3920c09db92f4dbac2ad7d10ce8cf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAltWwbIACgkQV692LbM1\nMyIjhQ//f/Z9sTbJFx0DuVpANEMBHWWYErimK23GMaDTifod9ItZn8aCqZclnHaC\nwnlJFEcKjziHBKBUWK3Fgs7jSbuv7cEVqo+rLVRSBZKvWB9EfbmOpyn/8BVujXH4\nMU0ZYOjq4mZWS0QYuuPHk99xHxn/aBUPsYF+GmYOBuP/twSZhp+2/tddhIy6Fa/a\n9FufOWVbg+/uNRqeKHSY9I9y1ZPJwm7PattWLkVIDfzMSdDDE8nGIdt4QdPZwAJ/\nH3lxY8HozOTUbKHnEWbbY9nvinjNNmgNuEZQ6TjgBQfVdvhZFsyBDrkUuwnrOrKA\nKe5ygMJVNFmOdJJYbfR8NQa/pNhwz7kjPUgtnUMlO9PWZ3myPUx0PMe6H3WYbgAC\nJDO+Yh6Z42f46YEaKIFWE6OzpZg69mflzbc2afRMlvxrbKcUobPkNJ1bbrCwr/rW\nHeFV/CyYGWDDsgvobyEZTT+Yx2SkdeU+yaRPyDD0yatXojCne+GARtFWzCEA2jJu\n0duBW0Ra/an7MpzZHOHqPiMPrDehI2vI4zRSl6pwO35WAUSR+gCfa3C/+hM7DI6D\n+p3f6AYitFftpX8ykcuIdpK5eAsFhYvwp67wWfLOa/WTSjlFDqM+20jwIIVOqdE0\nLlqR3tcI1ord5suKaRFt9IuqdY1WQl/6Rp0cpshIj1iYobIvzw0=\n=wBR9\n-----END PGP SIGNATURE-----",
        "payload": "tree 9dd97437ad51db45db9b790ea9d702eddfc8776e\nparent e00b4699cc6d2ee5697d38dd6607eb2631c9b77a\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1531906629 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532412338 +0900\n\ndoc: Add release notes for -avoidpartialspends\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232f96f5c8a3920c09db92f4dbac2ad7d10ce8cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/232f96f5c8a3920c09db92f4dbac2ad7d10ce8cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/232f96f5c8a3920c09db92f4dbac2ad7d10ce8cf/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e00b4699cc6d2ee5697d38dd6607eb2631c9b77a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e00b4699cc6d2ee5697d38dd6607eb2631c9b77a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e00b4699cc6d2ee5697d38dd6607eb2631c9b77a"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "293a00ad75db42b8bc3c42d475369e58dff7b380",
        "filename": "doc/release-notes-pr12257.md",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/232f96f5c8a3920c09db92f4dbac2ad7d10ce8cf/doc/release-notes-pr12257.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/232f96f5c8a3920c09db92f4dbac2ad7d10ce8cf/doc/release-notes-pr12257.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr12257.md?ref=232f96f5c8a3920c09db92f4dbac2ad7d10ce8cf",
        "patch": "@@ -0,0 +1,9 @@\n+Notable changes\n+===============\n+\n+Coin selection\n+--------------\n+- A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will try to spend UTXO's that point at the same destination\n+  together. This is a privacy increase, as there will no longer be cases where a wallet will inadvertently spend only parts of the coins sent to\n+  the same address (note that if someone were to send coins to that address after it was used, those coins will still be included in future\n+  coin selections)."
      }
    ]
  }
]