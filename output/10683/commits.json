[
  {
    "sha": "df7e2f057b6c9f0f7c950f9077dc63a577f54117",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjdlMmYwNTdiNmM5ZjBmN2M5NTBmOTA3N2RjNjNhNTc3ZjU0MTE3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-27T14:50:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-29T10:02:43Z"
      },
      "message": "rpc: Move the `generate` RPC call to rpcwallet\n\nThis makes it possible to mine to any wallet when multi-wallet mode is added.\nSolves the same problem as #10649, but IMO in a cleaner way.\n\nIt also gets rid of the circuitous `ScriptForMining` method on\n`CValidationInterface`, which really doesn't belong there.\n\nAfter this change it's still possible to mine without wallet through\n`generatetoaddress`.",
      "tree": {
        "sha": "15eb622e97f335d74ceebc2583dbcd0ca5ffa4fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15eb622e97f335d74ceebc2583dbcd0ca5ffa4fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df7e2f057b6c9f0f7c950f9077dc63a577f54117",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7e2f057b6c9f0f7c950f9077dc63a577f54117",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df7e2f057b6c9f0f7c950f9077dc63a577f54117",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7e2f057b6c9f0f7c950f9077dc63a577f54117/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac52492cd22782d7b09c78c198fb6fd8eb1da57c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac52492cd22782d7b09c78c198fb6fd8eb1da57c"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 62,
      "deletions": 44
    },
    "files": [
      {
        "sha": "8ecd3918045b672fbdb1fbe014b661d991ef23ae",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -127,6 +127,7 @@ BITCOIN_CORE_H = \\\n   reverselock.h \\\n   rpc/blockchain.h \\\n   rpc/client.h \\\n+  rpc/mining.h \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n   rpc/register.h \\"
      },
      {
        "sha": "e50742f36e37a57c2103b02427ecc6185d472525",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 37,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -18,6 +18,7 @@\n #include \"policy/fees.h\"\n #include \"pow.h\"\n #include \"rpc/blockchain.h\"\n+#include \"rpc/mining.h\"\n #include \"rpc/server.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n@@ -141,42 +142,6 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n     return blockHashes;\n }\n \n-UniValue generate(const JSONRPCRequest& request)\n-{\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"generate nblocks ( maxtries )\\n\"\n-            \"\\nMine up to nblocks blocks immediately (before the RPC call returns)\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n-            \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n-            \"\\nResult:\\n\"\n-            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nGenerate 11 blocks\\n\"\n-            + HelpExampleCli(\"generate\", \"11\")\n-        );\n-\n-    int nGenerate = request.params[0].get_int();\n-    uint64_t nMaxTries = 1000000;\n-    if (request.params.size() > 1) {\n-        nMaxTries = request.params[1].get_int();\n-    }\n-\n-    std::shared_ptr<CReserveScript> coinbaseScript;\n-    GetMainSignals().ScriptForMining(coinbaseScript);\n-\n-    // If the keypool is exhausted, no script is returned at all.  Catch this.\n-    if (!coinbaseScript)\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n-\n-    //throw an error if no script was provided\n-    if (coinbaseScript->reserveScript.empty())\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n-\n-    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, true);\n-}\n-\n UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n@@ -962,7 +927,6 @@ static const CRPCCommand commands[] =\n     { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,  {\"template_request\"} },\n     { \"mining\",             \"submitblock\",            &submitblock,            true,  {\"hexdata\",\"dummy\"} },\n \n-    { \"generating\",         \"generate\",               &generate,               true,  {\"nblocks\",\"maxtries\"} },\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },\n \n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },"
      },
      {
        "sha": "a148d851da0000805729a0eacdc4e33c1de4fe62",
        "filename": "src/rpc/mining.h",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/rpc/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/rpc/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.h?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -0,0 +1,15 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_MINING_H\n+#define BITCOIN_RPC_MINING_H\n+\n+#include \"script/script.h\"\n+\n+#include <univalue.h>\n+\n+/** Generate blocks (mine) */\n+UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript);\n+\n+#endif"
      },
      {
        "sha": "be2f20b8635d9f727e65722b4b2c108e48b30385",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -21,12 +21,10 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.ScriptForMining.disconnect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -39,7 +37,6 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n }\n \n void UnregisterAllValidationInterfaces() {\n-    g_signals.ScriptForMining.disconnect_all_slots();\n     g_signals.BlockChecked.disconnect_all_slots();\n     g_signals.Broadcast.disconnect_all_slots();\n     g_signals.Inventory.disconnect_all_slots();"
      },
      {
        "sha": "17545018df75af6067f2247fd3e3aa2fde0066bf",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -40,7 +40,6 @@ class CValidationInterface {\n     virtual void Inventory(const uint256 &hash) {}\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n     friend void ::RegisterValidationInterface(CValidationInterface*);\n     friend void ::UnregisterValidationInterface(CValidationInterface*);\n@@ -72,8 +71,6 @@ struct CMainSignals {\n      * callback was generated (not necessarily now)\n      */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n-    /** Notifies listeners that a key for mining is required (coinbase) */\n-    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */"
      },
      {
        "sha": "93d3920d21b6e9440a636644e99cae2688df794a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -15,6 +15,7 @@\n #include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"policy/rbf.h\"\n+#include \"rpc/mining.h\"\n #include \"rpc/server.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\"\n@@ -2922,6 +2923,47 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue generate(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"generate nblocks ( maxtries )\\n\"\n+            \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n+            \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nGenerate 11 blocks\\n\"\n+            + HelpExampleCli(\"generate\", \"11\")\n+        );\n+\n+    int nGenerate = request.params[0].get_int();\n+    uint64_t nMaxTries = 1000000;\n+    if (request.params.size() > 1) {\n+        nMaxTries = request.params[1].get_int();\n+    }\n+\n+    std::shared_ptr<CReserveScript> coinbaseScript;\n+    pwallet->GetScriptForMining(coinbaseScript);\n+\n+    // If the keypool is exhausted, no script is returned at all.  Catch this.\n+    if (!coinbaseScript)\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+\n+    //throw an error if no script was provided\n+    if (coinbaseScript->reserveScript.empty())\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n+\n+    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, true);\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -2985,6 +3027,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true,   {\"oldpassphrase\",\"newpassphrase\"} },\n     { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true,   {\"passphrase\",\"timeout\"} },\n     { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        true,   {\"txid\"} },\n+\n+    { \"generating\",         \"generate\",                 &generate,                 true,   {\"nblocks\",\"maxtries\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "2af61b1aa5ac5f9ee4ac366dcaf742a7c02a93fd",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7e2f057b6c9f0f7c950f9077dc63a577f54117/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "patch": "@@ -1025,7 +1025,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void GetScriptForMining(std::shared_ptr<CReserveScript> &script) override;\n+    void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n     \n     unsigned int GetKeyPoolSize()\n     {"
      }
    ]
  },
  {
    "sha": "2a962834febc9f56126ef06cf1bd5e1b02370278",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTk2MjgzNGZlYmM5ZjU2MTI2ZWYwNmNmMWJkNWUxYjAyMzcwMjc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-28T06:32:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-06-29T10:02:44Z"
      },
      "message": "rpc: Update `generate` for developer notes\n\nFix nits by John Newbery.",
      "tree": {
        "sha": "ceab0a93b505e6c9af7dbb18ce99b3f35bc3269e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ceab0a93b505e6c9af7dbb18ce99b3f35bc3269e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a962834febc9f56126ef06cf1bd5e1b02370278",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a962834febc9f56126ef06cf1bd5e1b02370278",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a962834febc9f56126ef06cf1bd5e1b02370278",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a962834febc9f56126ef06cf1bd5e1b02370278/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7e2f057b6c9f0f7c950f9077dc63a577f54117",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df7e2f057b6c9f0f7c950f9077dc63a577f54117"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 16,
      "deletions": 12
    },
    "files": [
      {
        "sha": "e0c7ab9f0f98686805fd07883c811576c53960a8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a962834febc9f56126ef06cf1bd5e1b02370278/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a962834febc9f56126ef06cf1bd5e1b02370278/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2a962834febc9f56126ef06cf1bd5e1b02370278",
        "patch": "@@ -2927,10 +2927,11 @@ UniValue generate(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n             \"generate nblocks ( maxtries )\\n\"\n             \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\"\n@@ -2943,25 +2944,28 @@ UniValue generate(const JSONRPCRequest& request)\n             \"\\nGenerate 11 blocks\\n\"\n             + HelpExampleCli(\"generate\", \"11\")\n         );\n+    }\n \n-    int nGenerate = request.params[0].get_int();\n-    uint64_t nMaxTries = 1000000;\n-    if (request.params.size() > 1) {\n-        nMaxTries = request.params[1].get_int();\n+    int num_generate = request.params[0].get_int();\n+    uint64_t max_tries = 1000000;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        max_tries = request.params[1].get_int();\n     }\n \n-    std::shared_ptr<CReserveScript> coinbaseScript;\n-    pwallet->GetScriptForMining(coinbaseScript);\n+    std::shared_ptr<CReserveScript> coinbase_script;\n+    pwallet->GetScriptForMining(coinbase_script);\n \n     // If the keypool is exhausted, no script is returned at all.  Catch this.\n-    if (!coinbaseScript)\n+    if (!coinbase_script) {\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    }\n \n     //throw an error if no script was provided\n-    if (coinbaseScript->reserveScript.empty())\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n+    if (coinbase_script->reserveScript.empty()) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available\");\n+    }\n \n-    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, true);\n+    return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp"
      }
    ]
  }
]