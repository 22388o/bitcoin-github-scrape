[
  {
    "sha": "53e53a33c939949665f60d5eeb82abbb21f97128",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2U1M2EzM2M5Mzk5NDk2NjVmNjBkNWVlYjgyYWJiYjIxZjk3MTI4",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-09-25T23:18:51Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-14T11:29:38Z"
      },
      "message": "BIP112: Implement CHECKSEQUENCEVERIFY\n\n- Replace NOP3 with CHECKSEQUENCEVERIFY (BIP112)\n  <nSequence> CHECKSEQUENCEVERIFY -> <nSequence>\n- Fails if txin.nSequence < nSequence, allowing funds of a txout to be locked for a number of blocks or a duration of time after its inclusion in a block.\n- Pull most of CheckLockTime() out into VerifyLockTime(), a local function that will be reused for CheckSequence()\n- Add bitwise AND operator to CScriptNum\n- Enable CHECKSEQUENCEVERIFY as a standard script verify flag\n- Transactions that fail CSV verification will be rejected from the mempool, making it easy to test the feature. However blocks containing \"invalid\" CSV-using transactions will still be accepted; this is *not* the soft-fork required to actually enable CSV for production use.",
      "tree": {
        "sha": "6f0f956bcfea1408ca8117bef583a82cbe445efe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f0f956bcfea1408ca8117bef583a82cbe445efe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53e53a33c939949665f60d5eeb82abbb21f97128",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53e53a33c939949665f60d5eeb82abbb21f97128",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53e53a33c939949665f60d5eeb82abbb21f97128",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53e53a33c939949665f60d5eeb82abbb21f97128/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80d1f2e48364f05b2cdf44239b3a1faa0277e58e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80d1f2e48364f05b2cdf44239b3a1faa0277e58e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80d1f2e48364f05b2cdf44239b3a1faa0277e58e"
      }
    ],
    "stats": {
      "total": 256,
      "additions": 247,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4f9354e36fe710a1076889852478c544bf255218",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53e53a33c939949665f60d5eeb82abbb21f97128/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53e53a33c939949665f60d5eeb82abbb21f97128/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=53e53a33c939949665f60d5eeb82abbb21f97128",
        "patch": "@@ -40,6 +40,7 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n                                                          SCRIPT_VERIFY_CLEANSTACK |\n                                                          SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                         SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n                                                          SCRIPT_VERIFY_LOW_S;\n \n /** For convenience, standard but not mandatory verify flags. */"
      },
      {
        "sha": "4e87006f5783f7aeef8f712881e5569b01583a55",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 7,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53e53a33c939949665f60d5eeb82abbb21f97128/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53e53a33c939949665f60d5eeb82abbb21f97128/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=53e53a33c939949665f60d5eeb82abbb21f97128",
        "patch": "@@ -373,7 +373,44 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKSEQUENCEVERIFY:\n+                {\n+                    if (!(flags & SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {\n+                        // not enabled; treat as a NOP3\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        }\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // nSequence, like nLockTime, is a 32-bit unsigned integer\n+                    // field. See the comment in CHECKLOCKTIMEVERIFY regarding\n+                    // 5-byte numeric operands.\n+                    const CScriptNum nSequence(stacktop(-1), fRequireMinimal, 5);\n+\n+                    // In the rare event that the argument may be < 0 due to\n+                    // some arithmetic being done first, you can always use\n+                    // 0 MAX CHECKSEQUENCEVERIFY.\n+                    if (nSequence < 0)\n+                        return set_error(serror, SCRIPT_ERR_NEGATIVE_LOCKTIME);\n+\n+                    // To provide for future soft-fork extensibility, if the\n+                    // operand has the disabled lock-time flag set,\n+                    // CHECKSEQUENCEVERIFY behaves as a NOP.\n+                    if ((nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) != 0)\n+                        break;\n+\n+                    // Compare the specified sequence number with the input.\n+                    if (!checker.CheckSequence(nSequence))\n+                        return set_error(serror, SCRIPT_ERR_UNSATISFIED_LOCKTIME);\n+\n+                    break;\n+                }\n+\n+                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 {\n                     if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n@@ -1120,27 +1157,33 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     return true;\n }\n \n-bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+static bool VerifyLockTime(int64_t txToLockTime, int64_t nThreshold, const CScriptNum& nLockTime)\n {\n     // There are two kinds of nLockTime: lock-by-blockheight\n     // and lock-by-blocktime, distinguished by whether\n-    // nLockTime < LOCKTIME_THRESHOLD.\n+    // nLockTime < nThreshold (either LOCKTIME_THRESHOLD or\n+    // CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG).\n     //\n     // We want to compare apples to apples, so fail the script\n     // unless the type of nLockTime being tested is the same as\n     // the nLockTime in the transaction.\n     if (!(\n-        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n-        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+        (txToLockTime <  nThreshold && nLockTime <  nThreshold) ||\n+        (txToLockTime >= nThreshold && nLockTime >= nThreshold)\n     ))\n         return false;\n \n     // Now that we know we're comparing apples-to-apples, the\n     // comparison is a simple numeric one.\n-    if (nLockTime > (int64_t)txTo->nLockTime)\n+    if (nLockTime > txToLockTime)\n         return false;\n \n-    // Finally the nLockTime feature can be disabled and thus\n+    return true;\n+}\n+\n+bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // The nLockTime feature can be disabled and thus\n     // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n     // finalized by setting nSequence to maxint. The\n     // transaction would be allowed into the blockchain, making\n@@ -1153,6 +1196,38 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n         return false;\n \n+    if (!::VerifyLockTime((int64_t)txTo->nLockTime, LOCKTIME_THRESHOLD, nLockTime))\n+        return false;\n+\n+    return true;\n+}\n+\n+bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) const\n+{\n+    // Relative lock times are supported by comparing the passed\n+    // in operand to the sequence number of the input.\n+    const int64_t txToSequence = (int64_t)txTo->vin[nIn].nSequence;\n+\n+    // Fail if the transaction's version number is not set high\n+    // enough to trigger BIP 68 rules.\n+    if (static_cast<uint32_t>(txTo->nVersion) < 2)\n+        return false;\n+\n+    // Sequence numbers with their most significant bit set are not\n+    // consensus constrained. Testing that the transaction's sequence\n+    // number do not have this bit set prevents using this property\n+    // to get around a CHECKSEQUENCEVERIFY check.\n+    if (txToSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG)\n+        return false;\n+\n+    // Mask off any bits that do not have consensus-enforced meaning\n+    // before doing the integer comparisons of ::VerifyLockTime.\n+    const uint32_t nLockTimeMask = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG\n+                                 | CTxIn::SEQUENCE_LOCKTIME_MASK;\n+\n+    if (!::VerifyLockTime(txToSequence & nLockTimeMask, CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG, nSequence & nLockTimeMask))\n+        return false;\n+\n     return true;\n }\n "
      },
      {
        "sha": "e5cb7290f2225585c94875c2fbb2084b275b3020",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53e53a33c939949665f60d5eeb82abbb21f97128/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53e53a33c939949665f60d5eeb82abbb21f97128/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=53e53a33c939949665f60d5eeb82abbb21f97128",
        "patch": "@@ -81,6 +81,11 @@ enum\n     //\n     // See BIP65 for details.\n     SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),\n+\n+    // support CHECKSEQUENCEVERIFY opcode\n+    //\n+    // See BIP112 for details\n+    SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n@@ -100,6 +105,11 @@ class BaseSignatureChecker\n          return false;\n     }\n \n+    virtual bool CheckSequence(const CScriptNum& nSequence) const\n+    {\n+         return false;\n+    }\n+\n     virtual ~BaseSignatureChecker() {}\n };\n \n@@ -116,6 +126,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n+    bool CheckSequence(const CScriptNum& nSequence) const;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "d2a68a07ba149571fb445c2284f8fc8df4ede228",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53e53a33c939949665f60d5eeb82abbb21f97128/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53e53a33c939949665f60d5eeb82abbb21f97128/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=53e53a33c939949665f60d5eeb82abbb21f97128",
        "patch": "@@ -165,6 +165,7 @@ enum opcodetype\n     OP_CHECKLOCKTIMEVERIFY = 0xb1,\n     OP_NOP2 = OP_CHECKLOCKTIMEVERIFY,\n     OP_NOP3 = 0xb2,\n+    OP_CHECKSEQUENCEVERIFY = OP_NOP3,\n     OP_NOP4 = 0xb3,\n     OP_NOP5 = 0xb4,\n     OP_NOP6 = 0xb5,\n@@ -259,6 +260,11 @@ class CScriptNum\n     inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }\n     inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }\n \n+    inline CScriptNum operator&(   const int64_t& rhs)    const { return CScriptNum(m_value & rhs);}\n+    inline CScriptNum operator&(   const CScriptNum& rhs) const { return operator&(rhs.m_value);   }\n+\n+    inline CScriptNum& operator&=( const CScriptNum& rhs)       { return operator&=(rhs.m_value);  }\n+\n     inline CScriptNum operator-()                         const\n     {\n         assert(m_value != std::numeric_limits<int64_t>::min());\n@@ -287,6 +293,12 @@ class CScriptNum\n         return *this;\n     }\n \n+    inline CScriptNum& operator&=( const int64_t& rhs)\n+    {\n+        m_value &= rhs;\n+        return *this;\n+    }\n+\n     int getint() const\n     {\n         if (m_value > std::numeric_limits<int>::max())"
      },
      {
        "sha": "26df33932fdd690db0122d36ca64557acff1d018",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53e53a33c939949665f60d5eeb82abbb21f97128/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53e53a33c939949665f60d5eeb82abbb21f97128/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=53e53a33c939949665f60d5eeb82abbb21f97128",
        "patch": "@@ -35,7 +35,7 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,\n     SCRIPT_ERR_UNBALANCED_CONDITIONAL,\n \n-    /* OP_CHECKLOCKTIMEVERIFY */\n+    /* CHECKLOCKTIMEVERIFY and CHECKSEQUENCEVERIFY */\n     SCRIPT_ERR_NEGATIVE_LOCKTIME,\n     SCRIPT_ERR_UNSATISFIED_LOCKTIME,\n "
      },
      {
        "sha": "2d7d9b958514b244baf9c7bddc218e53cfe6fdb6",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53e53a33c939949665f60d5eeb82abbb21f97128/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53e53a33c939949665f60d5eeb82abbb21f97128/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=53e53a33c939949665f60d5eeb82abbb21f97128",
        "patch": "@@ -201,5 +201,59 @@\n [[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n \"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH,DERSIG\"],\n \n+[\"CHECKSEQUENCEVERIFY tests\"],\n+\n+[\"By-height locks, with argument just beyond txin.nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feff40000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"By-time locks, with argument just beyond txin.nSequence (but within numerical boundries)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194305 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feff40000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument missing\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument negative with by-blockheight txin.nSequence=0\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument negative with by-blocktime txin.nSequence=CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument/tx height/time mismatch, both versions\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"65535 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"6 byte non-minimally-encoded arguments are invalid even if their contents are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff00000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Failure due to failing CHECKSEQUENCEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"02000000010001000000000000000000000000000000000000000000000000000000000000000000000251b2000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Failure due to failing CHECKSEQUENCEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7c17aff532f22beb54069942f9bf567a66133eaf EQUAL\"]],\n+\"0200000001000100000000000000000000000000000000000000000000000000000000000000000000030251b2000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Failure due to insufficient tx.nVersion (<2)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "717ad19549eb9710568dd5da0ba9ab6176dc2c4a",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53e53a33c939949665f60d5eeb82abbb21f97128/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53e53a33c939949665f60d5eeb82abbb21f97128/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=53e53a33c939949665f60d5eeb82abbb21f97128",
        "patch": "@@ -233,5 +233,89 @@\n [[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n \"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH\"],\n \n+[\"CHECKSEQUENCEVERIFY tests\"],\n+\n+[\"By-height locks, with argument == 0 and == txin.nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"65535 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff00000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"65535 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"By-time locks, with argument == 0 and == txin.nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff40000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Upper sequence with upper sequence is fine\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000800100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000800100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument 2^31 with various nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument 2^32-1 with various nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument 3<<31 with various nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"6442450944 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"6442450944 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"6442450944 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"5 byte non-minimally-encoded operandss are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x05 0x0000000000 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"The argument can be calculated rather than created directly by a PUSHDATA\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194303 1ADD NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 1SUB NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff00000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"An ADD producing a 5-byte result that sets CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 65536 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 4259840 ADD NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Valid CHECKSEQUENCEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"02000000010001000000000000000000000000000000000000000000000000000000000000000000000251b2010000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Valid CHECKSEQUENCEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7c17aff532f22beb54069942f9bf567a66133eaf EQUAL\"]],\n+\"0200000001000100000000000000000000000000000000000000000000000000000000000000000000030251b2010000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "d9195bf345ca448e4d16a6fa92bf0cf005a71cbf",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53e53a33c939949665f60d5eeb82abbb21f97128/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53e53a33c939949665f60d5eeb82abbb21f97128/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=53e53a33c939949665f60d5eeb82abbb21f97128",
        "patch": "@@ -44,7 +44,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n     (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n     (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n-    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY);\n+    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)\n+    (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY);\n \n unsigned int ParseScriptFlags(string strFlags)\n {"
      }
    ]
  },
  {
    "sha": "c3c375226ebf98901849593b8ebfe8e8b69895c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2MzNzUyMjZlYmY5ODkwMTg0OTU5M2I4ZWJmZThlOGI2OTg5NWMy",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-12T20:02:46Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-14T11:29:40Z"
      },
      "message": "Separate CheckLockTime() and CheckSequence() logic\n\nFor the sake of a little repetition, make code more readable.",
      "tree": {
        "sha": "f7bc24864cbbc1782eb820e7a8a1c301a3d75e22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7bc24864cbbc1782eb820e7a8a1c301a3d75e22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3c375226ebf98901849593b8ebfe8e8b69895c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3c375226ebf98901849593b8ebfe8e8b69895c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3c375226ebf98901849593b8ebfe8e8b69895c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3c375226ebf98901849593b8ebfe8e8b69895c2/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53e53a33c939949665f60d5eeb82abbb21f97128",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53e53a33c939949665f60d5eeb82abbb21f97128",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53e53a33c939949665f60d5eeb82abbb21f97128"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 26,
      "deletions": 20
    },
    "files": [
      {
        "sha": "d4fe001d7a8fb3eea4330ae3e8940c2d48fda1ab",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 20,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3c375226ebf98901849593b8ebfe8e8b69895c2/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3c375226ebf98901849593b8ebfe8e8b69895c2/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c3c375226ebf98901849593b8ebfe8e8b69895c2",
        "patch": "@@ -1157,33 +1157,27 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     return true;\n }\n \n-static bool VerifyLockTime(int64_t txToLockTime, int64_t nThreshold, const CScriptNum& nLockTime)\n+bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n {\n     // There are two kinds of nLockTime: lock-by-blockheight\n     // and lock-by-blocktime, distinguished by whether\n-    // nLockTime < nThreshold (either LOCKTIME_THRESHOLD or\n-    // CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG).\n+    // nLockTime < LOCKTIME_THRESHOLD.\n     //\n     // We want to compare apples to apples, so fail the script\n     // unless the type of nLockTime being tested is the same as\n     // the nLockTime in the transaction.\n     if (!(\n-        (txToLockTime <  nThreshold && nLockTime <  nThreshold) ||\n-        (txToLockTime >= nThreshold && nLockTime >= nThreshold)\n+        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n     ))\n         return false;\n \n     // Now that we know we're comparing apples-to-apples, the\n     // comparison is a simple numeric one.\n-    if (nLockTime > txToLockTime)\n+    if (nLockTime > (int64_t)txTo->nLockTime)\n         return false;\n \n-    return true;\n-}\n-\n-bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n-{\n-    // The nLockTime feature can be disabled and thus\n+    // Finally the nLockTime feature can be disabled and thus\n     // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n     // finalized by setting nSequence to maxint. The\n     // transaction would be allowed into the blockchain, making\n@@ -1196,9 +1190,6 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n         return false;\n \n-    if (!::VerifyLockTime((int64_t)txTo->nLockTime, LOCKTIME_THRESHOLD, nLockTime))\n-        return false;\n-\n     return true;\n }\n \n@@ -1221,17 +1212,32 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n         return false;\n \n     // Mask off any bits that do not have consensus-enforced meaning\n-    // before doing the integer comparisons of ::VerifyLockTime.\n-    const uint32_t nLockTimeMask = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG\n-                                 | CTxIn::SEQUENCE_LOCKTIME_MASK;\n+    // before doing the integer comparisons\n+    const uint32_t nLockTimeMask = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | CTxIn::SEQUENCE_LOCKTIME_MASK;\n+    const int64_t txToSequenceMasked = txToSequence & nLockTimeMask;\n+    const CScriptNum nSequenceMasked = nSequence & nLockTimeMask;\n+\n+    // There are two kinds of nSequence: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nSequenceMasked < CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nSequenceMasked being tested is the same as\n+    // the nSequenceMasked in the transaction.\n+    if (!(\n+        (txToSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) ||\n+        (txToSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG)\n+    ))\n+        return false;\n \n-    if (!::VerifyLockTime(txToSequence & nLockTimeMask, CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG, nSequence & nLockTimeMask))\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nSequenceMasked > txToSequenceMasked)\n         return false;\n \n     return true;\n }\n \n-\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);"
      }
    ]
  },
  {
    "sha": "a38107643f3f01cd92a4e6da9e7a9d025770ff37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzgxMDc2NDNmM2YwMWNkOTJhNGU2ZGE5ZTdhOWQwMjU3NzBmZjM3",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T09:39:44Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T09:39:44Z"
      },
      "message": "Code style fix.\n\nThis if statement is a little obtuse and using braces here\nimproves readability.",
      "tree": {
        "sha": "a56a180a8998c680cc548aa43a5ff3585bc460fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a56a180a8998c680cc548aa43a5ff3585bc460fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a38107643f3f01cd92a4e6da9e7a9d025770ff37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38107643f3f01cd92a4e6da9e7a9d025770ff37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a38107643f3f01cd92a4e6da9e7a9d025770ff37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38107643f3f01cd92a4e6da9e7a9d025770ff37/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3c375226ebf98901849593b8ebfe8e8b69895c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3c375226ebf98901849593b8ebfe8e8b69895c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3c375226ebf98901849593b8ebfe8e8b69895c2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "149a4f01563150c01d2773231e20e6e7086dea45",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a38107643f3f01cd92a4e6da9e7a9d025770ff37/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a38107643f3f01cd92a4e6da9e7a9d025770ff37/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=a38107643f3f01cd92a4e6da9e7a9d025770ff37",
        "patch": "@@ -1227,8 +1227,9 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n     if (!(\n         (txToSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) ||\n         (txToSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG)\n-    ))\n+    )) {\n         return false;\n+    }\n \n     // Now that we know we're comparing apples-to-apples, the\n     // comparison is a simple numeric one."
      }
    ]
  }
]