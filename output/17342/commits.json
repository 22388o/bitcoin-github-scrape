[
  {
    "sha": "d9957623b48a7c3eff0ac750d1245fabfb1843a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTk1NzYyM2I0OGE3YzNlZmYwYWM3NTBkMTI0NWZhYmZiMTg0M2Ey",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-02T21:13:06Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-06T20:03:59Z"
      },
      "message": "[tests] Don't use TestingSetup in the checkqueue_tests\n\nIt's only needed for a hardcoded int, which we can define locally.",
      "tree": {
        "sha": "700a785c649355f788fab47a1a2e8715d99ed914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/700a785c649355f788fab47a1a2e8715d99ed914"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9957623b48a7c3eff0ac750d1245fabfb1843a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9957623b48a7c3eff0ac750d1245fabfb1843a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9957623b48a7c3eff0ac750d1245fabfb1843a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9957623b48a7c3eff0ac750d1245fabfb1843a2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc3fcf3c0d1d4c83da0fab14d40f92ffca35789e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc3fcf3c0d1d4c83da0fab14d40f92ffca35789e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc3fcf3c0d1d4c83da0fab14d40f92ffca35789e"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 7,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d1259dc268770ecfbe8d599638247618b94b04d8",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9957623b48a7c3eff0ac750d1245fabfb1843a2/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9957623b48a7c3eff0ac750d1245fabfb1843a2/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=d9957623b48a7c3eff0ac750d1245fabfb1843a2",
        "patch": "@@ -5,7 +5,6 @@\n #include <util/memory.h>\n #include <util/system.h>\n #include <util/time.h>\n-#include <validation.h>\n \n #include <test/setup_common.h>\n #include <checkqueue.h>\n@@ -19,11 +18,10 @@\n \n #include <unordered_set>\n \n-// BasicTestingSetup not sufficient because nScriptCheckThreads is not set\n-// otherwise.\n BOOST_FIXTURE_TEST_SUITE(checkqueue_tests, TestingSetup)\n \n static const unsigned int QUEUE_BATCH_SIZE = 128;\n+static const int SCRIPT_CHECK_THREADS = 3;\n \n struct FakeCheck {\n     bool operator()()\n@@ -149,7 +147,7 @@ static void Correct_Queue_range(std::vector<size_t> range)\n {\n     auto small_queue = MakeUnique<Correct_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n        tg.create_thread([&]{small_queue->Thread();});\n     }\n     // Make vChecks here to save on malloc (this test can be slow...)\n@@ -214,7 +212,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n     auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n \n     boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n        tg.create_thread([&]{fail_queue->Thread();});\n     }\n \n@@ -246,7 +244,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n {\n     auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n        tg.create_thread([&]{fail_queue->Thread();});\n     }\n \n@@ -274,7 +272,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n {\n     auto queue = MakeUnique<Unique_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n        tg.create_thread([&]{queue->Thread();});\n \n     }\n@@ -310,7 +308,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n {\n     auto queue = MakeUnique<Memory_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n        tg.create_thread([&]{queue->Thread();});\n     }\n     for (size_t i = 0; i < 1000; ++i) {\n@@ -342,7 +340,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n     auto queue = MakeUnique<FrozenCleanup_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n     bool fails = false;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n+    for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n         tg.create_thread([&]{queue->Thread();});\n     }\n     std::thread t0([&]() {"
      }
    ]
  },
  {
    "sha": "5506ecfe7a65d5705616bc048f2f1735b89993fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTA2ZWNmZTdhNjVkNTcwNTYxNmJjMDQ4ZjJmMTczNWI4OTk5M2Zi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-02T21:14:38Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-06T20:04:50Z"
      },
      "message": "[refactor] Replace global int nScriptCheckThreads with bool\n\nThe global nScriptCheckThreads int is confusing and is only needed for\nits int-ness in AppInitMain. Move all `-par` parsing logic there and\nreplace the int nScriptCheckThreads with a bool\ng_parallel_script_checks.\n\nAlso tidy up logic and improve comments.",
      "tree": {
        "sha": "c2c62fb409c258cdda1e944737225aeca9f256af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2c62fb409c258cdda1e944737225aeca9f256af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5506ecfe7a65d5705616bc048f2f1735b89993fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5506ecfe7a65d5705616bc048f2f1735b89993fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5506ecfe7a65d5705616bc048f2f1735b89993fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5506ecfe7a65d5705616bc048f2f1735b89993fb/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9957623b48a7c3eff0ac750d1245fabfb1843a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9957623b48a7c3eff0ac750d1245fabfb1843a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9957623b48a7c3eff0ac750d1245fabfb1843a2"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 32,
      "deletions": 20
    },
    "files": [
      {
        "sha": "c8725f2596648e02750473a9581014c06b8a9893",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5506ecfe7a65d5705616bc048f2f1735b89993fb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5506ecfe7a65d5705616bc048f2f1735b89993fb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5506ecfe7a65d5705616bc048f2f1735b89993fb",
        "patch": "@@ -1061,15 +1061,6 @@ bool AppInitParameterInteraction()\n         incrementalRelayFee = CFeeRate(n);\n     }\n \n-    // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n-    nScriptCheckThreads = gArgs.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n-    if (nScriptCheckThreads <= 0)\n-        nScriptCheckThreads += GetNumCores();\n-    if (nScriptCheckThreads <= 1)\n-        nScriptCheckThreads = 0;\n-    else if (nScriptCheckThreads > MAX_SCRIPTCHECK_THREADS)\n-        nScriptCheckThreads = MAX_SCRIPTCHECK_THREADS;\n-\n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n     int64_t nPruneArg = gArgs.GetArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n@@ -1256,10 +1247,25 @@ bool AppInitMain(NodeContext& node)\n     InitSignatureCache();\n     InitScriptExecutionCache();\n \n-    LogPrintf(\"Script verification uses %d additional threads\\n\", std::max(nScriptCheckThreads - 1, 0));\n-    if (nScriptCheckThreads) {\n-        for (int i=0; i<nScriptCheckThreads-1; i++)\n+    int script_threads = gArgs.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n+    if (script_threads <= 0) {\n+        // -par=0 means autodetect (number of cores - 1 script threads)\n+        // -par=-n means \"leave n cores free\" (number of cores - n - 1 script threads)\n+        script_threads += GetNumCores();\n+    }\n+\n+    // Subtract 1 because the main thread counts towards the par threads\n+    script_threads = std::max(script_threads - 1, 0);\n+\n+    // Number of script-checking threads <= MAX_SCRIPTCHECK_THREADS\n+    script_threads = std::min(script_threads, MAX_SCRIPTCHECK_THREADS);\n+\n+    LogPrintf(\"Script verification uses %d additional threads\\n\", script_threads);\n+    if (script_threads >= 1) {\n+        g_parallel_script_checks = true;\n+        for (int i = 0; i < script_threads; ++i) {\n             threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+        }\n     }\n \n     // Start the lightweight task scheduler thread"
      },
      {
        "sha": "5e7da84dfb2b948fd86c2061c3b85f12c63920a8",
        "filename": "src/test/setup_common.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5506ecfe7a65d5705616bc048f2f1735b89993fb/src/test/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5506ecfe7a65d5705616bc048f2f1735b89993fb/src/test/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/setup_common.cpp?ref=5506ecfe7a65d5705616bc048f2f1735b89993fb",
        "patch": "@@ -102,9 +102,12 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", FormatStateMessage(state)));\n     }\n \n-    nScriptCheckThreads = 3;\n-    for (int i = 0; i < nScriptCheckThreads - 1; i++)\n+    // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n+    constexpr int script_check_threads = 2;\n+    for (int i = 0; i < script_check_threads; ++i) {\n         threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+    }\n+    g_parallel_script_checks = true;\n \n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests."
      },
      {
        "sha": "df01b3abcfd4a06daa26f1345405ae8709a6571c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5506ecfe7a65d5705616bc048f2f1735b89993fb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5506ecfe7a65d5705616bc048f2f1735b89993fb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5506ecfe7a65d5705616bc048f2f1735b89993fb",
        "patch": "@@ -107,7 +107,7 @@ CBlockIndex *pindexBestHeader = nullptr;\n Mutex g_best_block_mutex;\n std::condition_variable g_best_block_cv;\n uint256 g_best_block;\n-int nScriptCheckThreads = 0;\n+bool g_parallel_script_checks{false};\n std::atomic_bool fImporting(false);\n std::atomic_bool fReindex(false);\n bool fHavePruned = false;\n@@ -2069,7 +2069,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n \n     CBlockUndo blockundo;\n \n-    CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : nullptr);\n+    CCheckQueueControl<CScriptCheck> control(fScriptChecks && g_parallel_script_checks ? &scriptcheckqueue : nullptr);\n \n     std::vector<int> prevheights;\n     CAmount nFees = 0;\n@@ -2130,7 +2130,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n             TxValidationState tx_state;\n-            if (fScriptChecks && !CheckInputs(tx, tx_state, view, flags, fCacheResults, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : nullptr)) {\n+            if (fScriptChecks && !CheckInputs(tx, tx_state, view, flags, fCacheResults, fCacheResults, txdata[i], g_parallel_script_checks ? &vChecks : nullptr)) {\n                 // Any transaction validation failure in ConnectBlock is a block consensus failure\n                 state.Invalid(BlockValidationResult::BLOCK_CONSENSUS,\n                               tx_state.GetRejectReason(), tx_state.GetDebugMessage());"
      },
      {
        "sha": "fd846e9090957674768bb4c55e9ecd43a6831a7b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5506ecfe7a65d5705616bc048f2f1735b89993fb/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5506ecfe7a65d5705616bc048f2f1735b89993fb/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=5506ecfe7a65d5705616bc048f2f1735b89993fb",
        "patch": "@@ -76,8 +76,8 @@ static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n \n-/** Maximum number of script-checking threads allowed */\n-static const int MAX_SCRIPTCHECK_THREADS = 16;\n+/** Maximum number of dedicated script-checking threads allowed */\n+static const int MAX_SCRIPTCHECK_THREADS = 15;\n /** -par default (number of script-checking threads, 0 = auto) */\n static const int DEFAULT_SCRIPTCHECK_THREADS = 0;\n /** Number of blocks that can be requested at any given time from a single peer. */\n@@ -146,7 +146,10 @@ extern std::condition_variable g_best_block_cv;\n extern uint256 g_best_block;\n extern std::atomic_bool fImporting;\n extern std::atomic_bool fReindex;\n-extern int nScriptCheckThreads;\n+/** Whether there are dedicated script-checking threads running.\n+ * False indicates all script checking is done on the main threadMessageHandler thread.\n+ */\n+extern bool g_parallel_script_checks;\n extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;"
      }
    ]
  }
]