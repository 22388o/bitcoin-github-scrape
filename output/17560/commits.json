[
  {
    "sha": "fa63bd3e34329751f665932299dab48c37fd4c61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTYzYmQzZTM0MzI5NzUxZjY2NTkzMjI5OWRhYjQ4YzM3ZmQ0YzYx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T14:50:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-22T15:32:41Z"
      },
      "message": "ci: Use apt-fast \ud83d\ude80\n\napt-fast is copied from\nhttps://raw.githubusercontent.com/ilikenwf/apt-fast/f7b86e6089c60e9d84e77e007a14f2f8b55f0d29/apt-fast",
      "tree": {
        "sha": "3e3cd859054099aabf4b0aa9e57d65e7ad78ee49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e3cd859054099aabf4b0aa9e57d65e7ad78ee49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa63bd3e34329751f665932299dab48c37fd4c61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjePAv+JoiwEXUMIZa7v7rrczQ5YoIMTCzjGNHOvuzRm3updk/kMS06Tluf2fXt\nDgGrNsx7v2Au5dJ+tPM88TPeufnd4SSRms9olUbimieT7sLK3OTdUpreVbZCuOD5\nWw2Rhs01dn4mu42hpi0YA7BenSsWPSafejs0i/w/cvrrd6S/uHu8bVek/VmupcJq\nC0y41LLj0jO72B3cB4AGqa9cbtEa2d9ioLjyVoFu0xDe55r/fq2KZEQ5cSyOLVeC\n7jfeQgCIMrTiUT5OP95m9P93g8tUQ+d15XLb46lhHRq3mRQF7TzrWCyVa8emblNS\n4qW+w5rjbwtAMDXEn304vzVlUdydWpIoP92GLChoQTCNzUTIi9HwDUS+MRqZE1/4\nFS3KqVufWeaPWwNCR2Iex/fLDVniX4W/cBqX/08pjYe1JenxyMAmk+7UFQ5hDMxo\nAf/kfVlkJnyKCl17poM5SlgpOcZNpZo09/C8bRBSrA0RQcoP9jMarw4UhI+oXE8b\nBpckUvw3\n=guc5\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e3cd859054099aabf4b0aa9e57d65e7ad78ee49\nparent b983e7e1721fa68cc04c05b1249d5871d66debe5\nauthor MarcoFalke <falke.marco@gmail.com> 1574434208 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1574436761 -0500\n\nci: Use apt-fast \ud83d\ude80\n\napt-fast is copied from\nhttps://raw.githubusercontent.com/ilikenwf/apt-fast/f7b86e6089c60e9d84e77e007a14f2f8b55f0d29/apt-fast\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa63bd3e34329751f665932299dab48c37fd4c61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa63bd3e34329751f665932299dab48c37fd4c61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa63bd3e34329751f665932299dab48c37fd4c61/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b983e7e1721fa68cc04c05b1249d5871d66debe5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b983e7e1721fa68cc04c05b1249d5871d66debe5"
      }
    ],
    "stats": {
      "total": 663,
      "additions": 660,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e87d1f0ac504cd059cd19f1db83fd24aa52852d2",
        "filename": "ci/apt-fast/apt-fast",
        "status": "added",
        "additions": 653,
        "deletions": 0,
        "changes": 653,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa63bd3e34329751f665932299dab48c37fd4c61/ci/apt-fast/apt-fast",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa63bd3e34329751f665932299dab48c37fd4c61/ci/apt-fast/apt-fast",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/apt-fast/apt-fast?ref=fa63bd3e34329751f665932299dab48c37fd4c61",
        "patch": "@@ -0,0 +1,653 @@\n+#!/bin/bash\n+#\n+# apt-fast v1.9\n+# Use this just like aptitude or apt-get for faster package downloading.\n+#\n+# Copyright: 2008-2012 Matt Parnell, http://www.mattparnell.com\n+# Improvements, maintenance, revisions - 2012, 2017-2019 Dominique Lasserre\n+#\n+# You may distribute this file under the terms of the GNU General\n+# Public License as published by the Free Software Foundation; either\n+# version 3 of the License, or (at your option) any later version.\n+#\n+[ -n \"$DEBUG\" ] && set -xv\n+\n+# Print colored messages.\n+# Usage: msg \"message text\" \"message type\" \"optional: err\"\n+# Message types are 'normal', 'hint' or 'warning'. Warnings and messages with a\n+# third argument are piped to stderr.\n+msg(){\n+  msg_options=()\n+  case \"$2\" in\n+    normal) beginColor=\"$cGreen\";;\n+    hint) beginColor=\"$cBlue\";;\n+    warning) beginColor=\"$cRed\";;\n+    question) beginColor=\"$cRed\"; msg_options=(-n);;\n+    *) beginColor= ;;\n+  esac\n+\n+  if [ -z \"$3\" ] && [ \"$2\" != \"warning\" ]; then\n+    echo -e \"${msg_options[@]}\" \"${aptfast_prefix}${beginColor}$1${endColor}\"\n+  else\n+    echo -e \"${msg_options[@]}\" \"${aptfast_prefix}${beginColor}$1${endColor}\" >&2\n+  fi\n+}\n+\n+# Search for known options and decide if root privileges are needed.\n+root=1  # default value: we need root privileges\n+option=\n+for argument in \"$@\"; do\n+  case \"$argument\" in\n+    upgrade | full-upgrade | install | dist-upgrade | build-dep)\n+      option=\"install\"\n+      ;;\n+    clean | autoclean)\n+      option=\"clean\"\n+      ;;\n+    download)\n+      option=\"download\"\n+      root=0\n+      ;;\n+    source)\n+      option=\"source\"\n+      root=0\n+      ;;\n+    changelog)\n+      root=0\n+      ;;\n+  esac\n+done\n+\n+# To handle priority of options correctly (environment over config file vars)\n+# we need to preserve all interesting env variables. As this wouldn't be\n+# difficult enough we have to preserve complete env vars (especially if value\n+# ist set (even empty) or not) when changing context (sudo)...\n+# Set a 'random' string to all unset variables.\n+TMP_RANDOM=\"13979853562951413\"\n+TMP_LCK_FILE=\"${LCK_FILE-${TMP_RANDOM}}\"\n+TMP_DOWNLOADBEFORE=\"${DOWNLOADBEFORE-${TMP_RANDOM}}\"\n+TMP__APTMGR=\"${_APTMGR-${TMP_RANDOM}}\"\n+TMP_APTCACHE=\"${APTCACHE-${TMP_RANDOM}}\"\n+TMP_DLDIR=\"${DLDIR-${TMP_RANDOM}}\"\n+TMP_DLLIST=\"${DLLIST-${TMP_RANDOM}}\"\n+TMP_LISTDIR=\"${LISTDIR-${TMP_RANDOM}}\"\n+TMP__MAXNUM=\"${MAXNUM-${TMP_RANDOM}}\"\n+TMP__MAXCONPERSRV=\"${MAXCONPERSRV-${TMP_RANDOM}}\"\n+TMP__SPLITCON=\"${SPLITCON-${TMP_RANDOM}}\"\n+TMP__MINSPLITSZ=${MINSPLITSZ-${TMP_RANDOM}}\n+TMP__PIECEALGO=${PIECEALGO-${TMP_RANDOM}}\n+TMP_aptfast_prefix=\"${aptfast_prefix-${TMP_RANDOM}}\"\n+TMP_APT_FAST_TIMEOUT=\"${APT_FAST_TIMEOUT-${TMP_RANDOM}}\"\n+TMP_VERBOSE_OUTPUT=\"${VERBOSE_OUTPUT-${TMP_RANDOM}}\"\n+TMP_ftp_proxy=\"${ftp_proxy-${TMP_RANDOM}}\"\n+TMP_http_proxy=\"${http_proxy-${TMP_RANDOM}}\"\n+TMP_https_proxy=\"${https_proxy-${TMP_RANDOM}}\"\n+\n+# Check for proper privileges.\n+# Call explicitly with environment variables to get them into root conext.\n+if [ \"$root\" = 1 ] && [ \"$UID\" != 0 ]; then\n+  exec sudo DEBUG=\"$DEBUG\" \\\n+            LCK_FILE=\"$TMP_LCK_FILE\" \\\n+            DOWNLOADBEFORE=\"$TMP_DOWNLOADBEFORE\" \\\n+            _APTMGR=\"$TMP__APTMGR\" \\\n+            APTCACHE=\"$TMP_APTCACHE\" \\\n+            DLDIR=\"$TMP_DLDIR\" \\\n+            DLLIST=\"$TMP_DLLIST\" \\\n+            LISTDIR=\"$TMP_LISTDIR\" \\\n+            _MAXNUM=\"$TMP__MAXNUM\" \\\n+            _MAXCONPERSRV=\"$TMP__MAXCONPERSRV\" \\\n+            _SPLITCON=\"$TMP__SPLITCON\" \\\n+            _MINSPLITSZ=\"$TMP__MINSPLITSZ\" \\\n+            _PIECEALGO=\"$TMP__PIECEALGO\" \\\n+            aptfast_prefix=\"$TMP_aptfast_prefix\" \\\n+            APT_FAST_TIMEOUT=\"$TMP_APT_FAST_TIMEOUT\" \\\n+            VERBOSE_OUTPUT=\"$TMP_VERBOSE_OUTPUT\" \\\n+            ftp_proxy=\"$TMP_ftp_proxy\" \\\n+            http_proxy=\"$TMP_http_proxy\" \\\n+            https_proxy=\"$TMP_https_proxy\" \\\n+            \"$0\" \"$@\"\n+fi\n+\n+\n+# Define lockfile.\n+# Use /tmp as directory because everybody (not only root) has to have write\n+# permissions.\n+# We need lock for non-root commands too, because we only have one download\n+# list file.\n+LCK_FILE=\"/tmp/apt-fast\"\n+LCK_FD=99\n+\n+# Set default package manager, APT cache, temporary download dir,\n+# temporary download list file, and maximal parallel downloads\n+_APTMGR=apt-get\n+eval \"$(apt-config shell APTCACHE Dir::Cache::archives/d)\"\n+# Check if APT config option Dir::Cache::archives::apt-fast-partial is set.\n+eval \"$(apt-config shell apt_fast_partial Dir::Cache::archives::apt-fast-partial/d)\"\n+if [ -z \"$apt_fast_partial\" ]; then\n+  DLDIR=\"$(realpath \"${APTCACHE}/../apt-fast\")\"\n+else\n+  DLDIR=\"${apt_fast_partial}\"\n+fi\n+# Currently not needed.\n+eval \"$(apt-config shell LISTDIR Dir::State::lists/d)\"\n+DLLIST=\"/tmp/apt-fast.list\"\n+_MAXNUM=5\n+_MAXCONPERSRV=10\n+_SPLITCON=8\n+_MINSPLITSZ=\"1M\"\n+_PIECEALGO=\"default\"\n+\n+# Prefix in front of apt-fast output:\n+aptfast_prefix=\n+# aptfast_prefix=\"$(date '+%b %_d %T.%N') apt-fast: \"\n+\n+# Set color variables.\n+cGreen='\\e[0;32m'\n+cRed='\\e[0;31m'\n+cBlue='\\e[0;34m'\n+endColor='\\e[0m'\n+\n+# Set timout value for apt-fast download confirmation dialog.\n+# Value is in seconds.\n+APT_FAST_TIMEOUT=60\n+\n+# Ask for download confirmation if unset\n+DOWNLOADBEFORE=\n+\n+# Formatted package list in download confirmation if unset\n+VERBOSE_OUTPUT=\n+\n+# Download command.\n+_DOWNLOADER='aria2c --no-conf -c -j ${_MAXNUM} -x ${_MAXCONPERSRV} -s ${_SPLITCON} -i ${DLLIST} --min-split-size=${_MINSPLITSZ} --stream-piece-selector=${_PIECEALGO} --connect-timeout=600 --timeout=600 -m0 --header \"Accept: */*\"'\n+\n+# Load config file.\n+CONFFILE=\"/etc/apt-fast.conf\"\n+if [ -e \"$CONFFILE\" ]; then\n+    source \"$CONFFILE\"\n+fi\n+\n+# no proxy as default\n+ftp_proxy=\n+http_proxy=\n+https_proxy=\n+\n+# Now overwrite with preserved values if values were set before (compare with\n+# 'random' string).\n+[ \"$TMP_LCK_FILE\" = \"$TMP_RANDOM\" ] || LCK_FILE=\"$TMP_LCK_FILE\"\n+[ \"$TMP_DOWNLOADBEFORE\" = \"$TMP_RANDOM\" ] || DOWNLOADBEFORE=\"$TMP_DOWNLOADBEFORE\"\n+[ \"$TMP__APTMGR\" = \"$TMP_RANDOM\" ] || _APTMGR=\"$TMP__APTMGR\"\n+[ \"$TMP_APTCACHE\" = \"$TMP_RANDOM\" ] || APTCACHE=\"$TMP_APTCACHE\"\n+[ \"$TMP_DLDIR\" = \"$TMP_RANDOM\" ] || DLDIR=\"$TMP_DLDIR\"\n+[ \"$TMP_DLLIST\" = \"$TMP_RANDOM\" ] || DLLIST=\"$TMP_DLLIST\"\n+[ \"$TMP_LISTDIR\" = \"$TMP_RANDOM\" ] || LISTDIR=\"$TMP_LISTDIR\"\n+[ \"$TMP__MAXNUM\" = \"$TMP_RANDOM\" ] || _MAXNUM=\"$TMP__MAXNUM\"\n+[ \"$TMP__MAXCONPERSRV\" = \"$TMP_RANDOM\" ] || _MAXCONPERSRV=\"$TMP__MAXCONPERSRV\"\n+[ \"$TMP__SPLITCON\" = \"$TMP_RANDOM\" ] || _SPLITCON=\"$TMP__SPLITCON\"\n+[ \"$TMP__MINSPLITSZ\" = \"$TMP_RANDOM\" ] || _MINSPLITSZ=\"$TMP__MINSPLITSZ\"\n+[ \"$TMP__PIECEALGO\" = \"$TMP_RANDOM\" ] || _PIECEALGO=\"$TMP__PIECEALGO\"\n+[ \"$TMP_aptfast_prefix\" = \"$TMP_RANDOM\" ] || aptfast_prefix=\"$TMP_aptfast_prefix\"\n+[ \"$TMP_APT_FAST_TIMEOUT\" = \"$TMP_RANDOM\" ] || APT_FAST_TIMEOUT=\"$TMP_APT_FAST_TIMEOUT\"\n+[ \"$TMP_VERBOSE_OUTPUT\" = \"$TMP_RANDOM\" ] || VERBOSE_OUTPUT=\"$TMP_VERBOSE_OUTPUT\"\n+[ \"$TMP_ftp_proxy\" = \"$TMP_RANDOM\" ] || ftp_proxy=\"$TMP_ftp_proxy\"\n+[ \"$TMP_http_proxy\" = \"$TMP_RANDOM\" ] || http_proxy=\"$TMP_http_proxy\"\n+[ \"$TMP_https_proxy\" = \"$TMP_RANDOM\" ] || https_proxy=\"$TMP_https_proxy\"\n+\n+\n+# Disable colors if not executed in terminal.\n+if [ ! -t 1 ]; then\n+  cGreen=\n+  cRed=\n+  cBlue=\n+  endColor=\n+  #FIXME: Time not updated.\n+  [ -z \"$aptfast_prefix\" ] && aptfast_prefix=\"[apt-fast $(date +\"%T\")]\"\n+fi\n+\n+\n+msg_already_running()\n+{\n+  msg \"apt-fast already running!\" \"warning\"\n+  msg \"Verify that all apt-fast processes are finished then remove $LCK_FILE.lock and try again.\" \"hint\"\n+}\n+\n+# Check if a lock file exists.\n+if [ -f \"$LCK_FILE.lock\" ]; then\n+  msg_already_running\n+  exit 1\n+fi\n+\n+\n+# create the lock file and lock it, die on failure\n+_create_lock()\n+{\n+    eval \"exec $LCK_FD>\\\"$LCK_FILE.lock\\\"\"\n+    flock -n $LCK_FD || { msg_already_running; exit 1; }\n+\n+    trap \"cleanup_aptfast; exit_cleanup_state\" EXIT\n+    trap \"cleanup_aptfast; exit 1\" INT TERM\n+}\n+\n+# unlock and remove the lock file\n+_remove_lock()\n+{\n+    flock -u \"$LCK_FD\" 2>/dev/null\n+    rm -f \"$LCK_FILE.lock\"\n+}\n+\n+# Move download file away so missing permissions won't stop usage.\n+CLEANUP_STATE=0\n+cleanup_dllist()\n+{\n+  if [ -f \"$DLLIST\" ]\n+  then\n+    if ! mv -- \"$DLLIST{,.old}\" 2>/dev/null\n+    then\n+      if ! rm -f -- \"$DLLIST\" 2>/dev/null\n+      then\n+        msg \"Could not clean up download list file.\" \"warning\"\n+        CLEANUP_STATE=1\n+      fi\n+    fi\n+  fi\n+}\n+\n+cleanup_aptfast()\n+{\n+  [ \"$CLEANUP_STATE\" -eq 0 ] && CLEANUP_STATE=$?\n+  cleanup_dllist\n+  _remove_lock\n+}\n+\n+exit_cleanup_state()\n+{\n+  exit $CLEANUP_STATE\n+}\n+\n+# decode url string\n+# translates %xx but must not convert '+' in spaces\n+urldecode()\n+{\n+    printf '%b' \"${1//%/\\\\x}\"\n+}\n+\n+# Check if mirrors are available. And if so add all mirrors to download list.\n+get_mirrors(){\n+  # Check all mirror lists.\n+  for mirrorstr in \"${MIRRORS[@]}\"; do\n+    # Build mirrors array from comma separated string.\n+    IFS=\", \" read -r -a mirrors <<< \"$mirrorstr\"\n+    # Check for all mirrors if URI of $1 is from mirror. If so add all other\n+    # mirrors to (resmirror) list and break all loops.\n+    for mirror in \"${mirrors[@]}\"; do\n+      # Real expension.\n+      if [[ \"$1\" == \"$mirror\"* ]]; then\n+        filepath=${1#${mirror}}\n+        # Build list for aria download list.\n+        list=\"${mirrors[*]}\"\n+        echo -e \"${list// /${filepath}\\\\t}$filepath\\n\"\n+        return 0\n+      fi\n+    done\n+  done\n+  # No other mirrors found.\n+  echo \"$1\"\n+}\n+\n+# Globals to save package name, version, size and overall size.\n+DOWNLOAD_DISPLAY=\n+DOWNLOAD_SIZE=0\n+# Get the package URLs.\n+get_uris(){\n+  if [ ! -d \"$(dirname \"$DLLIST\")\" ]\n+  then\n+    if ! mkdir -p -- \"$(dirname \"$DLLIST\")\"\n+    then\n+      msg \"Could not create download file directory.\" \"warning\"\n+      CLEANUP_STATE=1\n+      exit\n+    fi\n+  elif [ -f \"$DLLIST\" ]; then\n+    if ! rm -f -- \"$DLLIST\" 2>/dev/null && ! touch -- \"$DLLIST\" 2>/dev/null\n+    then\n+      msg \"Unable to write to download file. Try restarting with root permissions or run 'apt-fast clean' first.\" \"warning\"\n+      CLEANUP_STATE=1\n+      exit\n+    fi\n+  fi\n+\n+  # Add header to overwrite file.\n+  echo \"# apt-fast mirror list: $(date)\" > \"$DLLIST\"\n+  #NOTE: aptitude doesn't have this functionality, so we use apt-get to get\n+  #      package URIs.\n+  case \"$_APTMGR\" in\n+    apt|apt-get) uri_mgr=$_APTMGR;;\n+    *) uri_mgr=apt-get;;\n+  esac\n+  uris_full=\"$(\"$uri_mgr\" \"${APT_SCRIPT_WARNING[@]}\" -y --print-uris \"$@\")\"\n+  CLEANUP_STATE=\"$?\"\n+  if [ \"$CLEANUP_STATE\" -ne 0 ]\n+  then\n+    msg \"Package manager quit with exit code.\" \"warning\"\n+    exit\n+  fi\n+  while read -r pkg_uri_info\n+  do\n+    [ -z \"$pkg_uri_info\" ] && continue\n+    ## --print-uris format is:\n+    # 'fileurl' filename filesize checksum_hint:filechecksum\n+    uri=\"$(echo \"$pkg_uri_info\" | cut -d' ' -f1 | tr -d \"'\")\"\n+    filename=\"$(echo \"$pkg_uri_info\" | cut -d' ' -f2)\"\n+    filesize=\"$(echo \"$pkg_uri_info\" | cut -d' ' -f3)\"\n+    checksum_string=\"$(echo \"$pkg_uri_info\" | cut -d' ' -f4)\"\n+    hash_algo=\"$(echo \"$checksum_string\" | cut -d':' -f1)\"\n+    checksum=\"$(echo \"$checksum_string\" | cut -d':' -f2)\"\n+\n+    filename_decoded=\"$(urldecode \"$filename\")\"\n+    DOWNLOAD_DISPLAY=\"${DOWNLOAD_DISPLAY}$(echo \"$filename_decoded\" | cut -d'_' -f1)\"\n+    DOWNLOAD_DISPLAY=\"${DOWNLOAD_DISPLAY} $(echo \"$filename_decoded\" | cut -d'_' -f2)\"\n+    DOWNLOAD_DISPLAY=\"${DOWNLOAD_DISPLAY} $(echo \"$filesize\" | numfmt --to=iec-i --suffix=B)\\n\"\n+    DOWNLOAD_SIZE=$((DOWNLOAD_SIZE + filesize))\n+\n+    ## whole uri comes encoded (urlencoded). Filename must NOT be decoded because\n+    # plain aptitude do not decode it when download and install it. Therefore, we\n+    # will have ugly named packages at /var/cache/apt/archives but is the standard\n+    # behavior.\n+    # But package version must be decoded, otherways package=version calls will\n+    # not work.\n+\n+    if [ -n \"$HASH_SUPPORTED\" ]; then\n+      case \"$hash_algo\" in\n+        SHA512) [ -z \"$SHA512_SUPPORTED\" ] && hash_algo= || hash_algo=sha-512 ;;\n+        SHA256) [ -z \"$SHA256_SUPPORTED\" ] && hash_algo= || hash_algo=sha-256 ;;\n+        SHA1)   [ -z \"$SHA1_SUPPORTED\" ]   && hash_algo= || hash_algo=sha-1 ;;\n+        MD5Sum) [ -z \"$MD5sum_SUPPORTED\" ] && hash_algo= || hash_algo=md5 ;;\n+        *) hash_algo=\n+      esac\n+\n+      # Using apt-cache show package=version to ensure recover single and\n+      # correct package version.\n+      # Warning: assuming that package naming uses '_' as field separator.\n+      # Therefore, this code expects package-name_version_arch.deb Otherways\n+      # below code will fail resoundingly\n+      if [ -z \"$hash_algo\" ]; then\n+        pkg_name=\"$(echo \"$filename\" | cut -d'_' -f1)\"\n+        pkg_version=\"$(echo \"$filename\" | cut -d'_' -f2)\"\n+        pkg_version=\"$(urldecode \"$pkg_version\")\"\n+        package_info=\"$(apt-cache show \"$pkg_name=$pkg_version\")\"\n+\n+        patch_checksum=\n+        if [ -n \"$SHA512_SUPPORTED\" ]; then\n+          patch_checksum=\"$(echo \"$package_info\" | grep SHA512 | head -n 1)\"\n+          [ -n \"$patch_checksum\" ] && hash_algo=\"sha-512\"\n+        fi\n+        if [ -z \"$patch_checksum\" ] && [ -n \"$SHA256_SUPPORTED\" ]; then\n+          patch_checksum=\"$(echo \"$package_info\" | grep SHA256 | head -n 1)\"\n+          [ -n \"$patch_checksum\" ] && hash_algo=\"sha-256\"\n+        fi\n+        if [ -z \"$patch_checksum\" ] && [ -n \"$SHA1_SUPPORTED\" ]; then\n+          patch_checksum=\"$(echo \"$package_info\" | grep SHA1 | head -n 1)\"\n+          [ -n \"$patch_checksum\" ] && hash_algo=\"sha-1\"\n+        fi\n+        if [ -z \"$patch_checksum\" ] && [ -n \"$MD5sum_SUPPORTED\" ]; then\n+          patch_checksum=\"$(echo \"$package_info\" | grep MD5sum | head -n 1)\"\n+          [ -n \"$patch_checksum\" ] && hash_algo=\"md5\"\n+        fi\n+\n+        if [ -n \"$patch_checksum\" ]; then\n+          checksum=\"$(echo \"$patch_checksum\" | cut -d' ' -f2)\"\n+        else\n+          msg \"Couldn't get supported checksum for $pkg_name ($pkg_version).\" \"warning\"\n+          REMOVE_WORKING_MESSAGE=\n+        fi\n+      fi\n+    else\n+      hash_algo=\n+    fi\n+\n+    {\n+      get_mirrors \"$uri\"\n+      #echo \" dir=$DLDIR\"\n+      if [ -n \"$hash_algo\" ]; then\n+        echo \" checksum=$hash_algo=$checksum\"\n+      fi\n+      echo \" out=$filename\"\n+    } >> \"$DLLIST\"\n+  done <<<\"$(echo \"$uris_full\" | grep -E \"^'(http(s|)|(s|)ftp)://\")\"\n+\n+  #cat \"$DLLIST\"\n+  #LCK_RM\n+  #exit\n+}\n+\n+display_downloadfile(){\n+  if [ -n \"$VERBOSE_OUTPUT\" ]; then\n+    cat \"$DLLIST\"\n+  else\n+    DISPLAY_SORT_OPTIONS=(-k 1,1)\n+    # Sort output after package download size (decreasing):\n+    #DISPLAY_SORT_OPTIONS=(-k 3,3 -hr)\n+    while read -r line; do\n+        [ -z \"$line\" ] && continue\n+        pkg=\"$(echo \"$line\" | cut -d' ' -f1)\"\n+        ver=\"$(echo \"$line\" | cut -d' ' -f2)\"\n+        size=\"$(echo \"$line\" | cut -d' ' -f3)\"\n+        printf '%s%-40s %-20s %10s\\n' \"$aptfast_prefix\" \"$pkg\" \"$ver\" \"$size\"\n+    done <<<\"$(echo -e \"$DOWNLOAD_DISPLAY\" | sort \"${DISPLAY_SORT_OPTIONS[@]}\")\"\n+  fi\n+  msg \"Download size: $(echo \"$DOWNLOAD_SIZE\" | numfmt --to=iec-i --suffix=B)\" \"normal\"\n+}\n+\n+# Create and insert a PID number to lockfile.\n+_create_lock\n+\n+# Make sure aria2c (in general first parameter from _DOWNLOADER) is available.\n+CMD=\"$(echo \"$_DOWNLOADER\" | sed 's/^\\s*\\([^ ]\\+\\).*$/\\1/')\"\n+if [ ! \"$(command -v \"$CMD\")\" ]; then\n+  msg \"Command not found: $CMD\" \"normal\" \"err\"\n+  msg \"You must configure $CONFFILE to use aria2c or another supported download manager\" \"normal\" \"err\"\n+  CLEANUP_STATE=1\n+  exit\n+fi\n+\n+# Make sure package manager is available.\n+if [ ! \"$(command -v \"$_APTMGR\")\" ]; then\n+  msg \"\\`$_APTMGR\\` command not available.\" \"warning\"\n+  msg \"You must configure $CONFFILE to use either apt-get or aptitude.\" \"normal\" \"err\"\n+  CLEANUP_STATE=1\n+  exit\n+fi\n+\n+# Disable script warning if apt is used.\n+APT_SCRIPT_WARNING=()\n+if [ \"$_APTMGR\" == \"apt\" ]; then\n+    APT_SCRIPT_WARNING=(-o \"Apt::Cmd::Disable-Script-Warning=true\")\n+fi\n+\n+# Set supported hash algorithms by aria2c (and also by Debian repository).\n+SHA512_SUPPORTED=\n+SHA256_SUPPORTED=\n+SHA1_SUPPORTED=\n+MD5sum_SUPPORTED=\n+HASH_SUPPORTED=\n+if [ \"$CMD\" == \"aria2c\" ]; then\n+  for supported_hash in $(LC_ALL=C aria2c -v | sed '/^Hash Algorithms:/!d; s/\\(^Hash Algorithms: \\|,\\)\\+//g'); do\n+    case \"$supported_hash\" in\n+      sha-512) SHA512_SUPPORTED=y; HASH_SUPPORTED=y ;;\n+      sha-256) SHA256_SUPPORTED=y; HASH_SUPPORTED=y ;;\n+      sha-1)   SHA1_SUPPORTED=y;   HASH_SUPPORTED=y ;;\n+      md5)     MD5sum_SUPPORTED=y; HASH_SUPPORTED=y ;;\n+    esac\n+  done\n+  if [ -z \"$HASH_SUPPORTED\" ]; then\n+    msg \"Couldn't find supported checksum algorithm from aria2c. Checksums disabled.\" \"warning\"\n+  fi\n+fi\n+\n+# Check if \"assume yes\" switch is enabled and if yes enable $DOWNLOADBEFORE.\n+# Also check if \"download only\" switch is enabled.\n+#TODO: Get real value over APT items APT::Get::Assume-Yes and\n+#      APT::Get::Assume-No .\n+#      Respectively Aptitude::CmdLine::Download-Only and APT::Get::Download-Only.\n+DOWNLOAD_ONLY=\n+while true; do\n+  while getopts \":dy-:\" optchar; do\n+    case \"${optchar}\" in\n+      -)\n+        case \"${OPTARG}\" in\n+          yes | assume-yes)  DOWNLOADBEFORE=true ;;\n+          assume-no)         DOWNLOADBEFORE=     ;;\n+          download-only)     DOWNLOAD_ONLY=true  ;;\n+        esac\n+        ;;\n+      y)\n+        DOWNLOADBEFORE=true\n+        ;;\n+      d)\n+        DOWNLOAD_ONLY=true\n+        ;;\n+    esac\n+  done\n+  ((OPTIND++))\n+  [ $OPTIND -gt $# ] && break\n+done\n+\n+# Configure proxies. Use apt values over environment variables.\n+# Note: If proxy setting is not set, there is no apt-config output.\n+#       Therefore variable doesn't get overriden, which is intended.\n+# Export the variables to make them available in subshells (aka the\n+# downloader command).\n+eval \"$(apt-config shell ftp_proxy Acquire::ftp::proxy)\"\n+export ftp_proxy\n+eval \"$(apt-config shell http_proxy Acquire::http::proxy)\"\n+export http_proxy\n+eval \"$(apt-config shell https_proxy Acquire::https::proxy)\"\n+export https_proxy\n+\n+# aria2 has no socks support (see https://github.com/aria2/aria2/issues/153)\n+if echo \"$http_proxy\" | grep -q \"^socks5h://\" || echo \"$https_proxy\" | grep -q \"^socks5h://\"; then\n+  msg \"Socks proxy detected. Falling back to ${_APTMGR}\" \"hint\"\n+  \"${_APTMGR}\" \"${APT_SCRIPT_WARNING[@]}\" \"$@\"\n+  CLEANUP_STATE=\"$?\"\n+  exit\n+fi\n+\n+# Run actions.\n+if [ \"$option\" == \"install\" ]; then\n+  msg\n+  msg \"Working... this may take a while.\" \"normal\"\n+  REMOVE_WORKING_MESSAGE=y\n+\n+  get_uris \"$@\"\n+\n+  [ -t 1 ] && [ -n \"$REMOVE_WORKING_MESSAGE\" ] && tput cuu 1 && tput el && tput cuu 1\n+  # Test /tmp/apt-fast.list file exists and not just the apt-fast comment line.\n+  # Then download all files from the list.\n+  if [ -f \"$DLLIST\" ] && [ \"$(wc -l \"$DLLIST\" | cut -d' ' -f1)\" -gt 1 ] && [ ! \"$DOWNLOADBEFORE\" ]; then\n+    display_downloadfile\n+    msg\n+    msg \"Do you want to download the packages? [Y/n] \" \"question\"\n+\n+    while ((!updsys)); do\n+      read -r -sn1 -t \"$APT_FAST_TIMEOUT\" answer || { msg; msg \"Timed out.\" \"warning\"; CLEANUP_STATE=1; exit; }\n+      case \"$answer\" in\n+        [JjYy])    result=1; updsys=1 ;;\n+        [Nn])      result=0; updsys=1 ;;\n+        \"\")        result=1; updsys=1 ;;\n+        *)         updsys=0 ;;\n+      esac\n+    done\n+  else\n+    result=1\n+  fi\n+\n+  if ((DOWNLOAD_SIZE)); then\n+    msg\n+    # Continue if answer was right or DOWNLOADBEFORE is enabled.\n+    if ((result)); then\n+      if [ -s \"$DLLIST\" ]; then\n+        # Test if apt-fast directory is present where we put packages.\n+        if [ ! -d \"$DLDIR\" ]; then\n+          mkdir -p -- \"$DLDIR\"\n+        fi\n+\n+        cd \"$DLDIR\" &>/dev/null || { msg; msg \"Not able to change into download directory.\" \"warning\"; CLEANUP_STATE=1; exit; }\n+\n+        eval \"${_DOWNLOADER}\"  # execute downloadhelper command\n+        if [ \"$(find \"$DLDIR\" -printf . | wc -c)\" -gt 1 ]; then\n+          # Move all packages to the apt install directory by force to ensure\n+          # already existing debs which may be incomplete are replaced\n+          find . -type f \\( -name '*.deb' -o -name '*.ddeb' \\) -execdir mv -ft \"$APTCACHE\" {} \\+\n+        fi\n+        cd - &>/dev/null || msg \"Failed to change back directory\" \"warning\"\n+      fi\n+    else\n+      CLEANUP_STATE=1\n+      exit\n+    fi\n+  else\n+    [ -t 1 ] && tput el\n+  fi\n+\n+  if [ -z \"$DOWNLOAD_ONLY\" ] || [ \"$_APTMGR\" == \"aptitude\" ]; then\n+    \"${_APTMGR}\" \"${APT_SCRIPT_WARNING[@]}\" \"$@\"\n+  fi\n+\n+\n+elif [ \"$option\" == \"clean\" ]; then\n+  \"${_APTMGR}\" \"${APT_SCRIPT_WARNING[@]}\" \"$@\" && {\n+    if [ -d \"$DLDIR\" ]; then\n+      find \"$DLDIR\" -maxdepth 1 -type f -delete\n+      CLEANUP_STATE=\"$?\"\n+      [ -f \"$DLLIST\" ] && rm -f -- \"$DLLIST\"* || true\n+    fi\n+  }\n+\n+elif [ \"$option\" == \"download\" ]; then\n+  msg\n+  msg \"Working... this may take a while.\" \"normal\"\n+  REMOVE_WORKING_MESSAGE=y\n+\n+  get_uris \"$@\"\n+\n+  [ -t 1 ] && [ -n \"$REMOVE_WORKING_MESSAGE\" ] && tput cuu 1 && tput el && tput cuu 1\n+\n+  if [ -f \"$DLLIST\" ] && [ \"$(wc -l \"$DLLIST\" | cut -d' ' -f1)\" -gt 1 ]; then\n+    display_downloadfile\n+    eval \"${_DOWNLOADER}\"\n+  fi\n+\n+  if [ \"$_APTMGR\" == \"aptitude\" ]; then\n+    \"${_APTMGR}\" \"$@\"\n+  fi\n+\n+elif [ \"$option\" == \"source\" ]; then\n+  msg\n+  msg \"Working... this may take a while.\" \"normal\"\n+  REMOVE_WORKING_MESSAGE=y\n+\n+  get_uris \"$@\"\n+\n+  [ -t 1 ] && [ -n \"$REMOVE_WORKING_MESSAGE\" ] && tput cuu 1 && tput el && tput cuu 1\n+\n+  if [ -f \"$DLLIST\" ] && [ \"$(wc -l \"$DLLIST\" | cut -d' ' -f1)\" -gt 1 ]; then\n+    display_downloadfile\n+    eval \"${_DOWNLOADER}\"\n+  fi\n+  # We use APT manager here to provide more verbose output. This method is\n+  # slightly slower then extractiong packages manually after download but also\n+  # more hardened (e.g. some options like --compile are available).\n+  \"${_APTMGR}\" \"${APT_SCRIPT_WARNING[@]}\" \"$@\"\n+  # Uncomment following snippet to extract source directly and comment\n+  # both lines before.\n+  #while read srcfile; do\n+  #  # extract only .dsc files\n+  #  echo \"$srcfile\" | grep -q '\\.dsc$' || continue\n+  #  dpkg-source -x \"$(basename \"$srcfile\")\"\n+  #done < \"$DLLIST\"\n+\n+# Execute package manager directly if unknown options are passed.\n+else\n+  \"${_APTMGR}\" \"${APT_SCRIPT_WARNING[@]}\" \"$@\"\n+fi\n+\n+# After error or all done remove our lockfile (done with EXIT trap)"
      },
      {
        "sha": "7a8c41c3400652e7cde386806d0b9d4a8d6c57bb",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa63bd3e34329751f665932299dab48c37fd4c61/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa63bd3e34329751f665932299dab48c37fd4c61/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=fa63bd3e34329751f665932299dab48c37fd4c61",
        "patch": "@@ -49,3 +49,6 @@ export GOAL=${GOAL:-install}\n export DIR_QA_ASSETS=${DIR_QA_ASSETS:-${BASE_BUILD_DIR}/qa-assets}\n export PATH=${BASE_ROOT_DIR}/ci/retry:$PATH\n export CI_RETRY_EXE=${CI_RETRY_EXE:retry}\n+export PATH=${BASE_ROOT_DIR}/ci/apt-fast:$PATH\n+export PATH=/ro_base/ci/apt-fast:$PATH  # Need to add the docker internal path as well, because BASE_ROOT_DIR might not have been set up yet\n+export PATH=$BASE_SCRATCH_DIR/bins/:$PATH"
      },
      {
        "sha": "b954ee1d46fa2cec71783fb6edca60f4cf898a97",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa63bd3e34329751f665932299dab48c37fd4c61/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa63bd3e34329751f665932299dab48c37fd4c61/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=fa63bd3e34329751f665932299dab48c37fd4c61",
        "patch": "@@ -57,12 +57,12 @@ if [ -z \"$RUN_CI_ON_HOST\" ]; then\n                   $DOCKER_NAME_TAG)\n \n   DOCKER_EXEC () {\n-    docker exec $DOCKER_ID bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $PWD && $*\"\n+    docker exec $DOCKER_ID bash -c \"export PATH=$PATH && cd $PWD && $*\"\n   }\n else\n   echo \"Running on host system without docker wrapper\"\n   DOCKER_EXEC () {\n-    bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $PWD && $*\"\n+    bash -c \"export PATH=$PATH && cd $PWD && $*\"\n   }\n fi\n \n@@ -80,7 +80,8 @@ fi\n \n if [ \"$TRAVIS_OS_NAME\" != \"osx\" ]; then\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get update\n-  ${CI_RETRY_EXE} DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -y $PACKAGES $DOCKER_PACKAGES\n+  ${CI_RETRY_EXE} DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -y aria2  # for apt-fast\n+  ${CI_RETRY_EXE} DOCKER_EXEC apt-fast install --no-install-recommends --no-upgrade -y $PACKAGES $DOCKER_PACKAGES\n fi\n \n if [ ! -d ${DIR_QA_ASSETS} ]; then"
      }
    ]
  }
]