[
  {
    "sha": "cced0f46c9133e0fc6211e987421ad1d9be1a399",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2VkMGY0NmM5MTMzZTBmYzYyMTFlOTg3NDIxYWQxZDliZTFhMzk5",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-05T15:11:22Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-05T15:13:51Z"
      },
      "message": "miner: Pass in previous CBlockIndex to RegenerateCommitments",
      "tree": {
        "sha": "a0538dc9d5ee76146a840570e61fdfc131b51044",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0538dc9d5ee76146a840570e61fdfc131b51044"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cced0f46c9133e0fc6211e987421ad1d9be1a399",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cced0f46c9133e0fc6211e987421ad1d9be1a399",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cced0f46c9133e0fc6211e987421ad1d9be1a399",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cced0f46c9133e0fc6211e987421ad1d9be1a399/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66daf4cb3b47e8218623936d23ad504fd189e70b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66daf4cb3b47e8218623936d23ad504fd189e70b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66daf4cb3b47e8218623936d23ad504fd189e70b"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3bc7fdd458f98b029a61ff980c37c1def590b58a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cced0f46c9133e0fc6211e987421ad1d9be1a399/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cced0f46c9133e0fc6211e987421ad1d9be1a399/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=cced0f46c9133e0fc6211e987421ad1d9be1a399",
        "patch": "@@ -39,13 +39,14 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n     return nNewTime - nOldTime;\n }\n \n-void RegenerateCommitments(CBlock& block, BlockManager& blockman)\n+void RegenerateCommitments(CBlock& block, CBlockIndex* prev_block)\n {\n     CMutableTransaction tx{*block.vtx.at(0)};\n     tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));\n     block.vtx.at(0) = MakeTransactionRef(tx);\n \n-    GenerateCoinbaseCommitment(block, WITH_LOCK(::cs_main, assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman)); return blockman.LookupBlockIndex(block.hashPrevBlock)), Params().GetConsensus());\n+    WITH_LOCK(::cs_main, assert(g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock) == prev_block));\n+    GenerateCoinbaseCommitment(block, prev_block, Params().GetConsensus());\n \n     block.hashMerkleRoot = BlockMerkleRoot(block);\n }"
      },
      {
        "sha": "becf362b79db3ac3fe2a9b3dce86724265f19623",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cced0f46c9133e0fc6211e987421ad1d9be1a399/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cced0f46c9133e0fc6211e987421ad1d9be1a399/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=cced0f46c9133e0fc6211e987421ad1d9be1a399",
        "patch": "@@ -202,8 +202,7 @@ class BlockAssembler\n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n-// TODO just accept a CBlockIndex*\n /** Update an old GenerateCoinbaseCommitment from CreateNewBlock after the block txs have changed */\n-void RegenerateCommitments(CBlock& block, BlockManager& blockman);\n+void RegenerateCommitments(CBlock& block, CBlockIndex* prev_block);\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "2eddc731c322b63e933d2177af7bb6e4d3a80ffa",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cced0f46c9133e0fc6211e987421ad1d9be1a399/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cced0f46c9133e0fc6211e987421ad1d9be1a399/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=cced0f46c9133e0fc6211e987421ad1d9be1a399",
        "patch": "@@ -369,7 +369,8 @@ static RPCHelpMan generateblock()\n \n     // Add transactions\n     block.vtx.insert(block.vtx.end(), txs.begin(), txs.end());\n-    RegenerateCommitments(block, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)));\n+    CBlockIndex* prev_block = WITH_LOCK(::cs_main, return g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock));\n+    RegenerateCommitments(block, prev_block);\n \n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "46c7b781b0fd4c5e8421eb10a0d5e865e6cac7a7",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cced0f46c9133e0fc6211e987421ad1d9be1a399/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cced0f46c9133e0fc6211e987421ad1d9be1a399/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=cced0f46c9133e0fc6211e987421ad1d9be1a399",
        "patch": "@@ -253,7 +253,8 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n     for (const CMutableTransaction& tx : txns) {\n         block.vtx.push_back(MakeTransactionRef(tx));\n     }\n-    RegenerateCommitments(block, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)));\n+    CBlockIndex* prev_block = WITH_LOCK(::cs_main, return g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock));\n+    RegenerateCommitments(block, prev_block);\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n "
      }
    ]
  },
  {
    "sha": "d0abf0bf429586e3a5b4c3231fe430dc29695481",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGFiZjBiZjQyOTU4NmUzYTViNGMzMjMxZmU0MzBkYzI5Njk1NDgx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T17:02:06Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-05T15:13:54Z"
      },
      "message": "rpc/*,rest: Add review-only assertion to EnsureChainman",
      "tree": {
        "sha": "4f1e0ead0858919293d00bd044603b486227403d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f1e0ead0858919293d00bd044603b486227403d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0abf0bf429586e3a5b4c3231fe430dc29695481",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0abf0bf429586e3a5b4c3231fe430dc29695481",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0abf0bf429586e3a5b4c3231fe430dc29695481",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0abf0bf429586e3a5b4c3231fe430dc29695481/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cced0f46c9133e0fc6211e987421ad1d9be1a399",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cced0f46c9133e0fc6211e987421ad1d9be1a399",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cced0f46c9133e0fc6211e987421ad1d9be1a399"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bb668984e90ab881cb19ca2f689a6c0fdafa1dc5",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0abf0bf429586e3a5b4c3231fe430dc29695481/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0abf0bf429586e3a5b4c3231fe430dc29695481/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d0abf0bf429586e3a5b4c3231fe430dc29695481",
        "patch": "@@ -79,6 +79,7 @@ ChainstateManager& EnsureChainman(const std::any& context)\n     if (!node.chainman) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node chainman not found\");\n     }\n+    WITH_LOCK(::cs_main, CHECK_NONFATAL(std::addressof(g_chainman) == std::addressof(*node.chainman)));\n     return *node.chainman;\n }\n "
      }
    ]
  },
  {
    "sha": "d485e815e2b62dc74a485569d08130dc3ef9ff63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDg1ZTgxNWUyYjYyZGM3NGE0ODU1NjlkMDgxMzBkYzNlZjlmZjYz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T19:40:53Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-05T15:13:54Z"
      },
      "message": "rpc/blockchain: Use existing NodeContext\n\nAlso pass in appropriate object to:\n- BIP9SoftForkDescPushBack\n- BuriedForkDescPushBack",
      "tree": {
        "sha": "b1c305f902a8b5aeff99de9ff37b714a450c2877",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1c305f902a8b5aeff99de9ff37b714a450c2877"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d485e815e2b62dc74a485569d08130dc3ef9ff63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d485e815e2b62dc74a485569d08130dc3ef9ff63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d485e815e2b62dc74a485569d08130dc3ef9ff63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d485e815e2b62dc74a485569d08130dc3ef9ff63/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0abf0bf429586e3a5b4c3231fe430dc29695481",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0abf0bf429586e3a5b4c3231fe430dc29695481",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0abf0bf429586e3a5b4c3231fe430dc29695481"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 77,
      "deletions": 55
    },
    "files": [
      {
        "sha": "ffabca0affd0d05dfc7e69d64995f1323a2fef2e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 55,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d485e815e2b62dc74a485569d08130dc3ef9ff63/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d485e815e2b62dc74a485569d08130dc3ef9ff63/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d485e815e2b62dc74a485569d08130dc3ef9ff63",
        "patch": "@@ -199,7 +199,7 @@ static RPCHelpMan getblockcount()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return ::ChainActive().Height();\n+    return EnsureChainman(request.context).ActiveChain().Height();\n },\n     };\n }\n@@ -218,7 +218,7 @@ static RPCHelpMan getbestblockhash()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return ::ChainActive().Tip()->GetBlockHash().GetHex();\n+    return EnsureChainman(request.context).ActiveChain().Tip()->GetBlockHash().GetHex();\n },\n     };\n }\n@@ -399,7 +399,7 @@ static RPCHelpMan getdifficulty()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return GetDifficulty(::ChainActive().Tip());\n+    return GetDifficulty(EnsureChainman(request.context).ActiveChain().Tip());\n },\n     };\n }\n@@ -764,12 +764,13 @@ static RPCHelpMan getblockhash()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n+    const CChain& active_chain = EnsureChainman(request.context).ActiveChain();\n \n     int nHeight = request.params[0].get_int();\n-    if (nHeight < 0 || nHeight > ::ChainActive().Height())\n+    if (nHeight < 0 || nHeight > active_chain.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n \n-    CBlockIndex* pblockindex = ::ChainActive()[nHeight];\n+    CBlockIndex* pblockindex = active_chain[nHeight];\n     return pblockindex->GetBlockHash().GetHex();\n },\n     };\n@@ -823,8 +824,9 @@ static RPCHelpMan getblockheader()\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n-        tip = ::ChainActive().Tip();\n+        ChainstateManager& chainman = EnsureChainman(request.context);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n+        tip = chainman.ActiveChain().Tip();\n     }\n \n     if (!pblockindex) {\n@@ -947,8 +949,9 @@ static RPCHelpMan getblock()\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n-        tip = ::ChainActive().Tip();\n+        ChainstateManager& chainman = EnsureChainman(request.context);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n+        tip = chainman.ActiveChain().Tip();\n \n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n@@ -989,6 +992,7 @@ static RPCHelpMan pruneblockchain()\n         throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n \n     LOCK(cs_main);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n     int heightParam = request.params[0].get_int();\n     if (heightParam < 0)\n@@ -998,15 +1002,15 @@ static RPCHelpMan pruneblockchain()\n     // too low to be a block time (corresponds to timestamp from Sep 2001).\n     if (heightParam > 1000000000) {\n         // Add a 2 hour buffer to include blocks which might have had old timestamps\n-        CBlockIndex* pindex = ::ChainActive().FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW, 0);\n+        CBlockIndex* pindex = chainman.ActiveChain().FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW, 0);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Could not find block with at least the specified timestamp.\");\n         }\n         heightParam = pindex->nHeight;\n     }\n \n     unsigned int height = (unsigned int) heightParam;\n-    unsigned int chainHeight = (unsigned int) ::ChainActive().Height();\n+    unsigned int chainHeight = (unsigned int) chainman.ActiveChain().Height();\n     if (chainHeight < Params().PruneAfterHeight())\n         throw JSONRPCError(RPC_MISC_ERROR, \"Blockchain is too short for pruning.\");\n     else if (height > chainHeight)\n@@ -1016,8 +1020,8 @@ static RPCHelpMan pruneblockchain()\n         height = chainHeight - MIN_BLOCKS_TO_KEEP;\n     }\n \n-    PruneBlockFilesManual(::ChainstateActive(), height);\n-    const CBlockIndex* block = ::ChainActive().Tip();\n+    PruneBlockFilesManual(chainman.ActiveChainstate(), height);\n+    const CBlockIndex* block = chainman.ActiveChain().Tip();\n     CHECK_NONFATAL(block);\n     while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n         block = block->pprev;\n@@ -1070,13 +1074,20 @@ static RPCHelpMan gettxoutsetinfo()\n     UniValue ret(UniValue::VOBJ);\n \n     CCoinsStats stats;\n-    ::ChainstateActive().ForceFlushStateToDisk();\n+    CChainState& active_chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    active_chainstate.ForceFlushStateToDisk();\n \n     const CoinStatsHashType hash_type{request.params[0].isNull() ? CoinStatsHashType::HASH_SERIALIZED : ParseHashType(request.params[0].get_str())};\n \n-    CCoinsView* coins_view = WITH_LOCK(::cs_main, return &::ChainstateActive().CoinsDB());\n+    CCoinsView* coins_view;\n+    BlockManager* blockman;\n+    {\n+        LOCK(::cs_main);\n+        coins_view = &active_chainstate.CoinsDB();\n+        blockman = &active_chainstate.m_blockman;\n+    }\n     NodeContext& node = EnsureNodeContext(request.context);\n-    if (GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), stats, hash_type, node.rpc_interruption_point)) {\n+    if (GetUTXOStats(coins_view, *blockman, stats, hash_type, node.rpc_interruption_point)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n         ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n@@ -1147,7 +1158,8 @@ static RPCHelpMan gettxout()\n         fMempool = request.params[2].get_bool();\n \n     Coin coin;\n-    CCoinsViewCache* coins_view = &::ChainstateActive().CoinsTip();\n+    CChainState& active_chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    CCoinsViewCache* coins_view = &active_chainstate.CoinsTip();\n \n     if (fMempool) {\n         const CTxMemPool& mempool = EnsureMemPool(request.context);\n@@ -1162,7 +1174,7 @@ static RPCHelpMan gettxout()\n         }\n     }\n \n-    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(coins_view->GetBestBlock());\n+    const CBlockIndex* pindex = active_chainstate.m_blockman.LookupBlockIndex(coins_view->GetBestBlock());\n     ret.pushKV(\"bestblock\", pindex->GetBlockHash().GetHex());\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n         ret.pushKV(\"confirmations\", 0);\n@@ -1202,12 +1214,13 @@ static RPCHelpMan verifychain()\n \n     LOCK(cs_main);\n \n-    return CVerifyDB().VerifyDB(Params(), ::ChainstateActive(), &::ChainstateActive().CoinsTip(), check_level, check_depth);\n+    CChainState& active_chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    return CVerifyDB().VerifyDB(Params(), active_chainstate, &active_chainstate.CoinsTip(), check_level, check_depth);\n },\n     };\n }\n \n-static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height, int active_tip_nheight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // For buried deployments.\n     // A buried deployment is one where the height of the activation has been hardcoded into\n@@ -1220,12 +1233,12 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n     rv.pushKV(\"type\", \"buried\");\n     // getblockchaininfo reports the softfork as active from when the chain height is\n     // one below the activation height\n-    rv.pushKV(\"active\", ::ChainActive().Tip()->nHeight + 1 >= height);\n+    rv.pushKV(\"active\", active_tip_nheight + 1 >= height);\n     rv.pushKV(\"height\", height);\n     softforks.pushKV(name, rv);\n }\n \n-static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // For BIP9 deployments.\n     // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n@@ -1234,7 +1247,7 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n \n     UniValue bip9(UniValue::VOBJ);\n-    const ThresholdState thresholdState = VersionBitsState(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n+    const ThresholdState thresholdState = VersionBitsState(active_chain_tip, consensusParams, id, versionbitscache);\n     switch (thresholdState) {\n     case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n     case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n@@ -1248,12 +1261,12 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     }\n     bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n     bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    int64_t since_height = VersionBitsStateSinceHeight(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n+    int64_t since_height = VersionBitsStateSinceHeight(active_chain_tip, consensusParams, id, versionbitscache);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsStatistics(::ChainActive().Tip(), consensusParams, id);\n+        BIP9Stats statsStruct = VersionBitsStatistics(active_chain_tip, consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n@@ -1329,17 +1342,20 @@ RPCHelpMan getblockchaininfo()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n-    const CBlockIndex* tip = ::ChainActive().Tip();\n+    const CBlockIndex* tip = chainman.ActiveChain().Tip();\n+    CHECK_NONFATAL(tip);\n+    const int height = tip->nHeight;\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"chain\",                 Params().NetworkIDString());\n-    obj.pushKV(\"blocks\",                (int)::ChainActive().Height());\n+    obj.pushKV(\"blocks\",                (int)height);\n     obj.pushKV(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1);\n     obj.pushKV(\"bestblockhash\",         tip->GetBlockHash().GetHex());\n     obj.pushKV(\"difficulty\",            (double)GetDifficulty(tip));\n     obj.pushKV(\"mediantime\",            (int64_t)tip->GetMedianTimePast());\n     obj.pushKV(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), tip));\n-    obj.pushKV(\"initialblockdownload\",  ::ChainstateActive().IsInitialBlockDownload());\n+    obj.pushKV(\"initialblockdownload\",  chainman.ActiveChainstate().IsInitialBlockDownload());\n     obj.pushKV(\"chainwork\",             tip->nChainWork.GetHex());\n     obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n     obj.pushKV(\"pruned\",                fPruneMode);\n@@ -1362,13 +1378,13 @@ RPCHelpMan getblockchaininfo()\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     UniValue softforks(UniValue::VOBJ);\n-    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height);\n-    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);\n-    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n-    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight);\n-    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight);\n-    BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n-    BIP9SoftForkDescPushBack(softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n+    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height, height);\n+    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height, height);\n+    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height, height);\n+    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight, height);\n+    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight, height);\n+    BIP9SoftForkDescPushBack(tip, softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n+    BIP9SoftForkDescPushBack(tip, softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n     obj.pushKV(\"softforks\",             softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);\n@@ -1555,16 +1571,17 @@ static RPCHelpMan preciousblock()\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CBlockIndex* pblockindex;\n \n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     {\n         LOCK(cs_main);\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n     }\n \n     BlockValidationState state;\n-    ::ChainstateActive().PreciousBlock(state, Params(), pblockindex);\n+    chainman.ActiveChainstate().PreciousBlock(state, Params(), pblockindex);\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n@@ -1592,18 +1609,19 @@ static RPCHelpMan invalidateblock()\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     BlockValidationState state;\n \n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n     }\n-    ::ChainstateActive().InvalidateBlock(state, Params(), pblockindex);\n+    chainman.ActiveChainstate().InvalidateBlock(state, Params(), pblockindex);\n \n     if (state.IsValid()) {\n-        ::ChainstateActive().ActivateBestChain(state, Params());\n+        chainman.ActiveChainstate().ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {\n@@ -1630,20 +1648,21 @@ static RPCHelpMan reconsiderblock()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n     {\n         LOCK(cs_main);\n-        CBlockIndex* pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        CBlockIndex* pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n \n-        ::ChainstateActive().ResetBlockFailureFlags(pblockindex);\n+        chainman.ActiveChainstate().ResetBlockFailureFlags(pblockindex);\n     }\n \n     BlockValidationState state;\n-    ::ChainstateActive().ActivateBestChain(state, Params());\n+    chainman.ActiveChainstate().ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n@@ -1680,20 +1699,21 @@ static RPCHelpMan getchaintxstats()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n \n     if (request.params[1].isNull()) {\n         LOCK(cs_main);\n-        pindex = ::ChainActive().Tip();\n+        pindex = chainman.ActiveChain().Tip();\n     } else {\n         uint256 hash(ParseHashV(request.params[1], \"blockhash\"));\n         LOCK(cs_main);\n-        pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        pindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n-        if (!::ChainActive().Contains(pindex)) {\n+        if (!chainman.ActiveChain().Contains(pindex)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n         }\n     }\n@@ -1862,26 +1882,27 @@ static RPCHelpMan getblockstats()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n     CBlockIndex* pindex;\n     if (request.params[0].isNum()) {\n         const int height = request.params[0].get_int();\n-        const int current_tip = ::ChainActive().Height();\n+        const int current_tip = chainman.ActiveChain().Height();\n         if (height < 0) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n         }\n         if (height > current_tip) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n         }\n \n-        pindex = ::ChainActive()[height];\n+        pindex = chainman.ActiveChain()[height];\n     } else {\n         const uint256 hash(ParseHashV(request.params[0], \"hash_or_height\"));\n-        pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        pindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n-        if (!::ChainActive().Contains(pindex)) {\n+        if (!chainman.ActiveChain().Contains(pindex)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n         }\n     }\n@@ -2264,10 +2285,11 @@ static RPCHelpMan scantxoutset()\n         CBlockIndex* tip;\n         {\n             LOCK(cs_main);\n-            ::ChainstateActive().ForceFlushStateToDisk();\n-            pcursor = std::unique_ptr<CCoinsViewCursor>(::ChainstateActive().CoinsDB().Cursor());\n+            ChainstateManager& chainman = EnsureChainman(request.context);\n+            chainman.ActiveChainstate().ForceFlushStateToDisk();\n+            pcursor = std::unique_ptr<CCoinsViewCursor>(chainman.ActiveChainstate().CoinsDB().Cursor());\n             CHECK_NONFATAL(pcursor);\n-            tip = ::ChainActive().Tip();\n+            tip = chainman.ActiveChain().Tip();\n             CHECK_NONFATAL(tip);\n         }\n         NodeContext& node = EnsureNodeContext(request.context);\n@@ -2344,7 +2366,7 @@ static RPCHelpMan getblockfilter()\n     bool block_was_connected;\n     {\n         LOCK(cs_main);\n-        block_index = g_chainman.m_blockman.LookupBlockIndex(block_hash);\n+        block_index = EnsureChainman(request.context).m_blockman.LookupBlockIndex(block_hash);\n         if (!block_index) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -2465,7 +2487,7 @@ UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFil\n         }\n \n         pcursor = std::unique_ptr<CCoinsViewCursor>(chainstate.CoinsDB().Cursor());\n-        tip = g_chainman.m_blockman.LookupBlockIndex(stats.hashBlock);\n+        tip = chainstate.m_blockman.LookupBlockIndex(stats.hashBlock);\n         CHECK_NONFATAL(tip);\n     }\n "
      }
    ]
  },
  {
    "sha": "60dc05afc6f6388c6f86729a0edd7cb69f1748e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGRjMDVhZmM2ZjYzODhjNmY4NjcyOWEwZWRkN2NiNjlmMTc0OGUw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T19:57:17Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-05T15:14:28Z"
      },
      "message": "rpc/mining: Use existing NodeContext\n\nAlso pass in appropriate object to:\n- GetNetworkHashPS\n- [gG]enerateBlock{,s}\n\nAlso:\n- Misc style/constness changes",
      "tree": {
        "sha": "68d7ab0ed0c0cbbdf78e9db060cdac673d84d842",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68d7ab0ed0c0cbbdf78e9db060cdac673d84d842"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60dc05afc6f6388c6f86729a0edd7cb69f1748e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60dc05afc6f6388c6f86729a0edd7cb69f1748e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60dc05afc6f6388c6f86729a0edd7cb69f1748e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60dc05afc6f6388c6f86729a0edd7cb69f1748e0/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d485e815e2b62dc74a485569d08130dc3ef9ff63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d485e815e2b62dc74a485569d08130dc3ef9ff63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d485e815e2b62dc74a485569d08130dc3ef9ff63"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 37,
      "deletions": 28
    },
    "files": [
      {
        "sha": "5136a4e3de0492c63cc5775a8cf99e16d547cb04",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 28,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60dc05afc6f6388c6f86729a0edd7cb69f1748e0/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60dc05afc6f6388c6f86729a0edd7cb69f1748e0/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=60dc05afc6f6388c6f86729a0edd7cb69f1748e0",
        "patch": "@@ -44,11 +44,12 @@\n  * or from the last difficulty change if 'lookup' is nonpositive.\n  * If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n  */\n-static UniValue GetNetworkHashPS(int lookup, int height) {\n-    CBlockIndex *pb = ::ChainActive().Tip();\n+static UniValue GetNetworkHashPS(int lookup, int height, const CChain& active_chain) {\n+    const CBlockIndex* pb = active_chain.Tip();\n \n-    if (height >= 0 && height < ::ChainActive().Height())\n-        pb = ::ChainActive()[height];\n+    if (height >= 0 && height < active_chain.Height()) {\n+        pb = active_chain[height];\n+    }\n \n     if (pb == nullptr || !pb->nHeight)\n         return 0;\n@@ -61,7 +62,7 @@ static UniValue GetNetworkHashPS(int lookup, int height) {\n     if (lookup > pb->nHeight)\n         lookup = pb->nHeight;\n \n-    CBlockIndex *pb0 = pb;\n+    const CBlockIndex* pb0 = pb;\n     int64_t minTime = pb0->GetBlockTime();\n     int64_t maxTime = minTime;\n     for (int i = 0; i < lookup; i++) {\n@@ -100,7 +101,8 @@ static RPCHelpMan getnetworkhashps()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n+    const CChain& active_chain = EnsureChainman(request.context).ActiveChain();\n+    return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1, active_chain);\n },\n     };\n }\n@@ -111,7 +113,8 @@ static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t&\n \n     {\n         LOCK(cs_main);\n-        IncrementExtraNonce(&block, ::ChainActive().Tip(), extra_nonce);\n+        CHECK_NONFATAL(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n+        IncrementExtraNonce(&block, chainman.ActiveChain().Tip(), extra_nonce);\n     }\n \n     CChainParams chainparams(Params());\n@@ -143,7 +146,8 @@ static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& me\n \n     {   // Don't keep cs_main locked\n         LOCK(cs_main);\n-        nHeight = ::ChainActive().Height();\n+        CHECK_NONFATAL(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n+        nHeight = chainman.ActiveChain().Height();\n         nHeightEnd = nHeight+nGenerate;\n     }\n     unsigned int nExtraNonce = 0;\n@@ -354,11 +358,12 @@ static RPCHelpMan generateblock()\n     CChainParams chainparams(Params());\n     CBlock block;\n \n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     {\n         LOCK(cs_main);\n \n         CTxMemPool empty_mempool;\n-        std::unique_ptr<CBlockTemplate> blocktemplate(BlockAssembler(::ChainstateActive(), empty_mempool, chainparams).CreateNewBlock(coinbase_script));\n+        std::unique_ptr<CBlockTemplate> blocktemplate(BlockAssembler(chainman.ActiveChainstate(), empty_mempool, chainparams).CreateNewBlock(coinbase_script));\n         if (!blocktemplate) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         }\n@@ -369,14 +374,14 @@ static RPCHelpMan generateblock()\n \n     // Add transactions\n     block.vtx.insert(block.vtx.end(), txs.begin(), txs.end());\n-    CBlockIndex* prev_block = WITH_LOCK(::cs_main, return g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock));\n+    CBlockIndex* prev_block = WITH_LOCK(::cs_main, return chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock));\n     RegenerateCommitments(block, prev_block);\n \n     {\n         LOCK(cs_main);\n \n         BlockValidationState state;\n-        if (!TestBlockValidity(state, chainparams, ::ChainstateActive(), block, g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), false, false)) {\n+        if (!TestBlockValidity(state, chainparams, chainman.ActiveChainstate(), block, chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), false, false)) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, strprintf(\"TestBlockValidity failed: %s\", state.ToString()));\n         }\n     }\n@@ -385,7 +390,7 @@ static RPCHelpMan generateblock()\n     uint64_t max_tries{DEFAULT_MAX_TRIES};\n     unsigned int extra_nonce{0};\n \n-    if (!GenerateBlock(EnsureChainman(request.context), block, max_tries, extra_nonce, block_hash) || block_hash.IsNull()) {\n+    if (!GenerateBlock(chainman, block, max_tries, extra_nonce, block_hash) || block_hash.IsNull()) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Failed to make block.\");\n     }\n \n@@ -421,12 +426,13 @@ static RPCHelpMan getmininginfo()\n {\n     LOCK(cs_main);\n     const CTxMemPool& mempool = EnsureMemPool(request.context);\n+    const CChain& active_chain = EnsureChainman(request.context).ActiveChain();\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.pushKV(\"blocks\",           (int)::ChainActive().Height());\n+    obj.pushKV(\"blocks\",           (int)active_chain.Height());\n     if (BlockAssembler::m_last_block_weight) obj.pushKV(\"currentblockweight\", *BlockAssembler::m_last_block_weight);\n     if (BlockAssembler::m_last_block_num_txs) obj.pushKV(\"currentblocktx\", *BlockAssembler::m_last_block_num_txs);\n-    obj.pushKV(\"difficulty\",       (double)GetDifficulty(::ChainActive().Tip()));\n+    obj.pushKV(\"difficulty\",       (double)GetDifficulty(active_chain.Tip()));\n     obj.pushKV(\"networkhashps\",    getnetworkhashps().HandleRequest(request));\n     obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n     obj.pushKV(\"chain\",            Params().NetworkIDString());\n@@ -590,6 +596,7 @@ static RPCHelpMan getblocktemplate()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n@@ -620,7 +627,7 @@ static RPCHelpMan getblocktemplate()\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n             uint256 hash = block.GetHash();\n-            const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+            const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n             if (pindex) {\n                 if (pindex->IsValid(BLOCK_VALID_SCRIPTS))\n                     return \"duplicate\";\n@@ -629,12 +636,12 @@ static RPCHelpMan getblocktemplate()\n                 return \"duplicate-inconclusive\";\n             }\n \n-            CBlockIndex* const pindexPrev = ::ChainActive().Tip();\n+            CBlockIndex* const pindexPrev = chainman.ActiveChain().Tip();\n             // TestBlockValidity only supports blocks built on the current Tip\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             BlockValidationState state;\n-            TestBlockValidity(state, Params(), ::ChainstateActive(), block, pindexPrev, false, true);\n+            TestBlockValidity(state, Params(), chainman.ActiveChainstate(), block, pindexPrev, false, true);\n             return BIP22ValidationResult(state);\n         }\n \n@@ -665,7 +672,7 @@ static RPCHelpMan getblocktemplate()\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, PACKAGE_NAME \" is not connected!\");\n         }\n \n-        if (::ChainstateActive().IsInitialBlockDownload()) {\n+        if (chainman.ActiveChainstate().IsInitialBlockDownload()) {\n             throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, PACKAGE_NAME \" is in initial sync and waiting for blocks...\");\n         }\n     }\n@@ -691,7 +698,7 @@ static RPCHelpMan getblocktemplate()\n         else\n         {\n             // NOTE: Spec does not specify behaviour for non-string longpollid, but this makes testing easier\n-            hashWatchedChain = ::ChainActive().Tip()->GetBlockHash();\n+            hashWatchedChain = chainman.ActiveChain().Tip()->GetBlockHash();\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n@@ -736,20 +743,20 @@ static RPCHelpMan getblocktemplate()\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static std::unique_ptr<CBlockTemplate> pblocktemplate;\n-    if (pindexPrev != ::ChainActive().Tip() ||\n+    if (pindexPrev != chainman.ActiveChain().Tip() ||\n         (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5))\n     {\n         // Clear pindexPrev so future calls make a new block, despite any failures from here on\n         pindexPrev = nullptr;\n \n         // Store the pindexBest used before CreateNewBlock, to avoid races\n         nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n-        CBlockIndex* pindexPrevNew = ::ChainActive().Tip();\n+        CBlockIndex* pindexPrevNew = chainman.ActiveChain().Tip();\n         nStart = GetTime();\n \n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = BlockAssembler(::ChainstateActive(), mempool, Params()).CreateNewBlock(scriptDummy);\n+        pblocktemplate = BlockAssembler(chainman.ActiveChainstate(), mempool, Params()).CreateNewBlock(scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n@@ -885,7 +892,7 @@ static RPCHelpMan getblocktemplate()\n     result.pushKV(\"transactions\", transactions);\n     result.pushKV(\"coinbaseaux\", aux);\n     result.pushKV(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue);\n-    result.pushKV(\"longpollid\", ::ChainActive().Tip()->GetBlockHash().GetHex() + ToString(nTransactionsUpdatedLast));\n+    result.pushKV(\"longpollid\", chainman.ActiveChain().Tip()->GetBlockHash().GetHex() + ToString(nTransactionsUpdatedLast));\n     result.pushKV(\"target\", hashTarget.GetHex());\n     result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1);\n     result.pushKV(\"mutable\", aMutable);\n@@ -968,10 +975,11 @@ static RPCHelpMan submitblock()\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block does not start with a coinbase\");\n     }\n \n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     uint256 hash = block.GetHash();\n     {\n         LOCK(cs_main);\n-        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (pindex) {\n             if (pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n                 return \"duplicate\";\n@@ -984,7 +992,7 @@ static RPCHelpMan submitblock()\n \n     {\n         LOCK(cs_main);\n-        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock);\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock);\n         if (pindex) {\n             UpdateUncommittedBlockStructures(block, pindex, Params().GetConsensus());\n         }\n@@ -993,7 +1001,7 @@ static RPCHelpMan submitblock()\n     bool new_block;\n     auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n     RegisterSharedValidationInterface(sc);\n-    bool accepted = EnsureChainman(request.context).ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    bool accepted = chainman.ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterSharedValidationInterface(sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n@@ -1026,15 +1034,16 @@ static RPCHelpMan submitheader()\n     if (!DecodeHexBlockHeader(h, request.params[0].get_str())) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block header decode failed\");\n     }\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     {\n         LOCK(cs_main);\n-        if (!g_chainman.m_blockman.LookupBlockIndex(h.hashPrevBlock)) {\n+        if (!chainman.m_blockman.LookupBlockIndex(h.hashPrevBlock)) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, \"Must submit previous header (\" + h.hashPrevBlock.GetHex() + \") first\");\n         }\n     }\n \n     BlockValidationState state;\n-    EnsureChainman(request.context).ProcessNewBlockHeaders({h}, state, Params());\n+    chainman.ProcessNewBlockHeaders({h}, state, Params());\n     if (state.IsValid()) return NullUniValue;\n     if (state.IsError()) {\n         throw JSONRPCError(RPC_VERIFY_ERROR, state.ToString());"
      }
    ]
  },
  {
    "sha": "7be0671b950842fc3a17641a4a21501de0a800b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmUwNjcxYjk1MDg0MmZjM2ExNzY0MWE0YTIxNTAxZGUwYTgwMGI1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T20:05:27Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-05T15:14:33Z"
      },
      "message": "rpc/rawtx: Use existing NodeContext\n\nAlso pass in appropriate object to:\n- TxToJSON",
      "tree": {
        "sha": "538a1beafcb46bbf34d8224dddc52a3eae08d67f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/538a1beafcb46bbf34d8224dddc52a3eae08d67f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7be0671b950842fc3a17641a4a21501de0a800b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7be0671b950842fc3a17641a4a21501de0a800b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7be0671b950842fc3a17641a4a21501de0a800b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7be0671b950842fc3a17641a4a21501de0a800b5/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60dc05afc6f6388c6f86729a0edd7cb69f1748e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60dc05afc6f6388c6f86729a0edd7cb69f1748e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60dc05afc6f6388c6f86729a0edd7cb69f1748e0"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "0ed0af3493c983ee1f3e217901c37634c400750b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7be0671b950842fc3a17641a4a21501de0a800b5/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7be0671b950842fc3a17641a4a21501de0a800b5/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7be0671b950842fc3a17641a4a21501de0a800b5",
        "patch": "@@ -40,7 +40,7 @@\n \n #include <univalue.h>\n \n-static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry, CChainState& active_chainstate)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex.\n     //\n@@ -53,10 +53,10 @@ static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n         LOCK(cs_main);\n \n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n-        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n+        CBlockIndex* pindex = active_chainstate.m_blockman.LookupBlockIndex(hashBlock);\n         if (pindex) {\n-            if (::ChainActive().Contains(pindex)) {\n-                entry.pushKV(\"confirmations\", 1 + ::ChainActive().Height() - pindex->nHeight);\n+            if (active_chainstate.m_chain.Contains(pindex)) {\n+                entry.pushKV(\"confirmations\", 1 + active_chainstate.m_chain.Height() - pindex->nHeight);\n                 entry.pushKV(\"time\", pindex->GetBlockTime());\n                 entry.pushKV(\"blocktime\", pindex->GetBlockTime());\n             }\n@@ -158,6 +158,7 @@ static RPCHelpMan getrawtransaction()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     const NodeContext& node = EnsureNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -178,11 +179,11 @@ static RPCHelpMan getrawtransaction()\n         LOCK(cs_main);\n \n         uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n-        blockindex = g_chainman.m_blockman.LookupBlockIndex(blockhash);\n+        blockindex = chainman.m_blockman.LookupBlockIndex(blockhash);\n         if (!blockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n         }\n-        in_active_chain = ::ChainActive().Contains(blockindex);\n+        in_active_chain = chainman.ActiveChain().Contains(blockindex);\n     }\n \n     bool f_txindex_ready = false;\n@@ -215,7 +216,7 @@ static RPCHelpMan getrawtransaction()\n \n     UniValue result(UniValue::VOBJ);\n     if (blockindex) result.pushKV(\"in_active_chain\", in_active_chain);\n-    TxToJSON(*tx, hash_block, result);\n+    TxToJSON(*tx, hash_block, result, chainman.ActiveChainstate());\n     return result;\n },\n     };\n@@ -257,10 +258,11 @@ static RPCHelpMan gettxoutproof()\n \n     CBlockIndex* pblockindex = nullptr;\n     uint256 hashBlock;\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     if (!request.params[1].isNull()) {\n         LOCK(cs_main);\n         hashBlock = ParseHashV(request.params[1], \"blockhash\");\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -269,9 +271,9 @@ static RPCHelpMan gettxoutproof()\n \n         // Loop through txids and try to find which block they're in. Exit loop once a block is found.\n         for (const auto& tx : setTxids) {\n-            const Coin& coin = AccessByTxid(::ChainstateActive().CoinsTip(), tx);\n+            const Coin& coin = AccessByTxid(chainman.ActiveChainstate().CoinsTip(), tx);\n             if (!coin.IsSpent()) {\n-                pblockindex = ::ChainActive()[coin.nHeight];\n+                pblockindex = chainman.ActiveChain()[coin.nHeight];\n                 break;\n             }\n         }\n@@ -290,7 +292,7 @@ static RPCHelpMan gettxoutproof()\n         if (!tx || hashBlock.IsNull()) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n         }\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction index corrupt\");\n         }\n@@ -350,8 +352,9 @@ static RPCHelpMan verifytxoutproof()\n \n     LOCK(cs_main);\n \n-    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(merkleBlock.header.GetHash());\n-    if (!pindex || !::ChainActive().Contains(pindex) || pindex->nTx == 0) {\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n+    const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(merkleBlock.header.GetHash());\n+    if (!pindex || !chainman.ActiveChain().Contains(pindex) || pindex->nTx == 0) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n     }\n \n@@ -678,7 +681,7 @@ static RPCHelpMan combinerawtransaction()\n         const CTxMemPool& mempool = EnsureMemPool(request.context);\n         LOCK(cs_main);\n         LOCK(mempool.cs);\n-        CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n+        CCoinsViewCache &viewChain = EnsureChainman(request.context).ActiveChainstate().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n@@ -949,7 +952,7 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(EnsureChainman(request.context).ActiveChainstate(), mempool, std::move(tx),\n                                                   false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n@@ -1600,7 +1603,7 @@ static RPCHelpMan utxoupdatepsbt()\n     {\n         const CTxMemPool& mempool = EnsureMemPool(request.context);\n         LOCK2(cs_main, mempool.cs);\n-        CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n+        CCoinsViewCache &viewChain = EnsureChainman(request.context).ActiveChainstate().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n "
      }
    ]
  },
  {
    "sha": "3f0893479908ca28d6127c8d0ada30737cb830be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjA4OTM0Nzk5MDhjYTI4ZDYxMjdjOGQwYWRhMzA3MzdjYjgzMGJl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-02T21:24:03Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-05T15:14:33Z"
      },
      "message": "rest: Pass in NodeContext to rest_block",
      "tree": {
        "sha": "cdb805cf10e06d334e9d96ba0de3054c8f6d4eff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdb805cf10e06d334e9d96ba0de3054c8f6d4eff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f0893479908ca28d6127c8d0ada30737cb830be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0893479908ca28d6127c8d0ada30737cb830be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f0893479908ca28d6127c8d0ada30737cb830be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0893479908ca28d6127c8d0ada30737cb830be/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7be0671b950842fc3a17641a4a21501de0a800b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7be0671b950842fc3a17641a4a21501de0a800b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7be0671b950842fc3a17641a4a21501de0a800b5"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1093bf46ce847887261bd9c4e6acd6cf6b4cf282",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f0893479908ca28d6127c8d0ada30737cb830be/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f0893479908ca28d6127c8d0ada30737cb830be/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=3f0893479908ca28d6127c8d0ada30737cb830be",
        "patch": "@@ -231,7 +231,8 @@ static bool rest_headers(const std::any& context,\n     }\n }\n \n-static bool rest_block(HTTPRequest* req,\n+static bool rest_block(const std::any& context,\n+                       HTTPRequest* req,\n                        const std::string& strURIPart,\n                        bool showTxDetails)\n {\n@@ -297,12 +298,12 @@ static bool rest_block(HTTPRequest* req,\n \n static bool rest_block_extended(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(req, strURIPart, true);\n+    return rest_block(context, req, strURIPart, true);\n }\n \n static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(req, strURIPart, false);\n+    return rest_block(context, req, strURIPart, false);\n }\n \n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp"
      }
    ]
  },
  {
    "sha": "d7824acdb9b18fe8f151771a83ccae1681f16c66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzgyNGFjZGI5YjE4ZmU4ZjE1MTc3MWE4M2NjYWUxNjgxZjE2YzY2",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T20:16:34Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-05T15:14:33Z"
      },
      "message": "rest: Use existing NodeContext",
      "tree": {
        "sha": "6489a572437a73d2fa8b9f57aa3baefb16ab07a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6489a572437a73d2fa8b9f57aa3baefb16ab07a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7824acdb9b18fe8f151771a83ccae1681f16c66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7824acdb9b18fe8f151771a83ccae1681f16c66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7824acdb9b18fe8f151771a83ccae1681f16c66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7824acdb9b18fe8f151771a83ccae1681f16c66/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f0893479908ca28d6127c8d0ada30737cb830be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0893479908ca28d6127c8d0ada30737cb830be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f0893479908ca28d6127c8d0ada30737cb830be"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 18,
      "deletions": 14
    },
    "files": [
      {
        "sha": "36c7da1e30b38f8cfb1325541584a4b249cc4443",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7824acdb9b18fe8f151771a83ccae1681f16c66/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7824acdb9b18fe8f151771a83ccae1681f16c66/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=d7824acdb9b18fe8f151771a83ccae1681f16c66",
        "patch": "@@ -181,13 +181,14 @@ static bool rest_headers(const std::any& context,\n     headers.reserve(count);\n     {\n         LOCK(cs_main);\n-        tip = ::ChainActive().Tip();\n-        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n-        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+        ChainstateManager& chainman = EnsureChainman(context);\n+        tip = chainman.ActiveChain().Tip();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n+        while (pindex != nullptr && chainman.ActiveChain().Contains(pindex)) {\n             headers.push_back(pindex);\n             if (headers.size() == (unsigned long)count)\n                 break;\n-            pindex = ::ChainActive().Next(pindex);\n+            pindex = chainman.ActiveChain().Next(pindex);\n         }\n     }\n \n@@ -250,8 +251,9 @@ static bool rest_block(const std::any& context,\n     CBlockIndex* tip = nullptr;\n     {\n         LOCK(cs_main);\n-        tip = ::ChainActive().Tip();\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        ChainstateManager& chainman = EnsureChainman(context);\n+        tip = chainman.ActiveChain().Tip();\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n         }\n@@ -536,6 +538,7 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\n     std::string bitmapStringRepresentation;\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n+    ChainstateManager& chainman = EnsureChainman(context);\n     {\n         auto process_utxos = [&vOutPoints, &outs, &hits](const CCoinsView& view, const CTxMemPool& mempool) {\n             for (const COutPoint& vOutPoint : vOutPoints) {\n@@ -551,12 +554,12 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\n             if (!mempool) return false;\n             // use db+mempool as cache backend in case user likes to query mempool\n             LOCK2(cs_main, mempool->cs);\n-            CCoinsViewCache& viewChain = ::ChainstateActive().CoinsTip();\n+            CCoinsViewCache& viewChain = chainman.ActiveChainstate().CoinsTip();\n             CCoinsViewMemPool viewMempool(&viewChain, *mempool);\n             process_utxos(viewMempool, *mempool);\n         } else {\n             LOCK(cs_main);  // no need to lock mempool!\n-            process_utxos(::ChainstateActive().CoinsTip(), CTxMemPool());\n+            process_utxos(chainman.ActiveChainstate().CoinsTip(), CTxMemPool());\n         }\n \n         for (size_t i = 0; i < hits.size(); ++i) {\n@@ -571,7 +574,7 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\n         // serialize data\n         // use exact same output as mentioned in Bip64\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        ssGetUTXOResponse << ::ChainActive().Height() << ::ChainActive().Tip()->GetBlockHash() << bitmap << outs;\n+        ssGetUTXOResponse << chainman.ActiveChain().Height() << chainman.ActiveChain().Tip()->GetBlockHash() << bitmap << outs;\n         std::string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n \n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n@@ -581,7 +584,7 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\n \n     case RetFormat::HEX: {\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        ssGetUTXOResponse << ::ChainActive().Height() << ::ChainActive().Tip()->GetBlockHash() << bitmap << outs;\n+        ssGetUTXOResponse << chainman.ActiveChain().Height() << chainman.ActiveChain().Tip()->GetBlockHash() << bitmap << outs;\n         std::string strHex = HexStr(ssGetUTXOResponse) + \"\\n\";\n \n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n@@ -594,8 +597,8 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n-        objGetUTXOResponse.pushKV(\"chainHeight\", ::ChainActive().Height());\n-        objGetUTXOResponse.pushKV(\"chaintipHash\", ::ChainActive().Tip()->GetBlockHash().GetHex());\n+        objGetUTXOResponse.pushKV(\"chainHeight\", chainman.ActiveChain().Height());\n+        objGetUTXOResponse.pushKV(\"chaintipHash\", chainman.ActiveChain().Tip()->GetBlockHash().GetHex());\n         objGetUTXOResponse.pushKV(\"bitmap\", bitmapStringRepresentation);\n \n         UniValue utxos(UniValue::VARR);\n@@ -639,10 +642,11 @@ static bool rest_blockhash_by_height(const std::any& context, HTTPRequest* req,\n     CBlockIndex* pblockindex = nullptr;\n     {\n         LOCK(cs_main);\n-        if (blockheight > ::ChainActive().Height()) {\n+        const CChain& active_chain = EnsureChainman(context).ActiveChain();\n+        if (blockheight > active_chain.Height()) {\n             return RESTERR(req, HTTP_NOT_FOUND, \"Block height out of range\");\n         }\n-        pblockindex = ::ChainActive()[blockheight];\n+        pblockindex = active_chain[blockheight];\n     }\n     switch (rf) {\n     case RetFormat::BINARY: {"
      }
    ]
  },
  {
    "sha": "306b1cd3eeb2502904ed4698646d2c86d028aad2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDZiMWNkM2VlYjI1MDI5MDRlZDQ2OTg2NDZkMmM4NmQwMjhhYWQy",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-12T22:25:13Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-12T22:25:13Z"
      },
      "message": "rpc: Add alt Ensure* functions acepting NodeContext",
      "tree": {
        "sha": "ffb56a87c99acefbeb59d19d1007d6a27f03e18b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffb56a87c99acefbeb59d19d1007d6a27f03e18b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/306b1cd3eeb2502904ed4698646d2c86d028aad2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306b1cd3eeb2502904ed4698646d2c86d028aad2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/306b1cd3eeb2502904ed4698646d2c86d028aad2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306b1cd3eeb2502904ed4698646d2c86d028aad2/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7824acdb9b18fe8f151771a83ccae1681f16c66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7824acdb9b18fe8f151771a83ccae1681f16c66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7824acdb9b18fe8f151771a83ccae1681f16c66"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 21,
      "deletions": 6
    },
    "files": [
      {
        "sha": "cc7a29ffdb042dedc76549b0be87644b7d0fbfa2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/306b1cd3eeb2502904ed4698646d2c86d028aad2/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/306b1cd3eeb2502904ed4698646d2c86d028aad2/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=306b1cd3eeb2502904ed4698646d2c86d028aad2",
        "patch": "@@ -64,34 +64,46 @@ NodeContext& EnsureNodeContext(const std::any& context)\n     return *node_context;\n }\n \n-CTxMemPool& EnsureMemPool(const std::any& context)\n+CTxMemPool& EnsureMemPool(const NodeContext& node)\n {\n-    const NodeContext& node = EnsureNodeContext(context);\n     if (!node.mempool) {\n         throw JSONRPCError(RPC_CLIENT_MEMPOOL_DISABLED, \"Mempool disabled or instance not found\");\n     }\n     return *node.mempool;\n }\n \n-ChainstateManager& EnsureChainman(const std::any& context)\n+CTxMemPool& EnsureMemPool(const std::any& context)\n+{\n+    return EnsureMemPool(EnsureNodeContext(context));\n+}\n+\n+ChainstateManager& EnsureChainman(const NodeContext& node)\n {\n-    const NodeContext& node = EnsureNodeContext(context);\n     if (!node.chainman) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node chainman not found\");\n     }\n     WITH_LOCK(::cs_main, CHECK_NONFATAL(std::addressof(g_chainman) == std::addressof(*node.chainman)));\n     return *node.chainman;\n }\n \n-CBlockPolicyEstimator& EnsureFeeEstimator(const std::any& context)\n+ChainstateManager& EnsureChainman(const std::any& context)\n+{\n+    return EnsureChainman(EnsureNodeContext(context));\n+}\n+\n+CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node)\n {\n-    NodeContext& node = EnsureNodeContext(context);\n     if (!node.fee_estimator) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Fee estimation disabled\");\n     }\n     return *node.fee_estimator;\n }\n \n+CBlockPolicyEstimator& EnsureFeeEstimator(const std::any& context)\n+{\n+    return EnsureFeeEstimator(EnsureNodeContext(context));\n+}\n+\n /* Calculate the difficulty for a given block index.\n  */\n double GetDifficulty(const CBlockIndex* blockindex)"
      },
      {
        "sha": "17c7060761d9bdcab9186b1456ce4e31d038540b",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/306b1cd3eeb2502904ed4698646d2c86d028aad2/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/306b1cd3eeb2502904ed4698646d2c86d028aad2/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=306b1cd3eeb2502904ed4698646d2c86d028aad2",
        "patch": "@@ -57,8 +57,11 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fInclud\n void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr);\n \n NodeContext& EnsureNodeContext(const std::any& context);\n+CTxMemPool& EnsureMemPool(const NodeContext& node);\n CTxMemPool& EnsureMemPool(const std::any& context);\n+ChainstateManager& EnsureChainman(const NodeContext& node);\n ChainstateManager& EnsureChainman(const std::any& context);\n+CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node);\n CBlockPolicyEstimator& EnsureFeeEstimator(const std::any& context);\n \n /**"
      }
    ]
  },
  {
    "sha": "1570c7ee98612366df031bebef9e0468fb57b8a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTcwYzdlZTk4NjEyMzY2ZGYwMzFiZWJlZjllMDQ2OGZiNTdiOGEy",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-14T14:16:34Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-14T14:54:27Z"
      },
      "message": "rpc: Add renamed EnsureAny*() functions\n\n- The original Ensure*(const std::any& context) functions are kept and\n  the parameter renamed to ctx so that the scripted-diff in the\n  subsequent commit will work as expected\n\n- The renaming avoids overloading mistakes arising out of the untyped\n  std::any argument.",
      "tree": {
        "sha": "718ecb8d1335ff9730159d4f7de1aab8b02fb468",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/718ecb8d1335ff9730159d4f7de1aab8b02fb468"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1570c7ee98612366df031bebef9e0468fb57b8a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1570c7ee98612366df031bebef9e0468fb57b8a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1570c7ee98612366df031bebef9e0468fb57b8a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1570c7ee98612366df031bebef9e0468fb57b8a2/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "306b1cd3eeb2502904ed4698646d2c86d028aad2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306b1cd3eeb2502904ed4698646d2c86d028aad2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/306b1cd3eeb2502904ed4698646d2c86d028aad2"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 24,
      "deletions": 4
    },
    "files": [
      {
        "sha": "074f3e3924e7b9a85467903fde37288d34ccbf11",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1570c7ee98612366df031bebef9e0468fb57b8a2/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1570c7ee98612366df031bebef9e0468fb57b8a2/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1570c7ee98612366df031bebef9e0468fb57b8a2",
        "patch": "@@ -55,7 +55,11 @@ static Mutex cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock GUARDED_BY(cs_blockchange);\n \n-NodeContext& EnsureNodeContext(const std::any& context)\n+NodeContext& EnsureNodeContext(const std::any& ctx) {\n+    return EnsureAnyNodeContext(ctx);\n+}\n+\n+NodeContext& EnsureAnyNodeContext(const std::any& context)\n {\n     auto node_context = util::AnyPtr<NodeContext>(context);\n     if (!node_context) {\n@@ -64,6 +68,10 @@ NodeContext& EnsureNodeContext(const std::any& context)\n     return *node_context;\n }\n \n+CTxMemPool& EnsureMemPool(const std::any& ctx) {\n+    return EnsureAnyMemPool(ctx);\n+}\n+\n CTxMemPool& EnsureMemPool(const NodeContext& node)\n {\n     if (!node.mempool) {\n@@ -72,11 +80,15 @@ CTxMemPool& EnsureMemPool(const NodeContext& node)\n     return *node.mempool;\n }\n \n-CTxMemPool& EnsureMemPool(const std::any& context)\n+CTxMemPool& EnsureAnyMemPool(const std::any& context)\n {\n     return EnsureMemPool(EnsureNodeContext(context));\n }\n \n+ChainstateManager& EnsureChainman(const std::any& ctx) {\n+    return EnsureAnyChainman(ctx);\n+}\n+\n ChainstateManager& EnsureChainman(const NodeContext& node)\n {\n     if (!node.chainman) {\n@@ -86,11 +98,15 @@ ChainstateManager& EnsureChainman(const NodeContext& node)\n     return *node.chainman;\n }\n \n-ChainstateManager& EnsureChainman(const std::any& context)\n+ChainstateManager& EnsureAnyChainman(const std::any& context)\n {\n     return EnsureChainman(EnsureNodeContext(context));\n }\n \n+CBlockPolicyEstimator& EnsureFeeEstimator(const std::any& ctx) {\n+    return EnsureAnyFeeEstimator(ctx);\n+}\n+\n CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node)\n {\n     if (!node.fee_estimator) {\n@@ -99,7 +115,7 @@ CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node)\n     return *node.fee_estimator;\n }\n \n-CBlockPolicyEstimator& EnsureFeeEstimator(const std::any& context)\n+CBlockPolicyEstimator& EnsureAnyFeeEstimator(const std::any& context)\n {\n     return EnsureFeeEstimator(EnsureNodeContext(context));\n }"
      },
      {
        "sha": "3ac15c869dd9b9e5d7ef5a5727d1eb31a72456ce",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1570c7ee98612366df031bebef9e0468fb57b8a2/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1570c7ee98612366df031bebef9e0468fb57b8a2/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=1570c7ee98612366df031bebef9e0468fb57b8a2",
        "patch": "@@ -57,12 +57,16 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fInclud\n void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr);\n \n NodeContext& EnsureNodeContext(const std::any& context);\n+NodeContext& EnsureAnyNodeContext(const std::any& context);\n CTxMemPool& EnsureMemPool(const NodeContext& node);\n CTxMemPool& EnsureMemPool(const std::any& context);\n+CTxMemPool& EnsureAnyMemPool(const std::any& context);\n ChainstateManager& EnsureChainman(const NodeContext& node);\n ChainstateManager& EnsureChainman(const std::any& context);\n+ChainstateManager& EnsureAnyChainman(const std::any& context);\n CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node);\n CBlockPolicyEstimator& EnsureFeeEstimator(const std::any& context);\n+CBlockPolicyEstimator& EnsureAnyFeeEstimator(const std::any& context);\n \n /**\n  * Helper to create UTXO snapshots given a chainstate and a file handle."
      }
    ]
  },
  {
    "sha": "6fb65b49f4d393b091479be5a5df5a0a160cf986",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmI2NWI0OWY0ZDM5M2IwOTE0NzliZTVhNWRmNWEwYTE2MGNmOTg2",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-13T21:04:43Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-14T15:09:34Z"
      },
      "message": "scripted-diff: rest/rpc: Use renamed EnsureAny*()\n\n-BEGIN VERIFY SCRIPT-\nsed -i -E 's@Ensure([^(]+)(\\((request\\.|)context\\))@EnsureAny\\1\\2@g' \\\n    -- src/rest.cpp src/rpc/*.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "b2c1ea6f247edf1581b678a2a7201e2549f6f7e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2c1ea6f247edf1581b678a2a7201e2549f6f7e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fb65b49f4d393b091479be5a5df5a0a160cf986",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fb65b49f4d393b091479be5a5df5a0a160cf986",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fb65b49f4d393b091479be5a5df5a0a160cf986",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fb65b49f4d393b091479be5a5df5a0a160cf986/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1570c7ee98612366df031bebef9e0468fb57b8a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1570c7ee98612366df031bebef9e0468fb57b8a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1570c7ee98612366df031bebef9e0468fb57b8a2"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 80,
      "deletions": 80
    },
    "files": [
      {
        "sha": "dd2d649ff452c98df56e44fc2d32f237c6b805ad",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fb65b49f4d393b091479be5a5df5a0a160cf986/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fb65b49f4d393b091479be5a5df5a0a160cf986/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6fb65b49f4d393b091479be5a5df5a0a160cf986",
        "patch": "@@ -181,7 +181,7 @@ static bool rest_headers(const std::any& context,\n     headers.reserve(count);\n     {\n         LOCK(cs_main);\n-        ChainstateManager& chainman = EnsureChainman(context);\n+        ChainstateManager& chainman = EnsureAnyChainman(context);\n         tip = chainman.ActiveChain().Tip();\n         const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n         while (pindex != nullptr && chainman.ActiveChain().Contains(pindex)) {\n@@ -251,7 +251,7 @@ static bool rest_block(const std::any& context,\n     CBlockIndex* tip = nullptr;\n     {\n         LOCK(cs_main);\n-        ChainstateManager& chainman = EnsureChainman(context);\n+        ChainstateManager& chainman = EnsureAnyChainman(context);\n         tip = chainman.ActiveChain().Tip();\n         pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n@@ -538,7 +538,7 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\n     std::string bitmapStringRepresentation;\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n-    ChainstateManager& chainman = EnsureChainman(context);\n+    ChainstateManager& chainman = EnsureAnyChainman(context);\n     {\n         auto process_utxos = [&vOutPoints, &outs, &hits](const CCoinsView& view, const CTxMemPool& mempool) {\n             for (const COutPoint& vOutPoint : vOutPoints) {\n@@ -642,7 +642,7 @@ static bool rest_blockhash_by_height(const std::any& context, HTTPRequest* req,\n     CBlockIndex* pblockindex = nullptr;\n     {\n         LOCK(cs_main);\n-        const CChain& active_chain = EnsureChainman(context).ActiveChain();\n+        const CChain& active_chain = EnsureAnyChainman(context).ActiveChain();\n         if (blockheight > active_chain.Height()) {\n             return RESTERR(req, HTTP_NOT_FOUND, \"Block height out of range\");\n         }"
      },
      {
        "sha": "9bf03f24b50f2ff49e4493eee47c1cde10748d57",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fb65b49f4d393b091479be5a5df5a0a160cf986/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fb65b49f4d393b091479be5a5df5a0a160cf986/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=6fb65b49f4d393b091479be5a5df5a0a160cf986",
        "patch": "@@ -82,7 +82,7 @@ CTxMemPool& EnsureMemPool(const NodeContext& node)\n \n CTxMemPool& EnsureAnyMemPool(const std::any& context)\n {\n-    return EnsureMemPool(EnsureNodeContext(context));\n+    return EnsureMemPool(EnsureAnyNodeContext(context));\n }\n \n ChainstateManager& EnsureChainman(const std::any& ctx) {\n@@ -100,7 +100,7 @@ ChainstateManager& EnsureChainman(const NodeContext& node)\n \n ChainstateManager& EnsureAnyChainman(const std::any& context)\n {\n-    return EnsureChainman(EnsureNodeContext(context));\n+    return EnsureChainman(EnsureAnyNodeContext(context));\n }\n \n CBlockPolicyEstimator& EnsureFeeEstimator(const std::any& ctx) {\n@@ -117,7 +117,7 @@ CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node)\n \n CBlockPolicyEstimator& EnsureAnyFeeEstimator(const std::any& context)\n {\n-    return EnsureFeeEstimator(EnsureNodeContext(context));\n+    return EnsureFeeEstimator(EnsureAnyNodeContext(context));\n }\n \n /* Calculate the difficulty for a given block index.\n@@ -227,7 +227,7 @@ static RPCHelpMan getblockcount()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return EnsureChainman(request.context).ActiveChain().Height();\n+    return EnsureAnyChainman(request.context).ActiveChain().Height();\n },\n     };\n }\n@@ -246,7 +246,7 @@ static RPCHelpMan getbestblockhash()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return EnsureChainman(request.context).ActiveChain().Tip()->GetBlockHash().GetHex();\n+    return EnsureAnyChainman(request.context).ActiveChain().Tip()->GetBlockHash().GetHex();\n },\n     };\n }\n@@ -427,7 +427,7 @@ static RPCHelpMan getdifficulty()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return GetDifficulty(EnsureChainman(request.context).ActiveChain().Tip());\n+    return GetDifficulty(EnsureAnyChainman(request.context).ActiveChain().Tip());\n },\n     };\n }\n@@ -609,7 +609,7 @@ static RPCHelpMan getrawmempool()\n         include_mempool_sequence = request.params[1].get_bool();\n     }\n \n-    return MempoolToJSON(EnsureMemPool(request.context), fVerbose, include_mempool_sequence);\n+    return MempoolToJSON(EnsureAnyMemPool(request.context), fVerbose, include_mempool_sequence);\n },\n     };\n }\n@@ -644,7 +644,7 @@ static RPCHelpMan getmempoolancestors()\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    const CTxMemPool& mempool = EnsureMemPool(request.context);\n+    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -708,7 +708,7 @@ static RPCHelpMan getmempooldescendants()\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    const CTxMemPool& mempool = EnsureMemPool(request.context);\n+    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -760,7 +760,7 @@ static RPCHelpMan getmempoolentry()\n {\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n-    const CTxMemPool& mempool = EnsureMemPool(request.context);\n+    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n     LOCK(mempool.cs);\n \n     CTxMemPool::txiter it = mempool.mapTx.find(hash);\n@@ -792,7 +792,7 @@ static RPCHelpMan getblockhash()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    const CChain& active_chain = EnsureChainman(request.context).ActiveChain();\n+    const CChain& active_chain = EnsureAnyChainman(request.context).ActiveChain();\n \n     int nHeight = request.params[0].get_int();\n     if (nHeight < 0 || nHeight > active_chain.Height())\n@@ -852,7 +852,7 @@ static RPCHelpMan getblockheader()\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        ChainstateManager& chainman = EnsureChainman(request.context);\n+        ChainstateManager& chainman = EnsureAnyChainman(request.context);\n         pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         tip = chainman.ActiveChain().Tip();\n     }\n@@ -977,7 +977,7 @@ static RPCHelpMan getblock()\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        ChainstateManager& chainman = EnsureChainman(request.context);\n+        ChainstateManager& chainman = EnsureAnyChainman(request.context);\n         pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         tip = chainman.ActiveChain().Tip();\n \n@@ -1020,7 +1020,7 @@ static RPCHelpMan pruneblockchain()\n         throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n \n     LOCK(cs_main);\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n \n     int heightParam = request.params[0].get_int();\n     if (heightParam < 0)\n@@ -1102,7 +1102,7 @@ static RPCHelpMan gettxoutsetinfo()\n     UniValue ret(UniValue::VOBJ);\n \n     CCoinsStats stats;\n-    CChainState& active_chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    CChainState& active_chainstate = EnsureAnyChainman(request.context).ActiveChainstate();\n     active_chainstate.ForceFlushStateToDisk();\n \n     const CoinStatsHashType hash_type{request.params[0].isNull() ? CoinStatsHashType::HASH_SERIALIZED : ParseHashType(request.params[0].get_str())};\n@@ -1114,7 +1114,7 @@ static RPCHelpMan gettxoutsetinfo()\n         coins_view = &active_chainstate.CoinsDB();\n         blockman = &active_chainstate.m_blockman;\n     }\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if (GetUTXOStats(coins_view, *blockman, stats, hash_type, node.rpc_interruption_point)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n@@ -1186,11 +1186,11 @@ static RPCHelpMan gettxout()\n         fMempool = request.params[2].get_bool();\n \n     Coin coin;\n-    CChainState& active_chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    CChainState& active_chainstate = EnsureAnyChainman(request.context).ActiveChainstate();\n     CCoinsViewCache* coins_view = &active_chainstate.CoinsTip();\n \n     if (fMempool) {\n-        const CTxMemPool& mempool = EnsureMemPool(request.context);\n+        const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(coins_view, mempool);\n         if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n@@ -1242,7 +1242,7 @@ static RPCHelpMan verifychain()\n \n     LOCK(cs_main);\n \n-    CChainState& active_chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    CChainState& active_chainstate = EnsureAnyChainman(request.context).ActiveChainstate();\n     return CVerifyDB().VerifyDB(Params(), active_chainstate, &active_chainstate.CoinsTip(), check_level, check_depth);\n },\n     };\n@@ -1370,7 +1370,7 @@ RPCHelpMan getblockchaininfo()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n \n     const CBlockIndex* tip = chainman.ActiveChain().Tip();\n     CHECK_NONFATAL(tip);\n@@ -1463,7 +1463,7 @@ static RPCHelpMan getchaintips()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n \n     /*\n@@ -1575,7 +1575,7 @@ static RPCHelpMan getmempoolinfo()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureMemPool(request.context));\n+    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n },\n     };\n }\n@@ -1599,7 +1599,7 @@ static RPCHelpMan preciousblock()\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CBlockIndex* pblockindex;\n \n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     {\n         LOCK(cs_main);\n         pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n@@ -1637,7 +1637,7 @@ static RPCHelpMan invalidateblock()\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     BlockValidationState state;\n \n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n@@ -1676,7 +1676,7 @@ static RPCHelpMan reconsiderblock()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n     {\n@@ -1727,7 +1727,7 @@ static RPCHelpMan getchaintxstats()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n \n@@ -1910,7 +1910,7 @@ static RPCHelpMan getblockstats()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n \n     CBlockIndex* pindex;\n     if (request.params[0].isNum()) {\n@@ -2121,7 +2121,7 @@ static RPCHelpMan savemempool()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    const CTxMemPool& mempool = EnsureMemPool(request.context);\n+    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n \n     if (!mempool.IsLoaded()) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"The mempool was not loaded yet\");\n@@ -2313,14 +2313,14 @@ static RPCHelpMan scantxoutset()\n         CBlockIndex* tip;\n         {\n             LOCK(cs_main);\n-            ChainstateManager& chainman = EnsureChainman(request.context);\n+            ChainstateManager& chainman = EnsureAnyChainman(request.context);\n             chainman.ActiveChainstate().ForceFlushStateToDisk();\n             pcursor = std::unique_ptr<CCoinsViewCursor>(chainman.ActiveChainstate().CoinsDB().Cursor());\n             CHECK_NONFATAL(pcursor);\n             tip = chainman.ActiveChain().Tip();\n             CHECK_NONFATAL(tip);\n         }\n-        NodeContext& node = EnsureNodeContext(request.context);\n+        NodeContext& node = EnsureAnyNodeContext(request.context);\n         bool res = FindScriptPubKey(g_scan_progress, g_should_abort_scan, count, pcursor.get(), needles, coins, node.rpc_interruption_point);\n         result.pushKV(\"success\", res);\n         result.pushKV(\"txouts\", count);\n@@ -2394,7 +2394,7 @@ static RPCHelpMan getblockfilter()\n     bool block_was_connected;\n     {\n         LOCK(cs_main);\n-        block_index = EnsureChainman(request.context).m_blockman.LookupBlockIndex(block_hash);\n+        block_index = EnsureAnyChainman(request.context).m_blockman.LookupBlockIndex(block_hash);\n         if (!block_index) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -2477,7 +2477,7 @@ static RPCHelpMan dumptxoutset()\n \n     FILE* file{fsbridge::fopen(temppath, \"wb\")};\n     CAutoFile afile{file, SER_DISK, CLIENT_VERSION};\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), afile);\n     fs::rename(temppath, path);\n "
      },
      {
        "sha": "f72a19a8a10a1e59ed8c2357d0f411338fd6dad6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fb65b49f4d393b091479be5a5df5a0a160cf986/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fb65b49f4d393b091479be5a5df5a0a160cf986/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=6fb65b49f4d393b091479be5a5df5a0a160cf986",
        "patch": "@@ -101,7 +101,7 @@ static RPCHelpMan getnetworkhashps()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    const CChain& active_chain = EnsureChainman(request.context).ActiveChain();\n+    const CChain& active_chain = EnsureAnyChainman(request.context).ActiveChain();\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1, active_chain);\n },\n     };\n@@ -235,8 +235,8 @@ static RPCHelpMan generatetodescriptor()\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n     }\n \n-    const CTxMemPool& mempool = EnsureMemPool(request.context);\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n \n     return generateBlocks(chainman, mempool, coinbase_script, num_blocks, max_tries);\n },\n@@ -280,8 +280,8 @@ static RPCHelpMan generatetoaddress()\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address\");\n     }\n \n-    const CTxMemPool& mempool = EnsureMemPool(request.context);\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n \n     CScript coinbase_script = GetScriptForDestination(destination);\n \n@@ -329,7 +329,7 @@ static RPCHelpMan generateblock()\n         coinbase_script = GetScriptForDestination(destination);\n     }\n \n-    const CTxMemPool& mempool = EnsureMemPool(request.context);\n+    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n \n     std::vector<CTransactionRef> txs;\n     const auto raw_txs_or_txids = request.params[1].get_array();\n@@ -358,7 +358,7 @@ static RPCHelpMan generateblock()\n     CChainParams chainparams(Params());\n     CBlock block;\n \n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     {\n         LOCK(cs_main);\n \n@@ -425,8 +425,8 @@ static RPCHelpMan getmininginfo()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    const CTxMemPool& mempool = EnsureMemPool(request.context);\n-    const CChain& active_chain = EnsureChainman(request.context).ActiveChain();\n+    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+    const CChain& active_chain = EnsureAnyChainman(request.context).ActiveChain();\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"blocks\",           (int)active_chain.Height());\n@@ -474,7 +474,7 @@ static RPCHelpMan prioritisetransaction()\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Priority is no longer supported, dummy argument to prioritisetransaction must be 0.\");\n     }\n \n-    EnsureMemPool(request.context).PrioritiseTransaction(hash, nAmount);\n+    EnsureAnyMemPool(request.context).PrioritiseTransaction(hash, nAmount);\n     return true;\n },\n     };\n@@ -596,7 +596,7 @@ static RPCHelpMan getblocktemplate()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n \n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n@@ -663,7 +663,7 @@ static RPCHelpMan getblocktemplate()\n     if (strMode != \"template\")\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n \n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -678,7 +678,7 @@ static RPCHelpMan getblocktemplate()\n     }\n \n     static unsigned int nTransactionsUpdatedLast;\n-    const CTxMemPool& mempool = EnsureMemPool(request.context);\n+    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n \n     if (!lpval.isNull())\n     {\n@@ -975,7 +975,7 @@ static RPCHelpMan submitblock()\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block does not start with a coinbase\");\n     }\n \n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     uint256 hash = block.GetHash();\n     {\n         LOCK(cs_main);\n@@ -1034,7 +1034,7 @@ static RPCHelpMan submitheader()\n     if (!DecodeHexBlockHeader(h, request.params[0].get_str())) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block header decode failed\");\n     }\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     {\n         LOCK(cs_main);\n         if (!chainman.m_blockman.LookupBlockIndex(h.hashPrevBlock)) {\n@@ -1092,7 +1092,7 @@ static RPCHelpMan estimatesmartfee()\n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n \n-    CBlockPolicyEstimator& fee_estimator = EnsureFeeEstimator(request.context);\n+    CBlockPolicyEstimator& fee_estimator = EnsureAnyFeeEstimator(request.context);\n \n     unsigned int max_target = fee_estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n@@ -1180,7 +1180,7 @@ static RPCHelpMan estimaterawfee()\n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n \n-    CBlockPolicyEstimator& fee_estimator = EnsureFeeEstimator(request.context);\n+    CBlockPolicyEstimator& fee_estimator = EnsureAnyFeeEstimator(request.context);\n \n     unsigned int max_target = fee_estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);"
      },
      {
        "sha": "cd354f46c2cf73a00d33298a86f4c47d1a4295c5",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fb65b49f4d393b091479be5a5df5a0a160cf986/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fb65b49f4d393b091479be5a5df5a0a160cf986/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=6fb65b49f4d393b091479be5a5df5a0a160cf986",
        "patch": "@@ -53,7 +53,7 @@ static RPCHelpMan getconnectioncount()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -76,7 +76,7 @@ static RPCHelpMan ping()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if (!node.peerman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n@@ -165,7 +165,7 @@ static RPCHelpMan getpeerinfo()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if(!node.connman || !node.peerman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n@@ -285,7 +285,7 @@ static RPCHelpMan addnode()\n             self.ToString());\n     }\n \n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -350,7 +350,7 @@ static RPCHelpMan addconnection()\n         throw JSONRPCError(RPC_INVALID_PARAMETER, self.ToString());\n     }\n \n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if (!node.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled.\");\n     }\n@@ -388,7 +388,7 @@ static RPCHelpMan disconnectnode()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -448,7 +448,7 @@ static RPCHelpMan getaddednodeinfo()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -519,7 +519,7 @@ static RPCHelpMan getnettotals()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -618,7 +618,7 @@ static RPCHelpMan getnetworkinfo()\n     obj.pushKV(\"version\",       CLIENT_VERSION);\n     obj.pushKV(\"subversion\",    strSubVersion);\n     obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if (node.connman) {\n         ServiceFlags services = node.connman->GetLocalServices();\n         obj.pushKV(\"localservices\", strprintf(\"%016x\", services));\n@@ -680,7 +680,7 @@ static RPCHelpMan setban()\n     if (strCommand != \"add\" && strCommand != \"remove\") {\n         throw std::runtime_error(help.ToString());\n     }\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if (!node.banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n@@ -760,7 +760,7 @@ static RPCHelpMan listbanned()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if(!node.banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n@@ -797,7 +797,7 @@ static RPCHelpMan clearbanned()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if (!node.banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n@@ -820,7 +820,7 @@ static RPCHelpMan setnetworkactive()\n                 RPCExamples{\"\"},\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if (!node.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n@@ -857,7 +857,7 @@ static RPCHelpMan getnodeaddresses()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if (!node.connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n@@ -906,7 +906,7 @@ static RPCHelpMan addpeeraddress()\n         },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if (!node.addrman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n     }"
      },
      {
        "sha": "3e6edde41a4eda6444bf60f16307720ce0f44724",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fb65b49f4d393b091479be5a5df5a0a160cf986/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fb65b49f4d393b091479be5a5df5a0a160cf986/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=6fb65b49f4d393b091479be5a5df5a0a160cf986",
        "patch": "@@ -157,8 +157,8 @@ static RPCHelpMan getrawtransaction()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    const NodeContext& node = EnsureNodeContext(request.context);\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    const NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n \n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -258,7 +258,7 @@ static RPCHelpMan gettxoutproof()\n \n     CBlockIndex* pblockindex = nullptr;\n     uint256 hashBlock;\n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     if (!request.params[1].isNull()) {\n         LOCK(cs_main);\n         hashBlock = ParseHashV(request.params[1], \"blockhash\");\n@@ -352,7 +352,7 @@ static RPCHelpMan verifytxoutproof()\n \n     LOCK(cs_main);\n \n-    ChainstateManager& chainman = EnsureChainman(request.context);\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(merkleBlock.header.GetHash());\n     if (!pindex || !chainman.ActiveChain().Contains(pindex) || pindex->nTx == 0) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n@@ -678,10 +678,10 @@ static RPCHelpMan combinerawtransaction()\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        const CTxMemPool& mempool = EnsureMemPool(request.context);\n+        const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n         LOCK(cs_main);\n         LOCK(mempool.cs);\n-        CCoinsViewCache &viewChain = EnsureChainman(request.context).ActiveChainstate().CoinsTip();\n+        CCoinsViewCache &viewChain = EnsureAnyChainman(request.context).ActiveChainstate().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n@@ -805,7 +805,7 @@ static RPCHelpMan signrawtransactionwithkey()\n     for (const CTxIn& txin : mtx.vin) {\n         coins[txin.prevout]; // Create empty map entry keyed by prevout.\n     }\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     FindCoins(node, coins);\n \n     // Parse the prevtxs array\n@@ -868,7 +868,7 @@ static RPCHelpMan sendrawtransaction()\n \n     std::string err_string;\n     AssertLockNotHeld(cs_main);\n-    NodeContext& node = EnsureNodeContext(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     const TransactionError err = BroadcastTransaction(node, tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n     if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n@@ -943,7 +943,7 @@ static RPCHelpMan testmempoolaccept()\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    CTxMemPool& mempool = EnsureMemPool(request.context);\n+    CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n     CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n@@ -952,7 +952,7 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(EnsureChainman(request.context).ActiveChainstate(), mempool, std::move(tx),\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(EnsureAnyChainman(request.context).ActiveChainstate(), mempool, std::move(tx),\n                                                   false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n@@ -1601,9 +1601,9 @@ static RPCHelpMan utxoupdatepsbt()\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        const CTxMemPool& mempool = EnsureMemPool(request.context);\n+        const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n         LOCK2(cs_main, mempool.cs);\n-        CCoinsViewCache &viewChain = EnsureChainman(request.context).ActiveChainstate().CoinsTip();\n+        CCoinsViewCache &viewChain = EnsureAnyChainman(request.context).ActiveChainstate().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n "
      }
    ]
  },
  {
    "sha": "038854f31e3511e8bb6e163305cab0a96783d25b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzg4NTRmMzFlMzUxMWU4YmI2ZTE2MzMwNWNhYjBhOTY3ODNkMjVi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-14T14:34:50Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-14T15:10:08Z"
      },
      "message": "rest/rpc: Remove now-unused old Ensure functions\n\nThe scripted-diff in the previous commit should have removed all calls\nto functions like: Ensure(?!Any)\\(const std::any& (context|ctx)\\), so we\ncan remove them now.",
      "tree": {
        "sha": "21835a5fe6970e28b74ab4da5ec5a778bcc75431",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21835a5fe6970e28b74ab4da5ec5a778bcc75431"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/038854f31e3511e8bb6e163305cab0a96783d25b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/038854f31e3511e8bb6e163305cab0a96783d25b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/038854f31e3511e8bb6e163305cab0a96783d25b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/038854f31e3511e8bb6e163305cab0a96783d25b/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fb65b49f4d393b091479be5a5df5a0a160cf986",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fb65b49f4d393b091479be5a5df5a0a160cf986",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fb65b49f4d393b091479be5a5df5a0a160cf986"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 0,
      "deletions": 20
    },
    "files": [
      {
        "sha": "19df2d80316e3dddd54df8dad167ba8218d01199",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/038854f31e3511e8bb6e163305cab0a96783d25b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/038854f31e3511e8bb6e163305cab0a96783d25b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=038854f31e3511e8bb6e163305cab0a96783d25b",
        "patch": "@@ -55,10 +55,6 @@ static Mutex cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock GUARDED_BY(cs_blockchange);\n \n-NodeContext& EnsureNodeContext(const std::any& ctx) {\n-    return EnsureAnyNodeContext(ctx);\n-}\n-\n NodeContext& EnsureAnyNodeContext(const std::any& context)\n {\n     auto node_context = util::AnyPtr<NodeContext>(context);\n@@ -68,10 +64,6 @@ NodeContext& EnsureAnyNodeContext(const std::any& context)\n     return *node_context;\n }\n \n-CTxMemPool& EnsureMemPool(const std::any& ctx) {\n-    return EnsureAnyMemPool(ctx);\n-}\n-\n CTxMemPool& EnsureMemPool(const NodeContext& node)\n {\n     if (!node.mempool) {\n@@ -85,10 +77,6 @@ CTxMemPool& EnsureAnyMemPool(const std::any& context)\n     return EnsureMemPool(EnsureAnyNodeContext(context));\n }\n \n-ChainstateManager& EnsureChainman(const std::any& ctx) {\n-    return EnsureAnyChainman(ctx);\n-}\n-\n ChainstateManager& EnsureChainman(const NodeContext& node)\n {\n     if (!node.chainman) {\n@@ -103,10 +91,6 @@ ChainstateManager& EnsureAnyChainman(const std::any& context)\n     return EnsureChainman(EnsureAnyNodeContext(context));\n }\n \n-CBlockPolicyEstimator& EnsureFeeEstimator(const std::any& ctx) {\n-    return EnsureAnyFeeEstimator(ctx);\n-}\n-\n CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node)\n {\n     if (!node.fee_estimator) {"
      },
      {
        "sha": "ffb6f03b476fc785f243b7e5d1c793d861d52808",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/038854f31e3511e8bb6e163305cab0a96783d25b/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/038854f31e3511e8bb6e163305cab0a96783d25b/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=038854f31e3511e8bb6e163305cab0a96783d25b",
        "patch": "@@ -56,16 +56,12 @@ void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES],\n void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr);\n \n-NodeContext& EnsureNodeContext(const std::any& context);\n NodeContext& EnsureAnyNodeContext(const std::any& context);\n CTxMemPool& EnsureMemPool(const NodeContext& node);\n-CTxMemPool& EnsureMemPool(const std::any& context);\n CTxMemPool& EnsureAnyMemPool(const std::any& context);\n ChainstateManager& EnsureChainman(const NodeContext& node);\n-ChainstateManager& EnsureChainman(const std::any& context);\n ChainstateManager& EnsureAnyChainman(const std::any& context);\n CBlockPolicyEstimator& EnsureFeeEstimator(const NodeContext& node);\n-CBlockPolicyEstimator& EnsureFeeEstimator(const std::any& context);\n CBlockPolicyEstimator& EnsureAnyFeeEstimator(const std::any& context);\n \n /**"
      }
    ]
  },
  {
    "sha": "6a3d1920209cded0dae52fb9070a3530d9a4e5fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTNkMTkyMDIwOWNkZWQwZGFlNTJmYjkwNzBhMzUzMGQ5YTRlNWZk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-12T22:41:05Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-14T15:13:09Z"
      },
      "message": "rpc: Tidy up local references (see commit message)\n\nOrganize local variables/references such that:\n\n1. There is always a `ChainstateManager` reference before any `LOCK(cs_main)`.\n2. NodeContext references are used with Ensure*() functions introduced in\n   previous commit where appropriate to avoid duplicate assertions.",
      "tree": {
        "sha": "e816a3b9369c123cd93cb3145477df6a885a1731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e816a3b9369c123cd93cb3145477df6a885a1731"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a3d1920209cded0dae52fb9070a3530d9a4e5fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a3d1920209cded0dae52fb9070a3530d9a4e5fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a3d1920209cded0dae52fb9070a3530d9a4e5fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a3d1920209cded0dae52fb9070a3530d9a4e5fd/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "038854f31e3511e8bb6e163305cab0a96783d25b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/038854f31e3511e8bb6e163305cab0a96783d25b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/038854f31e3511e8bb6e163305cab0a96783d25b"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 64,
      "deletions": 43
    },
    "files": [
      {
        "sha": "eea0d67882237cbf15a4e7898d2c14cc74852136",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3d1920209cded0dae52fb9070a3530d9a4e5fd/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3d1920209cded0dae52fb9070a3530d9a4e5fd/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6a3d1920209cded0dae52fb9070a3530d9a4e5fd",
        "patch": "@@ -180,8 +180,8 @@ static bool rest_headers(const std::any& context,\n     std::vector<const CBlockIndex *> headers;\n     headers.reserve(count);\n     {\n-        LOCK(cs_main);\n         ChainstateManager& chainman = EnsureAnyChainman(context);\n+        LOCK(cs_main);\n         tip = chainman.ActiveChain().Tip();\n         const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n         while (pindex != nullptr && chainman.ActiveChain().Contains(pindex)) {\n@@ -250,8 +250,8 @@ static bool rest_block(const std::any& context,\n     CBlockIndex* pblockindex = nullptr;\n     CBlockIndex* tip = nullptr;\n     {\n-        LOCK(cs_main);\n         ChainstateManager& chainman = EnsureAnyChainman(context);\n+        LOCK(cs_main);\n         tip = chainman.ActiveChain().Tip();\n         pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n@@ -641,8 +641,9 @@ static bool rest_blockhash_by_height(const std::any& context, HTTPRequest* req,\n \n     CBlockIndex* pblockindex = nullptr;\n     {\n+        ChainstateManager& chainman = EnsureAnyChainman(context);\n         LOCK(cs_main);\n-        const CChain& active_chain = EnsureAnyChainman(context).ActiveChain();\n+        const CChain& active_chain = chainman.ActiveChain();\n         if (blockheight > active_chain.Height()) {\n             return RESTERR(req, HTTP_NOT_FOUND, \"Block height out of range\");\n         }"
      },
      {
        "sha": "5fd1521e738e8a8e1486d460395dec61c93545fb",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 17,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3d1920209cded0dae52fb9070a3530d9a4e5fd/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3d1920209cded0dae52fb9070a3530d9a4e5fd/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=6a3d1920209cded0dae52fb9070a3530d9a4e5fd",
        "patch": "@@ -210,8 +210,9 @@ static RPCHelpMan getblockcount()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n-    return EnsureAnyChainman(request.context).ActiveChain().Height();\n+    return chainman.ActiveChain().Height();\n },\n     };\n }\n@@ -229,8 +230,9 @@ static RPCHelpMan getbestblockhash()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n-    return EnsureAnyChainman(request.context).ActiveChain().Tip()->GetBlockHash().GetHex();\n+    return chainman.ActiveChain().Tip()->GetBlockHash().GetHex();\n },\n     };\n }\n@@ -410,8 +412,9 @@ static RPCHelpMan getdifficulty()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n-    return GetDifficulty(EnsureAnyChainman(request.context).ActiveChain().Tip());\n+    return GetDifficulty(chainman.ActiveChain().Tip());\n },\n     };\n }\n@@ -775,8 +778,9 @@ static RPCHelpMan getblockhash()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n-    const CChain& active_chain = EnsureAnyChainman(request.context).ActiveChain();\n+    const CChain& active_chain = chainman.ActiveChain();\n \n     int nHeight = request.params[0].get_int();\n     if (nHeight < 0 || nHeight > active_chain.Height())\n@@ -835,8 +839,8 @@ static RPCHelpMan getblockheader()\n     const CBlockIndex* pblockindex;\n     const CBlockIndex* tip;\n     {\n-        LOCK(cs_main);\n         ChainstateManager& chainman = EnsureAnyChainman(request.context);\n+        LOCK(cs_main);\n         pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         tip = chainman.ActiveChain().Tip();\n     }\n@@ -960,8 +964,8 @@ static RPCHelpMan getblock()\n     const CBlockIndex* pblockindex;\n     const CBlockIndex* tip;\n     {\n-        LOCK(cs_main);\n         ChainstateManager& chainman = EnsureAnyChainman(request.context);\n+        LOCK(cs_main);\n         pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         tip = chainman.ActiveChain().Tip();\n \n@@ -1003,8 +1007,8 @@ static RPCHelpMan pruneblockchain()\n     if (!fPruneMode)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n \n-    LOCK(cs_main);\n     ChainstateManager& chainman = EnsureAnyChainman(request.context);\n+    LOCK(cs_main);\n \n     int heightParam = request.params[0].get_int();\n     if (heightParam < 0)\n@@ -1086,7 +1090,9 @@ static RPCHelpMan gettxoutsetinfo()\n     UniValue ret(UniValue::VOBJ);\n \n     CCoinsStats stats;\n-    CChainState& active_chainstate = EnsureAnyChainman(request.context).ActiveChainstate();\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    CChainState& active_chainstate = chainman.ActiveChainstate();\n     active_chainstate.ForceFlushStateToDisk();\n \n     const CoinStatsHashType hash_type{request.params[0].isNull() ? CoinStatsHashType::HASH_SERIALIZED : ParseHashType(request.params[0].get_str())};\n@@ -1098,7 +1104,6 @@ static RPCHelpMan gettxoutsetinfo()\n         coins_view = &active_chainstate.CoinsDB();\n         blockman = &active_chainstate.m_blockman;\n     }\n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if (GetUTXOStats(coins_view, *blockman, stats, hash_type, node.rpc_interruption_point)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n@@ -1158,6 +1163,8 @@ static RPCHelpMan gettxout()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n     LOCK(cs_main);\n \n     UniValue ret(UniValue::VOBJ);\n@@ -1170,11 +1177,11 @@ static RPCHelpMan gettxout()\n         fMempool = request.params[2].get_bool();\n \n     Coin coin;\n-    CChainState& active_chainstate = EnsureAnyChainman(request.context).ActiveChainstate();\n+    CChainState& active_chainstate = chainman.ActiveChainstate();\n     CCoinsViewCache* coins_view = &active_chainstate.CoinsTip();\n \n     if (fMempool) {\n-        const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+        const CTxMemPool& mempool = EnsureMemPool(node);\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(coins_view, mempool);\n         if (!view.GetCoin(out, coin) || mempool.isSpent(out)) {\n@@ -1224,9 +1231,10 @@ static RPCHelpMan verifychain()\n     const int check_level(request.params[0].isNull() ? DEFAULT_CHECKLEVEL : request.params[0].get_int());\n     const int check_depth{request.params[1].isNull() ? DEFAULT_CHECKBLOCKS : request.params[1].get_int()};\n \n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n \n-    CChainState& active_chainstate = EnsureAnyChainman(request.context).ActiveChainstate();\n+    CChainState& active_chainstate = chainman.ActiveChainstate();\n     return CVerifyDB().VerifyDB(Params(), active_chainstate, &active_chainstate.CoinsTip(), check_level, check_depth);\n },\n     };\n@@ -1353,8 +1361,8 @@ RPCHelpMan getblockchaininfo()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    LOCK(cs_main);\n     ChainstateManager& chainman = EnsureAnyChainman(request.context);\n+    LOCK(cs_main);\n \n     const CBlockIndex* tip = chainman.ActiveChain().Tip();\n     CHECK_NONFATAL(tip);\n@@ -1893,8 +1901,8 @@ static RPCHelpMan getblockstats()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    LOCK(cs_main);\n     ChainstateManager& chainman = EnsureAnyChainman(request.context);\n+    LOCK(cs_main);\n \n     CBlockIndex* pindex;\n     if (request.params[0].isNum()) {\n@@ -2295,16 +2303,16 @@ static RPCHelpMan scantxoutset()\n         int64_t count = 0;\n         std::unique_ptr<CCoinsViewCursor> pcursor;\n         CBlockIndex* tip;\n+        NodeContext& node = EnsureAnyNodeContext(request.context);\n         {\n+            ChainstateManager& chainman = EnsureChainman(node);\n             LOCK(cs_main);\n-            ChainstateManager& chainman = EnsureAnyChainman(request.context);\n             chainman.ActiveChainstate().ForceFlushStateToDisk();\n             pcursor = std::unique_ptr<CCoinsViewCursor>(chainman.ActiveChainstate().CoinsDB().Cursor());\n             CHECK_NONFATAL(pcursor);\n             tip = chainman.ActiveChain().Tip();\n             CHECK_NONFATAL(tip);\n         }\n-        NodeContext& node = EnsureAnyNodeContext(request.context);\n         bool res = FindScriptPubKey(g_scan_progress, g_should_abort_scan, count, pcursor.get(), needles, coins, node.rpc_interruption_point);\n         result.pushKV(\"success\", res);\n         result.pushKV(\"txouts\", count);\n@@ -2377,8 +2385,9 @@ static RPCHelpMan getblockfilter()\n     const CBlockIndex* block_index;\n     bool block_was_connected;\n     {\n+        ChainstateManager& chainman = EnsureAnyChainman(request.context);\n         LOCK(cs_main);\n-        block_index = EnsureAnyChainman(request.context).m_blockman.LookupBlockIndex(block_hash);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n         if (!block_index) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }"
      },
      {
        "sha": "37c87d7b01a78efa7a56e2bfa134107f9f018715",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3d1920209cded0dae52fb9070a3530d9a4e5fd/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3d1920209cded0dae52fb9070a3530d9a4e5fd/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=6a3d1920209cded0dae52fb9070a3530d9a4e5fd",
        "patch": "@@ -100,9 +100,9 @@ static RPCHelpMan getnetworkhashps()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n-    const CChain& active_chain = EnsureAnyChainman(request.context).ActiveChain();\n-    return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1, active_chain);\n+    return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1, chainman.ActiveChain());\n },\n     };\n }\n@@ -235,8 +235,9 @@ static RPCHelpMan generatetodescriptor()\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n     }\n \n-    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n-    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    const CTxMemPool& mempool = EnsureMemPool(node);\n+    ChainstateManager& chainman = EnsureChainman(node);\n \n     return generateBlocks(chainman, mempool, coinbase_script, num_blocks, max_tries);\n },\n@@ -280,8 +281,9 @@ static RPCHelpMan generatetoaddress()\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address\");\n     }\n \n-    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n-    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    const CTxMemPool& mempool = EnsureMemPool(node);\n+    ChainstateManager& chainman = EnsureChainman(node);\n \n     CScript coinbase_script = GetScriptForDestination(destination);\n \n@@ -329,7 +331,8 @@ static RPCHelpMan generateblock()\n         coinbase_script = GetScriptForDestination(destination);\n     }\n \n-    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    const CTxMemPool& mempool = EnsureMemPool(node);\n \n     std::vector<CTransactionRef> txs;\n     const auto raw_txs_or_txids = request.params[1].get_array();\n@@ -358,7 +361,7 @@ static RPCHelpMan generateblock()\n     CChainParams chainparams(Params());\n     CBlock block;\n \n-    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n     {\n         LOCK(cs_main);\n \n@@ -424,9 +427,11 @@ static RPCHelpMan getmininginfo()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    const CTxMemPool& mempool = EnsureMemPool(node);\n+    ChainstateManager& chainman = EnsureChainman(node);\n     LOCK(cs_main);\n-    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n-    const CChain& active_chain = EnsureAnyChainman(request.context).ActiveChain();\n+    const CChain& active_chain = chainman.ActiveChain();\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"blocks\",           (int)active_chain.Height());\n@@ -595,8 +600,9 @@ static RPCHelpMan getblocktemplate()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n     LOCK(cs_main);\n-    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n \n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n@@ -663,7 +669,6 @@ static RPCHelpMan getblocktemplate()\n     if (strMode != \"template\")\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n@@ -678,7 +683,7 @@ static RPCHelpMan getblocktemplate()\n     }\n \n     static unsigned int nTransactionsUpdatedLast;\n-    const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+    const CTxMemPool& mempool = EnsureMemPool(node);\n \n     if (!lpval.isNull())\n     {"
      },
      {
        "sha": "59477558190305d002b9ee0b710d45ba6ffeb3c4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3d1920209cded0dae52fb9070a3530d9a4e5fd/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3d1920209cded0dae52fb9070a3530d9a4e5fd/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=6a3d1920209cded0dae52fb9070a3530d9a4e5fd",
        "patch": "@@ -158,7 +158,7 @@ static RPCHelpMan getrawtransaction()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     const NodeContext& node = EnsureAnyNodeContext(request.context);\n-    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n+    ChainstateManager& chainman = EnsureChainman(node);\n \n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -350,9 +350,9 @@ static RPCHelpMan verifytxoutproof()\n     if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) != merkleBlock.header.hashMerkleRoot)\n         return res;\n \n+    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n \n-    ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(merkleBlock.header.GetHash());\n     if (!pindex || !chainman.ActiveChain().Contains(pindex) || pindex->nTx == 0) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n@@ -678,10 +678,11 @@ static RPCHelpMan combinerawtransaction()\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n-        LOCK(cs_main);\n-        LOCK(mempool.cs);\n-        CCoinsViewCache &viewChain = EnsureAnyChainman(request.context).ActiveChainstate().CoinsTip();\n+        NodeContext& node = EnsureAnyNodeContext(request.context);\n+        const CTxMemPool& mempool = EnsureMemPool(node);\n+        ChainstateManager& chainman = EnsureChainman(node);\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = chainman.ActiveChainstate().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n@@ -943,7 +944,9 @@ static RPCHelpMan testmempoolaccept()\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n+\n+    CTxMemPool& mempool = EnsureMemPool(node);\n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n     CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n@@ -952,7 +955,8 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(EnsureAnyChainman(request.context).ActiveChainstate(), mempool, std::move(tx),\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n                                                   false /* bypass_limits */, /* test_accept */ true));\n \n     // Only return the fee and vsize if the transaction would pass ATMP.\n@@ -1601,9 +1605,11 @@ static RPCHelpMan utxoupdatepsbt()\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        const CTxMemPool& mempool = EnsureAnyMemPool(request.context);\n+        NodeContext& node = EnsureAnyNodeContext(request.context);\n+        const CTxMemPool& mempool = EnsureMemPool(node);\n+        ChainstateManager& chainman = EnsureChainman(node);\n         LOCK2(cs_main, mempool.cs);\n-        CCoinsViewCache &viewChain = EnsureAnyChainman(request.context).ActiveChainstate().CoinsTip();\n+        CCoinsViewCache &viewChain = chainman.ActiveChainstate().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n "
      }
    ]
  },
  {
    "sha": "f99913969f92b8b9cef1b83f5ee8e6a9267b4af0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTk5MTM5NjlmOTJiOGI5Y2VmMWI4M2Y1ZWU4ZTZhOTI2N2I0YWYw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-12T22:48:59Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-14T15:13:09Z"
      },
      "message": "rpc: Remove unnecessary casting of block height",
      "tree": {
        "sha": "a7a155e2987f15575e832981f8f5f4dfd2219725",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7a155e2987f15575e832981f8f5f4dfd2219725"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f99913969f92b8b9cef1b83f5ee8e6a9267b4af0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f99913969f92b8b9cef1b83f5ee8e6a9267b4af0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f99913969f92b8b9cef1b83f5ee8e6a9267b4af0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f99913969f92b8b9cef1b83f5ee8e6a9267b4af0/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a3d1920209cded0dae52fb9070a3530d9a4e5fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a3d1920209cded0dae52fb9070a3530d9a4e5fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a3d1920209cded0dae52fb9070a3530d9a4e5fd"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "53e8c6d5af682120dbb14a5008e53e1965be9fab",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f99913969f92b8b9cef1b83f5ee8e6a9267b4af0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f99913969f92b8b9cef1b83f5ee8e6a9267b4af0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f99913969f92b8b9cef1b83f5ee8e6a9267b4af0",
        "patch": "@@ -1369,7 +1369,7 @@ RPCHelpMan getblockchaininfo()\n     const int height = tip->nHeight;\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"chain\",                 Params().NetworkIDString());\n-    obj.pushKV(\"blocks\",                (int)height);\n+    obj.pushKV(\"blocks\",                height);\n     obj.pushKV(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1);\n     obj.pushKV(\"bestblockhash\",         tip->GetBlockHash().GetHex());\n     obj.pushKV(\"difficulty\",            (double)GetDifficulty(tip));"
      },
      {
        "sha": "15e03194a3861009fe8bd23e85035adea8d141ba",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f99913969f92b8b9cef1b83f5ee8e6a9267b4af0/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f99913969f92b8b9cef1b83f5ee8e6a9267b4af0/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f99913969f92b8b9cef1b83f5ee8e6a9267b4af0",
        "patch": "@@ -434,7 +434,7 @@ static RPCHelpMan getmininginfo()\n     const CChain& active_chain = chainman.ActiveChain();\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.pushKV(\"blocks\",           (int)active_chain.Height());\n+    obj.pushKV(\"blocks\",           active_chain.Height());\n     if (BlockAssembler::m_last_block_weight) obj.pushKV(\"currentblockweight\", *BlockAssembler::m_last_block_weight);\n     if (BlockAssembler::m_last_block_num_txs) obj.pushKV(\"currentblocktx\", *BlockAssembler::m_last_block_num_txs);\n     obj.pushKV(\"difficulty\",       (double)GetDifficulty(active_chain.Tip()));"
      }
    ]
  },
  {
    "sha": "bc3bd369027273278a0541f3b991eb71de831aa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzNiZDM2OTAyNzI3MzI3OGEwNTQxZjNiOTkxZWI3MWRlODMxYWEy",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-12T22:51:12Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-14T15:13:09Z"
      },
      "message": "rpc: style: Improve BuriedForkDescPushBack signature",
      "tree": {
        "sha": "41fd8292c350f5fa899beeadb2829be381ec1545",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41fd8292c350f5fa899beeadb2829be381ec1545"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc3bd369027273278a0541f3b991eb71de831aa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc3bd369027273278a0541f3b991eb71de831aa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc3bd369027273278a0541f3b991eb71de831aa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc3bd369027273278a0541f3b991eb71de831aa2/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f99913969f92b8b9cef1b83f5ee8e6a9267b4af0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f99913969f92b8b9cef1b83f5ee8e6a9267b4af0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f99913969f92b8b9cef1b83f5ee8e6a9267b4af0"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4785a272c011121ffd8a475f011663fb863970e3",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc3bd369027273278a0541f3b991eb71de831aa2/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc3bd369027273278a0541f3b991eb71de831aa2/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bc3bd369027273278a0541f3b991eb71de831aa2",
        "patch": "@@ -1240,21 +1240,21 @@ static RPCHelpMan verifychain()\n     };\n }\n \n-static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height, int active_tip_nheight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int softfork_height, int tip_height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // For buried deployments.\n     // A buried deployment is one where the height of the activation has been hardcoded into\n     // the client implementation long after the consensus change has activated. See BIP 90.\n     // Buried deployments with activation height value of\n     // std::numeric_limits<int>::max() are disabled and thus hidden.\n-    if (height == std::numeric_limits<int>::max()) return;\n+    if (softfork_height == std::numeric_limits<int>::max()) return;\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"buried\");\n     // getblockchaininfo reports the softfork as active from when the chain height is\n     // one below the activation height\n-    rv.pushKV(\"active\", active_tip_nheight + 1 >= height);\n-    rv.pushKV(\"height\", height);\n+    rv.pushKV(\"active\", tip_height + 1 >= softfork_height);\n+    rv.pushKV(\"height\", softfork_height);\n     softforks.pushKV(name, rv);\n }\n "
      }
    ]
  },
  {
    "sha": "586190f0b4740457cb86cba632e3d64e6dfe9b0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODYxOTBmMGI0NzQwNDU3Y2I4NmNiYTYzMmUzZDY0ZTZkZmU5YjBj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-13T01:34:42Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-04-14T15:17:31Z"
      },
      "message": "rpc/rest: Take and reuse local Chain/ChainState obj\n\nIn all rest/rpc-related modules, if there are multiple calls to\nActiveChain{,State}(), and the calls fall under the same ::cs_main lock,\nwe can simply take a local reference and use/reuse it instead of calling\nActiveChain{,State}() again and again.",
      "tree": {
        "sha": "667f7c58a4c5c3d844fe22c279252010575d81da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/667f7c58a4c5c3d844fe22c279252010575d81da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/586190f0b4740457cb86cba632e3d64e6dfe9b0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586190f0b4740457cb86cba632e3d64e6dfe9b0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/586190f0b4740457cb86cba632e3d64e6dfe9b0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586190f0b4740457cb86cba632e3d64e6dfe9b0c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc3bd369027273278a0541f3b991eb71de831aa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc3bd369027273278a0541f3b991eb71de831aa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc3bd369027273278a0541f3b991eb71de831aa2"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 39,
      "deletions": 29
    },
    "files": [
      {
        "sha": "9b9f414e6cfa1f30c6b4dbcd04c40ab1c1ab97aa",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586190f0b4740457cb86cba632e3d64e6dfe9b0c/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586190f0b4740457cb86cba632e3d64e6dfe9b0c/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=586190f0b4740457cb86cba632e3d64e6dfe9b0c",
        "patch": "@@ -182,13 +182,14 @@ static bool rest_headers(const std::any& context,\n     {\n         ChainstateManager& chainman = EnsureAnyChainman(context);\n         LOCK(cs_main);\n-        tip = chainman.ActiveChain().Tip();\n+        CChain& active_chain = chainman.ActiveChain();\n+        tip = active_chain.Tip();\n         const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n-        while (pindex != nullptr && chainman.ActiveChain().Contains(pindex)) {\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n             headers.push_back(pindex);\n             if (headers.size() == (unsigned long)count)\n                 break;\n-            pindex = chainman.ActiveChain().Next(pindex);\n+            pindex = active_chain.Next(pindex);\n         }\n     }\n "
      },
      {
        "sha": "053b6913dcc7b925da1a802a03f176dc830d7a03",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 16,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586190f0b4740457cb86cba632e3d64e6dfe9b0c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586190f0b4740457cb86cba632e3d64e6dfe9b0c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=586190f0b4740457cb86cba632e3d64e6dfe9b0c",
        "patch": "@@ -1009,6 +1009,8 @@ static RPCHelpMan pruneblockchain()\n \n     ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n+    CChainState& active_chainstate = chainman.ActiveChainstate();\n+    CChain& active_chain = active_chainstate.m_chain;\n \n     int heightParam = request.params[0].get_int();\n     if (heightParam < 0)\n@@ -1018,15 +1020,15 @@ static RPCHelpMan pruneblockchain()\n     // too low to be a block time (corresponds to timestamp from Sep 2001).\n     if (heightParam > 1000000000) {\n         // Add a 2 hour buffer to include blocks which might have had old timestamps\n-        CBlockIndex* pindex = chainman.ActiveChain().FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW, 0);\n+        CBlockIndex* pindex = active_chain.FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW, 0);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Could not find block with at least the specified timestamp.\");\n         }\n         heightParam = pindex->nHeight;\n     }\n \n     unsigned int height = (unsigned int) heightParam;\n-    unsigned int chainHeight = (unsigned int) chainman.ActiveChain().Height();\n+    unsigned int chainHeight = (unsigned int) active_chain.Height();\n     if (chainHeight < Params().PruneAfterHeight())\n         throw JSONRPCError(RPC_MISC_ERROR, \"Blockchain is too short for pruning.\");\n     else if (height > chainHeight)\n@@ -1036,8 +1038,8 @@ static RPCHelpMan pruneblockchain()\n         height = chainHeight - MIN_BLOCKS_TO_KEEP;\n     }\n \n-    PruneBlockFilesManual(chainman.ActiveChainstate(), height);\n-    const CBlockIndex* block = chainman.ActiveChain().Tip();\n+    PruneBlockFilesManual(active_chainstate, height);\n+    const CBlockIndex* block = active_chain.Tip();\n     CHECK_NONFATAL(block);\n     while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n         block = block->pprev;\n@@ -1363,8 +1365,9 @@ RPCHelpMan getblockchaininfo()\n {\n     ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n+    CChainState& active_chainstate = chainman.ActiveChainstate();\n \n-    const CBlockIndex* tip = chainman.ActiveChain().Tip();\n+    const CBlockIndex* tip = active_chainstate.m_chain.Tip();\n     CHECK_NONFATAL(tip);\n     const int height = tip->nHeight;\n     UniValue obj(UniValue::VOBJ);\n@@ -1375,7 +1378,7 @@ RPCHelpMan getblockchaininfo()\n     obj.pushKV(\"difficulty\",            (double)GetDifficulty(tip));\n     obj.pushKV(\"mediantime\",            (int64_t)tip->GetMedianTimePast());\n     obj.pushKV(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), tip));\n-    obj.pushKV(\"initialblockdownload\",  chainman.ActiveChainstate().IsInitialBlockDownload());\n+    obj.pushKV(\"initialblockdownload\",  active_chainstate.IsInitialBlockDownload());\n     obj.pushKV(\"chainwork\",             tip->nChainWork.GetHex());\n     obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n     obj.pushKV(\"pruned\",                fPruneMode);\n@@ -1457,6 +1460,7 @@ static RPCHelpMan getchaintips()\n {\n     ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n+    CChain& active_chain = chainman.ActiveChain();\n \n     /*\n      * Idea: The set of chain tips is the active chain tip, plus orphan blocks which do not have another orphan building off of them.\n@@ -1470,7 +1474,7 @@ static RPCHelpMan getchaintips()\n     std::set<const CBlockIndex*> setPrevs;\n \n     for (const std::pair<const uint256, CBlockIndex*>& item : chainman.BlockIndex()) {\n-        if (!chainman.ActiveChain().Contains(item.second)) {\n+        if (!active_chain.Contains(item.second)) {\n             setOrphans.insert(item.second);\n             setPrevs.insert(item.second->pprev);\n         }\n@@ -1483,7 +1487,7 @@ static RPCHelpMan getchaintips()\n     }\n \n     // Always report the currently active tip.\n-    setTips.insert(chainman.ActiveChain().Tip());\n+    setTips.insert(active_chain.Tip());\n \n     /* Construct the output array.  */\n     UniValue res(UniValue::VARR);\n@@ -1492,11 +1496,11 @@ static RPCHelpMan getchaintips()\n         obj.pushKV(\"height\", block->nHeight);\n         obj.pushKV(\"hash\", block->phashBlock->GetHex());\n \n-        const int branchLen = block->nHeight - chainman.ActiveChain().FindFork(block)->nHeight;\n+        const int branchLen = block->nHeight - active_chain.FindFork(block)->nHeight;\n         obj.pushKV(\"branchlen\", branchLen);\n \n         std::string status;\n-        if (chainman.ActiveChain().Contains(block)) {\n+        if (active_chain.Contains(block)) {\n             // This block is part of the currently active chain.\n             status = \"active\";\n         } else if (block->nStatus & BLOCK_FAILED_MASK) {\n@@ -1903,26 +1907,27 @@ static RPCHelpMan getblockstats()\n {\n     ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n+    CChain& active_chain = chainman.ActiveChain();\n \n     CBlockIndex* pindex;\n     if (request.params[0].isNum()) {\n         const int height = request.params[0].get_int();\n-        const int current_tip = chainman.ActiveChain().Height();\n+        const int current_tip = active_chain.Height();\n         if (height < 0) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n         }\n         if (height > current_tip) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n         }\n \n-        pindex = chainman.ActiveChain()[height];\n+        pindex = active_chain[height];\n     } else {\n         const uint256 hash(ParseHashV(request.params[0], \"hash_or_height\"));\n         pindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n-        if (!chainman.ActiveChain().Contains(pindex)) {\n+        if (!active_chain.Contains(pindex)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n         }\n     }\n@@ -2307,10 +2312,11 @@ static RPCHelpMan scantxoutset()\n         {\n             ChainstateManager& chainman = EnsureChainman(node);\n             LOCK(cs_main);\n-            chainman.ActiveChainstate().ForceFlushStateToDisk();\n-            pcursor = std::unique_ptr<CCoinsViewCursor>(chainman.ActiveChainstate().CoinsDB().Cursor());\n+            CChainState& active_chainstate = chainman.ActiveChainstate();\n+            active_chainstate.ForceFlushStateToDisk();\n+            pcursor = std::unique_ptr<CCoinsViewCursor>(active_chainstate.CoinsDB().Cursor());\n             CHECK_NONFATAL(pcursor);\n-            tip = chainman.ActiveChain().Tip();\n+            tip = active_chainstate.m_chain.Tip();\n             CHECK_NONFATAL(tip);\n         }\n         bool res = FindScriptPubKey(g_scan_progress, g_should_abort_scan, count, pcursor.get(), needles, coins, node.rpc_interruption_point);"
      },
      {
        "sha": "0cef310c500cc3936636d72b2e5b3114905d779c",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586190f0b4740457cb86cba632e3d64e6dfe9b0c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586190f0b4740457cb86cba632e3d64e6dfe9b0c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=586190f0b4740457cb86cba632e3d64e6dfe9b0c",
        "patch": "@@ -608,6 +608,8 @@ static RPCHelpMan getblocktemplate()\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n     int64_t nMaxVersionPreVB = -1;\n+    CChainState& active_chainstate = chainman.ActiveChainstate();\n+    CChain& active_chain = active_chainstate.m_chain;\n     if (!request.params[0].isNull())\n     {\n         const UniValue& oparam = request.params[0].get_obj();\n@@ -642,12 +644,12 @@ static RPCHelpMan getblocktemplate()\n                 return \"duplicate-inconclusive\";\n             }\n \n-            CBlockIndex* const pindexPrev = chainman.ActiveChain().Tip();\n+            CBlockIndex* const pindexPrev = active_chain.Tip();\n             // TestBlockValidity only supports blocks built on the current Tip\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             BlockValidationState state;\n-            TestBlockValidity(state, Params(), chainman.ActiveChainstate(), block, pindexPrev, false, true);\n+            TestBlockValidity(state, Params(), active_chainstate, block, pindexPrev, false, true);\n             return BIP22ValidationResult(state);\n         }\n \n@@ -677,7 +679,7 @@ static RPCHelpMan getblocktemplate()\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, PACKAGE_NAME \" is not connected!\");\n         }\n \n-        if (chainman.ActiveChainstate().IsInitialBlockDownload()) {\n+        if (active_chainstate.IsInitialBlockDownload()) {\n             throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, PACKAGE_NAME \" is in initial sync and waiting for blocks...\");\n         }\n     }\n@@ -703,7 +705,7 @@ static RPCHelpMan getblocktemplate()\n         else\n         {\n             // NOTE: Spec does not specify behaviour for non-string longpollid, but this makes testing easier\n-            hashWatchedChain = chainman.ActiveChain().Tip()->GetBlockHash();\n+            hashWatchedChain = active_chain.Tip()->GetBlockHash();\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n@@ -748,20 +750,20 @@ static RPCHelpMan getblocktemplate()\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static std::unique_ptr<CBlockTemplate> pblocktemplate;\n-    if (pindexPrev != chainman.ActiveChain().Tip() ||\n+    if (pindexPrev != active_chain.Tip() ||\n         (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5))\n     {\n         // Clear pindexPrev so future calls make a new block, despite any failures from here on\n         pindexPrev = nullptr;\n \n         // Store the pindexBest used before CreateNewBlock, to avoid races\n         nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n-        CBlockIndex* pindexPrevNew = chainman.ActiveChain().Tip();\n+        CBlockIndex* pindexPrevNew = active_chain.Tip();\n         nStart = GetTime();\n \n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = BlockAssembler(chainman.ActiveChainstate(), mempool, Params()).CreateNewBlock(scriptDummy);\n+        pblocktemplate = BlockAssembler(active_chainstate, mempool, Params()).CreateNewBlock(scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n@@ -897,7 +899,7 @@ static RPCHelpMan getblocktemplate()\n     result.pushKV(\"transactions\", transactions);\n     result.pushKV(\"coinbaseaux\", aux);\n     result.pushKV(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue);\n-    result.pushKV(\"longpollid\", chainman.ActiveChain().Tip()->GetBlockHash().GetHex() + ToString(nTransactionsUpdatedLast));\n+    result.pushKV(\"longpollid\", active_chain.Tip()->GetBlockHash().GetHex() + ToString(nTransactionsUpdatedLast));\n     result.pushKV(\"target\", hashTarget.GetHex());\n     result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1);\n     result.pushKV(\"mutable\", aMutable);"
      },
      {
        "sha": "19e9c75e32605f50a3d1df59a5e2330945a598a0",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586190f0b4740457cb86cba632e3d64e6dfe9b0c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586190f0b4740457cb86cba632e3d64e6dfe9b0c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=586190f0b4740457cb86cba632e3d64e6dfe9b0c",
        "patch": "@@ -268,12 +268,13 @@ static RPCHelpMan gettxoutproof()\n         }\n     } else {\n         LOCK(cs_main);\n+        CChainState& active_chainstate = chainman.ActiveChainstate();\n \n         // Loop through txids and try to find which block they're in. Exit loop once a block is found.\n         for (const auto& tx : setTxids) {\n-            const Coin& coin = AccessByTxid(chainman.ActiveChainstate().CoinsTip(), tx);\n+            const Coin& coin = AccessByTxid(active_chainstate.CoinsTip(), tx);\n             if (!coin.IsSpent()) {\n-                pblockindex = chainman.ActiveChain()[coin.nHeight];\n+                pblockindex = active_chainstate.m_chain[coin.nHeight];\n                 break;\n             }\n         }"
      }
    ]
  }
]