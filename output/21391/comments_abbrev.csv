DrahtBot,2021-03-09 04:25:27,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21526 (validation: UpdateTip/CheckBlockIndex assumeutxo support by jamesob)\n* #21523 (validation: run VerifyDB on all ch",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-793367260,793367260,
dongcarl,2021-03-09 17:40:44,"Pushed a041676d3905002758a9c1827b410ea87d3329cf -> 6b89f537bad5fc3761ef3ada4cc5c9ac213c0ae6\n- Fixed assert linter complaint by using `CHECK_NONFATAL` instead of `assert`",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-794215591,794215591,
DrahtBot,2021-03-15 16:49:01,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @sipa @fjahr have been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-799573816,799573816,
MarcoFalke,2021-03-15 18:27:59,(Needs rebase),https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-799649514,799649514,
dongcarl,2021-03-17 21:24:38,"Pushed 6b89f537bad5fc3761ef3ada4cc5c9ac213c0ae6 -> b57dc39eae25294071959b1eec42bd7dd5563357\n- Rebased over master\n- Prepended fixes to last bundle\n\n-----\n\nNote to reviewers:\n- I've made some changes in 5de3e3609ab591d88281558182efdec39b065541 that requires some attention, mostly I had to make decisions about default values of `getNumBlocks`, `isInitialBlockDownload`, `getUnspentOutpu",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-801453063,801453063,
jnewbery,2021-03-17 22:47:27,Concept ACK. Thanks for addressing review comments from the last bundle!,https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-801491237,801491237,
dongcarl,2021-03-24 17:58:41,"Pushed b57dc39eae25294071959b1eec42bd7dd5563357 -> 877c8a01fc1137e0c8187b0b6990a99658077152\n- Addressed some review suggestions\n- Note: this is not yet rebased",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-806039178,806039178,
dongcarl,2021-03-24 20:30:51,"Pushed 877c8a01fc1137e0c8187b0b6990a99658077152 -> b7833034a554b571b3d3e3e55a0639421770dfb9\n- Rebased on top of #21525\n- Addressed all reviews",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-806166717,806166717,
dongcarl,2021-03-24 20:39:55,"Pushed b7833034a554b571b3d3e3e55a0639421770dfb9 -> 677b836c4847315bf24a9d222bbb2eb23a2b9a2c\n- Use `CHECK_NONFATAL` instead of assert",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-806171889,806171889,
dongcarl,2021-03-30 17:56:55,"Pushed 677b836c4847315bf24a9d222bbb2eb23a2b9a2c -> 188bb5e224d757d8d0603bb05a911f816776d295\n- Rebased on updated #21525, update summary reproduced below:\n\n> Pushed 3b75ec491a68eb6fb137c2f829e7dde93b3c3189 -> 693414d27181cf967f787a2ca72344e52c58c7f0\n> - Addressed https://github.com/bitcoin/bitcoin/pull/21391#pullrequestreview-624405217",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-810461117,810461117,
MarcoFalke,2021-04-01 09:51:15,Needs rebase?,https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-811794240,811794240,
dongcarl,2021-04-02 21:05:53,"Pushed 188bb5e224d757d8d0603bb05a911f816776d295 -> 7045f5f557f910827f13501e303ad617a8f0aaa6\n- Rebased over master after merge of #21525, fixed silent conflict in `src/rest.cpp`",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-812715600,812715600,
dongcarl,2021-04-02 21:09:32,"@MarcoFalke re: https://github.com/bitcoin/bitcoin/pull/21525/files/e62067e7bcad5a559899afff2e4a8e8b7e9f4301..7b8e976cd5ac78a22f1be2b2fed8562c693af5d9#diff-cd34d7ba23b9b4f3f61cd06e9289c4981a5a6bcb17b61b5d010f3dc01c77787e\n\nThis is more or less what I'm thinking, let me know if I'm missing something!\n```diff\ndiff --git a/src/miner.cpp b/src/miner.cpp\nindex 8a9406f810..3bc7fdd458 100644\n-",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-812716831,812716831,
dongcarl,2021-04-05 15:19:53,"> As you are modifying those lines, it would be nice if the chainman reference was created before taking cs_main, as that would simplify future work to remove cs_main (or reduce the scope of it).\n\nThese changes seem simple enough, so I'd be happy to make it. I do want to understand: how do you see these small changes helping with ""future work to remove cs_main (or reduce the scope of it)""?",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-813449803,813449803,
MarcoFalke,2021-04-05 15:38:34,"cs_main is a global and used to lock stuff that has nothing to do with validation (e.g. the p2p thread, disk access, orphan handling, ...). There is ongoing effort to clean those up: #19398, https://github.com/bitcoin/bitcoin/pull/21527/files#r601283910, https://github.com/bitcoin/bitcoin/pull/21598#issuecomment-813224175, ...\n\nIf cs_main is a member, the code might look like this:\n\n```cpp",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-813459515,813459515,
dongcarl,2021-04-06 17:26:37,Question: Is there an actual difference between `chainman.ActiveTip/Height()` and `chainman.ActiveChain().Tip/height()` or is it just shorter?,https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-814297548,814297548,
jnewbery,2021-04-06 17:28:49,"> Is there an actual difference between chainman.ActiveTip/Height() and chainman.ActiveChain().Tip/height() or is it just shorter?\n\nJust shorter. Feel free to ignore those comments if you disagree that it's clearer.",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-814299046,814299046,
dongcarl,2021-04-13 01:49:17,"Pushed 7045f5f557f910827f13501e303ad617a8f0aaa6 -> 1c483e8e73c9f02674895b73b017dc0d13a030b0\n- Addressed MarcoFalke's `cs_main` vs `ChainstateManager` code ordering comments\n- Addressed jnewbery and jamesob's height int casting comments\n- Addressed jnewbery's BuriedForkDescPushBack signature comments\n\nw/re getting rid of multiple calls to `ActiveChain{,State}()`, I really didn't consider ",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-818371626,818371626,
dongcarl,2021-04-13 02:42:20,"Pushed 1c483e8e73c9f02674895b73b017dc0d13a030b0 -> 6d923137f6eb31ace6f2d38480708af039a21437\n- Once more, with feeling...\n- I renamed params in last commit but forgot to rename references... oops",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-818389704,818389704,
dongcarl,2021-04-14 15:20:26,"Pushed 6d923137f6eb31ace6f2d38480708af039a21437 -> 586190f0b4740457cb86cba632e3d64e6dfe9b0c\n- Addressed https://github.com/bitcoin/bitcoin/pull/21391#discussion_r612548023 to keep irrational numbers at bay\n- Addressed jnewbery's reviews relating to taking a reference once and reusing it",https://github.com/bitcoin/bitcoin/pull/21391#issuecomment-819602361,819602361,
MarcoFalke,2021-03-18 07:05:43,nit: Can this be const?,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r596598280,596598280,src/miner.h
MarcoFalke,2021-03-18 07:13:06,"does it make sense to run a node without a chainman? It might make more sense to use Assert, like it is already done in `waitForNotificationsIfTipChanged`.\n\nMaybe the assert can even be wrapped into a private member:\n\n```\nprivate:\n ChainstateManager& chainman() { return *Assert(m_node.chainman); }",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r596601383,596601383,src/node/interfaces.cpp
MarcoFalke,2021-03-18 07:13:56,"would be nice to assert before cs_main, because cs_main ""belongs"" to the chainman",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r596601776,596601776,src/node/transaction.cpp
MarcoFalke,2021-03-18 07:14:11,"would be nice to assert before cs_main, because cs_main ""belongs"" to the chainman",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r596601876,596601876,src/node/coin.cpp
jnewbery,2021-03-18 16:12:56,Just remove this section marker.,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597026552,597026552,src/net_processing.cpp
jnewbery,2021-03-18 16:13:24,Perhaps make this a doxygen comment (ie start with `/**`),https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597027186,597027186,src/net_processing.cpp
jnewbery,2021-03-18 16:13:52,Remove this extra blank line? :grimacing: ,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597027762,597027762,src/net_processing.cpp
jnewbery,2021-03-18 16:15:09,"I think it'd be just as clear (and a smaller diff) to invert the conditional here:\n\n```suggestion\n        if (!m_context->chainman) return 0;\n        // Logic that uses chainman ...\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597029360,597029360,src/node/interfaces.cpp
jnewbery,2021-03-18 16:15:35,Same here. You don't need this local variable if you exit early when `chainman` doesn't exist.,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597029921,597029921,src/node/interfaces.cpp
jnewbery,2021-03-18 16:19:32,Any reason not to just do this? The function is obviously const since it just does a lookup and returns a pointer.,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597035062,597035062,src/validation.h
jnewbery,2021-03-18 16:22:34,Maybe join these lines?,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597038927,597038927,src/rpc/blockchain.cpp
jnewbery,2021-03-18 16:23:43,"```suggestion\n    const CChain& active_chain = EnsureChainman(request.context).ActiveChain();\n```\n\n(same goes for other `CChain&`s)",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597040349,597040349,src/rpc/blockchain.cpp
jnewbery,2021-03-18 16:54:40,"It would be nice to avoid so many repeated locks and releases of cs_main. In this function we take it at least 5 times:\n\n- in `EnsureChainman()`\n- in `ActiveChainstate()`\n- in `ForceFlushStateToDisk()`\n- in `WITH_LOCK(::cs_main, return &active_chainstate.CoinsDB());`\n- in `WITH_LOCK(::cs_main, return std::ref(active_chainstate.m_blockman));`\n\nthis gets rid of one unnecessary lock/r",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597067215,597067215,src/rpc/blockchain.cpp
jnewbery,2021-03-18 16:57:27,"Can you declare this further up and use it instead of `(int)chainman.ActiveChain().Height())` for `""blocks""`?",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597069682,597069682,src/rpc/blockchain.cpp
jnewbery,2021-03-18 17:31:58,"I think just `height` here probably suffices:\n\n```suggestion\n    const int height = tip->nHeight;\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597096912,597096912,src/rpc/blockchain.cpp
jnewbery,2021-03-18 17:40:08,"```suggestion\n    CBlockIndex* pb = active_chain.Tip();\n```\n\n(could also make this const if you update line 65 to make `pb0` const too)",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597103258,597103258,src/rpc/mining.cpp
ryanofsky,2021-03-18 19:07:16,"In commit ""node/interfaces: Meaningful locking and avoid potential UB"" (5de3e3609ab591d88281558182efdec39b065541)\n\nIt seems like this method and the two IBD methods are the only places that are changing locks or adding ""meaningful locking"". Since locking changes can have unexpected pitfalls I think it'd be good to split the locking parts of this commit into a separate commit. Also would be goo",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597163828,597163828,src/node/interfaces.cpp
ryanofsky,2021-03-18 19:13:42,"In commit ""node/interfaces: Meaningful locking and avoid potential UB"" (5de3e3609ab591d88281558182efdec39b065541)\n\n> Same here. You don't need this local variable if you exit early when `chainman` doesn't exist.\n\nI think John's suggestions are good, but Marco's suggestion to use an accessor that asserts https://github.com/bitcoin/bitcoin/pull/21391#discussion_r596601383 would be even bette",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597167838,597167838,src/node/interfaces.cpp
jnewbery,2021-03-19 10:02:04,"Seems reasonable to me!\n\nIn general, I like the concept of making all components optional, since it enforces decoupling. However, it's hard to imagine what a bitcoind without chainman would look like.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r597546794,597546794,src/node/interfaces.cpp
dongcarl,2021-03-24 17:10:50,"Unfortunately not... We pass `m_chainstate` to `TestBlockValidity` in `BlockAssembler::CreateNewBlock`, and `TestBlockValidity` requires its `CChainState` param to be non-const",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r600690395,600690395,src/miner.h
ryanofsky,2021-03-30 15:27:29,"In commits ""node/ifaces: NodeImpl: Use an accessor for ChainMan"" (3460a07d88d841c009e7b7efc0be2ae89bb4a63e)\nand ""node/ifaces: ChainImpl: Use an accessor for ChainMan"" (3b75ec491a68eb6fb137c2f829e7dde93b3c3189)\n\nNot important unless there will be a lot more of these, but I think it would be better not to add nested scopes for temporary asserts that we are going to want to remove and collapse ",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r604203643,604203643,src/node/interfaces.cpp
ryanofsky,2021-03-30 15:38:03,"In commit ""net_processing: Move comments to declarations"" (067d0ba36cb701adff530f76ef9b1f574c966c6f)\n\nIs no more chain parameters.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r604212432,604212432,src/net_processing.cpp
MarcoFalke,2021-04-03 06:20:41,"nit: Would be nice to do this before locking cs_main, because I think cs_main should be made a (private) member of chainman in the future, if possible.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r606625967,606625967,src/rest.cpp
MarcoFalke,2021-04-03 06:20:53,same,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r606625982,606625982,src/rest.cpp
MarcoFalke,2021-04-03 06:23:20,same (etc ...),https://github.com/bitcoin/bitcoin/pull/21391#discussion_r606626126,606626126,src/rpc/blockchain.cpp
jnewbery,2021-04-05 16:22:53,Doesn't need `cs_main` to be locked first. You can also just call `ActiveHeight()`.,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607181930,607181930,src/rpc/blockchain.cpp
jnewbery,2021-04-05 16:23:34,"Doesn't need `cs_main` to be locked first. You can also just call `ActiveTip()`.\n\n",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607182273,607182273,src/rpc/blockchain.cpp
jnewbery,2021-04-05 16:24:11,Doesn't need `cs_main` to be locked first. You can also just call `ActiveTip()`.,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607182630,607182630,src/rpc/blockchain.cpp
jnewbery,2021-04-05 16:38:04,`ActiveTip()`,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607190153,607190153,src/rpc/blockchain.cpp
jnewbery,2021-04-05 16:38:15,`ActiveHeight()`,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607190289,607190289,src/rpc/blockchain.cpp
jnewbery,2021-04-05 16:38:20,`ActiveTip()`,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607190333,607190333,src/rpc/blockchain.cpp
jnewbery,2021-04-05 17:43:19,"```suggestion\n    const CBlockIndex* tip = chainman.ActiveTip();\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607226203,607226203,src/rpc/blockchain.cpp
jnewbery,2021-04-05 17:47:21,"This is casting an int to an int.\n\n```suggestion\n    obj.pushKV(""blocks"",                height);\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607228338,607228338,src/rpc/blockchain.cpp
jnewbery,2021-04-05 17:49:07,"Maybe just:\n\n```suggestion\nstatic void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int softfork_height, int tip_height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n```\n\nnheight is hungarian, which we don't use any more.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607229343,607229343,src/rpc/blockchain.cpp
jnewbery,2021-04-05 17:50:50,"```suggestion\n        pindex = chainman.ActiveTip();\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607230272,607230272,src/rpc/blockchain.cpp
jnewbery,2021-04-05 17:51:18,"```suggestion\n        const int current_tip = chainman.ActiveHeight();\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607230509,607230509,src/rpc/blockchain.cpp
jnewbery,2021-04-05 17:52:21,"```suggestion\n            tip = chainman.ActiveTip();\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607231032,607231032,src/rpc/blockchain.cpp
jnewbery,2021-04-05 17:53:59,"```suggestion\n        IncrementExtraNonce(&block, chainman.ActiveTip(), extra_nonce);\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607231883,607231883,src/rpc/mining.cpp
jnewbery,2021-04-05 17:54:09,"```suggestion\n        nHeight = chainman.ActiveHeight();\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607231972,607231972,src/rpc/mining.cpp
jnewbery,2021-04-05 17:55:14,"```suggestion\n            CBlockIndex* const pindexPrev = chainman.ActiveTip();\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607232566,607232566,src/rpc/mining.cpp
jnewbery,2021-04-05 17:55:34,"```suggestion\n            hashWatchedChain = chainman.ActiveTip()->GetBlockHash();\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607232747,607232747,src/rpc/mining.cpp
jnewbery,2021-04-05 17:56:48,Maybe just get ActiveChainstate once and then get the m_tip from there?,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607233486,607233486,src/rpc/mining.cpp
jnewbery,2021-04-05 17:57:03,"```suggestion\n    result.pushKV(""longpollid"", chainman.ActiveTip()->GetBlockHash().GetHex() + ToString(nTransactionsUpdatedLast));\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607233619,607233619,src/rpc/mining.cpp
jnewbery,2021-04-05 18:04:10,Maybe just grab `chainman.ActiveChain()` once above and then use it for each iteration.,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607237567,607237567,src/rest.cpp
jnewbery,2021-04-05 18:05:19,"```suggestion\n        tip = chainman.ActiveTip();\n```",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607238159,607238159,src/rest.cpp
jnewbery,2021-04-05 18:07:08,Perhaps just call `chainman.ActiveChainstate()` once in this function.,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607239166,607239166,src/rest.cpp
jamesob,2021-04-05 18:34:20,"Agree about `ActiveHeight()` and similar comments below, but may be fine to leave the `LOCK(cs_main)` line as-is since I suspect we'll move to lock annotations for `ActiveChainstate()` in the near future (vs. the nested acquisition in the function definition).",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607253941,607253941,src/rpc/blockchain.cpp
jamesob,2021-04-05 19:22:52,`ActiveTip()`,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607279832,607279832,src/rpc/blockchain.cpp
jamesob,2021-04-05 19:40:17,"https://github.com/bitcoin/bitcoin/pull/21391/commits/626aa73ae48f6b5a50e88fc3d03e8c7842f75b1b\n\nCan remove unnecessary cast.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607288645,607288645,src/rpc/mining.cpp
jamesob,2021-04-05 19:50:00,`ActiveTip()`,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607293378,607293378,src/rest.cpp
jnewbery,2021-04-06 07:36:32,"I think that'd be a move in the wrong direction. Ideally we'd remove the need to lock `cs_main` completely from the `Active*()` methods. I'm concerned that adding so many additional cs_main locks may cause performance regressions - for example, the optimization in #8007 is no longer possible since cs_main will almost always be locked before calling `IsInitialBlockDownload()`\n\n@jamesob: Did you",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607603389,607603389,src/rpc/blockchain.cpp
jamesob,2021-04-06 13:37:21,"I think you may be forgetting that long before `ChainstateManager` was introduced, [`chainActive` was protected by `cs_main`](https://github.com/bitcoin/bitcoin/blob/0.16/src/validation.h#L445). So unless we dramatically rework the chainstate locking scheme, the `Active{Height,Tip,..}()` methods will always require holding cs_main one way or another. I think ultimately annotations are a cleaner wa",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r607856088,607856088,src/rpc/blockchain.cpp
ryanofsky,2021-04-13 15:22:11,"In commit ""rpc: Add alt Ensure* functions acepting NodeContext"" (306b1cd3eeb2502904ed4698646d2c86d028aad2)\n\nCaramba. I think this commit is ok, but it is a footgun to have overloaded functions where one of the functions takes an untyped std::any argument, because someone could easily try to call the typed overload, and fail because the type is a little off (const instead of nonconst, pointer i",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r612548023,612548023,src/rpc/blockchain.h
jnewbery,2021-04-15 10:13:53,"I think it'd be better to move this `EnsureChainman()` to the top of the function. If chainman doesn't exist, then it's better to immediately exit from the function.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r613942578,613942578,src/rpc/blockchain.cpp
jnewbery,2021-04-15 10:15:07,"While you're touching this, perhaps change it to use `std::make_unique`. That's the standard way to set unique pointers now that we're on c++17.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r613943376,613943376,src/rpc/blockchain.cpp
jnewbery,2021-04-15 10:17:18,"Again, chainman is a requirement for this function. I think it makes sense to place the assumption at the top of the function.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r613944794,613944794,src/rpc/blockchain.cpp
jnewbery,2021-04-15 10:28:02,"Even though it's not annotated as such, I think that holding a reference to `m_chain` and calling methods on it requires holding `cs_main`. Perhaps it would be a good idea to either:\n\n1. annotate this function and add an assertion that cs_main is held; or\n2. pass in a `&Chainman`, then inside the function lock cs_main, get the `CChain&`, and call the methods on that `CChain&`.\n\nI think (",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r613951719,613951719,src/rpc/mining.cpp
jnewbery,2021-04-15 10:31:32,"This line is long and difficult to read. Consider something like this:\n\n```diff\ndiff --git a/src/rpc/mining.cpp b/src/rpc/mining.cpp\nindex 0cef310c50..b60783761d 100644\n--- a/src/rpc/mining.cpp\n+++ b/src/rpc/mining.cpp\n@@ -102,7 +102,9 @@ static RPCHelpMan getnetworkhashps()\n {\n     ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n-    ret",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r613953875,613953875,src/rpc/mining.cpp
jnewbery,2021-04-15 10:54:48,"For a follow-up: `IncrementExtraNonce()` doesn't require cs_main. In fact, we could just get a height using `chainman.ActiveHeight()` and pass that to `IncrementExtraNonce()`.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r613967463,613967463,src/rpc/mining.cpp
jnewbery,2021-04-15 11:38:29,"I haven't commented on all of these examples, but I really do think readability is helped by placing the `Ensure*()` assumptions at the top of the rpc methods.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r613992845,613992845,src/rpc/rawtransaction.cpp
MarcoFalke,2021-04-16 09:26:34,Shouldn't Cursor return a unique_ptr?,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r614696860,614696860,src/rpc/blockchain.cpp
jnewbery,2021-04-16 09:42:09,"Yes, you're right. `Cursor()` is passing ownership to the caller.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r614706952,614706952,src/rpc/blockchain.cpp
jnewbery,2021-04-16 09:49:52,I'm going to mark this comment as resolved since this PR shouldn't make any changes here. I think `Cursor()`'s return type should be changed in a separate PR.,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r614711882,614711882,src/rpc/blockchain.cpp
MarcoFalke,2021-04-17 10:22:53,"cced0f46c9:\n\nI don't understand this commit. Is the goal to remove this assert? If yes, how are new callers protected from accidentally passing the wrong pointer? If no, you'll need to pass blockman again, making this commit useless.\n\nAlso, this seems to put more code burden on the caller, duplicating the LookupBlockIndex at each call site.\n\nIt might help to specify a goal of the commi",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r615237925,615237925,src/miner.cpp
MarcoFalke,2021-04-17 11:24:59,"This may crash the node if the chainman is not available.\n\n```\nterminate called after throwing an instance of 'UniValue'\n```\n\n",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r615243437,615243437,src/rest.cpp
MarcoFalke,2021-04-17 15:21:16,6fb65b49f4: the scripted diff will modify files that are not tracked by git. Could use `...  -- $(git grep -l Ensure)`,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r615267283,615267283,src/rest.cpp
MarcoFalke,2021-04-17 15:40:03,(unresolved comment to make it easier to see all that needs to be addressed in follow-ups),https://github.com/bitcoin/bitcoin/pull/21391#discussion_r615269206,615269206,src/rpc/blockchain.cpp
jnewbery,2021-05-09 15:18:36,This doesn't require `cs_main`.,https://github.com/bitcoin/bitcoin/pull/21391#discussion_r628904581,628904581,src/rpc/blockchain.cpp
jnewbery,2021-05-09 15:20:22,"It's slightly confusing to take the references from `CoinsDB()` and `m_blockman` and take their addresses to make pointers, and then just dereference those pointers. Better just to use references as the local variables.",https://github.com/bitcoin/bitcoin/pull/21391#discussion_r628904755,628904755,src/rpc/blockchain.cpp
