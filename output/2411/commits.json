[
  {
    "sha": "c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmVmZDk4MWFhMTRlOTRjY2U0YTBhODg4YjZlZTFmNGU0MzQ3OTI0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-03-24T23:38:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-03-24T23:38:19Z"
      },
      "message": "(finally) Remove IRC Seed support now that lfnet is down.",
      "tree": {
        "sha": "7baf6933d4eaf15720b7a5ea67c2d7ad17842c61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7baf6933d4eaf15720b7a5ea67c2d7ad17842c61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dfd71bb4509d12c26e630bc671a542ad5bab4945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfd71bb4509d12c26e630bc671a542ad5bab4945",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfd71bb4509d12c26e630bc671a542ad5bab4945"
      }
    ],
    "stats": {
      "total": 435,
      "additions": 0,
      "deletions": 435
    },
    "files": [
      {
        "sha": "11db551cb64a5d367f66572bb9f12fb4a3eb176c",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "patch": "@@ -159,7 +159,6 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/walletdb.h \\\n     src/script.h \\\n     src/init.h \\\n-    src/irc.h \\\n     src/bloom.h \\\n     src/mruset.h \\\n     src/checkqueue.h \\\n@@ -230,7 +229,6 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/main.cpp \\\n     src/init.cpp \\\n     src/net.cpp \\\n-    src/irc.cpp \\\n     src/bloom.cpp \\\n     src/checkpoints.cpp \\\n     src/addrman.cpp \\"
      },
      {
        "sha": "427e388cfd92aed16f20209bb29a7576054df672",
        "filename": "doc/coding.txt",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/doc/coding.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/doc/coding.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/coding.txt?ref=c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "patch": "@@ -65,9 +65,6 @@ StartNode : Starts other threads.\n ThreadGetMyExternalIP : Determines outside-the-firewall IP address,\r\n sends addr message to connected peers when it determines it. \r\n \r\n-ThreadIRCSeed : Joins IRC bootstrapping channel, watching for new\r\n-peers and advertising this node's IP address. \r\n-\r\n ThreadSocketHandler : Sends/Receives data from peers on port 8333.\r\n \r\n ThreadMessageHandler : Higher-level message handling (sending and\r"
      },
      {
        "sha": "fc87457b4bbb5595c81e209ab842349f4bf0681b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "patch": "@@ -262,7 +262,6 @@ std::string HelpMessage()\n         \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\" +\n         \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (IPv4, IPv6 or Tor)\") + \"\\n\" +\n         \"  -discover              \" + _(\"Discover own IP address (default: 1 when listening and no -externalip)\") + \"\\n\" +\n-        \"  -irc                   \" + _(\"Find peers using internet relay chat (default: 0)\") + \"\\n\" +\n         \"  -checkpoints           \" + _(\"Only accept block chain matching built-in checkpoints (default: 1)\") + \"\\n\" +\n         \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\" +\n         \"  -bind=<addr>           \" + _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") + \"\\n\" +\n@@ -452,9 +451,6 @@ bool AppInit2()\n     // ********************************************************* Step 2: parameter interactions\n \n     fTestNet = GetBoolArg(\"-testnet\");\n-    if (fTestNet) {\n-        SoftSetBoolArg(\"-irc\", true);\n-    }\n \n     if (mapArgs.count(\"-bind\")) {\n         // when specifying an explicit binding address, you want to listen on it"
      },
      {
        "sha": "e8471a6630e7e07eee2735d01bc7b332b983d591",
        "filename": "src/irc.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 403,
        "changes": 403,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfd71bb4509d12c26e630bc671a542ad5bab4945/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfd71bb4509d12c26e630bc671a542ad5bab4945/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=dfd71bb4509d12c26e630bc671a542ad5bab4945",
        "patch": "@@ -1,403 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2012 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"irc.h\"\n-#include \"net.h\"\n-#include \"base58.h\"\n-\n-#include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n-\n-using namespace std;\n-using namespace boost;\n-\n-int nGotIRCAddresses = 0;\n-\n-void ThreadIRCSeed2(void* parg);\n-\n-\n-\n-\n-#pragma pack(push, 1)\n-struct ircaddr\n-{\n-    struct in_addr ip;\n-    short port;\n-};\n-#pragma pack(pop)\n-\n-string EncodeAddress(const CService& addr)\n-{\n-    struct ircaddr tmp;\n-    if (addr.GetInAddr(&tmp.ip))\n-    {\n-        tmp.port = htons(addr.GetPort());\n-\n-        vector<unsigned char> vch(UBEGIN(tmp), UEND(tmp));\n-        return string(\"u\") + EncodeBase58Check(vch);\n-    }\n-    return \"\";\n-}\n-\n-bool DecodeAddress(string str, CService& addr)\n-{\n-    vector<unsigned char> vch;\n-    if (!DecodeBase58Check(str.substr(1), vch))\n-        return false;\n-\n-    struct ircaddr tmp;\n-    if (vch.size() != sizeof(tmp))\n-        return false;\n-    memcpy(&tmp, &vch[0], sizeof(tmp));\n-\n-    addr = CService(tmp.ip, ntohs(tmp.port));\n-    return true;\n-}\n-\n-\n-\n-\n-\n-\n-static bool Send(SOCKET hSocket, const char* pszSend)\n-{\n-    if (strstr(pszSend, \"PONG\") != pszSend)\n-        printf(\"IRC SENDING: %s\\n\", pszSend);\n-    const char* psz = pszSend;\n-    const char* pszEnd = psz + strlen(psz);\n-    while (psz < pszEnd)\n-    {\n-        int ret = send(hSocket, psz, pszEnd - psz, MSG_NOSIGNAL);\n-        if (ret < 0)\n-            return false;\n-        psz += ret;\n-    }\n-    return true;\n-}\n-\n-bool RecvLineIRC(SOCKET hSocket, string& strLine)\n-{\n-    loop\n-    {\n-        bool fRet = RecvLine(hSocket, strLine);\n-        if (fRet)\n-        {\n-            if (fShutdown)\n-                return false;\n-            vector<string> vWords;\n-            ParseString(strLine, ' ', vWords);\n-            if (vWords.size() >= 1 && vWords[0] == \"PING\")\n-            {\n-                strLine[1] = 'O';\n-                strLine += '\\r';\n-                Send(hSocket, strLine.c_str());\n-                continue;\n-            }\n-        }\n-        return fRet;\n-    }\n-}\n-\n-int RecvUntil(SOCKET hSocket, const char* psz1, const char* psz2=NULL, const char* psz3=NULL, const char* psz4=NULL)\n-{\n-    loop\n-    {\n-        string strLine;\n-        strLine.reserve(10000);\n-        if (!RecvLineIRC(hSocket, strLine))\n-            return 0;\n-        printf(\"IRC %s\\n\", strLine.c_str());\n-        if (psz1 && strLine.find(psz1) != string::npos)\n-            return 1;\n-        if (psz2 && strLine.find(psz2) != string::npos)\n-            return 2;\n-        if (psz3 && strLine.find(psz3) != string::npos)\n-            return 3;\n-        if (psz4 && strLine.find(psz4) != string::npos)\n-            return 4;\n-    }\n-}\n-\n-bool Wait(int nSeconds)\n-{\n-    if (fShutdown)\n-        return false;\n-    printf(\"IRC waiting %d seconds to reconnect\\n\", nSeconds);\n-    for (int i = 0; i < nSeconds; i++)\n-    {\n-        if (fShutdown)\n-            return false;\n-        Sleep(1000);\n-    }\n-    return true;\n-}\n-\n-bool RecvCodeLine(SOCKET hSocket, const char* psz1, string& strRet)\n-{\n-    strRet.clear();\n-    loop\n-    {\n-        string strLine;\n-        if (!RecvLineIRC(hSocket, strLine))\n-            return false;\n-\n-        vector<string> vWords;\n-        ParseString(strLine, ' ', vWords);\n-        if (vWords.size() < 2)\n-            continue;\n-\n-        if (vWords[1] == psz1)\n-        {\n-            printf(\"IRC %s\\n\", strLine.c_str());\n-            strRet = strLine;\n-            return true;\n-        }\n-    }\n-}\n-\n-bool GetIPFromIRC(SOCKET hSocket, string strMyName, CNetAddr& ipRet)\n-{\n-    Send(hSocket, strprintf(\"USERHOST %s\\r\", strMyName.c_str()).c_str());\n-\n-    string strLine;\n-    if (!RecvCodeLine(hSocket, \"302\", strLine))\n-        return false;\n-\n-    vector<string> vWords;\n-    ParseString(strLine, ' ', vWords);\n-    if (vWords.size() < 4)\n-        return false;\n-\n-    string str = vWords[3];\n-    if (str.rfind(\"@\") == string::npos)\n-        return false;\n-    string strHost = str.substr(str.rfind(\"@\")+1);\n-\n-    // Hybrid IRC used by lfnet always returns IP when you userhost yourself,\n-    // but in case another IRC is ever used this should work.\n-    printf(\"GetIPFromIRC() got userhost %s\\n\", strHost.c_str());\n-    CNetAddr addr(strHost, true);\n-    if (!addr.IsValid())\n-        return false;\n-    ipRet = addr;\n-\n-    return true;\n-}\n-\n-\n-\n-void ThreadIRCSeed(void* parg)\n-{\n-    // Make this thread recognisable as the IRC seeding thread\n-    RenameThread(\"bitcoin-ircseed\");\n-\n-    printf(\"ThreadIRCSeed started\\n\");\n-\n-    try\n-    {\n-        ThreadIRCSeed2(parg);\n-    }\n-    catch (std::exception& e) {\n-        PrintExceptionContinue(&e, \"ThreadIRCSeed()\");\n-    } catch (...) {\n-        PrintExceptionContinue(NULL, \"ThreadIRCSeed()\");\n-    }\n-    printf(\"ThreadIRCSeed exited\\n\");\n-}\n-\n-void ThreadIRCSeed2(void* parg)\n-{\n-    // Don't connect to IRC if we won't use IPv4 connections.\n-    if (IsLimited(NET_IPV4))\n-        return;\n-\n-    // ... or if we won't make outbound connections and won't accept inbound ones.\n-    if (mapArgs.count(\"-connect\") && fNoListen)\n-        return;\n-\n-    // ... or if IRC is not enabled.\n-    if (!GetBoolArg(\"-irc\", false))\n-        return;\n-\n-    printf(\"ThreadIRCSeed trying to connect...\\n\");\n-\n-    int nErrorWait = 10;\n-    int nRetryWait = 10;\n-    int nNameRetry = 0;\n-\n-    while (!fShutdown)\n-    {\n-        CService addrConnect(\"92.243.23.21\", 6667); // irc.lfnet.org\n-\n-        CService addrIRC(\"irc.lfnet.org\", 6667, true);\n-        if (addrIRC.IsValid())\n-            addrConnect = addrIRC;\n-\n-        SOCKET hSocket;\n-        if (!ConnectSocket(addrConnect, hSocket))\n-        {\n-            printf(\"IRC connect failed\\n\");\n-            nErrorWait = nErrorWait * 11 / 10;\n-            if (Wait(nErrorWait += 60))\n-                continue;\n-            else\n-                return;\n-        }\n-\n-        if (!RecvUntil(hSocket, \"Found your hostname\", \"using your IP address instead\", \"Couldn't look up your hostname\", \"ignoring hostname\"))\n-        {\n-            closesocket(hSocket);\n-            hSocket = INVALID_SOCKET;\n-            nErrorWait = nErrorWait * 11 / 10;\n-            if (Wait(nErrorWait += 60))\n-                continue;\n-            else\n-                return;\n-        }\n-\n-        CNetAddr addrIPv4(\"1.2.3.4\"); // arbitrary IPv4 address to make GetLocal prefer IPv4 addresses\n-        CService addrLocal;\n-        string strMyName;\n-        // Don't use our IP as our nick if we're not listening\n-        // or if it keeps failing because the nick is already in use.\n-        if (!fNoListen && GetLocal(addrLocal, &addrIPv4) && nNameRetry<3)\n-            strMyName = EncodeAddress(GetLocalAddress(&addrConnect));\n-        if (strMyName == \"\")\n-            strMyName = strprintf(\"x%\"PRI64u\"\", GetRand(1000000000));\n-\n-        Send(hSocket, strprintf(\"NICK %s\\r\", strMyName.c_str()).c_str());\n-        Send(hSocket, strprintf(\"USER %s 8 * : %s\\r\", strMyName.c_str(), strMyName.c_str()).c_str());\n-\n-        int nRet = RecvUntil(hSocket, \" 004 \", \" 433 \");\n-        if (nRet != 1)\n-        {\n-            closesocket(hSocket);\n-            hSocket = INVALID_SOCKET;\n-            if (nRet == 2)\n-            {\n-                printf(\"IRC name already in use\\n\");\n-                nNameRetry++;\n-                Wait(10);\n-                continue;\n-            }\n-            nErrorWait = nErrorWait * 11 / 10;\n-            if (Wait(nErrorWait += 60))\n-                continue;\n-            else\n-                return;\n-        }\n-        nNameRetry = 0;\n-        Sleep(500);\n-\n-        // Get our external IP from the IRC server and re-nick before joining the channel\n-        CNetAddr addrFromIRC;\n-        if (GetIPFromIRC(hSocket, strMyName, addrFromIRC))\n-        {\n-            printf(\"GetIPFromIRC() returned %s\\n\", addrFromIRC.ToString().c_str());\n-            // Don't use our IP as our nick if we're not listening\n-            if (!fNoListen && addrFromIRC.IsRoutable())\n-            {\n-                // IRC lets you to re-nick\n-                AddLocal(addrFromIRC, LOCAL_IRC);\n-                strMyName = EncodeAddress(GetLocalAddress(&addrConnect));\n-                Send(hSocket, strprintf(\"NICK %s\\r\", strMyName.c_str()).c_str());\n-            }\n-        }\n-\n-        if (fTestNet) {\n-            Send(hSocket, \"JOIN #bitcoinTEST3\\r\");\n-            Send(hSocket, \"WHO #bitcoinTEST3\\r\");\n-        } else {\n-            // randomly join #bitcoin00-#bitcoin99\n-            int channel_number = GetRandInt(100);\n-            Send(hSocket, strprintf(\"JOIN #bitcoin%02d\\r\", channel_number).c_str());\n-            Send(hSocket, strprintf(\"WHO #bitcoin%02d\\r\", channel_number).c_str());\n-        }\n-\n-        int64 nStart = GetTime();\n-        string strLine;\n-        strLine.reserve(10000);\n-        while (!fShutdown && RecvLineIRC(hSocket, strLine))\n-        {\n-            if (strLine.empty() || strLine.size() > 900 || strLine[0] != ':')\n-                continue;\n-\n-            vector<string> vWords;\n-            ParseString(strLine, ' ', vWords);\n-            if (vWords.size() < 2)\n-                continue;\n-\n-            std::string strName;\n-\n-            if (vWords[1] == \"352\" && vWords.size() >= 8)\n-            {\n-                // index 7 is limited to 16 characters\n-                // could get full length name at index 10, but would be different from join messages\n-                strName = vWords[7].c_str();\n-                printf(\"IRC got who\\n\");\n-            }\n-\n-            if (vWords[1] == \"JOIN\" && vWords[0].size() > 1)\n-            {\n-                // :username!username@50000007.F000000B.90000002.IP JOIN :#channelname\n-                strName = vWords[0].substr(1, vWords[0].find('!', 1) - 1);\n-                printf(\"IRC got join\\n\");\n-            }\n-\n-            if (boost::algorithm::starts_with(strName, \"u\"))\n-            {\n-                CAddress addr;\n-                if (DecodeAddress(strName, addr))\n-                {\n-                    addr.nTime = GetAdjustedTime();\n-                    if (addrman.Add(addr, addrConnect, 51 * 60))\n-                        printf(\"IRC got new address: %s\\n\", addr.ToString().c_str());\n-                    nGotIRCAddresses++;\n-                }\n-                else\n-                {\n-                    printf(\"IRC decode failed\\n\");\n-                }\n-            }\n-        }\n-        closesocket(hSocket);\n-        hSocket = INVALID_SOCKET;\n-\n-        if (GetTime() - nStart > 20 * 60)\n-        {\n-            nErrorWait /= 3;\n-            nRetryWait /= 3;\n-        }\n-\n-        nRetryWait = nRetryWait * 11 / 10;\n-        if (!Wait(nRetryWait += 60))\n-            return;\n-    }\n-}\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-#ifdef TEST\n-int main(int argc, char *argv[])\n-{\n-    WSADATA wsadata;\n-    if (WSAStartup(MAKEWORD(2,2), &wsadata) != NO_ERROR)\n-    {\n-        printf(\"Error at WSAStartup()\\n\");\n-        return false;\n-    }\n-\n-    ThreadIRCSeed(NULL);\n-\n-    WSACleanup();\n-    return 0;\n-}\n-#endif"
      },
      {
        "sha": "119aeb3fdae2e21f7007379a4237099d035493c8",
        "filename": "src/irc.h",
        "status": "removed",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfd71bb4509d12c26e630bc671a542ad5bab4945/src/irc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfd71bb4509d12c26e630bc671a542ad5bab4945/src/irc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.h?ref=dfd71bb4509d12c26e630bc671a542ad5bab4945",
        "patch": "@@ -1,12 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2012 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#ifndef BITCOIN_IRC_H\n-#define BITCOIN_IRC_H\n-\n-void ThreadIRCSeed(void* parg);\n-\n-extern int nGotIRCAddresses;\n-\n-#endif"
      },
      {
        "sha": "694cacd6322a240bb4913c1a9a749a0e6bee58c1",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "patch": "@@ -71,7 +71,6 @@ OBJS= \\\n     obj/key.o \\\n     obj/db.o \\\n     obj/init.o \\\n-    obj/irc.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\"
      },
      {
        "sha": "8b5a5dccd90a75d38995460cf24eeef01417e2f8",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "patch": "@@ -79,7 +79,6 @@ OBJS= \\\n     obj/key.o \\\n     obj/db.o \\\n     obj/init.o \\\n-    obj/irc.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\"
      },
      {
        "sha": "af12731fa4f028e103c6b212a4963d9491ab8cf0",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "patch": "@@ -80,7 +80,6 @@ OBJS= \\\n     obj/key.o \\\n     obj/db.o \\\n     obj/init.o \\\n-    obj/irc.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\"
      },
      {
        "sha": "4401cf0d5663b4439aba2af6b6857c08945bcb47",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "patch": "@@ -111,7 +111,6 @@ OBJS= \\\n     obj/key.o \\\n     obj/db.o \\\n     obj/init.o \\\n-    obj/irc.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\"
      },
      {
        "sha": "24fd47241d945517a121277e9df4bc85dadad024",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "patch": "@@ -3,7 +3,6 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"irc.h\"\n #include \"db.h\"\n #include \"net.h\"\n #include \"init.h\"\n@@ -347,7 +346,6 @@ bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const cha\n     return error(\"GetMyExternalIP() : connection closed\");\n }\n \n-// We now get our external IP from the IRC server first and only use this as a backup\n bool GetMyExternalIP(CNetAddr& ipRet)\n {\n     CService addrConnect;\n@@ -1928,10 +1926,6 @@ void StartNode(void* parg)\n     if (fUseUPnP)\n         MapPort();\n \n-    // Get addresses from IRC and advertise ours\n-    if (!NewThread(ThreadIRCSeed, NULL))\n-        printf(\"Error: NewThread(ThreadIRCSeed) failed\\n\");\n-\n     // Send and receive from sockets, accept connections\n     if (!NewThread(ThreadSocketHandler, NULL))\n         printf(\"Error: NewThread(ThreadSocketHandler) failed\\n\");"
      },
      {
        "sha": "3b46523cd90046020a3211048a44c683525edd56",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "patch": "@@ -49,7 +49,6 @@ enum\n     LOCAL_IF,     // address a local interface listens on\n     LOCAL_BIND,   // address explicit bound to\n     LOCAL_UPNP,   // address reported by UPnP\n-    LOCAL_IRC,    // address reported by IRC (deprecated)\n     LOCAL_HTTP,   // address reported by whatismyip.com and similar\n     LOCAL_MANUAL, // address explicitly specified (-externalip=)\n "
      }
    ]
  },
  {
    "sha": "97372c2d22eb81cba403166f99005ea32f4f6608",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzM3MmMyZDIyZWI4MWNiYTQwMzE2NmY5OTAwNWVhMzJmNGY2NjA4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-03-24T23:40:58Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-03-25T00:02:18Z"
      },
      "message": "Update contrib/debian (including IRC removal)",
      "tree": {
        "sha": "61de0064d91d2e98b6d8d3af3072f1b812ce331b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61de0064d91d2e98b6d8d3af3072f1b812ce331b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97372c2d22eb81cba403166f99005ea32f4f6608",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97372c2d22eb81cba403166f99005ea32f4f6608",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97372c2d22eb81cba403166f99005ea32f4f6608",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97372c2d22eb81cba403166f99005ea32f4f6608/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2efd981aa14e94cce4a0a888b6ee1f4e4347924"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 37,
      "deletions": 27
    },
    "files": [
      {
        "sha": "a2f55a9138afc9feb7117ffb51cb9dfe0cd81acd",
        "filename": "contrib/debian/bin/bitcoind",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/contrib/debian/bin/bitcoind",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2efd981aa14e94cce4a0a888b6ee1f4e4347924/contrib/debian/bin/bitcoind",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bin/bitcoind?ref=c2efd981aa14e94cce4a0a888b6ee1f4e4347924",
        "patch": "@@ -1,14 +0,0 @@\n-#!/bin/sh\n-\n-set -e\n-\n-umask 077\n-\n-basedir=~/.bitcoin\n-cfgfile=\"$basedir/bitcoin.conf\"\n-\n-[ -e \"$basedir\" ] || mkdir \"$basedir\"\n-\n-[ -e \"$cfgfile\" ] || perl -le 'print\"rpcpassword=\",map{(a..z,A..Z,0..9)[rand 62]}0..9' > \"$cfgfile\"\n-\n-exec /usr/lib/bitcoin/bitcoind \"$@\""
      },
      {
        "sha": "7bf746006ca9fd84c568c917d5ef6e081bd2832f",
        "filename": "contrib/debian/bitcoind.install",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97372c2d22eb81cba403166f99005ea32f4f6608/contrib/debian/bitcoind.install",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97372c2d22eb81cba403166f99005ea32f4f6608/contrib/debian/bitcoind.install",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoind.install?ref=97372c2d22eb81cba403166f99005ea32f4f6608",
        "patch": "@@ -1,2 +1 @@\n-debian/bin/bitcoind usr/bin\n-src/bitcoind usr/lib/bitcoin\n+src/bitcoind usr/bin"
      },
      {
        "sha": "4388e7175abf0f942b71ae2ac2bd8aae18e491c6",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97372c2d22eb81cba403166f99005ea32f4f6608/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97372c2d22eb81cba403166f99005ea32f4f6608/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=97372c2d22eb81cba403166f99005ea32f4f6608",
        "patch": "@@ -1,3 +1,39 @@\n+bitcoin (0.8.1-natty2) natty; urgency=low\n+\n+  * Remove dumb broken launcher script\n+\n+ -- Matt Corallo <matt@bluematt.me>  Sun, 24 Mar 2013 20:01:00 -0400\n+\n+bitcoin (0.8.1-natty1) natty; urgency=low\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo <matt@bluematt.me>  Tue, 19 Mar 2013 13:03:00 -0400\n+\n+bitcoin (0.8.0-natty1) natty; urgency=low\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo <matt@bluematt.me>  Sat, 23 Feb 2013 16:01:00 -0500\n+\n+bitcoin (0.7.2-natty1) natty; urgency=low\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo <matt@bluematt.me>  Sat, 15 Dec 2012 10:59:00 -0400\n+\n+bitcoin (0.7.1-natty1) natty; urgency=low\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo <matt@bluematt.me>  Wed, 24 Oct 2012 15:06:00 -0400\n+\n+bitcoin (0.7.0-natty1) natty; urgency=low\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo <matt@bluematt.me>  Mon, 17 Sep 2012 13:45:00 +0200\n+\n bitcoin (0.6.3-natty1) natty; urgency=low\n \n   * New upstream release."
      },
      {
        "sha": "dd167ef53d9ace9ad2aa78841974e160c84f5384",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97372c2d22eb81cba403166f99005ea32f4f6608/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97372c2d22eb81cba403166f99005ea32f4f6608/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=97372c2d22eb81cba403166f99005ea32f4f6608",
        "patch": "@@ -33,8 +33,6 @@ Description: peer-to-peer network based digital currency - daemon\n  transact directly with each other, with the help of a P2P network to\n  check for double-spending.\n  .\n- By default connects to an IRC network to discover other peers.\n- .\n  Full transaction history is stored locally at each client.  This\n  requires 2+ GB of space, slowly growing.\n  .\n@@ -51,8 +49,6 @@ Description: peer-to-peer network based digital currency - Qt GUI\n  transact directly with each other, with the help of a P2P network to\n  check for double-spending.\n  .\n- By default connects to an IRC network to discover other peers.\n- .\n  Full transaction history is stored locally at each client.  This\n  requires 2+ GB of space, slowly growing.\n  ."
      },
      {
        "sha": "10ec36ae7ebed12b1b5186c168fa84a178cfd94e",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97372c2d22eb81cba403166f99005ea32f4f6608/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97372c2d22eb81cba403166f99005ea32f4f6608/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=97372c2d22eb81cba403166f99005ea32f4f6608",
        "patch": "@@ -18,10 +18,6 @@\n #connect=69.164.218.197\n #connect=10.0.0.1:8333\n \n-# Do not use Internet Relay Chat (irc.lfnet.org #bitcoin channel) to\n-# find other peers.\n-#noirc=1\n-\n # Maximum number of inbound+outbound connections.\n #maxconnections=\n "
      },
      {
        "sha": "426fe06675793016d41fe129271dd7ac26b0b6fa",
        "filename": "contrib/debian/manpages/bitcoin.conf.5",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97372c2d22eb81cba403166f99005ea32f4f6608/contrib/debian/manpages/bitcoin.conf.5",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97372c2d22eb81cba403166f99005ea32f4f6608/contrib/debian/manpages/bitcoin.conf.5",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin.conf.5?ref=97372c2d22eb81cba403166f99005ea32f4f6608",
        "patch": "@@ -24,9 +24,6 @@ Use as many *addnode=* settings as you like to connect to specific peers.\n \\fBconnect=\\fR\\fI'10.0.0.1:8333'\\fR\n Use as many *connect=* settings as you like to connect ONLY to specific peers.\n .TP\n-\\fBnoirc=\\fR[\\fI'1'\\fR|\\fI'0'\\fR]\n-Use or Do not use Internet Relay Chat (irc.lfnet.org #bitcoin channel) to find other peers.\n-.TP\n \\fRmaxconnections=\\fR\\fI'value'\\fR\n Maximum number of inbound+outbound connections.\n .SH JSON-RPC OPTIONS"
      }
    ]
  },
  {
    "sha": "6a1d6e03daa35463ff27f8d05f4313b604ed4397",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTFkNmUwM2RhYTM1NDYzZmYyN2Y4ZDA1ZjQzMTNiNjA0ZWQ0Mzk3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-03-24T23:41:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-03-25T00:02:18Z"
      },
      "message": "Add a new testnet dnsseed (currently only static list, will update)",
      "tree": {
        "sha": "c7398706e5a367e137b0689ae4348f7b1956d563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7398706e5a367e137b0689ae4348f7b1956d563"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a1d6e03daa35463ff27f8d05f4313b604ed4397",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1d6e03daa35463ff27f8d05f4313b604ed4397",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a1d6e03daa35463ff27f8d05f4313b604ed4397",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1d6e03daa35463ff27f8d05f4313b604ed4397/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97372c2d22eb81cba403166f99005ea32f4f6608",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97372c2d22eb81cba403166f99005ea32f4f6608",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97372c2d22eb81cba403166f99005ea32f4f6608"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6c8fe3ffc996666c2cfdc04d741276530d120092",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a1d6e03daa35463ff27f8d05f4313b604ed4397/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a1d6e03daa35463ff27f8d05f4313b604ed4397/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6a1d6e03daa35463ff27f8d05f4313b604ed4397",
        "patch": "@@ -1153,6 +1153,7 @@ static const char *strMainNetDNSSeed[][2] = {\n \n static const char *strTestNetDNSSeed[][2] = {\n     {\"bitcoin.petertodd.org\", \"testnet-seed.bitcoin.petertodd.org\"},\n+    {\"bluematt.me\", \"testnet-seed.bluematt.me\"},\n     {NULL, NULL}\n };\n "
      }
    ]
  }
]