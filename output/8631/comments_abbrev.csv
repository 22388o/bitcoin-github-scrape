JeremyRubin,2016-08-31T03:46:44Z,"Concept ACK. \n\nWill review & test soon.\n\nThe boost interruption_point paradigm is messy and can make code hard to reason about. In my code for https://github.com/bitcoin/bitcoin/pull/8464 I have also removed boost::thread and interruption points, preferring more explicit quitting. Dealing with the interruption code made working on #8464  more difficult than it had to be.\n\nOne Nit, which I th",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-243650672,243650672,
theuni,2016-08-31T03:52:18Z,"@JeremyRubin Nearly every thread uses separate interrupt/shutdown calls for exactly that reason.\n\nInterrupt is non-consensual, and means ""stop what you're doing and don't start anything else"". Shutdown means ""please gracefully exit now and don't return until you do"".\n",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-243651371,243651371,
JeremyRubin,2016-08-31T03:59:05Z,"@theuni Ah, gotcha. Was looking at small sample; my bad. I guess my comment should instead be, we should eventually migrate to shutdown only no interrupt threads; but this is a big step in that direction and precursor to that happening.\n",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-243652147,243652147,
sipa,2016-08-31T15:30:53Z,"Concept ACK, testing.\n",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-243802502,243802502,
paveljanik,2016-08-31T16:02:15Z,OS X here:\n\n```\nMaking all in src\n  CXX      test/test_test_bitcoin-scheduler_tests.o\nIn file included from test/scheduler_tests.cpp:8:\nIn file included from ./test/test_bitcoin.h:16:\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/thread:337:5: error: attempt to use a deleted function\n    __invoke(std::__1::move(std::__1::get<0>(__t,https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-243812773,243812773,
paveljanik,2016-08-31T18:04:30Z,Compile error fixed here.\n,https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-243849411,243849411,
sipa,2016-08-31T23:06:39Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-243929430,243929430,
theuni,2016-09-01T00:10:50Z,rebased and squashed in the compile fix.\n,https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-243939675,243939675,
laanwj,2016-09-01T12:10:58Z,">  Nearly every thread uses separate interrupt/shutdown calls for exactly that reason.\n\nThere's another reason, and that is that interrupt is supposed to be an instant operation at the caller site, and shutdown is allowed to wait. This allows parallelism in the shutdown process:\n- Send module A interrupt  (A starts terminating its threads, which may take some time)\n- Send module B interrupt  (",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-244059787,244059787,
laanwj,2016-09-01T13:47:03Z,Travis does keep failing. There may be an issue after all.\n,https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-244083563,244083563,
theuni,2016-09-01T15:32:03Z,"Hmm, travis was happy before the rebase. I'll try to reproduce locally, maybe something changed.\n",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-244117354,244117354,
theuni,2016-09-02T05:05:28Z,The travis failures were caused by the rebase after all. ab48c5e72156b34300db4a6521cb3c9969be3937 introduced a new test that relied on the interruptible semantics. I've added a commit that should fix that up.\n,https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-244284118,244284118,
btcdrak,2016-09-02T11:21:24Z,needs rebase again :( \n,https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-244349754,244349754,
JeremyRubin,2016-09-05T08:57:42Z,"@theuni I've gone through and I'll give you a ""tentative"" utack. Mostly looks fine.\n\nI'd suggest mostly:\n- checking typedefs which secretly use boost::*\n- Getting rid of the exception throwing interruption point. It's a bad default.\n- Getting rid of std::bind in favor of lambdas.\n- depending on status of my wip scriptcheck queue stuff, leaving those two commits out.\n",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-244694790,244694790,
theuni,2016-09-06T19:36:29Z,"@JeremyRubin Thanks for the review! To your points:\n- I agree somewhat on the typedefs, but I'd like to avoid this PR getting bigger and bigger. So let's do these case-by-case.\n- I don't think we can get rid of the exception throwing yet. I hate the interruption_point logic, but I don't think it's realistic to remove it all in one PR. I certainly agree with minimizing it though.\n- Agree on losi",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-245064563,245064563,
JeremyRubin,2016-09-06T19:57:03Z,"@theuni The only one I think you need to fix for this pr is `CConditionVariable`. Were there others you're worried about?\n\nNo worries about the scriptcheck stuff, we'll cross that bridge when it comes.\n",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-245070568,245070568,
theuni,2016-09-06T21:01:28Z,"@JeremyRubin Fixing up CConditionVariable means doing lots of mutex/lock replacements all over the place. I'd really rather do that as a follow-up to keep this one minimal.\n\nNow that we're not using any boost::thread's, I don't believe there's any major functional difference.\n",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-245090104,245090104,
JeremyRubin,2016-09-06T21:22:59Z,"@theuni sounds fine, this one is nuking boost::thread not boost::condition_variable after all :) \n",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-245097022,245097022,
btcdrak,2016-09-17T11:04:18Z,needs rebase\n,https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-247763264,247763264,
fanquake,2016-11-06T12:30:06Z,Concept ACK. Needs a rebase. Tagging for 0.14.0\n,https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-258677941,258677941,
fanquake,2016-11-12T12:53:06Z,There also some comments/examples about using boost thread [in scheduler](https://github.com/bitcoin/bitcoin/blob/master/src/scheduler.h#L9) that could be nuked.\n,https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-260120498,260120498,
theuni,2016-12-06T03:01:52Z,"Closing for now, need to get a specific chunk of this in first.",https://github.com/bitcoin/bitcoin/pull/8631#issuecomment-265047560,265047560,
JeremyRubin,2016-09-05T07:46:05Z,"Nit:\n\nI find the semantics of bind to be pretty confusing confusing. If we're cleaning up threading semantics I think it might be clearer to do as follows:\n\nscheduler_thread = std::thread([](){ TraceThread(""scheduler"", CScheduler::serviceQueue(scheduler)); };\n\nThis should also allow you to get rid of the explicit template param.\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77481047,77481047,src/init.cpp
JeremyRubin,2016-09-05T07:58:20Z,"This is OK -- initially, I was confused as to why you use an atomic var for the condition variable, as usually access is guarded by the lock so atomic would be overkill. But in this case, it's fine.\n\nMay be worth writing a profile at some point for if it is better to use a cond+atomic or to lock on writing the condition externally, or just throwing a comment in here as to why you're using an ato",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77482322,77482322,src/net.cpp
JeremyRubin,2016-09-05T08:08:22Z,repeating comment about using lambdas.\n,https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77483473,77483473,src/net.cpp
JeremyRubin,2016-09-05T08:18:54Z,"Just noting that there is a slight functional change here, the lock is released earlier but this seems a-OK.\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77484688,77484688,src/checkqueue.h
JeremyRubin,2016-09-05T08:21:06Z,"It might be worth holding off on this commit given that my Lockfree Checkqueue PR also touches all these places; assuming i can get that merged, and it also swaps in std::thread.\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77484914,77484914,src/checkqueue.h
JeremyRubin,2016-09-05T08:27:30Z,CConditionVariable is a boost::condition_variable!!\n,https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77485788,77485788,src/init.cpp
JeremyRubin,2016-09-05T08:42:05Z,nit: there is no interruption point in the new code\n,https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77487695,77487695,src/net.cpp
JeremyRubin,2016-09-05T08:42:45Z,Do these do anything? Can you just kill them? Was that mutex supposed to be (originally) static?\n,https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77487781,77487781,src/net.cpp
JeremyRubin,2016-09-05T08:45:05Z,This is a good commit; throwing generates bad code üëç \n,https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77488059,77488059,src/net.cpp
JeremyRubin,2016-09-05T08:51:16Z,might be better (although less clean) to use a noexcept version that returns a bool.\n,https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77488865,77488865,src/net.cpp
JeremyRubin,2016-09-05T08:52:14Z,üëç \n,https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77488965,77488965,src/utiltime.cpp
JeremyRubin,2016-09-05T08:53:53Z,same comment; this is fixed in my WIP lockfree stuff so may want to leave it assuming I get mine merged.\n,https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77489162,77489162,src/test/transaction_tests.cpp
theuni,2016-09-06T19:06:53Z,"I don't think it's possible to do this without a bind, as TraceThread requires a bound instance, though I'd be happy to be proven wrong :)\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77698821,77698821,src/init.cpp
theuni,2016-09-06T19:08:33Z,"Right, that's not at all clear from the individual commits. The atomic is used as the break condition for a few condvars, as well as the loop break condition in a few places. Rather than using separate bools for each, I just lumped them all into this one.\n\nWill add a comment.\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77699090,77699090,src/net.cpp
theuni,2016-09-06T19:23:51Z,"Yep, these don't need the binds. Will fix.\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77701396,77701396,src/net.cpp
theuni,2016-09-06T19:28:49Z,"The condvar has to use some lock, I assume this was just done to avoid creating a mutex/condvar per loop iteration. The mutex doesn't need to guard anything since the wake condition is atomic.\n\nSure, they could be static.\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77702135,77702135,src/net.cpp
theuni,2016-09-06T19:30:27Z,"I agree, these were only kept as-is to avoid scope creep.\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77702364,77702364,src/net.cpp
JeremyRubin,2016-09-06T19:51:32Z,"Github weirdly formatted my comment so you couldn't see the lambda.\n\n```\nscheduler_thread = std::thread([&]{\n    TraceThread(""scheduler"", [&]{scheduler.serviceQueue();} );\n };\n```\n\nDoes something like that not work? Maybe it's not much better than bind...\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77705718,77705718,src/init.cpp
theuni,2016-09-06T19:56:44Z,"Ah, I didn't realize that you meant to replace the binds with lambdas. I'm not sure that I find this any less confusing, but I don't really mind either way:\n\n``` c++\nscheduler_thread = std::thread([&scheduler] {\n    TraceThread(""scheduler"", [&scheduler] {\n        scheduler.serviceQueue();\n    });\n});\n```\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77706578,77706578,src/init.cpp
theuni,2016-09-06T19:58:51Z,"Heh, didn't see your response before I posted, but looks like we're on the same page. Either one is fine by me.\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r77706950,77706950,src/init.cpp
JeremyRubin,2016-09-13T02:47:05Z,So I've actually discovered a nice little trick for this -- \n\n```\nstruct dummy_mutex {\nvoid lock(){};\nvoid unlock(){};\n };\n```\n\nif you want to make it more clear that it's a worthless lock.\n,https://github.com/bitcoin/bitcoin/pull/8631#discussion_r78488998,78488998,src/net.cpp
laanwj,2016-10-11T09:48:19Z,Does this still need to catch `boost::thread_interrupted`? (another one below)\n,https://github.com/bitcoin/bitcoin/pull/8631#discussion_r82758851,82758851,src/bitcoin-cli.cpp
theuni,2016-10-11T10:08:25Z,"No, see ""future changes"" in the OP. There are a bunch of these to get rid of. I guess it doesn't make sense to do that later, I'll add it here.\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r82762185,82762185,src/bitcoin-cli.cpp
laanwj,2016-10-11T10:23:01Z,"Sorry, yes you mention it there. It just looked strange to me to add something instead of replace.\n",https://github.com/bitcoin/bitcoin/pull/8631#discussion_r82764350,82764350,src/bitcoin-cli.cpp
