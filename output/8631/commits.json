[
  {
    "sha": "d083ab970116dcdc787c3e5e6dfa9df812bb47af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDgzYWI5NzAxMTZkY2RjNzg3YzNlNWU2ZGZhOWRmODEyYmI0N2Fm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-19T22:30:46Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:38:46Z"
      },
      "message": "threads: turn upnp into a std::thread",
      "tree": {
        "sha": "cdc3f614548fabfc19475aa7854471e559f2c784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdc3f614548fabfc19475aa7854471e559f2c784"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d083ab970116dcdc787c3e5e6dfa9df812bb47af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d083ab970116dcdc787c3e5e6dfa9df812bb47af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d083ab970116dcdc787c3e5e6dfa9df812bb47af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d083ab970116dcdc787c3e5e6dfa9df812bb47af/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbe9ae8c69b947c8cdff2e0fbf5b57c9aa09b770",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbe9ae8c69b947c8cdff2e0fbf5b57c9aa09b770",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbe9ae8c69b947c8cdff2e0fbf5b57c9aa09b770"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 66,
      "deletions": 27
    },
    "files": [
      {
        "sha": "1958b16211e65f3c59bf7764324476e6e2880450",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d083ab970116dcdc787c3e5e6dfa9df812bb47af/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d083ab970116dcdc787c3e5e6dfa9df812bb47af/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d083ab970116dcdc787c3e5e6dfa9df812bb47af",
        "patch": "@@ -171,6 +171,7 @@ void Interrupt(boost::thread_group& threadGroup)\n     InterruptRPC();\n     InterruptREST();\n     InterruptTorControl();\n+    InterruptMapPort();\n     threadGroup.interrupt_all();\n }\n \n@@ -199,6 +200,7 @@ void Shutdown()\n #endif\n     StopNode();\n     StopTorControl();\n+    StopMapPort();\n     UnregisterNodeSignals(GetNodeSignals());\n \n     if (fFeeEstimatesInitialized)"
      },
      {
        "sha": "99c905991bafa72d0e85d728950fab58d018df61",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 27,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d083ab970116dcdc787c3e5e6dfa9df812bb47af/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d083ab970116dcdc787c3e5e6dfa9df812bb47af/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d083ab970116dcdc787c3e5e6dfa9df812bb47af",
        "patch": "@@ -39,6 +39,9 @@\n #include <boost/thread.hpp>\n \n #include <math.h>\n+#include <condition_variable>\n+#include <mutex>\n+#include <thread>\n \n // Dump addresses to peers.dat and banlist.dat every 15 minutes (900s)\n #define DUMP_ADDRESSES_INTERVAL 900\n@@ -1365,6 +1368,11 @@ void ThreadSocketHandler()\n \n \n #ifdef USE_UPNP\n+static std::condition_variable upnp_cond;\n+static std::mutex cs_upnp;\n+static bool upnp_interrupted = false;\n+static std::thread* upnp_thread = NULL;\n+\n void ThreadMapPort()\n {\n     std::string port = strprintf(\"%u\", GetListenPort());\n@@ -1414,35 +1422,33 @@ void ThreadMapPort()\n         }\n \n         std::string strDesc = \"Bitcoin \" + FormatFullVersion();\n-\n-        try {\n-            while (true) {\n+        bool interrupted = false;\n+        while (!interrupted) {\n #ifndef UPNPDISCOVER_SUCCESS\n-                /* miniupnpc 1.5 */\n-                r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                    port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n+            /* miniupnpc 1.5 */\n+            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n+                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n #else\n-                /* miniupnpc 1.6 */\n-                r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                    port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n+            /* miniupnpc 1.6 */\n+            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n+                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n #endif\n \n-                if(r!=UPNPCOMMAND_SUCCESS)\n-                    LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n-                        port, port, lanaddr, r, strupnperror(r));\n-                else\n-                    LogPrintf(\"UPnP Port Mapping successful.\\n\");\n+            if(r!=UPNPCOMMAND_SUCCESS)\n+                LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n+                    port, port, lanaddr, r, strupnperror(r));\n+            else\n+                LogPrintf(\"UPnP Port Mapping successful.\\n\");\n \n-                MilliSleep(20*60*1000); // Refresh every 20 minutes\n-            }\n+            std::unique_lock<std::mutex> lock(cs_upnp);\n+            interrupted = upnp_cond.wait_for(lock, std::chrono::minutes(20), []{return upnp_interrupted; });\n         }\n-        catch (const boost::thread_interrupted&)\n+        if(interrupted)\n         {\n             r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n             LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n             freeUPNPDevlist(devlist); devlist = 0;\n             FreeUPNPUrls(&urls);\n-            throw;\n         }\n     } else {\n         LogPrintf(\"No valid UPnP IGDs found\\n\");\n@@ -1452,32 +1458,61 @@ void ThreadMapPort()\n     }\n }\n \n+void InterruptMapPort()\n+{\n+    LogPrintf(\"Interrupting UPnP\\n\");\n+    {\n+        std::lock_guard<std::mutex> lock(cs_upnp);\n+        upnp_interrupted = true;\n+    }\n+    upnp_cond.notify_all();\n+}\n+\n+void StopMapPort()\n+{\n+    if(upnp_thread) {\n+        LogPrintf(\"Stopping UPnP\\n\");\n+        upnp_thread->join();\n+        delete upnp_thread;\n+        upnp_thread = NULL;\n+    }\n+    std::lock_guard<std::mutex> lock(cs_upnp);\n+    upnp_interrupted = false;\n+}\n+\n void MapPort(bool fUseUPnP)\n {\n-    static boost::thread* upnp_thread = NULL;\n \n     if (fUseUPnP)\n     {\n         if (upnp_thread) {\n-            upnp_thread->interrupt();\n-            upnp_thread->join();\n-            delete upnp_thread;\n+            InterruptMapPort();\n+            StopMapPort();\n         }\n-        upnp_thread = new boost::thread(boost::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort));\n+        upnp_thread = new std::thread(std::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort));\n     }\n     else if (upnp_thread) {\n-        upnp_thread->interrupt();\n-        upnp_thread->join();\n-        delete upnp_thread;\n-        upnp_thread = NULL;\n+        InterruptMapPort();\n+        StopMapPort();\n     }\n }\n \n+\n #else\n void MapPort(bool)\n {\n     // Intentionally left blank.\n }\n+void StopMapPort()\n+{\n+    // Intentionally left blank.\n+}\n+\n+void InterruptMapPort()\n+{\n+    // Intentionally left blank.\n+}\n+\n #endif\n \n "
      },
      {
        "sha": "cf992abfdfd4d929fa8c6985c8821fe54db85b68",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d083ab970116dcdc787c3e5e6dfa9df812bb47af/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d083ab970116dcdc787c3e5e6dfa9df812bb47af/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d083ab970116dcdc787c3e5e6dfa9df812bb47af",
        "patch": "@@ -93,6 +93,8 @@ CNode* FindNode(const CService& ip);\n CNode* FindNode(const NodeId id); //TODO: Remove this\n bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n void MapPort(bool fUseUPnP);\n+void InterruptMapPort();\n+void StopMapPort();\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler);"
      }
    ]
  },
  {
    "sha": "8447a96ee2e796b7de89968429b586206a40b04c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDQ3YTk2ZWUyZTc5NmI3ZGU4OTk2ODQyOWI1ODYyMDZhNDBiMDRj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-24T21:16:04Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:47Z"
      },
      "message": "threads: make scheduler interruptible",
      "tree": {
        "sha": "e5b48af1563ba62afc99cbd71994b205bca62765",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5b48af1563ba62afc99cbd71994b205bca62765"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8447a96ee2e796b7de89968429b586206a40b04c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8447a96ee2e796b7de89968429b586206a40b04c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8447a96ee2e796b7de89968429b586206a40b04c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8447a96ee2e796b7de89968429b586206a40b04c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d083ab970116dcdc787c3e5e6dfa9df812bb47af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d083ab970116dcdc787c3e5e6dfa9df812bb47af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d083ab970116dcdc787c3e5e6dfa9df812bb47af"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 39,
      "deletions": 19
    },
    "files": [
      {
        "sha": "132f4ec7ed6f482da9590a0c73d7d16bccbbb4da",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8447a96ee2e796b7de89968429b586206a40b04c/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8447a96ee2e796b7de89968429b586206a40b04c/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=8447a96ee2e796b7de89968429b586206a40b04c",
        "patch": "@@ -42,7 +42,7 @@\n \n static bool fDaemon;\n \n-void WaitForShutdown(boost::thread_group* threadGroup)\n+void WaitForShutdown(boost::thread_group* threadGroup, CScheduler& scheduler)\n {\n     bool fShutdown = ShutdownRequested();\n     // Tell the main threads to shutdown.\n@@ -53,7 +53,7 @@ void WaitForShutdown(boost::thread_group* threadGroup)\n     }\n     if (threadGroup)\n     {\n-        Interrupt(*threadGroup);\n+        Interrupt(*threadGroup, scheduler);\n         threadGroup->join_all();\n     }\n }\n@@ -168,14 +168,14 @@ bool AppInit(int argc, char* argv[])\n \n     if (!fRet)\n     {\n-        Interrupt(threadGroup);\n+        Interrupt(threadGroup, scheduler);\n         // threadGroup.join_all(); was left out intentionally here, because we didn't re-test all of\n         // the startup-failure cases to make sure they don't result in a hang due to some\n         // thread-blocking-waiting-for-another-thread-during-startup case\n     } else {\n-        WaitForShutdown(&threadGroup);\n+        WaitForShutdown(&threadGroup, scheduler);\n     }\n-    Shutdown();\n+    Shutdown(scheduler);\n \n     return fRet;\n }"
      },
      {
        "sha": "ac57f0af5c341828bdbe7d241fc9ae8f8ae6130c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8447a96ee2e796b7de89968429b586206a40b04c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8447a96ee2e796b7de89968429b586206a40b04c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8447a96ee2e796b7de89968429b586206a40b04c",
        "patch": "@@ -62,6 +62,8 @@\n #include \"zmq/zmqnotificationinterface.h\"\n #endif\n \n+#include <thread>\n+\n using namespace std;\n \n bool fFeeEstimatesInitialized = false;\n@@ -163,19 +165,21 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n static CCoinsViewDB *pcoinsdbview = NULL;\n static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n+static std::thread scheduler_thread;\n \n-void Interrupt(boost::thread_group& threadGroup)\n+void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n     InterruptHTTPServer();\n     InterruptHTTPRPC();\n     InterruptRPC();\n     InterruptREST();\n     InterruptTorControl();\n     InterruptMapPort();\n+    scheduler.interrupt(false);\n     threadGroup.interrupt_all();\n }\n \n-void Shutdown()\n+void Shutdown(CScheduler& scheduler)\n {\n     LogPrintf(\"%s: In progress...\\n\", __func__);\n     static CCriticalSection cs_Shutdown;\n@@ -201,6 +205,10 @@ void Shutdown()\n     StopNode();\n     StopTorControl();\n     StopMapPort();\n+    scheduler.stop();\n+    if(scheduler_thread.joinable())\n+        scheduler_thread.join();\n+\n     UnregisterNodeSignals(GetNodeSignals());\n \n     if (fFeeEstimatesInitialized)\n@@ -1078,7 +1086,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // Start the lightweight task scheduler thread\n     CScheduler::Function serviceLoop = boost::bind(&CScheduler::serviceQueue, &scheduler);\n-    threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n+    scheduler_thread = std::thread(std::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n     /* Start the RPC server already.  It will be started in \"warmup\" mode\n      * and not really process calls already (but it will signify connections"
      },
      {
        "sha": "5a51592b040558c81b087ddb0037145875272d92",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8447a96ee2e796b7de89968429b586206a40b04c/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8447a96ee2e796b7de89968429b586206a40b04c/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=8447a96ee2e796b7de89968429b586206a40b04c",
        "patch": "@@ -19,8 +19,8 @@ class thread_group;\n void StartShutdown();\n bool ShutdownRequested();\n /** Interrupt threads */\n-void Interrupt(boost::thread_group& threadGroup);\n-void Shutdown();\n+void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler);\n+void Shutdown(CScheduler& scheduler);\n //!Initialize the logging infrastructure\n void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules"
      },
      {
        "sha": "fda4f145f0774ac3ae5e2d97c3b77c3de9fb77f3",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8447a96ee2e796b7de89968429b586206a40b04c/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8447a96ee2e796b7de89968429b586206a40b04c/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=8447a96ee2e796b7de89968429b586206a40b04c",
        "patch": "@@ -281,9 +281,9 @@ void BitcoinCore::shutdown()\n     try\n     {\n         qDebug() << __func__ << \": Running Shutdown in thread\";\n-        Interrupt(threadGroup);\n+        Interrupt(threadGroup, scheduler);\n         threadGroup.join_all();\n-        Shutdown();\n+        Shutdown(scheduler);\n         qDebug() << __func__ << \": Shutdown finished\";\n         Q_EMIT shutdownResult(1);\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "56388138d89ef441939499380b56369b65b536cb",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8447a96ee2e796b7de89968429b586206a40b04c/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8447a96ee2e796b7de89968429b586206a40b04c/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=8447a96ee2e796b7de89968429b586206a40b04c",
        "patch": "@@ -82,7 +82,7 @@ void CScheduler::serviceQueue()\n     newTaskScheduled.notify_one();\n }\n \n-void CScheduler::stop(bool drain)\n+void CScheduler::interrupt(bool drain)\n {\n     {\n         boost::unique_lock<boost::mutex> lock(newTaskMutex);\n@@ -94,6 +94,13 @@ void CScheduler::stop(bool drain)\n     newTaskScheduled.notify_all();\n }\n \n+void CScheduler::stop()\n+{\n+    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    while(nThreadsServicingQueue)\n+        newTaskScheduled.wait(lock);\n+}\n+\n void CScheduler::schedule(CScheduler::Function f, boost::chrono::system_clock::time_point t)\n {\n     {"
      },
      {
        "sha": "6356fe23124571438873bc30f0305e98fff0ebbf",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8447a96ee2e796b7de89968429b586206a40b04c/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8447a96ee2e796b7de89968429b586206a40b04c/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=8447a96ee2e796b7de89968429b586206a40b04c",
        "patch": "@@ -63,7 +63,10 @@ class CScheduler\n     // Tell any threads running serviceQueue to stop as soon as they're\n     // done servicing whatever task they're currently servicing (drain=false)\n     // or when there is no work left to be done (drain=true)\n-    void stop(bool drain=false);\n+    void interrupt(bool drain=false);\n+\n+    // Wait for all threads to finish\n+    void stop();\n \n     // Returns number of tasks waiting to be serviced,\n     // and first and last task times"
      },
      {
        "sha": "ed8afe9df35606f59c891100de67a1e3faa2de7e",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8447a96ee2e796b7de89968429b586206a40b04c/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8447a96ee2e796b7de89968429b586206a40b04c/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=8447a96ee2e796b7de89968429b586206a40b04c",
        "patch": "@@ -84,16 +84,16 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK(last > now);\n \n     // As soon as these are created they will start running and servicing the queue\n-    boost::thread_group microThreads;\n+    std::vector<std::thread> microThreads;\n     for (int i = 0; i < 5; i++)\n-        microThreads.create_thread(boost::bind(&CScheduler::serviceQueue, &microTasks));\n+        microThreads.emplace_back(&CScheduler::serviceQueue, &microTasks);\n \n     MicroSleep(600);\n     now = boost::chrono::system_clock::now();\n \n     // More threads and more tasks:\n     for (int i = 0; i < 5; i++)\n-        microThreads.create_thread(boost::bind(&CScheduler::serviceQueue, &microTasks));\n+        microThreads.emplace_back(&CScheduler::serviceQueue, &microTasks);\n     for (int i = 0; i < 100; i++) {\n         boost::chrono::system_clock::time_point t = now + boost::chrono::microseconds(randomMsec(rng));\n         boost::chrono::system_clock::time_point tReschedule = now + boost::chrono::microseconds(500 + randomMsec(rng));\n@@ -105,8 +105,10 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     }\n \n     // Drain the task queue then exit threads\n-    microTasks.stop(true);\n-    microThreads.join_all(); // ... wait until all the threads are done\n+    microTasks.interrupt(true);\n+    microTasks.stop();\n+    for(auto& thread : microThreads)\n+        thread.join(); // ... wait until all the threads are done\n \n     int counterSum = 0;\n     for (int i = 0; i < 10; i++) {"
      }
    ]
  },
  {
    "sha": "ed68c688d3f5f76d3a0d56924d4421a7ad8af977",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDY4YzY4OGQzZjVmNzZkM2EwZDU2OTI0ZDQ0MjFhN2FkOGFmOTc3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-24T21:20:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:47Z"
      },
      "message": "threads: make dnsseed interruptible",
      "tree": {
        "sha": "74a9a3c45903965909fbad5401acc007bfbd6516",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74a9a3c45903965909fbad5401acc007bfbd6516"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed68c688d3f5f76d3a0d56924d4421a7ad8af977",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed68c688d3f5f76d3a0d56924d4421a7ad8af977",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed68c688d3f5f76d3a0d56924d4421a7ad8af977",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed68c688d3f5f76d3a0d56924d4421a7ad8af977/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8447a96ee2e796b7de89968429b586206a40b04c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8447a96ee2e796b7de89968429b586206a40b04c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8447a96ee2e796b7de89968429b586206a40b04c"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 27,
      "deletions": 3
    },
    "files": [
      {
        "sha": "aa614c0f8f360f11e7e31439d2f3068e3cd0e727",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed68c688d3f5f76d3a0d56924d4421a7ad8af977/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed68c688d3f5f76d3a0d56924d4421a7ad8af977/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ed68c688d3f5f76d3a0d56924d4421a7ad8af977",
        "patch": "@@ -176,6 +176,7 @@ void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler)\n     InterruptTorControl();\n     InterruptMapPort();\n     scheduler.interrupt(false);\n+    InterruptNode();\n     threadGroup.interrupt_all();\n }\n "
      },
      {
        "sha": "f3344a5568cf0121d85a64d66f5c89ddd3f17518",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed68c688d3f5f76d3a0d56924d4421a7ad8af977/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed68c688d3f5f76d3a0d56924d4421a7ad8af977/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ed68c688d3f5f76d3a0d56924d4421a7ad8af977",
        "patch": "@@ -120,6 +120,12 @@ boost::condition_variable messageHandlerCondition;\n static CNodeSignals g_signals;\n CNodeSignals& GetNodeSignals() { return g_signals; }\n \n+static std::condition_variable net_interrupt_cond;\n+static std::mutex cs_net_interrupt;\n+static std::atomic<bool> net_interrupted(false);\n+\n+std::thread dns_address_seed_thread;\n+\n void AddOneShot(const std::string& strDest)\n {\n     LOCK(cs_vOneShots);\n@@ -1537,8 +1543,11 @@ void ThreadDNSAddressSeed()\n     // goal: only query DNS seeds if address need is acute\n     if ((addrman.size() > 0) &&\n         (!GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n-        MilliSleep(11 * 1000);\n-\n+        {\n+            std::unique_lock<std::mutex> lock(cs_net_interrupt);\n+            if(net_interrupt_cond.wait_for(lock, std::chrono::seconds(11), []()->bool {return net_interrupted; }))\n+                return;\n+        }\n         LOCK(cs_vNodes);\n         if (vNodes.size() >= 2) {\n             LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n@@ -1552,6 +1561,8 @@ void ThreadDNSAddressSeed()\n     LogPrintf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n \n     BOOST_FOREACH(const CDNSSeedData &seed, vSeeds) {\n+        if(net_interrupted)\n+            return;\n         if (HaveNameProxy()) {\n             AddOneShot(seed.host);\n         } else {\n@@ -2101,6 +2112,7 @@ void static Discover(boost::thread_group& threadGroup)\n \n void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n+    net_interrupted = false;\n     uiInterface.InitMessage(_(\"Loading addresses...\"));\n     // Load addresses from peers.dat\n     int64_t nStart = GetTimeMillis();\n@@ -2158,7 +2170,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (!GetBoolArg(\"-dnsseed\", true))\n         LogPrintf(\"DNS seeding disabled\\n\");\n     else\n-        threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"dnsseed\", &ThreadDNSAddressSeed));\n+        dns_address_seed_thread = std::thread(std::bind(&TraceThread<void (*)()>, \"dnsseed\", &ThreadDNSAddressSeed));\n \n     // Map ports with UPnP\n     MapPort(GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n@@ -2179,6 +2191,12 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n     scheduler.scheduleEvery(&DumpData, DUMP_ADDRESSES_INTERVAL);\n }\n \n+void InterruptNode()\n+{\n+    net_interrupted = true;\n+    net_interrupt_cond.notify_all();\n+}\n+\n bool StopNode()\n {\n     LogPrintf(\"StopNode()\\n\");\n@@ -2193,6 +2211,9 @@ bool StopNode()\n         fAddressesInitialized = false;\n     }\n \n+    if(dns_address_seed_thread.joinable())\n+        dns_address_seed_thread.join();\n+\n     return true;\n }\n "
      },
      {
        "sha": "807edb75efba7fad1369601ecc6d6ccc4264d633",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed68c688d3f5f76d3a0d56924d4421a7ad8af977/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed68c688d3f5f76d3a0d56924d4421a7ad8af977/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ed68c688d3f5f76d3a0d56924d4421a7ad8af977",
        "patch": "@@ -99,6 +99,8 @@ unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler);\n bool StopNode();\n+void InterruptNode();\n+\n void SocketSendData(CNode *pnode);\n \n struct CombinerAll"
      }
    ]
  },
  {
    "sha": "61f71715ad9804adf91ff04ce835bae9eec50b4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWY3MTcxNWFkOTgwNGFkZjkxZmYwNGNlODM1YmFlOWVlYzUwYjRk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-25T02:53:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:47Z"
      },
      "message": "threads: eliminate the need for this_thread::interruption_point\n\nAlso note that boost::thread catches boost::thread_interrupted itself,\nbut std::thread obviously won't catch thread_interrupted. So don't rethrow\nafter catching.",
      "tree": {
        "sha": "6ab1d3ee492c65a5b3e05ddaf0c3343e678dff26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ab1d3ee492c65a5b3e05ddaf0c3343e678dff26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61f71715ad9804adf91ff04ce835bae9eec50b4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61f71715ad9804adf91ff04ce835bae9eec50b4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61f71715ad9804adf91ff04ce835bae9eec50b4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61f71715ad9804adf91ff04ce835bae9eec50b4d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed68c688d3f5f76d3a0d56924d4421a7ad8af977",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed68c688d3f5f76d3a0d56924d4421a7ad8af977",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed68c688d3f5f76d3a0d56924d4421a7ad8af977"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 95,
      "deletions": 27
    },
    "files": [
      {
        "sha": "d5c0b096a6568d1a534d1f47e0ed2ab3be40bfba",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -294,6 +294,8 @@ int CommandLineRPC(int argc, char *argv[])\n     catch (const boost::thread_interrupted&) {\n         throw;\n     }\n+    catch (const thread_interrupted&) {\n+    }\n     catch (const std::exception& e) {\n         strPrint = string(\"error: \") + e.what();\n         nRet = EXIT_FAILURE;"
      },
      {
        "sha": "3c3d81a2cfb5c10597e9f335ca4887c8fd547e58",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -658,6 +658,8 @@ static int CommandLineRawTx(int argc, char* argv[])\n     catch (const boost::thread_interrupted&) {\n         throw;\n     }\n+    catch (const thread_interrupted&) {\n+    }\n     catch (const std::exception& e) {\n         strPrint = string(\"error: \") + e.what();\n         nRet = EXIT_FAILURE;"
      },
      {
        "sha": "3a54ce0aea7b651b29147f2e1f779bff5e7a6369",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -176,8 +176,17 @@ void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler)\n     InterruptTorControl();\n     InterruptMapPort();\n     scheduler.interrupt(false);\n+    if(pblocktree)\n+       pblocktree->InterruptLoadBlockIndexGuts();\n+    InterruptNetbase();\n     InterruptNode();\n     threadGroup.interrupt_all();\n+#ifdef ENABLE_WALLET\n+    if (pwalletMain) {\n+        pwalletMain->Interrupt();\n+        InterruptFlushWalletDB();\n+    }\n+#endif\n }\n \n void Shutdown(CScheduler& scheduler)"
      },
      {
        "sha": "be971529aede39a581e534255c978839ee18f836",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -3020,9 +3020,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     CBlockIndex *pindexMostWork = NULL;\n     CBlockIndex *pindexNewTip = NULL;\n     do {\n-        boost::this_thread::interruption_point();\n-        if (ShutdownRequested())\n-            break;\n+        interruption_point(ShutdownRequested());\n \n         const CBlockIndex *pindexFork;\n         std::list<CTransaction> txConflicted;\n@@ -3963,7 +3961,7 @@ bool static LoadBlockIndexDB()\n     if (!pblocktree->LoadBlockIndexGuts(InsertBlockIndex))\n         return false;\n \n-    boost::this_thread::interruption_point();\n+    interruption_point(ShutdownRequested());\n \n     // Calculate nChainWork\n     vector<pair<int, CBlockIndex*> > vSortedByHeight;\n@@ -4099,7 +4097,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     LogPrintf(\"[0%%]...\");\n     for (CBlockIndex* pindex = chainActive.Tip(); pindex && pindex->pprev; pindex = pindex->pprev)\n     {\n-        boost::this_thread::interruption_point();\n+        interruption_point(ShutdownRequested());\n         int percentageDone = std::max(1, std::min(99, (int)(((double)(chainActive.Height() - pindex->nHeight)) / (double)nCheckDepth * (nCheckLevel >= 4 ? 50 : 100))));\n         if (reportDone < percentageDone/10) {\n             // report every 10% step\n@@ -4153,7 +4151,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     if (nCheckLevel >= 4) {\n         CBlockIndex *pindex = pindexState;\n         while (pindex != chainActive.Tip()) {\n-            boost::this_thread::interruption_point();\n+            interruption_point(ShutdownRequested());\n             uiInterface.ShowProgress(_(\"Verifying blocks...\"), std::max(1, std::min(99, 100 - (int)(((double)(chainActive.Height() - pindex->nHeight)) / (double)nCheckDepth * 50))));\n             pindex = chainActive.Next(pindex);\n             CBlock block;\n@@ -4349,7 +4347,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n         CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE+8, SER_DISK, CLIENT_VERSION);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n-            boost::this_thread::interruption_point();\n+            interruption_point(ShutdownRequested());\n \n             blkdat.SetPos(nRewind);\n             nRewind++; // start one byte further next time, in case of failure\n@@ -4740,7 +4738,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n \n         const CInv &inv = *it;\n         {\n-            boost::this_thread::interruption_point();\n+            interruption_point(ShutdownRequested());\n             it++;\n \n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n@@ -5122,7 +5120,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         int64_t nSince = nNow - 10 * 60;\n         BOOST_FOREACH(CAddress& addr, vAddr)\n         {\n-            boost::this_thread::interruption_point();\n+            interruption_point(ShutdownRequested());\n \n             if ((addr.nServices & REQUIRED_SERVICES) != REQUIRED_SERVICES)\n                 continue;\n@@ -5212,7 +5210,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             CInv &inv = vInv[nInv];\n \n-            boost::this_thread::interruption_point();\n+            interruption_point(ShutdownRequested());\n \n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n@@ -6241,7 +6239,7 @@ bool ProcessMessages(CNode* pfrom)\n         try\n         {\n             fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams);\n-            boost::this_thread::interruption_point();\n+            interruption_point(ShutdownRequested());\n         }\n         catch (const std::ios_base::failure& e)\n         {\n@@ -6269,6 +6267,8 @@ bool ProcessMessages(CNode* pfrom)\n         catch (const boost::thread_interrupted&) {\n             throw;\n         }\n+        catch (const thread_interrupted&) {\n+        }\n         catch (const std::exception& e) {\n             PrintExceptionContinue(&e, \"ProcessMessages()\");\n         } catch (...) {"
      },
      {
        "sha": "605029af6681e05c982c809cf4b2f6c1940d2bd1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -1232,7 +1232,7 @@ void ThreadSocketHandler()\n \n         int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n                              &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-        boost::this_thread::interruption_point();\n+        interruption_point(net_interrupted);\n \n         if (nSelect == SOCKET_ERROR)\n         {\n@@ -1271,7 +1271,7 @@ void ThreadSocketHandler()\n         }\n         BOOST_FOREACH(CNode* pnode, vNodesCopy)\n         {\n-            boost::this_thread::interruption_point();\n+            interruption_point(net_interrupted);\n \n             //\n             // Receive\n@@ -1674,7 +1674,7 @@ void ThreadOpenConnections()\n         MilliSleep(500);\n \n         CSemaphoreGrant grant(*semOutbound);\n-        boost::this_thread::interruption_point();\n+        interruption_point(net_interrupted);\n \n         // Add seed nodes if DNS seeds are all down (an infrastructure attack?).\n         if (addrman.size() == 0 && (GetTime() - nStart > 60)) {\n@@ -1868,7 +1868,7 @@ bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSem\n     //\n     // Initiate outbound network connection\n     //\n-    boost::this_thread::interruption_point();\n+    interruption_point(net_interrupted);\n     if (!pszDest) {\n         if (IsLocal(addrConnect) ||\n             FindNode((CNetAddr)addrConnect) || CNode::IsBanned(addrConnect) ||\n@@ -1878,7 +1878,7 @@ bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSem\n         return false;\n \n     CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure);\n-    boost::this_thread::interruption_point();\n+    interruption_point(net_interrupted);\n \n     if (!pnode)\n         return false;\n@@ -1934,15 +1934,15 @@ void ThreadMessageHandler()\n                     }\n                 }\n             }\n-            boost::this_thread::interruption_point();\n+            interruption_point(net_interrupted);\n \n             // Send messages\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n                     GetNodeSignals().SendMessages(pnode);\n             }\n-            boost::this_thread::interruption_point();\n+            interruption_point(net_interrupted);\n         }\n \n         {"
      },
      {
        "sha": "ace5facb1aefa46a22f337ffa840880b3269d1aa",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -41,10 +41,16 @@ static proxyType nameProxy;\n static CCriticalSection cs_proxyInfos;\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n bool fNameLookup = DEFAULT_NAME_LOOKUP;\n+static std::atomic<bool> netbase_interrupted(false);\n \n // Need ample time for negotiation for very slow proxies such as Tor (milliseconds)\n static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;\n \n+void InterruptNetbase()\n+{\n+    netbase_interrupted = true;\n+}\n+\n enum Network ParseNetwork(std::string net) {\n     boost::to_lower(net);\n     if (net == \"ipv4\") return NET_IPV4;\n@@ -144,7 +150,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n         // 2 seconds looks fine in our situation.\n         struct timespec ts = { 2, 0 };\n         gai_suspend(&query, 1, &ts);\n-        boost::this_thread::interruption_point();\n+        interruption_point(netbase_interrupted);\n \n         nErr = gai_error(query);\n         if (0 == nErr)\n@@ -292,7 +298,7 @@ bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSock\n                 return false;\n             }\n         }\n-        boost::this_thread::interruption_point();\n+        interruption_point(netbase_interrupted);\n         curTime = GetTimeMillis();\n     }\n     return len == 0;"
      },
      {
        "sha": "a97181983fc6a80a6dd5574ace968ee5f875da0b",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -63,5 +63,6 @@ bool SetSocketNonBlocking(SOCKET& hSocket, bool fNonBlocking);\n  * Convert milliseconds to a struct timeval for e.g. select.\n  */\n struct timeval MillisToTimeval(int64_t nTimeout);\n+void InterruptNetbase();\n \n #endif // BITCOIN_NETBASE_H"
      },
      {
        "sha": "f0ec0821bb6f2976db158ef6c315122b856e1515",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -643,7 +643,8 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     ss << stats.hashBlock;\n     CAmount nTotalAmount = 0;\n     while (pcursor->Valid()) {\n-        boost::this_thread::interruption_point();\n+        if(!IsRPCRunning())\n+            return error(\"%s: rpc server shutdown\", __func__);\n         uint256 key;\n         CCoins coins;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coins)) {"
      },
      {
        "sha": "54c462f39966c11602fd26f5131d4c8b2032b783",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -69,7 +69,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     return db.WriteBatch(batch);\n }\n \n-CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe), interrupt(false) {\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n@@ -179,7 +179,8 @@ bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {\n-        boost::this_thread::interruption_point();\n+        if(interrupt)\n+            return error(\"LoadBlockIndex() : interrupted\");\n         std::pair<char, uint256> key;\n         if (pcursor->GetKey(key) && key.first == DB_BLOCK_INDEX) {\n             CDiskBlockIndex diskindex;\n@@ -213,3 +214,8 @@ bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256\n \n     return true;\n }\n+\n+void CBlockTreeDB::InterruptLoadBlockIndexGuts()\n+{\n+    interrupt = true;\n+}"
      },
      {
        "sha": "b6acbe0e1a27c789561be33e13b33c778b4b9fe9",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -106,6 +106,7 @@ class CBlockTreeDB : public CDBWrapper\n private:\n     CBlockTreeDB(const CBlockTreeDB&);\n     void operator=(const CBlockTreeDB&);\n+    std::atomic<bool> interrupt;\n public:\n     bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n     bool ReadBlockFileInfo(int nFile, CBlockFileInfo &fileinfo);\n@@ -117,6 +118,7 @@ class CBlockTreeDB : public CDBWrapper\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n     bool LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n+    void InterruptLoadBlockIndexGuts();\n };\n \n #endif // BITCOIN_TXDB_H"
      },
      {
        "sha": "6d6c444642cacccd0e01177deb6c954172092620",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -195,6 +195,15 @@ int GetNumCores();\n \n void RenameThread(const char* name);\n \n+class thread_interrupted\n+{};\n+\n+inline void interruption_point(bool interrupt)\n+{\n+    if(interrupt)\n+        throw thread_interrupted();\n+}\n+\n /**\n  * .. and a wrapper that just calls func once\n  */\n@@ -213,6 +222,9 @@ template <typename Callable> void TraceThread(const char* name,  Callable func)\n         LogPrintf(\"%s thread interrupt\\n\", name);\n         throw;\n     }\n+    catch (const thread_interrupted&) {\n+        LogPrintf(\"%s thread interrupt\\n\", name);\n+    }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, name);\n         throw;"
      },
      {
        "sha": "a2bed25c3c6e3887b7be5318991907f0eefaa7c7",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -52,6 +52,7 @@ void CDBEnv::Reset()\n     dbenv = new DbEnv(DB_CXX_NO_EXCEPTIONS);\n     fDbEnvInit = false;\n     fMockDb = false;\n+    interrupt = false;\n }\n \n CDBEnv::CDBEnv() : dbenv(NULL)\n@@ -71,12 +72,17 @@ void CDBEnv::Close()\n     EnvShutdown();\n }\n \n+void CDBEnv::Interrupt()\n+{\n+    interrupt = true;\n+}\n+\n bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n {\n     if (fDbEnvInit)\n         return true;\n \n-    boost::this_thread::interruption_point();\n+    interruption_point(interrupt);\n \n     strPath = pathIn.string();\n     boost::filesystem::path pathLogDir = pathIn / \"database\";\n@@ -121,7 +127,7 @@ void CDBEnv::MakeMock()\n     if (fDbEnvInit)\n         throw runtime_error(\"CDBEnv::MakeMock: Already initialized\");\n \n-    boost::this_thread::interruption_point();\n+    interruption_point(interrupt);\n \n     LogPrint(\"db\", \"CDBEnv::MakeMock\\n\");\n "
      },
      {
        "sha": "cb4f003677ef95ae53280c83a29df67988b6eea4",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -15,6 +15,7 @@\n #include <map>\n #include <string>\n #include <vector>\n+#include <atomic>\n \n #include <boost/filesystem/path.hpp>\n \n@@ -35,7 +36,7 @@ class CDBEnv\n     std::string strPath;\n \n     void EnvShutdown();\n-\n+    std::atomic<bool> interrupt;\n public:\n     mutable CCriticalSection cs_db;\n     DbEnv *dbenv;\n@@ -85,6 +86,7 @@ class CDBEnv\n             return NULL;\n         return ptxn;\n     }\n+    void Interrupt();\n };\n \n extern CDBEnv bitdb;"
      },
      {
        "sha": "cf1d497dde8dd8f22ec0c5d54e8a421abc8acad1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -467,6 +467,11 @@ bool CWallet::Verify()\n     return true;\n }\n \n+void CWallet::Interrupt()\n+{\n+    bitdb.Interrupt();\n+}\n+\n void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n {\n     // We want all the wallet transactions in range to have the same metadata as"
      },
      {
        "sha": "b038d8184018c31bb04852e36e4066e6f66fac7b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -923,6 +923,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     \n     /* Set the current HD master key (will reset the chain child index counters) */\n     bool SetHDMasterKey(const CPubKey& key);\n+\n+    void Interrupt();\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "0026e12ce7d971a28b6386c8f570e3d230bcaca2",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -679,6 +679,8 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     catch (const boost::thread_interrupted&) {\n         throw;\n     }\n+    catch (const thread_interrupted&) {\n+    }\n     catch (...) {\n         result = DB_CORRUPT;\n     }\n@@ -778,6 +780,8 @@ DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vec\n     catch (const boost::thread_interrupted&) {\n         throw;\n     }\n+    catch (const thread_interrupted&) {\n+    }\n     catch (...) {\n         result = DB_CORRUPT;\n     }\n@@ -844,8 +848,10 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, vector<CWalletTx>& vWtx)\n     return DB_LOAD_OK;\n }\n \n+static std::atomic<bool> interrupt_flush_wallet;\n void ThreadFlushWalletDB(const string& strFile)\n {\n+    interrupt_flush_wallet = false;\n     // Make this thread recognisable as the wallet flushing thread\n     RenameThread(\"bitcoin-wallet\");\n \n@@ -885,7 +891,7 @@ void ThreadFlushWalletDB(const string& strFile)\n \n                 if (nRefCount == 0)\n                 {\n-                    boost::this_thread::interruption_point();\n+                    interruption_point(interrupt_flush_wallet);\n                     map<string, int>::iterator _mi = bitdb.mapFileUseCount.find(strFile);\n                     if (_mi != bitdb.mapFileUseCount.end())\n                     {\n@@ -906,6 +912,11 @@ void ThreadFlushWalletDB(const string& strFile)\n     }\n }\n \n+void InterruptFlushWalletDB()\n+{\n+    interrupt_flush_wallet = true;\n+}\n+\n //\n // Try to (very carefully!) recover wallet file if there is a problem.\n //"
      },
      {
        "sha": "37ad5153af4b935b951fc0f9163e2e814e77fc6f",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f71715ad9804adf91ff04ce835bae9eec50b4d/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "patch": "@@ -186,5 +186,6 @@ class CWalletDB : public CDB\n };\n \n void ThreadFlushWalletDB(const std::string& strFile);\n+void InterruptFlushWalletDB();\n \n #endif // BITCOIN_WALLET_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGNiNTViMjA4NmFiOTM5NDFkN2Y5ZWY5NjU5MGMzYmI0YzJmN2Uz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-26T22:18:26Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:47Z"
      },
      "message": "threads: use std::thread for net threads\n\nAlso, drop threadGroup for them and treat them individually",
      "tree": {
        "sha": "a8a797a9975999a28b7f04e1dfda1bf7f544a533",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8a797a9975999a28b7f04e1dfda1bf7f544a533"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61f71715ad9804adf91ff04ce835bae9eec50b4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61f71715ad9804adf91ff04ce835bae9eec50b4d"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 22,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5b5f206b52c301a2a8e62596e9c030a7fc434e0a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3",
        "patch": "@@ -1517,7 +1517,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n         StartTorControl(threadGroup, scheduler);\n \n-    StartNode(threadGroup, scheduler);\n+    StartNode(scheduler);\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "a7db3015ba3caff8bc3b39ba64e8ab6810dd9423",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3",
        "patch": "@@ -125,6 +125,10 @@ static std::mutex cs_net_interrupt;\n static std::atomic<bool> net_interrupted(false);\n \n std::thread dns_address_seed_thread;\n+std::thread socket_handler_thread;\n+std::thread open_added_connections_thread;\n+std::thread open_connections_thread;\n+std::thread message_handler_thread;\n \n void AddOneShot(const std::string& strDest)\n {\n@@ -2059,7 +2063,7 @@ bool BindListenPort(const CService &addrBind, std::string& strError, bool fWhite\n     return true;\n }\n \n-void static Discover(boost::thread_group& threadGroup)\n+void static Discover()\n {\n     if (!fDiscover)\n         return;\n@@ -2110,7 +2114,7 @@ void static Discover(boost::thread_group& threadGroup)\n #endif\n }\n \n-void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n+void StartNode(CScheduler& scheduler)\n {\n     net_interrupted = false;\n     uiInterface.InitMessage(_(\"Loading addresses...\"));\n@@ -2161,7 +2165,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n     }\n \n-    Discover(threadGroup);\n+    Discover();\n \n     //\n     // Start threads\n@@ -2176,16 +2180,16 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n     MapPort(GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n \n     // Send and receive from sockets, accept connections\n-    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"net\", &ThreadSocketHandler));\n+    socket_handler_thread = std::thread(std::bind(&TraceThread<void (*)()>, \"net\", &ThreadSocketHandler));\n \n     // Initiate outbound connections from -addnode\n-    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"addcon\", &ThreadOpenAddedConnections));\n+    open_added_connections_thread = std::thread(std::bind(&TraceThread<void (*)()>, \"addcon\", &ThreadOpenAddedConnections));\n \n     // Initiate outbound connections\n-    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"opencon\", &ThreadOpenConnections));\n+    open_connections_thread = std::thread(std::bind(&TraceThread<void (*)()>, \"opencon\", &ThreadOpenConnections));\n \n     // Process messages\n-    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n+    message_handler_thread = std::thread(std::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n \n     // Dump network addresses\n     scheduler.scheduleEvery(&DumpData, DUMP_ADDRESSES_INTERVAL);\n@@ -2195,6 +2199,7 @@ void InterruptNode()\n {\n     net_interrupted = true;\n     net_interrupt_cond.notify_all();\n+    messageHandlerCondition.notify_all();\n }\n \n bool StopNode()\n@@ -2214,6 +2219,14 @@ bool StopNode()\n     if(dns_address_seed_thread.joinable())\n         dns_address_seed_thread.join();\n \n+    if(socket_handler_thread.joinable())\n+        socket_handler_thread.join();\n+    if(open_added_connections_thread.joinable())\n+        open_added_connections_thread.join();\n+    if(open_connections_thread.joinable())\n+        open_connections_thread.join();\n+    if(message_handler_thread.joinable())\n+        message_handler_thread.join();\n     return true;\n }\n "
      },
      {
        "sha": "693c33c6f65229675f9ed823acfc79bdfeeba4ad",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3",
        "patch": "@@ -97,7 +97,7 @@ void InterruptMapPort();\n void StopMapPort();\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n-void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler);\n+void StartNode(CScheduler& scheduler);\n bool StopNode();\n void InterruptNode();\n "
      }
    ]
  },
  {
    "sha": "d20fe536aae39d5a7b184918e0b12f4d972ba2a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjBmZTUzNmFhZTM5ZDVhN2IxODQ5MThlMGIxMmY0ZDk3MmJhMmE1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-30T22:48:11Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: add interruptible sleep for net threads",
      "tree": {
        "sha": "a2272dd66611a898682ef30b7958d3b26e0ee511",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2272dd66611a898682ef30b7958d3b26e0ee511"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d20fe536aae39d5a7b184918e0b12f4d972ba2a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d20fe536aae39d5a7b184918e0b12f4d972ba2a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d20fe536aae39d5a7b184918e0b12f4d972ba2a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d20fe536aae39d5a7b184918e0b12f4d972ba2a5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54cb55b2086ab93941d7f9ef96590c3bb4c2f7e3"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 16,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f75807346b15a6d34c63fea652a064a9c73b7112",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d20fe536aae39d5a7b184918e0b12f4d972ba2a5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d20fe536aae39d5a7b184918e0b12f4d972ba2a5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d20fe536aae39d5a7b184918e0b12f4d972ba2a5",
        "patch": "@@ -130,6 +130,16 @@ std::thread open_added_connections_thread;\n std::thread open_connections_thread;\n std::thread message_handler_thread;\n \n+static void InterruptibleSleep(uint64_t n)\n+{\n+    bool ret = false;\n+    {\n+        std::unique_lock<std::mutex> lock(cs_net_interrupt);\n+        ret = net_interrupt_cond.wait_for(lock, std::chrono::milliseconds(n), []()->bool{return net_interrupted; });\n+    }\n+    interruption_point(ret);\n+};\n+\n void AddOneShot(const std::string& strDest)\n {\n     LOCK(cs_vOneShots);\n@@ -1249,7 +1259,7 @@ void ThreadSocketHandler()\n             }\n             FD_ZERO(&fdsetSend);\n             FD_ZERO(&fdsetError);\n-            MilliSleep(timeout.tv_usec/1000);\n+            InterruptibleSleep(timeout.tv_usec/1000);\n         }\n \n         //\n@@ -1659,10 +1669,10 @@ void ThreadOpenConnections()\n                 OpenNetworkConnection(addr, false, NULL, strAddr.c_str());\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n-                    MilliSleep(500);\n+                    InterruptibleSleep(500);\n                 }\n             }\n-            MilliSleep(500);\n+            InterruptibleSleep(500);\n         }\n     }\n \n@@ -1675,7 +1685,7 @@ void ThreadOpenConnections()\n     {\n         ProcessOneShot();\n \n-        MilliSleep(500);\n+        InterruptibleSleep(500);\n \n         CSemaphoreGrant grant(*semOutbound);\n         interruption_point(net_interrupted);\n@@ -1858,11 +1868,11 @@ void ThreadOpenAddedConnections()\n                 // OpenNetworkConnection can detect existing connections to that IP/port.\n                 CService service(LookupNumeric(info.strAddedNode.c_str(), Params().GetDefaultPort()));\n                 OpenNetworkConnection(CAddress(service, NODE_NONE), false, &grant, info.strAddedNode.c_str(), false);\n-                MilliSleep(500);\n+                InterruptibleSleep(500);\n             }\n         }\n \n-        MilliSleep(120000); // Retry every 2 minutes\n+        InterruptibleSleep(120000); // Retry every 2 minutes\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "3f31fe5dff631abc9bfa179a7e13e442ff3b7266",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjMxZmU1ZGZmNjMxYWJjOWJmYTE3OWE3ZTEzZTQ0MmZmM2I3MjY2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-31T00:59:23Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: turn MilliSleep into a wrapper around std::this_thread::sleep_for",
      "tree": {
        "sha": "bc102bcfee57fdb956db1fa25aea7d2b6eb307f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc102bcfee57fdb956db1fa25aea7d2b6eb307f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f31fe5dff631abc9bfa179a7e13e442ff3b7266",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f31fe5dff631abc9bfa179a7e13e442ff3b7266",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f31fe5dff631abc9bfa179a7e13e442ff3b7266",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f31fe5dff631abc9bfa179a7e13e442ff3b7266/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d20fe536aae39d5a7b184918e0b12f4d972ba2a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d20fe536aae39d5a7b184918e0b12f4d972ba2a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d20fe536aae39d5a7b184918e0b12f4d972ba2a5"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 4,
      "deletions": 14
    },
    "files": [
      {
        "sha": "5cf1a4dd2f0fda2eb367137b783283c9c7db1760",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f31fe5dff631abc9bfa179a7e13e442ff3b7266/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f31fe5dff631abc9bfa179a7e13e442ff3b7266/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=3f31fe5dff631abc9bfa179a7e13e442ff3b7266",
        "patch": "@@ -12,6 +12,9 @@\n #include <boost/date_time/posix_time/posix_time.hpp>\n #include <boost/thread.hpp>\n \n+#include <thread>\n+#include <chrono>\n+\n using namespace std;\n \n static int64_t nMockTime = 0; //!< For unit testing\n@@ -56,20 +59,7 @@ int64_t GetLogTimeMicros()\n \n void MilliSleep(int64_t n)\n {\n-\n-/**\n- * Boost's sleep_for was uninterruptable when backed by nanosleep from 1.50\n- * until fixed in 1.52. Use the deprecated sleep method for the broken case.\n- * See: https://svn.boost.org/trac/boost/ticket/7238\n- */\n-#if defined(HAVE_WORKING_BOOST_SLEEP_FOR)\n-    boost::this_thread::sleep_for(boost::chrono::milliseconds(n));\n-#elif defined(HAVE_WORKING_BOOST_SLEEP)\n-    boost::this_thread::sleep(boost::posix_time::milliseconds(n));\n-#else\n-//should never get here\n-#error missing boost sleep implementation\n-#endif\n+    std::this_thread::sleep_for(std::chrono::milliseconds(n));\n }\n \n std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)"
      }
    ]
  },
  {
    "sha": "d798f587332d0e71a90bbda8cd49173eda45d263",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzk4ZjU4NzMzMmQwZTcxYTkwYmJkYThjZDQ5MTczZWRhNDVkMjYz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-26T22:22:00Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: use std::thread for torcontrol",
      "tree": {
        "sha": "dee210ae8f57e8f97e46599856dd0bc878597d78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dee210ae8f57e8f97e46599856dd0bc878597d78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d798f587332d0e71a90bbda8cd49173eda45d263",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d798f587332d0e71a90bbda8cd49173eda45d263",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d798f587332d0e71a90bbda8cd49173eda45d263",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d798f587332d0e71a90bbda8cd49173eda45d263/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f31fe5dff631abc9bfa179a7e13e442ff3b7266",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f31fe5dff631abc9bfa179a7e13e442ff3b7266",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f31fe5dff631abc9bfa179a7e13e442ff3b7266"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e3c2d33cba14735e1ffabada0b0376a743ba62ba",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d798f587332d0e71a90bbda8cd49173eda45d263/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d798f587332d0e71a90bbda8cd49173eda45d263/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d798f587332d0e71a90bbda8cd49173eda45d263",
        "patch": "@@ -1515,7 +1515,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"mapBlockIndex.size() = %u\\n\",   mapBlockIndex.size());\n     LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());\n     if (GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n-        StartTorControl(threadGroup, scheduler);\n+        StartTorControl();\n \n     StartNode(scheduler);\n "
      },
      {
        "sha": "ba087414a31a77a7c47bd8b643064654ffe4b1dc",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d798f587332d0e71a90bbda8cd49173eda45d263/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d798f587332d0e71a90bbda8cd49173eda45d263/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=d798f587332d0e71a90bbda8cd49173eda45d263",
        "patch": "@@ -29,6 +29,8 @@\n #include <event2/event.h>\n #include <event2/thread.h>\n \n+#include <thread>\n+\n /** Default control port */\n const std::string DEFAULT_TOR_CONTROL = \"127.0.0.1:9051\";\n /** Tor cookie size (from control-spec.txt) */\n@@ -663,7 +665,7 @@ void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n \n /****** Thread ********/\n struct event_base *base;\n-boost::thread torControlThread;\n+std::thread torControlThread;\n \n static void TorControlThread()\n {\n@@ -672,7 +674,7 @@ static void TorControlThread()\n     event_base_dispatch(base);\n }\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n+void StartTorControl()\n {\n     assert(!base);\n #ifdef WIN32\n@@ -686,7 +688,7 @@ void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return;\n     }\n \n-    torControlThread = boost::thread(boost::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n+    torControlThread = std::thread(std::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n }\n \n void InterruptTorControl()"
      },
      {
        "sha": "a47ab22d1a9fb5d68e9b77c5a9ddcdb9c8b42146",
        "filename": "src/torcontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d798f587332d0e71a90bbda8cd49173eda45d263/src/torcontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d798f587332d0e71a90bbda8cd49173eda45d263/src/torcontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.h?ref=d798f587332d0e71a90bbda8cd49173eda45d263",
        "patch": "@@ -13,7 +13,7 @@\n extern const std::string DEFAULT_TOR_CONTROL;\n static const bool DEFAULT_LISTEN_ONION = true;\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler);\n+void StartTorControl();\n void InterruptTorControl();\n void StopTorControl();\n "
      }
    ]
  },
  {
    "sha": "eb126ca39930036aa3a09befc9bda693542a7f1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjEyNmNhMzk5MzAwMzZhYTNhMDliZWZjOWJkYTY5MzU0MmE3ZjFk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-26T23:01:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: make script check threads interruptible",
      "tree": {
        "sha": "c7a39eeb55e1a3c8d95f506fd8cccfa2ff0d5b8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7a39eeb55e1a3c8d95f506fd8cccfa2ff0d5b8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb126ca39930036aa3a09befc9bda693542a7f1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb126ca39930036aa3a09befc9bda693542a7f1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb126ca39930036aa3a09befc9bda693542a7f1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb126ca39930036aa3a09befc9bda693542a7f1d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d798f587332d0e71a90bbda8cd49173eda45d263",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d798f587332d0e71a90bbda8cd49173eda45d263",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d798f587332d0e71a90bbda8cd49173eda45d263"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 49,
      "deletions": 21
    },
    "files": [
      {
        "sha": "2d8e2479f4d11b59d5f2f7fba168199ea65a6b0f",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 26,
        "deletions": 15,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb126ca39930036aa3a09befc9bda693542a7f1d/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb126ca39930036aa3a09befc9bda693542a7f1d/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=eb126ca39930036aa3a09befc9bda693542a7f1d",
        "patch": "@@ -9,9 +9,8 @@\n #include <vector>\n \n #include <boost/foreach.hpp>\n-#include <boost/thread/condition_variable.hpp>\n-#include <boost/thread/locks.hpp>\n-#include <boost/thread/mutex.hpp>\n+#include <condition_variable>\n+#include <mutex>\n \n template <typename T>\n class CCheckQueueControl;\n@@ -31,13 +30,13 @@ class CCheckQueue\n {\n private:\n     //! Mutex to protect the inner state\n-    boost::mutex mutex;\n+    std::mutex mutex;\n \n     //! Worker threads block on this when out of work\n-    boost::condition_variable condWorker;\n+    std::condition_variable condWorker;\n \n     //! Master thread blocks on this when out of work\n-    boost::condition_variable condMaster;\n+    std::condition_variable condMaster;\n \n     //! The queue of elements to be processed.\n     //! As the order of booleans doesn't matter, it is used as a LIFO (stack)\n@@ -68,14 +67,14 @@ class CCheckQueue\n     /** Internal function that does bulk of the verification work. */\n     bool Loop(bool fMaster = false)\n     {\n-        boost::condition_variable& cond = fMaster ? condMaster : condWorker;\n+        std::condition_variable& cond = fMaster ? condMaster : condWorker;\n         std::vector<T> vChecks;\n         vChecks.reserve(nBatchSize);\n         unsigned int nNow = 0;\n         bool fOk = true;\n         do {\n             {\n-                boost::unique_lock<boost::mutex> lock(mutex);\n+                std::unique_lock<std::mutex> lock(mutex);\n                 // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n                 if (nNow) {\n                     fAllOk &= fOk;\n@@ -99,7 +98,7 @@ class CCheckQueue\n                         return fRet;\n                     }\n                     nIdle++;\n-                    cond.wait(lock); // wait\n+                    cond.wait(lock, [this, fMaster]{return !queue.empty() || ((fMaster || fQuit) && nTodo == 0); }); // wait\n                     nIdle--;\n                 }\n                 // Decide how many work units to process now.\n@@ -136,6 +135,16 @@ class CCheckQueue\n         Loop();\n     }\n \n+    void Interrupt()\n+    {\n+        {\n+            std::lock_guard<std::mutex> lock(mutex);\n+            fQuit = true;\n+        }\n+        condWorker.notify_all();\n+        condMaster.notify_all();\n+    }\n+\n     //! Wait until execution finishes, and return whether all evaluations were successful.\n     bool Wait()\n     {\n@@ -145,12 +154,14 @@ class CCheckQueue\n     //! Add a batch of checks to the queue\n     void Add(std::vector<T>& vChecks)\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n-        BOOST_FOREACH (T& check, vChecks) {\n-            queue.push_back(T());\n-            check.swap(queue.back());\n+        {\n+            std::lock_guard<std::mutex> lock(mutex);\n+            BOOST_FOREACH (T& check, vChecks) {\n+                queue.push_back(T());\n+                check.swap(queue.back());\n+            }\n+            nTodo += vChecks.size();\n         }\n-        nTodo += vChecks.size();\n         if (vChecks.size() == 1)\n             condWorker.notify_one();\n         else if (vChecks.size() > 1)\n@@ -163,7 +174,7 @@ class CCheckQueue\n \n     bool IsIdle()\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n+        std::lock_guard<std::mutex> lock(mutex);\n         return (nTotal == nIdle && nTodo == 0 && fAllOk == true);\n     }\n "
      },
      {
        "sha": "69d97621467f85877df412fbcdbcc349ca75d03b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb126ca39930036aa3a09befc9bda693542a7f1d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb126ca39930036aa3a09befc9bda693542a7f1d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=eb126ca39930036aa3a09befc9bda693542a7f1d",
        "patch": "@@ -166,6 +166,7 @@ static CCoinsViewDB *pcoinsdbview = NULL;\n static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n static std::thread scheduler_thread;\n+static std::vector<std::thread> script_check_threads;\n \n void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n@@ -178,6 +179,7 @@ void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler)\n     scheduler.interrupt(false);\n     if(pblocktree)\n        pblocktree->InterruptLoadBlockIndexGuts();\n+    InterruptThreadScriptCheck();\n     InterruptNetbase();\n     InterruptNode();\n     threadGroup.interrupt_all();\n@@ -218,6 +220,9 @@ void Shutdown(CScheduler& scheduler)\n     scheduler.stop();\n     if(scheduler_thread.joinable())\n         scheduler_thread.join();\n+    for(auto&& thread : script_check_threads)\n+        thread.join();\n+    script_check_threads.clear();\n \n     UnregisterNodeSignals(GetNodeSignals());\n \n@@ -1090,8 +1095,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n     if (nScriptCheckThreads) {\n+        script_check_threads.reserve(nScriptCheckThreads-1);\n         for (int i=0; i<nScriptCheckThreads-1; i++)\n-            threadGroup.create_thread(&ThreadScriptCheck);\n+            script_check_threads.emplace_back(&ThreadScriptCheck);\n     }\n \n     // Start the lightweight task scheduler thread"
      },
      {
        "sha": "28d1d7c5d3a8dcc2548c3e8246a4ed12f838cbaf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb126ca39930036aa3a09befc9bda693542a7f1d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb126ca39930036aa3a09befc9bda693542a7f1d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eb126ca39930036aa3a09befc9bda693542a7f1d",
        "patch": "@@ -2243,6 +2243,11 @@ void ThreadScriptCheck() {\n     scriptcheckqueue.Thread();\n }\n \n+void InterruptThreadScriptCheck()\n+{\n+    scriptcheckqueue.Interrupt();\n+};\n+\n // Protected by cs_main\n VersionBitsCache versionbitscache;\n "
      },
      {
        "sha": "a2a4c889e305a79925112a69df03d2318aed78d3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb126ca39930036aa3a09befc9bda693542a7f1d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb126ca39930036aa3a09befc9bda693542a7f1d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=eb126ca39930036aa3a09befc9bda693542a7f1d",
        "patch": "@@ -249,6 +249,8 @@ bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n+/** Interrupt all script checking threads once they're out of work */\n+void InterruptThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Format a string that describes several potential problems detected by the core."
      },
      {
        "sha": "e31467b48a29491d48c633d909d2b0c136a161ec",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb126ca39930036aa3a09befc9bda693542a7f1d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb126ca39930036aa3a09befc9bda693542a7f1d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=eb126ca39930036aa3a09befc9bda693542a7f1d",
        "patch": "@@ -66,16 +66,19 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n             BOOST_CHECK(ok);\n         }\n         nScriptCheckThreads = 3;\n-        for (int i=0; i < nScriptCheckThreads-1; i++)\n-            threadGroup.create_thread(&ThreadScriptCheck);\n+        script_check_threads.reserve(nScriptCheckThreads-1);\n+        for (int i=0; i<nScriptCheckThreads-1; i++)\n+            script_check_threads.emplace_back(&ThreadScriptCheck);\n         RegisterNodeSignals(GetNodeSignals());\n }\n \n TestingSetup::~TestingSetup()\n {\n         UnregisterNodeSignals(GetNodeSignals());\n-        threadGroup.interrupt_all();\n-        threadGroup.join_all();\n+        InterruptThreadScriptCheck();\n+        for(auto&& thread : script_check_threads)\n+            thread.join();\n+        script_check_threads.clear();\n         UnloadBlockIndex();\n         delete pcoinsTip;\n         delete pcoinsdbview;"
      },
      {
        "sha": "34e47229086d756f2495b2cc0b4e5e9a6b2a7eb2",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb126ca39930036aa3a09befc9bda693542a7f1d/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb126ca39930036aa3a09befc9bda693542a7f1d/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=eb126ca39930036aa3a09befc9bda693542a7f1d",
        "patch": "@@ -13,6 +13,7 @@\n \n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n+#include <thread>\n \n /** Basic testing setup.\n  * This just configures logging and chain parameters.\n@@ -30,7 +31,7 @@ struct BasicTestingSetup {\n struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;\n     boost::filesystem::path pathTemp;\n-    boost::thread_group threadGroup;\n+    std::vector<std::thread> script_check_threads;\n \n     TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();"
      }
    ]
  },
  {
    "sha": "8e1347a89498390d6401998f6bff12f306f80eaf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTEzNDdhODk0OTgzOTBkNjQwMTk5OGY2YmZmMTJmMzA2ZjgwZWFm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-26T23:12:10Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: use std::thread for threadflushing",
      "tree": {
        "sha": "724d206c38f9fbc4c3854d36b9dc4bbc09416d2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/724d206c38f9fbc4c3854d36b9dc4bbc09416d2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e1347a89498390d6401998f6bff12f306f80eaf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e1347a89498390d6401998f6bff12f306f80eaf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e1347a89498390d6401998f6bff12f306f80eaf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e1347a89498390d6401998f6bff12f306f80eaf/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb126ca39930036aa3a09befc9bda693542a7f1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb126ca39930036aa3a09befc9bda693542a7f1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb126ca39930036aa3a09befc9bda693542a7f1d"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1658d728443f9b0380799992472357eff3666aad",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e1347a89498390d6401998f6bff12f306f80eaf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e1347a89498390d6401998f6bff12f306f80eaf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8e1347a89498390d6401998f6bff12f306f80eaf",
        "patch": "@@ -167,6 +167,9 @@ static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n static std::thread scheduler_thread;\n static std::vector<std::thread> script_check_threads;\n+#ifdef ENABLE_WALLET\n+static std::thread flush_wallet_thread;\n+#endif\n \n void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n@@ -223,6 +226,10 @@ void Shutdown(CScheduler& scheduler)\n     for(auto&& thread : script_check_threads)\n         thread.join();\n     script_check_threads.clear();\n+#ifdef ENABLE_WALLET\n+    if (flush_wallet_thread.joinable())\n+        flush_wallet_thread.join();\n+#endif\n \n     UnregisterNodeSignals(GetNodeSignals());\n \n@@ -1533,7 +1540,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         // Run a thread to flush wallet periodically\n-        threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(pwalletMain->strWalletFile)));\n+        auto walletbind = std::bind(ThreadFlushWalletDB, std::ref(pwalletMain->strWalletFile));\n+        flush_wallet_thread = std::thread(&TraceThread<decltype(walletbind)>, \"flushwallet\", std::move(walletbind));\n     }\n #endif\n "
      }
    ]
  },
  {
    "sha": "1fa94500007e0947800781ac8b0ade8bce8af890",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmE5NDUwMDAwN2UwOTQ3ODAwNzgxYWM4YjBhZGU4YmNlOGFmODkw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-26T23:26:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: use a std::thread for importing",
      "tree": {
        "sha": "0efff2f2435dd00cd0eb45f67a732c2c6d4110af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0efff2f2435dd00cd0eb45f67a732c2c6d4110af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fa94500007e0947800781ac8b0ade8bce8af890",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa94500007e0947800781ac8b0ade8bce8af890",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa94500007e0947800781ac8b0ade8bce8af890",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa94500007e0947800781ac8b0ade8bce8af890/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e1347a89498390d6401998f6bff12f306f80eaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e1347a89498390d6401998f6bff12f306f80eaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e1347a89498390d6401998f6bff12f306f80eaf"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bf76d1f1a836f8e2512afbb34f29f08fa2698b9b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fa94500007e0947800781ac8b0ade8bce8af890/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fa94500007e0947800781ac8b0ade8bce8af890/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1fa94500007e0947800781ac8b0ade8bce8af890",
        "patch": "@@ -167,6 +167,7 @@ static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n static std::thread scheduler_thread;\n static std::vector<std::thread> script_check_threads;\n+static std::thread import_thread;\n #ifdef ENABLE_WALLET\n static std::thread flush_wallet_thread;\n #endif\n@@ -230,6 +231,8 @@ void Shutdown(CScheduler& scheduler)\n     if (flush_wallet_thread.joinable())\n         flush_wallet_thread.join();\n #endif\n+    if (import_thread.joinable())\n+        import_thread.join();\n \n     UnregisterNodeSignals(GetNodeSignals());\n \n@@ -1511,7 +1514,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             vImportFiles.push_back(strFile);\n     }\n \n-    threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n+    auto import_bind = std::bind(ThreadImport, vImportFiles);\n+    import_thread = std::thread(&TraceThread<decltype(import_bind)>, \"bitcoin-import\", std::move(import_bind));\n \n     // Wait for genesis block to be processed\n     {"
      }
    ]
  },
  {
    "sha": "7b757d561e2643d72faf554087060b716e01e7e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Yjc1N2Q1NjFlMjY0M2Q3MmZhZjU1NDA4NzA2MGI3MTZlMDFlN2Uy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-26T23:36:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: make the genesis block wait interruptible",
      "tree": {
        "sha": "2e8b09eabb96ba6d779677221782a7caff4412d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e8b09eabb96ba6d779677221782a7caff4412d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b757d561e2643d72faf554087060b716e01e7e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b757d561e2643d72faf554087060b716e01e7e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b757d561e2643d72faf554087060b716e01e7e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b757d561e2643d72faf554087060b716e01e7e2/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fa94500007e0947800781ac8b0ade8bce8af890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa94500007e0947800781ac8b0ade8bce8af890",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa94500007e0947800781ac8b0ade8bce8af890"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d994094db0c36934bbe609f29a10da92e8891614",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b757d561e2643d72faf554087060b716e01e7e2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b757d561e2643d72faf554087060b716e01e7e2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7b757d561e2643d72faf554087060b716e01e7e2",
        "patch": "@@ -172,6 +172,10 @@ static std::thread import_thread;\n static std::thread flush_wallet_thread;\n #endif\n \n+static bool fHaveGenesis = false;\n+static boost::mutex cs_GenesisWait;\n+static CConditionVariable condvar_GenesisWait;\n+\n void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n     InterruptHTTPServer();\n@@ -193,6 +197,7 @@ void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler)\n         InterruptFlushWalletDB();\n     }\n #endif\n+    condvar_GenesisWait.notify_all();\n }\n \n void Shutdown(CScheduler& scheduler)\n@@ -547,10 +552,6 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n     boost::thread t(runCommand, strCmd); // thread runs free\n }\n \n-static bool fHaveGenesis = false;\n-static boost::mutex cs_GenesisWait;\n-static CConditionVariable condvar_GenesisWait;\n-\n static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)\n {\n     if (pBlockIndex != NULL) {\n@@ -1520,8 +1521,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Wait for genesis block to be processed\n     {\n         boost::unique_lock<boost::mutex> lock(cs_GenesisWait);\n-        while (!fHaveGenesis) {\n+        while (!fHaveGenesis && !fRequestShutdown) {\n             condvar_GenesisWait.wait(lock);\n+            if (fRequestShutdown)\n+            {\n+                LogPrintf(\"Shutdown requested. Exiting.\\n\");\n+                return false;\n+            }\n         }\n         uiInterface.NotifyBlockTip.disconnect(BlockNotifyGenesisWait);\n     }"
      }
    ]
  },
  {
    "sha": "a15b49c78b100f33fa8041bef58f00993ca461a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTViNDljNzhiMTAwZjMzZmE4MDQxYmVmNThmMDA5OTNjYTQ2MWEz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-29T16:28:30Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: convert free-running threads to std::thread",
      "tree": {
        "sha": "ba70a9882618bf63c829b9788dff6d5eb946639e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba70a9882618bf63c829b9788dff6d5eb946639e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a15b49c78b100f33fa8041bef58f00993ca461a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a15b49c78b100f33fa8041bef58f00993ca461a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a15b49c78b100f33fa8041bef58f00993ca461a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a15b49c78b100f33fa8041bef58f00993ca461a3/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b757d561e2643d72faf554087060b716e01e7e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b757d561e2643d72faf554087060b716e01e7e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b757d561e2643d72faf554087060b716e01e7e2"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "69664df3468cac2f43800186e81ed7a12925cae3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a15b49c78b100f33fa8041bef58f00993ca461a3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a15b49c78b100f33fa8041bef58f00993ca461a3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a15b49c78b100f33fa8041bef58f00993ca461a3",
        "patch": "@@ -549,7 +549,7 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n     std::string strCmd = GetArg(\"-blocknotify\", \"\");\n \n     boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n-    boost::thread t(runCommand, strCmd); // thread runs free\n+    std::thread(runCommand, strCmd).detach(); // thread runs free\n }\n \n static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)"
      },
      {
        "sha": "9bb6c76651cd560a6e4c8c23c22600c0a9e1b3c4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a15b49c78b100f33fa8041bef58f00993ca461a3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a15b49c78b100f33fa8041bef58f00993ca461a3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a15b49c78b100f33fa8041bef58f00993ca461a3",
        "patch": "@@ -40,6 +40,7 @@\n \n #include <atomic>\n #include <sstream>\n+#include <thread>\n \n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/join.hpp>\n@@ -1746,7 +1747,7 @@ static void AlertNotify(const std::string& strMessage)\n     safeStatus = singleQuote+safeStatus+singleQuote;\n     boost::replace_all(strCmd, \"%s\", safeStatus);\n \n-    boost::thread t(runCommand, strCmd); // thread runs free\n+    std::thread(runCommand, strCmd).detach(); // thread runs free\n }\n \n void CheckForkWarningConditions()"
      },
      {
        "sha": "bdcb5422a147600981fc302003027d16d7723cf7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a15b49c78b100f33fa8041bef58f00993ca461a3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a15b49c78b100f33fa8041bef58f00993ca461a3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a15b49c78b100f33fa8041bef58f00993ca461a3",
        "patch": "@@ -32,6 +32,8 @@\n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n+#include <thread>\n+\n using namespace std;\n \n CWallet* pwalletMain = NULL;\n@@ -859,7 +861,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     if ( !strCmd.empty())\n     {\n         boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-        boost::thread t(runCommand, strCmd); // thread runs free\n+        std::thread(runCommand, strCmd).detach(); // thread runs free\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "69d38c0601574f197db71d38b4bc4d90336f4a7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWQzOGMwNjAxNTc0ZjE5N2RiNzFkMzhiNGJjNGQ5MDMzNmY0YTdl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-30T18:09:59Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: use std::condition_variable/mutex for messageHandlerCondition",
      "tree": {
        "sha": "a3492b044121f9c629ee0851453ea72cf2ac89db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3492b044121f9c629ee0851453ea72cf2ac89db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69d38c0601574f197db71d38b4bc4d90336f4a7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d38c0601574f197db71d38b4bc4d90336f4a7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69d38c0601574f197db71d38b4bc4d90336f4a7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d38c0601574f197db71d38b4bc4d90336f4a7e/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a15b49c78b100f33fa8041bef58f00993ca461a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a15b49c78b100f33fa8041bef58f00993ca461a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a15b49c78b100f33fa8041bef58f00993ca461a3"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7a33fc9906a29178d0040f3834f7afe27232ec02",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d38c0601574f197db71d38b4bc4d90336f4a7e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d38c0601574f197db71d38b4bc4d90336f4a7e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=69d38c0601574f197db71d38b4bc4d90336f4a7e",
        "patch": "@@ -114,7 +114,7 @@ NodeId nLastNodeId = 0;\n CCriticalSection cs_nLastNodeId;\n \n static CSemaphore *semOutbound = NULL;\n-boost::condition_variable messageHandlerCondition;\n+std::condition_variable messageHandlerCondition;\n \n // Signals for message handling\n static CNodeSignals g_signals;\n@@ -1910,8 +1910,8 @@ bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSem\n \n void ThreadMessageHandler()\n {\n-    boost::mutex condition_mutex;\n-    boost::unique_lock<boost::mutex> lock(condition_mutex);\n+    std::mutex condition_mutex;\n+    std::unique_lock<std::mutex> lock(condition_mutex);\n \n     while (true)\n     {\n@@ -1966,7 +1966,7 @@ void ThreadMessageHandler()\n         }\n \n         if (fSleep)\n-            messageHandlerCondition.timed_wait(lock, boost::posix_time::microsec_clock::universal_time() + boost::posix_time::milliseconds(100));\n+            messageHandlerCondition.wait_for(lock, std::chrono::milliseconds(100), []()->bool {return net_interrupted; });\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "abc1ebf12c00d7d77da30dfd5a6e26392ebe6f9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmMxZWJmMTJjMDBkN2Q3N2RhMzBkZmQ1YTZlMjYzOTJlYmU2Zjlk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-30T18:10:36Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: break loops rather than throwing when possible",
      "tree": {
        "sha": "738fa8f35edcae683f3681f4c25ad7d371ef9ca2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/738fa8f35edcae683f3681f4c25ad7d371ef9ca2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abc1ebf12c00d7d77da30dfd5a6e26392ebe6f9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abc1ebf12c00d7d77da30dfd5a6e26392ebe6f9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/abc1ebf12c00d7d77da30dfd5a6e26392ebe6f9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abc1ebf12c00d7d77da30dfd5a6e26392ebe6f9d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69d38c0601574f197db71d38b4bc4d90336f4a7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d38c0601574f197db71d38b4bc4d90336f4a7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69d38c0601574f197db71d38b4bc4d90336f4a7e"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 12,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2c269c779dd4d01170405e36c5d2b1cdd11d30c7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abc1ebf12c00d7d77da30dfd5a6e26392ebe6f9d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abc1ebf12c00d7d77da30dfd5a6e26392ebe6f9d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=abc1ebf12c00d7d77da30dfd5a6e26392ebe6f9d",
        "patch": "@@ -1115,7 +1115,7 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n void ThreadSocketHandler()\n {\n     unsigned int nPrevNodeCount = 0;\n-    while (true)\n+    while (!net_interrupted)\n     {\n         //\n         // Disconnect nodes\n@@ -1246,7 +1246,8 @@ void ThreadSocketHandler()\n \n         int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n                              &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-        interruption_point(net_interrupted);\n+        if(net_interrupted)\n+            break;\n \n         if (nSelect == SOCKET_ERROR)\n         {\n@@ -1285,7 +1286,8 @@ void ThreadSocketHandler()\n         }\n         BOOST_FOREACH(CNode* pnode, vNodesCopy)\n         {\n-            interruption_point(net_interrupted);\n+            if(net_interrupted)\n+                break;\n \n             //\n             // Receive\n@@ -1688,7 +1690,8 @@ void ThreadOpenConnections()\n         InterruptibleSleep(500);\n \n         CSemaphoreGrant grant(*semOutbound);\n-        interruption_point(net_interrupted);\n+        if(net_interrupted)\n+            break;\n \n         // Add seed nodes if DNS seeds are all down (an infrastructure attack?).\n         if (addrman.size() == 0 && (GetTime() - nStart > 60)) {\n@@ -1913,7 +1916,7 @@ void ThreadMessageHandler()\n     std::mutex condition_mutex;\n     std::unique_lock<std::mutex> lock(condition_mutex);\n \n-    while (true)\n+    while (!net_interrupted)\n     {\n         std::vector<CNode*> vNodesCopy;\n         {\n@@ -1948,15 +1951,17 @@ void ThreadMessageHandler()\n                     }\n                 }\n             }\n-            interruption_point(net_interrupted);\n+            if(net_interrupted)\n+                break;\n \n             // Send messages\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n                     GetNodeSignals().SendMessages(pnode);\n             }\n-            interruption_point(net_interrupted);\n+            if(net_interrupted)\n+                break;\n         }\n \n         {"
      }
    ]
  },
  {
    "sha": "34994251500a1a969ba09d4cb0968a5bdda074d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDk5NDI1MTUwMGExYTk2OWJhMDlkNGNiMDk2OGE1YmRkYTA3NGQ1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-30T22:44:26Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: Use threadwrapper for http server/worker threads\n\nThis ensures that any interruptions are caught",
      "tree": {
        "sha": "3bfd5a1f02a4c07706403a04112f21348a96a5f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bfd5a1f02a4c07706403a04112f21348a96a5f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34994251500a1a969ba09d4cb0968a5bdda074d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34994251500a1a969ba09d4cb0968a5bdda074d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34994251500a1a969ba09d4cb0968a5bdda074d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34994251500a1a969ba09d4cb0968a5bdda074d5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abc1ebf12c00d7d77da30dfd5a6e26392ebe6f9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abc1ebf12c00d7d77da30dfd5a6e26392ebe6f9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abc1ebf12c00d7d77da30dfd5a6e26392ebe6f9d"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "cfe701fe8ef8406bf51a82417bd7932d75636d75",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34994251500a1a969ba09d4cb0968a5bdda074d5/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34994251500a1a969ba09d4cb0968a5bdda074d5/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=34994251500a1a969ba09d4cb0968a5bdda074d5",
        "patch": "@@ -307,7 +307,6 @@ static void http_reject_request_cb(struct evhttp_request* req, void*)\n /** Event dispatcher thread */\n static bool ThreadHTTP(struct event_base* base, struct evhttp* http)\n {\n-    RenameThread(\"bitcoin-http\");\n     LogPrint(\"http\", \"Entering http event loop\\n\");\n     event_base_dispatch(base);\n     // Event loop will be interrupted by InterruptHTTPServer()\n@@ -451,10 +450,12 @@ bool StartHTTPServer()\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n     std::packaged_task<bool(event_base*, evhttp*)> task(ThreadHTTP);\n     threadResult = task.get_future();\n-    threadHTTP = std::thread(std::move(task), eventBase, eventHTTP);\n+    auto bindHTTP = std::bind(std::move(task), eventBase, eventHTTP);\n+    threadHTTP = std::thread(&TraceThread<decltype(bindHTTP)>, \"bitcoin-http\", std::move(bindHTTP));\n \n     for (int i = 0; i < rpcThreads; i++) {\n-        std::thread rpc_worker(HTTPWorkQueueRun, workQueue);\n+        auto bindHTTPWorker = std::bind(HTTPWorkQueueRun, workQueue);\n+        std::thread rpc_worker(&TraceThread<decltype(bindHTTPWorker)>, \"httpworker\", std::move(bindHTTPWorker));\n         rpc_worker.detach();\n     }\n     return true;"
      }
    ]
  },
  {
    "sha": "f6bc83b36c6d3ba481c20a8b858cd18fbc80462a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmJjODNiMzZjNmQzYmE0ODFjMjBhOGI4NThjZDE4ZmJjODA0NjJh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-31T00:28:23Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: get rid of MilliSleep and interruption_point in ThreadFlushWalletDB",
      "tree": {
        "sha": "a0d9961a1ddbcb7d352eb1def18d9ebe2ba005da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0d9961a1ddbcb7d352eb1def18d9ebe2ba005da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6bc83b36c6d3ba481c20a8b858cd18fbc80462a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6bc83b36c6d3ba481c20a8b858cd18fbc80462a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6bc83b36c6d3ba481c20a8b858cd18fbc80462a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6bc83b36c6d3ba481c20a8b858cd18fbc80462a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34994251500a1a969ba09d4cb0968a5bdda074d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34994251500a1a969ba09d4cb0968a5bdda074d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34994251500a1a969ba09d4cb0968a5bdda074d5"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 16,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0ffccdee7bc812888f573b550600b4fb80ccfbd5",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6bc83b36c6d3ba481c20a8b858cd18fbc80462a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6bc83b36c6d3ba481c20a8b858cd18fbc80462a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=f6bc83b36c6d3ba481c20a8b858cd18fbc80462a",
        "patch": "@@ -20,6 +20,9 @@\n #include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n+#include <mutex>\n+#include <condition_variable>\n+\n using namespace std;\n \n static uint64_t nAccountingEntryNumber = 0;\n@@ -849,6 +852,8 @@ DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, vector<CWalletTx>& vWtx)\n }\n \n static std::atomic<bool> interrupt_flush_wallet;\n+static std::condition_variable cond_flush_wallet;\n+static std::mutex cs_flush_wallet;\n void ThreadFlushWalletDB(const string& strFile)\n {\n     interrupt_flush_wallet = false;\n@@ -865,9 +870,15 @@ void ThreadFlushWalletDB(const string& strFile)\n     unsigned int nLastSeen = nWalletDBUpdated;\n     unsigned int nLastFlushed = nWalletDBUpdated;\n     int64_t nLastWalletUpdate = GetTime();\n-    while (true)\n+    while (!interrupt_flush_wallet)\n     {\n-        MilliSleep(500);\n+        bool ret;\n+        {\n+            std::unique_lock<std::mutex> lock(cs_flush_wallet);\n+            ret = cond_flush_wallet.wait_for(lock, std::chrono::milliseconds(500), []()->bool{return interrupt_flush_wallet; });\n+        }\n+        if(ret)\n+            break;\n \n         if (nLastSeen != nWalletDBUpdated)\n         {\n@@ -891,7 +902,8 @@ void ThreadFlushWalletDB(const string& strFile)\n \n                 if (nRefCount == 0)\n                 {\n-                    interruption_point(interrupt_flush_wallet);\n+                    if(interrupt_flush_wallet)\n+                        break;\n                     map<string, int>::iterator _mi = bitdb.mapFileUseCount.find(strFile);\n                     if (_mi != bitdb.mapFileUseCount.end())\n                     {\n@@ -915,6 +927,7 @@ void ThreadFlushWalletDB(const string& strFile)\n void InterruptFlushWalletDB()\n {\n     interrupt_flush_wallet = true;\n+    cond_flush_wallet.notify_all();\n }\n \n //"
      }
    ]
  },
  {
    "sha": "e890e93456f5e2135011207fe5a3794a5587a783",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODkwZTkzNDU2ZjVlMjEzNTAxMTIwN2ZlNWEzNzk0YTU1ODdhNzgz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-31T01:04:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: nuke the last remnants of boost::thread_group",
      "tree": {
        "sha": "8514d69d50742fc0acc88049f2b10fffa3c1ea01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8514d69d50742fc0acc88049f2b10fffa3c1ea01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e890e93456f5e2135011207fe5a3794a5587a783",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e890e93456f5e2135011207fe5a3794a5587a783",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e890e93456f5e2135011207fe5a3794a5587a783",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e890e93456f5e2135011207fe5a3794a5587a783/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6bc83b36c6d3ba481c20a8b858cd18fbc80462a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6bc83b36c6d3ba481c20a8b858cd18fbc80462a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6bc83b36c6d3ba481c20a8b858cd18fbc80462a"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 13,
      "deletions": 37
    },
    "files": [
      {
        "sha": "63e04d52c5edbac834239a56e27cd0cb179d2f0c",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e890e93456f5e2135011207fe5a3794a5587a783/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e890e93456f5e2135011207fe5a3794a5587a783/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=e890e93456f5e2135011207fe5a3794a5587a783",
        "patch": "@@ -42,7 +42,7 @@\n \n static bool fDaemon;\n \n-void WaitForShutdown(boost::thread_group* threadGroup, CScheduler& scheduler)\n+void WaitForShutdown(CScheduler& scheduler)\n {\n     bool fShutdown = ShutdownRequested();\n     // Tell the main threads to shutdown.\n@@ -51,11 +51,7 @@ void WaitForShutdown(boost::thread_group* threadGroup, CScheduler& scheduler)\n         MilliSleep(200);\n         fShutdown = ShutdownRequested();\n     }\n-    if (threadGroup)\n-    {\n-        Interrupt(*threadGroup, scheduler);\n-        threadGroup->join_all();\n-    }\n+    Interrupt(scheduler);\n }\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -64,7 +60,6 @@ void WaitForShutdown(boost::thread_group* threadGroup, CScheduler& scheduler)\n //\n bool AppInit(int argc, char* argv[])\n {\n-    boost::thread_group threadGroup;\n     CScheduler scheduler;\n \n     bool fRet = false;\n@@ -158,7 +153,7 @@ bool AppInit(int argc, char* argv[])\n         // Set this early so that parameter interactions go to console\n         InitLogging();\n         InitParameterInteraction();\n-        fRet = AppInit2(threadGroup, scheduler);\n+        fRet = AppInit2(scheduler);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");\n@@ -168,12 +163,9 @@ bool AppInit(int argc, char* argv[])\n \n     if (!fRet)\n     {\n-        Interrupt(threadGroup, scheduler);\n-        // threadGroup.join_all(); was left out intentionally here, because we didn't re-test all of\n-        // the startup-failure cases to make sure they don't result in a hang due to some\n-        // thread-blocking-waiting-for-another-thread-during-startup case\n+        Interrupt(scheduler);\n     } else {\n-        WaitForShutdown(&threadGroup, scheduler);\n+        WaitForShutdown(scheduler);\n     }\n     Shutdown(scheduler);\n "
      },
      {
        "sha": "2fbf2b1c357a10ea5f2248e2d38730fffa95369a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e890e93456f5e2135011207fe5a3794a5587a783/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e890e93456f5e2135011207fe5a3794a5587a783/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e890e93456f5e2135011207fe5a3794a5587a783",
        "patch": "@@ -117,10 +117,6 @@ static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n // threads that should only be stopped after the main network-processing\n // threads have exited.\n //\n-// Note that if running -daemon the parent process returns from AppInit2\n-// before adding any threads to the threadGroup, so .join_all() returns\n-// immediately and the parent exits from main().\n-//\n // Shutdown for Qt is very similar, only it uses a QTimer to detect\n // fRequestShutdown getting set, and then does the normal Qt\n // shutdown thing.\n@@ -176,7 +172,7 @@ static bool fHaveGenesis = false;\n static boost::mutex cs_GenesisWait;\n static CConditionVariable condvar_GenesisWait;\n \n-void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler)\n+void Interrupt(CScheduler& scheduler)\n {\n     InterruptHTTPServer();\n     InterruptHTTPRPC();\n@@ -190,7 +186,6 @@ void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler)\n     InterruptThreadScriptCheck();\n     InterruptNetbase();\n     InterruptNode();\n-    threadGroup.interrupt_all();\n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         pwalletMain->Interrupt();\n@@ -700,7 +695,7 @@ bool InitSanityCheck(void)\n     return true;\n }\n \n-bool AppInitServers(boost::thread_group& threadGroup)\n+bool AppInitServers()\n {\n     RPCServer::OnStopped(&OnRPCStopped);\n     RPCServer::OnPreCommand(&OnRPCPreCommand);\n@@ -816,7 +811,7 @@ void InitLogging()\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n-bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n+bool AppInit2(CScheduler& scheduler)\n {\n     // ********************************************************* Step 1: setup\n #ifdef _MSC_VER\n@@ -1123,7 +1118,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (fServer)\n     {\n         uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n-        if (!AppInitServers(threadGroup))\n+        if (!AppInitServers())\n             return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n     }\n "
      },
      {
        "sha": "701d7ea24c215c034ae9a2a566b85d5d7f7c15e0",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e890e93456f5e2135011207fe5a3794a5587a783/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e890e93456f5e2135011207fe5a3794a5587a783/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=e890e93456f5e2135011207fe5a3794a5587a783",
        "patch": "@@ -11,21 +11,16 @@\n class CScheduler;\n class CWallet;\n \n-namespace boost\n-{\n-class thread_group;\n-} // namespace boost\n-\n void StartShutdown();\n bool ShutdownRequested();\n /** Interrupt threads */\n-void Interrupt(boost::thread_group& threadGroup, CScheduler& scheduler);\n+void Interrupt(CScheduler& scheduler);\n void Shutdown(CScheduler& scheduler);\n //!Initialize the logging infrastructure\n void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules\n void InitParameterInteraction();\n-bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);\n+bool AppInit2(CScheduler& scheduler);\n \n /** The help message mode determines what help message to show */\n enum HelpMessageMode {"
      },
      {
        "sha": "2a65ab24b722f62bc43e63bacf62438c09bc2c5c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e890e93456f5e2135011207fe5a3794a5587a783/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e890e93456f5e2135011207fe5a3794a5587a783/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e890e93456f5e2135011207fe5a3794a5587a783",
        "patch": "@@ -33,10 +33,6 @@ class CAddrMan;\n class CScheduler;\n class CNode;\n \n-namespace boost {\n-    class thread_group;\n-} // namespace boost\n-\n /** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n static const int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */"
      },
      {
        "sha": "4df8a3c1078aac3a22b7c34dcd33f781a6607d9a",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e890e93456f5e2135011207fe5a3794a5587a783/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e890e93456f5e2135011207fe5a3794a5587a783/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e890e93456f5e2135011207fe5a3794a5587a783",
        "patch": "@@ -182,7 +182,6 @@ public Q_SLOTS:\n     void runawayException(const QString &message);\n \n private:\n-    boost::thread_group threadGroup;\n     CScheduler scheduler;\n \n     /// Pass fatal exception message to UI thread\n@@ -267,7 +266,7 @@ void BitcoinCore::initialize()\n     try\n     {\n         qDebug() << __func__ << \": Running AppInit2 in thread\";\n-        int rv = AppInit2(threadGroup, scheduler);\n+        int rv = AppInit2(scheduler);\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n@@ -281,8 +280,7 @@ void BitcoinCore::shutdown()\n     try\n     {\n         qDebug() << __func__ << \": Running Shutdown in thread\";\n-        Interrupt(threadGroup, scheduler);\n-        threadGroup.join_all();\n+        Interrupt(scheduler);\n         Shutdown(scheduler);\n         qDebug() << __func__ << \": Shutdown finished\";\n         Q_EMIT shutdownResult(1);"
      }
    ]
  },
  {
    "sha": "01f8700b0e5a40465a5bd7707a3e9a9a94f8023e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWY4NzAwYjBlNWE0MDQ2NWE1YmQ3NzA3YTNlOWE5YTk0ZjgwMjNl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T04:55:33Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-02T12:39:48Z"
      },
      "message": "threads: remove recent reintroduction of threadgroups\n\nAnd since std::threads can't be interrupted, the checkqueue must be manually\ninterrupted",
      "tree": {
        "sha": "bb75dc2bf2df95928689100588a202745c8fa8d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb75dc2bf2df95928689100588a202745c8fa8d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01f8700b0e5a40465a5bd7707a3e9a9a94f8023e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f8700b0e5a40465a5bd7707a3e9a9a94f8023e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01f8700b0e5a40465a5bd7707a3e9a9a94f8023e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f8700b0e5a40465a5bd7707a3e9a9a94f8023e/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e890e93456f5e2135011207fe5a3794a5587a783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e890e93456f5e2135011207fe5a3794a5587a783",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e890e93456f5e2135011207fe5a3794a5587a783"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "bce53b8be88bd81690c1b423cc5c556f356b5dba",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01f8700b0e5a40465a5bd7707a3e9a9a94f8023e/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01f8700b0e5a40465a5bd7707a3e9a9a94f8023e/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=01f8700b0e5a40465a5bd7707a3e9a9a94f8023e",
        "patch": "@@ -470,12 +470,14 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n \n     // check all inputs concurrently, with the cache\n     PrecomputedTransactionData txdata(tx);\n-    boost::thread_group threadGroup;\n+    std::vector<std::thread> threadGroup;\n     CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n     CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n \n-    for (int i=0; i<20; i++)\n-        threadGroup.create_thread(boost::bind(&CCheckQueue<CScriptCheck>::Thread, boost::ref(scriptcheckqueue)));\n+    int script_threads = 20;\n+    threadGroup.reserve(script_threads);\n+    for (int i=0; i<script_threads; i++)\n+        threadGroup.emplace_back(&CCheckQueue<CScriptCheck>::Thread, &scriptcheckqueue);\n \n     CCoins coins;\n     coins.nVersion = 1;\n@@ -497,9 +499,9 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n \n     bool controlCheck = control.Wait();\n     assert(controlCheck);\n-\n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n+    scriptcheckqueue.Interrupt();\n+    for(auto&& thread : threadGroup)\n+        thread.join();\n }\n \n BOOST_AUTO_TEST_CASE(test_witness)"
      }
    ]
  }
]