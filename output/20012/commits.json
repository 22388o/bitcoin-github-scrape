[
  {
    "sha": "faf835680be39811827504f77005b6603165f53e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY4MzU2ODBiZTM5ODExODI3NTA0Zjc3MDA1YjY2MDMxNjVmNTNl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-12T05:27:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-28T07:16:31Z"
      },
      "message": "rpc: [refactor] Use concise C++11 code in CRPCConvertTable constructor",
      "tree": {
        "sha": "fda24b841d7b260c553a9586363296274a1fac78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fda24b841d7b260c553a9586363296274a1fac78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf835680be39811827504f77005b6603165f53e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiivAv9EkEBqec9zrSaLl/oyEqQIawzZODHXf1v+qTsd19V74hcIK6AVPoi121b\njV5mqmWXEtqSn6Un0zYDiNdmDNG6B9AKlrdwbFlF4OtqDCLUyMlGEgUm8JAZI6G1\nVuLWcJjynD7zVz7hp4tChBjMOqzdZrbbB7aaBksMAUqL8/33Ok+kddQwKNrzBc3X\npvWa3mr7XNzP/zzvby+UMlmpZKFGoxwINwwHFZcZ0y8qJnWjlauy/YZSsTfx3pPs\nG0TwUP300AAf/a4M763qcSPqQJEzkRPDW7QEXUFl1Pq1qDhfYdCUp3Oa1EIN42Zs\nXcXwMD/RWF1Bb4B/swp7LLTr0XWhEX2wOULthwwWjap/jPcIOVlW0WWArprZdD68\n4DZ/JNylPWtS4PsVN+ZhR/Bac22KHeX5ZeWGFWrXJKedha3sjVbwGEa83YZSVEn3\nQtmMT6YhfSjJI6A2ATpaN0yrCqARtESPsAFj39gqRJtDtUV2G570MphBa/JUNnF6\niKXODExV\n=NNue\n-----END PGP SIGNATURE-----",
        "payload": "tree fda24b841d7b260c553a9586363296274a1fac78\nparent 9deba2de764f0043061d68cc3b984b9df67cf23b\nauthor MarcoFalke <falke.marco@gmail.com> 1610429249 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1611818191 +0100\n\nrpc: [refactor] Use concise C++11 code in CRPCConvertTable constructor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf835680be39811827504f77005b6603165f53e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf835680be39811827504f77005b6603165f53e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf835680be39811827504f77005b6603165f53e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9deba2de764f0043061d68cc3b984b9df67cf23b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9deba2de764f0043061d68cc3b984b9df67cf23b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9deba2de764f0043061d68cc3b984b9df67cf23b"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 3,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d1eb849b7e6d23768f8ab9dcbdbf1b3691d02208",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf835680be39811827504f77005b6603165f53e/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf835680be39811827504f77005b6603165f53e/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=faf835680be39811827504f77005b6603165f53e",
        "patch": "@@ -210,14 +210,9 @@ class CRPCConvertTable\n \n CRPCConvertTable::CRPCConvertTable()\n {\n-    const unsigned int n_elem =\n-        (sizeof(vRPCConvertParams) / sizeof(vRPCConvertParams[0]));\n-\n-    for (unsigned int i = 0; i < n_elem; i++) {\n-        members.insert(std::make_pair(vRPCConvertParams[i].methodName,\n-                                      vRPCConvertParams[i].paramIdx));\n-        membersByName.insert(std::make_pair(vRPCConvertParams[i].methodName,\n-                                            vRPCConvertParams[i].paramName));\n+    for (const auto& cp : vRPCConvertParams) {\n+        members.emplace(cp.methodName, cp.paramIdx);\n+        membersByName.emplace(cp.methodName, cp.paramName);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "fa92912b4bb4629addcbfdfb7cc000be701614af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTkyOTEyYjRiYjQ2MjlhZGRjYmZkZmI3Y2MwMDBiZTcwMTYxNGFm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-12T05:28:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-28T07:16:34Z"
      },
      "message": "rpc: Use RPCHelpMan for check-rpc-mappings linter",
      "tree": {
        "sha": "2e8b64d487f766ec44d057f8f5e8aee6b2354217",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e8b64d487f766ec44d057f8f5e8aee6b2354217"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa92912b4bb4629addcbfdfb7cc000be701614af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg+TwwApeoPFGGcu5BQewq7NGg/5qT7x633bLqDPvtLbUuouugPDm4Xnxw9/1Ug\nFx3cpnhsBKrdrP8NPEA//keDE2LtLUQoAapm9f53wZU7SBNwepWdnlvtfJ493Qys\n1lk/LrWNFMJrrAdxO0EGuutt1FMd/u6CCF9RrVwgsEJ+u906OMMkj/nNPq/iGMYk\nhOXZrVMZp6WYPGR2cqCEMo8xcGnp1fMX0Lclu+J1WiEmEIYCOecGCzZDVx7Lenxk\n/TqkxNThSFEB6wA12CE3mBCdH63RqI47VUAsC85C18B99hZ/nHoV7sHRuE2djtIx\nSnwzeJZwm9L15BQbmrVlq9wnDZH25fxlcHG3fqx6dKS1OADK4A403EufFKMmMdB/\np/KQWZyDYbLsF2R1DJa2TaVEzk+W9jhrkVBrfMjNe6r54au/bvqsx68Nd76p66g4\n027mQlm+exO5LXgFCVRNcdShLTb8ySBFkM41S8keW9p0JHQqkWgR5PONEX6qwHqL\nPwFKQl6P\n=ecOh\n-----END PGP SIGNATURE-----",
        "payload": "tree 2e8b64d487f766ec44d057f8f5e8aee6b2354217\nparent faf835680be39811827504f77005b6603165f53e\nauthor MarcoFalke <falke.marco@gmail.com> 1610429293 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1611818194 +0100\n\nrpc: Use RPCHelpMan for check-rpc-mappings linter\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa92912b4bb4629addcbfdfb7cc000be701614af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa92912b4bb4629addcbfdfb7cc000be701614af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa92912b4bb4629addcbfdfb7cc000be701614af/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf835680be39811827504f77005b6603165f53e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf835680be39811827504f77005b6603165f53e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf835680be39811827504f77005b6603165f53e"
      }
    ],
    "stats": {
      "total": 270,
      "additions": 106,
      "deletions": 164
    },
    "files": [
      {
        "sha": "e38cfe8eefd21e8426368d30c1da6de1c67f4840",
        "filename": "ci/lint/06_script.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa92912b4bb4629addcbfdfb7cc000be701614af/ci/lint/06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa92912b4bb4629addcbfdfb7cc000be701614af/ci/lint/06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/06_script.sh?ref=fa92912b4bb4629addcbfdfb7cc000be701614af",
        "patch": "@@ -21,7 +21,6 @@ test/lint/git-subtree-check.sh src/univalue\n test/lint/git-subtree-check.sh src/leveldb\n test/lint/git-subtree-check.sh src/crc32c\n test/lint/check-doc.py\n-test/lint/check-rpc-mappings.py .\n test/lint/lint-all.sh\n \n if [ \"$CIRRUS_REPO_FULL_NAME\" = \"bitcoin/bitcoin\" ] && [ -n \"$CIRRUS_CRON\" ]; then"
      },
      {
        "sha": "e8abc020da80dff308891a197d18bbec6c01508a",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa92912b4bb4629addcbfdfb7cc000be701614af/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa92912b4bb4629addcbfdfb7cc000be701614af/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa92912b4bb4629addcbfdfb7cc000be701614af",
        "patch": "@@ -144,8 +144,13 @@ static RPCHelpMan help()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& jsonRequest) -> UniValue\n {\n     std::string strCommand;\n-    if (jsonRequest.params.size() > 0)\n+    if (jsonRequest.params.size() > 0) {\n         strCommand = jsonRequest.params[0].get_str();\n+    }\n+    if (strCommand == \"dump_all_command_conversions\") {\n+        // Used for testing only, undocumented\n+        return tableRPC.dumpArgMap();\n+    }\n \n     return tableRPC.help(strCommand, jsonRequest);\n },\n@@ -479,6 +484,18 @@ std::vector<std::string> CRPCTable::listCommands() const\n     return commandList;\n }\n \n+UniValue CRPCTable::dumpArgMap() const\n+{\n+    UniValue ret{UniValue::VARR};\n+    for (const auto& cmd : mapCommands) {\n+        for (const auto& c : cmd.second) {\n+            const auto help = RpcMethodFnType(c->unique_id)();\n+            help.AppendArgMap(ret);\n+        }\n+    }\n+    return ret;\n+}\n+\n void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface)\n {\n     if (!timerInterface)"
      },
      {
        "sha": "d2f44334aea59885deeec4c0a82d72e4bc45b4d7",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa92912b4bb4629addcbfdfb7cc000be701614af/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa92912b4bb4629addcbfdfb7cc000be701614af/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=fa92912b4bb4629addcbfdfb7cc000be701614af",
        "patch": "@@ -147,6 +147,10 @@ class CRPCTable\n     */\n     std::vector<std::string> listCommands() const;\n \n+    /**\n+     * Return all named arguments that need to be converted by the client from string to another JSON type\n+     */\n+    UniValue dumpArgMap() const;\n \n     /**\n      * Appends a CRPCCommand to the dispatch table."
      },
      {
        "sha": "bfdba5253c0442412d816e6fb962ce811e6cb772",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa92912b4bb4629addcbfdfb7cc000be701614af/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa92912b4bb4629addcbfdfb7cc000be701614af/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fa92912b4bb4629addcbfdfb7cc000be701614af",
        "patch": "@@ -549,6 +549,24 @@ std::string RPCHelpMan::ToString() const\n     return ret;\n }\n \n+void RPCHelpMan::AppendArgMap(UniValue& arr) const\n+{\n+    for (int i{0}; i < int(m_args.size()); ++i) {\n+        const auto& arg = m_args.at(i);\n+        std::vector<std::string> arg_names;\n+        boost::split(arg_names, arg.m_names, boost::is_any_of(\"|\"));\n+        for (const auto& arg_name : arg_names) {\n+            UniValue map{UniValue::VARR};\n+            map.push_back(m_name);\n+            map.push_back(i);\n+            map.push_back(arg_name);\n+            map.push_back(arg.m_type == RPCArg::Type::STR ||\n+                          arg.m_type == RPCArg::Type::STR_HEX);\n+            arr.push_back(map);\n+        }\n+    }\n+}\n+\n std::string RPCArg::GetFirstName() const\n {\n     return m_names.substr(0, m_names.find(\"|\"));"
      },
      {
        "sha": "444a013ca17a1c083cc144b3c67233f6498346b2",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa92912b4bb4629addcbfdfb7cc000be701614af/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa92912b4bb4629addcbfdfb7cc000be701614af/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fa92912b4bb4629addcbfdfb7cc000be701614af",
        "patch": "@@ -336,6 +336,8 @@ class RPCHelpMan\n     RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples, RPCMethodImpl fun);\n \n     std::string ToString() const;\n+    /** Append the named args that need to be converted from string to another JSON type */\n+    void AppendArgMap(UniValue& arr) const;\n     UniValue HandleRequest(const JSONRPCRequest& request)\n     {\n         Check(request);"
      },
      {
        "sha": "1eefd109f87eb6107e0a8802479529933db34198",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa92912b4bb4629addcbfdfb7cc000be701614af/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa92912b4bb4629addcbfdfb7cc000be701614af/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=fa92912b4bb4629addcbfdfb7cc000be701614af",
        "patch": "@@ -7,7 +7,39 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n+from collections import defaultdict\n import os\n+import re\n+\n+\n+def parse_string(s):\n+    assert s[0] == '\"'\n+    assert s[-1] == '\"'\n+    return s[1:-1]\n+\n+\n+def process_mapping(fname):\n+    \"\"\"Find and parse conversion table in implementation file `fname`.\"\"\"\n+    cmds = []\n+    in_rpcs = False\n+    with open(fname, \"r\", encoding=\"utf8\") as f:\n+        for line in f:\n+            line = line.rstrip()\n+            if not in_rpcs:\n+                if line == 'static const CRPCConvertParam vRPCConvertParams[] =':\n+                    in_rpcs = True\n+            else:\n+                if line.startswith('};'):\n+                    in_rpcs = False\n+                elif '{' in line and '\"' in line:\n+                    m = re.search(r'{ *(\"[^\"]*\"), *([0-9]+) *, *(\"[^\"]*\") *},', line)\n+                    assert m, 'No match to table expression: %s' % line\n+                    name = parse_string(m.group(1))\n+                    idx = int(m.group(2))\n+                    argname = parse_string(m.group(3))\n+                    cmds.append((name, idx, argname))\n+    assert not in_rpcs and cmds\n+    return cmds\n \n \n class HelpRpcTest(BitcoinTestFramework):\n@@ -16,11 +48,43 @@ def set_test_params(self):\n         self.supports_cli = False\n \n     def run_test(self):\n+        self.test_client_conversion_table()\n         self.test_categories()\n         self.dump_help()\n         if self.is_wallet_compiled():\n             self.wallet_help()\n \n+    def test_client_conversion_table(self):\n+        file_conversion_table = os.path.join(self.config[\"environment\"][\"SRCDIR\"], 'src', 'rpc', 'client.cpp')\n+        mapping_client = process_mapping(file_conversion_table)\n+        # Ignore echojson in client table\n+        mapping_client = [m for m in mapping_client if m[0] != 'echojson']\n+\n+        mapping_server = self.nodes[0].help(\"dump_all_command_conversions\")\n+        # Filter all RPCs whether they need conversion\n+        mapping_server_conversion = [tuple(m[:3]) for m in mapping_server if not m[3]]\n+\n+        # Only check if all RPC methods have been compiled (i.e. wallet is enabled)\n+        if self.is_wallet_compiled() and sorted(mapping_client) != sorted(mapping_server_conversion):\n+            raise AssertionError(\"RPC client conversion table ({}) and RPC server named arguments mismatch!\\n{}\".format(\n+                file_conversion_table,\n+                set(mapping_client).symmetric_difference(mapping_server_conversion),\n+            ))\n+\n+        # Check for conversion difference by argument name.\n+        # It is preferable for API consistency that arguments with the same name\n+        # have the same conversion, so bin by argument name.\n+        all_methods_by_argname = defaultdict(list)\n+        converts_by_argname = defaultdict(list)\n+        for m in mapping_server:\n+            all_methods_by_argname[m[2]].append(m[0])\n+            converts_by_argname[m[2]].append(m[3])\n+\n+        for argname, convert in converts_by_argname.items():\n+            if all(convert) != any(convert):\n+                # Only allow dummy to fail consistency check\n+                assert argname == 'dummy', ('WARNING: conversion mismatch for argument named %s (%s)' % (argname, list(zip(all_methods_by_argname[argname], converts_by_argname[argname]))))\n+\n     def test_categories(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "0a4cc875d0e8d175c6cc3bed7a4dafe8671086e4",
        "filename": "test/lint/check-rpc-mappings.py",
        "status": "removed",
        "additions": 0,
        "deletions": 162,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf835680be39811827504f77005b6603165f53e/test/lint/check-rpc-mappings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf835680be39811827504f77005b6603165f53e/test/lint/check-rpc-mappings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-rpc-mappings.py?ref=faf835680be39811827504f77005b6603165f53e",
        "patch": "@@ -1,162 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2017-2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Check RPC argument consistency.\"\"\"\n-\n-from collections import defaultdict\n-import os\n-import re\n-import sys\n-\n-# Source files (relative to root) to scan for dispatch tables\n-SOURCES = [\n-    \"src/rpc/server.cpp\",\n-    \"src/rpc/blockchain.cpp\",\n-    \"src/rpc/mining.cpp\",\n-    \"src/rpc/misc.cpp\",\n-    \"src/rpc/net.cpp\",\n-    \"src/rpc/rawtransaction.cpp\",\n-    \"src/wallet/rpcwallet.cpp\",\n-]\n-# Source file (relative to root) containing conversion mapping\n-SOURCE_CLIENT = 'src/rpc/client.cpp'\n-# Argument names that should be ignored in consistency checks\n-IGNORE_DUMMY_ARGS = {'dummy', 'arg0', 'arg1', 'arg2', 'arg3', 'arg4', 'arg5', 'arg6', 'arg7', 'arg8', 'arg9'}\n-\n-class RPCCommand:\n-    def __init__(self, name, args):\n-        self.name = name\n-        self.args = args\n-\n-class RPCArgument:\n-    def __init__(self, names, idx):\n-        self.names = names\n-        self.idx = idx\n-        self.convert = False\n-\n-def parse_string(s):\n-    assert s[0] == '\"'\n-    assert s[-1] == '\"'\n-    return s[1:-1]\n-\n-def process_commands(fname):\n-    \"\"\"Find and parse dispatch table in implementation file `fname`.\"\"\"\n-    cmds = []\n-    in_rpcs = False\n-    with open(fname, \"r\", encoding=\"utf8\") as f:\n-        for line in f:\n-            line = line.rstrip()\n-            if not in_rpcs:\n-                if re.match(r\"static const CRPCCommand .*\\[\\] =\", line):\n-                    in_rpcs = True\n-            else:\n-                if line.startswith('};'):\n-                    in_rpcs = False\n-                elif '{' in line and '\"' in line:\n-                    m = re.search(r'{ *(\"[^\"]*\"), *(\"[^\"]*\"), *&([^,]*), *{([^}]*)} *},', line)\n-                    assert m, 'No match to table expression: %s' % line\n-                    name = parse_string(m.group(2))\n-                    args_str = m.group(4).strip()\n-                    if args_str:\n-                        args = [RPCArgument(parse_string(x.strip()).split('|'), idx) for idx, x in enumerate(args_str.split(','))]\n-                    else:\n-                        args = []\n-                    cmds.append(RPCCommand(name, args))\n-    assert not in_rpcs and cmds, \"Something went wrong with parsing the C++ file: update the regexps\"\n-    return cmds\n-\n-def process_mapping(fname):\n-    \"\"\"Find and parse conversion table in implementation file `fname`.\"\"\"\n-    cmds = []\n-    in_rpcs = False\n-    with open(fname, \"r\", encoding=\"utf8\") as f:\n-        for line in f:\n-            line = line.rstrip()\n-            if not in_rpcs:\n-                if line == 'static const CRPCConvertParam vRPCConvertParams[] =':\n-                    in_rpcs = True\n-            else:\n-                if line.startswith('};'):\n-                    in_rpcs = False\n-                elif '{' in line and '\"' in line:\n-                    m = re.search(r'{ *(\"[^\"]*\"), *([0-9]+) *, *(\"[^\"]*\") *},', line)\n-                    assert m, 'No match to table expression: %s' % line\n-                    name = parse_string(m.group(1))\n-                    idx = int(m.group(2))\n-                    argname = parse_string(m.group(3))\n-                    cmds.append((name, idx, argname))\n-    assert not in_rpcs and cmds\n-    return cmds\n-\n-def main():\n-    if len(sys.argv) != 2:\n-        print('Usage: {} ROOT-DIR'.format(sys.argv[0]), file=sys.stderr)\n-        sys.exit(1)\n-\n-    root = sys.argv[1]\n-\n-    # Get all commands from dispatch tables\n-    cmds = []\n-    for fname in SOURCES:\n-        cmds += process_commands(os.path.join(root, fname))\n-\n-    cmds_by_name = {}\n-    for cmd in cmds:\n-        cmds_by_name[cmd.name] = cmd\n-\n-    # Get current convert mapping for client\n-    client = SOURCE_CLIENT\n-    mapping = set(process_mapping(os.path.join(root, client)))\n-\n-    print('* Checking consistency between dispatch tables and vRPCConvertParams')\n-\n-    # Check mapping consistency\n-    errors = 0\n-    for (cmdname, argidx, argname) in mapping:\n-        try:\n-            rargnames = cmds_by_name[cmdname].args[argidx].names\n-        except IndexError:\n-            print('ERROR: %s argument %i (named %s in vRPCConvertParams) is not defined in dispatch table' % (cmdname, argidx, argname))\n-            errors += 1\n-            continue\n-        if argname not in rargnames:\n-            print('ERROR: %s argument %i is named %s in vRPCConvertParams but %s in dispatch table' % (cmdname, argidx, argname, rargnames), file=sys.stderr)\n-            errors += 1\n-\n-    # Check for conflicts in vRPCConvertParams conversion\n-    # All aliases for an argument must either be present in the\n-    # conversion table, or not. Anything in between means an oversight\n-    # and some aliases won't work.\n-    for cmd in cmds:\n-        for arg in cmd.args:\n-            convert = [((cmd.name, arg.idx, argname) in mapping) for argname in arg.names]\n-            if any(convert) != all(convert):\n-                print('ERROR: %s argument %s has conflicts in vRPCConvertParams conversion specifier %s' % (cmd.name, arg.names, convert))\n-                errors += 1\n-            arg.convert = all(convert)\n-\n-    # Check for conversion difference by argument name.\n-    # It is preferable for API consistency that arguments with the same name\n-    # have the same conversion, so bin by argument name.\n-    all_methods_by_argname = defaultdict(list)\n-    converts_by_argname = defaultdict(list)\n-    for cmd in cmds:\n-        for arg in cmd.args:\n-            for argname in arg.names:\n-                all_methods_by_argname[argname].append(cmd.name)\n-                converts_by_argname[argname].append(arg.convert)\n-\n-    for argname, convert in converts_by_argname.items():\n-        if all(convert) != any(convert):\n-            if argname in IGNORE_DUMMY_ARGS:\n-                # these are testing or dummy, don't warn for them\n-                continue\n-            print('WARNING: conversion mismatch for argument named %s (%s)' %\n-                  (argname, list(zip(all_methods_by_argname[argname], converts_by_argname[argname]))))\n-\n-    sys.exit(errors > 0)\n-\n-\n-if __name__ == '__main__':\n-    main()"
      }
    ]
  },
  {
    "sha": "fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA0ZjliNGRkZmZjNWVmMjNjMmVlN2YzY2M3MmE3YzJhZTQ5MjA0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-12T05:41:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-28T07:19:52Z"
      },
      "message": "rpc: Remove duplicate name and argNames from CRPCCommand",
      "tree": {
        "sha": "d0e54a820a23c4db4ae7e56136b161ca476da201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0e54a820a23c4db4ae7e56136b161ca476da201"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjo7AwAizb/xMiYJ6gto2egDDdElymirVYtPPGa82sPt2uz4ZgamqUlucqF33KY\nY7xzjXIuTPrJ9EBSHDRff06DhpOBcb8P7EszOjE0ZGxfTZ9Em1NSbv8oawZC5mQ/\nylktRlXyR8GAWjjbphJpmGQsbZwCGkxjlPAxVQNx75rwBLFLg6gB+Nl88L7kr1tv\nw7YKlTXrFrSZyLXc3c6C7jiFhpOSKx//KZ9wtggYcz2PexrvXGr8g8hsZztRAOno\nHUCQV/PYcTEsaW7HSBjVWR8OLUZF4HIdgxOYv+9O0+6KZpi/YUWimvWEVl4PmrPj\n1Q0A7dEds1kzxBERtFPAbQLmuaA1fUs4Ceg8Mdxurd3Z3iNNNwGiY+RybvFubHOo\niSMnSkx1LdUhh8QMH47AkSxRYOXJbuHNA4Fx00E0m7k2Ez31k62qkH93FVgLenWB\nRjIS8V9tv63un3TXgaGgXwDCZrMD5tYSTxnCbNbaLGlgV83rbFBWRVaZUOkjblL6\nHUp0g4qp\n=6yxg\n-----END PGP SIGNATURE-----",
        "payload": "tree d0e54a820a23c4db4ae7e56136b161ca476da201\nparent fa92912b4bb4629addcbfdfb7cc000be701614af\nauthor MarcoFalke <falke.marco@gmail.com> 1610430106 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1611818392 +0100\n\nrpc: Remove duplicate name and argNames from CRPCCommand\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa92912b4bb4629addcbfdfb7cc000be701614af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa92912b4bb4629addcbfdfb7cc000be701614af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa92912b4bb4629addcbfdfb7cc000be701614af"
      }
    ],
    "stats": {
      "total": 352,
      "additions": 175,
      "deletions": 177
    },
    "files": [
      {
        "sha": "0d9928d363f771c9fba9dbd8af202371c9575c8c",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
        "patch": "@@ -33,7 +33,7 @@ static RPCHelpMan rpcNestedTest_rpc()\n }\n \n static const CRPCCommand vRPCCommands[] = {\n-    {\"test\", \"rpcNestedTest\", &rpcNestedTest_rpc, {\"arg1\", \"arg2\", \"arg3\"}},\n+    {\"test\", &rpcNestedTest_rpc},\n };\n \n void RPCNestedTests::rpcNestedTests()"
      },
      {
        "sha": "e41a78f9178e025b06edad583b2f56a266754f1e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
        "patch": "@@ -2480,41 +2480,41 @@ void RegisterBlockchainRPCCommands(CRPCTable &t)\n {\n // clang-format off\n static const CRPCCommand commands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      {} },\n-    { \"blockchain\",         \"getchaintxstats\",        &getchaintxstats,        {\"nblocks\", \"blockhash\"} },\n-    { \"blockchain\",         \"getblockstats\",          &getblockstats,          {\"hash_or_height\", \"stats\"} },\n-    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       {} },\n-    { \"blockchain\",         \"getblockcount\",          &getblockcount,          {} },\n-    { \"blockchain\",         \"getblock\",               &getblock,               {\"blockhash\",\"verbosity|verbose\"} },\n-    { \"blockchain\",         \"getblockhash\",           &getblockhash,           {\"height\"} },\n-    { \"blockchain\",         \"getblockheader\",         &getblockheader,         {\"blockhash\",\"verbose\"} },\n-    { \"blockchain\",         \"getchaintips\",           &getchaintips,           {} },\n-    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          {} },\n-    { \"blockchain\",         \"getmempoolancestors\",    &getmempoolancestors,    {\"txid\",\"verbose\"} },\n-    { \"blockchain\",         \"getmempooldescendants\",  &getmempooldescendants,  {\"txid\",\"verbose\"} },\n-    { \"blockchain\",         \"getmempoolentry\",        &getmempoolentry,        {\"txid\"} },\n-    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         {} },\n-    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          {\"verbose\", \"mempool_sequence\"} },\n-    { \"blockchain\",         \"gettxout\",               &gettxout,               {\"txid\",\"n\",\"include_mempool\"} },\n-    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        {\"hash_type\"} },\n-    { \"blockchain\",         \"pruneblockchain\",        &pruneblockchain,        {\"height\"} },\n-    { \"blockchain\",         \"savemempool\",            &savemempool,            {} },\n-    { \"blockchain\",         \"verifychain\",            &verifychain,            {\"checklevel\",\"nblocks\"} },\n-\n-    { \"blockchain\",         \"preciousblock\",          &preciousblock,          {\"blockhash\"} },\n-    { \"blockchain\",         \"scantxoutset\",           &scantxoutset,           {\"action\", \"scanobjects\"} },\n-    { \"blockchain\",         \"getblockfilter\",         &getblockfilter,         {\"blockhash\", \"filtertype\"} },\n+{ //  category              actor (function)\n+  //  --------------------- ------------------------\n+    { \"blockchain\",         &getblockchaininfo,                  },\n+    { \"blockchain\",         &getchaintxstats,                    },\n+    { \"blockchain\",         &getblockstats,                      },\n+    { \"blockchain\",         &getbestblockhash,                   },\n+    { \"blockchain\",         &getblockcount,                      },\n+    { \"blockchain\",         &getblock,                           },\n+    { \"blockchain\",         &getblockhash,                       },\n+    { \"blockchain\",         &getblockheader,                     },\n+    { \"blockchain\",         &getchaintips,                       },\n+    { \"blockchain\",         &getdifficulty,                      },\n+    { \"blockchain\",         &getmempoolancestors,                },\n+    { \"blockchain\",         &getmempooldescendants,              },\n+    { \"blockchain\",         &getmempoolentry,                    },\n+    { \"blockchain\",         &getmempoolinfo,                     },\n+    { \"blockchain\",         &getrawmempool,                      },\n+    { \"blockchain\",         &gettxout,                           },\n+    { \"blockchain\",         &gettxoutsetinfo,                    },\n+    { \"blockchain\",         &pruneblockchain,                    },\n+    { \"blockchain\",         &savemempool,                        },\n+    { \"blockchain\",         &verifychain,                        },\n+\n+    { \"blockchain\",         &preciousblock,                      },\n+    { \"blockchain\",         &scantxoutset,                       },\n+    { \"blockchain\",         &getblockfilter,                     },\n \n     /* Not shown in help */\n-    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        {\"blockhash\"} },\n-    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        {\"blockhash\"} },\n-    { \"hidden\",             \"waitfornewblock\",        &waitfornewblock,        {\"timeout\"} },\n-    { \"hidden\",             \"waitforblock\",           &waitforblock,           {\"blockhash\",\"timeout\"} },\n-    { \"hidden\",             \"waitforblockheight\",     &waitforblockheight,     {\"height\",\"timeout\"} },\n-    { \"hidden\",             \"syncwithvalidationinterfacequeue\", &syncwithvalidationinterfacequeue, {} },\n-    { \"hidden\",             \"dumptxoutset\",           &dumptxoutset,           {\"path\"} },\n+    { \"hidden\",              &invalidateblock,                   },\n+    { \"hidden\",              &reconsiderblock,                   },\n+    { \"hidden\",              &waitfornewblock,                   },\n+    { \"hidden\",              &waitforblock,                      },\n+    { \"hidden\",              &waitforblockheight,                },\n+    { \"hidden\",              &syncwithvalidationinterfacequeue,  },\n+    { \"hidden\",              &dumptxoutset,                      },\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "c723f1d7eab0a709221f95e1f35367766ee0c83d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
        "patch": "@@ -1232,24 +1232,24 @@ void RegisterMiningRPCCommands(CRPCTable &t)\n {\n // clang-format off\n static const CRPCCommand commands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       {\"nblocks\",\"height\"} },\n-    { \"mining\",             \"getmininginfo\",          &getmininginfo,          {} },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  {\"txid\",\"dummy\",\"fee_delta\"} },\n-    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       {\"template_request\"} },\n-    { \"mining\",             \"submitblock\",            &submitblock,            {\"hexdata\",\"dummy\"} },\n-    { \"mining\",             \"submitheader\",           &submitheader,           {\"hexdata\"} },\n+{ //  category               actor (function)\n+  //  ---------------------  -----------------------\n+    { \"mining\",              &getnetworkhashps,        },\n+    { \"mining\",              &getmininginfo,           },\n+    { \"mining\",              &prioritisetransaction,   },\n+    { \"mining\",              &getblocktemplate,        },\n+    { \"mining\",              &submitblock,             },\n+    { \"mining\",              &submitheader,            },\n \n \n-    { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      {\"nblocks\",\"address\",\"maxtries\"} },\n-    { \"generating\",         \"generatetodescriptor\",   &generatetodescriptor,   {\"num_blocks\",\"descriptor\",\"maxtries\"} },\n-    { \"generating\",         \"generateblock\",          &generateblock,          {\"output\",\"transactions\"} },\n+    { \"generating\",          &generatetoaddress,       },\n+    { \"generating\",          &generatetodescriptor,    },\n+    { \"generating\",          &generateblock,           },\n \n-    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       {\"conf_target\", \"estimate_mode\"} },\n+    { \"util\",                &estimatesmartfee,        },\n \n-    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         {\"conf_target\", \"threshold\"} },\n-    { \"hidden\",             \"generate\",               &generate,               {} },\n+    { \"hidden\",              &estimaterawfee,          },\n+    { \"hidden\",              &generate,                },\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "b75a7b8d26f8223e2afbe576291e095da2c38e99",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
        "patch": "@@ -699,23 +699,23 @@ void RegisterMiscRPCCommands(CRPCTable &t)\n {\n // clang-format off\n static const CRPCCommand commands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          {\"mode\"} },\n-    { \"control\",            \"logging\",                &logging,                {\"include\", \"exclude\"}},\n-    { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} },\n-    { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\",\"address_type\"} },\n-    { \"util\",               \"deriveaddresses\",        &deriveaddresses,        {\"descriptor\", \"range\"} },\n-    { \"util\",               \"getdescriptorinfo\",      &getdescriptorinfo,      {\"descriptor\"} },\n-    { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n-    { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n-    { \"util\",               \"getindexinfo\",           &getindexinfo,           {\"index_name\"} },\n+{ //  category              actor (function)\n+  //  --------------------- ------------------------\n+    { \"control\",            &getmemoryinfo,           },\n+    { \"control\",            &logging,                 },\n+    { \"util\",               &validateaddress,         },\n+    { \"util\",               &createmultisig,          },\n+    { \"util\",               &deriveaddresses,         },\n+    { \"util\",               &getdescriptorinfo,       },\n+    { \"util\",               &verifymessage,           },\n+    { \"util\",               &signmessagewithprivkey,  },\n+    { \"util\",               &getindexinfo,            },\n \n     /* Not shown in help */\n-    { \"hidden\",             \"setmocktime\",            &setmocktime,            {\"timestamp\"}},\n-    { \"hidden\",             \"mockscheduler\",          &mockscheduler,          {\"delta_time\"}},\n-    { \"hidden\",             \"echo\",                   &echo,                   {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n-    { \"hidden\",             \"echojson\",               &echojson,               {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n+    { \"hidden\",             &setmocktime,             },\n+    { \"hidden\",             &mockscheduler,           },\n+    { \"hidden\",             &echo,                    },\n+    { \"hidden\",             &echojson,                },\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "47d77b341a663674be4cf056551e8cceedd9782d",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
        "patch": "@@ -941,24 +941,24 @@ void RegisterNetRPCCommands(CRPCTable &t)\n {\n // clang-format off\n static const CRPCCommand commands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     {} },\n-    { \"network\",            \"ping\",                   &ping,                   {} },\n-    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            {} },\n-    { \"network\",            \"addnode\",                &addnode,                {\"node\",\"command\"} },\n-    { \"network\",            \"disconnectnode\",         &disconnectnode,         {\"address\", \"nodeid\"} },\n-    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       {\"node\"} },\n-    { \"network\",            \"getnettotals\",           &getnettotals,           {} },\n-    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         {} },\n-    { \"network\",            \"setban\",                 &setban,                 {\"subnet\", \"command\", \"bantime\", \"absolute\"} },\n-    { \"network\",            \"listbanned\",             &listbanned,             {} },\n-    { \"network\",            \"clearbanned\",            &clearbanned,            {} },\n-    { \"network\",            \"setnetworkactive\",       &setnetworkactive,       {\"state\"} },\n-    { \"network\",            \"getnodeaddresses\",       &getnodeaddresses,       {\"count\"} },\n-\n-    { \"hidden\",             \"addconnection\",          &addconnection,          {\"address\", \"connection_type\"} },\n-    { \"hidden\",             \"addpeeraddress\",         &addpeeraddress,         {\"address\", \"port\"} },\n+{ //  category              actor\n+  //  --------------------- -----------------------\n+    { \"network\",             &getconnectioncount,      },\n+    { \"network\",             &ping,                    },\n+    { \"network\",             &getpeerinfo,             },\n+    { \"network\",             &addnode,                 },\n+    { \"network\",             &disconnectnode,          },\n+    { \"network\",             &getaddednodeinfo,        },\n+    { \"network\",             &getnettotals,            },\n+    { \"network\",             &getnetworkinfo,          },\n+    { \"network\",             &setban,                  },\n+    { \"network\",             &listbanned,              },\n+    { \"network\",             &clearbanned,             },\n+    { \"network\",             &setnetworkactive,        },\n+    { \"network\",             &getnodeaddresses,        },\n+\n+    { \"hidden\",              &addconnection,           },\n+    { \"hidden\",              &addpeeraddress,          },\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "031ed31da1fe5dc05789624b390392dfff37e71b",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
        "patch": "@@ -1859,27 +1859,27 @@ void RegisterRawTransactionRPCCommands(CRPCTable &t)\n {\n // clang-format off\n static const CRPCCommand commands[] =\n-{ //  category              name                            actor (function)            argNames\n-  //  --------------------- ------------------------        -----------------------     ----------\n-    { \"rawtransactions\",    \"getrawtransaction\",            &getrawtransaction,         {\"txid\",\"verbose\",\"blockhash\"} },\n-    { \"rawtransactions\",    \"createrawtransaction\",         &createrawtransaction,      {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n-    { \"rawtransactions\",    \"decoderawtransaction\",         &decoderawtransaction,      {\"hexstring\",\"iswitness\"} },\n-    { \"rawtransactions\",    \"decodescript\",                 &decodescript,              {\"hexstring\"} },\n-    { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"maxfeerate\"} },\n-    { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n-    { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },\n-    { \"rawtransactions\",    \"testmempoolaccept\",            &testmempoolaccept,         {\"rawtxs\",\"maxfeerate\"} },\n-    { \"rawtransactions\",    \"decodepsbt\",                   &decodepsbt,                {\"psbt\"} },\n-    { \"rawtransactions\",    \"combinepsbt\",                  &combinepsbt,               {\"txs\"} },\n-    { \"rawtransactions\",    \"finalizepsbt\",                 &finalizepsbt,              {\"psbt\", \"extract\"} },\n-    { \"rawtransactions\",    \"createpsbt\",                   &createpsbt,                {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n-    { \"rawtransactions\",    \"converttopsbt\",                &converttopsbt,             {\"hexstring\",\"permitsigdata\",\"iswitness\"} },\n-    { \"rawtransactions\",    \"utxoupdatepsbt\",               &utxoupdatepsbt,            {\"psbt\", \"descriptors\"} },\n-    { \"rawtransactions\",    \"joinpsbts\",                    &joinpsbts,                 {\"txs\"} },\n-    { \"rawtransactions\",    \"analyzepsbt\",                  &analyzepsbt,               {\"psbt\"} },\n-\n-    { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n-    { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },\n+{ //  category               actor (function)\n+  //  ---------------------  -----------------------\n+    { \"rawtransactions\",     &getrawtransaction,          },\n+    { \"rawtransactions\",     &createrawtransaction,       },\n+    { \"rawtransactions\",     &decoderawtransaction,       },\n+    { \"rawtransactions\",     &decodescript,               },\n+    { \"rawtransactions\",     &sendrawtransaction,         },\n+    { \"rawtransactions\",     &combinerawtransaction,      },\n+    { \"rawtransactions\",     &signrawtransactionwithkey,  },\n+    { \"rawtransactions\",     &testmempoolaccept,          },\n+    { \"rawtransactions\",     &decodepsbt,                 },\n+    { \"rawtransactions\",     &combinepsbt,                },\n+    { \"rawtransactions\",     &finalizepsbt,               },\n+    { \"rawtransactions\",     &createpsbt,                 },\n+    { \"rawtransactions\",     &converttopsbt,              },\n+    { \"rawtransactions\",     &utxoupdatepsbt,             },\n+    { \"rawtransactions\",     &joinpsbts,                  },\n+    { \"rawtransactions\",     &analyzepsbt,                },\n+\n+    { \"blockchain\",          &gettxoutproof,              },\n+    { \"blockchain\",          &verifytxoutproof,           },\n };\n // clang-format on\n     for (const auto& c : commands) {"
      },
      {
        "sha": "9a9b3713f32d9b57a736345479f193fa26cfaae8",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
        "patch": "@@ -249,13 +249,13 @@ static RPCHelpMan getrpcinfo()\n \n // clang-format off\n static const CRPCCommand vRPCCommands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n+{ //  category               actor (function)\n+  //  ---------------------  -----------------------\n     /* Overall control/query calls */\n-    { \"control\",            \"getrpcinfo\",             &getrpcinfo,             {}  },\n-    { \"control\",            \"help\",                   &help,                   {\"command\"}  },\n-    { \"control\",            \"stop\",                   &stop,                   {\"wait\"}  },\n-    { \"control\",            \"uptime\",                 &uptime,                 {}  },\n+    { \"control\",             &getrpcinfo,             },\n+    { \"control\",             &help,                   },\n+    { \"control\",             &stop,                   },\n+    { \"control\",             &uptime,                 },\n };\n // clang-format on\n "
      },
      {
        "sha": "fe5a791e1e395a9f05401080f560f5e59e629d17",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
        "patch": "@@ -103,16 +103,14 @@ class CRPCCommand\n     }\n \n     //! Simplified constructor taking plain RpcMethodFnType function pointer.\n-    CRPCCommand(std::string category, std::string name_in, RpcMethodFnType fn, std::vector<std::string> args_in)\n+    CRPCCommand(std::string category, RpcMethodFnType fn)\n         : CRPCCommand(\n               category,\n               fn().m_name,\n               [fn](const JSONRPCRequest& request, UniValue& result, bool) { result = fn().HandleRequest(request); return true; },\n               fn().GetArgNames(),\n               intptr_t(fn))\n     {\n-        CHECK_NONFATAL(fn().m_name == name_in);\n-        CHECK_NONFATAL(fn().GetArgNames() == args_in);\n     }\n \n     std::string category;"
      },
      {
        "sha": "46de273d63538a3f2e262434bf43dc6e72a37b6e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 63,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
        "patch": "@@ -4557,69 +4557,69 @@ Span<const CRPCCommand> GetWalletRPCCommands()\n {\n // clang-format off\n static const CRPCCommand commands[] =\n-{ //  category              name                                actor (function)                argNames\n-    //  --------------------- ------------------------          -----------------------         ----------\n-    { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n-    { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n-    { \"wallet\",             \"abortrescan\",                      &abortrescan,                   {} },\n-    { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n-    { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n-    { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n-    { \"wallet\",             \"psbtbumpfee\",                      &psbtbumpfee,                   {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\", \"descriptors\", \"load_on_startup\"} },\n-    { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n-    { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n-    { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n-    { \"wallet\",             \"getaddressesbylabel\",              &getaddressesbylabel,           {\"label\"} },\n-    { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n-    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"dummy\",\"minconf\",\"include_watchonly\",\"avoid_reuse\"} },\n-    { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"label\",\"address_type\"} },\n-    { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n-    { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n-    { \"wallet\",             \"getreceivedbylabel\",               &getreceivedbylabel,            {\"label\",\"minconf\"} },\n-    { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\",\"verbose\"} },\n-    { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {} },\n-    { \"wallet\",             \"getbalances\",                      &getbalances,                   {} },\n-    { \"wallet\",             \"getwalletinfo\",                    &getwalletinfo,                 {} },\n-    { \"wallet\",             \"importaddress\",                    &importaddress,                 {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n-    { \"wallet\",             \"importdescriptors\",                &importdescriptors,             {\"requests\"} },\n-    { \"wallet\",             \"importmulti\",                      &importmulti,                   {\"requests\",\"options\"} },\n-    { \"wallet\",             \"importprivkey\",                    &importprivkey,                 {\"privkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n-    { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n-    { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n-    { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n-    { \"wallet\",             \"listdescriptors\",                  &listdescriptors,               {} },\n-    { \"wallet\",             \"listlabels\",                       &listlabels,                    {\"purpose\"} },\n-    { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n-    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n-    { \"wallet\",             \"listreceivedbylabel\",              &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n-    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"label|dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n-    { \"wallet\",             \"listwalletdir\",                    &listwalletdir,                 {} },\n-    { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n-    { \"wallet\",             \"loadwallet\",                       &loadwallet,                    {\"filename\", \"load_on_startup\"} },\n-    { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n-    { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n-    { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n-    { \"wallet\",             \"send\",                             &send,                          {\"outputs\",\"conf_target\",\"estimate_mode\",\"fee_rate\",\"options\"} },\n-    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"fee_rate\",\"verbose\"} },\n-    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"avoid_reuse\",\"fee_rate\",\"verbose\"} },\n-    { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n-    { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n-    { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n-    { \"wallet\",             \"setwalletflag\",                    &setwalletflag,                 {\"flag\",\"value\"} },\n-    { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n-    { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n-    { \"wallet\",             \"unloadwallet\",                     &unloadwallet,                  {\"wallet_name\", \"load_on_startup\"} },\n-    { \"wallet\",             \"upgradewallet\",                    &upgradewallet,                 {\"version\"} },\n-    { \"wallet\",             \"walletcreatefundedpsbt\",           &walletcreatefundedpsbt,        {\"inputs\",\"outputs\",\"locktime\",\"options\",\"bip32derivs\"} },\n-    { \"wallet\",             \"walletlock\",                       &walletlock,                    {} },\n-    { \"wallet\",             \"walletpassphrase\",                 &walletpassphrase,              {\"passphrase\",\"timeout\"} },\n-    { \"wallet\",             \"walletpassphrasechange\",           &walletpassphrasechange,        {\"oldpassphrase\",\"newpassphrase\"} },\n-    { \"wallet\",             \"walletprocesspsbt\",                &walletprocesspsbt,             {\"psbt\",\"sign\",\"sighashtype\",\"bip32derivs\"} },\n+{ //  category              actor (function)\n+  //  ------------------    ------------------------\n+    { \"rawtransactions\",    &fundrawtransaction,             },\n+    { \"wallet\",             &abandontransaction,             },\n+    { \"wallet\",             &abortrescan,                    },\n+    { \"wallet\",             &addmultisigaddress,             },\n+    { \"wallet\",             &backupwallet,                   },\n+    { \"wallet\",             &bumpfee,                        },\n+    { \"wallet\",             &psbtbumpfee,                    },\n+    { \"wallet\",             &createwallet,                   },\n+    { \"wallet\",             &dumpprivkey,                    },\n+    { \"wallet\",             &dumpwallet,                     },\n+    { \"wallet\",             &encryptwallet,                  },\n+    { \"wallet\",             &getaddressesbylabel,            },\n+    { \"wallet\",             &getaddressinfo,                 },\n+    { \"wallet\",             &getbalance,                     },\n+    { \"wallet\",             &getnewaddress,                  },\n+    { \"wallet\",             &getrawchangeaddress,            },\n+    { \"wallet\",             &getreceivedbyaddress,           },\n+    { \"wallet\",             &getreceivedbylabel,             },\n+    { \"wallet\",             &gettransaction,                 },\n+    { \"wallet\",             &getunconfirmedbalance,          },\n+    { \"wallet\",             &getbalances,                    },\n+    { \"wallet\",             &getwalletinfo,                  },\n+    { \"wallet\",             &importaddress,                  },\n+    { \"wallet\",             &importdescriptors,              },\n+    { \"wallet\",             &importmulti,                    },\n+    { \"wallet\",             &importprivkey,                  },\n+    { \"wallet\",             &importprunedfunds,              },\n+    { \"wallet\",             &importpubkey,                   },\n+    { \"wallet\",             &importwallet,                   },\n+    { \"wallet\",             &keypoolrefill,                  },\n+    { \"wallet\",             &listaddressgroupings,           },\n+    { \"wallet\",             &listdescriptors,                },\n+    { \"wallet\",             &listlabels,                     },\n+    { \"wallet\",             &listlockunspent,                },\n+    { \"wallet\",             &listreceivedbyaddress,          },\n+    { \"wallet\",             &listreceivedbylabel,            },\n+    { \"wallet\",             &listsinceblock,                 },\n+    { \"wallet\",             &listtransactions,               },\n+    { \"wallet\",             &listunspent,                    },\n+    { \"wallet\",             &listwalletdir,                  },\n+    { \"wallet\",             &listwallets,                    },\n+    { \"wallet\",             &loadwallet,                     },\n+    { \"wallet\",             &lockunspent,                    },\n+    { \"wallet\",             &removeprunedfunds,              },\n+    { \"wallet\",             &rescanblockchain,               },\n+    { \"wallet\",             &send,                           },\n+    { \"wallet\",             &sendmany,                       },\n+    { \"wallet\",             &sendtoaddress,                  },\n+    { \"wallet\",             &sethdseed,                      },\n+    { \"wallet\",             &setlabel,                       },\n+    { \"wallet\",             &settxfee,                       },\n+    { \"wallet\",             &setwalletflag,                  },\n+    { \"wallet\",             &signmessage,                    },\n+    { \"wallet\",             &signrawtransactionwithwallet,   },\n+    { \"wallet\",             &unloadwallet,                   },\n+    { \"wallet\",             &upgradewallet,                  },\n+    { \"wallet\",             &walletcreatefundedpsbt,         },\n+    { \"wallet\",             &walletlock,                     },\n+    { \"wallet\",             &walletpassphrase,               },\n+    { \"wallet\",             &walletpassphrasechange,         },\n+    { \"wallet\",             &walletprocesspsbt,              },\n };\n // clang-format on\n     return MakeSpan(commands);"
      },
      {
        "sha": "81859f924f676ff7e2ed9a2f775da41aaa475d33",
        "filename": "src/zmq/zmqrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/zmq/zmqrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204/src/zmq/zmqrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.cpp?ref=fa04f9b4ddffc5ef23c2ee7f3cc72a7c2ae49204",
        "patch": "@@ -52,9 +52,9 @@ static RPCHelpMan getzmqnotifications()\n }\n \n const CRPCCommand commands[] =\n-{ //  category              name                                actor (function)                argNames\n-  //  -----------------     ------------------------            -----------------------         ----------\n-    { \"zmq\",                \"getzmqnotifications\",              &getzmqnotifications,           {} },\n+{ //  category           actor (function)\n+  //  -----------------  -----------------------\n+    { \"zmq\",             &getzmqnotifications,    },\n };\n \n } // anonymous namespace"
      }
    ]
  }
]