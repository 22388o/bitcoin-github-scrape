[
  {
    "sha": "907a2aa4c78833ce93455567ae10ff2f506e752e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDdhMmFhNGM3ODgzM2NlOTM0NTU1NjdhZTEwZmYyZjUwNmU3NTJl",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-02-15T23:27:57Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-02-18T22:13:39Z"
      },
      "message": "Internal RNG for approximateBestSubset to prevent degenerate behavior.\n\nThis fixes test_bitcoin failures on openbsd reported by dhill on IRC.\n\n  On some systems rand() is a simple LCG over 2^31 and so it produces\nan even-odd sequence.  ApproximateBestSubset was only using the least\nsignificant bit and so every run of the iterative solver would be the\nsame for some inputs, resulting in some pretty dumb decisions.\n\nUsing something other than the least significant bit would paper over\nthe issue but who knows what other way a system's rand() might get us\nhere.  Instead we use an internal RNG with a period of something like\n2^60 which is well behaved.  This also makes it possible to make the\nselection deterministic for the tests, if we wanted to implement that.",
      "tree": {
        "sha": "ac144e428ed415231c36e6580c2cf9b69d1bd821",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac144e428ed415231c36e6580c2cf9b69d1bd821"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/907a2aa4c78833ce93455567ae10ff2f506e752e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/907a2aa4c78833ce93455567ae10ff2f506e752e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/907a2aa4c78833ce93455567ae10ff2f506e752e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/907a2aa4c78833ce93455567ae10ff2f506e752e/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f0fa79db290d5139c27409055b2035099afa6fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f0fa79db290d5139c27409055b2035099afa6fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f0fa79db290d5139c27409055b2035099afa6fd"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 111,
      "deletions": 13
    },
    "files": [
      {
        "sha": "1b0ccad511880ca7515e9f1809a7d288db1484ae",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/907a2aa4c78833ce93455567ae10ff2f506e752e/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/907a2aa4c78833ce93455567ae10ff2f506e752e/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=907a2aa4c78833ce93455567ae10ff2f506e752e",
        "patch": "@@ -261,4 +261,66 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n+BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)\n+{\n+    // Expected results for the determinstic seed.\n+    const uint32_t exp_vals[11] = {  91632771U,1889679809U,3842137544U,3256031132U,\n+                                   1761911779U, 489223532U,2692793790U,2737472863U,\n+                                   2796262275U,1309899767U,840571781U};\n+    // Expected 0s in rand()%(idx+2) for the determinstic seed.\n+    const int exp_count[9] = {5013,3346,2415,1972,1644,1386,1176,1096,1009};\n+    int i;\n+    int count=0;\n+\n+    seed_insecure_rand();\n+\n+    //Does the non-determistic rand give us results that look too like the determinstic one?\n+    for (i=0;i<10;i++)\n+    {\n+        int match = 0;\n+        uint32_t rval = insecure_rand();\n+        for (int j=0;j<11;j++)match |= rval==exp_vals[j];\n+        count += match;\n+    }\n+    // sum(binomial(10,i)*(11/(2^32))^i*(1-(11/(2^32)))^(10-i),i,0,4) ~= 1-1/2^134.73\n+    // So _very_ unlikely to throw a false failure here.\n+    BOOST_CHECK(count<=4);\n+\n+    for (int mod=2;mod<11;mod++)\n+    {\n+        int mask = 1;\n+        // Really rough binomal confidence approximation.\n+        int err = 30*10000./mod*sqrt((1./mod*(1-1./mod))/10000.);\n+        //mask is 2^ceil(log2(mod))-1\n+        while(mask<mod-1)mask=(mask<<1)+1;\n+\n+        count = 0;\n+        //How often does it get a zero from the uniform range [0,mod)?\n+        for (i=0;i<10000;i++)\n+        {\n+            uint32_t rval;\n+            do{\n+                rval=insecure_rand()&mask;\n+            }while(rval>=(uint32_t)mod);\n+            count += rval==0;\n+        }\n+        BOOST_CHECK(count<=10000/mod+err);\n+        BOOST_CHECK(count>=10000/mod-err);\n+    }\n+\n+    seed_insecure_rand(true);\n+\n+    for (i=0;i<11;i++)\n+    {\n+        BOOST_CHECK_EQUAL(insecure_rand(),exp_vals[i]);\n+    }\n+\n+    for (int mod=2;mod<11;mod++)\n+    {\n+        count = 0;\n+        for (i=0;i<10000;i++) count += insecure_rand()%mod==0;\n+        BOOST_CHECK_EQUAL(count,exp_count[mod-2]);\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "49ac3510f3a41c15fd92d177ae58b9e73c831bb8",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/907a2aa4c78833ce93455567ae10ff2f506e752e/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/907a2aa4c78833ce93455567ae10ff2f506e752e/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=907a2aa4c78833ce93455567ae10ff2f506e752e",
        "patch": "@@ -1276,12 +1276,26 @@ void AddTimeData(const CNetAddr& ip, int64 nTime)\n     }\n }\n \n-\n-\n-\n-\n-\n-\n+uint32_t insecure_rand_Rz = 11;\n+uint32_t insecure_rand_Rw = 11;\n+void seed_insecure_rand(bool fDeterministic)\n+{\n+    //The seed values have some unlikely fixed points which we avoid.\n+    if(fDeterministic)\n+    {\n+        insecure_rand_Rz = insecure_rand_Rw = 11;\n+    } else {\n+        uint32_t tmp;\n+        do{\n+            RAND_bytes((unsigned char*)&tmp,4);\n+        }while(tmp==0 || tmp==0x9068ffffU);\n+        insecure_rand_Rz=tmp;\n+        do{\n+            RAND_bytes((unsigned char*)&tmp,4);\n+        }while(tmp==0 || tmp==0x464fffffU);\n+        insecure_rand_Rw=tmp;\n+    }\n+}\n \n string FormatVersion(int nVersion)\n {"
      },
      {
        "sha": "5cdca37e8b3be4a9005dae445871b0ec2ffe3adf",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/907a2aa4c78833ce93455567ae10ff2f506e752e/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/907a2aa4c78833ce93455567ae10ff2f506e752e/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=907a2aa4c78833ce93455567ae10ff2f506e752e",
        "patch": "@@ -403,13 +403,27 @@ bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n  */\n bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n+/**\n+ * MWC RNG of George Marsaglia\n+ * This is intended to be fast. It has a period of 2^59.3, though the\n+ * least significant 16 bits only have a period of about 2^30.1.\n+ *\n+ * @return random value\n+ */\n+extern uint32_t insecure_rand_Rz;\n+extern uint32_t insecure_rand_Rw;\n+static inline uint32_t insecure_rand(void)\n+{\n+  insecure_rand_Rz=36969*(insecure_rand_Rz&65535)+(insecure_rand_Rz>>16);\n+  insecure_rand_Rw=18000*(insecure_rand_Rw&65535)+(insecure_rand_Rw>>16);\n+  return (insecure_rand_Rw<<16)+insecure_rand_Rz;\n+}\n \n-\n-\n-\n-\n-\n-\n+/**\n+ * Seed insecure_rand using the random pool.\n+ * @param Deterministic Use a determinstic seed\n+ */\n+void seed_insecure_rand(bool fDeterministic=false);\n \n /** Median filter over a stream of values.\n  * Returns the median of the last N numbers"
      },
      {
        "sha": "067473d0875e04ebcc41999b65cc5c913eb8bc38",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/907a2aa4c78833ce93455567ae10ff2f506e752e/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/907a2aa4c78833ce93455567ae10ff2f506e752e/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=907a2aa4c78833ce93455567ae10ff2f506e752e",
        "patch": "@@ -973,6 +973,8 @@ static void ApproximateBestSubset(vector<pair<int64, pair<const CWalletTx*,unsig\n     vfBest.assign(vValue.size(), true);\n     nBest = nTotalLower;\n \n+    seed_insecure_rand();\n+\n     for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n     {\n         vfIncluded.assign(vValue.size(), false);\n@@ -982,7 +984,13 @@ static void ApproximateBestSubset(vector<pair<int64, pair<const CWalletTx*,unsig\n         {\n             for (unsigned int i = 0; i < vValue.size(); i++)\n             {\n-                if (nPass == 0 ? rand() % 2 : !vfIncluded[i])\n+                //The solver here uses a randomized algorithm,\n+                //the randomness serves no real security purpose but is just\n+                //needed to prevent degenerate behavior and it is important\n+                //that the rng fast. We do not use a constant random sequence,\n+                //because there may be some privacy improvement by making\n+                //the selection random.\n+                if (nPass == 0 ? insecure_rand()&1 : !vfIncluded[i])\n                 {\n                     nTotal += vValue[i].first;\n                     vfIncluded[i] = true;"
      }
    ]
  }
]