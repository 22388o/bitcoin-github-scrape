[
  {
    "sha": "eb682c5700e7a9176d0104d470b83ff9aa3589e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjY4MmM1NzAwZTdhOTE3NmQwMTA0ZDQ3MGI4M2ZmOWFhMzU4OWU4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-04-28T23:08:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-07-11T09:41:12Z"
      },
      "message": "util: Add ReadSettings and WriteSettings functions\n\nCurrently unused, but includes tests.",
      "tree": {
        "sha": "b93a21cb97ffaa978e4fd3903cc481be65cf7017",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b93a21cb97ffaa978e4fd3903cc481be65cf7017"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb682c5700e7a9176d0104d470b83ff9aa3589e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb682c5700e7a9176d0104d470b83ff9aa3589e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb682c5700e7a9176d0104d470b83ff9aa3589e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb682c5700e7a9176d0104d470b83ff9aa3589e8/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a42631775afadf7e8cf07e917f733bd54dc3080e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a42631775afadf7e8cf07e917f733bd54dc3080e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a42631775afadf7e8cf07e917f733bd54dc3080e"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 149,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1a2d775f498c636dfa778399b5e9927ab704337c",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb682c5700e7a9176d0104d470b83ff9aa3589e8/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb682c5700e7a9176d0104d470b83ff9aa3589e8/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=eb682c5700e7a9176d0104d470b83ff9aa3589e8",
        "patch": "@@ -12,10 +12,90 @@\n #include <univalue.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n+#include <util/system.h>\n #include <vector>\n \n+inline bool operator==(const util::SettingsValue& a, const util::SettingsValue& b)\n+{\n+    return a.write() == b.write();\n+}\n+\n+inline std::ostream& operator<<(std::ostream& os, const util::SettingsValue& value)\n+{\n+    os << value.write();\n+    return os;\n+}\n+\n+inline std::ostream& operator<<(std::ostream& os, const std::pair<std::string, util::SettingsValue>& kv)\n+{\n+    util::SettingsValue out(util::SettingsValue::VOBJ);\n+    out.__pushKV(kv.first, kv.second);\n+    os << out.write();\n+    return os;\n+}\n+\n+inline void WriteText(const fs::path& path, const std::string& text)\n+{\n+    fsbridge::ofstream file;\n+    file.open(path);\n+    file << text;\n+}\n+\n BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n \n+BOOST_AUTO_TEST_CASE(ReadWrite)\n+{\n+    fs::path path = GetDataDir() / \"settings.json\";\n+\n+    WriteText(path, R\"({\n+        \"string\": \"string\",\n+        \"num\": 5,\n+        \"bool\": true,\n+        \"null\": null\n+    })\");\n+\n+    std::map<std::string, util::SettingsValue> expected{\n+        {\"string\", \"string\"},\n+        {\"num\", 5},\n+        {\"bool\", true},\n+        {\"null\", {}},\n+    };\n+\n+    // Check file read.\n+    std::map<std::string, util::SettingsValue> values;\n+    std::vector<std::string> errors;\n+    BOOST_CHECK(util::ReadSettings(path, values, errors));\n+    BOOST_CHECK_EQUAL_COLLECTIONS(values.begin(), values.end(), expected.begin(), expected.end());\n+    BOOST_CHECK(errors.empty());\n+\n+    // Check no errors if file doesn't exist.\n+    fs::remove(path);\n+    BOOST_CHECK(util::ReadSettings(path, values, errors));\n+    BOOST_CHECK(values.empty());\n+    BOOST_CHECK(errors.empty());\n+\n+    // Check duplicate keys not allowed\n+    WriteText(path, R\"({\n+        \"dupe\": \"string\",\n+        \"dupe\": \"dupe\"\n+    })\");\n+    BOOST_CHECK(!util::ReadSettings(path, values, errors));\n+    std::vector<std::string> dup_keys = {strprintf(\"Found duplicate key dupe in settings file %s\", path.string())};\n+    BOOST_CHECK_EQUAL_COLLECTIONS(errors.begin(), errors.end(), dup_keys.begin(), dup_keys.end());\n+\n+    // Check non-kv json files not allowed\n+    WriteText(path, R\"(\"non-kv\")\");\n+    BOOST_CHECK(!util::ReadSettings(path, values, errors));\n+    std::vector<std::string> non_kv = {strprintf(\"Found non-object value \\\"non-kv\\\" in settings file %s\", path.string())};\n+    BOOST_CHECK_EQUAL_COLLECTIONS(errors.begin(), errors.end(), non_kv.begin(), non_kv.end());\n+\n+    // Check invalid json not allowed\n+    WriteText(path, R\"(invalid json)\");\n+    BOOST_CHECK(!util::ReadSettings(path, values, errors));\n+    std::vector<std::string> fail_parse = {strprintf(\"Unable to parse settings file %s\", path.string())};\n+    BOOST_CHECK_EQUAL_COLLECTIONS(errors.begin(), errors.end(), fail_parse.begin(), fail_parse.end());\n+}\n+\n //! Check settings struct contents against expected json strings.\n static void CheckValues(const util::Settings& settings, const std::string& single_val, const std::string& list_val)\n {"
      },
      {
        "sha": "34894e994e2571e70c5dbc052794755a9a81fbe1",
        "filename": "src/util/settings.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb682c5700e7a9176d0104d470b83ff9aa3589e8/src/util/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb682c5700e7a9176d0104d470b83ff9aa3589e8/src/util/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.cpp?ref=eb682c5700e7a9176d0104d470b83ff9aa3589e8",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <util/settings.h>\n \n+#include <tinyformat.h>\n #include <univalue.h>\n \n namespace util {\n@@ -49,6 +50,62 @@ static void MergeSettings(const Settings& settings, const std::string& section,\n }\n } // namespace\n \n+bool ReadSettings(const fs::path& path, std::map<std::string, SettingsValue>& values, std::vector<std::string>& errors)\n+{\n+    values.clear();\n+    errors.clear();\n+\n+    fsbridge::ifstream file;\n+    file.open(path);\n+    if (!file.is_open()) return true; // Ok for file not to exist.\n+\n+    SettingsValue in;\n+    if (!in.read(std::string{std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>()})) {\n+        errors.emplace_back(strprintf(\"Unable to parse settings file %s\", path.string()));\n+        return false;\n+    }\n+\n+    if (file.fail()) {\n+        errors.emplace_back(strprintf(\"Failed reading settings file %s\", path.string()));\n+        return false;\n+    }\n+    file.close(); // Done with file descriptor. Release while copying data.\n+\n+    if (!in.isObject()) {\n+        errors.emplace_back(strprintf(\"Found non-object value %s in settings file %s\", in.write(), path.string()));\n+        return false;\n+    }\n+\n+    const std::vector<std::string>& in_keys = in.getKeys();\n+    const std::vector<SettingsValue>& in_values = in.getValues();\n+    for (size_t i = 0; i < in_keys.size(); ++i) {\n+        auto inserted = values.emplace(in_keys[i], in_values[i]);\n+        if (!inserted.second) {\n+            errors.emplace_back(strprintf(\"Found duplicate key %s in settings file %s\", in_keys[i], path.string()));\n+        }\n+    }\n+    return errors.empty();\n+}\n+\n+bool WriteSettings(const fs::path& path,\n+    const std::map<std::string, SettingsValue>& values,\n+    std::vector<std::string>& errors)\n+{\n+    SettingsValue out(SettingsValue::VOBJ);\n+    for (const auto& value : values) {\n+        out.__pushKV(value.first, value.second);\n+    }\n+    fsbridge::ofstream file;\n+    file.open(path);\n+    if (file.fail()) {\n+        errors.emplace_back(strprintf(\"Error: Unable to open settings file %s for writing\", path.string()));\n+        return false;\n+    }\n+    file << out.write(/* prettyIndent= */ 1, /* indentLevel= */ 4) << std::endl;\n+    file.close();\n+    return true;\n+}\n+\n SettingsValue GetSetting(const Settings& settings,\n     const std::string& section,\n     const std::string& name,"
      },
      {
        "sha": "ee160e1ac873d074b0c75fe32ebcd35f4d87e974",
        "filename": "src/util/settings.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb682c5700e7a9176d0104d470b83ff9aa3589e8/src/util/settings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb682c5700e7a9176d0104d470b83ff9aa3589e8/src/util/settings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.h?ref=eb682c5700e7a9176d0104d470b83ff9aa3589e8",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_UTIL_SETTINGS_H\n #define BITCOIN_UTIL_SETTINGS_H\n \n+#include <fs.h>\n+\n #include <map>\n #include <string>\n #include <vector>\n@@ -35,6 +37,16 @@ struct Settings {\n     std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n };\n \n+//! Read settings file.\n+bool ReadSettings(const fs::path& path,\n+    std::map<std::string, SettingsValue>& values,\n+    std::vector<std::string>& errors);\n+\n+//! Write settings file.\n+bool WriteSettings(const fs::path& path,\n+    const std::map<std::string, SettingsValue>& values,\n+    std::vector<std::string>& errors);\n+\n //! Get settings value from combined sources: forced settings, command line\n //! arguments and the read-only config file.\n //!"
      }
    ]
  },
  {
    "sha": "9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzY5Y2ZlNGM1NGUzOGVkZDJmNTQzMDNiZTJmOGE1M2RjZjViYWQ4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-04-28T23:08:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-07-11T09:41:12Z"
      },
      "message": "Add <datadir>/settings.json persistent settings storage.\n\nPersistent settings are used in followup PRs #15936 to unify gui settings\nbetween bitcoin-qt and bitcoind, and #15937 to add a load_on_startup flag to\nthe loadwallet RPC and maintain a dynamic list of wallets that should be loaded\non startup that also can be shared between bitcoind and bitcoin-qt.",
      "tree": {
        "sha": "3480cdc4b02a6c893b0f756b8a31319351dc6b2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3480cdc4b02a6c893b0f756b8a31319351dc6b2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb682c5700e7a9176d0104d470b83ff9aa3589e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb682c5700e7a9176d0104d470b83ff9aa3589e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb682c5700e7a9176d0104d470b83ff9aa3589e8"
      }
    ],
    "stats": {
      "total": 261,
      "additions": 255,
      "deletions": 6
    },
    "files": [
      {
        "sha": "547582632979d1cdc972c83691d1b9d5ae4b48e8",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -50,14 +50,15 @@ Subdirectory       | File(s)               | Description\n `indexes/blockfilter/basic/`    | `fltrNNNNN.dat`<sup>[\\[2\\]](#note2)</sup> | Blockfilter index filters for the basic filtertype; *optional*, used if `-blockfilterindex=basic`\n `wallets/`         |                       | [Contains wallets](#multi-wallet-environment); can be specified by `-walletdir` option; if `wallets/` subdirectory does not exist, a wallet resides in the data directory\n `./`               | `banlist.dat`         | Stores the IPs/subnets of banned nodes\n-`./`               | `bitcoin.conf`        | Contains [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`; can be specified by `-conf` option\n+`./`               | `bitcoin.conf`        | User-defined [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`. File is not written to by the software and must be created manually. Path can be specified by `-conf` option\n `./`               | `bitcoind.pid`        | Stores the process ID (PID) of `bitcoind` or `bitcoin-qt` while running; created at start and deleted on shutdown; can be specified by `-pid` option\n `./`               | `debug.log`           | Contains debug information and general logging generated by `bitcoind` or `bitcoin-qt`; can be specified by `-debuglogfile` option\n `./`               | `fee_estimates.dat`   | Stores statistics used to estimate minimum transaction fees and priorities required for confirmation\n `./`               | `guisettings.ini.bak` | Backup of former [GUI settings](#gui-settings) after `-resetguisettings` option is used\n `./`               | `mempool.dat`         | Dump of the mempool's transactions\n `./`               | `onion_private_key`   | Cached Tor hidden service private key for `-listenonion` option\n `./`               | `peers.dat`           | Peer IP address database (custom format)\n+`./`               | `settings.json`       | Read-write settings set through GUI or RPC interfaces, augmenting manual settings from [bitcoin.conf](bitcoin-conf.md). File is created automatically if read-write settings storage is not disabled with `-nosettings` option. Path can be specified with `-settings` option\n `./`               | `.cookie`             | Session RPC authentication cookie; if used, created at start and deleted on shutdown; can be specified by `-rpccookiefile` option\n `./`               | `.lock`               | Data directory lock file\n "
      },
      {
        "sha": "b04cc12059c02ec083230ba41ebaa65c00b5443f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -101,6 +101,11 @@ static bool AppInit(int argc, char* argv[])\n             }\n         }\n \n+        if (!gArgs.InitSettings(error)) {\n+            InitError(Untranslated(error));\n+            return false;\n+        }\n+\n         // -server defaults to true for bitcoind but not for the GUI so do this here\n         gArgs.SoftSetBoolArg(\"-server\", true);\n         // Set this early so that parameter interactions go to console"
      },
      {
        "sha": "9308070dd8026adcb0a79e78101a2f21ce5ca03a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -397,7 +397,7 @@ void SetupServerArgs(NodeContext& node)\n #endif\n     gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Automatic broadcast and rebroadcast of any transactions from inbound peers is disabled, unless the peer has the 'forcerelay' permission. RPC transactions are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify path to read-only configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -418,6 +418,7 @@ void SetupServerArgs(NodeContext& node)\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-settings=<file>\", strprintf(\"Specify path to dynamic settings data file. Can be disabled with -nosettings. File is written at runtime and not meant to be edited by users (use %s instead for custom settings). Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME, BITCOIN_SETTINGS_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #ifndef WIN32\n     gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #else"
      },
      {
        "sha": "33f0dac2632327d3c594211f2271b51e013c4e70",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -66,6 +66,7 @@ class NodeImpl : public Node\n     bool softSetArg(const std::string& arg, const std::string& value) override { return gArgs.SoftSetArg(arg, value); }\n     bool softSetBoolArg(const std::string& arg, bool value) override { return gArgs.SoftSetBoolArg(arg, value); }\n     void selectParams(const std::string& network) override { SelectParams(network); }\n+    bool initSettings(std::string& error) override { return gArgs.InitSettings(error); }\n     uint64_t getAssumedBlockchainSize() override { return Params().AssumedBlockchainSize(); }\n     uint64_t getAssumedChainStateSize() override { return Params().AssumedChainStateSize(); }\n     std::string getNetwork() override { return Params().NetworkIDString(); }"
      },
      {
        "sha": "a9680c42b5157caae9b3c8e2f4816c2a7f4ca685",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -66,6 +66,11 @@ class Node\n     //! Choose network parameters.\n     virtual void selectParams(const std::string& network) = 0;\n \n+    //! Read and update <datadir>/settings.json file with saved settings. This\n+    //! needs to be called after selectParams() because the settings file\n+    //! location is network-specific.\n+    virtual bool initSettings(std::string& error) = 0;\n+\n     //! Get the (assumed) blockchain size.\n     virtual uint64_t getAssumedBlockchainSize() = 0;\n "
      },
      {
        "sha": "fe6b01ff721014a75b74b03e8a2e85c7df7ea47a",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -528,6 +528,11 @@ int GuiMain(int argc, char* argv[])\n     // Parse URIs on command line -- this can affect Params()\n     PaymentServer::ipcParseCommandLine(*node, argc, argv);\n #endif\n+    if (!node->initSettings(error)) {\n+        node->initError(Untranslated(error));\n+        QMessageBox::critical(nullptr, PACKAGE_NAME, QObject::tr(\"Error initializing settings: %1\").arg(QString::fromStdString(error)));\n+        return EXIT_FAILURE;\n+    }\n \n     QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(Params().NetworkIDString()));\n     assert(!networkStyle.isNull());"
      },
      {
        "sha": "cc2a5fcdbd39ec09d2907772a3f8bc263aac9771",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -9,6 +9,7 @@\n #include <key.h>  // For CKey\n #include <optional.h>\n #include <sync.h>\n+#include <test/util/logging.h>\n #include <test/util/setup_common.h>\n #include <test/util/str.h>\n #include <uint256.h>\n@@ -1128,6 +1129,28 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n     BOOST_CHECK_EQUAL(out_sha_hex, \"f0b3a3c29869edc765d579c928f7f1690a71fbb673b49ccf39cbc4de18156a0d\");\n }\n \n+BOOST_AUTO_TEST_CASE(util_ReadWriteSettings)\n+{\n+    // Test writing setting.\n+    TestArgsManager args1;\n+    args1.LockSettings([&](util::Settings& settings) { settings.rw_settings[\"name\"] = \"value\"; });\n+    args1.WriteSettingsFile();\n+\n+    // Test reading setting.\n+    TestArgsManager args2;\n+    args2.ReadSettingsFile();\n+    args2.LockSettings([&](util::Settings& settings) { BOOST_CHECK_EQUAL(settings.rw_settings[\"name\"].get_str(), \"value\"); });\n+\n+    // Test error logging, and remove previously written setting.\n+    {\n+        ASSERT_DEBUG_LOG(\"Failed renaming settings file\");\n+        fs::remove(GetDataDir() / \"settings.json\");\n+        fs::create_directory(GetDataDir() / \"settings.json\");\n+        args2.WriteSettingsFile();\n+        fs::remove(GetDataDir() / \"settings.json\");\n+    }\n+}\n+\n BOOST_AUTO_TEST_CASE(util_FormatMoney)\n {\n     BOOST_CHECK_EQUAL(FormatMoney(0), \"0.00\");"
      },
      {
        "sha": "b92b1d30c3551e79586bffb5cfa39138cf3138b3",
        "filename": "src/util/settings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/util/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/util/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.cpp?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -13,12 +13,13 @@ namespace {\n enum class Source {\n    FORCED,\n    COMMAND_LINE,\n+   RW_SETTINGS,\n    CONFIG_FILE_NETWORK_SECTION,\n    CONFIG_FILE_DEFAULT_SECTION\n };\n \n //! Merge settings from multiple sources in precedence order:\n-//! Forced config > command line > config file network-specific section > config file default section\n+//! Forced config > command line > read-write settings file > config file network-specific section > config file default section\n //!\n //! This function is provided with a callback function fn that contains\n //! specific logic for how to merge the sources.\n@@ -33,6 +34,10 @@ static void MergeSettings(const Settings& settings, const std::string& section,\n     if (auto* values = FindKey(settings.command_line_options, name)) {\n         fn(SettingsSpan(*values), Source::COMMAND_LINE);\n     }\n+    // Merge in the read-write settings\n+    if (const SettingsValue* value = FindKey(settings.rw_settings, name)) {\n+        fn(SettingsSpan(*value), Source::RW_SETTINGS);\n+    }\n     // Merge in the network-specific section of the config file\n     if (!section.empty()) {\n         if (auto* map = FindKey(settings.ro_config, section)) {"
      },
      {
        "sha": "ed363492321237a86a51b1f04f7e46840a105b1e",
        "filename": "src/util/settings.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/util/settings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/util/settings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.h?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -26,13 +26,15 @@ namespace util {\n //!       https://github.com/bitcoin/bitcoin/pull/15934/files#r337691812)\n using SettingsValue = UniValue;\n \n-//! Stored bitcoin settings. This struct combines settings from the command line\n-//! and a read-only configuration file.\n+//! Stored settings. This struct combines settings from the command line, a\n+//! read-only configuration file, and a read-write runtime settings file.\n struct Settings {\n     //! Map of setting name to forced setting value.\n     std::map<std::string, SettingsValue> forced_settings;\n     //! Map of setting name to list of command line values.\n     std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of setting name to read-write file setting value.\n+    std::map<std::string, SettingsValue> rw_settings;\n     //! Map of config section name and setting name to list of config file values.\n     std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n };\n@@ -48,7 +50,7 @@ bool WriteSettings(const fs::path& path,\n     std::vector<std::string>& errors);\n \n //! Get settings value from combined sources: forced settings, command line\n-//! arguments and the read-only config file.\n+//! arguments, runtime read-write settings, and the read-only config file.\n //!\n //! @param ignore_default_section_config - ignore values in the default section\n //!                                        of the config file (part before any"
      },
      {
        "sha": "8164e884b17560776566011accdc7e438667fdd5",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -73,6 +73,7 @@\n const int64_t nStartupTime = GetTime();\n \n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n+const char * const BITCOIN_SETTINGS_FILENAME = \"settings.json\";\n \n ArgsManager gArgs;\n \n@@ -372,6 +373,84 @@ bool ArgsManager::IsArgSet(const std::string& strArg) const\n     return !GetSetting(strArg).isNull();\n }\n \n+bool ArgsManager::InitSettings(std::string& error)\n+{\n+    if (!GetSettingsPath()) {\n+        return true; // Do nothing if settings file disabled.\n+    }\n+\n+    std::vector<std::string> errors;\n+    if (!ReadSettingsFile(&errors)) {\n+        error = strprintf(\"Failed loading settings file:\\n- %s\\n\", Join(errors, \"\\n- \"));\n+        return false;\n+    }\n+    if (!WriteSettingsFile(&errors)) {\n+        error = strprintf(\"Failed saving settings file:\\n- %s\\n\", Join(errors, \"\\n- \"));\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool ArgsManager::GetSettingsPath(fs::path* filepath, bool temp) const\n+{\n+    if (IsArgNegated(\"-settings\")) {\n+        return false;\n+    }\n+    if (filepath) {\n+        std::string settings = GetArg(\"-settings\", BITCOIN_SETTINGS_FILENAME);\n+        *filepath = fs::absolute(temp ? settings + \".tmp\" : settings, GetDataDir(/* net_specific= */ true));\n+    }\n+    return true;\n+}\n+\n+static void SaveErrors(const std::vector<std::string> errors, std::vector<std::string>* error_out)\n+{\n+    for (const auto& error : errors) {\n+        if (error_out) {\n+            error_out->emplace_back(error);\n+        } else {\n+            LogPrintf(\"%s\\n\", error);\n+        }\n+    }\n+}\n+\n+bool ArgsManager::ReadSettingsFile(std::vector<std::string>* errors)\n+{\n+    fs::path path;\n+    if (!GetSettingsPath(&path, /* temp= */ false)) {\n+        return true; // Do nothing if settings file disabled.\n+    }\n+\n+    LOCK(cs_args);\n+    m_settings.rw_settings.clear();\n+    std::vector<std::string> read_errors;\n+    if (!util::ReadSettings(path, m_settings.rw_settings, read_errors)) {\n+        SaveErrors(read_errors, errors);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool ArgsManager::WriteSettingsFile(std::vector<std::string>* errors) const\n+{\n+    fs::path path, path_tmp;\n+    if (!GetSettingsPath(&path, /* temp= */ false) || !GetSettingsPath(&path_tmp, /* temp= */ true)) {\n+        throw std::logic_error(\"Attempt to write settings file when dynamic settings are disabled.\");\n+    }\n+\n+    LOCK(cs_args);\n+    std::vector<std::string> write_errors;\n+    if (!util::WriteSettings(path_tmp, m_settings.rw_settings, write_errors)) {\n+        SaveErrors(write_errors, errors);\n+        return false;\n+    }\n+    if (!RenameOver(path_tmp, path)) {\n+        SaveErrors({strprintf(\"Failed renaming settings file %s to %s\\n\", path_tmp.string(), path.string())}, errors);\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n     return GetSetting(strArg).isFalse();\n@@ -893,6 +972,9 @@ void ArgsManager::LogArgs() const\n     for (const auto& section : m_settings.ro_config) {\n         logArgsPrefix(\"Config file arg:\", section.first, section.second);\n     }\n+    for (const auto& setting : m_settings.rw_settings) {\n+        LogPrintf(\"Setting file arg: %s = %s\\n\", setting.first, setting.second.write());\n+    }\n     logArgsPrefix(\"Command-line arg:\", \"\", m_settings.command_line_options);\n }\n "
      },
      {
        "sha": "0bd14cc9ea02fe7291a525032fe13bffb36c27fe",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -41,6 +41,7 @@\n int64_t GetStartupTime();\n \n extern const char * const BITCOIN_CONF_FILENAME;\n+extern const char * const BITCOIN_SETTINGS_FILENAME;\n \n void SetupEnvironment();\n bool SetupNetworking();\n@@ -333,6 +334,39 @@ class ArgsManager\n      */\n     Optional<unsigned int> GetArgFlags(const std::string& name) const;\n \n+    /**\n+     * Read and update settings file with saved settings. This needs to be\n+     * called after SelectParams() because the settings file location is\n+     * network-specific.\n+     */\n+    bool InitSettings(std::string& error);\n+\n+    /**\n+     * Get settings file path, or return false if read-write settings were\n+     * disabled with -nosettings.\n+     */\n+    bool GetSettingsPath(fs::path* filepath = nullptr, bool temp = false) const;\n+\n+    /**\n+     * Read settings file. Push errors to vector, or log them if null.\n+     */\n+    bool ReadSettingsFile(std::vector<std::string>* errors = nullptr);\n+\n+    /**\n+     * Write settings file. Push errors to vector, or log them if null.\n+     */\n+    bool WriteSettingsFile(std::vector<std::string>* errors = nullptr) const;\n+\n+    /**\n+     * Access settings with lock held.\n+     */\n+    template <typename Fn>\n+    void LockSettings(Fn&& fn)\n+    {\n+        LOCK(cs_args);\n+        fn(m_settings);\n+    }\n+\n     /**\n      * Log the config file options and the command line arguments,\n      * useful for troubleshooting."
      },
      {
        "sha": "c565854bb0be39c2910091e369110e049b3a9acb",
        "filename": "test/functional/feature_settings.py",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/test/functional/feature_settings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/test/functional/feature_settings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_settings.py?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -0,0 +1,84 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test various command line arguments and configuration file parameters.\"\"\"\n+\n+import json\n+\n+from pathlib import Path\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import assert_equal\n+\n+\n+class SettingsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node, = self.nodes\n+        settings = Path(node.datadir, self.chain, \"settings.json\")\n+        conf = Path(node.datadir, \"bitcoin.conf\")\n+\n+        # Assert empty settings file was created\n+        self.stop_node(0)\n+        with settings.open() as fp:\n+            assert_equal(json.load(fp), {})\n+\n+        # Assert settings are parsed and logged\n+        with settings.open(\"w\") as fp:\n+            json.dump({\"string\": \"string\", \"num\": 5, \"bool\": True, \"null\": None, \"list\": [6,7]}, fp)\n+        with node.assert_debug_log(expected_msgs=[\n+                'Setting file arg: string = \"string\"',\n+                'Setting file arg: num = 5',\n+                'Setting file arg: bool = true',\n+                'Setting file arg: null = null',\n+                'Setting file arg: list = [6,7]']):\n+            self.start_node(0)\n+            self.stop_node(0)\n+\n+        # Assert settings are unchanged after shutdown\n+        with settings.open() as fp:\n+            assert_equal(json.load(fp), {\"string\": \"string\", \"num\": 5, \"bool\": True, \"null\": None, \"list\": [6,7]})\n+\n+        # Test invalid json\n+        with settings.open(\"w\") as fp:\n+            fp.write(\"invalid json\")\n+        node.assert_start_raises_init_error(expected_msg='Unable to parse settings file', match=ErrorMatch.PARTIAL_REGEX)\n+\n+        # Test invalid json object\n+        with settings.open(\"w\") as fp:\n+            fp.write('\"string\"')\n+        node.assert_start_raises_init_error(expected_msg='Found non-object value \"string\" in settings file', match=ErrorMatch.PARTIAL_REGEX)\n+\n+        # Test invalid settings file containing duplicate keys\n+        with settings.open(\"w\") as fp:\n+            fp.write('{\"key\": 1, \"key\": 2}')\n+        node.assert_start_raises_init_error(expected_msg='Found duplicate key key in settings file', match=ErrorMatch.PARTIAL_REGEX)\n+\n+        # Test invalid settings file is ignored with command line -nosettings\n+        with node.assert_debug_log(expected_msgs=['Command-line arg: settings=false']):\n+            self.start_node(0, extra_args=[\"-nosettings\"])\n+            self.stop_node(0)\n+\n+        # Test invalid settings file is ignored with config file -nosettings\n+        with conf.open('a') as conf:\n+            conf.write('nosettings=1\\n')\n+        with node.assert_debug_log(expected_msgs=['Config file arg: [regtest] settings=false']):\n+            self.start_node(0)\n+            self.stop_node(0)\n+\n+        # Test alternate settings path\n+        altsettings = Path(node.datadir, \"altsettings.json\")\n+        with altsettings.open(\"w\") as fp:\n+            fp.write('{\"key\": \"value\"}')\n+        with node.assert_debug_log(expected_msgs=['Setting file arg: key = \"value\"']):\n+            self.start_node(0, extra_args=[\"-settings={}\".format(altsettings)])\n+            self.stop_node(0)\n+\n+\n+if __name__ == '__main__':\n+    SettingsTest().main()"
      },
      {
        "sha": "d2d177b2902690215d28874214eb8093ba0dad76",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8",
        "patch": "@@ -243,6 +243,7 @@\n     'p2p_permissions.py',\n     'feature_blocksdir.py',\n     'feature_config_args.py',\n+    'feature_settings.py',\n     'rpc_getdescriptorinfo.py',\n     'rpc_getpeerinfo_banscore_deprecation.py',\n     'rpc_help.py',"
      }
    ]
  }
]