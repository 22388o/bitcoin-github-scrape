DrahtBot,2019-05-02 00:43:01,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19561 (refactor: Pass ArgsManager into functions that register args by S3RK)\n* #19471 (util: Make default arg values mor",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-488521738,488521738,
luke-jr,2019-05-02 12:09:04,"NACK, this is redundant with #11082 which is a better solution.",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-488648120,488648120,
ryanofsky,2019-05-08 20:35:53,"re: https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-488648120\n\nJust as background, the settings file is not supposed to replace the config file. The settings file is supposed to replace some [`QSettings`](https://doc.qt.io/qt-5/qsettings.html) uses in `bitcoin-qt`, implementing type-safe persistent storage, and sharing this functionality with `bitcoind`, so settings modified at runt",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-490641194,490641194,
jonasschnelli,2019-05-18 10:58:17,"Concept ACK.\n\n> Standard format. The bitcoin.conf format works pretty well as a manual configuration mechanism. But the format is unspecified and unstable, and less appealing for use as persistent key/value store compared to JSON which is well understood and supported by many tools and libraries.\n\nI strongly agree with that.",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-493668134,493668134,
luke-jr,2019-05-18 19:52:15,"INI is a standard format, supported by at least as many tools and libraries for longer. It has been working fine for bitcoin.conf and rwconf for years now.\n\nJSON, on the other hand, is fragile, doesn't allow users to add comments, and is currently supposed to only be used for the JSON-RPC/REST interfaces of Core.\n\nThe only thing to gain over the current INI format would be to avoid rewriti",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-493702800,493702800,
jnewbery,2019-07-02 18:36:14,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-507796445,507796445,
ajtowns,2019-07-03 03:45:57,"Concept NACK from me too for much the same reasons @luke-jr gives. JSON's fine for a human-readable wire format where programs in different languages need to exchange data (ie, RPC), but it's not a great configuration language at all. I don't think ""the settings file is not supposed to replace the config file"" will hold up -- @jnewbery's already suggesting this be used for user configuration in 16",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-507926130,507926130,
ryanofsky,2019-07-03 10:34:40,"re: https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-507926130\n\nI can make a more complete response later but I think the quote ""the settings file is not supposed to replace the config file"" is not being understood correctly. I'm using ""config"" there to refer to static configuration and ""settings"" to refer to dynamic configuration (based on bitcoin.conf, which is static, and QSetting",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-508038978,508038978,
ajtowns,2019-07-03 13:07:27,"@ryanofsky I think it would make sense to do any of:\n\n * just keep doing what we're already doing\n * switch to a different machine-readable format that can do key-value store but isn't tied to the gui (eg bdb, serialize.h, sqlite)\n * have a limited machine-updatable version of our human-readable config format (luke's PR roughly)\n * switch to a new format (eg toml, yaml, json5/hjson/hocon",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-508085274,508085274,
ryanofsky,2019-07-03 14:39:14,"@ajtowns, it sounds like your opinion is basically the same as Luke's, and a concrete thing maybe we all would be happy with would be a PR that stores persistent GUI and application settings in an INI file instead of a JSON file.\n\nIf I am understanding correctly, you are not any citing direct advantages to the INI format for storing dynamic settings, but instead you're making more of a slipper",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-508121996,508121996,
ajtowns,2019-07-03 16:06:35,"> @ajtowns, it sounds like your opinion is basically the same as Luke's, and a concrete thing maybe we all would be happy with would be a PR that stores persistent GUI and application settings in an INI file instead of a JSON file.\n\nYeah; the benefit of that approach that the json one doesn't have is that you can just cut and paste lines that the gui has created into your permanent bitcoin.con",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-508156827,508156827,
jnewbery,2019-07-10 09:11:02,"> But I could live with this approach and I will attempt to implement it if this PR is dead or going nowhere.\n\nNote that this PR was discussed in an IRC meeting here: http://www.erisian.com.au/meetbot/bitcoin-core-dev/2019/bitcoin-core-dev.2019-01-10-19.00.log.html#l-175\n\nSeveral contributors there were in favour of this approach because it's less code (@jonasschnelli , @jimpo , @jamesob ,",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-509979967,509979967,
ryanofsky,2019-07-10 11:24:37,"Note this PR didn't exist yet at the time of the IRC discussion. In any case, I tend to be more interested in reasoning behind NACKs, and how specific concerns can be addressed, than just their gut level responses. For example, Luke seemed to be concerned with comments and comment preservation in the dynamic configuration file, which could be addressed with code to read/write the dynamic configura",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-510021419,510021419,
luke-jr,2019-07-10 11:30:32,">Several contributors there were in favour of this approach because it's less code\n\nBut it's not really. UniValue is more code than updating the INI file. And until now, we have had a policy (that IMO we should keep) to only use UniValue in the JSON-RPC code.",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-510023127,510023127,
ryanofsky,2019-07-10 12:02:34,"> we have had a policy (that IMO we should keep) to only use UniValue in the JSON-RPC code\n\n@luke-jr, I think I've heard of this policy before, but maybe didn't take it seriously. Does it come from an objection to the JSON format, or problems with the univalue implementation, or something else? I wouldn't want univalue to used in application code (in wallet code or consensus code) because stri",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-510032259,510032259,
practicalswift,2019-07-10 15:58:00,"Concept ACK\n\nRationale:\n\n> Standard format. The bitcoin.conf format works pretty well as a manual configuration mechanism. But the format is unspecified and unstable, and less appealing for use as persistent key/value store compared to JSON which is well understood and supported by many tools and libraries.",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-510122585,510122585,
NicolasDorier,2019-07-26 03:55:45,"I think `bitcoin.conf` is easier to use than a json file by scripting languages.\nIt is easy to add one line to bitcoin.conf, but adding one node to a json file? It requires additional dependencies.",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-515299233,515299233,
ryanofsky,2019-07-26 04:42:32,"@NicolasDorier, can you clarify your use case? `settings.json` does not replace `bitcoin.conf` and should not be used for static configuration. It replaces QSettings (see #15936) and is used for dynamic configuration. It's database of settings updated dynamically while bitcoin is running, similar to peers.dat or fee_estimates.dat, only it happens to be in a human readable format.",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-515306463,515306463,
NicolasDorier,2019-07-26 07:56:52,"@ryanofsky ah ok then this make sense. I was worried that some configuration thing start becoming spread in different files in different format, but this is not the case here.",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-515350760,515350760,
luke-jr,2019-07-26 12:43:31,"Software should be modifying bitcoin_rw.conf/settings.json, not  bitcoin.conf",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-515435882,515435882,
ryanofsky,2019-07-26 17:23:46,"> Software should be modifying bitcoin_rw.conf/settings.json, not bitcoin.conf\n\nIt makes sense for deployment software to generate and modify bitcoin.conf files. Specifically configuration software like ansible, package managers like nix or guix, build scripts like docker files, should all be setting up their deployments through bitcoin.conf. Managing static software configurations is a big pa",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-515534538,515534538,
jnewbery,2019-11-11 23:06:09,The base PR #15934 is merged. Looking forward to reviewing this once it's rebased!,https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-552657675,552657675,
hebasto,2020-01-13 09:14:29,"Concept ACK.\n\n>    - Standard format. The `bitcoin.conf` format works pretty well as a manual configuration mechanism. But the format is unspecified and unstable, and less appealing for use as persistent key/value store compared to JSON which is well understood and supported by many tools and libraries.\n\nThere are many JSON standards (e.g., ISO/IEC 21778, ECMA-404). Could we point the one ",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-573569801,573569801,
jonasschnelli,2020-05-29 07:28:49,I think this PR goes into the right direction and it has a few concept ACKs. @ryanofsky: can you take it out of the draft mode to get final reviews?,https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-635810266,635810266,
jonasschnelli,2020-06-05 07:43:46,"Reviewed the code and it looks good.\nTo merge this on its own, I think it would require some tests and, because this is read only currently, it should be mentioned in the `init.cpp` help as well as in the `files.md` (where the read-only note can be removed once something like #15936 is merged).",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-639315409,639315409,
achow101,2020-06-18 16:34:44,ACK 15b93eeea3e7077f3a8151ac7ec15c0bb07cb3a7,https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-646150425,646150425,
jonatack,2020-06-21 17:15:03,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-647155982,647155982,
ryanofsky,2020-06-25 21:23:40,"Rebased 15b93eeea3e7077f3a8151ac7ec15c0bb07cb3a7 -> 6ec69d5e6573b620a7c7a5a9ab39a71061a063f1 ([`pr/rwset.12`](https://github.com/ryanofsky/bitcoin/commits/pr/rwset.12) -> [`pr/rwset.13`](https://github.com/ryanofsky/bitcoin/commits/pr/rwset.13), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/rwset.12-rebase..pr/rwset.13)) due to conflict with #19200",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-649825040,649825040,
achow101,2020-06-29 15:46:58,ACK 6ec69d5e6573b620a7c7a5a9ab39a71061a063f1,https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-651204491,651204491,
ryanofsky,2020-07-11 10:21:28,"Rebased 6ec69d5e6573b620a7c7a5a9ab39a71061a063f1 -> dfe59647232a53011d6831d246bd3a01fffa96b8 ([`pr/rwset.13`](https://github.com/ryanofsky/bitcoin/commits/pr/rwset.13) -> [`pr/rwset.14`](https://github.com/ryanofsky/bitcoin/commits/pr/rwset.14), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/rwset.13-rebase..pr/rwset.14)) due to conflict with #19474",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-657035446,657035446,
luke-jr,2020-07-11 22:28:09,"The many *reasons* for rejecting it remain...\n\n* Adds a THIRD config system for no reason (Note that QSettings can never be fully removed)\n* Difficult for users to edit the new config file (JSON doesn't support comments, even if prettified)\n* Impossible to edit externally while the node is running (any changes would just get written over)\n* Adds complexity for developers (where to put ea",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-657139770,657139770,
jnewbery,2020-07-13 13:07:59,reACK 7b129c849b4e3dae1e6f54c8d395f57a2c248388,https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-657549772,657549772,
ryanofsky,2020-07-13 14:02:47,"re: https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-657139770\n\n> * Adds a THIRD config system for no reason \n\nThis PR allows #15936 to completely replace QSettings as a source of bitcoin node and wallet settings. There are three sources of node and wallet settings currently (runtime command line settings, stored QSettings, and static bitcoin.conf settings), and there will be 3 s",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-657580058,657580058,
jnewbery,2020-07-21 13:30:17,"utACK b25ed47202a3c2f47f1c35629901ac9afc7453a1\n\nIt feels like this is ready for merge if @hebasto @achow101 and @meshcollider re-ACKed",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-661862653,661862653,
achow101,2020-07-21 16:17:50,re-ACK b25ed47202a3c2f47f1c35629901ac9afc7453a1,https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-661958713,661958713,
MarcoFalke,2020-07-23 06:06:38,"Sorry for causing another force push. Only changes were comment and test related.\n\nApproach re-ACK 9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8 🌾\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nApproach re-ACK 9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8 🌾\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFi",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-662834432,662834432,
jnewbery,2020-07-23 10:17:40,"utACK 9c69cfe4c54e38edd2f54303be2f8a53dcf5bad8\n\nOnly changes are comments and an additional test file.\n\nNow that we have multiple ACKs, can we save style nits for a follow-up please?",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-662928143,662928143,
MarcoFalke,2020-07-23 18:26:47,">  If there's a use-case for removing unrecognized settings in this PR, I'd be curious to hear what it is\n\nThe same reason that unrecognized settings from the config file or command line are rejected",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-663162396,663162396,
ryanofsky,2020-07-24 14:27:56,"re: https://github.com/bitcoin/bitcoin/pull/15935#pullrequestreview-453097605\n\n> It looks like this file is append-only, with the effect that deprecated or renamed settings will stay there forever\n\nre: https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-663162396\n\n> > If there's a use-case for removing unrecognized settings in this PR, I'd be curious to hear what it is\n> \n> ",https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-663566209,663566209,
MarcoFalke,2020-07-30 08:53:22,Addressed my feedback in #19624 ,https://github.com/bitcoin/bitcoin/pull/15935#issuecomment-666238539,666238539,
jonasschnelli,2020-06-05 07:40:27,These logprints are currently going nowhere because `InitLogging()` is called after `ReadSettingsFile()`. Not saying it is a problem.,https://github.com/bitcoin/bitcoin/pull/15935#discussion_r435743918,435743918,src/util/system.cpp
jonasschnelli,2020-06-05 07:41:15,"Without further PRs, this part is dead code,... would it at least make sense to add a test for it?",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r435744301,435744301,src/util/system.cpp
ryanofsky,2020-06-05 22:21:27,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r435743918\n\n> These logprints are currently going nowhere because `InitLogging()` is called after `ReadSettingsFile()`. Not saying it is a problem.\n\nGood catch, errors are returned now",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r436190126,436190126,src/util/system.cpp
ryanofsky,2020-06-05 22:21:33,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r435744301\n\n> Without further PRs, this part is dead code,... would it at least make sense to add a test for it?\n\nAdded a write call and tests",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r436190153,436190153,src/util/system.cpp
achow101,2020-06-11 16:53:09,I think this should mention that the file is not to be manually created or modified.,https://github.com/bitcoin/bitcoin/pull/15935#discussion_r438931087,438931087,src/init.cpp
ryanofsky,2020-06-16 20:21:48,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r438931087\n\n> I think this should mention that the file is not to be manually created or modified.\n\nMentioned with pointer to bitcoin.conf instead",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r441118585,441118585,src/init.cpp
jnewbery,2020-07-12 09:18:04,"nit: I think this would be clearer as ""File is not written to by the software and must be created manually.",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r453291201,453291201,doc/files.md
jnewbery,2020-07-12 09:19:06,"nit: the comment above (""Forced config > command line > ..."") should be updated.",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r453291296,453291296,src/util/settings.cpp
ryanofsky,2020-07-13 12:23:46,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r453291201\n\n> nit: I think this would be clearer as ""File is not written to by the software and must be created manually.\n\nThanks, used your suggestion",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r453610616,453610616,doc/files.md
ryanofsky,2020-07-13 12:23:54,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r453291296\n\n> nit: the comment above (""Forced config > command line > ..."") should be updated.\n\nThanks, updated",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r453610673,453610673,src/util/settings.cpp
hebasto,2020-07-19 13:13:02,"ced5588a7815de2d1b2e08ebd9979fa29ac0d3f2\n```suggestion\n    const std::vector<SettingsValue>& in_values = in.getValues();\n```",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456907433,456907433,src/util/settings.cpp
hebasto,2020-07-19 13:26:16,"```suggestion\n`./`               | `bitcoin.conf`        | User-defined read-only [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`. File must be created manually. Path can be specified by `-conf` option\n```",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456908798,456908798,doc/files.md
hebasto,2020-07-19 13:28:39,"```suggestion\n`./`               | `settings.json`       | Read-write settings set through GUI or RPC interfaces, augmenting manual settings from [bitcoin.conf](bitcoin-conf.md). File is created automatically if read-write settings storage is not disabled with `-nosettings` option. Path can be specified with `-settings` option\n```",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456909017,456909017,doc/files.md
hebasto,2020-07-19 13:30:43,"```suggestion\n    gArgs.AddArg(""-conf=<file>"", strprintf(""Specify path to read-only configuration file. Relative path will be prefixed by datadir location. (default: %s)"", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n```",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456909268,456909268,src/init.cpp
hebasto,2020-07-19 13:45:14,"```suggestion\n    gArgs.AddArg(""-settings=<file>"", strprintf(""Specify path to read-write settings data file. Can be disabled with -nosettings. File is written at runtime and not meant to be edited by user (use %s instead for custom settings). Relative path will be prefixed by datadir location. (default: %s)"", BITCOIN_CONF_FILENAME, BITCOIN_SETTINGS_FILENAME), ArgsManager::ALLOW_ANY, OptionsCateg",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456910735,456910735,src/init.cpp
hebasto,2020-07-19 13:55:13,This function template is not used in this PR.,https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456911842,456911842,src/util/system.h
ryanofsky,2020-07-21 12:49:42,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456907433\n\n> [ced5588](https://github.com/bitcoin/bitcoin/commit/ced5588a7815de2d1b2e08ebd9979fa29ac0d3f2)\n\nThanks, updated\n",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458069668,458069668,src/util/settings.cpp
ryanofsky,2020-07-21 12:50:33,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456908798\n\nThis is different than John's suggestion https://github.com/bitcoin/bitcoin/pull/15935#discussion_r453610616, and maybe is stale. Can follow up with new suggestion or give a rationale if a change is needed here.",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458070196,458070196,doc/files.md
ryanofsky,2020-07-21 12:50:41,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456909017\n\nThanks, updated\n",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458070279,458070279,doc/files.md
ryanofsky,2020-07-21 12:50:50,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456909268\n\nNot changing ""paths"" to ""path"" because it would be an unrelated change and inconsistent with other entries here. I think it may also be less grammatical.\n",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458070363,458070363,src/init.cpp
ryanofsky,2020-07-21 12:50:58,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456910735\n\nCould change ""users"" to ""user"" but this seems slightly worse\n",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458070424,458070424,src/init.cpp
ryanofsky,2020-07-21 12:51:06,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r456911842\n\n> This function template is not used in this PR.\n\nRight, it is used by #15936 and #15937",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458070505,458070505,src/util/system.h
MarcoFalke,2020-07-22 08:20:21,"why? Either this is redundant because this is already called when `file` goes out of scope, or it should be called before `file.fail()` (in cause you want to check for some kind of failure)",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458619533,458619533,src/util/settings.cpp
MarcoFalke,2020-07-22 08:21:42,"style-nit: Should say PACKAGE_NAME, but that seems a bit too verbose. Might as well remove\n\n```suggestion\n//! Stored settings. This struct combines settings from the command line,\n```",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458620301,458620301,src/util/settings.h
MarcoFalke,2020-07-22 08:23:00,any reason to add dead code?,https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458621072,458621072,src/util/system.cpp
MarcoFalke,2020-07-22 10:59:10,"See https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/15935/total.coverage/src/util/system.cpp.gcov.html#412\n\nMy preference would be to not pass the erros as ptr, but as reference",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458709446,458709446,src/util/system.cpp
MarcoFalke,2020-07-22 11:03:09,"Also, as an idea to add test coverage in the future, the failure cases that are not logic errors could be tested in the two touched files. https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/15935/total.coverage/src/util/settings.cpp.gcov.html",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458711399,458711399,src/util/system.cpp
ryanofsky,2020-07-22 13:12:08,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458619533\n\n> why? Either this is redundant because this is already called when `file` goes out of scope, or it should be called before `file.fail()` (in cause you want to check for some kind of failure)\n\nJust freeing a resource that's no longer needed, added comment\n",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458779953,458779953,src/util/settings.cpp
ryanofsky,2020-07-22 13:12:19,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458620301\n\n> style-nit: Should say PACKAGE_NAME, but that seems a bit too verbose. Might as well remove\n\nThanks, updated",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458780065,458780065,src/util/settings.h
ryanofsky,2020-07-22 13:12:27,"re: https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458621072\n\n> any reason to add dead code?\n\nThis is used in #15936 and #15937. Added test to quell LCOV.",https://github.com/bitcoin/bitcoin/pull/15935#discussion_r458780165,458780165,src/util/system.cpp
