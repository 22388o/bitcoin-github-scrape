[
  {
    "sha": "fb6c6a7938cb7c4808ad88d23bfc2b7408407b12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjZjNmE3OTM4Y2I3YzQ4MDhhZDg4ZDIzYmZjMmI3NDA4NDA3YjEy",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-18T16:09:27Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-15T23:15:45Z"
      },
      "message": "test: speedup wallet_listtransactions by whitelisting peers (immediate tx relay)\n\nBy whitelisting the peers via -whitelist, the inventory is transmissioned\nimmediately rather than on average every 5 seconds, speeding up the test by at\nleast a factor of two:\n\nbefore:\n$ time ./wallet_listtransactions.py\n...\n0m40.25s real     0m01.74s user     0m01.70s system\n\nwith this PR:\n$ time ./wallet_listtransactions.py\n...\n0m14.93s real     0m01.68s user     0m01.87s system\n\nThis commit also moves the wallet_listtransactions tests into the < 30s group.",
      "tree": {
        "sha": "a33b08352d79f6ab054846bae4e07a54853fc5ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a33b08352d79f6ab054846bae4e07a54853fc5ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb6c6a7938cb7c4808ad88d23bfc2b7408407b12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6c6a7938cb7c4808ad88d23bfc2b7408407b12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6c6a7938cb7c4808ad88d23bfc2b7408407b12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6c6a7938cb7c4808ad88d23bfc2b7408407b12/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a88fa1a555195af6543cdc802e8e1c2e1668dd38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a88fa1a555195af6543cdc802e8e1c2e1668dd38"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cbd773b7048f35c202bf27fb71ec01997289e0d5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb6c6a7938cb7c4808ad88d23bfc2b7408407b12/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb6c6a7938cb7c4808ad88d23bfc2b7408407b12/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fb6c6a7938cb7c4808ad88d23bfc2b7408407b12",
        "patch": "@@ -109,8 +109,6 @@\n     'p2p_tx_download.py',\n     'mempool_updatefromblock.py',\n     'wallet_dump.py --legacy-wallet',\n-    'wallet_listtransactions.py --legacy-wallet',\n-    'wallet_listtransactions.py --descriptors',\n     'feature_taproot.py --previous_release',\n     'feature_taproot.py',\n     'rpc_signer.py',\n@@ -159,6 +157,8 @@\n     'wallet_createwallet.py --legacy-wallet',\n     'wallet_createwallet.py --usecli',\n     'wallet_createwallet.py --descriptors',\n+    'wallet_listtransactions.py --legacy-wallet',\n+    'wallet_listtransactions.py --descriptors',\n     'wallet_watchonly.py --legacy-wallet',\n     'wallet_watchonly.py --usecli --legacy-wallet',\n     'wallet_reorgsrestore.py',"
      },
      {
        "sha": "df1cbd5eded5608f1051e7be5cb771ad92e2a3f2",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb6c6a7938cb7c4808ad88d23bfc2b7408407b12/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb6c6a7938cb7c4808ad88d23bfc2b7408407b12/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=fb6c6a7938cb7c4808ad88d23bfc2b7408407b12",
        "patch": "@@ -18,6 +18,9 @@\n class ListTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        # This test isn't testing txn relay/timing, so set whitelist on the\n+        # peers for instant txn relay. This speeds up the test run time 2-3x.\n+        self.extra_args = [[\"-whitelist=noban@127.0.0.1\"]] * self.num_nodes\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "47915b118720c6e2b2ec9f599f25848041b42b99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzkxNWIxMTg3MjBjNmUyYjJlYzlmNTk5ZjI1ODQ4MDQxYjQyYjk5",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-19T20:42:08Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-15T23:15:48Z"
      },
      "message": "test: remove unneeded/redundant code in wallet_listtransactions\n\n-> remove unneeded get-out-of IBD generate()\n(The test framework already sets up the nodes to be out of IBD\n in setup_nodes(), if setup_clean_chain is not set to True)\n\n-> remove duplicate code line assigning an utxo",
      "tree": {
        "sha": "97db1ef5818b896e05c88152231346223f7f85a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97db1ef5818b896e05c88152231346223f7f85a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47915b118720c6e2b2ec9f599f25848041b42b99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47915b118720c6e2b2ec9f599f25848041b42b99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47915b118720c6e2b2ec9f599f25848041b42b99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47915b118720c6e2b2ec9f599f25848041b42b99/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb6c6a7938cb7c4808ad88d23bfc2b7408407b12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6c6a7938cb7c4808ad88d23bfc2b7408407b12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6c6a7938cb7c4808ad88d23bfc2b7408407b12"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7557dbe8c8de7421eb90e2164e06cd372a9b97cf",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47915b118720c6e2b2ec9f599f25848041b42b99/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47915b118720c6e2b2ec9f599f25848041b42b99/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=47915b118720c6e2b2ec9f599f25848041b42b99",
        "patch": "@@ -26,8 +26,6 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        self.nodes[0].generate(1)  # Get out of IBD\n-        self.sync_all()\n         # Simple send, 0 to 1:\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n@@ -136,7 +134,6 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[0], txid_1)\n         assert_equal(utxo_to_use[\"safe\"], True)\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[1], txid_1)\n-        utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[1], txid_1)\n         assert_equal(utxo_to_use[\"safe\"], False)\n \n         # Create tx2 using createrawtransaction"
      }
    ]
  },
  {
    "sha": "a006d7d73019b8cf4d68626c019c3d69729dda69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDA2ZDdkNzMwMTliOGNmNGQ2ODYyNmMwMTljM2Q2OTcyOWRkYTY5",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-20T11:28:22Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-07-15T23:15:49Z"
      },
      "message": "test: add logging to wallet_listtransactions\n\nCo-authored-by: Jon Atack <jon@atack.com>",
      "tree": {
        "sha": "5cd05bf6664e2a3e254baefd780bc0a434f6f230",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cd05bf6664e2a3e254baefd780bc0a434f6f230"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a006d7d73019b8cf4d68626c019c3d69729dda69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a006d7d73019b8cf4d68626c019c3d69729dda69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a006d7d73019b8cf4d68626c019c3d69729dda69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a006d7d73019b8cf4d68626c019c3d69729dda69/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47915b118720c6e2b2ec9f599f25848041b42b99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47915b118720c6e2b2ec9f599f25848041b42b99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47915b118720c6e2b2ec9f599f25848041b42b99"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 17,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c0386f5d7028d8a9a9790c47410ecd10412b457c",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 17,
        "deletions": 12,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a006d7d73019b8cf4d68626c019c3d69729dda69/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a006d7d73019b8cf4d68626c019c3d69729dda69/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=a006d7d73019b8cf4d68626c019c3d69729dda69",
        "patch": "@@ -26,7 +26,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        # Simple send, 0 to 1:\n+        self.log.info(\"Test simple send from node0 to node1\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n         assert_array_result(self.nodes[0].listtransactions(),\n@@ -35,7 +35,7 @@ def run_test(self):\n         assert_array_result(self.nodes[1].listtransactions(),\n                             {\"txid\": txid},\n                             {\"category\": \"receive\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 0})\n-        # mine a block, confirmations should change:\n+        self.log.info(\"Test confirmations change after mining a block\")\n         blockhash = self.nodes[0].generate(1)[0]\n         blockheight = self.nodes[0].getblockheader(blockhash)['height']\n         self.sync_all()\n@@ -46,7 +46,7 @@ def run_test(self):\n                             {\"txid\": txid},\n                             {\"category\": \"receive\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 1, \"blockhash\": blockhash, \"blockheight\": blockheight})\n \n-        # send-to-self:\n+        self.log.info(\"Test send-to-self on node0\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 0.2)\n         assert_array_result(self.nodes[0].listtransactions(),\n                             {\"txid\": txid, \"category\": \"send\"},\n@@ -55,7 +55,7 @@ def run_test(self):\n                             {\"txid\": txid, \"category\": \"receive\"},\n                             {\"amount\": Decimal(\"0.2\")})\n \n-        # sendmany from node1: twice to self, twice to node2:\n+        self.log.info(\"Test sendmany from node1: twice to self, twice to node0\")\n         send_to = {self.nodes[0].getnewaddress(): 0.11,\n                    self.nodes[1].getnewaddress(): 0.22,\n                    self.nodes[0].getnewaddress(): 0.33,\n@@ -89,6 +89,7 @@ def run_test(self):\n \n         if not self.options.descriptors:\n             # include_watchonly is a legacy wallet feature, so don't test it for descriptor wallets\n+            self.log.info(\"Test 'include_watchonly' feature (legacy wallet)\")\n             pubkey = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['pubkey']\n             multisig = self.nodes[1].createmultisig(1, [pubkey])\n             self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n@@ -104,33 +105,35 @@ def run_test(self):\n \n         self.run_rbf_opt_in_test()\n \n-    # Check that the opt-in-rbf flag works properly, for sent and received\n-    # transactions.\n+\n     def run_rbf_opt_in_test(self):\n-        # Check whether a transaction signals opt-in RBF itself\n+        \"\"\"Test the opt-in-rbf flag for sent and received transactions.\"\"\"\n+\n         def is_opt_in(node, txid):\n+            \"\"\"Check whether a transaction signals opt-in RBF itself.\"\"\"\n             rawtx = node.getrawtransaction(txid, 1)\n             for x in rawtx[\"vin\"]:\n                 if x[\"sequence\"] < 0xfffffffe:\n                     return True\n             return False\n \n-        # Find an unconfirmed output matching a certain txid\n         def get_unconfirmed_utxo_entry(node, txid_to_match):\n+            \"\"\"Find an unconfirmed output matching a certain txid.\"\"\"\n             utxo = node.listunspent(0, 0)\n             for i in utxo:\n                 if i[\"txid\"] == txid_to_match:\n                     return i\n             return None\n \n-        # 1. Chain a few transactions that don't opt-in.\n+        self.log.info(\"Test txs w/o opt-in RBF (bip125-replaceable=no)\")\n+        # Chain a few transactions that don't opt in.\n         txid_1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         assert not is_opt_in(self.nodes[0], txid_1)\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\": \"no\"})\n         self.sync_mempools()\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\": \"no\"})\n \n-        # Tx2 will build off txid_1, still not opting in to RBF.\n+        # Tx2 will build off tx1, still not opting in to RBF.\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[0], txid_1)\n         assert_equal(utxo_to_use[\"safe\"], True)\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[1], txid_1)\n@@ -149,6 +152,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         self.sync_mempools()\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\": \"no\"})\n \n+        self.log.info(\"Test txs with opt-in RBF (bip125-replaceable=yes)\")\n         # Tx3 will opt-in to RBF\n         utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[0], txid_2)\n         inputs = [{\"txid\": txid_2, \"vout\": utxo_to_use[\"vout\"]}]\n@@ -179,6 +183,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         self.sync_mempools()\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"yes\"})\n \n+        self.log.info(\"Test tx with unknown RBF state (bip125-replaceable=unknown)\")\n         # Replace tx3, and check that tx4 becomes unknown\n         tx3_b = tx3_modified\n         tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN)  # bump the fee\n@@ -191,15 +196,15 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         self.sync_mempools()\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"unknown\"})\n \n-        # Check gettransaction as well:\n+        self.log.info(\"Test bip125-replaceable status with gettransaction RPC\")\n         for n in self.nodes[0:2]:\n             assert_equal(n.gettransaction(txid_1)[\"bip125-replaceable\"], \"no\")\n             assert_equal(n.gettransaction(txid_2)[\"bip125-replaceable\"], \"no\")\n             assert_equal(n.gettransaction(txid_3)[\"bip125-replaceable\"], \"yes\")\n             assert_equal(n.gettransaction(txid_3b)[\"bip125-replaceable\"], \"yes\")\n             assert_equal(n.gettransaction(txid_4)[\"bip125-replaceable\"], \"unknown\")\n \n-        # After mining a transaction, it's no longer BIP125-replaceable\n+        self.log.info(\"Test mined transactions are no longer bip125-replaceable\")\n         self.nodes[0].generate(1)\n         assert txid_3b not in self.nodes[0].getrawmempool()\n         assert_equal(self.nodes[0].gettransaction(txid_3b)[\"bip125-replaceable\"], \"no\")"
      }
    ]
  }
]