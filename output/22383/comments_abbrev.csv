Xekyo,2021-07-01 14:40:21,It looks like an empty line needs to be added to the commit message after the subject line for the linter to pass.,https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-872304091,872304091,
mjdietzx,2021-07-01 16:31:20,"I think this would change the behavior of `GetTransaction` in some cases. I'm not sure whether this is OK or not, but I'd think we should at least update comments here: https://github.com/bitcoin/bitcoin/blob/master/src/validation.h#L146, and docs here: https://github.com/bitcoin/bitcoin/blob/master/src/rpc/rawtransaction.cpp#L78\n\nThe case I'm thinking about, which you noted, is when an incorr",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-872388955,872388955,
jlopp,2021-07-01 18:37:23,"I think a fundamental question is whether or not the block_index is intended to be used as a hint or as a validation parameter.\n\nGiven that the current logic of this function has various fallbacks, it seems to me that block_index is a hint and that the goal of the function is to try to return the requested transaction regardless of where it is stored. So it seems to me that reorganizing the lo",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-872465440,872465440,
sipa,2021-07-01 18:45:21,"FindTx returns the block hash, so it's very easy to check if it matches. If you do so, the question of whether the provided block is a hint or a search restriction doesn't apply.",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-872470202,872470202,
jlopp,2021-07-02 12:58:05,"I've added additional checks that should ensure there is no behavior change, only performance improvements. Now it should return nullptr faster in certain conditions.",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-872977773,872977773,
MarcoFalke,2021-07-03 07:38:43,review ACK 5dd11ea1406f4926ab9061702b69b409459723b4,https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-873363488,873363488,
jonatack,2021-07-03 12:03:14,ACK 78f4c8b98eada337346ffb206339c3ebae4ff43b,https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-873397253,873397253,
theStack,2021-07-03 16:50:46,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-873436275,873436275,
mjdietzx,2021-07-06 02:15:33,"NACK  -- In general, I think performance optimizations should come with data that shows they improve things. Especially in the case the code isn't being cleaned up or simplified (I think this PR makes the code slightly more complicated and harder to follow so I'd want to be sure the performance improvements warrant it). I also have other concerns which I lay out below. I can quickly come around on",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-874410913,874410913,
promag,2021-07-06 07:12:22,"> To me it seems both `ReadBlockFromDisk` and `g_txindex->FindTx` do the same disk read, so I'm not sure how this change ""prevents excessive disk reads"" (please correct me if I'm misunderstanding something basic, I'm learning):\n\n@mjdietzx txindex stores the transaction position in the block, so it just seeks there to parse the transaction. Without txindex it needs to load the block - parse tra",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-874518363,874518363,
mjdietzx,2021-07-06 13:50:37,"> txindex stores the transaction position in the block, so it just seeks there to parse the transaction. Without txindex it needs to load the block - parse transactions, build hashes,... - and then search in those transactions.\n\nMakes sense, and thanks for the explanation @promag. So is it safe to say scanning through the entire txindex and then ""seeking to the tx's position in the block and r",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-874777830,874777830,
jlopp,2021-07-06 14:22:40,"I don't believe that ""scanning through the entire txindex"" is an accurate way to describe how txindex->FindTx functions. I expect it to be more of a O(1) constant time operation while ReadBlockFromDisk() is more of a O(n) operation that is directly correlated to block size.",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-874805472,874805472,
promag,2021-07-06 14:33:17,"Right, it doesn't scan the entire txindex as keys are indexed. I think leveldb lookup is O(log n).\n\n#22382 shows the performance difference from each approach.",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-874814496,874814496,
orweinberger,2021-07-13 07:38:27,"FWIW, this is the compared performance with @jlopp's modifications\n\n```\n$ time ./src/bitcoin-cli getrawtransaction 20a93350cd6f4e03dfb6cbb3f104965293627f25c199c1be0e4d187a4ed5f4bb\n020000000001018d3f7d8efaa377dda74892af26c1ca028466d97721d2ea6c74a5cbcf404feb9004000000171600147f5a49a2d89f86ff498103bdbcb1762f9f0ab5aefeffffff08a04a05000000000017a91467a849785bb12f1a03260b3b52ec9dff52b30e708724b8",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-878853661,878853661,
jonatack,2021-07-13 14:11:54,I cherry-picked this change onto #22437 that adds a lot of `GetTransaction()` coverage and it doesn't see any change in behavior; all is green.,https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-879123985,879123985,
MarcoFalke,2021-07-22 18:15:33,"Would be nice to include the documentation suggested by @jnewbery to avoid someone ""optimizing"" this again in the future. Maybe #22528, which also moves the code, can be used for that?",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-885130926,885130926,
NelsonGaldeman,2021-08-02 12:10:22,"I was curious about response times so I ran some tests:\n\nI picked up 5 random transactions and fetched them with and without the block hash against both latest release (v0.21.1) and  78f4c8b98eada337346ffb206339c3ebae4ff43b\n\nv0.21.1 results\n```\nnelson@bitcoin-node-v3:~$ time ./bitcoin-cli getrawtransaction 278e5e132279ef4bbb0a612cb6b27d8b7510c2cc3be432b0641841cf56a7b0d5\n[...]\n\nre",https://github.com/bitcoin/bitcoin/pull/22383#issuecomment-890974295,890974295,
promag,2021-07-02 07:52:09,"`g_index`? How about `If -txindex is enabled, check it next for the tx`.",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r662813217,662813217,src/validation.h
promag,2021-07-02 08:02:33,"Something like the following would keep behavior?\n```cpp\nuint256 block_hash;\nif (g_txindex->FindTx(hash, block_hash, tx)) {\n    if (block_index && block_index->GetBlockHash() != block_hash) return nullptr;\n    hashBlock = block_hash;\n    return tx;\n}\n```\nNote the local `block_hash` to avoid changing the out-arg in case it fails.",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r662819949,662819949,src/validation.cpp
promag,2021-07-02 08:04:48,"same, `... via -txindex or ...`",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r662821224,662821224,src/validation.h
jlopp,2021-07-02 12:54:35,Sure; will update.,https://github.com/bitcoin/bitcoin/pull/22383#discussion_r662991449,662991449,src/validation.h
jlopp,2021-07-02 12:55:00,Makes sense; I can add a similar check for the mempool condition.,https://github.com/bitcoin/bitcoin/pull/22383#discussion_r662991716,662991716,src/validation.cpp
jlopp,2021-07-02 12:55:10,Sure; will update.,https://github.com/bitcoin/bitcoin/pull/22383#discussion_r662991827,662991827,src/validation.h
promag,2021-07-02 13:09:29,"It could be an orphaned block and tx went back to the pool? I think previously it would return the transaction.\n\nMight be better just do `if (mempool && !block_index) {` in L1162?",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663000869,663000869,src/validation.cpp
jlopp,2021-07-02 20:51:16,👍🏼 ,https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663241855,663241855,src/validation.cpp
promag,2021-07-02 22:15:19,"Really edge case but I think this should be:\n```cpp\nif (!block_index || block_index->GetBlockHash() == block_hash) {\n    hashBlock = block_hash;\n    return tx;\n}\n```\nSo if the block hash doesn't match with the index then fall thru the next check - the transaction can be in another block right?",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663267393,663267393,src/validation.cpp
jonatack,2021-07-03 10:18:30,"nit if you retouch\n```suggestion\n                ""\nBy default, this call only returns a transaction if it is in the mempool. If -txindex is enabled\n""\n```",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663347449,663347449,src/rpc/rawtransaction.cpp
jonatack,2021-07-03 10:33:49,"https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663267393 seems preferable, otherwise move comment to the right place (or omit it)\n```diff\n@@ -1167,8 +1167,10 @@ CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMe\n         CTransactionRef tx;\n         uint256 block_hash;\n         if (g_txindex->FindTx(hash, block_hash, tx)) {\n-            // Trans",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663348910,663348910,src/validation.cpp
jlopp,2021-07-03 11:32:16,indeed,https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663354682,663354682,src/validation.cpp
MarcoFalke,2021-07-03 17:36:39,"This shouldn't happen, though, as the `FindTx` wouldn't return true?",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663389869,663389869,src/validation.cpp
promag,2021-07-03 18:41:57,txindex only keeps 1 block hash right?,https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663395936,663395936,src/validation.cpp
MarcoFalke,2021-07-03 18:52:20,"Oh, I didn't think of BIP 30",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663396921,663396921,src/validation.cpp
promag,2021-07-04 17:21:37,"Also, `block_index` could be an orphaned block where the transaction is but in the index the block is the one in the chain.",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663533270,663533270,src/validation.cpp
mjdietzx,2021-07-06 00:59:19,"nit: there is the case where -txindex is enabled and a blockhash argument is passed, where it will return the transaction only if the block it's found in matches the blockhash argument passed",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r664172064,664172064,src/rpc/rawtransaction.cpp
LarryRuane,2021-07-21 01:13:15,"```suggestion\n * @param[in]  mempool         If provided and block_index is not, check mempool for tx\n```",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r673591294,673591294,src/validation.h
LarryRuane,2021-07-21 11:43:57,"```suggestion\n            }\n            return nullptr;\n```\nNit: This improves the performance of the (unlikely) case where a block hash is specified, but the transaction is found in the txindex but in a different block. The `if` at line 1170 would be false, so we would call `ReadBlockFromDisk()` below, but would not find the transaction there either (assuming the txindex is accurate).\n",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r673899065,673899065,src/validation.cpp
MarcoFalke,2021-07-22 06:32:55,How is this different from the initial solution: https://github.com/bitcoin/bitcoin/pull/22383#discussion_r663267393?,https://github.com/bitcoin/bitcoin/pull/22383#discussion_r674532918,674532918,src/validation.cpp
jnewbery,2021-07-22 10:56:46,I'd suggest just replacing this with `Optional pointer to the node's mempool` to avoid duplicating what's already documented above.,https://github.com/bitcoin/bitcoin/pull/22383#discussion_r674694240,674694240,src/validation.h
jnewbery,2021-07-22 10:59:49,"I think the following change addresses @mjdietzx's comment: https://github.com/bitcoin/bitcoin/pull/22383/files#r664172064\n\n```suggestion\n                ""If a blockhash argument is passed, it will return the transaction if\n""\n                ""the specified block is available and the transaction is in that block.\n""\n```",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r674695881,674695881,src/rpc/rawtransaction.cpp
promag,2021-07-22 11:07:48,@LarryRuane the idea is to allow fetching the transaction from a block out of the active chain - which -txindex doesn't take into account. Before this was possible.,https://github.com/bitcoin/bitcoin/pull/22383#discussion_r674700406,674700406,src/validation.cpp
jnewbery,2021-07-22 11:08:32,"This could do with a comment:\n\n```suggestion\n            if (!block_index || block_index->GetBlockHash() == block_hash) {\n                // Don't return the transaction if the provided block hash doesn't match.\n                // The case where a transaction appears in multiple blocks (e.g. reorgs or\n                // BIP30) is handled by the block lookup below.\n                has",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r674700841,674700841,src/validation.cpp
luke-jr,2021-07-22 17:06:37,"That could be checked by seeing if the specified block index is in the main chain.\n\nBut I suppose even that has edge cases (eg, index out of sync), so maybe it's better to just leave it alone.",https://github.com/bitcoin/bitcoin/pull/22383#discussion_r674994661,674994661,src/validation.cpp
MarcoFalke,2021-07-22 18:33:05,Just realized after merge that cs_main is not needed to read from the mempool (only to write to it),https://github.com/bitcoin/bitcoin/pull/22383#discussion_r675069128,675069128,src/validation.cpp
