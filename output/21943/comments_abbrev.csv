DrahtBot,2021-05-13 15:17:05,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22829](https://github.com/bitcoin/bitcoin/pull/22829) (refactor: various RecursiveMutex replacements in CConnman by theS",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-840631813,840631813,
jnewbery,2021-05-14 09:31:56,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-841130784,841130784,
vasild,2021-05-14 11:00:18,"`644726117...92f62d9ea`: add an explicit commit that shows we intentionally don't process newly accepted nodes, as discussed in https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632150326",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-841173328,841173328,
practicalswift,2021-05-15 07:51:32,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-841617954,841617954,
vasild,2021-05-17 15:19:31,`92f62d9...00a8c94`: address review suggestions,https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-842411377,842411377,
vasild,2021-06-22 09:25:08,`00a8c943d7...072896b7cf`: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-865809778,865809778,
jonatack,2021-09-19 17:08:55,"Concept ACK, particularly if this can reduce `vNodes` lock contentions in these areas that are among the most frequent and long-lasting of those I'm seeing on my nodes with `-debug=lock`.\n\nIt looks like the CI stalled out on the last push. In any case, it rebases cleanly onto current master, the debug build is clean, and the unit/functional test suite is green for me locally. Reviewing.",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-922506073,922506073,
rebroad,2021-09-25 09:46:52,concept ACK ,https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-927096514,927096514,
vasild,2021-09-28 07:29:44,"`072896b7cf...a4fbf1ba59`: rebase and address review suggestions\n\nInvalidates ACK from @jonatack.",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-928930542,928930542,
jonatack,2021-09-28 09:10:42,Diff-review ACK a4fbf1ba594b03379a65e780892b70bb7d4c1e4e per `git range-diff a9d0cec 072896b a4fbf1b` following my earlier full review (https://github.com/bitcoin/bitcoin/pull/21943#pullrequestreview-758400122) ,https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-929004503,929004503,
vasild,2021-09-28 13:18:12,"`a4fbf1ba59...40e0bc8de2`: rebase and switch to `/*description=*/123` following https://github.com/bitcoin/bitcoin/pull/21943#discussion_r711994001.\n\nSorry for the noise, I hope no more changes to this PR.\n\nInvalidates ACKs from @jonatack, @promag.",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-929201658,929201658,
MarcoFalke,2021-09-28 13:32:06,"No need to invalidate ACKs. I was planning a scripted-diff some day to clean everything up, which would have covered this.",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-929213552,929213552,
jonatack,2021-09-28 16:24:03,Diff-review re-ACK 40e0bc8de29eab1aec4464e93fb42eccb9a81f5d following my earlier full review (https://github.com/bitcoin/bitcoin/pull/21943#pullrequestreview-758400122) ,https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-929384060,929384060,
vasild,2021-10-08 09:21:52,"`40e0bc8de2...99c1af5a8f`: rebase due to conflicts\n\nInvalidates ACK from @jonatack \n\nPreviously invalidated ACK from @promag \n",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-938488261,938488261,
vasild,2021-10-26 08:10:39,"`99c1af5a8f...8589c55e27`: rebase and reorganize `CConnMan::SocketHandler()`, following comments from above: [1](https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632150326) and [2](https://github.com/bitcoin/bitcoin/pull/21943#discussion_r725079584).\n\nAccepting new connections does not require the snapshot of the existing connected nodes, so make this explicit by accepting new connect",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-951672368,951672368,
vasild,2021-11-12 09:54:17,"`8589c55e27...db0a01e0d1`: remove unnecessary `interruptNet` check from `SocketEvents()`, add such a check to `SocketHandlerListening()`. Thanks, @promag, https://github.com/bitcoin/bitcoin/pull/21943#discussion_r738379450 !\n\nInvalidates ACK from @promag \n\nPreviously invalidated ACK from @jonatack ",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-966969216,966969216,
vasild,2021-11-18 12:41:45,"`db0a01e0d1...f52b6b2d9f`: pick nits\n\nInvalidates ACK from @promag\n\nPreviously invalidated ACK from @jonatack",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-972830829,972830829,
jonatack,2021-11-23 21:55:24,"ACK  f52b6b2d9f482353821da0ef4c485c402a396c8d changes since last review are reordered commits, removing an unneeded local variable, and code formatting and documentation improvements ",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-977201905,977201905,
laanwj,2021-11-24 16:50:17,"Looks like github didn't detect the merge, closing.",https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-978053383,978053383,
promag,2021-05-13 22:50:29,"157674ef213e6329215d1b7eb85dacbc23c468db\n\nThis snap catches nodes added in the above `AcceptConnection` where the new snap at the beginning doesn't. Is this intentional?",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632150326,632150326,src/net.cpp
vasild,2021-05-14 08:01:48,"Hmm, good catch! No, that is not intentional.\n\nSo, the previous code did:\n\n1. `SocketEvents()`, adding ready sockets from `vNodes` to `{recv,send,error}_set`.\n2. `AcceptConnection()`, adding new entries to `vNodes`.\n3. Loop over `vNodes`, for each node:\n3.1. Check whether its socket is in one of `{recv,send,error}_set`. Observation - the sockets of nodes that were added in 2. will no",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632355737,632355737,src/net.cpp
promag,2021-05-14 08:08:49,if `InactivityCheck` for new nodes is pointless then maybe move `// Accept new connections` to the end?,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632360108,632360108,src/net.cpp
vasild,2021-05-14 10:58:33,"Added an explicit commit (a71b3f426) to show the intention. Putting the accept at the end somehow looked strange to me.\n\nMaybe these two actions deserve to be split in separate functions (ie split `SocketHandler()`): 1. checking which of the listening sockets are ready for IO and accepting connections on them and 2. checking which of the already connected sockets are ready for IO and processin",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632451114,632451114,src/net.cpp
promag,2021-05-14 15:45:27,Since you are not splitting maybe add a comment for now like `// Take a snapshot of current nodes before acceptation new ones - new nodes are irrelevant below` or something like that.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632622357,632622357,src/net.cpp
jnewbery,2021-05-14 16:30:39,Could we move this call to `SocketEvents()` to below the _Accept new connections_ logic? I think it's simpler to reason about if we're not holding the nodes snapshot across the _Accept new connections_ logic.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632651133,632651133,src/net.cpp
jnewbery,2021-05-15 14:58:09,"Sorry, ignore this. I've just realized that the _Accept new connections_ logic is using the `recv_set` that's populated by `SocketEvents()`.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632966401,632966401,src/net.cpp
amitiuttarwar,2021-05-15 15:20:46,"I'm guessing you've defined this class within `CConnman` to enable access to the private members. You could instead define the class in `net.cpp` as a standalone by making `vNodes` and `cs_vNodes` protected & declaring `friend class NodesSnapshot` here. Seems nice to keep this mechanism that's only used internally out of the header file.\n\ndiff üëáüèΩ\n(also includes constifying `m_nodes_copy`)\n",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632972362,632972362,src/net.h
amitiuttarwar,2021-05-15 15:22:20,"```suggestion\n    const NodesSnapshot snap{*this};\n```",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632972531,632972531,src/net.cpp
amitiuttarwar,2021-05-15 15:22:32,"```suggestion\n            const NodesSnapshot snap{*this};\n```",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632972552,632972552,src/net.cpp
amitiuttarwar,2021-05-15 15:33:32,"```suggestion\n        const std::vector<CNode*> m_nodes_copy;\n```\n\nCan `const` this if you add the constructor assignment to the initializer list (done in https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632972362 diff) ",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632973688,632973688,src/net.h
amitiuttarwar,2021-05-15 15:44:42,"I see that you haven't changed the behavior here, but I'm curious about the pre-existing logic: \n\nIs it necessary for `Release()` to be under the lock? \n\nIt makes sense that `AddRef` has to be under the lock so there isn't a race between a thread that is trying to operate on the node, and a thread that is evaluating for disconnect. However, with `Release`, I don't think there is actually p",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632974904,632974904,src/net.h
jnewbery,2021-05-15 17:38:06,"I like this. A few notes:\n\n- the diff as shown is corrupted (contains the `+        const CConnman& m_connman;` line twice) and so doesn't apply with `git apply`.\n- `vNodes` and `cs_vNodes` don't need to change to be protected. Friend classes have access to private members.\n- `NodesSnapshot` can be in the unnamed namespace since it's only needed in the net.cpp translation unit.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632986434,632986434,src/net.h
jnewbery,2021-05-15 17:47:12,"The `m_nodes_copy{m_connman.vNodes}` in the initializer list is accessing `vNodes` without the `cs_vNodes` lock. You could update it to take the lock:\n\n```diff\ndiff --git a/src/net.cpp b/src/net.cpp\nindex 6040ee86be..d39aa14b20 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -117,7 +117,9 @@ std::string strSubVersion;\n class NodesSnapshot\n {\n     public:\n-        explicit Nodes",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632987235,632987235,src/net.h
jnewbery,2021-05-15 17:52:59,"I think this is correct. There's no need to hold `cs_vNodes` when calling `node->Release();`\n\nRemoving this lock means that the `m_connman` member is no longer required.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632987838,632987838,src/net.h
jnewbery,2021-05-15 18:07:45,"What do you think about just wrapping the m_nodes_copy `begin()` and `end()` functions:\n\n```diff\ndiff --git a/src/net.cpp b/src/net.cpp\nindex 6040ee86be..5388af02e3 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -116,6 +116,10 @@ std::string strSubVersion;\n  */\n class NodesSnapshot\n {\n+    private:\n+        const CConnman& m_connman;\n+        const std::vector<CNode*> m_no",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632989196,632989196,src/net.h
vasild,2021-05-17 14:48:38,"Right, a comment is warranted. Added:\n\n```cpp\n    // Accept new connections. Done after taking a snapshot of the nodes because\n    // `AcceptConnection()` will add new entries to `vNodes` which are unwanted\n    // in the loop below because:\n    // - all of `recvSet`, `sendSet` and `errorSet` will be `false` for them\n    // - `InactivityCheck()` will either be a noop or will wrongly c",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r633599186,633599186,src/net.cpp
vasild,2021-05-17 15:04:40,"> I'm guessing you've defined this class within CConnman to enable access to the private members.\n\nNo, I did it to minimize the scope of the newly added class.\n\n> Seems nice to keep this mechanism that's only used internally out of the header file.\n\nWhy? It is used internally by `CConnman` and is defined in its `private:` section. If defined in `net.cpp` that would broaden its scope un",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r633613085,633613085,src/net.h
vasild,2021-05-17 15:06:47,Done.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r633614762,633614762,src/net.cpp
vasild,2021-05-17 15:06:57,Done.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r633614896,633614896,src/net.cpp
vasild,2021-05-17 15:08:39,The copying and `AddRef()` should be done under the lock.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r633616340,633616340,src/net.h
vasild,2021-05-17 15:10:02,"> Is it necessary for `Release()` to be under the lock?\n\nThe lock has two effects:\n* All `Release()`s happen atomically together. If removed, then other threads could observe some nodes from the snapshot released and some not yet released. I think that is ok.\n* No memory reordering can happen. The `nRefCount--` on the atomic variable has the same effect because `--` is equivalent to [`fetc",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r633617646,633617646,src/net.h
vasild,2021-05-17 15:17:35,"I think both ways would work.\n\nThe begin/end variant seems to be a bit more code - it saves just `.Nodes()` from the callers but has two methods and is also less friendly to grepping and code navigation - now I can point my ""IDE"" to `Nodes()` on the line `for (CNode* pnode : snap.Nodes()) {` and see what it returns or its definition. Not so with the `for (CNode* pnode : snap) {` line.\n\nTha",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r633625021,633625021,src/net.h
jnewbery,2021-05-17 15:22:19,No strong preference. Just pointing out an alternative. I'll mark this as resolved.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r633628981,633628981,src/net.h
promag,2021-05-17 21:50:41,"Why `AddRef`? @amitiuttarwar suggestion can be accomplished with\n```diff\n         explicit NodesSnapshot(const CConnman& connman)\n+            : m_nodes_copy(WITH_LOCK(connman.cs_vNodes, return connman.vNodes))\n         {\n-            LOCK(connman.cs_vNodes);\n-            m_nodes_copy = connman.vNodes;\n             for (auto& node : m_nodes_copy) {\n                 node->AddRef();",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r633891308,633891308,src/net.h
vasild,2021-05-18 08:04:05,"Yeah :) `AddRef()` needs to be under the same lock that did the copy (without release in between) because otherwise some of the copied elements may be destroyed in the meantime and `node->` to try to dereference a dangling pointer while trying to call `AddRef()`.\n\nIt should work with something like\n```cpp\nexplicit NodesSnapshot(const CConnman& connman)\n            : m_nodes_copy(WITH_LOC",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r634141685,634141685,src/net.h
jnewbery,2021-05-18 09:15:34,"> > Seems nice to keep this mechanism that's only used internally out of the header file.\n\n> Why?\n\nBecause it's good to keep header files limited to what's required to be included into other translation units (as far as is possible). That's beneficial for both build time and code management reasons.\n\nI think both ways are fine, and that eventually we'll want to virtualize both `CNode`'",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r634196764,634196764,src/net.h
vasild,2021-05-18 10:35:22,"> That's beneficial for both build time...\n\nI do not think it is justified to put private class members as globals in the `.cpp` file in order to minimize the header file so that it compiles faster.\n\n> ... and code management reasons.\n\nUnnecessary broadened scope has an adverse effect on code management.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r634254981,634254981,src/net.h
amitiuttarwar,2021-05-18 22:00:44,"If `NodesSnapshot` was defined as a standalone class in `net.cpp`, it could be added to the unnamed namespace so it would only be accessible within the same translation unit, but it would broaden the scope beyond `CConnman` to within the translation unit. \n\nMy preference for it to be in the `.cpp` is because I find it easier to understand responsibilities & maneuver the files when the headers ",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r634777026,634777026,src/net.h
vasild,2021-05-19 09:40:06,"@amitiuttarwar, maybe you would like the following pattern to be more widespread:\n\nhttps://github.com/bitcoin/bitcoin/blob/1ed859e90e18384376e3a1ff0cb76f3e9ab11c2d/src/txrequest.h#L96-L101",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r635077910,635077910,src/net.h
amitiuttarwar,2021-05-19 18:03:51,"yeah, I'm def a fan of the pimpl / related patterns. Another example is how its used in `net_processing` since #20811.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r635470619,635470619,src/net.h
jonatack,2021-09-20 09:08:22,"0d706a6 if you retouch or have to rebase\n```suggestion\n    const NodesSnapshot snap{*this, /* shuffle=*/ false};\n```",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r711994001,711994001,src/net.cpp
jonatack,2021-09-20 09:08:52,"0d706a6 if you retouch or have to rebase, I think the comment about randomizing makes more sense with a named arg for `shuffle` \n```suggestion\n            const NodesSnapshot snap{*this, /* shuffle=*/ true};\n```",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r711994365,711994365,src/net.cpp
jonatack,2021-09-20 09:39:04,"bf0dc73 nit doc suggestion, `s/readiness for IO/IO readiness/` or the pithier\n\n```suggestion\n     * Generate a collection of sockets to check for IO readiness.\n```",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r712014389,712014389,src/net.h
jonatack,2021-09-20 09:50:56,"072896b these braces were needed to define the scope for the `LOCK(cs_vNodes);` mutex lock that is removed in the previous commit, so it may be a bit clearer to remove them at the same time as the lock. No strong opinion though. ",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r712022174,712022174,src/net.cpp
vasild,2021-09-28 07:31:07,Added the comment. Some grepping showed the most common form of this is `func(/* description */ param);`,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r717301345,717301345,src/net.cpp
vasild,2021-09-28 07:31:14,Added the comment. Some grepping showed the most common form of this is `func(/* description */ param);`,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r717301455,717301455,src/net.cpp
vasild,2021-09-28 07:31:24,Done.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r717301573,717301573,src/net.h
vasild,2021-09-28 07:34:14,"I deliberately did the white-space change in a separate commit to ease review which would be harder if logic changes are mixed with lots of white-space changes. I extended the commit message though, so that it is easier to answer ""how did we end up with those unnecessary braces"".",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r717303767,717303767,src/net.cpp
jonatack,2021-09-28 09:08:46,"Yes. I've very recently started to switch to the `/*named_arg=*/` format for `bugprone-argument-comment` added in fa57fa1a2e7. Not sure how picky clang is about it though.\n\nhttps://releases.llvm.org/12.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone-argument-comment.html.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r717379468,717379468,src/net.cpp
jonatack,2021-09-28 09:14:31,"Yes, no worries. Since some time now my `.gitconfig` has this set by default to simplify whitespace review (open to suggestions).\n```\n[diff]\n  renames = copies\n	colorMoved = dimmed-zebra\n	colorMovedWs = allow-indentation-change\n```\n",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r717384169,717384169,src/net.cpp
MarcoFalke,2021-09-28 09:41:37,"My testing revealed that the `=` is needed for clang-tidy. I am likely going to use `(/*foo_bar=*/123, ` from now on (I think clang-format ""mirrors"" the whitespace, so clang-format valid options are `(/*foo_bar=*/123, /*bar_foor=*/321, ` or `(/* foo_bar = */ 123, /* bar_foor = */ 321, `",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r717405324,717405324,src/net.cpp
jonatack,2021-09-28 10:09:46,"Thanks, good to know.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r717427120,717427120,src/net.cpp
vasild,2021-09-28 12:37:04,`/* bar_foor= */ 321` is also ok for clang-format (re-formatting that with clang-format leaves it unmodified). I don't care which one as long as it is consistent through the code. I will use `/*foo_bar=*/123` too.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r717530409,717530409,src/net.cpp
jnewbery,2021-10-08 14:50:21,"I think the logical flow of this function would be clearer if this logic was either moved to the bottom of the function, or pulled out of `SocketHandler()` entirely and put in `ThreadSocketHandler()` (or a dedicated function for accepting new connections). It's difficult to get my head around creating a NodesSnapshot, receiving events for those nodes, then updating vNodes and finally processing th",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r725079584,725079584,src/net.cpp
vasild,2021-10-08 15:12:15,"Alright, I think you are on the same page as @promag: https://github.com/bitcoin/bitcoin/pull/21943#discussion_r632360108. I will move it to the bottom or see how many more changes to split it (pull it out). @jonatack, what do you think?",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r725096927,725096927,src/net.cpp
jonatack,2021-10-08 15:42:18,"Agree, I recall writing the same comment during my main review, moving the code to the end, then thinking it maybe made the most sense to make it a separate function, then deciding to not hold up this pull with that since it's been open a while and you have more steps in #21878. But yes.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r725119190,725119190,src/net.cpp
LarryRuane,2021-10-13 21:52:35,"nit: since you're changing this line anyway, maybe reverse the space and `&` for the 3 set arguments (to conform to style convention)?\n(Same comment for `SocketEvents()` below, and also in `net.h`.)",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r728473929,728473929,src/net.cpp
LarryRuane,2021-10-13 22:10:01,"Perhaps beyond the scope of this PR, but it may be better if [`Release()`](https://github.com/bitcoin/bitcoin/blob/71a85fbd09b5a450edc53a8ba4131f32e7136ca7/src/net.h#L630) asserted that the count is valid:\n```\nvoid Release()\n{\n    assert(nRefCount > 0);\n    nRefCount--;\n}\n```\nThe count validity is asserted in `GetRefCount()` but it would be better to catch the malefactor in the act",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r728483006,728483006,src/net.h
LarryRuane,2021-10-14 16:48:48,"I would do this a little differently:\n```\nNodesSnapshot(const CConnman& connman)\n{\n    LOCK(connman.cs_vNodes);\n    m_nodes_copy = connman.vNodes;\n    for (auto& node : m_nodes_copy) {\n        node->AddRef();\n    }\n}\nstd::vector<CNode*>& Shuffle() {\n    FastRandomContext rng;\n    ::Shuffle(m_nodes_copy.begin(), m_nodes_copy.end(), rng);\n    return m_nodes_copy;\n}\n```",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r729167321,729167321,src/net.h
LarryRuane,2021-10-14 16:53:01,"Suggestion, this may be a little more elegant than the boolean shuffle argument (see suggested changes to `NodesSnapshot`)\n```suggestion\n    const NodesSnapshot snap{*this};\n```",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r729170603,729170603,src/net.cpp
promag,2021-10-16 10:19:27,"Yup, what @jnewbery says makes sense to me as I previously stumbled on the same thing. I'd prefer to review that refactor in a follow-up but am also happy to review here.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r730243473,730243473,src/net.cpp
vasild,2021-10-26 08:11:16,"This was changed, see https://github.com/bitcoin/bitcoin/pull/21943#issuecomment-951672368",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r736268482,736268482,src/net.cpp
vasild,2021-10-26 08:23:44,"I split the accepting of the new connections into its own method, that is independent of `CConnMan::SocketHandler()`, does its own socket polling and can be called independently from `CConnMan::SocketHandler()`. However after doing that, the following realization dawned on me (tldr: I ditched that):\n\n:bulb: We don't want to wait separately for incoming connections because that event is ""rare"",",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r736278978,736278978,src/net.cpp
vasild,2021-10-26 08:29:24,This would require an extra call to `Shuffle()` right after construction. I don't see the benefit of it. It would require the snapshot variable to be non-`const`.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r736283980,736283980,src/net.h
vasild,2021-10-26 08:33:30,"I think it is ok as it is now. We are not frowning upon boolean arguments, are we? If the boolean argument looks too bad, then a 2-value enum can be introduced so call sites look like:\n```cpp\nconst NodesSnapshot snap{*this, NodesSnapshot::SHUFFLE};\n// or\nconst NodesSnapshot snap{*this, NodesSnapshot::NO_SHUFFLE};\n```\nbut I think this would be an overkill.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r736287423,736287423,src/net.cpp
promag,2021-10-28 13:16:41,"3c8fcb94691584871edaa1a142bfa0ebadc01d67\n\nI think you can ditch this?",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r738379450,738379450,src/net.cpp
laanwj,2021-11-10 20:12:51,I think with the named argument this is fine.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r746951383,746951383,src/net.cpp
vasild,2021-11-11 16:21:32,"You are right - the surrounding `SocketEvents()` and `SocketHandlerConnected()` both contain a similar check and would quit ""quickly"" if `interruptNet` becomes true.\n\nMaybe the newly added `SocketHandlerListening()` deserves such a check too, once per each listening socket to be processed?",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r747639993,747639993,src/net.cpp
promag,2021-11-11 16:24:54,"Yes, doesn't hurt I guess.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r747642620,747642620,src/net.cpp
vasild,2021-11-12 09:54:27,Done.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r748117765,748117765,src/net.cpp
jonatack,2021-11-12 14:40:58,"4097d14 `s/readiness/the readiness of/` ? Perhaps also clarify ""ready"". Also `s/none is/none are/`.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r748339454,748339454,src/net.cpp
jonatack,2021-11-12 14:46:37,"9ca6dac0 naming nit: ""snap"" is a verb similar to ""break""; if you retouch, `s/snap/snapshot/` would be clearer",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r748343811,748343811,src/net.cpp
jonatack,2021-11-17 11:50:21,"9ca6dac0 can omit localvar `rng`\n```diff\n             if (shuffle) {\n-                FastRandomContext rng;\n-                Shuffle(m_nodes_copy.begin(), m_nodes_copy.end(), rng);\n+                Shuffle(m_nodes_copy.begin(), m_nodes_copy.end(), FastRandomContext());\n             }\n```\n",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r751165699,751165699,src/net.h
jonatack,2021-11-17 12:10:10,"4097d14 unneeded style change, would leave as-is (and as currently exists in both of the `SocketEvents()` functions)\n```diff\n-    std::set<SOCKET> recv_set;\n-    std::set<SOCKET> send_set;\n-    std::set<SOCKET> error_set;\n-\n+    std::set<SOCKET> recv_set, send_set, error_set;\n```\n",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r751179588,751179588,src/net.cpp
jonatack,2021-11-17 12:24:40,"4097d14 found these comments helpful, would keep\n```diff\n+        // Service each socket\n         SocketHandlerConnected(snap.Nodes(), recv_set, send_set, error_set);\n     }\n \n+    // Accept new connections\n     SocketHandlerListening(recv_set);\n```\n",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r751190044,751190044,src/net.cpp
jonatack,2021-11-17 12:28:39,"4097d14 the existing ""Accept incoming connections"" comment is an easier-to-understand description for me than this one. \n\nMaybe:\n```suggestion\n     * Accept incoming connections, i.e. one from each read-ready listening socket.\n```",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r751192944,751192944,src/net.h
vasild,2021-11-18 12:41:58,Done.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r752203361,752203361,src/net.h
vasild,2021-11-18 12:42:09,Done.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r752203519,752203519,src/net.cpp
vasild,2021-11-18 12:44:55,I think it is good to always declare one variable per line.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r752205516,752205516,src/net.cpp
vasild,2021-11-18 12:45:04,Done.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r752205608,752205608,src/net.h
vasild,2021-11-18 12:47:09,"`snap` is used as a short for `snapshot`, not in the ""verb"" sense. I have seen this elsewhere too. For example `zfs list -t snapshot` and `zfs list -t snap` both do the same thing.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r752207151,752207151,src/net.cpp
vasild,2021-11-18 12:47:19,Done.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r752207254,752207254,src/net.cpp
vasild,2021-11-18 12:50:03,"Sometimes reviewers ask for minimal changes, without combining ""real"" changes with whitespace ones. So I refrained from running `clang-format` on this line. Done now.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r752209237,752209237,src/net.cpp
LarryRuane,2021-11-19 20:48:49,"I guess it's just me, but I still don't like this boolean (but I do agree with you that it's better than an `enum`). In general, I dislike making a decision at run time (in this case, the constructor evaluating the `shuffle` argument) that is actually being decided at compile (in this case, all the callers pass a constant bool for this argument), if possible (sometimes it's not).\n\nWhat do you ",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r753523180,753523180,src/net.cpp
LarryRuane,2021-11-19 21:22:21,"Consider:\n```cpp\nstruct SocketSets {\n    std::set<SOCKET> recv;\n    std::set<SOCKET> send;\n    std::set<SOCKET> error;\n}\n```",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r753539733,753539733,src/net.cpp
vasild,2021-11-23 13:08:25,"@LarryRuane, something like this is coming as a subsequent change from https://github.com/bitcoin/bitcoin/pull/21878 (see commit `net: introduce Sock::WaitMany()` and the structures `WaitEvents` and `WaitData` introduced in that commit).\n\nThe current combination of sets stores the sockets in ""one pile of sockets that are ready for read"" and ""one pile of sockets that are ready for write"" (notic",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r755105857,755105857,src/net.cpp
vasild,2021-11-23 13:19:48,"> What do you think about always shuffling?\n\nI do not have a strong opinion. My main point with the current code is to preserve behavior - it was not shuffled before, it will not be shuffled with this PR. This PR has a different purpose.\n\nIn general, I try to avoid such unnecessary behavioral changes. _They may have very subtle effects._\n\nMaybe it is ok to always shuffle and remove the",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r755114947,755114947,src/net.cpp
promag,2021-11-23 18:09:16,Slight preference to keep behavior here and simplify in a follow-up.,https://github.com/bitcoin/bitcoin/pull/21943#discussion_r755390067,755390067,src/net.cpp
laanwj,2021-11-24 15:43:31,"I like the idea of abstracting this but it seems out of scope of this PR.\n\n> It is more convenient to have just one pile of sockets each one with attached ready-for-read and ready-for-write flags.\n\nEventually it depends on the selection mechanism used isn't it? When it's abstracted, might as well store it in a format ready to feed to say, `poll()` or `select()` whatever is used.",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r756202735,756202735,src/net.cpp
vasild,2021-11-24 16:06:25,"Yes, those 3 sets are dragged around as parameters to functions and as local variables. It is an obvious improvement to pack them together somehow. Not the purpose of this PR. Once this is PR is merged I will chop off another piece from #21878 into a smaller/manageable PR that will contain the commit which introduces such a packing `net: introduce Sock::WaitMany()`. We can discuss it there, I don'",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r756226265,756226265,src/net.cpp
vasild,2021-11-26 12:49:31,"> Once this is PR is merged I will chop off another piece from #21878 into a smaller/manageable PR that will contain the commit which introduces such a packing `net: introduce Sock::WaitMany()`\n\nThere are too many conflicts if I try to cherry-pick the `WaitMany()` stuff on top of bare `master` - it touches the same areas of code as the preceding commits from #21878. I chopped off those precedi",https://github.com/bitcoin/bitcoin/pull/21943#discussion_r757474099,757474099,src/net.cpp
