[
  {
    "sha": "d4dde24034d7467883b290111da60527ab8048f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGRkZTI0MDM0ZDc0Njc4ODNiMjkwMTExZGE2MDUyN2FiODA0OGY4",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-30T16:07:36Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-10-03T10:56:19Z"
      },
      "message": "net: Add CNode::m_inbound_onion data member",
      "tree": {
        "sha": "49efaac7b5b57b2231a2ce8721068585c26fdba6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49efaac7b5b57b2231a2ce8721068585c26fdba6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4dde24034d7467883b290111da60527ab8048f8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl94WNMACgkQQQEIES5+\nqB+QNg/+NugkyQeS/tXMSmg7Xx3n7ylj0+wM5tqfzuZY1VYWlsriQqD8rmCZr9IE\nDYHN2gMTFCvJejeTjmdRKEZ3J8EopnoZls/UgB75RxV4O6gLtlgVO/SCgnwINMbZ\nQbRpvJLX8BPxYvOofmjEFz/mD/IywmDxd8KRb6wmaOMR2Xws8MbG1M3NnqQ1lsbb\nU+/brtldFw7ISvMBRaqE6YKZCbOHQSWhVsQbCxk3wr5PkTSSiQLL4Z79xKAzmLmb\n68xoQCqMx9bd6Ytu+rcRfEA1mEYLOk1b+qi4mAo3nECKXGdwocPqrbjy36kqp+Bs\nqPoUT6kXvWsXKSeuphnd+c2mK8qmj6dVle8Gj68xJB/SxD5A6PxtFucy+X1Z2ySz\nsKUYOS0JQYBov0g5gQsLllD01nu3AR2yag/l4nZZqJOG9q0RbgzCY7IbJlFpvYOq\nYnSuzca0qwetr56+h3t8IGII8PWkDoByMsluk97yiC8EZM0RvRkYjV7ioY2vfa+4\nsXuVT+2eVi3SkgdYqsVEkOkk/1E8n2X4dt4BgNPT9kE8lJGljv2Dc2pEh/xPEPpn\noDbEcM+SdN74PKcN5zsu5AlpNljrqMIQ9BmF8YWjKOhl9WV5zUZAI31TmyEh9tPf\nbpxHCJNJD7Dj8QU78pnp21sOqzhyzeaUTusa+d3jya45D4nmnqM=\n=AV8E\n-----END PGP SIGNATURE-----",
        "payload": "tree 49efaac7b5b57b2231a2ce8721068585c26fdba6\nparent 54fc96ffa70ad3a53d32709101b7a2ce064d822e\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1601482056 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1601722579 +0300\n\nnet: Add CNode::m_inbound_onion data member\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4dde24034d7467883b290111da60527ab8048f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4dde24034d7467883b290111da60527ab8048f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4dde24034d7467883b290111da60527ab8048f8/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54fc96ffa70ad3a53d32709101b7a2ce064d822e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54fc96ffa70ad3a53d32709101b7a2ce064d822e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54fc96ffa70ad3a53d32709101b7a2ce064d822e"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 19,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9f8c8277417cf13f909f46fe9f658f8ff253b403",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4dde24034d7467883b290111da60527ab8048f8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4dde24034d7467883b290111da60527ab8048f8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d4dde24034d7467883b290111da60527ab8048f8",
        "patch": "@@ -41,6 +41,7 @@\n static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\");\n #endif\n \n+#include <algorithm>\n #include <cstdint>\n #include <unordered_map>\n \n@@ -1118,7 +1119,9 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     if (NetPermissions::HasFlag(permissionFlags, PF_BLOOMFILTER)) {\n         nodeServices = static_cast<ServiceFlags>(nodeServices | NODE_BLOOM);\n     }\n-    CNode* pnode = new CNode(id, nodeServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND);\n+\n+    const bool inbound_onion = std::find(m_onion_binds.begin(), m_onion_binds.end(), addr_bind) != m_onion_binds.end();\n+    CNode* pnode = new CNode(id, nodeServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n     pnode->AddRef();\n     pnode->m_permissionFlags = permissionFlags;\n     // If this flag is present, the user probably expect that RPC and QT report it as whitelisted (backward compatibility)\n@@ -2859,7 +2862,7 @@ int CConnman::GetBestHeight() const\n \n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in)\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion)\n     : nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     addrBind(addrBindIn),\n@@ -2871,7 +2874,8 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nLocalHostNonce(nLocalHostNonceIn),\n     m_conn_type(conn_type_in),\n     nLocalServices(nLocalServicesIn),\n-    nMyStartingHeight(nMyStartingHeightIn)\n+    nMyStartingHeight(nMyStartingHeightIn),\n+    m_inbound_onion(inbound_onion)\n {\n     hSocket = hSocketIn;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;"
      },
      {
        "sha": "e702c13db366c74a4506458cb50335d672a93345",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4dde24034d7467883b290111da60527ab8048f8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4dde24034d7467883b290111da60527ab8048f8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d4dde24034d7467883b290111da60527ab8048f8",
        "patch": "@@ -253,6 +253,7 @@ class CConnman\n             LOCK(cs_vAddedNodes);\n             vAddedNodes = connOptions.m_added_nodes;\n         }\n+        m_onion_binds = connOptions.onion_binds;\n     }\n \n     CConnman(uint64_t seed0, uint64_t seed1, bool network_active = true);\n@@ -586,6 +587,12 @@ class CConnman\n \n     std::atomic<int64_t> m_next_send_inv_to_incoming{0};\n \n+    /**\n+     * A vector of -bind=<address>:<port>=onion arguments each of which is\n+     * an address and port that are designated for incoming Tor connections.\n+     */\n+    std::vector<CService> m_onion_binds;\n+\n     friend struct CConnmanTest;\n     friend struct ConnmanTestMsg;\n };\n@@ -1035,7 +1042,7 @@ class CNode\n \n     std::set<uint256> orphan_work_set;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn, ConnectionType conn_type_in);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn, ConnectionType conn_type_in, bool inbound_onion = false);\n     ~CNode();\n     CNode(const CNode&) = delete;\n     CNode& operator=(const CNode&) = delete;\n@@ -1073,6 +1080,10 @@ class CNode\n     // Our address, as reported by the peer\n     CService addrLocal GUARDED_BY(cs_addrLocal);\n     mutable RecursiveMutex cs_addrLocal;\n+\n+    //! Whether this peer connected via our Tor onion service.\n+    const bool m_inbound_onion{false};\n+\n public:\n \n     NodeId GetId() const {"
      }
    ]
  },
  {
    "sha": "49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWZiYTljMWFhNjk5ZDNhYTQ3ZWE0ZGFmZTA3YjQ3YzhkMGFhYzZl",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-30T16:19:19Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-10-03T12:38:19Z"
      },
      "message": "net: Add CNode::ConnectedThroughNetwork member function",
      "tree": {
        "sha": "e58b1df3d151cb25d898e14a095b12d455ba7894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e58b1df3d151cb25d898e14a095b12d455ba7894"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl94cLsACgkQQQEIES5+\nqB/7oBAAuyRKv5LArmrwR9JPFdxTudQoqgsOaPqlKsL9sy2k7oq7kDhgZxpbVi/c\n1KCFy6Lmi/RdhzWNGTxgX5idU6r3QD4ul8eh6kKKQZkfvFk/3Hgrc2758NVs9Y4S\nOAwljGy3j2Gc8FED7JWM5vbYSN87jvDsc8FLWnKPLUaKdkugDxoE7WGWvuLQ6ip+\nIlPJafpcA1foTbp0wMo08FgOLS8TALCn/2+pesPzn8nTPOZMq8QoyX8Qp/TPvhfZ\nhzFunAUOHo2n/u6lZHx9UKYmmfj0efOFckEBZCvqY8nHyDi8jYVtPzXW9+ebHMwd\njMosOc/623Kvdi96mZhbXxj1Lt5H4Rqc2wCjre69SJHBctGJp6pRg3pV9tshHMcH\nPkTd3+/aQP4OuRwp0soXcTKkh8ykZpm4gXtNnVLLhXIZSjMJkDwHpM3LChOA1ZQh\n0HhjkcCDZdvUHhrESDK4NxLn4ScLVYsBLvZ6X1W7CKlVF18s7d1MbSjDuGWB1NPx\nvdGRdAPIvOMJVljGPSI89/CoZd4pn/GjEBwyFx2uztXc0IV8t8jA73YspZgzjQB+\nKufI3Pio1yLWmkwFOeOoepS4IPCQINVlEQkc8x0uCiDWZKmesyNCctOAEtU6wIxQ\nO22LTAJ0wMKC8f+0M1NNAK9KYwdaatK3qzji5GGNdqpIe6nGHVU=\n=tnyy\n-----END PGP SIGNATURE-----",
        "payload": "tree e58b1df3d151cb25d898e14a095b12d455ba7894\nparent d4dde24034d7467883b290111da60527ab8048f8\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1601482759 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1601728699 +0300\n\nnet: Add CNode::ConnectedThroughNetwork member function\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4dde24034d7467883b290111da60527ab8048f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4dde24034d7467883b290111da60527ab8048f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4dde24034d7467883b290111da60527ab8048f8"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 19,
      "deletions": 2
    },
    "files": [
      {
        "sha": "54d572c68c0b9e12b9fdb33d61d4cc8fdd548d9e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e",
        "patch": "@@ -539,6 +539,11 @@ void CNode::SetAddrLocal(const CService& addrLocalIn) {\n     }\n }\n \n+Network CNode::ConnectedThroughNetwork() const\n+{\n+    return IsInboundConn() && m_inbound_onion ? NET_ONION : addr.GetNetClass();\n+}\n+\n #undef X\n #define X(name) stats.name = name\n void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)"
      },
      {
        "sha": "a8b13124c3ff4c18e9958245d5afce46507d4ab0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e",
        "patch": "@@ -961,6 +961,18 @@ class CNode\n         assert(false);\n     }\n \n+    /**\n+     * Get network the peer connected through.\n+     *\n+     * Returns Network::NET_ONION for *inbound* onion connections,\n+     * and CNetAddr::GetNetClass() otherwise. The latter cannot be used directly\n+     * because it doesn't detect the former, and it's not the responsibility of\n+     * the CNetAddr class to know the actual network a peer is connected through.\n+     *\n+     * @return network the peer connected through.\n+     */\n+    Network ConnectedThroughNetwork() const;\n+\n protected:\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n     mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);"
      },
      {
        "sha": "d460d0139f2eb6fefd3884e216ebd8afe8ce5ebb",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e",
        "patch": "@@ -629,7 +629,7 @@ uint32_t CNetAddr::GetLinkedIPv4() const\n     assert(false);\n }\n \n-uint32_t CNetAddr::GetNetClass() const\n+Network CNetAddr::GetNetClass() const\n {\n     // Make sure that if we return NET_IPV6, then IsIPv6() is true. The callers expect that.\n "
      },
      {
        "sha": "fe99f41c6afa31b592451ef66c6fd755456f2787",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e",
        "patch": "@@ -182,7 +182,7 @@ class CNetAddr\n         std::string ToStringIP() const;\n         uint64_t GetHash() const;\n         bool GetInAddr(struct in_addr* pipv4Addr) const;\n-        uint32_t GetNetClass() const;\n+        Network GetNetClass() const;\n \n         //! For IPv4, mapped IPv4, SIIT translated IPv4, Teredo, 6to4 tunneled addresses, return the relevant IPv4 address as a uint32.\n         uint32_t GetLinkedIPv4() const;"
      }
    ]
  },
  {
    "sha": "3984b78cd7f49e409377f2175a56e8e4bd71d1d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTg0Yjc4Y2Q3ZjQ5ZTQwOTM3N2YyMTc1YTU2ZThlNGJkNzFkMWQ4",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-10-03T09:18:36Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-10-03T12:38:49Z"
      },
      "message": "test: Add tests for CNode::ConnectedThroughNetwork",
      "tree": {
        "sha": "225d78abc20b8269c539a1297123dcdc7a4de548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/225d78abc20b8269c539a1297123dcdc7a4de548"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3984b78cd7f49e409377f2175a56e8e4bd71d1d8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl94cNkACgkQQQEIES5+\nqB+XVw//T0CwND00gZivgce3KTY8MLacJ35UfvI1ZcxhwO1+fL5Oy6f8/qGRD8j4\nhm/gwK7HRhdh2PZ153zIPu9h4dXjgYGfF9El4AZioZsYMOSGezlN9T0YRR1rjzor\n8d0xj7xNz3+JVULQshWHvY7oY/jpfariME0txf1f1f+/GbWZ+MRp5I9ZDoYFpX3Y\n57txGEM5qiwGEBtjcLTpCvGeVuhl+q1BrvXJ261t3A7+MBI/BH9gfzB6a76L9Erv\n1IB3kk9m3YOIHXijQJmJASej3HJZD4HyzeoIYYZ08nXAqn9LQywl+kg7KI5qDbli\nTazLgVhWR+ZHlk7d+F+glVCqT/q3fr6M+9d6g1MRFI1tuHt+vyw4SzzVvbsirhQi\nwRVKtbB9mT7ukOk+4wDSlvVHcbjFfHfZ2GQxCaBPuP+v37k5yR6p01yzlFo7FSg6\nlBp4c8HAMlrPClEFWU/E+VGOCefvb16/YHQYQuyIj3V7TYme4g6o7eoulxYwvXm+\n/NUhhMC1j/nfuIH+brFd1eUSneGYwblyfPJ+sTA1iVz7ammAlQhdeWLhVpuMKUm0\nNUonuYlV85PEJDWK8hXkkEV65BreISRQIrFLdWeSYkts+7tlnMLJh34PsQAa4yNY\nJPGjMfd6cR3NyQRwNtnA2tziruKCNLB0+COsrS8ZSBeDRbrXBcg=\n=wDBy\n-----END PGP SIGNATURE-----",
        "payload": "tree 225d78abc20b8269c539a1297123dcdc7a4de548\nparent 49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1601716716 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1601728729 +0300\n\ntest: Add tests for CNode::ConnectedThroughNetwork\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3984b78cd7f49e409377f2175a56e8e4bd71d1d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3984b78cd7f49e409377f2175a56e8e4bd71d1d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3984b78cd7f49e409377f2175a56e8e4bd71d1d8/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49fba9c1aa699d3aa47ea4dafe07b47c8d0aac6e"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 45,
      "deletions": 4
    },
    "files": [
      {
        "sha": "38188387658b0d0b7a89e4f5a538d4ab234f383a",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3984b78cd7f49e409377f2175a56e8e4bd71d1d8/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3984b78cd7f49e409377f2175a56e8e4bd71d1d8/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=3984b78cd7f49e409377f2175a56e8e4bd71d1d8",
        "patch": "@@ -46,7 +46,8 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n                *address_bind,\n                fuzzed_data_provider.ConsumeRandomLengthString(32),\n-               fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND_FULL_RELAY, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH})};\n+               fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND_FULL_RELAY, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH}),\n+               fuzzed_data_provider.ConsumeBool()};\n     while (fuzzed_data_provider.ConsumeBool()) {\n         switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 11)) {\n         case 0: {\n@@ -148,4 +149,5 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                                                         fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({NetPermissionFlags::PF_NONE, NetPermissionFlags::PF_BLOOMFILTER, NetPermissionFlags::PF_RELAY, NetPermissionFlags::PF_FORCERELAY, NetPermissionFlags::PF_NOBAN, NetPermissionFlags::PF_MEMPOOL, NetPermissionFlags::PF_ISIMPLICIT, NetPermissionFlags::PF_ALL}) :\n                                                         static_cast<NetPermissionFlags>(fuzzed_data_provider.ConsumeIntegral<uint32_t>());\n     (void)node.HasPermission(net_permission_flags);\n+    (void)node.ConnectedThroughNetwork();\n }"
      },
      {
        "sha": "575951d645529722648fed2a1f12bf22af99c652",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 3,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3984b78cd7f49e409377f2175a56e8e4bd71d1d8/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3984b78cd7f49e409377f2175a56e8e4bd71d1d8/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=3984b78cd7f49e409377f2175a56e8e4bd71d1d8",
        "patch": "@@ -185,21 +185,60 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n     std::string pszDest;\n \n-    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, ConnectionType::OUTBOUND_FULL_RELAY);\n+    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(\n+        id++, NODE_NETWORK, height, hSocket, addr,\n+        /* nKeyedNetGroupIn = */ 0,\n+        /* nLocalHostNonceIn = */ 0,\n+        CAddress(), pszDest, ConnectionType::OUTBOUND_FULL_RELAY);\n     BOOST_CHECK(pnode1->IsFullOutboundConn() == true);\n     BOOST_CHECK(pnode1->IsManualConn() == false);\n     BOOST_CHECK(pnode1->IsBlockOnlyConn() == false);\n     BOOST_CHECK(pnode1->IsFeelerConn() == false);\n     BOOST_CHECK(pnode1->IsAddrFetchConn() == false);\n     BOOST_CHECK(pnode1->IsInboundConn() == false);\n-\n-    std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, ConnectionType::INBOUND);\n+    BOOST_CHECK_EQUAL(pnode1->ConnectedThroughNetwork(), Network::NET_IPV4);\n+\n+    std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(\n+        id++, NODE_NETWORK, height, hSocket, addr,\n+        /* nKeyedNetGroupIn = */ 1,\n+        /* nLocalHostNonceIn = */ 1,\n+        CAddress(), pszDest, ConnectionType::INBOUND,\n+        /* inbound_onion = */ false);\n     BOOST_CHECK(pnode2->IsFullOutboundConn() == false);\n     BOOST_CHECK(pnode2->IsManualConn() == false);\n     BOOST_CHECK(pnode2->IsBlockOnlyConn() == false);\n     BOOST_CHECK(pnode2->IsFeelerConn() == false);\n     BOOST_CHECK(pnode2->IsAddrFetchConn() == false);\n     BOOST_CHECK(pnode2->IsInboundConn() == true);\n+    BOOST_CHECK_EQUAL(pnode2->ConnectedThroughNetwork(), Network::NET_IPV4);\n+\n+    std::unique_ptr<CNode> pnode3 = MakeUnique<CNode>(\n+        id++, NODE_NETWORK, height, hSocket, addr,\n+        /* nKeyedNetGroupIn = */ 0,\n+        /* nLocalHostNonceIn = */ 0,\n+        CAddress(), pszDest, ConnectionType::OUTBOUND_FULL_RELAY,\n+        /* inbound_onion = */ true);\n+    BOOST_CHECK(pnode3->IsFullOutboundConn() == true);\n+    BOOST_CHECK(pnode3->IsManualConn() == false);\n+    BOOST_CHECK(pnode3->IsBlockOnlyConn() == false);\n+    BOOST_CHECK(pnode3->IsFeelerConn() == false);\n+    BOOST_CHECK(pnode3->IsAddrFetchConn() == false);\n+    BOOST_CHECK(pnode3->IsInboundConn() == false);\n+    BOOST_CHECK_EQUAL(pnode3->ConnectedThroughNetwork(), Network::NET_IPV4);\n+\n+    std::unique_ptr<CNode> pnode4 = MakeUnique<CNode>(\n+        id++, NODE_NETWORK, height, hSocket, addr,\n+        /* nKeyedNetGroupIn = */ 1,\n+        /* nLocalHostNonceIn = */ 1,\n+        CAddress(), pszDest, ConnectionType::INBOUND,\n+        /* inbound_onion = */ true);\n+    BOOST_CHECK(pnode4->IsFullOutboundConn() == false);\n+    BOOST_CHECK(pnode4->IsManualConn() == false);\n+    BOOST_CHECK(pnode4->IsBlockOnlyConn() == false);\n+    BOOST_CHECK(pnode4->IsFeelerConn() == false);\n+    BOOST_CHECK(pnode4->IsAddrFetchConn() == false);\n+    BOOST_CHECK(pnode4->IsInboundConn() == true);\n+    BOOST_CHECK_EQUAL(pnode4->ConnectedThroughNetwork(), Network::NET_ONION);\n }\n \n BOOST_AUTO_TEST_CASE(cnetaddr_basic)"
      }
    ]
  }
]