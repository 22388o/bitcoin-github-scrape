meshcollider,2018-01-24T01:57:41Z,"Big Concept ACK, excited about this",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-359994997,359994997,
laanwj,2018-01-24T14:36:42Z,"Should this be labeled consensus? This is a P2P change, right?\n",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360154896,360154896,
jimpo,2018-01-24T17:09:36Z,"@laanwj This is a data structure to be used in a P2P change. I first thought that it shouldn't be tagged ""Consensus"", but there's an argument to be made for it. It doesn't affect blockchain consensus, but it is kind of a softer P2P consensus change, where network clients (though not other full nodes) may disconnect/ban you if you serve incorrectly computed block filters. I'll let you make the call",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360204783,360204783,
sipa,2018-01-24T17:12:29Z,Any fork that can be resolved by a P2P adaptor that speaks both protocols is not a consensus change.,https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360205706,360205706,
laanwj,2018-01-24T17:19:23Z,"> This is a data structure to be used in a P2P change.\n\nThanks for the explanation. With ""consensus"" we mean the blockchain consensus rules code. Banning\disconnecting is a P2P level issue. So changing the label to P2P.",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360207830,360207830,
jonasschnelli,2018-01-25T22:33:27Z,"Great work @jimpo!\nBig Concept ACK,... will help to get this done.",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-360623262,360623262,
jonasschnelli,2018-02-09T09:46:28Z,"Reviewed and tested a bit... nice, clean PR!\nI would wish we had more test vectors... ",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364385727,364385727,
Sjors,2018-02-09T15:14:18Z,Concept ACK. Would it useful to add some (hidden) RPC commands so other developers can test it?,https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364461376,364461376,
jimpo,2018-02-09T18:15:09Z,"@jonasschnelli Thanks for reviewing. The test vectors were generated from a Go program I have that cross-validates against the [btcsuite implementation](https://github.com/Roasbeef/btcutil/pull/6). I can easily add any specific testnet blocks to the list of cases. The blocks were chosen to exercise certain edge cases (eg. empty filters, duplicate pushdatas, invalid output scripts), but the vectors",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364513902,364513902,
Sjors,2018-03-15T19:07:04Z,"> @Sjors I'd definitely like to see RPC commands to fetch specific filters and filter headers, but I think it makes more sense to do that after adding the filter index, so that the RPC handlers just have to look up a precomputed filter/header. (So basically, in a subsequent PR).\n\nEven a proof-of-concept PR for that would be useful for review.",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-373489502,373489502,
jimpo,2018-03-20T01:48:16Z,@Sjors Here is a branch that exposes an RPC for testing/playing around: https://github.com/jimpo/bitcoin/tree/bip158-rpc. Is not intended to be merged for reasons stated [above](https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-364513902).,https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-374444591,374444591,
practicalswift,2018-04-15T06:19:50Z,"Concept ACK\n\nNice work!",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-381383206,381383206,
braydonf,2018-04-17T01:20:09Z,"Has there been any work yet on using this to implement BIP 157? I've worked on indexing in the past, and could take a look at implementing it.",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-381799042,381799042,
jimpo,2018-05-14T05:41:12Z,@sipa Thanks for the review. I agree on the extended filter -- I have dropped it from this PR. The code is in a new branch https://github.com/jimpo/bitcoin/tree/bip-158-extended in case it becomes useful in the future.,https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-388702764,388702764,
jonasschnelli,2018-05-14T06:19:50Z,"utACK f1b341a9262f24ff72b5961538f83ffbf532d8d9\nI think this is a good and sane start since this is not used yet. I wish there would be more test vectors.",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-388708714,388708714,
TheBlueMatt,2018-05-14T19:54:44Z,Why match on the txid of each transaction? I can't imagine a use-case where you'd ever want that where you couldn't simply match by one (or multiple) of the output scripts for little additional cost.,https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-388941774,388941774,
jimpo,2018-05-14T20:07:04Z,"@TheBlueMatt I can definitely think of use cases where one only has the txid. For example, if a lightning wallet wants to determine if a channel exists, it only gets the txid from the `channel_announcement`.\n\nI definitely think txids should be included in a filter, though I think there's a valid argument for putting them in their own filter given that a basic wallet does not need them.",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-388945360,388945360,
TheBlueMatt,2018-05-14T20:12:04Z,"Hmm? channel_announcement messages don't contain a txid, they contain a block number/tx index/txo index, which is obviously way more effecient than storing all the filters (which are pretty huge, in total), scanning all of them, and then downloading the corresponding block to verify the transaction is there (of course an SPV Proof is much more effecient in either case).\n\nOn May 14, 2018 8:07:17 ",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-388946819,388946819,
jimpo,2018-05-14T22:20:27Z,"You're right, I forgot that channel_announcement uses the short ID instead of the channel ID.\n\nGiven that it would be a BIP change, I think the conversation about whether to remove TXID from the basic filter and move it to another filter (or drop entirely) is better had on the mailing list.",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-388981463,388981463,
kallewoof,2018-05-16T01:01:02Z,re-utACK 669599d,https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-389361376,389361376,
jonasschnelli,2018-05-16T06:25:45Z,Agree with @jimpo: dropping the txid filter check should be addresses via the BIP.,https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-389408689,389408689,
gmaxwell,2018-07-30T19:30:04Z,utACK,https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-408982346,408982346,
jimpo,2018-08-24T23:24:23Z,@ryanofsky Thank you for the review. I'm going to leave `GCSElementSet` typedef'ed to `std::set` in this PR and will open a separate PR after this is merged to change to `unordered_set`. Creating the custom hasher and putting it in an appropriate location requires shuffling some code around which is not relevant to this PR and I'd rather not add another reason to hold off on merging this.,https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-415907116,415907116,
laanwj,2018-08-26T14:23:02Z,"> Question for maintainers: While this PR was fun to review, I'm curious if there's a specific reason it wasn't merged previously? It has 4 other acks and doesn't touch existing functionality, and the new functionality is pretty well covered by test vectors.\n\ndidn't want to merge it last-minute for 0.17, but it can go in now IMO",https://github.com/bitcoin/bitcoin/pull/12254#issuecomment-416042517,416042517,
jonasschnelli,2018-02-09T09:13:33Z,"Not sure, but I guess that comments belongs to L113?",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r167173632,167173632,src/blockfilter.cpp
jimpo,2018-02-09T18:49:12Z,"No, the idea is that the below lines fully decode the filter in the constructor so that any errors decoding get raised during construction rather than when it is first matched against. I'll elaborate on the comment.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r167313633,167313633,src/blockfilter.cpp
ryanofsky,2018-03-15T18:29:54Z,"In commit ""streams: Create CVectorReader stream interface for vectors."" (93f702b08e413c5c025b155bfb62b721d27939f5)\n\nThis is pretty similar to the VectorReader class @TheBlueMatt is adding here: https://github.com/TheBlueMatt/bitcoin/commit/bb608a995e8fd16d156145bf41023e7a77d44971 for https://github.com/bitcoin/bitcoin/compare/master...TheBlueMatt:2018-02-miningserver\n\nYour implementation i",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r174886724,174886724,src/streams.h
ryanofsky,2018-03-15T18:34:53Z,"In commit ""streams: Create CVectorReader stream interface for vectors."" (93f702b08e413c5c025b155bfb62b721d27939f5)\n\nIt would be nice if this just had `const unsigned char*` and `size_t` members instead of a requiring a reference to an actual vector. That way the class could be used to efficiently deserialize from any memory location, and be compatible with other containers like `std::string`.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r174888569,174888569,src/streams.h
jimpo,2018-03-19T18:22:00Z,"OK, I can bring that commit over instead or modify this one to remove the hungarian notation.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r175538303,175538303,src/streams.h
jimpo,2018-03-19T18:27:18Z,"I'd rather not deal with raw pointers because it leaves space for unsafe accesses. If generality is a concern, I'd prefer a templated approach with random access iterators.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r175539924,175539924,src/streams.h
ryanofsky,2018-04-02T17:47:00Z,"In commit ""streams: Implement BitStreamReader/Writer classes.""\n\nComment for m_offset would be helpful. Maybe `//!< Number of high order bits in m_buffer already returned by previous Read() calls.`",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178601571,178601571,src/streams.h
ryanofsky,2018-04-02T17:57:11Z,"In commit ""streams: Implement BitStreamReader/Writer classes.""\n\nWould be nice to initialize `m_buffer`, `m_offset` above, where they are declared (see ""Initialize all non-static class members where they are defined"" guideline from https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md). Similarly in BitStreamWriter below.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178604425,178604425,src/streams.h
ryanofsky,2018-04-02T17:59:57Z,"In commit ""streams: Implement BitStreamReader/Writer classes.""\n\nWould be nice to add a simple unit test writing values to a stream with BitStreamWriter, and then making sure same values are returned from BitStreamReader.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178605236,178605236,src/streams.h
ryanofsky,2018-04-02T18:05:44Z,"In commit ""streams: Implement BitStreamReader/Writer classes.""\n\nWould be good to add destructor either asserting `m_offset == 0`, or calling Flush(). Discarding bits that have been written but not flushed seems less safe than you might want as default behavior.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178606747,178606747,src/streams.h
ryanofsky,2018-04-02T18:10:47Z,"In commit ""streams: Implement BitStreamReader/Writer classes.""\n\nWould add  `= 0; //!< Number of high-order bits in m_buffer that have been written but not yet flushed to the stream.`",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178608110,178608110,src/streams.h
ryanofsky,2018-04-02T19:31:35Z,"In commit ""blockfilter: Declare GCSFilter class for BIP 158 impl.""\n\nIt seems cumbersome for this to be implemented as a class, since none of the class members can change after construction, and some of the stored state is redundant (`m_F` is derived from `m_N` and `m_P`), `m_N` is redundant with `elements.size()` and can be derived from `m_encoded`).\n\nIf this were a simple set of functions",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178627611,178627611,src/blockfilter.h
ryanofsky,2018-04-02T19:39:04Z,"In commit ""blockfilter: Implement GCSFilter constructors.""\n\nHere and other places, N seems like it should be 32 bits instead 64.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178629277,178629277,src/blockfilter.cpp
ryanofsky,2018-04-02T19:45:15Z,"In commit ""blockfilter: Implement GCSFilter constructors.""\n\nI wonder if the optimization below actually buys anything over a more direct:\n\n```c++\nfor (int i = 0; i < q; ++i) bitwriter.Write(1, 1);\n```",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178630615,178630615,src/blockfilter.cpp
ryanofsky,2018-04-02T20:12:15Z,"In commit ""blockfilter: Implement GCSFilter Match methods.""\n\nWould suggest implementing `Match` and `MatchAny` in terms of a common\n\n```c++\nMatch(const uint64_t* sorted_element_hashes, size_t size)\n```\n\nmethod to get rid of all the code duplication between the existing methods. No outside code would need to change, they could just call \n\n```c++\nMatch(&query, 1);\nMatch(queri",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178637016,178637016,src/blockfilter.cpp
jimpo,2018-04-12T01:04:44Z,Didn't know about that guideline. Will do.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r180940245,180940245,src/streams.h
sipa,2018-04-17T01:30:56Z,This does not seem up to date with the latest version of BIP158 (I'll review in full later).,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r181930525,181930525,src/blockfilter.cpp
jimpo,2018-04-17T08:16:24Z,Good suggestion.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r181987725,181987725,src/blockfilter.cpp
jimpo,2018-04-17T08:32:52Z,"Why do you say that? This function can encode 64-bit ints if it needs to. Also, it would have to immediately get cast to a uint64_t either way.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r181992611,181992611,src/blockfilter.cpp
jimpo,2018-04-17T09:27:58Z,Added in 5f67272f5a2d8567faf7b139c0239bc2788ed8b1.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r182009549,182009549,src/streams.h
jimpo,2018-04-17T09:29:55Z,"I originally tried something like that, but I preferred to make it an actual class. I see the ability to store derivable data in private fields and check data consistency before using the data as features of this approach.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r182010116,182010116,src/blockfilter.h
jimpo,2018-04-17T09:30:10Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r182010184,182010184,src/blockfilter.cpp
sipa,2018-05-12T19:34:24Z,"Agree, it would be nice to align the two implementations.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187781309,187781309,src/streams.h
sipa,2018-05-12T19:36:10Z,"An alternative (which could be done later, not a blocker for this PR) is using the `Span` class that was introduced in #12886 and is being extended in #13062).",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187781338,187781338,src/streams.h
sipa,2018-05-12T19:54:16Z,"In commit ""streams: Implement BitStreamReader/Writer classes."", any reason to not make these operate with a 64-bit (or even larger) buffer? That would both simplify the code (no need to loop in the read/write operations) and possibly improve performance (due to fewer read/flush calls to the underlying buffer).",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187781729,187781729,src/streams.h
sipa,2018-05-12T19:55:57Z,I don't understand this comment either.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187781753,187781753,src/blockfilter.cpp
sipa,2018-05-12T19:57:45Z,Perhaps add a note here to use `unsigned __int128` on supported platforms; that should be significantly faster than doing 4 separate multiplications.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187781789,187781789,src/blockfilter.cpp
sipa,2018-05-12T20:07:54Z,"I don't think the reference type is useful here; copy elision should apply, and otherwise at worst a move will occur.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187782008,187782008,src/blockfilter.cpp
sipa,2018-05-12T20:08:57Z,Is this worth it? The filter will be decoded twice in practice due to this?,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187782029,187782029,src/blockfilter.cpp
jimpo,2018-05-13T18:42:21Z,"Perhaps could improve performance, but it'd be trickier to handle streams that are not aligned on 8-byte boundaries. Since the buffer size is an implementation detail, would you be OK leaving that optimization for a later PR?",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187809813,187809813,src/streams.h
jimpo,2018-05-13T18:59:32Z,I'll drop it if people prefer. I think having the constructor check its input makes for a better API. I'd also note that Core won't actually use these match methods unless it implements a light client mode -- they are just here for completeness and testing.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187810229,187810229,src/blockfilter.cpp
sipa,2018-05-13T19:14:53Z,"Yeah, let's look at this later. It would complicate the reader indeed. For the writer I think it's pretty straightfoward.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187810670,187810670,src/streams.h
sipa,2018-05-13T19:16:51Z,"I expect we'll start using it for rescanning pretty quickly, regardless of protocol implementations.\n\nDo you have any numbers for how fast it is to iterate through a 10000 element set or so?",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187810728,187810728,src/blockfilter.cpp
jimpo,2018-05-14T05:35:31Z,Done.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187839783,187839783,src/streams.h
jimpo,2018-05-14T05:36:20Z,Fixed in 07df98686ec423dcf38ac28ad8e325708cb5b902.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187839843,187839843,src/blockfilter.cpp
jimpo,2018-05-14T05:38:00Z,"Benchmarks added in f1b341a9262f24ff72b5961538f83ffbf532d8d9. Decoding a 10,000 element filter and matching against one missing element takes about 20us, and grows linearly in the number of elements (as expected).",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187840056,187840056,src/blockfilter.cpp
tamasblummer,2018-05-14T14:39:32Z,"k should be checked < 64 to avoid right shift overflow, which could trigger a platform specific response. I know this is practically excluded with m_P <= 32, but if that is the safety net then there is also no need to check nbits <= 64 in bit stream read and write.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187978111,187978111,src/blockfilter.cpp
tamasblummer,2018-05-14T14:40:34Z,same here with k < 64 to avoid shift left overflow,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187978488,187978488,src/blockfilter.cpp
jimpo,2018-05-14T15:26:05Z,I'm not sure this assertion would add much. The reason for the check in the BitStreamReader/Writer is because it is part of a public interface. This function (and decode) are static within this compilation unit and thus part of a private interface.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r187995873,187995873,src/blockfilter.cpp
tamasblummer,2018-05-14T16:13:19Z,"thanks, that is fine then. I did not check the visibility.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188012208,188012208,src/blockfilter.cpp
tamasblummer,2018-05-14T16:43:48Z,shouldn't GolombRiceEncode and GolombRiceEncode  functions be rather members of GCSFilter since they always use its initialized m_P as k ?,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188021443,188021443,src/blockfilter.cpp
tamasblummer,2018-05-14T17:57:37Z,"comments would not hurt here. P Golomb-Rice Parameter (2^P), N number of elements in set. F is derived from P and N, so it better would not be here at all. ",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188043478,188043478,src/blockfilter.h
tamasblummer,2018-05-14T18:31:54Z,"Agree with @jimpo, used IStream and OStream should be buffered implementations, not this specific algo. ",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188053959,188053959,src/streams.h
jimpo,2018-05-14T20:02:07Z,I prefer they be standalone functions.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188079506,188079506,src/blockfilter.cpp
kallewoof,2018-05-15T08:48:09Z,`size_t`?,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188208980,188208980,src/streams.h
kallewoof,2018-05-15T08:49:43Z,"Comment says signed, but it is unsigned.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188209476,188209476,src/test/streams_tests.cpp
kallewoof,2018-05-15T08:50:46Z,"`d` is a `signed int`, comment says `unsigned int`.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188209813,188209813,src/test/streams_tests.cpp
kallewoof,2018-05-15T08:56:59Z,"Maybe also include a really high value (e.g. using all 64 bits). These are all single-byte values and will not test the looping part at all, I think?",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188211827,188211827,src/test/streams_tests.cpp
kallewoof,2018-05-15T09:16:31Z,"I recommend avoiding actual random values for unit tests, as generating random data is expensive and the tests may end up failing only sporadically, making it harder to debug (run the test 10 times and see the error once kinda thing).\n\nA simple approach is to use a random generator ""manually"" once to generate 200 random numbers as a big static vector. Another is to do e.g. `srand(12345);` once",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188218055,188218055,src/test/blockfilter_tests.cpp
kallewoof,2018-05-15T09:23:57Z,"Maybe also check that `prevout(36e, 1)` is not a match while at it.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188220185,188220185,src/test/blockfilter_tests.cpp
kallewoof,2018-05-15T09:35:53Z,Note use of `GetRandBytes` here as well. Potential inconsistency in test outcomes and potential slowdown.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188223873,188223873,src/bench/gcs_filter.cpp
jimpo,2018-05-15T19:56:32Z,Good idea.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188416389,188416389,src/test/blockfilter_tests.cpp
jimpo,2018-05-15T20:04:03Z,"It's testing the looping part insofar as some of the writes crossed byte boundaries, but I also added a write/read of a 2-byte value.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188418596,188418596,src/test/streams_tests.cpp
jimpo,2018-05-15T20:04:17Z,Removed the rand.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r188418651,188418651,src/test/blockfilter_tests.cpp
Empact,2018-07-15T21:13:28Z,nit: `++i` here and elsewhere - I think every non-test post-increment can be pre.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r202554741,202554741,src/bench/gcs_filter.cpp
Empact,2018-07-15T21:15:47Z,nit: `static`?,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r202554798,202554798,src/blockfilter.cpp
Empact,2018-07-15T21:16:01Z,nit: `static`?,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r202554802,202554802,src/blockfilter.cpp
Empact,2018-07-15T21:30:56Z,nit: `explicit`?,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r202555191,202555191,src/streams.h
Empact,2018-07-15T21:35:28Z,nit: could extract this as a method to share with `BlockFilter::BlockFilter`,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r202555331,202555331,src/blockfilter.h
Empact,2018-07-15T21:41:10Z,nit: `/**` here and elsewhere in the class,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r202555497,202555497,src/streams.h
Empact,2018-07-15T21:52:42Z,"Is exposing this in b50195afc40188064d43efc71a9c4feab6667ec8 necessary? I don't see a call to it.\n\nChecked and this builds just the coins.h include from that commit.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r202555770,202555770,src/validation.h
jimpo,2018-07-16T17:06:22Z,"This uses a different form of the constructor from `BlockFilter::BlockFilter`. Could extract to a templated method, but I don't think that's worth it.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r202758020,202758020,src/blockfilter.h
jimpo,2018-07-17T04:48:26Z,Removed that commit.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r202893314,202893314,src/validation.h
kallewoof,2018-07-17T12:35:57Z,"I'm curious what triggered this request. I may be reading the wrong places, but e.g. https://stackoverflow.com/questions/45987571/difference-between-constexpr-and-static-constexpr-global-variable indicates static does nothing at all here.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r203002692,203002692,src/blockfilter.cpp
Empact,2018-07-17T14:18:32Z,"My thought was to make these explicitly translation-unit local, to communicate that to the reader and to enforce that from the linker. Here's what cppreference says about what gets internal linkage:\n\n> internal linkage. The name can be referred to from all scopes in the current translation unit.\n> Any of the following names declared at namespace scope have internal linkage:\n> * variables, ",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r203040263,203040263,src/blockfilter.cpp
jimpo,2018-07-17T15:54:04Z,@kallewoof Interesting. I looked it up too and came across this: https://stackoverflow.com/a/13867690.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r203078822,203078822,src/blockfilter.cpp
kallewoof,2018-07-19T07:34:40Z,"@jimpo Yeah I read that one too, but the last paragraph was what made me unsure in the end whether it was good or bad\n\n> However, there is one case where you wouldn't want to use static constexper. Unless a constexpr declared object is either ODR-used or declared static, the compiler is free to not include it at all. That's pretty useful, because it allows the use of compile-time temporary con",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r203627166,203627166,src/blockfilter.cpp
sipa,2018-07-21T19:10:46Z,"This doesn't seem to work for me (x86_64 linux, GCC 7.3.0), verified by looking at the disassembled code.\n\nInterestingly, there is hardly any impact on the benchmarks when I modify the code to use force using 128-bit multiplication - suggesting that most of the time is spent elsewhere (hashing, bit operations?).",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r204219029,204219029,src/blockfilter.cpp
jimpo,2018-07-22T10:12:36Z,"Oops, that's a typo. It should be `__SIZEOF_INT128__`. Will fix.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r204234846,204234846,src/blockfilter.cpp
sipa,2018-07-23T05:50:41Z,"Yup, that works.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r204287501,204287501,src/blockfilter.cpp
sipa,2018-07-23T05:56:44Z,"Nit: should be `[0, N * M)` or `[0, F)`, I think.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r204288229,204288229,src/blockfilter.h
ryanofsky,2018-08-15T14:30:37Z,"Re: https://github.com/bitcoin/bitcoin/pull/12254#discussion_r174888569\n\nI think it would be good to change VectorReader to SpanReader now that Span exists. It would be a simple change, and better describe what this class does, and make it more reusable.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r210287583,210287583,src/streams.h
ryanofsky,2018-08-17T15:51:26Z,"In commit ""streams: Implement BitStreamReader/Writer classes."" (faaa4b8432d194acb26ffcac07c379444da327ac)\n\nThere was previously a comment here (in e6e320d600c70cf4d530b49f3e526cdb7e66be6d). Was it dropped inadvertently?\n\n```c++\n    /** Read the specified number of bits from the stream. The data is returned\n     * in the nbits least signficant bits of a 64-bit uint.\n     */\n```",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r210954376,210954376,src/streams.h
ryanofsky,2018-08-17T16:55:12Z,"RE: https://github.com/bitcoin/bitcoin/pull/12254#discussion_r178629277\n\n> I don't understand this comment either.\n\nThe comment was just attached in the wrong place. In 15d529dfc2b65f2badaa520799187aff103af2b6 `m_N` was `uint64_t` (fixed now).",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r210970797,210970797,src/blockfilter.cpp
ryanofsky,2018-08-17T17:08:53Z,"In commit ""streams: Unit test for VectorReader class."" (bdb34199345ad2c6f98da5d3f303d0993f6c722c)\n\nShould probably say `signed char` explicitly, since plain `char` isn't necessarily signed.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r210974078,210974078,src/test/streams_tests.cpp
ryanofsky,2018-08-17T17:19:25Z,"In commit ""streams: Unit tests for BitStreamReader and BitStreamWriter."" (e15e553b746e64f0eeda420e4c10eccfc747d69f)\n\nMight be good to have additional `BOOST_CHECK(data.empty())` and `BOOST_CHECK(data_copy.empty())` checks to make sure reads & writes are still aligned if somebody modifies the test.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r210976725,210976725,src/test/streams_tests.cpp
ryanofsky,2018-08-17T18:15:41Z,"In commit ""blockfilter: Implement GCSFilter constructors."" (515af0398b8f2aab77645871198c69fea91a07ff)\n\nMaybe use `x` and `P` instead of `n` and `k` to be consistent with golomb_encode function from BIP158. This would also be more consistent with the `GCSFilter` class, which uses `P`.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r210992123,210992123,src/blockfilter.cpp
ryanofsky,2018-08-17T18:41:46Z,"In commit ""blockfilter: Construction of basic block filters."" (f7a5bdb54ba597fe06bcb54e886c43436899ab48)\n\nChange seems unrelated to this commit.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r210999608,210999608,src/undo.h
ryanofsky,2018-08-17T19:06:27Z,"In commit ""blockfilter: Construction of basic block filters."" (f7a5bdb54ba597fe06bcb54e886c43436899ab48)\n\nI think it could be beneficial if `GCSFilter` defined: \n\n```c++\ntypedef std::unordered_set<Element> Elements;\n```\n\nAnd if this function, the `GCSFilter` constructor, `BuildHashedSet`, and `MatchAny` all used  `GCSFilter::Elements` instead of `std::set<GCSFilter::Element>`. It'd",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r211006188,211006188,src/blockfilter.cpp
ryanofsky,2018-08-17T19:23:32Z,"In commit ""blockfilter: Serialization methods on BlockFilter."" (c14e4d5a950ed40d96a8956e4622e1d9670da72d)\n\nNote: https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki#filter-headers is the relevant section of the bip describing block filter hash (`GetHash`) and filter header (`ComputeHeader`) derivations.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r211010036,211010036,src/blockfilter.cpp
jimpo,2018-08-20T20:52:50Z,It's required because `blockfilter.h` includes `undo.h` and won't compile otherwise. This could be moved to separate commit though.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r211403699,211403699,src/undo.h
jimpo,2018-08-20T21:03:35Z,I don't understand the benefit. The assertion of a `std::ios_base::failure` is meant to test that the buffer is out of data.,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r211406600,211406600,src/test/streams_tests.cpp
jimpo,2018-08-20T21:05:50Z,"Thanks, good catch.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r211407126,211407126,src/streams.h
jimpo,2018-08-21T06:39:11Z,"I added the typedef to `std::set`. In commit e645d53b3d5fa5912e3a99cc4fec74aee64e81e5, I change it to `std::unordered_set` which uses a randomly selected SipHash instance to hash the byte vector. Let me know if you think this is acceptable or whether it should be left as `std::set`.",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r211492786,211492786,src/blockfilter.cpp
TheBlueMatt,2018-08-26T16:07:00Z,Isnt this an OOB read?,https://github.com/bitcoin/bitcoin/pull/12254#discussion_r212830981,212830981,src/blockfilter.cpp
practicalswift,2018-08-27T15:30:13Z,"Post-merge nit: ""signficant"" should be ""significant"".\n\nThis misspelling was automatically identified by `codespell`.\n\nAutomatic `codespell` checking is introduced in PR #13954. It warns (note: warn only, no build failure) when a PR introduces spelling errors. Please review :-)",https://github.com/bitcoin/bitcoin/pull/12254#discussion_r213016782,213016782,src/streams.h
