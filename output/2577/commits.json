[
  {
    "sha": "8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGU5YmI1M2FmMzJmN2Y2YjA5YzA2ZjgzMWYyYzBhN2I0ZTk1MzAz",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-04-24T22:27:00Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-05-03T14:52:09Z"
      },
      "message": "Define dust transaction outputs, and make them non-standard",
      "tree": {
        "sha": "afb7c68d3fd15203308f38a47a3cc3875d476a2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afb7c68d3fd15203308f38a47a3cc3875d476a2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8e1dc2e53b9d19df26a87686dfd435b3b346f9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8e1dc2e53b9d19df26a87686dfd435b3b346f9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8e1dc2e53b9d19df26a87686dfd435b3b346f9c"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 74,
      "deletions": 27
    },
    "files": [
      {
        "sha": "d0d6a99eb1a726639c7fe18b42e14741aeb2233c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
        "patch": "@@ -384,7 +384,7 @@ bool CTransaction::IsStandard() const\n     BOOST_FOREACH(const CTxOut& txout, vout) {\n         if (!::IsStandard(txout.scriptPubKey))\n             return false;\n-        if (txout.nValue == 0)\n+        if (txout.IsDust())\n             return false;\n     }\n     return true;"
      },
      {
        "sha": "8c1e6d265c3a63b73f3312b1a642f792edcc9d43",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
        "patch": "@@ -439,6 +439,24 @@ class CTxOut\n         return !(a == b);\n     }\n \n+    size_t size() const\n+    {\n+        return sizeof(nValue)+scriptPubKey.size();\n+    }\n+\n+    bool IsDust() const\n+    {\n+        // \"Dust\" is defined in terms of MIN_RELAY_TX_FEE, which\n+        // has units satoshis-per-kilobyte.\n+        // If you'd pay more than 1/3 in fees\n+        // to spend something, then we consider it dust.\n+        // A typical txout is 32 bytes big, and will\n+        // need a CTxIn of at least 148 bytes to spend, \n+        // so dust is a txout less than 54 uBTC\n+        // (5400 satoshis)\n+        return ((nValue*1000)/(3*(size()+148)) < MIN_RELAY_TX_FEE);\n+    }\n+\n     std::string ToString() const\n     {\n         if (scriptPubKey.size() < 6)"
      },
      {
        "sha": "ee0d25a2f5903687ce1312a8ed887a69e6213679",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
        "patch": "@@ -78,7 +78,9 @@ BOOST_AUTO_TEST_CASE(sign)\n     for (int i = 0; i < 4; i++)\n     {\n         txFrom.vout[i].scriptPubKey = evalScripts[i];\n+        txFrom.vout[i].nValue = COIN;\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n+        txFrom.vout[i+4].nValue = COIN;\n     }\n     BOOST_CHECK(txFrom.IsStandard());\n \n@@ -169,6 +171,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         txFrom.vout[i].scriptPubKey = outer[i];\n+        txFrom.vout[i].nValue = CENT;\n     }\n     BOOST_CHECK(txFrom.IsStandard());\n \n@@ -179,7 +182,7 @@ BOOST_AUTO_TEST_CASE(set)\n         txTo[i].vout.resize(1);\n         txTo[i].vin[0].prevout.n = i;\n         txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n-        txTo[i].vout[0].nValue = 1;\n+        txTo[i].vout[0].nValue = 1*CENT;\n         txTo[i].vout[0].scriptPubKey = inner[i];\n         BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n     }"
      },
      {
        "sha": "ddff2acd4e12aff305b5f2d4fb26254751f0e022",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 12,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
        "patch": "@@ -242,24 +242,34 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     BOOST_CHECK(!t1.AreInputsStandard(coins));\n }\n \n-BOOST_AUTO_TEST_CASE(test_GetThrow)\n+BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(coinsDummy);\n     std::vector<CTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n \n-    CTransaction t1;\n-    t1.vin.resize(3);\n-    t1.vin[0].prevout.hash = dummyTransactions[0].GetHash();\n-    t1.vin[0].prevout.n = 0;\n-    t1.vin[1].prevout.hash = dummyTransactions[1].GetHash();;\n-    t1.vin[1].prevout.n = 0;\n-    t1.vin[2].prevout.hash = dummyTransactions[1].GetHash();;\n-    t1.vin[2].prevout.n = 1;\n-    t1.vout.resize(2);\n-    t1.vout[0].nValue = 90*CENT;\n-    t1.vout[0].scriptPubKey << OP_1;\n+    CTransaction t;\n+    t.vin.resize(1);\n+    t.vin[0].prevout.hash = dummyTransactions[0].GetHash();\n+    t.vin[0].prevout.n = 1;\n+    t.vin[0].scriptSig << std::vector<unsigned char>(65, 0);\n+    t.vout.resize(1);\n+    t.vout[0].nValue = 90*CENT;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    t.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+\n+    BOOST_CHECK(t.IsStandard());\n+\n+    t.vout[0].nValue = 5011; // dust\n+    BOOST_CHECK(!t.IsStandard());\n+\n+    t.vout[0].nValue = 6011; // not dust\n+    BOOST_CHECK(t.IsStandard());\n+\n+    t.vout[0].scriptPubKey = CScript() << OP_1;\n+    BOOST_CHECK(!t.IsStandard());\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "a14f6b2b7056c7e4c582651bf973b90ae84bbc54",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
        "patch": "@@ -21,13 +21,12 @@ static vector<COutput> vCoins;\n \n static void add_coin(int64 nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n {\n-    static int i;\n-    CTransaction* tx = new CTransaction;\n-    tx->nLockTime = i++;        // so all transactions get different hashes\n-    tx->vout.resize(nInput+1);\n-    tx->vout[nInput].nValue = nValue;\n-    CWalletTx* wtx = new CWalletTx(&wallet, *tx);\n-    delete tx;\n+    static int nextLockTime = 0;\n+    CTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    CWalletTx* wtx = new CWalletTx(&wallet, tx);\n     if (fIsFromMe)\n     {\n         // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n@@ -55,8 +54,8 @@ static bool equal_sets(CoinSet a, CoinSet b)\n \n BOOST_AUTO_TEST_CASE(coin_selection_tests)\n {\n-    static CoinSet setCoinsRet, setCoinsRet2;\n-    static int64 nValueRet;\n+    CoinSet setCoinsRet, setCoinsRet2;\n+    int64 nValueRet;\n \n     // test multiple times to allow for differences in the shuffle order\n     for (int i = 0; i < RUN_TESTS; i++)"
      },
      {
        "sha": "1554b157686d4a69fda3ffa0adf67fadc6d5c25e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
        "patch": "@@ -1162,7 +1162,12 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 double dPriority = 0;\n                 // vouts to the payees\n                 BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n-                    wtxNew.vout.push_back(CTxOut(s.second, s.first));\n+                {\n+                    CTxOut txout(s.second, s.first);\n+                    if (txout.IsDust())\n+                        return false;\n+                    wtxNew.vout.push_back(txout);\n+                }\n \n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n@@ -1208,9 +1213,21 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                     CScript scriptChange;\n                     scriptChange.SetDestination(vchPubKey.GetID());\n \n-                    // Insert change txn at random position:\n-                    vector<CTxOut>::iterator position = wtxNew.vout.begin()+GetRandInt(wtxNew.vout.size()+1);\n-                    wtxNew.vout.insert(position, CTxOut(nChange, scriptChange));\n+                    CTxOut newTxOut(nChange, scriptChange);\n+\n+                    // Never create dust outputs; if we would, just\n+                    // add the dust to the fee.\n+                    if (newTxOut.IsDust())\n+                    {\n+                        nFeeRet += nChange;\n+                        reservekey.ReturnKey();\n+                    }\n+                    else\n+                    {\n+                        // Insert change txn at random position:\n+                        vector<CTxOut>::iterator position = wtxNew.vout.begin()+GetRandInt(wtxNew.vout.size()+1);\n+                        wtxNew.vout.insert(position, newTxOut);\n+                    }\n                 }\n                 else\n                     reservekey.ReturnKey();"
      }
    ]
  },
  {
    "sha": "1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjAwZjRlOWM5YjRiNjQzZGEyMmJiNWQ5Zjk0ZDY2NjgzZmExYTE1",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-04-25T21:31:22Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-05-03T14:54:31Z"
      },
      "message": "CreateTransaction: return strFailReason on failure",
      "tree": {
        "sha": "4ab3e19ea52f1f9267d75577c875cfbf2a41bc8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ab3e19ea52f1f9267d75577c875cfbf2a41bc8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8de9bb53af32f7f6b09c06f831f2c0a7b4e95303"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 37,
      "deletions": 17
    },
    "files": [
      {
        "sha": "fb3ffc5c91f0f57d75a5ca5fadaf851cbcea5634",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15",
        "patch": "@@ -181,14 +181,17 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n         CWalletTx wtx;\n         CReserveKey keyChange(wallet);\n         int64 nFeeRequired = 0;\n-        bool fCreated = wallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n+        std::string strFailReason;\n+        bool fCreated = wallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n \n         if(!fCreated)\n         {\n             if((total + nFeeRequired) > wallet->GetBalance())\n             {\n                 return SendCoinsReturn(AmountWithFeeExceedsBalance, nFeeRequired);\n             }\n+            emit message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n+                         CClientUIInterface::MSG_ERROR);\n             return TransactionCreationFailed;\n         }\n         if(!uiInterface.ThreadSafeAskFee(nFeeRequired))"
      },
      {
        "sha": "5fd400c6bbb7e1369586fa163713f6552bac3abf",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15",
        "patch": "@@ -694,13 +694,10 @@ Value sendmany(const Array& params, bool fHelp)\n     // Send\n     CReserveKey keyChange(pwalletMain);\n     int64 nFeeRequired = 0;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n+    string strFailReason;\n+    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n     if (!fCreated)\n-    {\n-        if (totalAmount + nFeeRequired > pwalletMain->GetBalance())\n-            throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction creation failed\");\n-    }\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     if (!pwalletMain->CommitTransaction(wtx, keyChange))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction commit failed\");\n "
      },
      {
        "sha": "65d2c3b68ee32165bae89259a3452d96f4dcbb3d",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 8,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15",
        "patch": "@@ -1134,17 +1134,24 @@ bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned\n \n \n \n-bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n+bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason)\n {\n     int64 nValue = 0;\n     BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n     {\n         if (nValue < 0)\n+        {\n+            strFailReason = _(\"Transaction amounts must be positive\");\n             return false;\n+        }\n         nValue += s.second;\n     }\n     if (vecSend.empty() || nValue < 0)\n+    {\n+        strFailReason = _(\"Transaction amounts must be positive\");\n         return false;\n+    }\n \n     wtxNew.BindWallet(this);\n \n@@ -1165,15 +1172,21 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 {\n                     CTxOut txout(s.second, s.first);\n                     if (txout.IsDust())\n+                    {\n+                        strFailReason = _(\"Transaction amount too small\");\n                         return false;\n+                    }\n                     wtxNew.vout.push_back(txout);\n                 }\n \n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n                 int64 nValueIn = 0;\n                 if (!SelectCoins(nTotalValue, setCoins, nValueIn))\n+                {\n+                    strFailReason = _(\"Insufficient funds\");\n                     return false;\n+                }\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n                     int64 nCredit = pcoin.first->vout[pcoin.second].nValue;\n@@ -1240,12 +1253,18 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 int nIn = 0;\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n                     if (!SignSignature(*this, *coin.first, wtxNew, nIn++))\n+                    {\n+                        strFailReason = _(\"Signing transaction failed\");\n                         return false;\n+                    }\n \n                 // Limit size\n                 unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK, PROTOCOL_VERSION);\n                 if (nBytes >= MAX_STANDARD_TX_SIZE)\n+                {\n+                    strFailReason = _(\"Transaction too large\");\n                     return false;\n+                }\n                 dPriority /= nBytes;\n \n                 // Check that enough fee is included\n@@ -1269,11 +1288,12 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n     return true;\n }\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n+bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason)\n {\n     vector< pair<CScript, int64> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n-    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet);\n+    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, strFailReason);\n }\n \n // Call after CreateTransaction unless you want to abort\n@@ -1339,14 +1359,12 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n         printf(\"SendMoney() : %s\", strError.c_str());\n         return strError;\n     }\n-    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired))\n+    string strError;\n+    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError))\n     {\n-        string strError;\n         if (nValue + nFeeRequired > GetBalance())\n             strError = strprintf(_(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\"), FormatMoney(nFeeRequired).c_str());\n-        else\n-            strError = _(\"Error: Transaction creation failed!\");\n-        printf(\"SendMoney() : %s\", strError.c_str());\n+        printf(\"SendMoney() : %s\\n\", strError.c_str());\n         return strError;\n     }\n "
      },
      {
        "sha": "d4ce0210542b709aef8a11686faabe413b0f219c",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15",
        "patch": "@@ -178,8 +178,10 @@ class CWallet : public CCryptoKeyStore\n     int64 GetBalance() const;\n     int64 GetUnconfirmedBalance() const;\n     int64 GetImmatureBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n-    bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n+    bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason);\n+    bool CreateTransaction(CScript scriptPubKey, int64 nValue,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n     std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n     std::string SendMoneyToDestination(const CTxDestination &address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);"
      }
    ]
  },
  {
    "sha": "000dc55181f77cd96076c76b2cc13f8bcbe4146e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDBkYzU1MTgxZjc3Y2Q5NjA3NmM3NmIyY2MxM2Y4YmNiZTQxNDZl",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-04-26T00:11:27Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-05-03T14:54:31Z"
      },
      "message": "Un-hardcode TX_FEE constants\n\nAllow setting of MIN_TX_FEE / MIN_RELAY_TX_FEE with\n-mintxfee / -mintxrelayfee\n\nDefault values are the same (0.0001 BTC).",
      "tree": {
        "sha": "374d5c65a265dbd59b1957ec9c128cd056be7ef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/374d5c65a265dbd59b1957ec9c128cd056be7ef6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/000dc55181f77cd96076c76b2cc13f8bcbe4146e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/000dc55181f77cd96076c76b2cc13f8bcbe4146e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/000dc55181f77cd96076c76b2cc13f8bcbe4146e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/000dc55181f77cd96076c76b2cc13f8bcbe4146e/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f00f4e9c9b4b643da22bb5d9f94d66683fa1a15"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 53,
      "deletions": 40
    },
    "files": [
      {
        "sha": "058b6a06e5d9c4421f85c58a986feb2e7f52e766",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/000dc55181f77cd96076c76b2cc13f8bcbe4146e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/000dc55181f77cd96076c76b2cc13f8bcbe4146e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=000dc55181f77cd96076c76b2cc13f8bcbe4146e",
        "patch": "@@ -583,6 +583,28 @@ bool AppInit2(boost::thread_group& threadGroup)\n     const char* pszP2SH = \"/P2SH/\";\n     COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));\n \n+    // Fee-per-kilobyte amount considered the same as \"free\"\n+    // If you are mining, be careful setting this:\n+    // if you set it to zero then\n+    // a transaction spammer can cheaply fill blocks using\n+    // 1-satoshi-fee transactions. It should be set above the real\n+    // cost to you of processing a transaction.\n+    if (mapArgs.count(\"-mintxfee\"))\n+    {\n+        int64 n = 0;\n+        if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n+            CTransaction::nMinTxFee = n;\n+        else\n+            return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"].c_str()));\n+    }\n+    if (mapArgs.count(\"-minrelaytxfee\"))\n+    {\n+        int64 n = 0;\n+        if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n+            CTransaction::nMinRelayTxFee = n;\n+        else\n+            return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"].c_str()));\n+    }\n \n     if (mapArgs.count(\"-paytxfee\"))\n     {"
      },
      {
        "sha": "91e84aefcc71433228396175386512db59f52dd1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 15,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/000dc55181f77cd96076c76b2cc13f8bcbe4146e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/000dc55181f77cd96076c76b2cc13f8bcbe4146e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=000dc55181f77cd96076c76b2cc13f8bcbe4146e",
        "patch": "@@ -48,6 +48,11 @@ bool fBenchmark = false;\n bool fTxIndex = false;\n unsigned int nCoinCacheSize = 5000;\n \n+/** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n+int64 CTransaction::nMinTxFee = 10000;  // Override with -mintxfee\n+/** Fees smaller than this (in satoshi) are considered zero fee (for relaying) */\n+int64 CTransaction::nMinRelayTxFee = 10000;\n+\n CMedianFilter<int> cPeerBlockCounts(8, 0); // Amount of blocks that other nodes claim to have\n \n map<uint256, CBlock*> mapOrphanBlocks;\n@@ -352,9 +357,22 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n \n //////////////////////////////////////////////////////////////////////////////\n //\n-// CTransaction\n+// CTransaction / CTxOut\n //\n \n+bool CTxOut::IsDust() const\n+{\n+    // \"Dust\" is defined in terms of CTransaction::nMinRelayTxFee,\n+    // which has units satoshis-per-kilobyte.\n+    // If you'd pay more than 1/3 in fees\n+    // to spend something, then we consider it dust.\n+    // A typical txout is 33 bytes big, and will\n+    // need a CTxIn of at least 148 bytes to spend,\n+    // so dust is a txout less than 54 uBTC\n+    // (5430 satoshis) with default nMinRelayTxFee\n+    return ((nValue*1000)/(3*((int)GetSerializeSize(SER_DISK,0)+148)) < CTransaction::nMinRelayTxFee);\n+}\n+\n bool CTransaction::IsStandard() const\n {\n     if (nVersion > CTransaction::CURRENT_VERSION)\n@@ -574,8 +592,8 @@ bool CTransaction::CheckTransaction(CValidationState &state) const\n int64 CTransaction::GetMinFee(unsigned int nBlockSize, bool fAllowFree,\n                               enum GetMinFee_mode mode) const\n {\n-    // Base fee is either MIN_TX_FEE or MIN_RELAY_TX_FEE\n-    int64 nBaseFee = (mode == GMF_RELAY) ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n+    // Base fee is either nMinTxFee or nMinRelayTxFee\n+    int64 nBaseFee = (mode == GMF_RELAY) ? nMinRelayTxFee : nMinTxFee;\n \n     unsigned int nBytes = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n     unsigned int nNewBlockSize = nBlockSize + nBytes;\n@@ -598,7 +616,7 @@ int64 CTransaction::GetMinFee(unsigned int nBlockSize, bool fAllowFree,\n         }\n     }\n \n-    // To limit dust spam, require MIN_TX_FEE/MIN_RELAY_TX_FEE if any output is less than 0.01\n+    // To limit dust spam, require base fee if any output is less than 0.01\n     if (nMinFee < nBaseFee)\n     {\n         BOOST_FOREACH(const CTxOut& txout, vout)\n@@ -746,7 +764,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n         // Continuously rate-limit free transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < MIN_RELAY_TX_FEE)\n+        if (fLimitFree && nFees < CTransaction::nMinRelayTxFee)\n         {\n             static double dFreeCount;\n             static int64 nLastTime;\n@@ -4184,15 +4202,6 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n     unsigned int nBlockMinSize = GetArg(\"-blockminsize\", 0);\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n-    // Fee-per-kilobyte amount considered the same as \"free\"\n-    // Be careful setting this: if you set it to zero then\n-    // a transaction spammer can cheaply fill blocks using\n-    // 1-satoshi-fee transactions. It should be set above the real\n-    // cost to you of processing a transaction.\n-    int64 nMinTxFee = MIN_TX_FEE;\n-    if (mapArgs.count(\"-mintxfee\"))\n-        ParseMoney(mapArgs[\"-mintxfee\"], nMinTxFee);\n-\n     // Collect memory pool transactions into the block\n     int64 nFees = 0;\n     {\n@@ -4310,7 +4319,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n                 continue;\n \n             // Skip free transactions if we're past the minimum block size:\n-            if (fSortedByFee && (dFeePerKb < nMinTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n+            if (fSortedByFee && (dFeePerKb < CTransaction::nMinTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n                 continue;\n \n             // Prioritize by fee once past the priority size or we run out of high-priority"
      },
      {
        "sha": "905b9fbacbe1f9c2ad86015e70767e6ee35ba6ea",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 21,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/000dc55181f77cd96076c76b2cc13f8bcbe4146e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/000dc55181f77cd96076c76b2cc13f8bcbe4146e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=000dc55181f77cd96076c76b2cc13f8bcbe4146e",
        "patch": "@@ -44,10 +44,6 @@ static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n /** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;\n-/** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n-static const int64 MIN_TX_FEE = 10000;\n-/** Fees smaller than this (in satoshi) are considered zero fee (for relaying) */\n-static const int64 MIN_RELAY_TX_FEE = 10000;\n /** No amount larger than this (in satoshi) is valid */\n static const int64 MAX_MONEY = 21000000 * COIN;\n inline bool MoneyRange(int64 nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n@@ -439,23 +435,7 @@ class CTxOut\n         return !(a == b);\n     }\n \n-    size_t size() const\n-    {\n-        return sizeof(nValue)+scriptPubKey.size();\n-    }\n-\n-    bool IsDust() const\n-    {\n-        // \"Dust\" is defined in terms of MIN_RELAY_TX_FEE, which\n-        // has units satoshis-per-kilobyte.\n-        // If you'd pay more than 1/3 in fees\n-        // to spend something, then we consider it dust.\n-        // A typical txout is 32 bytes big, and will\n-        // need a CTxIn of at least 148 bytes to spend, \n-        // so dust is a txout less than 54 uBTC\n-        // (5400 satoshis)\n-        return ((nValue*1000)/(3*(size()+148)) < MIN_RELAY_TX_FEE);\n-    }\n+    bool IsDust() const;\n \n     std::string ToString() const\n     {\n@@ -485,6 +465,8 @@ enum GetMinFee_mode\n class CTransaction\n {\n public:\n+    static int64 nMinTxFee;\n+    static int64 nMinRelayTxFee;\n     static const int CURRENT_VERSION=1;\n     int nVersion;\n     std::vector<CTxIn> vin;"
      },
      {
        "sha": "5bd808a89e5013ab70dd6e1086f24fc4826764a3",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/000dc55181f77cd96076c76b2cc13f8bcbe4146e/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/000dc55181f77cd96076c76b2cc13f8bcbe4146e/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=000dc55181f77cd96076c76b2cc13f8bcbe4146e",
        "patch": "@@ -69,7 +69,7 @@ static bool ThreadSafeAskFee(int64 nFeeRequired)\n {\n     if(!guiref)\n         return false;\n-    if(nFeeRequired < MIN_TX_FEE || nFeeRequired <= nTransactionFee || fDaemon)\n+    if(nFeeRequired < CTransaction::nMinTxFee || nFeeRequired <= nTransactionFee || fDaemon)\n         return true;\n \n     bool payFee = false;"
      },
      {
        "sha": "532a73201a3700c395edc639b4aa4949a86085e3",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/000dc55181f77cd96076c76b2cc13f8bcbe4146e/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/000dc55181f77cd96076c76b2cc13f8bcbe4146e/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=000dc55181f77cd96076c76b2cc13f8bcbe4146e",
        "patch": "@@ -1197,12 +1197,12 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n                 }\n \n                 int64 nChange = nValueIn - nValue - nFeeRet;\n-                // if sub-cent change is required, the fee must be raised to at least MIN_TX_FEE\n+                // if sub-cent change is required, the fee must be raised to at least nMinTxFee\n                 // or until nChange becomes zero\n                 // NOTE: this depends on the exact behaviour of GetMinFee\n-                if (nFeeRet < MIN_TX_FEE && nChange > 0 && nChange < CENT)\n+                if (nFeeRet < CTransaction::nMinTxFee && nChange > 0 && nChange < CENT)\n                 {\n-                    int64 nMoveToFee = min(nChange, MIN_TX_FEE - nFeeRet);\n+                    int64 nMoveToFee = min(nChange, CTransaction::nMinTxFee - nFeeRet);\n                     nChange -= nMoveToFee;\n                     nFeeRet += nMoveToFee;\n                 }"
      }
    ]
  }
]