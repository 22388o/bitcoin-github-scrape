[
  {
    "sha": "32c0d6e1d2b360501370efef40468ca28cc2cd89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmMwZDZlMWQyYjM2MDUwMTM3MGVmZWY0MDQ2OGNhMjhjYzJjZDg5",
    "commit": {
      "author": {
        "name": "jnewbery",
        "email": "john@johnnewbery.com",
        "date": "2016-10-24T11:49:25Z"
      },
      "committer": {
        "name": "jnewbery",
        "email": "john@johnnewbery.com",
        "date": "2016-11-02T18:16:57Z"
      },
      "message": "Add logging to bitcoin-util-test.py\n\n- Use the python standard logging library\n- Run all tests and report all failing test-cases (rather than stop after one test case fails)\n- If output is different from expected output, log a contextual diff.",
      "tree": {
        "sha": "42532dc1e93d85ecf97724d30bb6e104cf11c2ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42532dc1e93d85ecf97724d30bb6e104cf11c2ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32c0d6e1d2b360501370efef40468ca28cc2cd89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c0d6e1d2b360501370efef40468ca28cc2cd89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32c0d6e1d2b360501370efef40468ca28cc2cd89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c0d6e1d2b360501370efef40468ca28cc2cd89/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fd8dff68369de497354574624b740f42175b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fd8dff68369de497354574624b740f42175b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fd8dff68369de497354574624b740f42175b1b"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 54,
      "deletions": 24
    },
    "files": [
      {
        "sha": "00d96eff19947bee78b4cbe44a723a387b05ec4e",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 41,
        "deletions": 22,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32c0d6e1d2b360501370efef40468ca28cc2cd89/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32c0d6e1d2b360501370efef40468ca28cc2cd89/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=32c0d6e1d2b360501370efef40468ca28cc2cd89",
        "patch": "@@ -7,6 +7,8 @@\n import json\n import sys\n import binascii\n+import difflib\n+import logging\n \n def parse_output(a, fmt):\n \tif fmt == 'json': # json: compare parsed data\n@@ -33,53 +35,70 @@ def bctest(testDir, testObj, exeext):\n \tif \"output_cmp\" in testObj:\n \t\toutputFn = testObj['output_cmp']\n \t\toutputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n-\t\toutputData = open(testDir + \"/\" + outputFn).read()\n+\t\ttry:\n+\t\t\toutputData = open(testDir + \"/\" + outputFn).read()\n+\t\texcept:\n+\t\t\tlogging.error(\"Output file \" + outputFn + \" can not be opened\")\n+\t\t\traise\n \t\tif not outputData:\n-\t\t\tprint(\"Output data missing for \" + outputFn)\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error(\"Output data missing for \" + outputFn)\n+\t\t\traise Exception\n+\n \tproc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n \ttry:\n \t\touts = proc.communicate(input=inputData)\n \texcept OSError:\n-\t\tprint(\"OSError, Failed to execute \" + execprog)\n-\t\tsys.exit(1)\n+\t\tlogging.error(\"OSError, Failed to execute \" + execprog)\n+\t\traise\n \n \tif outputData:\n \t\ttry:\n \t\t\ta_parsed = parse_output(outs[0], outputType)\n \t\texcept Exception as e:\n-\t\t\tprint('Error parsing command output as %s: %s' % (outputType,e))\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error('Error parsing command output as %s: %s' % (outputType,e))\n+\t\t\traise\n \t\ttry:\n \t\t\tb_parsed = parse_output(outputData, outputType)\n \t\texcept Exception as e:\n-\t\t\tprint('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n+\t\t\traise\n \t\tif a_parsed != b_parsed:\n-\t\t\tprint(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+\t\t\traise Exception\n \t\tif outs[0] != outputData:\n-\t\t\tprint(\"Output formatting mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n-\t\t\tsys.exit(1)\n+\t\t\terror_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n+\t\t\terror_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n+\t\t\t\t                                          outs[0].splitlines(True),\n+\t\t\t\t                                          fromfile=outputFn,\n+\t\t\t\t                                          tofile=\"returned\"))\n+\t\t\tlogging.error(error_message)\n+\t\t\traise Exception\n \n \twantRC = 0\n \tif \"return_code\" in testObj:\n \t\twantRC = testObj['return_code']\n \tif proc.returncode != wantRC:\n-\t\tprint(\"Return code mismatch for \" + outputFn)\n-\t\tsys.exit(1)\n+\t\tlogging.error(\"Return code mismatch for \" + outputFn)\n+\t\traise Exception\n \n-def bctester(testDir, input_basename, buildenv, verbose = False):\n+def bctester(testDir, input_basename, buildenv):\n \tinput_filename = testDir + \"/\" + input_basename\n \traw_data = open(input_filename).read()\n \tinput_data = json.loads(raw_data)\n \n+\tfailed_testcases = []\n+\n \tfor testObj in input_data:\n-\t\tif verbose and \"description\" in testObj:\n-\t\t\tprint (\"Testing: \" + testObj[\"description\"])\n-\t\tbctest(testDir, testObj, buildenv.exeext)\n-\t\tif verbose and \"description\" in testObj:\n-\t\t\tprint (\"PASS\")\n+\t\ttry:\n+\t\t\tbctest(testDir, testObj, buildenv.exeext)\n+\t\t\tlogging.info(\"PASSED: \" + testObj[\"description\"])\n+\t\texcept:\n+\t\t\tlogging.info(\"FAILED: \" + testObj[\"description\"])\n+\t\t\tfailed_testcases.append(testObj[\"description\"])\n \n-\tsys.exit(0)\n+\tif failed_testcases:\n+\t\tlogging.error(\"FAILED TESTCASES: [\" + \", \".join(failed_testcases) + \"]\")\n+\t\tsys.exit(1)\n+\telse:\n+\t\tsys.exit(0)\n "
      },
      {
        "sha": "9afe91aca062403b0c2c6f4b257bed48071f66fa",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32c0d6e1d2b360501370efef40468ca28cc2cd89/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32c0d6e1d2b360501370efef40468ca28cc2cd89/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=32c0d6e1d2b360501370efef40468ca28cc2cd89",
        "patch": "@@ -4,9 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals\n import os\n+import sys\n import bctest\n import buildenv\n import argparse\n+import logging\n \n help_text=\"\"\"Test framework for bitcoin utils.\n \n@@ -19,14 +21,23 @@\n \n \n if __name__ == '__main__':\n-    verbose = False\n     try:\n         srcdir = os.environ[\"srcdir\"]\n+        verbose = False\n     except:\n         parser = argparse.ArgumentParser(description=help_text)\n         parser.add_argument('-s', '--srcdir')\n         parser.add_argument('-v', '--verbose', action='store_true')\n         args = parser.parse_args()\n         srcdir = args.srcdir\n         verbose = args.verbose\n-    bctest.bctester(srcdir + \"/test/data\", \"bitcoin-util-test.json\", buildenv, verbose = verbose)\n+\n+    if verbose:\n+        level = logging.DEBUG\n+    else:\n+        level = logging.ERROR\n+    formatter = '%(asctime)s - %(levelname)s - %(message)s'\n+    # Add the format/level to the logger\n+    logging.basicConfig(format = formatter, level=level)\n+\n+    bctest.bctester(srcdir + \"/test/data\", \"bitcoin-util-test.json\", buildenv)"
      }
    ]
  }
]