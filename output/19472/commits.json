[
  {
    "sha": "1a1c23f8d40116741f0e26cdf22688fd91c923fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTFjMjNmOGQ0MDExNjc0MWYwZTI2Y2RmMjI2ODhmZDkxYzkyM2Zj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-15T14:15:08Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-10T17:20:07Z"
      },
      "message": "[net processing] Change cs_main TRY_LOCK to LOCK in SendMessages()\n\nThis was changed to TRY_LOCK in #1117 to fix a potential deadlock\nbetween cs_main and cs_vSend. cs_vSend was split into cs_vSend and\ncs_sendProcessing in #9535 (and cs_sendProcessing was changed from a\nTRY_LOCK to a LOCK in the same PR).\n\nSince cs_vSend can no longer be taken before cs_main, revert this to a\nLOCK().\n\nThis commit leaves part of the code with bad indentation. That is fixed\nby the next (whitespace change only) commit.",
      "tree": {
        "sha": "4af484dc616b21654a000f9938e2554406c3af1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4af484dc616b21654a000f9938e2554406c3af1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a1c23f8d40116741f0e26cdf22688fd91c923fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a1c23f8d40116741f0e26cdf22688fd91c923fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a1c23f8d40116741f0e26cdf22688fd91c923fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a1c23f8d40116741f0e26cdf22688fd91c923fc/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0b0b0240f986b88a31336db2e6906de0edc0816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0b0b0240f986b88a31336db2e6906de0edc0816",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0b0b0240f986b88a31336db2e6906de0edc0816"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f5cff6297d61695c0759323c7fe4f0383b20baf6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a1c23f8d40116741f0e26cdf22688fd91c923fc/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a1c23f8d40116741f0e26cdf22688fd91c923fc/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1a1c23f8d40116741f0e26cdf22688fd91c923fc",
        "patch": "@@ -3838,7 +3838,7 @@ class CompareInvMempoolOrder\n bool PeerLogicValidation::SendMessages(CNode* pto)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n-    {\n+\n         // Don't send anything until the version handshake is complete\n         if (!pto->fSuccessfullyConnected || pto->fDisconnect)\n             return true;\n@@ -3875,9 +3875,8 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             }\n         }\n \n-        TRY_LOCK(cs_main, lockMain);\n-        if (!lockMain)\n-            return true;\n+    {\n+        LOCK(cs_main);\n \n         if (MaybeDiscourageAndDisconnect(*pto)) return true;\n \n@@ -4416,7 +4415,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                 pto->m_tx_relay->nextSendTimeFeeFilter = timeNow + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n             }\n         }\n-    }\n+    } // release cs_main\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "a1d5a428a24afe4f600be29e9d0d3bb4c720e816",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWQ1YTQyOGEyNGFmZTRmNjAwYmUyOWU5ZDBkM2JiNGM3MjBlODE2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-15T14:19:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-10T17:20:07Z"
      },
      "message": "[net processing] Fix bad indentation in SendMessages()\n\nHint for reviewers: review ignoring whitespace changes.",
      "tree": {
        "sha": "0e200927bf28e57f5047c9c0a291ea0dd4cd984a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e200927bf28e57f5047c9c0a291ea0dd4cd984a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1d5a428a24afe4f600be29e9d0d3bb4c720e816",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d5a428a24afe4f600be29e9d0d3bb4c720e816",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d5a428a24afe4f600be29e9d0d3bb4c720e816",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d5a428a24afe4f600be29e9d0d3bb4c720e816/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a1c23f8d40116741f0e26cdf22688fd91c923fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a1c23f8d40116741f0e26cdf22688fd91c923fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a1c23f8d40116741f0e26cdf22688fd91c923fc"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "f8b22cd7c8c6d722f95a1217aa3c1151d9e4209f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d5a428a24afe4f600be29e9d0d3bb4c720e816/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d5a428a24afe4f600be29e9d0d3bb4c720e816/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a1d5a428a24afe4f600be29e9d0d3bb4c720e816",
        "patch": "@@ -3839,41 +3839,41 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n-        // Don't send anything until the version handshake is complete\n-        if (!pto->fSuccessfullyConnected || pto->fDisconnect)\n-            return true;\n+    // Don't send anything until the version handshake is complete\n+    if (!pto->fSuccessfullyConnected || pto->fDisconnect)\n+        return true;\n \n-        // If we get here, the outgoing message serialization version is set and can't change.\n-        const CNetMsgMaker msgMaker(pto->GetSendVersion());\n+    // If we get here, the outgoing message serialization version is set and can't change.\n+    const CNetMsgMaker msgMaker(pto->GetSendVersion());\n \n-        //\n-        // Message: ping\n-        //\n-        bool pingSend = false;\n-        if (pto->fPingQueued) {\n-            // RPC ping request by user\n-            pingSend = true;\n-        }\n-        if (pto->nPingNonceSent == 0 && pto->m_ping_start.load() + PING_INTERVAL < GetTime<std::chrono::microseconds>()) {\n-            // Ping automatically sent as a latency probe & keepalive.\n-            pingSend = true;\n-        }\n-        if (pingSend) {\n-            uint64_t nonce = 0;\n-            while (nonce == 0) {\n-                GetRandBytes((unsigned char*)&nonce, sizeof(nonce));\n-            }\n-            pto->fPingQueued = false;\n-            pto->m_ping_start = GetTime<std::chrono::microseconds>();\n-            if (pto->nVersion > BIP0031_VERSION) {\n-                pto->nPingNonceSent = nonce;\n-                connman->PushMessage(pto, msgMaker.Make(NetMsgType::PING, nonce));\n-            } else {\n-                // Peer is too old to support ping command with nonce, pong will never arrive.\n-                pto->nPingNonceSent = 0;\n-                connman->PushMessage(pto, msgMaker.Make(NetMsgType::PING));\n-            }\n+    //\n+    // Message: ping\n+    //\n+    bool pingSend = false;\n+    if (pto->fPingQueued) {\n+        // RPC ping request by user\n+        pingSend = true;\n+    }\n+    if (pto->nPingNonceSent == 0 && pto->m_ping_start.load() + PING_INTERVAL < GetTime<std::chrono::microseconds>()) {\n+        // Ping automatically sent as a latency probe & keepalive.\n+        pingSend = true;\n+    }\n+    if (pingSend) {\n+        uint64_t nonce = 0;\n+        while (nonce == 0) {\n+            GetRandBytes((unsigned char*)&nonce, sizeof(nonce));\n+        }\n+        pto->fPingQueued = false;\n+        pto->m_ping_start = GetTime<std::chrono::microseconds>();\n+        if (pto->nVersion > BIP0031_VERSION) {\n+            pto->nPingNonceSent = nonce;\n+            connman->PushMessage(pto, msgMaker.Make(NetMsgType::PING, nonce));\n+        } else {\n+            // Peer is too old to support ping command with nonce, pong will never arrive.\n+            pto->nPingNonceSent = 0;\n+            connman->PushMessage(pto, msgMaker.Make(NetMsgType::PING));\n         }\n+    }\n \n     {\n         LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDk3ODFlNTZkMmJkNmE2MWVjMDI3YTA5YzFkYjllZTFhNGFiZjJl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-15T13:28:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-11T06:06:20Z"
      },
      "message": "[net processing] Only call MaybeDiscourageAndDisconnect from SendMessages\n\n`nMisbehavior` is a tally in `CNodeState` that can be incremented from\nanywhere. That almost always happens inside a `ProcessMessages()` call\n(because we increment the misbehavior score when receiving a bad\nmessages from a peer), but not always. See, for example, the call to\n`MaybePunishNodeForBlock()` inside `BlockChecked()`, which is an\nasynchronous callback from the validation interface, executed on the\nscheduler thread.\n\nAs long as `MaybeDiscourageAndDisconnect()` is called regularly for the\nnode, then the misbehavior score exceeding the 100 threshold will\neventually result in the peer being punished. It doesn't really matter\nwhere that `MaybeDiscourageAndDisconnect()` happens, but it makes most\nsense in `SendMessages()` which is where we do general peer\nhousekeeping/maintenance.\n\nTherefore, remove the `MaybeDiscourageAndDisconnect()` call in\n`ProcessMessages()` and move the `MaybeDiscourageAndDisconnect()` call\nin `SendMessages()` to the top of the function. This moves it out of the\ncs_main lock scope, so take that lock directly inside\n`MaybeDiscourageAndDisconnect()`.\n\nHistoric note: `MaybeDiscourageAndDisconnect()` was previously\n`SendRejectsAndCheckIfBanned()`, and before that was just sending\nrejects.  All of those things required cs_main, which is why\n`MaybeDiscourageAndDisconnect()` was called after the ping logic.",
      "tree": {
        "sha": "292214604d5f804e38c0cc17858f06f79d4dff5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/292214604d5f804e38c0cc17858f06f79d4dff5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d5a428a24afe4f600be29e9d0d3bb4c720e816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d5a428a24afe4f600be29e9d0d3bb4c720e816",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d5a428a24afe4f600be29e9d0d3bb4c720e816"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "570cca0c66acce5149d191c1821ddfcb0719c5a4",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e",
        "patch": "@@ -3559,7 +3559,7 @@ void ProcessMessage(\n \n bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode& pnode)\n {\n-    AssertLockHeld(cs_main);\n+    LOCK(cs_main);\n     CNodeState &state = *State(pnode.GetId());\n \n     if (state.m_should_discourage) {\n@@ -3675,9 +3675,6 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n         LogPrint(BCLog::NET, \"%s(%s, %u bytes): Unknown exception caught\\n\", __func__, SanitizeString(msg_type), nMessageSize);\n     }\n \n-    LOCK(cs_main);\n-    MaybeDiscourageAndDisconnect(*pfrom);\n-\n     return fMoreWork;\n }\n \n@@ -3839,6 +3836,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n+    // We must call MaybeDiscourageAndDisconnect first, to ensure that we'll\n+    // disconnect misbehaving peers even before the version handshake is complete.\n+    if (MaybeDiscourageAndDisconnect(*pto)) return true;\n+\n     // Don't send anything until the version handshake is complete\n     if (!pto->fSuccessfullyConnected || pto->fDisconnect)\n         return true;\n@@ -3878,8 +3879,6 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n     {\n         LOCK(cs_main);\n \n-        if (MaybeDiscourageAndDisconnect(*pto)) return true;\n-\n         CNodeState &state = *State(pto->GetId());\n \n         // Address refresh broadcast"
      },
      {
        "sha": "48bcbc1a6c6af94a7ec84730bf5a7484a1aed30c",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e",
        "patch": "@@ -31,7 +31,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     ChainstateManager& m_chainman;\n     CTxMemPool& m_mempool;\n \n-    bool MaybeDiscourageAndDisconnect(CNode& pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool MaybeDiscourageAndDisconnect(CNode& pnode);\n \n public:\n     PeerLogicValidation(CConnman* connman, BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool);"
      }
    ]
  },
  {
    "sha": "655b1957470c39bcab64917747c9f467444bd809",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTViMTk1NzQ3MGMzOWJjYWI2NDkxNzc0N2M5ZjQ2NzQ0NGJkODA5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-15T15:33:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-11T06:13:05Z"
      },
      "message": "[net processing] Continue SendMessages processing if not disconnecting peer\n\nIf we don't disconnect a peer in MaybeDiscourageAndDisconnect because it\nhas NOBAN permissions or it's a manual connection, continue SendMessages\nprocessing rather than exiting early.\n\nThe previous behaviour was that we'd miss the SendMessages processing on\nthis iteration of the MessageHandler loop. That's not a problem since\nSendMessages() would just be called again on the next iteration, but it\nwas slightly inefficient and confusing.",
      "tree": {
        "sha": "4147eb276e4789b5938ba89a325fe9e037bd046e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4147eb276e4789b5938ba89a325fe9e037bd046e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/655b1957470c39bcab64917747c9f467444bd809",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/655b1957470c39bcab64917747c9f467444bd809",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/655b1957470c39bcab64917747c9f467444bd809",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/655b1957470c39bcab64917747c9f467444bd809/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a49781e56d2bd6a61ec027a09c1db9ee1a4abf2e"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 37,
      "deletions": 20
    },
    "files": [
      {
        "sha": "4321005212ebce5f77b863b7e342810d950a2079",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 20,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/655b1957470c39bcab64917747c9f467444bd809/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/655b1957470c39bcab64917747c9f467444bd809/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=655b1957470c39bcab64917747c9f467444bd809",
        "patch": "@@ -3557,32 +3557,49 @@ void ProcessMessage(\n     return;\n }\n \n+/** Maybe disconnect a peer and discourage future connections from its address.\n+ *\n+ * @param[in]   pnode     The node to check.\n+ * @return                True if the peer was marked for disconnection in this function\n+ */\n bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode& pnode)\n {\n-    LOCK(cs_main);\n-    CNodeState &state = *State(pnode.GetId());\n+    NodeId peer_id{pnode.GetId()};\n+    {\n+        LOCK(cs_main);\n+        CNodeState &state = *State(peer_id);\n \n-    if (state.m_should_discourage) {\n+        // There's nothing to do if the m_should_discourage flag isn't set\n+        if (!state.m_should_discourage) return false;\n+\n+        // Reset m_should_discourage\n         state.m_should_discourage = false;\n-        if (pnode.HasPermission(PF_NOBAN)) {\n-            LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode.addr.ToString());\n-        } else if (pnode.m_manual_connection) {\n-            LogPrintf(\"Warning: not punishing manually-connected peer %s!\\n\", pnode.addr.ToString());\n-        } else if (pnode.addr.IsLocal()) {\n-            // Disconnect but don't discourage this local node\n-            LogPrintf(\"Warning: disconnecting but not discouraging local peer %s!\\n\", pnode.addr.ToString());\n-            pnode.fDisconnect = true;\n-        } else {\n-            // Disconnect and discourage all nodes sharing the address\n-            LogPrintf(\"Disconnecting and discouraging peer %s!\\n\", pnode.addr.ToString());\n-            if (m_banman) {\n-                m_banman->Discourage(pnode.addr);\n-            }\n-            connman->DisconnectNode(pnode.addr);\n-        }\n+    } // cs_main\n+\n+    if (pnode.HasPermission(PF_NOBAN)) {\n+        // Peer has the NOBAN permission flag - log but don't disconnect\n+        LogPrintf(\"Warning: not punishing noban peer %d!\\n\", peer_id);\n+        return false;\n+    }\n+\n+    if (pnode.m_manual_connection) {\n+        // Peer is a manual connection - log but don't disconnect\n+        LogPrintf(\"Warning: not punishing manually connected peer %d!\\n\", peer_id);\n+        return false;\n+    }\n+\n+    if (pnode.addr.IsLocal()) {\n+        // Peer is on a local address. Disconnect this peer, but don't discourage the local address\n+        LogPrintf(\"Warning: disconnecting but not discouraging local peer %d!\\n\", peer_id);\n+        pnode.fDisconnect = true;\n         return true;\n     }\n-    return false;\n+\n+    // Normal case: Disconnect the peer and discourage all nodes sharing the address\n+    LogPrintf(\"Disconnecting and discouraging peer %d!\\n\", peer_id);\n+    if (m_banman) m_banman->Discourage(pnode.addr);\n+    connman->DisconnectNode(pnode.addr);\n+    return true;\n }\n \n bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)"
      }
    ]
  }
]