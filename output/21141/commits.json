[
  {
    "sha": "06e1fb0b170a69996a7ce1ef5203785a7bc6b278",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmUxZmIwYjE3MGE2OTk5NmE3Y2UxZWY1MjAzNzg1YTdiYzZiMjc4",
    "commit": {
      "author": {
        "name": "Maayan Keshet",
        "email": "maayan@maayank.com",
        "date": "2021-03-15T14:26:05Z"
      },
      "committer": {
        "name": "Maayan Keshet",
        "email": "maayan@maayank.com",
        "date": "2021-03-15T16:45:36Z"
      },
      "message": "Add new format string placeholders for walletnotify to include relevant block information for transactions",
      "tree": {
        "sha": "ea7b64dd9b7ea8adaab9536c21a939cabadab1d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea7b64dd9b7ea8adaab9536c21a939cabadab1d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06e1fb0b170a69996a7ce1ef5203785a7bc6b278",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06e1fb0b170a69996a7ce1ef5203785a7bc6b278",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06e1fb0b170a69996a7ce1ef5203785a7bc6b278",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06e1fb0b170a69996a7ce1ef5203785a7bc6b278/comments",
    "author": {
      "login": "maayank",
      "id": 2720309,
      "node_id": "MDQ6VXNlcjI3MjAzMDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2720309?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maayank",
      "html_url": "https://github.com/maayank",
      "followers_url": "https://api.github.com/users/maayank/followers",
      "following_url": "https://api.github.com/users/maayank/following{/other_user}",
      "gists_url": "https://api.github.com/users/maayank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maayank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maayank/subscriptions",
      "organizations_url": "https://api.github.com/users/maayank/orgs",
      "repos_url": "https://api.github.com/users/maayank/repos",
      "events_url": "https://api.github.com/users/maayank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maayank/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maayank",
      "id": 2720309,
      "node_id": "MDQ6VXNlcjI3MjAzMDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2720309?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maayank",
      "html_url": "https://github.com/maayank",
      "followers_url": "https://api.github.com/users/maayank/followers",
      "following_url": "https://api.github.com/users/maayank/following{/other_user}",
      "gists_url": "https://api.github.com/users/maayank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maayank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maayank/subscriptions",
      "organizations_url": "https://api.github.com/users/maayank/orgs",
      "repos_url": "https://api.github.com/users/maayank/repos",
      "events_url": "https://api.github.com/users/maayank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maayank/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c771fc0dc1bcb48fc6aa77b61c1ff31742ac8bb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c771fc0dc1bcb48fc6aa77b61c1ff31742ac8bb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c771fc0dc1bcb48fc6aa77b61c1ff31742ac8bb7"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 43,
      "deletions": 21
    },
    "files": [
      {
        "sha": "fdeead1fa59eee0c556efed235ecb7f0ff42650e",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06e1fb0b170a69996a7ce1ef5203785a7bc6b278/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06e1fb0b170a69996a7ce1ef5203785a7bc6b278/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=06e1fb0b170a69996a7ce1ef5203785a7bc6b278",
        "patch": "@@ -70,7 +70,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n     argsman.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n #if HAVE_SYSTEM\n-    argsman.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes. %s in cmd is replaced by TxID and %w is replaced by wallet name. %w is not currently implemented on windows. On systems where %w is supported, it should NOT be quoted because this would break shell escaping used to invoke the command.\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes. %s in cmd is replaced by TxID, %w is replaced by wallet name, %b is replaced by the hash of the block including the transaction (set to 'unconfirmed' if the transaction is not included) and %h is replaced by the block height (-1 if not included). %w is not currently implemented on windows. On systems where %w is supported, it should NOT be quoted because this would break shell escaping used to invoke the command.\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #endif\n     argsman.AddArg(\"-walletrbf\", strprintf(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\", DEFAULT_WALLET_RBF), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n "
      },
      {
        "sha": "ac1b2a4c0ab92f06db551a0278c916540192db03",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06e1fb0b170a69996a7ce1ef5203785a7bc6b278/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06e1fb0b170a69996a7ce1ef5203785a7bc6b278/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=06e1fb0b170a69996a7ce1ef5203785a7bc6b278",
        "patch": "@@ -944,6 +944,14 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n     if (!strCmd.empty())\n     {\n         boost::replace_all(strCmd, \"%s\", hash.GetHex());\n+        if (confirm.status == CWalletTx::Status::CONFIRMED)\n+        {\n+            boost::replace_all(strCmd, \"%b\", confirm.hashBlock.GetHex());\n+            boost::replace_all(strCmd, \"%h\", ToString(confirm.block_height));\n+        } else {\n+            boost::replace_all(strCmd, \"%b\", \"unconfirmed\");\n+            boost::replace_all(strCmd, \"%h\", \"-1\");\n+        }\n #ifndef WIN32\n         // Substituting the wallet name isn't currently supported on windows\n         // because windows shell escaping has not been implemented yet:"
      },
      {
        "sha": "4e2de1daf42477b9597ab7e90864e99462f9e72d",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 34,
        "deletions": 20,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06e1fb0b170a69996a7ce1ef5203785a7bc6b278/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06e1fb0b170a69996a7ce1ef5203785a7bc6b278/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=06e1fb0b170a69996a7ce1ef5203785a7bc6b278",
        "patch": "@@ -17,7 +17,7 @@\n FILE_CHAR_START = 32 if os.name == 'nt' else 1\n FILE_CHAR_END = 128\n FILE_CHARS_DISALLOWED = '/\\\\?%*:|\"<>' if os.name == 'nt' else '/'\n-\n+UNCONFIRMED_HASH_STRING = 'unconfirmed'\n \n def notify_outputname(walletname, txid):\n     return txid if os.name == 'nt' else '{}_{}'.format(walletname, txid)\n@@ -43,7 +43,7 @@ def setup_network(self):\n             \"-blocknotify=echo > {}\".format(os.path.join(self.blocknotify_dir, '%s')),\n         ], [\n             \"-rescan\",\n-            \"-walletnotify=echo > {}\".format(os.path.join(self.walletnotify_dir, notify_outputname('%w', '%s'))),\n+            \"-walletnotify=echo %h_%b > {}\".format(os.path.join(self.walletnotify_dir, notify_outputname('%w', '%s'))),\n         ]]\n         self.wallet_names = [self.default_wallet_name, self.wallet]\n         super().setup_network()\n@@ -90,11 +90,9 @@ def run_test(self):\n             self.wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n \n             # directory content should equal the generated transaction hashes\n-            txids_rpc = list(map(lambda t: notify_outputname(self.wallet, t['txid']), self.nodes[1].listtransactions(\"*\", block_count)))\n-            assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n+            tx_details = list(map(lambda t: (t['txid'], t['blockheight'], t['blockhash']), self.nodes[1].listtransactions(\"*\", block_count)))\n             self.stop_node(1)\n-            for tx_file in os.listdir(self.walletnotify_dir):\n-                os.remove(os.path.join(self.walletnotify_dir, tx_file))\n+            self.expect_wallet_notify(tx_details)\n \n             self.log.info(\"test -walletnotify after rescan\")\n             # restart node to rescan to force wallet notifications\n@@ -104,10 +102,8 @@ def run_test(self):\n             self.wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n \n             # directory content should equal the generated transaction hashes\n-            txids_rpc = list(map(lambda t: notify_outputname(self.wallet, t['txid']), self.nodes[1].listtransactions(\"*\", block_count)))\n-            assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n-            for tx_file in os.listdir(self.walletnotify_dir):\n-                os.remove(os.path.join(self.walletnotify_dir, tx_file))\n+            tx_details = list(map(lambda t: (t['txid'], t['blockheight'], t['blockhash']), self.nodes[1].listtransactions(\"*\", block_count)))\n+            self.expect_wallet_notify(tx_details)\n \n             # Conflicting transactions tests.\n             # Generate spends from node 0, and check notifications\n@@ -122,7 +118,7 @@ def run_test(self):\n             tx1 = self.nodes[0].sendtoaddress(address=ADDRESS_BCRT1_UNSPENDABLE, amount=1, replaceable=True)\n             assert_equal(tx1 in self.nodes[0].getrawmempool(), True)\n             self.sync_mempools()\n-            self.expect_wallet_notify([tx1])\n+            self.expect_wallet_notify([(tx1, -1, UNCONFIRMED_HASH_STRING)])\n \n             # Generate bump transaction, sync mempools, and check for bump1\n             # notification. In the future, per\n@@ -131,39 +127,57 @@ def run_test(self):\n             bump1 = self.nodes[0].bumpfee(tx1)[\"txid\"]\n             assert_equal(bump1 in self.nodes[0].getrawmempool(), True)\n             self.sync_mempools()\n-            self.expect_wallet_notify([bump1])\n+            self.expect_wallet_notify([(bump1, -1, UNCONFIRMED_HASH_STRING)])\n \n             # Add bump1 transaction to new block, checking for a notification\n             # and the correct number of confirmations.\n-            self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n+            blockhash1 = self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n+            blockheight1 = self.nodes[0].getblockcount()\n             self.sync_blocks()\n-            self.expect_wallet_notify([bump1])\n+            self.expect_wallet_notify([(bump1, blockheight1, blockhash1)])\n             assert_equal(self.nodes[1].gettransaction(bump1)[\"confirmations\"], 1)\n \n             # Generate a second transaction to be bumped.\n             tx2 = self.nodes[0].sendtoaddress(address=ADDRESS_BCRT1_UNSPENDABLE, amount=1, replaceable=True)\n             assert_equal(tx2 in self.nodes[0].getrawmempool(), True)\n             self.sync_mempools()\n-            self.expect_wallet_notify([tx2])\n+            self.expect_wallet_notify([(tx2, -1, UNCONFIRMED_HASH_STRING)])\n \n             # Bump tx2 as bump2 and generate a block on node 0 while\n             # disconnected, then reconnect and check for notifications on node 1\n             # about newly confirmed bump2 and newly conflicted tx2.\n             self.disconnect_nodes(0, 1)\n             bump2 = self.nodes[0].bumpfee(tx2)[\"txid\"]\n-            self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n+            blockhash2 = self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)[0]\n+            blockheight2 = self.nodes[0].getblockcount()\n             assert_equal(self.nodes[0].gettransaction(bump2)[\"confirmations\"], 1)\n             assert_equal(tx2 in self.nodes[1].getrawmempool(), True)\n             self.connect_nodes(0, 1)\n             self.sync_blocks()\n-            self.expect_wallet_notify([bump2, tx2])\n+            self.expect_wallet_notify([(bump2, blockheight2, blockhash2), (tx2, -1, UNCONFIRMED_HASH_STRING)])\n             assert_equal(self.nodes[1].gettransaction(bump2)[\"confirmations\"], 1)\n \n         # TODO: add test for `-alertnotify` large fork notifications\n \n-    def expect_wallet_notify(self, tx_ids):\n-        self.wait_until(lambda: len(os.listdir(self.walletnotify_dir)) >= len(tx_ids), timeout=10)\n-        assert_equal(sorted(notify_outputname(self.wallet, tx_id) for tx_id in tx_ids), sorted(os.listdir(self.walletnotify_dir)))\n+    def expect_wallet_notify(self, tx_details):\n+        self.wait_until(lambda: len(os.listdir(self.walletnotify_dir)) >= len(tx_details), timeout=10)\n+        # Should have no more and no less files than expected\n+        assert_equal(sorted(notify_outputname(self.wallet, tx_id) for tx_id, _, _ in tx_details), sorted(os.listdir(self.walletnotify_dir)))\n+        # Should now verify contents of each file\n+        for tx_id, blockheight, blockhash in tx_details:\n+            fname = os.path.join(self.walletnotify_dir, notify_outputname(self.wallet, tx_id))\n+            with open(fname, 'rt', encoding='utf-8') as f:\n+                text = f.read()\n+                # Universal newline ensures '\\n' on 'nt'\n+                assert_equal(text[-1], '\\n')\n+                text = text[:-1]\n+                if os.name == 'nt':\n+                    # On Windows, echo as above will append a whitespace\n+                    assert_equal(text[-1], ' ')\n+                    text = text[:-1]\n+                expected = str(blockheight) + '_' + blockhash\n+                assert_equal(text, expected)\n+\n         for tx_file in os.listdir(self.walletnotify_dir):\n             os.remove(os.path.join(self.walletnotify_dir, tx_file))\n "
      }
    ]
  }
]