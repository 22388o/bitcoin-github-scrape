[
  {
    "sha": "1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWYyMTM4YzBkYjNiZDRmOTMzMmM3NzdmYTNmYjI3NzBkYzFiMDhj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-11-22T03:32:55Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-12-28T06:25:06Z"
      },
      "message": "lint: run mypy over contrib/devtools",
      "tree": {
        "sha": "3faeca0a36f00c9aa46afe4c7e4495d1955ba576",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3faeca0a36f00c9aa46afe4c7e4495d1955ba576"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl/pekIACgkQLuufXMCV\nJsHZTA/9F0jNKIcbyf1e5N1rzMreqR09VVbeP8Y1hJ+gdXRyyNwkpPK3MnYUtvVW\nO3yepduYL0Mml/KK+Fpa4VeRGMzOVfjkARIlu7L9GzXTfGBBEbDS4R13u2CrnkXO\n5ZzVd9Qe3YGq6faEpjsU/rsTyiQI4//yMLPG4tsAG6PENe0r5sFgTNanDRnyK7tx\nk31EWnQw6Mtk4tLXpgQWIX+f/L0ypop5QpU9z5R5X+2U7kNnRocD16swuozWVu+x\ndmJUjqcHxVHDI7CbcR6mAhm8YgHIRRmc+FapDrMyJjRaxEaSSyZsGWb1L8IPBIYG\nphcTztCVS2HelUIVQHMU6PYvR603fhpeAxPejesn3i368tjAizpcCHCXjrUXP2/M\nto4g84TxAjTA2AmFOu80IHPyleak2YjBebe1fAFfIHuMnj3RqnwrAIXfnUgge6iP\nPsKB35cgjKeDuTu3VMvcAbmIFPiapYRQyEMEttPBVpoM64AXZsy7yddjZygYStEu\nIQJP6mvpQ8rwswKTnmjUa7aN+tMJE9tPYFxJdxc6X9/vwHfQWRYFo/7seHUvhA/m\nPpwu7OuYNSFTEHmatesjlpbIl5MtwJLrF3ebgITvNZ9Giq8lnVhDnVloAyXx9qzX\nW8JfA8FriJk6ptdTnwGiDcc57/7ozmnGFe7AZmqjaGY+hV9nl2o=\n=bHHp\n-----END PGP SIGNATURE-----",
        "payload": "tree 3faeca0a36f00c9aa46afe4c7e4495d1955ba576\nparent 4a8f4ac4fc07c59a0bfdbb7c15a50cf5b4364312\nauthor fanquake <fanquake@gmail.com> 1606015975 +0800\ncommitter fanquake <fanquake@gmail.com> 1609136706 +0800\n\nlint: run mypy over contrib/devtools\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a8f4ac4fc07c59a0bfdbb7c15a50cf5b4364312",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a8f4ac4fc07c59a0bfdbb7c15a50cf5b4364312",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a8f4ac4fc07c59a0bfdbb7c15a50cf5b4364312"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6dc4e83ee7211d6eea21f78b05779a2acca342fa",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c",
        "patch": "@@ -5,6 +5,7 @@\n \n import sys\n import re\n+from typing import Dict, List, Set\n \n MAPPING = {\n     'core_read.cpp': 'core_io.cpp',\n@@ -32,7 +33,7 @@ def module_name(path):\n     return None\n \n files = dict()\n-deps = dict()\n+deps: Dict[str, Set[str]] = dict()\n \n RE = re.compile(\"^#include <(.*)>\")\n \n@@ -59,12 +60,12 @@ def module_name(path):\n                     deps[module].add(included_module)\n \n # Loop to find the shortest (remaining) circular dependency\n-have_cycle = False\n+have_cycle: bool = False\n while True:\n     shortest_cycle = None\n     for module in sorted(deps.keys()):\n         # Build the transitive closure of dependencies of module\n-        closure = dict()\n+        closure: Dict[str, List[str]] = dict()\n         for dep in deps[module]:\n             closure[dep] = []\n         while True:"
      },
      {
        "sha": "b30ed625215ffac89661b97e01a5cd91cf216076",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c",
        "patch": "@@ -157,7 +157,7 @@ def check_version(max_versions, version, arch) -> bool:\n def check_imported_symbols(filename) -> bool:\n     elf = pixie.load(filename)\n     cppfilt = CPPFilt()\n-    ok = True\n+    ok: bool = True\n \n     for symbol in elf.dyn_symbols:\n         if not symbol.is_import:\n@@ -172,7 +172,7 @@ def check_imported_symbols(filename) -> bool:\n def check_exported_symbols(filename) -> bool:\n     elf = pixie.load(filename)\n     cppfilt = CPPFilt()\n-    ok = True\n+    ok: bool = True\n     for symbol in elf.dyn_symbols:\n         if not symbol.is_export:\n             continue\n@@ -184,7 +184,7 @@ def check_exported_symbols(filename) -> bool:\n     return ok\n \n def check_ELF_libraries(filename) -> bool:\n-    ok = True\n+    ok: bool = True\n     elf = pixie.load(filename)\n     for library_name in elf.query_dyn_tags(pixie.DT_NEEDED):\n         assert(isinstance(library_name, bytes))\n@@ -207,7 +207,7 @@ def macho_read_libraries(filename) -> List[str]:\n     return libraries\n \n def check_MACHO_libraries(filename) -> bool:\n-    ok = True\n+    ok: bool = True\n     for dylib in macho_read_libraries(filename):\n         if dylib not in MACHO_ALLOWED_LIBRARIES:\n             print('{} is not in ALLOWED_LIBRARIES!'.format(dylib))\n@@ -227,7 +227,7 @@ def pe_read_libraries(filename) -> List[str]:\n     return libraries\n \n def check_PE_libraries(filename) -> bool:\n-    ok = True\n+    ok: bool = True\n     for dylib in pe_read_libraries(filename):\n         if dylib not in PE_ALLOWED_LIBRARIES:\n             print('{} is not in ALLOWED_LIBRARIES!'.format(dylib))\n@@ -260,7 +260,7 @@ def identify_executable(executable) -> Optional[str]:\n     return None\n \n if __name__ == '__main__':\n-    retval = 0\n+    retval: int = 0\n     for filename in sys.argv[1:]:\n         try:\n             etype = identify_executable(filename)\n@@ -269,7 +269,7 @@ def identify_executable(executable) -> Optional[str]:\n                 retval = 1\n                 continue\n \n-            failed = []\n+            failed: List[str] = []\n             for (name, func) in CHECKS[etype]:\n                 if not func(filename):\n                     failed.append(name)"
      },
      {
        "sha": "f83c33cb32f9932e8802006947173cf626c1181c",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=1ef2138c0db3bd4f9332c777fa3fb2770dc1b08c",
        "patch": "@@ -102,7 +102,7 @@ if ! PYTHONWARNINGS=\"ignore\" flake8 --ignore=B,C,E,F,I,N,W --select=$(IFS=\",\"; e\n     EXIT_CODE=1\n fi\n \n-if ! mypy --ignore-missing-imports $(git ls-files \"test/functional/*.py\"); then\n+if ! mypy --ignore-missing-imports $(git ls-files \"test/functional/*.py\" \"contrib/devtools/*.py\"); then\n     EXIT_CODE=1\n fi\n "
      }
    ]
  }
]