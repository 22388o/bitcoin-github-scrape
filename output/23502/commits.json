[
  {
    "sha": "46dc1e68fef3af54e484f900563e4f35696ef942",
    "node_id": "C_kwDOABII59oAKDQ2ZGMxZTY4ZmVmM2FmNTRlNDg0ZjkwMDU2M2U0ZjM1Njk2ZWY5NDI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-15T19:40:09Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-15T20:23:26Z"
      },
      "message": "sign: Include sighash byte for Schnorr sigs with DUMMY_MAX_SIG_CREATOR",
      "tree": {
        "sha": "14cd79ba25c3bcc65c86a43e62b7f522bca086e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14cd79ba25c3bcc65c86a43e62b7f522bca086e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46dc1e68fef3af54e484f900563e4f35696ef942",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46dc1e68fef3af54e484f900563e4f35696ef942",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46dc1e68fef3af54e484f900563e4f35696ef942",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46dc1e68fef3af54e484f900563e4f35696ef942/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ccab7187b35142e03c15dd55390e45b3d233c52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ccab7187b35142e03c15dd55390e45b3d233c52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ccab7187b35142e03c15dd55390e45b3d233c52"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f2015a522a35532c531a474c0ac01971c6d2b6b9",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46dc1e68fef3af54e484f900563e4f35696ef942/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46dc1e68fef3af54e484f900563e4f35696ef942/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=46dc1e68fef3af54e484f900563e4f35696ef942",
        "patch": "@@ -549,8 +549,9 @@ class DummySignatureCreator final : public BaseSignatureCreator {\n private:\n     char m_r_len = 32;\n     char m_s_len = 32;\n+    bool m_include_sighash = false;\n public:\n-    DummySignatureCreator(char r_len, char s_len) : m_r_len(r_len), m_s_len(s_len) {}\n+    DummySignatureCreator(char r_len, char s_len, bool include_sighash) : m_r_len(r_len), m_s_len(s_len), m_include_sighash(include_sighash) {}\n     const BaseSignatureChecker& Checker() const override { return DUMMY_CHECKER; }\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override\n     {\n@@ -570,14 +571,17 @@ class DummySignatureCreator final : public BaseSignatureCreator {\n     bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* tweak, SigVersion sigversion) const override\n     {\n         sig.assign(64, '\\000');\n+        if (m_include_sighash) {\n+            sig.push_back((unsigned char)SIGHASH_ALL);\n+        }\n         return true;\n     }\n };\n \n }\n \n-const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator(32, 32);\n-const BaseSignatureCreator& DUMMY_MAXIMUM_SIGNATURE_CREATOR = DummySignatureCreator(33, 32);\n+const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator(32, 32, false);\n+const BaseSignatureCreator& DUMMY_MAXIMUM_SIGNATURE_CREATOR = DummySignatureCreator(33, 32, true);\n \n bool IsSolvable(const SigningProvider& provider, const CScript& script)\n {"
      }
    ]
  },
  {
    "sha": "899185d5f133f2044506e6c10b23f1831e7fb1a8",
    "node_id": "C_kwDOABII59oAKDg5OTE4NWQ1ZjEzM2YyMDQ0NTA2ZTZjMTBiMjNmMTgzMWU3ZmIxYTg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T01:29:06Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-15T20:23:26Z"
      },
      "message": "Use largest stack size when estimating size\n\nWhen estimating the size of a taproot witness (i.e.\nDummySignatureCreator is being used), use the largest stack size rather\nthan the smallest. This avoids underpaying fees.",
      "tree": {
        "sha": "ba347fe866aaa551eb48b54a5cda1389cc9ebf2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba347fe866aaa551eb48b54a5cda1389cc9ebf2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/899185d5f133f2044506e6c10b23f1831e7fb1a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/899185d5f133f2044506e6c10b23f1831e7fb1a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/899185d5f133f2044506e6c10b23f1831e7fb1a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/899185d5f133f2044506e6c10b23f1831e7fb1a8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46dc1e68fef3af54e484f900563e4f35696ef942",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46dc1e68fef3af54e484f900563e4f35696ef942",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46dc1e68fef3af54e484f900563e4f35696ef942"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 26,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0ececdd053afbae9d51650cc54d909e0b717226f",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 4,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/899185d5f133f2044506e6c10b23f1831e7fb1a8/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/899185d5f133f2044506e6c10b23f1831e7fb1a8/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=899185d5f133f2044506e6c10b23f1831e7fb1a8",
        "patch": "@@ -187,6 +187,11 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\n         sigdata.tr_spenddata.Merge(spenddata);\n     }\n \n+    // Detect if this is the dummy signer. If so, we want to choose the largest stack size for worst case size estimation\n+    bool use_largest = &creator == &DUMMY_SIGNATURE_CREATOR || &creator == &DUMMY_MAXIMUM_SIGNATURE_CREATOR;\n+    std::vector<std::vector<unsigned char>> largest_result_stack;\n+    uint64_t largest_result_stack_size = 0;\n+\n     // Try key path spending.\n     {\n         std::vector<unsigned char> sig;\n@@ -196,25 +201,42 @@ static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCrea\n             }\n         }\n         if (sigdata.taproot_key_path_sig.size()) {\n-            result = Vector(sigdata.taproot_key_path_sig);\n-            return true;\n+            if (use_largest) {\n+                largest_result_stack = Vector(sigdata.taproot_key_path_sig);\n+                largest_result_stack_size = GetSerializeSize(largest_result_stack, PROTOCOL_VERSION);\n+            } else {\n+                result = Vector(sigdata.taproot_key_path_sig);\n+                return true;\n+            }\n         }\n     }\n \n     // Try script path spending.\n     std::vector<std::vector<unsigned char>> smallest_result_stack;\n+    uint64_t smallest_result_stack_size = 0;\n     for (const auto& [key, control_blocks] : sigdata.tr_spenddata.scripts) {\n         const auto& [script, leaf_ver] = key;\n         std::vector<std::vector<unsigned char>> result_stack;\n         if (SignTaprootScript(provider, creator, sigdata, leaf_ver, script, result_stack)) {\n             result_stack.emplace_back(std::begin(script), std::end(script)); // Push the script\n             result_stack.push_back(*control_blocks.begin()); // Push the smallest control block\n+            uint64_t stack_size = GetSerializeSize(result_stack, PROTOCOL_VERSION);\n             if (smallest_result_stack.size() == 0 ||\n-                GetSerializeSize(result_stack, PROTOCOL_VERSION) < GetSerializeSize(smallest_result_stack, PROTOCOL_VERSION)) {\n-                smallest_result_stack = std::move(result_stack);\n+                stack_size < smallest_result_stack_size) {\n+                smallest_result_stack = result_stack;\n+                smallest_result_stack_size = stack_size;\n+            }\n+            if (use_largest && (largest_result_stack.size() == 0 ||\n+                stack_size > largest_result_stack_size)) {\n+                largest_result_stack = result_stack;\n+                largest_result_stack_size = stack_size;\n             }\n         }\n     }\n+    if (use_largest && largest_result_stack.size() != 0) {\n+        result = std::move(largest_result_stack);\n+        return true;\n+    }\n     if (smallest_result_stack.size() != 0) {\n         result = std::move(smallest_result_stack);\n         return true;"
      }
    ]
  },
  {
    "sha": "f0a9151e0bceba9aab8b634a9a583265902480d8",
    "node_id": "C_kwDOABII59oAKGYwYTkxNTFlMGJjZWJhOWFhYjhiNjM0YTlhNTgzMjY1OTAyNDgwZDg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-12T21:41:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-15T20:23:26Z"
      },
      "message": "tests: Test Taproot spends do not underestimate the fee",
      "tree": {
        "sha": "9d0662950183b4813cd0143dfd7a644a152a7dd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d0662950183b4813cd0143dfd7a644a152a7dd0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0a9151e0bceba9aab8b634a9a583265902480d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0a9151e0bceba9aab8b634a9a583265902480d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0a9151e0bceba9aab8b634a9a583265902480d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0a9151e0bceba9aab8b634a9a583265902480d8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "899185d5f133f2044506e6c10b23f1831e7fb1a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/899185d5f133f2044506e6c10b23f1831e7fb1a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/899185d5f133f2044506e6c10b23f1831e7fb1a8"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 14,
      "deletions": 3
    },
    "files": [
      {
        "sha": "430f08346ed7e8f373786542d412ddf105299aa0",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0a9151e0bceba9aab8b634a9a583265902480d8/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0a9151e0bceba9aab8b634a9a583265902480d8/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=f0a9151e0bceba9aab8b634a9a583265902480d8",
        "patch": "@@ -45,6 +45,13 @@ def assert_fee_amount(fee, tx_size, feerate_BTC_kvB):\n         raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n \n \n+def assert_fee_enough(fee, tx_size, feerate_BTC_kvB):\n+    \"\"\"Assert the fee meets the feerate\"\"\"\n+    target_fee = get_fee(tx_size, feerate_BTC_kvB)\n+    if fee < target_fee:\n+        raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n+\n+\n def assert_equal(thing1, thing2, *args):\n     if thing1 != thing2 or any(thing1 != arg for arg in args):\n         raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))"
      },
      {
        "sha": "8a11f4e6928d008c2c54b2c1084ce4365c8edab6",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0a9151e0bceba9aab8b634a9a583265902480d8/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0a9151e0bceba9aab8b634a9a583265902480d8/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=f0a9151e0bceba9aab8b634a9a583265902480d8",
        "patch": "@@ -8,7 +8,7 @@\n \n from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, assert_fee_enough\n from test_framework.descriptors import descsum_create\n from test_framework.script import (CScript, OP_CHECKSIG, taproot_construct)\n from test_framework.segwit_addr import encode_segwit_address\n@@ -275,7 +275,9 @@ def do_test_sendtoaddress(self, comment, pattern, privmap, treefn, keys_pay, key\n             self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress(), sync_fun=self.no_op)\n             test_balance = int(self.rpc_online.getbalance() * 100000000)\n             ret_amnt = random.randrange(100000, test_balance)\n-            res = self.rpc_online.sendtoaddress(address=self.boring.getnewaddress(), amount=Decimal(ret_amnt) / 100000000, subtractfeefromamount=True)\n+            res = self.rpc_online.sendtoaddress(address=self.boring.getnewaddress(), amount=Decimal(ret_amnt) / 100000000, subtractfeefromamount=True, fee_rate=10)\n+            txinfo = self.rpc_online.gettransaction(txid=res, verbose=True)\n+            assert_fee_enough(-txinfo[\"fee\"], txinfo[\"decoded\"][\"vsize\"], Decimal(0.00010000))\n             self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress(), sync_fun=self.no_op)\n             assert(self.rpc_online.gettransaction(res)[\"confirmations\"] > 0)\n \n@@ -306,11 +308,13 @@ def do_test_psbt(self, comment, pattern, privmap, treefn, keys_pay, keys_change)\n             self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress(), sync_fun=self.no_op)\n             test_balance = int(self.psbt_online.getbalance() * 100000000)\n             ret_amnt = random.randrange(100000, test_balance)\n-            psbt = self.psbt_online.walletcreatefundedpsbt([], [{self.boring.getnewaddress(): Decimal(ret_amnt) / 100000000}], None, {\"subtractFeeFromOutputs\":[0]})['psbt']\n+            psbt = self.psbt_online.walletcreatefundedpsbt([], [{self.boring.getnewaddress(): Decimal(ret_amnt) / 100000000}], None, {\"subtractFeeFromOutputs\":[0], \"fee_rate\": 10})['psbt']\n             res = self.psbt_offline.walletprocesspsbt(psbt)\n             assert(res['complete'])\n             rawtx = self.nodes[0].finalizepsbt(res['psbt'])['hex']\n             txid = self.nodes[0].sendrawtransaction(rawtx)\n+            txinfo = self.psbt_online.gettransaction(txid=txid, verbose=True)\n+            assert_fee_enough(-txinfo[\"fee\"], txinfo[\"decoded\"][\"vsize\"], Decimal(0.00010000))\n             self.generatetoaddress(self.nodes[0], 1, self.boring.getnewaddress(), sync_fun=self.no_op)\n             assert(self.psbt_online.gettransaction(txid)['confirmations'] > 0)\n "
      }
    ]
  }
]