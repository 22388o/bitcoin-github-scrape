[
  {
    "sha": "b456adae6e73185ea67501a6b089742f6d7fa9c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDU2YWRhZTZlNzMxODVlYTY3NTAxYTZiMDg5NzQyZjZkN2ZhOWM1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-22T21:41:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-11-05T14:55:52Z"
      },
      "message": "doc: list support for BIP 339 in doc/bips.md",
      "tree": {
        "sha": "022b43b5f6ab7c4cdb3c093f20bdf6e3a9277db4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/022b43b5f6ab7c4cdb3c093f20bdf6e3a9277db4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b456adae6e73185ea67501a6b089742f6d7fa9c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b456adae6e73185ea67501a6b089742f6d7fa9c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b456adae6e73185ea67501a6b089742f6d7fa9c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b456adae6e73185ea67501a6b089742f6d7fa9c5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a339289c2ef9caffa1195436695a13f6e48e1bbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a339289c2ef9caffa1195436695a13f6e48e1bbc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a339289c2ef9caffa1195436695a13f6e48e1bbc"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1c745b30e9b67308156809778a22abaac6ffb76c",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b456adae6e73185ea67501a6b089742f6d7fa9c5/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b456adae6e73185ea67501a6b089742f6d7fa9c5/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=b456adae6e73185ea67501a6b089742f6d7fa9c5",
        "patch": "@@ -1,4 +1,4 @@\n-BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.19.0**):\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.20.2**):\n \n * [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))\n * [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n@@ -42,3 +42,4 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.19.0**):\n * [`BIP 173`](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki): Bech32 addresses for native Segregated Witness outputs are supported as of **v0.16.0** ([PR 11167](https://github.com/bitcoin/bitcoin/pull/11167)). Bech32 addresses are generated by default as of **v0.20.0** ([PR 16884](https://github.com/bitcoin/bitcoin/pull/16884)).\n * [`BIP 174`](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki): RPCs to operate on Partially Signed Bitcoin Transactions (PSBT) are present as of **v0.17.0** ([PR 13557](https://github.com/bitcoin/bitcoin/pull/13557)).\n * [`BIP 176`](https://github.com/bitcoin/bips/blob/master/bip-0176.mediawiki): Bits Denomination [QT only] is supported as of **v0.16.0** ([PR 12035](https://github.com/bitcoin/bitcoin/pull/12035)).\n+* [`BIP 339`](https://github.com/bitcoin/bips/blob/master/bip-0339.mediawiki): Relay of transactions by wtxid is supported as of **v0.20.2** ([PR 18044](https://github.com/bitcoin/bitcoin/pull/18044))."
      }
    ]
  },
  {
    "sha": "71017eefca5ce5f85bf3a5afd9fc81302e31c340",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTAxN2VlZmNhNWNlNWY4NWJmM2E1YWZkOWZjODEzMDJlMzFjMzQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-23T00:17:00Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-11-05T14:55:55Z"
      },
      "message": "refactor: add GenTxid (=txid or wtxid) type and use it for tx request logic",
      "tree": {
        "sha": "e57e057ffbf6b9f2e2ebbff05bb81fc4994dad5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e57e057ffbf6b9f2e2ebbff05bb81fc4994dad5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71017eefca5ce5f85bf3a5afd9fc81302e31c340",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71017eefca5ce5f85bf3a5afd9fc81302e31c340",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71017eefca5ce5f85bf3a5afd9fc81302e31c340",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71017eefca5ce5f85bf3a5afd9fc81302e31c340/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b456adae6e73185ea67501a6b089742f6d7fa9c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b456adae6e73185ea67501a6b089742f6d7fa9c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b456adae6e73185ea67501a6b089742f6d7fa9c5"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 42,
      "deletions": 17
    },
    "files": [
      {
        "sha": "27c422ae2e092325457bf06a473eeee6ebafa945",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71017eefca5ce5f85bf3a5afd9fc81302e31c340/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71017eefca5ce5f85bf3a5afd9fc81302e31c340/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=71017eefca5ce5f85bf3a5afd9fc81302e31c340",
        "patch": "@@ -356,7 +356,7 @@ struct CNodeState {\n         /* Track when to attempt download of announced transactions (process\n          * time in micros -> txid)\n          */\n-        std::multimap<std::chrono::microseconds, uint256> m_tx_process_time;\n+        std::multimap<std::chrono::microseconds, GenTxid> m_tx_process_time;\n \n         //! Store all the transactions a peer has recently announced\n         std::set<uint256> m_tx_announced;\n@@ -751,23 +751,23 @@ std::chrono::microseconds CalculateTxGetDataTime(const uint256& txid, std::chron\n     return process_time;\n }\n \n-void RequestTx(CNodeState* state, const uint256& txid, std::chrono::microseconds current_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void RequestTx(CNodeState* state, const GenTxid& gtxid, std::chrono::microseconds current_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CNodeState::TxDownloadState& peer_download_state = state->m_tx_download;\n     if (peer_download_state.m_tx_announced.size() >= MAX_PEER_TX_ANNOUNCEMENTS ||\n             peer_download_state.m_tx_process_time.size() >= MAX_PEER_TX_ANNOUNCEMENTS ||\n-            peer_download_state.m_tx_announced.count(txid)) {\n+            peer_download_state.m_tx_announced.count(gtxid.GetHash())) {\n         // Too many queued announcements from this peer, or we already have\n         // this announcement\n         return;\n     }\n-    peer_download_state.m_tx_announced.insert(txid);\n+    peer_download_state.m_tx_announced.insert(gtxid.GetHash());\n \n     // Calculate the time to try requesting this transaction. Use\n     // fPreferredDownload as a proxy for outbound peers.\n-    const auto process_time = CalculateTxGetDataTime(txid, current_time, !state->fPreferredDownload, !state->m_wtxid_relay && g_wtxid_relay_peers > 0);\n+    const auto process_time = CalculateTxGetDataTime(gtxid.GetHash(), current_time, !state->fPreferredDownload, !state->m_wtxid_relay && g_wtxid_relay_peers > 0);\n \n-    peer_download_state.m_tx_process_time.emplace(process_time, txid);\n+    peer_download_state.m_tx_process_time.emplace(process_time, gtxid);\n }\n \n } // namespace\n@@ -2389,7 +2389,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n                     pfrom->fDisconnect = true;\n                     return true;\n                 } else if (!fAlreadyHave && !fImporting && !fReindex && !::ChainstateActive().IsInitialBlockDownload()) {\n-                    RequestTx(State(pfrom->GetId()), inv.hash, current_time);\n+                    RequestTx(State(pfrom->GetId()), ToGenTxid(inv), current_time);\n                 }\n             }\n         }\n@@ -2705,7 +2705,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n                         // protocol for getting all unconfirmed parents.\n                         CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n                         pfrom->AddKnownTx(txin.prevout.hash);\n-                        if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom->GetId()), _inv.hash, current_time);\n+                        if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom->GetId()), ToGenTxid(_inv), current_time);\n                     }\n                 }\n                 AddOrphanTx(ptx, pfrom->GetId());\n@@ -4217,24 +4217,24 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n         auto& tx_process_time = state.m_tx_download.m_tx_process_time;\n         while (!tx_process_time.empty() && tx_process_time.begin()->first <= current_time && state.m_tx_download.m_tx_in_flight.size() < MAX_PEER_TX_IN_FLIGHT) {\n-            const uint256 txid = tx_process_time.begin()->second;\n+            const GenTxid gtxid = tx_process_time.begin()->second;\n             // Erase this entry from tx_process_time (it may be added back for\n             // processing at a later time, see below)\n             tx_process_time.erase(tx_process_time.begin());\n-            CInv inv(state.m_wtxid_relay ? MSG_WTX : (MSG_TX | GetFetchFlags(pto)), txid);\n+            CInv inv(gtxid.IsWtxid() ? MSG_WTX : (MSG_TX | GetFetchFlags(pto)), gtxid.GetHash());\n             if (!AlreadyHave(inv, m_mempool)) {\n                 // If this transaction was last requested more than 1 minute ago,\n                 // then request.\n-                const auto last_request_time = GetTxRequestTime(inv.hash);\n+                const auto last_request_time = GetTxRequestTime(gtxid.GetHash());\n                 if (last_request_time <= current_time - GETDATA_TX_INTERVAL) {\n                     LogPrint(BCLog::NET, \"Requesting %s peer=%d\\n\", inv.ToString(), pto->GetId());\n                     vGetData.push_back(inv);\n                     if (vGetData.size() >= MAX_GETDATA_SZ) {\n                         connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n                         vGetData.clear();\n                     }\n-                    UpdateTxRequestTime(inv.hash, current_time);\n-                    state.m_tx_download.m_tx_in_flight.emplace(inv.hash, current_time);\n+                    UpdateTxRequestTime(gtxid.GetHash(), current_time);\n+                    state.m_tx_download.m_tx_in_flight.emplace(gtxid.GetHash(), current_time);\n                 } else {\n                     // This transaction is in flight from someone else; queue\n                     // up processing to happen after the download times out\n@@ -4248,13 +4248,13 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     // would open us up to an attacker using inbound\n                     // wtxid-relay to prevent us from requesting transactions\n                     // from outbound txid-relay peers).\n-                    const auto next_process_time = CalculateTxGetDataTime(txid, current_time, !state.fPreferredDownload, false);\n-                    tx_process_time.emplace(next_process_time, txid);\n+                    const auto next_process_time = CalculateTxGetDataTime(gtxid.GetHash(), current_time, !state.fPreferredDownload, false);\n+                    tx_process_time.emplace(next_process_time, gtxid);\n                 }\n             } else {\n                 // We have already seen this transaction, no need to download.\n-                state.m_tx_download.m_tx_announced.erase(inv.hash);\n-                state.m_tx_download.m_tx_in_flight.erase(inv.hash);\n+                state.m_tx_download.m_tx_announced.erase(gtxid.GetHash());\n+                state.m_tx_download.m_tx_in_flight.erase(gtxid.GetHash());\n             }\n         }\n "
      },
      {
        "sha": "595c7364d1f1171df5fb08d16ac96dcc2c19e606",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71017eefca5ce5f85bf3a5afd9fc81302e31c340/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71017eefca5ce5f85bf3a5afd9fc81302e31c340/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=71017eefca5ce5f85bf3a5afd9fc81302e31c340",
        "patch": "@@ -12,6 +12,8 @@\n #include <serialize.h>\n #include <uint256.h>\n \n+#include <tuple>\n+\n static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n \n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n@@ -409,4 +411,17 @@ typedef std::shared_ptr<const CTransaction> CTransactionRef;\n static inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }\n template <typename Tx> static inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }\n \n+/** A generic txid reference (txid or wtxid). */\n+class GenTxid\n+{\n+    const bool m_is_wtxid;\n+    const uint256 m_hash;\n+public:\n+    GenTxid(bool is_wtxid, const uint256& hash) : m_is_wtxid(is_wtxid), m_hash(hash) {}\n+    bool IsWtxid() const { return m_is_wtxid; }\n+    const uint256& GetHash() const { return m_hash; }\n+    friend bool operator==(const GenTxid& a, const GenTxid& b) { return a.m_is_wtxid == b.m_is_wtxid && a.m_hash == b.m_hash; }\n+    friend bool operator<(const GenTxid& a, const GenTxid& b) { return std::tie(a.m_is_wtxid, a.m_hash) < std::tie(b.m_is_wtxid, b.m_hash); }\n+};\n+\n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "cc44996ec39592764d02107b6c1e4f67edd4d315",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71017eefca5ce5f85bf3a5afd9fc81302e31c340/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71017eefca5ce5f85bf3a5afd9fc81302e31c340/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=71017eefca5ce5f85bf3a5afd9fc81302e31c340",
        "patch": "@@ -208,3 +208,9 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+GenTxid ToGenTxid(const CInv& inv)\n+{\n+    assert(inv.type == MSG_TX || inv.type == MSG_WITNESS_TX || inv.type == MSG_WTX);\n+    return {inv.type == MSG_WTX, inv.hash};\n+}"
      },
      {
        "sha": "4030fe98266960a1c562e2efb95a37c3e00073e9",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71017eefca5ce5f85bf3a5afd9fc81302e31c340/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71017eefca5ce5f85bf3a5afd9fc81302e31c340/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=71017eefca5ce5f85bf3a5afd9fc81302e31c340",
        "patch": "@@ -11,6 +11,7 @@\n #define BITCOIN_PROTOCOL_H\n \n #include <netaddress.h>\n+#include <primitives/transaction.h>\n #include <serialize.h>\n #include <uint256.h>\n #include <version.h>\n@@ -407,4 +408,7 @@ class CInv\n     uint256 hash;\n };\n \n+/** Convert a TX/WITNESS_TX/WTX CInv to a GenTxid. */\n+GenTxid ToGenTxid(const CInv& inv);\n+\n #endif // BITCOIN_PROTOCOL_H"
      }
    ]
  },
  {
    "sha": "fefafe39379120e2c047d1ab90bab27af9c72e70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWZhZmUzOTM3OTEyMGUyYzA0N2QxYWI5MGJhYjI3YWY5YzcyZTcw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-23T00:19:43Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-11-05T14:55:59Z"
      },
      "message": "p2p: enable fetching of orphans from wtxid peers\n\nBased on a commit by Anthony Towns.",
      "tree": {
        "sha": "e910c07ca236a00e75e61c07ec8d9ff2e78b8e7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e910c07ca236a00e75e61c07ec8d9ff2e78b8e7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fefafe39379120e2c047d1ab90bab27af9c72e70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fefafe39379120e2c047d1ab90bab27af9c72e70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fefafe39379120e2c047d1ab90bab27af9c72e70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fefafe39379120e2c047d1ab90bab27af9c72e70/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71017eefca5ce5f85bf3a5afd9fc81302e31c340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71017eefca5ce5f85bf3a5afd9fc81302e31c340",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71017eefca5ce5f85bf3a5afd9fc81302e31c340"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 17,
      "deletions": 15
    },
    "files": [
      {
        "sha": "f1fecb7876fd0afe1d11c73b6cdfa4ee5b718c6a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fefafe39379120e2c047d1ab90bab27af9c72e70/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fefafe39379120e2c047d1ab90bab27af9c72e70/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fefafe39379120e2c047d1ab90bab27af9c72e70",
        "patch": "@@ -2358,7 +2358,9 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             if (interruptMsgProc)\n                 return true;\n \n-            // ignore INVs that don't match wtxidrelay setting\n+            // Ignore INVs that don't match wtxidrelay setting.\n+            // Note that orphan parent fetching always uses MSG_TX GETDATAs regardless of the wtxidrelay setting.\n+            // This is fine as no INV messages are involved in that process.\n             if (State(pfrom->GetId())->m_wtxid_relay) {\n                 if (inv.type == MSG_TX) continue;\n             } else {\n@@ -2642,9 +2644,11 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n \n         TxValidationState state;\n \n-        nodestate->m_tx_download.m_tx_announced.erase(hash);\n-        nodestate->m_tx_download.m_tx_in_flight.erase(hash);\n-        EraseTxRequest(hash);\n+        for (uint256 hash : {txid, wtxid}) {\n+            nodestate->m_tx_download.m_tx_announced.erase(hash);\n+            nodestate->m_tx_download.m_tx_in_flight.erase(hash);\n+            EraseTxRequest(hash);\n+        }\n \n         std::list<CTransactionRef> lRemovedTxn;\n \n@@ -2696,17 +2700,15 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n                 uint32_t nFetchFlags = GetFetchFlags(pfrom);\n                 const auto current_time = GetTime<std::chrono::microseconds>();\n \n-                if (!State(pfrom->GetId())->m_wtxid_relay) {\n-                    for (const CTxIn& txin : tx.vin) {\n-                        // Here, we only have the txid (and not wtxid) of the\n-                        // inputs, so we only request parents from\n-                        // non-wtxid-relay peers.\n-                        // Eventually we should replace this with an improved\n-                        // protocol for getting all unconfirmed parents.\n-                        CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n-                        pfrom->AddKnownTx(txin.prevout.hash);\n-                        if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom->GetId()), ToGenTxid(_inv), current_time);\n-                    }\n+                for (const CTxIn& txin : tx.vin) {\n+                    // Here, we only have the txid (and not wtxid) of the\n+                    // inputs, so we only request in txid mode, even for\n+                    // wtxidrelay peers.\n+                    // Eventually we should replace this with an improved\n+                    // protocol for getting all unconfirmed parents.\n+                    CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n+                    pfrom->AddKnownTx(txin.prevout.hash);\n+                    if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom->GetId()), ToGenTxid(_inv), current_time);\n                 }\n                 AddOrphanTx(ptx, pfrom->GetId());\n "
      }
    ]
  },
  {
    "sha": "f160607c7223fc34f160ff3a1d8b40e470af37a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTYwNjA3YzcyMjNmYzM0ZjE2MGZmM2ExZDhiNDBlNDcwYWYzN2E4",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-07-07T08:11:19Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-11-05T14:56:02Z"
      },
      "message": "test: request parents of orphan from wtxid relay peer",
      "tree": {
        "sha": "26875c119f9b3a083b94ef9e3d06ee7d77312fa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26875c119f9b3a083b94ef9e3d06ee7d77312fa1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f160607c7223fc34f160ff3a1d8b40e470af37a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f160607c7223fc34f160ff3a1d8b40e470af37a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f160607c7223fc34f160ff3a1d8b40e470af37a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f160607c7223fc34f160ff3a1d8b40e470af37a8/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fefafe39379120e2c047d1ab90bab27af9c72e70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fefafe39379120e2c047d1ab90bab27af9c72e70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fefafe39379120e2c047d1ab90bab27af9c72e70"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4da0fe597dae033255c1d4bf767e7913ce8e52b3",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f160607c7223fc34f160ff3a1d8b40e470af37a8/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f160607c7223fc34f160ff3a1d8b40e470af37a8/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=f160607c7223fc34f160ff3a1d8b40e470af37a8",
        "patch": "@@ -2138,17 +2138,17 @@ def received_wtxidrelay():\n \n         # Send tx2 through; it's an orphan so won't be accepted\n         with mininode_lock:\n-            self.tx_node.last_message.pop(\"getdata\", None)\n-        test_transaction_acceptance(self.nodes[0], self.tx_node, tx2, with_witness=True, accepted=False)\n+            self.wtx_node.last_message.pop(\"getdata\", None)\n+        test_transaction_acceptance(self.nodes[0], self.wtx_node, tx2, with_witness=True, accepted=False)\n \n-        # Expect a request for parent (tx) due to use of non-WTX peer\n-        self.tx_node.wait_for_getdata(60)\n+        # Expect a request for parent (tx) by txid despite use of WTX peer\n+        self.wtx_node.wait_for_getdata(60)\n         with mininode_lock:\n-            lgd = self.tx_node.lastgetdata[:]\n+            lgd = self.wtx_node.lastgetdata[:]\n         assert_equal(lgd, [CInv(MSG_TX | MSG_WITNESS_FLAG, tx.sha256)])\n \n         # Send tx through\n-        test_transaction_acceptance(self.nodes[0], self.tx_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.wtx_node, tx, with_witness=False, accepted=True)\n \n         # Check tx2 is there now\n         assert_equal(tx2.hash in self.nodes[0].getrawmempool(), True)"
      }
    ]
  },
  {
    "sha": "961b02dd7564bcce953588a2a964fce419b5c8da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjFiMDJkZDc1NjRiY2NlOTUzNTg4YTJhOTY0ZmNlNDE5YjVjOGRh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-21T14:10:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-11-05T15:26:25Z"
      },
      "message": "[net processing] ensure inv is a tx type before ToGenTxid in inv processing\n\nOtherwise log that an unknown inv type was received.\n\nIn inv processing, when handling transaction type inv messages,\nToGenTxid() expects that we constructed the CInv ourselves or that we\nverified that it is for a transaction type CInv.\n\nTherefore, change this 'else' branch into an 'else if tx in inv type' to\nmake this safer and log any inv that fall through.",
      "tree": {
        "sha": "c9ca80b1de51de8c70209234f1bfc66b1e6129b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9ca80b1de51de8c70209234f1bfc66b1e6129b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/961b02dd7564bcce953588a2a964fce419b5c8da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/961b02dd7564bcce953588a2a964fce419b5c8da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/961b02dd7564bcce953588a2a964fce419b5c8da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/961b02dd7564bcce953588a2a964fce419b5c8da/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f160607c7223fc34f160ff3a1d8b40e470af37a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f160607c7223fc34f160ff3a1d8b40e470af37a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f160607c7223fc34f160ff3a1d8b40e470af37a8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "86056b53750ca6061cb78b67b9f4d6d6a6dc6b7b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/961b02dd7564bcce953588a2a964fce419b5c8da/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/961b02dd7564bcce953588a2a964fce419b5c8da/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=961b02dd7564bcce953588a2a964fce419b5c8da",
        "patch": "@@ -2384,7 +2384,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n                     // then fetch the blocks we need to catch up.\n                     best_block = &inv.hash;\n                 }\n-            } else {\n+            } else if (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX || inv.type == MSG_WTX) {\n                 pfrom->AddKnownTx(inv.hash);\n                 if (fBlocksOnly) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol, disconnecting peer=%d\\n\", inv.hash.ToString(), pfrom->GetId());\n@@ -2393,6 +2393,8 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n                 } else if (!fAlreadyHave && !fImporting && !fReindex && !::ChainstateActive().IsInitialBlockDownload()) {\n                     RequestTx(State(pfrom->GetId()), ToGenTxid(inv), current_time);\n                 }\n+            } else {\n+                LogPrint(BCLog::NET, \"Unknown inv type \\\"%s\\\" received from peer=%d\\n\", inv.ToString(), pfrom->GetId());\n             }\n         }\n "
      }
    ]
  }
]