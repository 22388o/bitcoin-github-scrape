[
  {
    "sha": "b5baeaf1e0b38dd68892f6559d1f20a13c6ca024",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWJhZWFmMWUwYjM4ZGQ2ODg5MmY2NTU5ZDFmMjBhMTNjNmNhMDI0",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-01T04:24:34Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-12-02T03:52:31Z"
      },
      "message": "Detect double spends, and fire a DetectedDoubleSpend signal\n\nDetects two double-spend conditions:\n1) Receive a transaction that conflicts with a mempool transaction\n2) New block contains a transaction that conflicts with a mempool transaction\n\n... and fires a new signal. Future commits will use this signal handler\nto note the double-spend attempt if the transactions are in our wallet,\nand will relay first double-spends.",
      "tree": {
        "sha": "cdcbf2aad8d4c6da7078297c576f6d9bcb19507a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdcbf2aad8d4c6da7078297c576f6d9bcb19507a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49dc3a0f1aed095d9d42d574dfe585cb15b8fa8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49dc3a0f1aed095d9d42d574dfe585cb15b8fa8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49dc3a0f1aed095d9d42d574dfe585cb15b8fa8d"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 23,
      "deletions": 5
    },
    "files": [
      {
        "sha": "10b530a4a64917d6d53ee7992a86dfc15ac41960",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b5baeaf1e0b38dd68892f6559d1f20a13c6ca024",
        "patch": "@@ -110,6 +110,12 @@ struct CMainSignals {\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     // Tells listeners to broadcast their data.\n     boost::signals2::signal<void ()> Broadcast;\n+    // Notifies listeners of detection of a double-spent transaction. Arguments are outpoint that is\n+    // double-spent, first transaction seen, double-spend transaction, and whether the second double-spend\n+    // transaction was first seen in a block.\n+    // Note: only notifies if the previous transaction is in the memory pool; if previous transction was in a block,\n+    // then the double-spend simply fails when we try to lookup the inputs in the current UTXO set.\n+    boost::signals2::signal<void (const COutPoint&, const CTransaction&, const CTransaction&, bool)> DetectedDoubleSpend;\n } g_signals;\n }\n \n@@ -652,6 +658,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         COutPoint outpoint = tx.vin[i].prevout;\n         if (pool.mapNextTx.count(outpoint))\n         {\n+            g_signals.DetectedDoubleSpend(outpoint, *pool.mapNextTx[outpoint].ptx, tx, false);\n+\n             // Disable replacement feature for now\n             return false;\n         }\n@@ -1784,7 +1792,10 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     // Delete redundant memory transactions that are in the connected branch\n     BOOST_FOREACH(CTransaction& tx, vDelete) {\n         mempool.remove(tx);\n-        mempool.removeConflicts(tx);\n+        map<COutPoint, CTransaction> vConflicts = mempool.removeConflicts(tx);\n+        BOOST_FOREACH(const PAIRTYPE(COutPoint, CTransaction)& conflict, vConflicts) {\n+            g_signals.DetectedDoubleSpend(conflict.first, tx, conflict.second, true);\n+        }\n     }\n \n     mempool.check(pcoinsTip);"
      },
      {
        "sha": "16d773b3026dc919ec745b911af90ca29b97aaac",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b5baeaf1e0b38dd68892f6559d1f20a13c6ca024",
        "patch": "@@ -110,19 +110,26 @@ bool CTxMemPool::remove(const CTransaction &tx, bool fRecursive)\n     return true;\n }\n \n-bool CTxMemPool::removeConflicts(const CTransaction &tx)\n+//\n+// Remove transactions in the memory pool that conflict with tx\n+// Returns map containing the conflicts (empty map if there were no conflicts)\n+//\n+std::map<COutPoint, CTransaction> CTxMemPool::removeConflicts(const CTransaction &tx)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n+    std::map<COutPoint, CTransaction> mConflicts;\n     LOCK(cs);\n     BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n         std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);\n         if (it != mapNextTx.end()) {\n             const CTransaction &txConflict = *it->second.ptx;\n-            if (txConflict != tx)\n+            if (txConflict != tx) {\n+                mConflicts[it->first] = txConflict;\n                 remove(txConflict, true);\n+            }\n         }\n     }\n-    return true;\n+    return mConflicts;\n }\n \n void CTxMemPool::clear()"
      },
      {
        "sha": "8f8bea211eecbd59dcb507d770c5f08e73076eaa",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=b5baeaf1e0b38dd68892f6559d1f20a13c6ca024",
        "patch": "@@ -73,7 +73,7 @@ class CTxMemPool\n \n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);\n     bool remove(const CTransaction &tx, bool fRecursive = false);\n-    bool removeConflicts(const CTransaction &tx);\n+    std::map<COutPoint, CTransaction> removeConflicts(const CTransaction &tx);\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);"
      }
    ]
  },
  {
    "sha": "ec7e5a8818b53088708bc6318c769796d1c6421f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzdlNWE4ODE4YjUzMDg4NzA4YmM2MzE4Yzc2OTc5NmQxYzY0MjFm",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-01T04:12:28Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-12-02T03:52:31Z"
      },
      "message": "CBloomFilter::clear() method",
      "tree": {
        "sha": "3a2e4793a21b56f772036330552b17989d90110f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a2e4793a21b56f772036330552b17989d90110f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec7e5a8818b53088708bc6318c769796d1c6421f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec7e5a8818b53088708bc6318c769796d1c6421f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec7e5a8818b53088708bc6318c769796d1c6421f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec7e5a8818b53088708bc6318c769796d1c6421f/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5baeaf1e0b38dd68892f6559d1f20a13c6ca024",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5baeaf1e0b38dd68892f6559d1f20a13c6ca024"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4d472a9210c8d9dd4f9626546fea0f20c6db085c",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec7e5a8818b53088708bc6318c769796d1c6421f/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec7e5a8818b53088708bc6318c769796d1c6421f/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=ec7e5a8818b53088708bc6318c769796d1c6421f",
        "patch": "@@ -96,6 +96,13 @@ bool CBloomFilter::contains(const uint256& hash) const\n     return contains(data);\n }\n \n+void CBloomFilter::clear()\n+{\n+    vData.clear();\n+    isFull = false;\n+    isEmpty = true;\n+}\n+\n bool CBloomFilter::IsWithinSizeConstraints() const\n {\n     return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;"
      },
      {
        "sha": "d362aa3abebe938dedd5258ffa4a8b7340ebb260",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec7e5a8818b53088708bc6318c769796d1c6421f/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec7e5a8818b53088708bc6318c769796d1c6421f/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=ec7e5a8818b53088708bc6318c769796d1c6421f",
        "patch": "@@ -78,6 +78,8 @@ class CBloomFilter\n     bool contains(const COutPoint& outpoint) const;\n     bool contains(const uint256& hash) const;\n \n+    void clear();\n+\n     // True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n     // (catch a filter which was just deserialized which was too big)\n     bool IsWithinSizeConstraints() const;"
      },
      {
        "sha": "b008bc82c7a008bc693a9ec259a0df46e3cafdac",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec7e5a8818b53088708bc6318c769796d1c6421f/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec7e5a8818b53088708bc6318c769796d1c6421f/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=ec7e5a8818b53088708bc6318c769796d1c6421f",
        "patch": "@@ -41,6 +41,10 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n         expected[i] = (char)vch[i];\n \n     BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());\n+\n+    BOOST_CHECK_MESSAGE( filter.contains(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter doesn't contain just-inserted object!\");\n+    filter.clear();\n+    BOOST_CHECK_MESSAGE( !filter.contains(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter should be empty!\");\n }\n \n BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)"
      }
    ]
  },
  {
    "sha": "9344275de4207864678b1ebae526447eaee9bfc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzQ0Mjc1ZGU0MjA3ODY0Njc4YjFlYmFlNTI2NDQ3ZWFlZTliZmMy",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-01T10:58:38Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-12-02T03:52:31Z"
      },
      "message": "Relay first-double-spend transactions\n\nInstead of dropping double-spent transactions, relay them to peers.\nWhy? To make it easier for merchants to quickly detect attempted\nfraud for low-value, in-person purchases.\n\nA bloom filter is used so that only the first double-spend is\nrelayed, to prevent an attacker from mounting a network\ndenial-of-service attack by flooding it with double-spends of\na transaction output they control.",
      "tree": {
        "sha": "2851d61017d3fd0064aedd1952a2c4948430a656",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2851d61017d3fd0064aedd1952a2c4948430a656"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9344275de4207864678b1ebae526447eaee9bfc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9344275de4207864678b1ebae526447eaee9bfc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9344275de4207864678b1ebae526447eaee9bfc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9344275de4207864678b1ebae526447eaee9bfc2/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec7e5a8818b53088708bc6318c769796d1c6421f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec7e5a8818b53088708bc6318c769796d1c6421f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec7e5a8818b53088708bc6318c769796d1c6421f"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 44,
      "deletions": 0
    },
    "files": [
      {
        "sha": "90641713382ec1376db1b5308acba4b1317a72f8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9344275de4207864678b1ebae526447eaee9bfc2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9344275de4207864678b1ebae526447eaee9bfc2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9344275de4207864678b1ebae526447eaee9bfc2",
        "patch": "@@ -1041,6 +1041,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n     LogPrintf(\"mapWallet.size() = %\"PRIszu\"\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n     LogPrintf(\"mapAddressBook.size() = %\"PRIszu\"\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n \n+    RegisterInternalSignals();\n     StartNode(threadGroup);\n \n     // InitRPCMining is needed here so getwork/getblocktemplate in the GUI debug console works properly."
      },
      {
        "sha": "b7420b04ab135058c26421fee94377e4ba4c889f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9344275de4207864678b1ebae526447eaee9bfc2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9344275de4207864678b1ebae526447eaee9bfc2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9344275de4207864678b1ebae526447eaee9bfc2",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"addrman.h\"\n #include \"alert.h\"\n+#include \"bloom.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n@@ -89,6 +90,10 @@ CBlockFileInfo infoLastBlockFile;\n int nLastBlockFile = 0;\n }\n \n+// Forward reference functions defined here:\n+static const unsigned int MAX_DOUBLESPEND_BLOOM = 1000;\n+static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter);\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // dispatching functions\n@@ -119,6 +124,15 @@ struct CMainSignals {\n } g_signals;\n }\n \n+void RegisterInternalSignals() {\n+    static CBloomFilter doubleSpendFilter;\n+    seed_insecure_rand();\n+    doubleSpendFilter = CBloomFilter(MAX_DOUBLESPEND_BLOOM, 0.01, insecure_rand(), BLOOM_UPDATE_NONE);\n+\n+    g_signals.DetectedDoubleSpend.connect(boost::bind(RelayDoubleSpend, _1, _3, _4, doubleSpendFilter));\n+}\n+\n+\n void RegisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n     g_signals.EraseTransaction.connect(boost::bind(&CWalletInterface::EraseFromWallet, pwalletIn, _1));\n@@ -769,6 +783,32 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return true;\n }\n \n+static void\n+RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n+{\n+    // Relaying double-spend attempts to our peers lets them detect when\n+    // somebody might be trying to cheat them. However, blindly relaying\n+    // every double-spend across the entire network gives attackers\n+    // a denial-of-service attack: just generate a stream of double-spends\n+    // re-spending the same (limited) set of outpoints owned by the attacker.\n+    // So, we use a bloom filter and only relay (at most) the first double\n+    // spend for each outpoint. False-positives (\"we have already relayed\")\n+    // are OK, because if the peer doesn't hear about the double-spend\n+    // from us they are very likely to hear about it from another peer, since\n+    // each peer uses a different, randomized bloom filter.\n+\n+    if (fInBlock || filter.contains(outPoint)) return;\n+\n+    // Clear the filter on average every MAX_DOUBLE_SPEND_BLOOM\n+    // insertions\n+    if (insecure_rand()%MAX_DOUBLESPEND_BLOOM == 0)\n+        filter.clear();\n+\n+    filter.insert(outPoint);\n+\n+    RelayTransaction(doubleSpend, doubleSpend.GetHash());\n+}\n+\n \n int CMerkleTx::GetDepthInMainChain(CBlockIndex* &pindexRet) const\n {"
      },
      {
        "sha": "c1353304a42823fc3f1b52d9d02bf5e289b787d7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9344275de4207864678b1ebae526447eaee9bfc2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9344275de4207864678b1ebae526447eaee9bfc2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9344275de4207864678b1ebae526447eaee9bfc2",
        "patch": "@@ -113,6 +113,9 @@ class CWalletInterface;\n \n struct CBlockTemplate;\n \n+/** Set up internal signal handlers **/\n+void RegisterInternalSignals();\n+\n /** Register a wallet to receive updates from core */\n void RegisterWallet(CWalletInterface* pwalletIn);\n /** Unregister a wallet from core */"
      }
    ]
  }
]