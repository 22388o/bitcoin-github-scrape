laanwj,2018-05-09T13:18:53Z,"Looks like these whole chains of functions are unused after this, except in the merkle tests:\n```\nBlockMerkleBranch → ComputeMerkleBranch → MerkleComputation\nComputeMerkleRootFromBranch\n```\nMight want to move some functions there.",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-387735499,387735499,
theuni,2018-05-09T19:54:05Z,"Concept ACK!\n\n@sipa Please see the build-system comments on #13203, I didn't realize this was a different PR. I'll follow-up here for non-power changes.",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-387855935,387855935,
Kick1986,2018-05-10T06:35:15Z,"Great job! \nAny plans to add support for AVX512?\n\nI know there are not so many people with AVX512 CPU's but why not add it from now? \n\nAll Intel CPU's will have support for AVX512 in coming months (mainstream + server). \n\n\n",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-387965819,387965819,
Kick1986,2018-05-10T06:36:28Z,"Some benchmarks numbers about AVX512 in the article below! \n\nhttps://hk.saowen.com/a/218fa211f2b705dc6ebc2691a2b21743ce7cd95585c781d181b3809352bffbe3\n\nhttps://github.com/intel/intel-ipsec-mb/blob/master/README\n",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-387966010,387966010,
laanwj,2018-05-10T06:58:37Z,"> I know there are not so many people with AVX512 CPU's but why not add it from now?\n\nThat is not how open source development works. A PR is for reviewing the code. Future improvements can be done in future PRs. For example @TheBlueMatt adds support for POWER8 instructions in #13203. I might add ARM intrinsics support at some point.",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-387969899,387969899,
sipa,2018-05-11T19:46:03Z,"@laanwj The algorithm in `MerkleComputation` is actually potentially more efficient (better memory locality) than the one in `ComputeMerkleRoot` now, apart from the fact that it doesn't take advantage of multi-way hashing. I'd like to keep it around for a bit and see if I can adapt it to use multi-way instead, in which case it could be used for everything. I can also move it and move it back if us",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-388467321,388467321,
Kick1986,2018-05-12T00:47:27Z,"@sipa\nThanks for answering me!\nYou are right about AVX512 clock speed, it will go mainstream sometime 2020.\nI will do my best to add AVX512 to BTC code before that.\nThanks ",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-388518082,388518082,
sipa,2018-05-12T19:14:08Z,"@laanwj I moved the unused Merkle branch functions to the test code. Also:\n\n> I might add ARM intrinsics support at some point.\n\n:+1: That sounds far more impactful than POWER8, to be honest ;)\n\n@theuni I've addressed some of your build system comments from #13203, but left the `ENABLE_AVX2` and `ENABLE_SSE41` macros, because there isn't a clean platform independent way to use compiler",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-388576673,388576673,
gmaxwell,2018-05-15T19:00:43Z,"Concept ACK. Lightly tested ACK. \n\nWe should open a issue to track doing a specialized 1-way 64-byte SSE4 function for this later as that is a pretty much guaranteed performance gain (as the non-specialized 1-way SSE4 that does more work is faster than the specialized non-SSE4 1-way code) which can be done by someone who knows assembly but knows little about Bitcoin.\n\nWe might want to add ",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-389277189,389277189,
sipa,2018-05-17T00:25:56Z,"@gmaxwell Yes, perhaps. But the impact of that would be pretty low at best, as every system in which that optimized 1-way code can be used also supports 4-way 64-byte optimized code already; meaning such an implementation would only be used for up to 3 of the last hashes in each level of a Merkle tree.",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-389706444,389706444,
sipa,2018-05-20T19:29:17Z,@theuni Could you have a look at the build system changes again?,https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-390505390,390505390,
theuni,2018-05-29T16:47:43Z,@sipa thanks for the fixups. utACK build-system changes.,https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-392847871,392847871,
sipa,2018-05-29T21:28:24Z,"Addressed @theuni's nits.\n\nAlso:\n\n> Might it be helpful to add a non-double 4way/8way function as well? That would allow (for example) batched txid calculations where the first iteration is lazy and variable-sized as it is now, but 4way/8way could be used for the fixed-size second iterations.\n\nYes, but it's significantly more complicated. You need to schedule multiple variable length t",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-392951235,392951235,
DesWurstes,2018-06-02T13:29:15Z,"~~In the future, please don’t spend time coding AVX/AVX2 SHA256. SHA-NI specialized instruction set has SHA2 opcodes, which is the possible most efficient way. Besides, it was released before SSE4.2 and AVX, so there are compatible more processors.~~\n\n~~If anyone is interested: https://github.com/01org/isa-l_crypto/blob/master/sha256_mb/sha256_ni_x2.asm~~\n\nThanks pwuille. I guess you're ri",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-394087706,394087706,
sipa,2018-06-02T14:21:12Z,"@DesWurstes I'm perfectly capable of deciding for myself what I find interesting, thanks. Hardly any systems today support SHA-NI (only very recent low-power Intel CPUs, and AMD Ryzen), while AVX2 is available on all Intel chips since 2013 and AMD chips since 2015.",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-394090922,394090922,
laanwj,2018-06-02T15:41:18Z,"@DesWurstes Apparently you didn't bother to read the posts at all before replying, as this came up before. People decide for themselves what to work on. If you think something else is more important, you can submit your own pull request.",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-394096101,394096101,
sipa,2018-06-03T23:42:06Z,@DesWurstes https://github.com/bitcoin/bitcoin/pull/13386,https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-394201312,394201312,
laanwj,2018-06-04T10:08:18Z,"utACK 4defdfab94504018f822dc34a313ad26cedc8255\nVerified that FreeBSD+OpenBSD builds still pass.",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-394303028,394303028,
droark,2018-06-06T18:44:39Z,"After-the-fact tACK\n\nThe code's running nicely on my AVX2-enabled machine. Good job!\n\nI do have one question. Is this going to affect Gitian builds for people who are on older machines? Maybe I'm missing something silly but it seems like this could cause mismatches. I remember that the SSE4-enabled SHA-256 code initially required `--enable-experimental-asm` and was eventually enabled by de",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-395173222,395173222,
sipa,2018-06-06T18:53:12Z,"@droark It does require an AVX2 compatible compiler, but GCC 4.7 is sufficient for that (which we already required for release builds). You can perfectly well build AVX2 code even if your own hardware doesn't support AVX2.",https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-395175853,395175853,
droark,2018-06-06T19:20:32Z,@sipa - Thanks. I had a bad understanding of compilers from long ago that I somehow never shook.,https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-395183764,395183764,
rollmeister,2019-04-13T19:51:23Z,Can you please provide any documentation as to how you calculated the custom constants in Transform 2? I would like to adapt it for a 112 byte input. Could it be made to work if Transform 1 uses the state calculated from the first 64 bytes and the remaining 48 bytes (with appropriate padding) as the input message digest along with said calculated custom constants for Transform 2?,https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-482873870,482873870,
laanwj,2018-05-09T13:33:02Z,"`Read8` and `Write8` appear to read and write values respectively in opposite order, I suppose this is intentional?\n\nunrelated: I also wonder if this could be done with a parallel instruction instead of calling into `ReadBE32`/`WriteBE32` for each component, as we know the host endianness.",https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187040748,187040748,src/crypto/sha256_avx2.cpp
sipa,2018-05-09T15:28:10Z,"Fixed! Indeed, there exist byte-shuffle intrinsics for SSE4 and AVX2; I've used those instead of individual byteswaps.",https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187079985,187079985,src/crypto/sha256_avx2.cpp
kristapsk,2018-05-09T17:06:45Z,"Shouldn't there be a space between ""1024,"" and ""0""?",https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187109129,187109129,src/bench/crypto_hash.cpp
theuni,2018-05-09T20:30:18Z,Just because libbitcoinconsensus doesn't take advantage of 4way? Or some buildsystem limitation?,https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187166734,187166734,src/crypto/sha256.cpp
sipa,2018-05-09T20:31:39Z,"Both.\n\nI didn't feel like creating copies of all the architecture-specialized libs for use within libbitcoinconsensus - especially as it doesn't benefit it.",https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187167068,187167068,src/crypto/sha256.cpp
theuni,2018-05-29T16:55:53Z,Nit: pass leaves by value. It can be std::move'd from BlockMerkleRoot.,https://github.com/bitcoin/bitcoin/pull/13191#discussion_r191498614,191498614,src/consensus/merkle.cpp
theuni,2018-05-29T17:31:40Z,"Since there's arithmetic involved now and not just a simple cast, please give the constants an 'ul' suffix just to be explicit.",https://github.com/bitcoin/bitcoin/pull/13191#discussion_r191509549,191509549,src/crypto/sha256.cpp
theuni,2018-05-29T17:32:26Z,'ul' suffix for these as well.,https://github.com/bitcoin/bitcoin/pull/13191#discussion_r191509788,191509788,src/crypto/sha256.cpp
sipa,2018-05-29T21:22:28Z,Fixed (also in SSE4 and AVX2 code).,https://github.com/bitcoin/bitcoin/pull/13191#discussion_r191578561,191578561,src/crypto/sha256.cpp
sipa,2018-05-29T21:22:37Z,Done.,https://github.com/bitcoin/bitcoin/pull/13191#discussion_r191578592,191578592,src/consensus/merkle.cpp
Empact,2018-05-30T00:25:03Z,2018,https://github.com/bitcoin/bitcoin/pull/13191#discussion_r191613134,191613134,src/bench/merkle_root.cpp
Empact,2018-05-30T00:25:15Z,`#include <`,https://github.com/bitcoin/bitcoin/pull/13191#discussion_r191613161,191613161,src/bench/merkle_root.cpp
