[
  {
    "sha": "0df017889b4f61860092e1d54e271092cce55f62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGYwMTc4ODliNGY2MTg2MDA5MmUxZDU0ZTI3MTA5MmNjZTU1ZjYy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T00:36:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-08T14:44:13Z"
      },
      "message": "Benchmark Merkle root computation",
      "tree": {
        "sha": "f28529b1a0095131a8a57c542cf001a0eeb06322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f28529b1a0095131a8a57c542cf001a0eeb06322"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0df017889b4f61860092e1d54e271092cce55f62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df017889b4f61860092e1d54e271092cce55f62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0df017889b4f61860092e1d54e271092cce55f62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df017889b4f61860092e1d54e271092cce55f62/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b824c090f53d0a56833930fd38c41bcaec8ff4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b824c090f53d0a56833930fd38c41bcaec8ff4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b824c090f53d0a56833930fd38c41bcaec8ff4a"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "32de1582f8abe67a648e6b588b4b5543cb15b4b1",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0df017889b4f61860092e1d54e271092cce55f62/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0df017889b4f61860092e1d54e271092cce55f62/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=0df017889b4f61860092e1d54e271092cce55f62",
        "patch": "@@ -21,6 +21,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/rollingbloom.cpp \\\n   bench/crypto_hash.cpp \\\n   bench/ccoins_caching.cpp \\\n+  bench/merkle_root.cpp \\\n   bench/mempool_eviction.cpp \\\n   bench/verify_script.cpp \\\n   bench/base58.cpp \\"
      },
      {
        "sha": "027b19125dcc02ef2c1e75d486a8d05bd3eb2f3a",
        "filename": "src/bench/merkle_root.cpp",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0df017889b4f61860092e1d54e271092cce55f62/src/bench/merkle_root.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0df017889b4f61860092e1d54e271092cce55f62/src/bench/merkle_root.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/merkle_root.cpp?ref=0df017889b4f61860092e1d54e271092cce55f62",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+\n+#include \"uint256.h\"\n+#include \"random.h\"\n+#include \"consensus/merkle.h\"\n+\n+static void MerkleRoot(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    std::vector<uint256> leaves;\n+    leaves.resize(9001);\n+    for (auto& item : leaves) {\n+        item = rng.rand256();\n+    }\n+    while (state.KeepRunning()) {\n+        bool mutation = false;\n+        uint256 hash = ComputeMerkleRoot(leaves, &mutation);\n+        leaves[mutation] = hash;\n+    }\n+}\n+\n+BENCHMARK(MerkleRoot, 800);"
      }
    ]
  },
  {
    "sha": "57f34630fb6c3e218bd19535ac607008cb894173",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2YzNDYzMGZiNmMzZTIxOGJkMTk1MzVhYzYwNzAwOGNiODk0MTcz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-27T23:57:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-08T14:44:21Z"
      },
      "message": "Refactor SHA256 code",
      "tree": {
        "sha": "fdb20f01a954933816f54cc98278310e49e7eb84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdb20f01a954933816f54cc98278310e49e7eb84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57f34630fb6c3e218bd19535ac607008cb894173",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57f34630fb6c3e218bd19535ac607008cb894173",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57f34630fb6c3e218bd19535ac607008cb894173",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57f34630fb6c3e218bd19535ac607008cb894173/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0df017889b4f61860092e1d54e271092cce55f62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df017889b4f61860092e1d54e271092cce55f62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0df017889b4f61860092e1d54e271092cce55f62"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 69,
      "deletions": 69
    },
    "files": [
      {
        "sha": "9e2dee003b46858bcbb592438a31093594e44ebc",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 69,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57f34630fb6c3e218bd19535ac607008cb894173/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57f34630fb6c3e218bd19535ac607008cb894173/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=57f34630fb6c3e218bd19535ac607008cb894173",
        "patch": "@@ -33,9 +33,9 @@ uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x <<\n uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }\n \n /** One round of SHA-256. */\n-void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k, uint32_t w)\n+void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k)\n {\n-    uint32_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n+    uint32_t t1 = h + Sigma1(e) + Ch(e, f, g) + k;\n     uint32_t t2 = Sigma0(a) + Maj(a, b, c);\n     d += t1;\n     h = t1 + t2;\n@@ -61,73 +61,73 @@ void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n         uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n         uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n \n-        Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-        Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-        Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-        Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-        Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-        Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-        Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-        Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-        Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-        Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-        Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-        Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n-\n-        Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n-        Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n-        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n-        Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n-        Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n-        Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n-        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n-        Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n-        Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n-        Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n-        Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n-        Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n-        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n-        Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n-        Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n-        Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-        Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n-        Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n-        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n-        Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n-        Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n-        Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n-        Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n-        Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n-        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n-        Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n-        Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n-        Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n-        Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n-        Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n-        Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n-        Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-        Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n-        Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n-        Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n-        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n-        Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n-        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n-        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n-        Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n-        Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n-        Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n-        Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n-        Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n-        Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n-        Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n-        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n-        Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+        Round(a, b, c, d, e, f, g, h, 0x428a2f98 + (w0 = ReadBE32(chunk + 0)));\n+        Round(h, a, b, c, d, e, f, g, 0x71374491 + (w1 = ReadBE32(chunk + 4)));\n+        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf + (w2 = ReadBE32(chunk + 8)));\n+        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5 + (w3 = ReadBE32(chunk + 12)));\n+        Round(e, f, g, h, a, b, c, d, 0x3956c25b + (w4 = ReadBE32(chunk + 16)));\n+        Round(d, e, f, g, h, a, b, c, 0x59f111f1 + (w5 = ReadBE32(chunk + 20)));\n+        Round(c, d, e, f, g, h, a, b, 0x923f82a4 + (w6 = ReadBE32(chunk + 24)));\n+        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5 + (w7 = ReadBE32(chunk + 28)));\n+        Round(a, b, c, d, e, f, g, h, 0xd807aa98 + (w8 = ReadBE32(chunk + 32)));\n+        Round(h, a, b, c, d, e, f, g, 0x12835b01 + (w9 = ReadBE32(chunk + 36)));\n+        Round(g, h, a, b, c, d, e, f, 0x243185be + (w10 = ReadBE32(chunk + 40)));\n+        Round(f, g, h, a, b, c, d, e, 0x550c7dc3 + (w11 = ReadBE32(chunk + 44)));\n+        Round(e, f, g, h, a, b, c, d, 0x72be5d74 + (w12 = ReadBE32(chunk + 48)));\n+        Round(d, e, f, g, h, a, b, c, 0x80deb1fe + (w13 = ReadBE32(chunk + 52)));\n+        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7 + (w14 = ReadBE32(chunk + 56)));\n+        Round(b, c, d, e, f, g, h, a, 0xc19bf174 + (w15 = ReadBE32(chunk + 60)));\n+\n+        Round(a, b, c, d, e, f, g, h, 0xe49b69c1 + (w0 += sigma1(w14) + w9 + sigma0(w1)));\n+        Round(h, a, b, c, d, e, f, g, 0xefbe4786 + (w1 += sigma1(w15) + w10 + sigma0(w2)));\n+        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6 + (w2 += sigma1(w0) + w11 + sigma0(w3)));\n+        Round(f, g, h, a, b, c, d, e, 0x240ca1cc + (w3 += sigma1(w1) + w12 + sigma0(w4)));\n+        Round(e, f, g, h, a, b, c, d, 0x2de92c6f + (w4 += sigma1(w2) + w13 + sigma0(w5)));\n+        Round(d, e, f, g, h, a, b, c, 0x4a7484aa + (w5 += sigma1(w3) + w14 + sigma0(w6)));\n+        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc + (w6 += sigma1(w4) + w15 + sigma0(w7)));\n+        Round(b, c, d, e, f, g, h, a, 0x76f988da + (w7 += sigma1(w5) + w0 + sigma0(w8)));\n+        Round(a, b, c, d, e, f, g, h, 0x983e5152 + (w8 += sigma1(w6) + w1 + sigma0(w9)));\n+        Round(h, a, b, c, d, e, f, g, 0xa831c66d + (w9 += sigma1(w7) + w2 + sigma0(w10)));\n+        Round(g, h, a, b, c, d, e, f, 0xb00327c8 + (w10 += sigma1(w8) + w3 + sigma0(w11)));\n+        Round(f, g, h, a, b, c, d, e, 0xbf597fc7 + (w11 += sigma1(w9) + w4 + sigma0(w12)));\n+        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3 + (w12 += sigma1(w10) + w5 + sigma0(w13)));\n+        Round(d, e, f, g, h, a, b, c, 0xd5a79147 + (w13 += sigma1(w11) + w6 + sigma0(w14)));\n+        Round(c, d, e, f, g, h, a, b, 0x06ca6351 + (w14 += sigma1(w12) + w7 + sigma0(w15)));\n+        Round(b, c, d, e, f, g, h, a, 0x14292967 + (w15 += sigma1(w13) + w8 + sigma0(w0)));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x27b70a85 + (w0 += sigma1(w14) + w9 + sigma0(w1)));\n+        Round(h, a, b, c, d, e, f, g, 0x2e1b2138 + (w1 += sigma1(w15) + w10 + sigma0(w2)));\n+        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc + (w2 += sigma1(w0) + w11 + sigma0(w3)));\n+        Round(f, g, h, a, b, c, d, e, 0x53380d13 + (w3 += sigma1(w1) + w12 + sigma0(w4)));\n+        Round(e, f, g, h, a, b, c, d, 0x650a7354 + (w4 += sigma1(w2) + w13 + sigma0(w5)));\n+        Round(d, e, f, g, h, a, b, c, 0x766a0abb + (w5 += sigma1(w3) + w14 + sigma0(w6)));\n+        Round(c, d, e, f, g, h, a, b, 0x81c2c92e + (w6 += sigma1(w4) + w15 + sigma0(w7)));\n+        Round(b, c, d, e, f, g, h, a, 0x92722c85 + (w7 += sigma1(w5) + w0 + sigma0(w8)));\n+        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1 + (w8 += sigma1(w6) + w1 + sigma0(w9)));\n+        Round(h, a, b, c, d, e, f, g, 0xa81a664b + (w9 += sigma1(w7) + w2 + sigma0(w10)));\n+        Round(g, h, a, b, c, d, e, f, 0xc24b8b70 + (w10 += sigma1(w8) + w3 + sigma0(w11)));\n+        Round(f, g, h, a, b, c, d, e, 0xc76c51a3 + (w11 += sigma1(w9) + w4 + sigma0(w12)));\n+        Round(e, f, g, h, a, b, c, d, 0xd192e819 + (w12 += sigma1(w10) + w5 + sigma0(w13)));\n+        Round(d, e, f, g, h, a, b, c, 0xd6990624 + (w13 += sigma1(w11) + w6 + sigma0(w14)));\n+        Round(c, d, e, f, g, h, a, b, 0xf40e3585 + (w14 += sigma1(w12) + w7 + sigma0(w15)));\n+        Round(b, c, d, e, f, g, h, a, 0x106aa070 + (w15 += sigma1(w13) + w8 + sigma0(w0)));\n+\n+        Round(a, b, c, d, e, f, g, h, 0x19a4c116 + (w0 += sigma1(w14) + w9 + sigma0(w1)));\n+        Round(h, a, b, c, d, e, f, g, 0x1e376c08 + (w1 += sigma1(w15) + w10 + sigma0(w2)));\n+        Round(g, h, a, b, c, d, e, f, 0x2748774c + (w2 += sigma1(w0) + w11 + sigma0(w3)));\n+        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5 + (w3 += sigma1(w1) + w12 + sigma0(w4)));\n+        Round(e, f, g, h, a, b, c, d, 0x391c0cb3 + (w4 += sigma1(w2) + w13 + sigma0(w5)));\n+        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a + (w5 += sigma1(w3) + w14 + sigma0(w6)));\n+        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f + (w6 += sigma1(w4) + w15 + sigma0(w7)));\n+        Round(b, c, d, e, f, g, h, a, 0x682e6ff3 + (w7 += sigma1(w5) + w0 + sigma0(w8)));\n+        Round(a, b, c, d, e, f, g, h, 0x748f82ee + (w8 += sigma1(w6) + w1 + sigma0(w9)));\n+        Round(h, a, b, c, d, e, f, g, 0x78a5636f + (w9 += sigma1(w7) + w2 + sigma0(w10)));\n+        Round(g, h, a, b, c, d, e, f, 0x84c87814 + (w10 += sigma1(w8) + w3 + sigma0(w11)));\n+        Round(f, g, h, a, b, c, d, e, 0x8cc70208 + (w11 += sigma1(w9) + w4 + sigma0(w12)));\n+        Round(e, f, g, h, a, b, c, d, 0x90befffa + (w12 += sigma1(w10) + w5 + sigma0(w13)));\n+        Round(d, e, f, g, h, a, b, c, 0xa4506ceb + (w13 += sigma1(w11) + w6 + sigma0(w14)));\n+        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7 + (w14 + sigma1(w12) + w7 + sigma0(w15)));\n+        Round(b, c, d, e, f, g, h, a, 0xc67178f2 + (w15 + sigma1(w13) + w8 + sigma0(w0)));\n \n         s[0] += a;\n         s[1] += b;"
      }
    ]
  },
  {
    "sha": "d0c96328833127284574bfef26f96aa2e4afc91a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGM5NjMyODgzMzEyNzI4NDU3NGJmZWYyNmY5NmFhMmU0YWZjOTFh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-27T01:29:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-29T21:05:00Z"
      },
      "message": "Specialized double sha256 for 64 byte inputs",
      "tree": {
        "sha": "8eb834544a3b6611ce5de339f9b0fc2974536189",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8eb834544a3b6611ce5de339f9b0fc2974536189"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0c96328833127284574bfef26f96aa2e4afc91a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c96328833127284574bfef26f96aa2e4afc91a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c96328833127284574bfef26f96aa2e4afc91a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c96328833127284574bfef26f96aa2e4afc91a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57f34630fb6c3e218bd19535ac607008cb894173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57f34630fb6c3e218bd19535ac607008cb894173",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57f34630fb6c3e218bd19535ac607008cb894173"
      }
    ],
    "stats": {
      "total": 336,
      "additions": 335,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7d907eaf10bde8653a39e1f5fc1ab0c8fb186f6e",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0c96328833127284574bfef26f96aa2e4afc91a/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0c96328833127284574bfef26f96aa2e4afc91a/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=d0c96328833127284574bfef26f96aa2e4afc91a",
        "patch": "@@ -52,6 +52,14 @@ static void SHA256_32b(benchmark::State& state)\n     }\n }\n \n+static void SHA256D64_1024(benchmark::State& state)\n+{\n+    std::vector<uint8_t> in(64 * 1024, 0);\n+    while (state.KeepRunning()) {\n+        SHA256D64(in.data(), in.data(), 1024);\n+    }\n+}\n+\n static void SHA512(benchmark::State& state)\n {\n     uint8_t hash[CSHA512::OUTPUT_SIZE];\n@@ -94,5 +102,6 @@ BENCHMARK(SHA512, 330);\n \n BENCHMARK(SHA256_32b, 4700 * 1000);\n BENCHMARK(SipHash_32b, 40 * 1000 * 1000);\n+BENCHMARK(SHA256D64_1024, 7400);\n BENCHMARK(FastRandom_32bit, 110 * 1000 * 1000);\n BENCHMARK(FastRandom_1bit, 440 * 1000 * 1000);"
      },
      {
        "sha": "3b40254e6363e7af941eb5ab26bb7b1e12b2cead",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 303,
        "deletions": 1,
        "changes": 304,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0c96328833127284574bfef26f96aa2e4afc91a/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0c96328833127284574bfef26f96aa2e4afc91a/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=d0c96328833127284574bfef26f96aa2e4afc91a",
        "patch": "@@ -141,9 +141,300 @@ void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n     }\n }\n \n+void TransformD64(unsigned char* out, const unsigned char* in)\n+{\n+    // Transform 1\n+    uint32_t a = 0x6a09e667ul;\n+    uint32_t b = 0xbb67ae85ul;\n+    uint32_t c = 0x3c6ef372ul;\n+    uint32_t d = 0xa54ff53aul;\n+    uint32_t e = 0x510e527ful;\n+    uint32_t f = 0x9b05688cul;\n+    uint32_t g = 0x1f83d9abul;\n+    uint32_t h = 0x5be0cd19ul;\n+\n+    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98ul + (w0 = ReadBE32(in + 0)));\n+    Round(h, a, b, c, d, e, f, g, 0x71374491ul + (w1 = ReadBE32(in + 4)));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcful + (w2 = ReadBE32(in + 8)));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5ul + (w3 = ReadBE32(in + 12)));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25bul + (w4 = ReadBE32(in + 16)));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1ul + (w5 = ReadBE32(in + 20)));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4ul + (w6 = ReadBE32(in + 24)));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5ul + (w7 = ReadBE32(in + 28)));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98ul + (w8 = ReadBE32(in + 32)));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01ul + (w9 = ReadBE32(in + 36)));\n+    Round(g, h, a, b, c, d, e, f, 0x243185beul + (w10 = ReadBE32(in + 40)));\n+    Round(f, g, h, a, b, c, d, e, 0x550c7dc3ul + (w11 = ReadBE32(in + 44)));\n+    Round(e, f, g, h, a, b, c, d, 0x72be5d74ul + (w12 = ReadBE32(in + 48)));\n+    Round(d, e, f, g, h, a, b, c, 0x80deb1feul + (w13 = ReadBE32(in + 52)));\n+    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7ul + (w14 = ReadBE32(in + 56)));\n+    Round(b, c, d, e, f, g, h, a, 0xc19bf174ul + (w15 = ReadBE32(in + 60)));\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1ul + (w0 += sigma1(w14) + w9 + sigma0(w1)));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786ul + (w1 += sigma1(w15) + w10 + sigma0(w2)));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6ul + (w2 += sigma1(w0) + w11 + sigma0(w3)));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1ccul + (w3 += sigma1(w1) + w12 + sigma0(w4)));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6ful + (w4 += sigma1(w2) + w13 + sigma0(w5)));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aaul + (w5 += sigma1(w3) + w14 + sigma0(w6)));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dcul + (w6 += sigma1(w4) + w15 + sigma0(w7)));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988daul + (w7 += sigma1(w5) + w0 + sigma0(w8)));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152ul + (w8 += sigma1(w6) + w1 + sigma0(w9)));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66dul + (w9 += sigma1(w7) + w2 + sigma0(w10)));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8ul + (w10 += sigma1(w8) + w3 + sigma0(w11)));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7ul + (w11 += sigma1(w9) + w4 + sigma0(w12)));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3ul + (w12 += sigma1(w10) + w5 + sigma0(w13)));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147ul + (w13 += sigma1(w11) + w6 + sigma0(w14)));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351ul + (w14 += sigma1(w12) + w7 + sigma0(w15)));\n+    Round(b, c, d, e, f, g, h, a, 0x14292967ul + (w15 += sigma1(w13) + w8 + sigma0(w0)));\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85ul + (w0 += sigma1(w14) + w9 + sigma0(w1)));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138ul + (w1 += sigma1(w15) + w10 + sigma0(w2)));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfcul + (w2 += sigma1(w0) + w11 + sigma0(w3)));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13ul + (w3 += sigma1(w1) + w12 + sigma0(w4)));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354ul + (w4 += sigma1(w2) + w13 + sigma0(w5)));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abbul + (w5 += sigma1(w3) + w14 + sigma0(w6)));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92eul + (w6 += sigma1(w4) + w15 + sigma0(w7)));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85ul + (w7 += sigma1(w5) + w0 + sigma0(w8)));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1ul + (w8 += sigma1(w6) + w1 + sigma0(w9)));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664bul + (w9 += sigma1(w7) + w2 + sigma0(w10)));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70ul + (w10 += sigma1(w8) + w3 + sigma0(w11)));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3ul + (w11 += sigma1(w9) + w4 + sigma0(w12)));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819ul + (w12 += sigma1(w10) + w5 + sigma0(w13)));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624ul + (w13 += sigma1(w11) + w6 + sigma0(w14)));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585ul + (w14 += sigma1(w12) + w7 + sigma0(w15)));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070ul + (w15 += sigma1(w13) + w8 + sigma0(w0)));\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116ul + (w0 += sigma1(w14) + w9 + sigma0(w1)));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08ul + (w1 += sigma1(w15) + w10 + sigma0(w2)));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774cul + (w2 += sigma1(w0) + w11 + sigma0(w3)));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5ul + (w3 += sigma1(w1) + w12 + sigma0(w4)));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3ul + (w4 += sigma1(w2) + w13 + sigma0(w5)));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4aul + (w5 += sigma1(w3) + w14 + sigma0(w6)));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4ful + (w6 += sigma1(w4) + w15 + sigma0(w7)));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3ul + (w7 += sigma1(w5) + w0 + sigma0(w8)));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82eeul + (w8 += sigma1(w6) + w1 + sigma0(w9)));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636ful + (w9 += sigma1(w7) + w2 + sigma0(w10)));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814ul + (w10 += sigma1(w8) + w3 + sigma0(w11)));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208ul + (w11 += sigma1(w9) + w4 + sigma0(w12)));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffaul + (w12 += sigma1(w10) + w5 + sigma0(w13)));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506cebul + (w13 += sigma1(w11) + w6 + sigma0(w14)));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7ul + (w14 + sigma1(w12) + w7 + sigma0(w15)));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2ul + (w15 + sigma1(w13) + w8 + sigma0(w0)));\n+\n+    a += 0x6a09e667ul;\n+    b += 0xbb67ae85ul;\n+    c += 0x3c6ef372ul;\n+    d += 0xa54ff53aul;\n+    e += 0x510e527ful;\n+    f += 0x9b05688cul;\n+    g += 0x1f83d9abul;\n+    h += 0x5be0cd19ul;\n+\n+    uint32_t t0 = a, t1 = b, t2 = c, t3 = d, t4 = e, t5 = f, t6 = g, t7 = h;\n+\n+    // Transform 2\n+    Round(a, b, c, d, e, f, g, h, 0xc28a2f98ul);\n+    Round(h, a, b, c, d, e, f, g, 0x71374491ul);\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcful);\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5ul);\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25bul);\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1ul);\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4ul);\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5ul);\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98ul);\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01ul);\n+    Round(g, h, a, b, c, d, e, f, 0x243185beul);\n+    Round(f, g, h, a, b, c, d, e, 0x550c7dc3ul);\n+    Round(e, f, g, h, a, b, c, d, 0x72be5d74ul);\n+    Round(d, e, f, g, h, a, b, c, 0x80deb1feul);\n+    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7ul);\n+    Round(b, c, d, e, f, g, h, a, 0xc19bf374ul);\n+    Round(a, b, c, d, e, f, g, h, 0x649b69c1ul);\n+    Round(h, a, b, c, d, e, f, g, 0xf0fe4786ul);\n+    Round(g, h, a, b, c, d, e, f, 0x0fe1edc6ul);\n+    Round(f, g, h, a, b, c, d, e, 0x240cf254ul);\n+    Round(e, f, g, h, a, b, c, d, 0x4fe9346ful);\n+    Round(d, e, f, g, h, a, b, c, 0x6cc984beul);\n+    Round(c, d, e, f, g, h, a, b, 0x61b9411eul);\n+    Round(b, c, d, e, f, g, h, a, 0x16f988faul);\n+    Round(a, b, c, d, e, f, g, h, 0xf2c65152ul);\n+    Round(h, a, b, c, d, e, f, g, 0xa88e5a6dul);\n+    Round(g, h, a, b, c, d, e, f, 0xb019fc65ul);\n+    Round(f, g, h, a, b, c, d, e, 0xb9d99ec7ul);\n+    Round(e, f, g, h, a, b, c, d, 0x9a1231c3ul);\n+    Round(d, e, f, g, h, a, b, c, 0xe70eeaa0ul);\n+    Round(c, d, e, f, g, h, a, b, 0xfdb1232bul);\n+    Round(b, c, d, e, f, g, h, a, 0xc7353eb0ul);\n+    Round(a, b, c, d, e, f, g, h, 0x3069bad5ul);\n+    Round(h, a, b, c, d, e, f, g, 0xcb976d5ful);\n+    Round(g, h, a, b, c, d, e, f, 0x5a0f118ful);\n+    Round(f, g, h, a, b, c, d, e, 0xdc1eeefdul);\n+    Round(e, f, g, h, a, b, c, d, 0x0a35b689ul);\n+    Round(d, e, f, g, h, a, b, c, 0xde0b7a04ul);\n+    Round(c, d, e, f, g, h, a, b, 0x58f4ca9dul);\n+    Round(b, c, d, e, f, g, h, a, 0xe15d5b16ul);\n+    Round(a, b, c, d, e, f, g, h, 0x007f3e86ul);\n+    Round(h, a, b, c, d, e, f, g, 0x37088980ul);\n+    Round(g, h, a, b, c, d, e, f, 0xa507ea32ul);\n+    Round(f, g, h, a, b, c, d, e, 0x6fab9537ul);\n+    Round(e, f, g, h, a, b, c, d, 0x17406110ul);\n+    Round(d, e, f, g, h, a, b, c, 0x0d8cd6f1ul);\n+    Round(c, d, e, f, g, h, a, b, 0xcdaa3b6dul);\n+    Round(b, c, d, e, f, g, h, a, 0xc0bbbe37ul);\n+    Round(a, b, c, d, e, f, g, h, 0x83613bdaul);\n+    Round(h, a, b, c, d, e, f, g, 0xdb48a363ul);\n+    Round(g, h, a, b, c, d, e, f, 0x0b02e931ul);\n+    Round(f, g, h, a, b, c, d, e, 0x6fd15ca7ul);\n+    Round(e, f, g, h, a, b, c, d, 0x521afacaul);\n+    Round(d, e, f, g, h, a, b, c, 0x31338431ul);\n+    Round(c, d, e, f, g, h, a, b, 0x6ed41a95ul);\n+    Round(b, c, d, e, f, g, h, a, 0x6d437890ul);\n+    Round(a, b, c, d, e, f, g, h, 0xc39c91f2ul);\n+    Round(h, a, b, c, d, e, f, g, 0x9eccabbdul);\n+    Round(g, h, a, b, c, d, e, f, 0xb5c9a0e6ul);\n+    Round(f, g, h, a, b, c, d, e, 0x532fb63cul);\n+    Round(e, f, g, h, a, b, c, d, 0xd2c741c6ul);\n+    Round(d, e, f, g, h, a, b, c, 0x07237ea3ul);\n+    Round(c, d, e, f, g, h, a, b, 0xa4954b68ul);\n+    Round(b, c, d, e, f, g, h, a, 0x4c191d76ul);\n+\n+    w0 = t0 + a;\n+    w1 = t1 + b;\n+    w2 = t2 + c;\n+    w3 = t3 + d;\n+    w4 = t4 + e;\n+    w5 = t5 + f;\n+    w6 = t6 + g;\n+    w7 = t7 + h;\n+\n+    // Transform 3\n+    a = 0x6a09e667ul;\n+    b = 0xbb67ae85ul;\n+    c = 0x3c6ef372ul;\n+    d = 0xa54ff53aul;\n+    e = 0x510e527ful;\n+    f = 0x9b05688cul;\n+    g = 0x1f83d9abul;\n+    h = 0x5be0cd19ul;\n+\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98ul + w0);\n+    Round(h, a, b, c, d, e, f, g, 0x71374491ul + w1);\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcful + w2);\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5ul + w3);\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25bul + w4);\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1ul + w5);\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4ul + w6);\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5ul + w7);\n+    Round(a, b, c, d, e, f, g, h, 0x5807aa98ul);\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01ul);\n+    Round(g, h, a, b, c, d, e, f, 0x243185beul);\n+    Round(f, g, h, a, b, c, d, e, 0x550c7dc3ul);\n+    Round(e, f, g, h, a, b, c, d, 0x72be5d74ul);\n+    Round(d, e, f, g, h, a, b, c, 0x80deb1feul);\n+    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7ul);\n+    Round(b, c, d, e, f, g, h, a, 0xc19bf274ul);\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1ul + (w0 += sigma0(w1)));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786ul + (w1 += 0xa00000ul + sigma0(w2)));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6ul + (w2 += sigma1(w0) + sigma0(w3)));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1ccul + (w3 += sigma1(w1) + sigma0(w4)));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6ful + (w4 += sigma1(w2) + sigma0(w5)));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aaul + (w5 += sigma1(w3) + sigma0(w6)));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dcul + (w6 += sigma1(w4) + 0x100ul + sigma0(w7)));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988daul + (w7 += sigma1(w5) + w0 + 0x11002000ul));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152ul + (w8 = 0x80000000ul + sigma1(w6) + w1));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66dul + (w9 = sigma1(w7) + w2));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8ul + (w10 = sigma1(w8) + w3));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7ul + (w11 = sigma1(w9) + w4));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3ul + (w12 = sigma1(w10) + w5));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147ul + (w13 = sigma1(w11) + w6));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351ul + (w14 = sigma1(w12) + w7 + 0x400022ul));\n+    Round(b, c, d, e, f, g, h, a, 0x14292967ul + (w15 = 0x100ul + sigma1(w13) + w8 + sigma0(w0)));\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85ul + (w0 += sigma1(w14) + w9 + sigma0(w1)));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138ul + (w1 += sigma1(w15) + w10 + sigma0(w2)));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfcul + (w2 += sigma1(w0) + w11 + sigma0(w3)));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13ul + (w3 += sigma1(w1) + w12 + sigma0(w4)));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354ul + (w4 += sigma1(w2) + w13 + sigma0(w5)));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abbul + (w5 += sigma1(w3) + w14 + sigma0(w6)));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92eul + (w6 += sigma1(w4) + w15 + sigma0(w7)));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85ul + (w7 += sigma1(w5) + w0 + sigma0(w8)));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1ul + (w8 += sigma1(w6) + w1 + sigma0(w9)));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664bul + (w9 += sigma1(w7) + w2 + sigma0(w10)));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70ul + (w10 += sigma1(w8) + w3 + sigma0(w11)));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3ul + (w11 += sigma1(w9) + w4 + sigma0(w12)));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819ul + (w12 += sigma1(w10) + w5 + sigma0(w13)));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624ul + (w13 += sigma1(w11) + w6 + sigma0(w14)));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585ul + (w14 += sigma1(w12) + w7 + sigma0(w15)));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070ul + (w15 += sigma1(w13) + w8 + sigma0(w0)));\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116ul + (w0 += sigma1(w14) + w9 + sigma0(w1)));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08ul + (w1 += sigma1(w15) + w10 + sigma0(w2)));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774cul + (w2 += sigma1(w0) + w11 + sigma0(w3)));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5ul + (w3 += sigma1(w1) + w12 + sigma0(w4)));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3ul + (w4 += sigma1(w2) + w13 + sigma0(w5)));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4aul + (w5 += sigma1(w3) + w14 + sigma0(w6)));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4ful + (w6 += sigma1(w4) + w15 + sigma0(w7)));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3ul + (w7 += sigma1(w5) + w0 + sigma0(w8)));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82eeul + (w8 += sigma1(w6) + w1 + sigma0(w9)));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636ful + (w9 += sigma1(w7) + w2 + sigma0(w10)));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814ul + (w10 += sigma1(w8) + w3 + sigma0(w11)));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208ul + (w11 += sigma1(w9) + w4 + sigma0(w12)));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffaul + (w12 += sigma1(w10) + w5 + sigma0(w13)));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506cebul + (w13 += sigma1(w11) + w6 + sigma0(w14)));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7ul + (w14 + sigma1(w12) + w7 + sigma0(w15)));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2ul + (w15 + sigma1(w13) + w8 + sigma0(w0)));\n+\n+    // Output\n+    WriteBE32(out + 0, a + 0x6a09e667ul);\n+    WriteBE32(out + 4, b + 0xbb67ae85ul);\n+    WriteBE32(out + 8, c + 0x3c6ef372ul);\n+    WriteBE32(out + 12, d + 0xa54ff53aul);\n+    WriteBE32(out + 16, e + 0x510e527ful);\n+    WriteBE32(out + 20, f + 0x9b05688cul);\n+    WriteBE32(out + 24, g + 0x1f83d9abul);\n+    WriteBE32(out + 28, h + 0x5be0cd19ul);\n+}\n+\n } // namespace sha256\n \n typedef void (*TransformType)(uint32_t*, const unsigned char*, size_t);\n+typedef void (*TransformD64Type)(unsigned char*, const unsigned char*);\n+\n+template<TransformType tr>\n+void TransformD64Wrapper(unsigned char* out, const unsigned char* in)\n+{\n+    uint32_t s[8];\n+    static const unsigned char padding1[64] = {\n+        0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0\n+    };\n+    unsigned char buffer2[64] = {\n+        0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0\n+    };\n+    sha256::Initialize(s);\n+    tr(s, in, 1);\n+    tr(s, padding1, 1);\n+    WriteBE32(buffer2 + 0, s[0]);\n+    WriteBE32(buffer2 + 4, s[1]);\n+    WriteBE32(buffer2 + 8, s[2]);\n+    WriteBE32(buffer2 + 12, s[3]);\n+    WriteBE32(buffer2 + 16, s[4]);\n+    WriteBE32(buffer2 + 20, s[5]);\n+    WriteBE32(buffer2 + 24, s[6]);\n+    WriteBE32(buffer2 + 28, s[7]);\n+    sha256::Initialize(s);\n+    tr(s, buffer2, 1);\n+    WriteBE32(out + 0, s[0]);\n+    WriteBE32(out + 4, s[1]);\n+    WriteBE32(out + 8, s[2]);\n+    WriteBE32(out + 12, s[3]);\n+    WriteBE32(out + 16, s[4]);\n+    WriteBE32(out + 20, s[5]);\n+    WriteBE32(out + 24, s[6]);\n+    WriteBE32(out + 28, s[7]);\n+}\n \n bool SelfTest(TransformType tr) {\n     static const unsigned char in1[65] = {0, 0x80};\n@@ -173,7 +464,7 @@ bool SelfTest(TransformType tr) {\n }\n \n TransformType Transform = sha256::Transform;\n-\n+TransformD64Type TransformD64 = sha256::TransformD64;\n } // namespace\n \n std::string SHA256AutoDetect()\n@@ -182,6 +473,7 @@ std::string SHA256AutoDetect()\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 19) & 1) {\n         Transform = sha256_sse4::Transform;\n+        TransformD64 = TransformD64Wrapper<sha256_sse4::Transform>;\n         assert(SelfTest(Transform));\n         return \"sse4\";\n     }\n@@ -247,3 +539,13 @@ CSHA256& CSHA256::Reset()\n     sha256::Initialize(s);\n     return *this;\n }\n+\n+void SHA256D64(unsigned char* out, const unsigned char* in, size_t blocks)\n+{\n+    while (blocks) {\n+        TransformD64(out, in);\n+        out += 32;\n+        in += 64;\n+        --blocks;\n+    }\n+}"
      },
      {
        "sha": "31b2b3b3df3ab6c020c713c5e89853c528fc3535",
        "filename": "src/crypto/sha256.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0c96328833127284574bfef26f96aa2e4afc91a/src/crypto/sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0c96328833127284574bfef26f96aa2e4afc91a/src/crypto/sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.h?ref=d0c96328833127284574bfef26f96aa2e4afc91a",
        "patch": "@@ -31,4 +31,11 @@ class CSHA256\n  */\n std::string SHA256AutoDetect();\n \n+/** Compute multiple double-SHA256's of 64-byte blobs.\n+ *  output:  pointer to a blocks*32 byte output buffer\n+ *  input:   pointer to a blocks*64 byte input buffer\n+ *  blocks:  the number of hashes to compute.\n+ */\n+void SHA256D64(unsigned char* output, const unsigned char* input, size_t blocks);\n+\n #endif // BITCOIN_CRYPTO_SHA256_H"
      },
      {
        "sha": "d701f3bc4e87b4f8bd50391ab44b43a81d81c133",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0c96328833127284574bfef26f96aa2e4afc91a/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0c96328833127284574bfef26f96aa2e4afc91a/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=d0c96328833127284574bfef26f96aa2e4afc91a",
        "patch": "@@ -546,4 +546,20 @@ BOOST_AUTO_TEST_CASE(countbits_tests)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(sha256d64)\n+{\n+    for (int i = 0; i <= 32; ++i) {\n+        unsigned char in[64 * 32];\n+        unsigned char out1[32 * 32], out2[32 * 32];\n+        for (int j = 0; j < 64 * i; ++j) {\n+            in[j] = InsecureRandBits(8);\n+        }\n+        for (int j = 0; j < i; ++j) {\n+            CHash256().Write(in + 64 * j, 64).Finalize(out1 + 32 * j);\n+        }\n+        SHA256D64(out2, in, i);\n+        BOOST_CHECK(memcmp(out1, out2, 32 * i) == 0);\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjBlN2NhMDljOWQ3YzU3ODdjMjE4MTU2ZmE1MDk2YTFiZGYyZWE4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T01:50:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-29T21:17:07Z"
      },
      "message": "Use SHA256D64 in Merkle root computation",
      "tree": {
        "sha": "7b911a2d3600b45ac4c9f14a034ba3ad2f724b29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b911a2d3600b45ac4c9f14a034ba3ad2f724b29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0c96328833127284574bfef26f96aa2e4afc91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c96328833127284574bfef26f96aa2e4afc91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c96328833127284574bfef26f96aa2e4afc91a"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 21,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ae2a0a28dc1f1fe098df1e6f065b9e02ca5b3c69",
        "filename": "src/bench/merkle_root.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8/src/bench/merkle_root.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8/src/bench/merkle_root.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/merkle_root.cpp?ref=1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8",
        "patch": "@@ -18,7 +18,7 @@ static void MerkleRoot(benchmark::State& state)\n     }\n     while (state.KeepRunning()) {\n         bool mutation = false;\n-        uint256 hash = ComputeMerkleRoot(leaves, &mutation);\n+        uint256 hash = ComputeMerkleRoot(std::vector<uint256>(leaves), &mutation);\n         leaves[mutation] = hash;\n     }\n }"
      },
      {
        "sha": "a23dd001442926733873665700a6d55a7aa04b3a",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 6,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8",
        "patch": "@@ -130,10 +130,23 @@ static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot\n     if (proot) *proot = h;\n }\n \n-uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated) {\n-    uint256 hash;\n-    MerkleComputation(leaves, &hash, mutated, -1, nullptr);\n-    return hash;\n+uint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) {\n+    bool mutation = false;\n+    while (hashes.size() > 1) {\n+        if (mutated) {\n+            for (size_t pos = 0; pos + 1 < hashes.size(); pos += 2) {\n+                if (hashes[pos] == hashes[pos + 1]) mutation = true;\n+            }\n+        }\n+        if (hashes.size() & 1) {\n+            hashes.push_back(hashes.back());\n+        }\n+        SHA256D64(hashes[0].begin(), hashes[0].begin(), hashes.size() / 2);\n+        hashes.resize(hashes.size() / 2);\n+    }\n+    if (mutated) *mutated = mutation;\n+    if (hashes.size() == 0) return uint256();\n+    return hashes[0];\n }\n \n std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position) {\n@@ -162,7 +175,7 @@ uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)\n     for (size_t s = 0; s < block.vtx.size(); s++) {\n         leaves[s] = block.vtx[s]->GetHash();\n     }\n-    return ComputeMerkleRoot(leaves, mutated);\n+    return ComputeMerkleRoot(std::move(leaves), mutated);\n }\n \n uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)\n@@ -173,7 +186,7 @@ uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)\n     for (size_t s = 1; s < block.vtx.size(); s++) {\n         leaves[s] = block.vtx[s]->GetWitnessHash();\n     }\n-    return ComputeMerkleRoot(leaves, mutated);\n+    return ComputeMerkleRoot(std::move(leaves), mutated);\n }\n \n std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)"
      },
      {
        "sha": "f2559d458ee3456229abc11d8049398a27e273fe",
        "filename": "src/consensus/merkle.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8",
        "patch": "@@ -12,7 +12,7 @@\n #include <primitives/block.h>\n #include <uint256.h>\n \n-uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated = nullptr);\n+uint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated);\n std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position);\n uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& branch, uint32_t position);\n "
      }
    ]
  },
  {
    "sha": "230294bf5fdeba7213471cd0b795fb7aa36e5717",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzAyOTRiZjVmZGViYTcyMTM0NzFjZDBiNzk1ZmI3YWEzNmU1NzE3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-08T17:27:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-29T21:18:05Z"
      },
      "message": "4-way SSE4.1 implementation for double SHA256 on 64-byte inputs",
      "tree": {
        "sha": "2962394fa17f202a6becc73d8289d782358ee812",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2962394fa17f202a6becc73d8289d782358ee812"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/230294bf5fdeba7213471cd0b795fb7aa36e5717",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/230294bf5fdeba7213471cd0b795fb7aa36e5717",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/230294bf5fdeba7213471cd0b795fb7aa36e5717",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/230294bf5fdeba7213471cd0b795fb7aa36e5717/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f0e7ca09c9d7c5787c218156fa5096a1bdf2ea8"
      }
    ],
    "stats": {
      "total": 392,
      "additions": 385,
      "deletions": 7
    },
    "files": [
      {
        "sha": "7396ac74e85be39cf500d1ffd518e50fc558920a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/230294bf5fdeba7213471cd0b795fb7aa36e5717/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/230294bf5fdeba7213471cd0b795fb7aa36e5717/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=230294bf5fdeba7213471cd0b795fb7aa36e5717",
        "patch": "@@ -304,6 +304,7 @@ fi\n # be compiled with them, rather that specific objects/libs may use them after checking for runtime\n # compatibility.\n AX_CHECK_COMPILE_FLAG([-msse4.2],[[SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\n+AX_CHECK_COMPILE_FLAG([-msse4.1],[[SSE41_CXXFLAGS=\"-msse4.1\"]],,[[$CXXFLAG_WERROR]])\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS $SSE42_CXXFLAGS\"\n@@ -327,6 +328,25 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n+TEMP_CXXFLAGS=\"$CXXFLAGS\"\n+CXXFLAGS=\"$CXXFLAGS $SSE41_CXXFLAGS\"\n+AC_MSG_CHECKING(for SSE4.1 intrinsics)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #include <stdint.h>\n+    #if defined(_MSC_VER)\n+    #include <immintrin.h>\n+    #elif defined(__GNUC__)\n+    #include <x86intrin.h>\n+    #endif\n+  ]],[[\n+    __m128i l = _mm_set1_epi32(0);\n+    return _mm_extract_epi32(l, 3);\n+  ]])],\n+ [ AC_MSG_RESULT(yes); enable_sse41=yes; AC_DEFINE(ENABLE_SSE41, 1, [Define this symbol to build code that uses SSE4.1 intrinsics]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+CXXFLAGS=\"$TEMP_CXXFLAGS\"\n+\n CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n@@ -1245,6 +1265,7 @@ AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_HWCRC32],[test x$enable_hwcrc32 = xyes])\n+AM_CONDITIONAL([ENABLE_SSE41],[test x$enable_sse41 = xyes])\n AM_CONDITIONAL([USE_ASM],[test x$use_asm = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n@@ -1283,6 +1304,7 @@ AC_SUBST(PIE_FLAGS)\n AC_SUBST(SANITIZER_CXXFLAGS)\n AC_SUBST(SANITIZER_LDFLAGS)\n AC_SUBST(SSE42_CXXFLAGS)\n+AC_SUBST(SSE41_CXXFLAGS)\n AC_SUBST(LIBTOOL_APP_LDFLAGS)\n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)"
      },
      {
        "sha": "1fa11f98e2317614ad32e19c351c32289cc20334",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=230294bf5fdeba7213471cd0b795fb7aa36e5717",
        "patch": "@@ -30,6 +30,7 @@ LIBBITCOIN_CONSENSUS=libbitcoin_consensus.a\n LIBBITCOIN_CLI=libbitcoin_cli.a\n LIBBITCOIN_UTIL=libbitcoin_util.a\n LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n+LIBBITCOIN_CRYPTO_SSE41=crypto/libbitcoin_crypto_sse41.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n \n@@ -50,6 +51,7 @@ $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n # But to build the less dependent modules first, we manually select their order here:\n EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_CRYPTO_SSE41) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n@@ -289,6 +291,14 @@ if USE_ASM\n crypto_libbitcoin_crypto_a_SOURCES += crypto/sha256_sse4.cpp\n endif\n \n+crypto_libbitcoin_crypto_sse41_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+crypto_libbitcoin_crypto_sse41_a_CPPFLAGS = $(AM_CPPFLAGS)\n+if ENABLE_SSE41\n+crypto_libbitcoin_crypto_sse41_a_CXXFLAGS += $(SSE41_CXXFLAGS)\n+crypto_libbitcoin_crypto_sse41_a_CPPFLAGS += -DENABLE_SSE41\n+endif\n+crypto_libbitcoin_crypto_sse41_a_SOURCES = crypto/sha256_sse41.cpp\n+\n # consensus: shared between all executables that validate any consensus rules.\n libbitcoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -411,6 +421,7 @@ bitcoind_LDADD = \\\n   $(LIBBITCOIN_ZMQ) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_CRYPTO_SSE41) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\\n@@ -432,7 +443,8 @@ bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n-  $(LIBBITCOIN_CRYPTO)\n+  $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_CRYPTO_SSE41)\n \n bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n #\n@@ -453,6 +465,7 @@ bitcoin_tx_LDADD = \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_CRYPTO_SSE41) \\\n   $(LIBSECP256K1)\n \n bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)"
      },
      {
        "sha": "8111d0af47dcc4b5a4351fa83a21bdb8fe6a84fc",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=230294bf5fdeba7213471cd0b795fb7aa36e5717",
        "patch": "@@ -39,6 +39,7 @@ bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_CRYPTO_SSE41) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\"
      },
      {
        "sha": "0e2c3d8a8ce942f71f65fffa6df2de3adec940e6",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=230294bf5fdeba7213471cd0b795fb7aa36e5717",
        "patch": "@@ -407,7 +407,7 @@ endif\n if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_CRYPTO_SSE41) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "11bc5925593dd69304864290965ba1062a1cc827",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=230294bf5fdeba7213471cd0b795fb7aa36e5717",
        "patch": "@@ -62,7 +62,7 @@ endif\n if ENABLE_ZMQ\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_CRYPTO_SSE41) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "6b06c14645c56080fb234e865ecabb9c00475912",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=230294bf5fdeba7213471cd0b795fb7aa36e5717",
        "patch": "@@ -108,7 +108,8 @@ test_test_bitcoin_LDADD =\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif\n-test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \\\n+\n+test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_CRYPTO_SSE41) $(LIBUNIVALUE) \\\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n@@ -133,6 +134,7 @@ test_test_bitcoin_fuzzy_LDADD = \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_CRYPTO_SSE41) \\\n   $(LIBSECP256K1)\n \n test_test_bitcoin_fuzzy_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)"
      },
      {
        "sha": "2bf019ed34d0c60cd44f962a9281564abce0bdb5",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 3,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=230294bf5fdeba7213471cd0b795fb7aa36e5717",
        "patch": "@@ -19,6 +19,11 @@ void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks);\n #endif\n #endif\n \n+namespace sha256d64_sse41\n+{\n+void Transform_4way(unsigned char* out, const unsigned char* in);\n+}\n+\n // Internal implementation code.\n namespace\n {\n@@ -465,22 +470,28 @@ bool SelfTest(TransformType tr) {\n \n TransformType Transform = sha256::Transform;\n TransformD64Type TransformD64 = sha256::TransformD64;\n+TransformD64Type TransformD64_4way = nullptr;\n } // namespace\n \n std::string SHA256AutoDetect()\n {\n+    std::string ret = \"standard\";\n #if defined(USE_ASM) && (defined(__x86_64__) || defined(__amd64__))\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 19) & 1) {\n         Transform = sha256_sse4::Transform;\n         TransformD64 = TransformD64Wrapper<sha256_sse4::Transform>;\n-        assert(SelfTest(Transform));\n-        return \"sse4\";\n+#if defined(ENABLE_SSE41) && !defined(BUILD_BITCOIN_INTERNAL)\n+        TransformD64_4way = sha256d64_sse41::Transform_4way;\n+        ret = \"sse4(1way+4way)\";\n+#else\n+        ret = \"sse4\";\n+#endif\n     }\n #endif\n \n     assert(SelfTest(Transform));\n-    return \"standard\";\n+    return ret;\n }\n \n ////// SHA-256\n@@ -542,6 +553,14 @@ CSHA256& CSHA256::Reset()\n \n void SHA256D64(unsigned char* out, const unsigned char* in, size_t blocks)\n {\n+    if (TransformD64_4way) {\n+        while (blocks >= 4) {\n+            TransformD64_4way(out, in);\n+            out += 128;\n+            in += 256;\n+            blocks -= 4;\n+        }\n+    }\n     while (blocks) {\n         TransformD64(out, in);\n         out += 32;"
      },
      {
        "sha": "a11d658c7015e3789a0818ae741d70e2bf22bb97",
        "filename": "src/crypto/sha256_sse41.cpp",
        "status": "added",
        "additions": 321,
        "deletions": 0,
        "changes": 321,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/crypto/sha256_sse41.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/230294bf5fdeba7213471cd0b795fb7aa36e5717/src/crypto/sha256_sse41.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256_sse41.cpp?ref=230294bf5fdeba7213471cd0b795fb7aa36e5717",
        "patch": "@@ -0,0 +1,321 @@\n+#ifdef ENABLE_SSE41\n+\n+#include <stdint.h>\n+#if defined(_MSC_VER)\n+#include <immintrin.h>\n+#elif defined(__GNUC__)\n+#include <x86intrin.h>\n+#endif\n+\n+#include \"crypto/sha256.h\"\n+#include \"crypto/common.h\"\n+\n+namespace sha256d64_sse41 {\n+namespace {\n+\n+__m128i inline K(uint32_t x) { return _mm_set1_epi32(x); }\n+\n+__m128i inline Add(__m128i x, __m128i y) { return _mm_add_epi32(x, y); }\n+__m128i inline Add(__m128i x, __m128i y, __m128i z) { return Add(Add(x, y), z); }\n+__m128i inline Add(__m128i x, __m128i y, __m128i z, __m128i w) { return Add(Add(x, y), Add(z, w)); }\n+__m128i inline Add(__m128i x, __m128i y, __m128i z, __m128i w, __m128i v) { return Add(Add(x, y, z), Add(w, v)); }\n+__m128i inline Inc(__m128i& x, __m128i y) { x = Add(x, y); return x; }\n+__m128i inline Inc(__m128i& x, __m128i y, __m128i z) { x = Add(x, y, z); return x; }\n+__m128i inline Inc(__m128i& x, __m128i y, __m128i z, __m128i w) { x = Add(x, y, z, w); return x; }\n+__m128i inline Xor(__m128i x, __m128i y) { return _mm_xor_si128(x, y); }\n+__m128i inline Xor(__m128i x, __m128i y, __m128i z) { return Xor(Xor(x, y), z); }\n+__m128i inline Or(__m128i x, __m128i y) { return _mm_or_si128(x, y); }\n+__m128i inline And(__m128i x, __m128i y) { return _mm_and_si128(x, y); }\n+__m128i inline ShR(__m128i x, int n) { return _mm_srli_epi32(x, n); }\n+__m128i inline ShL(__m128i x, int n) { return _mm_slli_epi32(x, n); }\n+\n+__m128i inline Ch(__m128i x, __m128i y, __m128i z) { return Xor(z, And(x, Xor(y, z))); }\n+__m128i inline Maj(__m128i x, __m128i y, __m128i z) { return Or(And(x, y), And(z, Or(x, y))); }\n+__m128i inline Sigma0(__m128i x) { return Xor(Or(ShR(x, 2), ShL(x, 30)), Or(ShR(x, 13), ShL(x, 19)), Or(ShR(x, 22), ShL(x, 10))); }\n+__m128i inline Sigma1(__m128i x) { return Xor(Or(ShR(x, 6), ShL(x, 26)), Or(ShR(x, 11), ShL(x, 21)), Or(ShR(x, 25), ShL(x, 7))); }\n+__m128i inline sigma0(__m128i x) { return Xor(Or(ShR(x, 7), ShL(x, 25)), Or(ShR(x, 18), ShL(x, 14)), ShR(x, 3)); }\n+__m128i inline sigma1(__m128i x) { return Xor(Or(ShR(x, 17), ShL(x, 15)), Or(ShR(x, 19), ShL(x, 13)), ShR(x, 10)); }\n+\n+/** One round of SHA-256. */\n+void inline __attribute__((always_inline)) Round(__m128i a, __m128i b, __m128i c, __m128i& d, __m128i e, __m128i f, __m128i g, __m128i& h, __m128i k)\n+{\n+    __m128i t1 = Add(h, Sigma1(e), Ch(e, f, g), k);\n+    __m128i t2 = Add(Sigma0(a), Maj(a, b, c));\n+    d = Add(d, t1);\n+    h = Add(t1, t2);\n+}\n+\n+__m128i inline Read4(const unsigned char* chunk, int offset) {\n+    __m128i ret = _mm_set_epi32(\n+        ReadLE32(chunk + 0 + offset),\n+        ReadLE32(chunk + 64 + offset),\n+        ReadLE32(chunk + 128 + offset),\n+        ReadLE32(chunk + 192 + offset)\n+    );\n+    return _mm_shuffle_epi8(ret, _mm_set_epi32(0x0C0D0E0FUL, 0x08090A0BUL, 0x04050607UL, 0x00010203UL));\n+}\n+\n+void inline Write4(unsigned char* out, int offset, __m128i v) {\n+    v = _mm_shuffle_epi8(v, _mm_set_epi32(0x0C0D0E0FUL, 0x08090A0BUL, 0x04050607UL, 0x00010203UL));\n+    WriteLE32(out + 0 + offset, _mm_extract_epi32(v, 3));\n+    WriteLE32(out + 32 + offset, _mm_extract_epi32(v, 2));\n+    WriteLE32(out + 64 + offset, _mm_extract_epi32(v, 1));\n+    WriteLE32(out + 96 + offset, _mm_extract_epi32(v, 0));\n+}\n+\n+}\n+\n+void Transform_4way(unsigned char* out, const unsigned char* in)\n+{\n+    // Transform 1\n+    __m128i a = K(0x6a09e667ul);\n+    __m128i b = K(0xbb67ae85ul);\n+    __m128i c = K(0x3c6ef372ul);\n+    __m128i d = K(0xa54ff53aul);\n+    __m128i e = K(0x510e527ful);\n+    __m128i f = K(0x9b05688cul);\n+    __m128i g = K(0x1f83d9abul);\n+    __m128i h = K(0x5be0cd19ul);\n+\n+    __m128i w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x428a2f98ul), w0 = Read4(in, 0)));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x71374491ul), w1 = Read4(in, 4)));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xb5c0fbcful), w2 = Read4(in, 8)));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xe9b5dba5ul), w3 = Read4(in, 12)));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x3956c25bul), w4 = Read4(in, 16)));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x59f111f1ul), w5 = Read4(in, 20)));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x923f82a4ul), w6 = Read4(in, 24)));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0xab1c5ed5ul), w7 = Read4(in, 28)));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0xd807aa98ul), w8 = Read4(in, 32)));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x12835b01ul), w9 = Read4(in, 36)));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x243185beul), w10 = Read4(in, 40)));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x550c7dc3ul), w11 = Read4(in, 44)));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x72be5d74ul), w12 = Read4(in, 48)));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x80deb1feul), w13 = Read4(in, 52)));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x9bdc06a7ul), w14 = Read4(in, 56)));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0xc19bf174ul), w15 = Read4(in, 60)));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0xe49b69c1ul), Inc(w0, sigma1(w14), w9, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xefbe4786ul), Inc(w1, sigma1(w15), w10, sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x0fc19dc6ul), Inc(w2, sigma1(w0), w11, sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x240ca1ccul), Inc(w3, sigma1(w1), w12, sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x2de92c6ful), Inc(w4, sigma1(w2), w13, sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x4a7484aaul), Inc(w5, sigma1(w3), w14, sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x5cb0a9dcul), Inc(w6, sigma1(w4), w15, sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x76f988daul), Inc(w7, sigma1(w5), w0, sigma0(w8))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x983e5152ul), Inc(w8, sigma1(w6), w1, sigma0(w9))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xa831c66dul), Inc(w9, sigma1(w7), w2, sigma0(w10))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xb00327c8ul), Inc(w10, sigma1(w8), w3, sigma0(w11))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xbf597fc7ul), Inc(w11, sigma1(w9), w4, sigma0(w12))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0xc6e00bf3ul), Inc(w12, sigma1(w10), w5, sigma0(w13))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xd5a79147ul), Inc(w13, sigma1(w11), w6, sigma0(w14))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x06ca6351ul), Inc(w14, sigma1(w12), w7, sigma0(w15))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x14292967ul), Inc(w15, sigma1(w13), w8, sigma0(w0))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x27b70a85ul), Inc(w0, sigma1(w14), w9, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x2e1b2138ul), Inc(w1, sigma1(w15), w10, sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x4d2c6dfcul), Inc(w2, sigma1(w0), w11, sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x53380d13ul), Inc(w3, sigma1(w1), w12, sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x650a7354ul), Inc(w4, sigma1(w2), w13, sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x766a0abbul), Inc(w5, sigma1(w3), w14, sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x81c2c92eul), Inc(w6, sigma1(w4), w15, sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x92722c85ul), Inc(w7, sigma1(w5), w0, sigma0(w8))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0xa2bfe8a1ul), Inc(w8, sigma1(w6), w1, sigma0(w9))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xa81a664bul), Inc(w9, sigma1(w7), w2, sigma0(w10))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xc24b8b70ul), Inc(w10, sigma1(w8), w3, sigma0(w11))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xc76c51a3ul), Inc(w11, sigma1(w9), w4, sigma0(w12))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0xd192e819ul), Inc(w12, sigma1(w10), w5, sigma0(w13))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xd6990624ul), Inc(w13, sigma1(w11), w6, sigma0(w14))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0xf40e3585ul), Inc(w14, sigma1(w12), w7, sigma0(w15))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x106aa070ul), Inc(w15, sigma1(w13), w8, sigma0(w0))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x19a4c116ul), Inc(w0, sigma1(w14), w9, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x1e376c08ul), Inc(w1, sigma1(w15), w10, sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x2748774cul), Inc(w2, sigma1(w0), w11, sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x34b0bcb5ul), Inc(w3, sigma1(w1), w12, sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x391c0cb3ul), Inc(w4, sigma1(w2), w13, sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x4ed8aa4aul), Inc(w5, sigma1(w3), w14, sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x5b9cca4ful), Inc(w6, sigma1(w4), w15, sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x682e6ff3ul), Inc(w7, sigma1(w5), w0, sigma0(w8))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x748f82eeul), Inc(w8, sigma1(w6), w1, sigma0(w9))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x78a5636ful), Inc(w9, sigma1(w7), w2, sigma0(w10))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x84c87814ul), Inc(w10, sigma1(w8), w3, sigma0(w11))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x8cc70208ul), Inc(w11, sigma1(w9), w4, sigma0(w12))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x90befffaul), Inc(w12, sigma1(w10), w5, sigma0(w13))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xa4506cebul), Inc(w13, sigma1(w11), w6, sigma0(w14))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0xbef9a3f7ul), Inc(w14, sigma1(w12), w7, sigma0(w15))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0xc67178f2ul), Inc(w15, sigma1(w13), w8, sigma0(w0))));\n+\n+    a = Add(a, K(0x6a09e667ul));\n+    b = Add(b, K(0xbb67ae85ul));\n+    c = Add(c, K(0x3c6ef372ul));\n+    d = Add(d, K(0xa54ff53aul));\n+    e = Add(e, K(0x510e527ful));\n+    f = Add(f, K(0x9b05688cul));\n+    g = Add(g, K(0x1f83d9abul));\n+    h = Add(h, K(0x5be0cd19ul));\n+\n+    __m128i t0 = a, t1 = b, t2 = c, t3 = d, t4 = e, t5 = f, t6 = g, t7 = h;\n+\n+    // Transform 2\n+    Round(a, b, c, d, e, f, g, h, K(0xc28a2f98ul));\n+    Round(h, a, b, c, d, e, f, g, K(0x71374491ul));\n+    Round(g, h, a, b, c, d, e, f, K(0xb5c0fbcful));\n+    Round(f, g, h, a, b, c, d, e, K(0xe9b5dba5ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x3956c25bul));\n+    Round(d, e, f, g, h, a, b, c, K(0x59f111f1ul));\n+    Round(c, d, e, f, g, h, a, b, K(0x923f82a4ul));\n+    Round(b, c, d, e, f, g, h, a, K(0xab1c5ed5ul));\n+    Round(a, b, c, d, e, f, g, h, K(0xd807aa98ul));\n+    Round(h, a, b, c, d, e, f, g, K(0x12835b01ul));\n+    Round(g, h, a, b, c, d, e, f, K(0x243185beul));\n+    Round(f, g, h, a, b, c, d, e, K(0x550c7dc3ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x72be5d74ul));\n+    Round(d, e, f, g, h, a, b, c, K(0x80deb1feul));\n+    Round(c, d, e, f, g, h, a, b, K(0x9bdc06a7ul));\n+    Round(b, c, d, e, f, g, h, a, K(0xc19bf374ul));\n+    Round(a, b, c, d, e, f, g, h, K(0x649b69c1ul));\n+    Round(h, a, b, c, d, e, f, g, K(0xf0fe4786ul));\n+    Round(g, h, a, b, c, d, e, f, K(0x0fe1edc6ul));\n+    Round(f, g, h, a, b, c, d, e, K(0x240cf254ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x4fe9346ful));\n+    Round(d, e, f, g, h, a, b, c, K(0x6cc984beul));\n+    Round(c, d, e, f, g, h, a, b, K(0x61b9411eul));\n+    Round(b, c, d, e, f, g, h, a, K(0x16f988faul));\n+    Round(a, b, c, d, e, f, g, h, K(0xf2c65152ul));\n+    Round(h, a, b, c, d, e, f, g, K(0xa88e5a6dul));\n+    Round(g, h, a, b, c, d, e, f, K(0xb019fc65ul));\n+    Round(f, g, h, a, b, c, d, e, K(0xb9d99ec7ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x9a1231c3ul));\n+    Round(d, e, f, g, h, a, b, c, K(0xe70eeaa0ul));\n+    Round(c, d, e, f, g, h, a, b, K(0xfdb1232bul));\n+    Round(b, c, d, e, f, g, h, a, K(0xc7353eb0ul));\n+    Round(a, b, c, d, e, f, g, h, K(0x3069bad5ul));\n+    Round(h, a, b, c, d, e, f, g, K(0xcb976d5ful));\n+    Round(g, h, a, b, c, d, e, f, K(0x5a0f118ful));\n+    Round(f, g, h, a, b, c, d, e, K(0xdc1eeefdul));\n+    Round(e, f, g, h, a, b, c, d, K(0x0a35b689ul));\n+    Round(d, e, f, g, h, a, b, c, K(0xde0b7a04ul));\n+    Round(c, d, e, f, g, h, a, b, K(0x58f4ca9dul));\n+    Round(b, c, d, e, f, g, h, a, K(0xe15d5b16ul));\n+    Round(a, b, c, d, e, f, g, h, K(0x007f3e86ul));\n+    Round(h, a, b, c, d, e, f, g, K(0x37088980ul));\n+    Round(g, h, a, b, c, d, e, f, K(0xa507ea32ul));\n+    Round(f, g, h, a, b, c, d, e, K(0x6fab9537ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x17406110ul));\n+    Round(d, e, f, g, h, a, b, c, K(0x0d8cd6f1ul));\n+    Round(c, d, e, f, g, h, a, b, K(0xcdaa3b6dul));\n+    Round(b, c, d, e, f, g, h, a, K(0xc0bbbe37ul));\n+    Round(a, b, c, d, e, f, g, h, K(0x83613bdaul));\n+    Round(h, a, b, c, d, e, f, g, K(0xdb48a363ul));\n+    Round(g, h, a, b, c, d, e, f, K(0x0b02e931ul));\n+    Round(f, g, h, a, b, c, d, e, K(0x6fd15ca7ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x521afacaul));\n+    Round(d, e, f, g, h, a, b, c, K(0x31338431ul));\n+    Round(c, d, e, f, g, h, a, b, K(0x6ed41a95ul));\n+    Round(b, c, d, e, f, g, h, a, K(0x6d437890ul));\n+    Round(a, b, c, d, e, f, g, h, K(0xc39c91f2ul));\n+    Round(h, a, b, c, d, e, f, g, K(0x9eccabbdul));\n+    Round(g, h, a, b, c, d, e, f, K(0xb5c9a0e6ul));\n+    Round(f, g, h, a, b, c, d, e, K(0x532fb63cul));\n+    Round(e, f, g, h, a, b, c, d, K(0xd2c741c6ul));\n+    Round(d, e, f, g, h, a, b, c, K(0x07237ea3ul));\n+    Round(c, d, e, f, g, h, a, b, K(0xa4954b68ul));\n+    Round(b, c, d, e, f, g, h, a, K(0x4c191d76ul));\n+\n+    w0 = Add(t0, a);\n+    w1 = Add(t1, b);\n+    w2 = Add(t2, c);\n+    w3 = Add(t3, d);\n+    w4 = Add(t4, e);\n+    w5 = Add(t5, f);\n+    w6 = Add(t6, g);\n+    w7 = Add(t7, h);\n+\n+    // Transform 3\n+    a = K(0x6a09e667ul);\n+    b = K(0xbb67ae85ul);\n+    c = K(0x3c6ef372ul);\n+    d = K(0xa54ff53aul);\n+    e = K(0x510e527ful);\n+    f = K(0x9b05688cul);\n+    g = K(0x1f83d9abul);\n+    h = K(0x5be0cd19ul);\n+\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x428a2f98ul), w0));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x71374491ul), w1));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xb5c0fbcful), w2));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xe9b5dba5ul), w3));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x3956c25bul), w4));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x59f111f1ul), w5));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x923f82a4ul), w6));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0xab1c5ed5ul), w7));\n+    Round(a, b, c, d, e, f, g, h, K(0x5807aa98ul));\n+    Round(h, a, b, c, d, e, f, g, K(0x12835b01ul));\n+    Round(g, h, a, b, c, d, e, f, K(0x243185beul));\n+    Round(f, g, h, a, b, c, d, e, K(0x550c7dc3ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x72be5d74ul));\n+    Round(d, e, f, g, h, a, b, c, K(0x80deb1feul));\n+    Round(c, d, e, f, g, h, a, b, K(0x9bdc06a7ul));\n+    Round(b, c, d, e, f, g, h, a, K(0xc19bf274ul));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0xe49b69c1ul), Inc(w0, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xefbe4786ul), Inc(w1, K(0xa00000ul), sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x0fc19dc6ul), Inc(w2, sigma1(w0), sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x240ca1ccul), Inc(w3, sigma1(w1), sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x2de92c6ful), Inc(w4, sigma1(w2), sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x4a7484aaul), Inc(w5, sigma1(w3), sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x5cb0a9dcul), Inc(w6, sigma1(w4), K(0x100ul), sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x76f988daul), Inc(w7, sigma1(w5), w0, K(0x11002000ul))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x983e5152ul), w8 = Add(K(0x80000000ul), sigma1(w6), w1)));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xa831c66dul), w9 = Add(sigma1(w7), w2)));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xb00327c8ul), w10 = Add(sigma1(w8), w3)));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xbf597fc7ul), w11 = Add(sigma1(w9), w4)));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0xc6e00bf3ul), w12 = Add(sigma1(w10), w5)));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xd5a79147ul), w13 = Add(sigma1(w11), w6)));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x06ca6351ul), w14 = Add(sigma1(w12), w7, K(0x400022ul))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x14292967ul), w15 = Add(K(0x100ul), sigma1(w13), w8, sigma0(w0))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x27b70a85ul), Inc(w0, sigma1(w14), w9, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x2e1b2138ul), Inc(w1, sigma1(w15), w10, sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x4d2c6dfcul), Inc(w2, sigma1(w0), w11, sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x53380d13ul), Inc(w3, sigma1(w1), w12, sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x650a7354ul), Inc(w4, sigma1(w2), w13, sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x766a0abbul), Inc(w5, sigma1(w3), w14, sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x81c2c92eul), Inc(w6, sigma1(w4), w15, sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x92722c85ul), Inc(w7, sigma1(w5), w0, sigma0(w8))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0xa2bfe8a1ul), Inc(w8, sigma1(w6), w1, sigma0(w9))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xa81a664bul), Inc(w9, sigma1(w7), w2, sigma0(w10))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xc24b8b70ul), Inc(w10, sigma1(w8), w3, sigma0(w11))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xc76c51a3ul), Inc(w11, sigma1(w9), w4, sigma0(w12))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0xd192e819ul), Inc(w12, sigma1(w10), w5, sigma0(w13))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xd6990624ul), Inc(w13, sigma1(w11), w6, sigma0(w14))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0xf40e3585ul), Inc(w14, sigma1(w12), w7, sigma0(w15))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x106aa070ul), Inc(w15, sigma1(w13), w8, sigma0(w0))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x19a4c116ul), Inc(w0, sigma1(w14), w9, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x1e376c08ul), Inc(w1, sigma1(w15), w10, sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x2748774cul), Inc(w2, sigma1(w0), w11, sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x34b0bcb5ul), Inc(w3, sigma1(w1), w12, sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x391c0cb3ul), Inc(w4, sigma1(w2), w13, sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x4ed8aa4aul), Inc(w5, sigma1(w3), w14, sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x5b9cca4ful), Inc(w6, sigma1(w4), w15, sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x682e6ff3ul), Inc(w7, sigma1(w5), w0, sigma0(w8))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x748f82eeul), Inc(w8, sigma1(w6), w1, sigma0(w9))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x78a5636ful), Inc(w9, sigma1(w7), w2, sigma0(w10))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x84c87814ul), Inc(w10, sigma1(w8), w3, sigma0(w11))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x8cc70208ul), Inc(w11, sigma1(w9), w4, sigma0(w12))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x90befffaul), Inc(w12, sigma1(w10), w5, sigma0(w13))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xa4506cebul), Inc(w13, sigma1(w11), w6, sigma0(w14))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0xbef9a3f7ul), w14, sigma1(w12), w7, sigma0(w15)));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0xc67178f2ul), w15, sigma1(w13), w8, sigma0(w0)));\n+\n+    // Output\n+    Write4(out, 0, Add(a, K(0x6a09e667ul)));\n+    Write4(out, 4, Add(b, K(0xbb67ae85ul)));\n+    Write4(out, 8, Add(c, K(0x3c6ef372ul)));\n+    Write4(out, 12, Add(d, K(0xa54ff53aul)));\n+    Write4(out, 16, Add(e, K(0x510e527ful)));\n+    Write4(out, 20, Add(f, K(0x9b05688cul)));\n+    Write4(out, 24, Add(g, K(0x1f83d9abul)));\n+    Write4(out, 28, Add(h, K(0x5be0cd19ul)));\n+}\n+\n+}\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDM3ZDZlMWYzMTA3YTIwYThjN2I2NmJlOGI0Yjk3MmE4MmUzYjI4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-27T08:45:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-29T21:18:05Z"
      },
      "message": "8-way AVX2 implementation for double SHA256 on 64-byte inputs",
      "tree": {
        "sha": "95478beda4c9b292bea394ed103547437aa79a75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95478beda4c9b292bea394ed103547437aa79a75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "230294bf5fdeba7213471cd0b795fb7aa36e5717",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/230294bf5fdeba7213471cd0b795fb7aa36e5717",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/230294bf5fdeba7213471cd0b795fb7aa36e5717"
      }
    ],
    "stats": {
      "total": 407,
      "additions": 402,
      "deletions": 5
    },
    "files": [
      {
        "sha": "42d8bb76eaf196c324d236209934fff9cc64bce4",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
        "patch": "@@ -305,6 +305,7 @@ fi\n # compatibility.\n AX_CHECK_COMPILE_FLAG([-msse4.2],[[SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\n AX_CHECK_COMPILE_FLAG([-msse4.1],[[SSE41_CXXFLAGS=\"-msse4.1\"]],,[[$CXXFLAG_WERROR]])\n+AX_CHECK_COMPILE_FLAG([-mavx -mavx2],[[AVX2_CXXFLAGS=\"-mavx -mavx2\"]],,[[$CXXFLAG_WERROR]])\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS $SSE42_CXXFLAGS\"\n@@ -347,6 +348,25 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n+TEMP_CXXFLAGS=\"$CXXFLAGS\"\n+CXXFLAGS=\"$CXXFLAGS $AVX2_CXXFLAGS\"\n+AC_MSG_CHECKING(for AVX2 intrinsics)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #include <stdint.h>\n+    #if defined(_MSC_VER)\n+    #include <immintrin.h>\n+    #elif defined(__GNUC__) && defined(__AVX2__)\n+    #include <x86intrin.h>\n+    #endif\n+  ]],[[\n+    __m256i l = _mm256_set1_epi32(0);\n+    return _mm256_extract_epi32(l, 7);\n+  ]])],\n+ [ AC_MSG_RESULT(yes); enable_avx2=yes; AC_DEFINE(ENABLE_AVX2, 1, [Define this symbol to build code that uses AVX2 intrinsics]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+CXXFLAGS=\"$TEMP_CXXFLAGS\"\n+\n CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n@@ -1266,6 +1286,7 @@ AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_HWCRC32],[test x$enable_hwcrc32 = xyes])\n AM_CONDITIONAL([ENABLE_SSE41],[test x$enable_sse41 = xyes])\n+AM_CONDITIONAL([ENABLE_AVX2],[test x$enable_avx2 = xyes])\n AM_CONDITIONAL([USE_ASM],[test x$use_asm = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n@@ -1305,6 +1326,7 @@ AC_SUBST(SANITIZER_CXXFLAGS)\n AC_SUBST(SANITIZER_LDFLAGS)\n AC_SUBST(SSE42_CXXFLAGS)\n AC_SUBST(SSE41_CXXFLAGS)\n+AC_SUBST(AVX2_CXXFLAGS)\n AC_SUBST(LIBTOOL_APP_LDFLAGS)\n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)"
      },
      {
        "sha": "397c7acb49f4fb10c76bd1950daf8de305ce4951",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
        "patch": "@@ -31,6 +31,7 @@ LIBBITCOIN_CLI=libbitcoin_cli.a\n LIBBITCOIN_UTIL=libbitcoin_util.a\n LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n LIBBITCOIN_CRYPTO_SSE41=crypto/libbitcoin_crypto_sse41.a\n+LIBBITCOIN_CRYPTO_AVX2=crypto/libbitcoin_crypto_avx2.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n \n@@ -52,6 +53,7 @@ $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBBITCOIN_CRYPTO_SSE41) \\\n+  $(LIBBITCOIN_CRYPTO_AVX2) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n@@ -299,6 +301,14 @@ crypto_libbitcoin_crypto_sse41_a_CPPFLAGS += -DENABLE_SSE41\n endif\n crypto_libbitcoin_crypto_sse41_a_SOURCES = crypto/sha256_sse41.cpp\n \n+crypto_libbitcoin_crypto_avx2_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+crypto_libbitcoin_crypto_avx2_a_CPPFLAGS = $(AM_CPPFLAGS)\n+if ENABLE_AVX2\n+crypto_libbitcoin_crypto_avx2_a_CXXFLAGS += $(AVX2_CXXFLAGS)\n+crypto_libbitcoin_crypto_avx2_a_CPPFLAGS += -DENABLE_AVX2\n+endif\n+crypto_libbitcoin_crypto_avx2_a_SOURCES = crypto/sha256_avx2.cpp\n+\n # consensus: shared between all executables that validate any consensus rules.\n libbitcoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -422,6 +432,7 @@ bitcoind_LDADD = \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBBITCOIN_CRYPTO_SSE41) \\\n+  $(LIBBITCOIN_CRYPTO_AVX2) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\\n@@ -444,7 +455,8 @@ bitcoin_cli_LDADD = \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n-  $(LIBBITCOIN_CRYPTO_SSE41)\n+  $(LIBBITCOIN_CRYPTO_SSE41) \\\n+  $(LIBBITCOIN_CRYPTO_AVX2)\n \n bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n #\n@@ -466,6 +478,7 @@ bitcoin_tx_LDADD = \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBBITCOIN_CRYPTO_SSE41) \\\n+  $(LIBBITCOIN_CRYPTO_AVX2) \\\n   $(LIBSECP256K1)\n \n bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)"
      },
      {
        "sha": "804df3bf21c7b901a7d576a4e62cbf1a476ed0d0",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
        "patch": "@@ -40,6 +40,7 @@ bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBBITCOIN_CRYPTO_SSE41) \\\n+  $(LIBBITCOIN_CRYPTO_AVX2) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\"
      },
      {
        "sha": "73380f6492dfc29d6bbaeccd8862752b81a79b61",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
        "patch": "@@ -407,7 +407,7 @@ endif\n if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_CRYPTO_SSE41) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_CRYPTO_SSE41) $(LIBBITCOIN_CRYPTO_AVX2) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "a4356f1cbd92c3bc4b79c93da2a8550258f1372a",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
        "patch": "@@ -62,7 +62,7 @@ endif\n if ENABLE_ZMQ\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_CRYPTO_SSE41) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_CRYPTO_SSE41) $(LIBBITCOIN_CRYPTO_AVX2) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "b3c4faed20d9e197967d8f61c65aa0866f44a71d",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
        "patch": "@@ -109,7 +109,7 @@ if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif\n \n-test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_CRYPTO_SSE41) $(LIBUNIVALUE) \\\n+test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_CRYPTO_SSE41) $(LIBBITCOIN_CRYPTO_AVX2) $(LIBUNIVALUE) \\\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n@@ -135,6 +135,7 @@ test_test_bitcoin_fuzzy_LDADD = \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBBITCOIN_CRYPTO_SSE41) \\\n+  $(LIBBITCOIN_CRYPTO_AVX2) \\\n   $(LIBSECP256K1)\n \n test_test_bitcoin_fuzzy_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)"
      },
      {
        "sha": "6ac51d11cdd86a7c7915635eb7d3d5ddc9238ae1",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
        "patch": "@@ -24,6 +24,11 @@ namespace sha256d64_sse41\n void Transform_4way(unsigned char* out, const unsigned char* in);\n }\n \n+namespace sha256d64_avx2\n+{\n+void Transform_8way(unsigned char* out, const unsigned char* in);\n+}\n+\n // Internal implementation code.\n namespace\n {\n@@ -471,19 +476,37 @@ bool SelfTest(TransformType tr) {\n TransformType Transform = sha256::Transform;\n TransformD64Type TransformD64 = sha256::TransformD64;\n TransformD64Type TransformD64_4way = nullptr;\n+TransformD64Type TransformD64_8way = nullptr;\n+\n+#if defined(USE_ASM) && (defined(__x86_64__) || defined(__amd64__))\n+// We can't use cpuid.h's __get_cpuid as it does not support subleafs.\n+void inline cpuid(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+}\n+#endif\n } // namespace\n \n+\n std::string SHA256AutoDetect()\n {\n     std::string ret = \"standard\";\n #if defined(USE_ASM) && (defined(__x86_64__) || defined(__amd64__))\n     uint32_t eax, ebx, ecx, edx;\n-    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 19) & 1) {\n+    cpuid(1, 0, eax, ebx, ecx, edx);\n+    if ((ecx >> 19) & 1) {\n         Transform = sha256_sse4::Transform;\n         TransformD64 = TransformD64Wrapper<sha256_sse4::Transform>;\n #if defined(ENABLE_SSE41) && !defined(BUILD_BITCOIN_INTERNAL)\n         TransformD64_4way = sha256d64_sse41::Transform_4way;\n         ret = \"sse4(1way+4way)\";\n+#if defined(ENABLE_AVX2) && !defined(BUILD_BITCOIN_INTERNAL)\n+        cpuid(7, 0, eax, ebx, ecx, edx);\n+        if ((ebx >> 5) & 1) {\n+            TransformD64_8way = sha256d64_avx2::Transform_8way;\n+            ret += \",avx2(8way)\";\n+        }\n+#endif\n #else\n         ret = \"sse4\";\n #endif\n@@ -553,6 +576,14 @@ CSHA256& CSHA256::Reset()\n \n void SHA256D64(unsigned char* out, const unsigned char* in, size_t blocks)\n {\n+    if (TransformD64_8way) {\n+        while (blocks >= 8) {\n+            TransformD64_8way(out, in);\n+            out += 256;\n+            in += 512;\n+            blocks -= 8;\n+        }\n+    }\n     if (TransformD64_4way) {\n         while (blocks >= 4) {\n             TransformD64_4way(out, in);"
      },
      {
        "sha": "f45c1d4ab6a7bde5516b1106ddd23601b8e1168e",
        "filename": "src/crypto/sha256_avx2.cpp",
        "status": "added",
        "additions": 329,
        "deletions": 0,
        "changes": 329,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/crypto/sha256_avx2.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28/src/crypto/sha256_avx2.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256_avx2.cpp?ref=4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
        "patch": "@@ -0,0 +1,329 @@\n+#ifdef ENABLE_AVX2\n+\n+#include <stdint.h>\n+#if defined(_MSC_VER)\n+#include <immintrin.h>\n+#elif defined(__GNUC__)\n+#include <x86intrin.h>\n+#endif\n+\n+#include \"crypto/sha256.h\"\n+#include \"crypto/common.h\"\n+\n+namespace sha256d64_avx2 {\n+namespace {\n+\n+__m256i inline K(uint32_t x) { return _mm256_set1_epi32(x); }\n+\n+__m256i inline Add(__m256i x, __m256i y) { return _mm256_add_epi32(x, y); }\n+__m256i inline Add(__m256i x, __m256i y, __m256i z) { return Add(Add(x, y), z); }\n+__m256i inline Add(__m256i x, __m256i y, __m256i z, __m256i w) { return Add(Add(x, y), Add(z, w)); }\n+__m256i inline Add(__m256i x, __m256i y, __m256i z, __m256i w, __m256i v) { return Add(Add(x, y, z), Add(w, v)); }\n+__m256i inline Inc(__m256i& x, __m256i y) { x = Add(x, y); return x; }\n+__m256i inline Inc(__m256i& x, __m256i y, __m256i z) { x = Add(x, y, z); return x; }\n+__m256i inline Inc(__m256i& x, __m256i y, __m256i z, __m256i w) { x = Add(x, y, z, w); return x; }\n+__m256i inline Xor(__m256i x, __m256i y) { return _mm256_xor_si256(x, y); }\n+__m256i inline Xor(__m256i x, __m256i y, __m256i z) { return Xor(Xor(x, y), z); }\n+__m256i inline Or(__m256i x, __m256i y) { return _mm256_or_si256(x, y); }\n+__m256i inline And(__m256i x, __m256i y) { return _mm256_and_si256(x, y); }\n+__m256i inline ShR(__m256i x, int n) { return _mm256_srli_epi32(x, n); }\n+__m256i inline ShL(__m256i x, int n) { return _mm256_slli_epi32(x, n); }\n+\n+__m256i inline Ch(__m256i x, __m256i y, __m256i z) { return Xor(z, And(x, Xor(y, z))); }\n+__m256i inline Maj(__m256i x, __m256i y, __m256i z) { return Or(And(x, y), And(z, Or(x, y))); }\n+__m256i inline Sigma0(__m256i x) { return Xor(Or(ShR(x, 2), ShL(x, 30)), Or(ShR(x, 13), ShL(x, 19)), Or(ShR(x, 22), ShL(x, 10))); }\n+__m256i inline Sigma1(__m256i x) { return Xor(Or(ShR(x, 6), ShL(x, 26)), Or(ShR(x, 11), ShL(x, 21)), Or(ShR(x, 25), ShL(x, 7))); }\n+__m256i inline sigma0(__m256i x) { return Xor(Or(ShR(x, 7), ShL(x, 25)), Or(ShR(x, 18), ShL(x, 14)), ShR(x, 3)); }\n+__m256i inline sigma1(__m256i x) { return Xor(Or(ShR(x, 17), ShL(x, 15)), Or(ShR(x, 19), ShL(x, 13)), ShR(x, 10)); }\n+\n+/** One round of SHA-256. */\n+void inline __attribute__((always_inline)) Round(__m256i a, __m256i b, __m256i c, __m256i& d, __m256i e, __m256i f, __m256i g, __m256i& h, __m256i k)\n+{\n+    __m256i t1 = Add(h, Sigma1(e), Ch(e, f, g), k);\n+    __m256i t2 = Add(Sigma0(a), Maj(a, b, c));\n+    d = Add(d, t1);\n+    h = Add(t1, t2);\n+}\n+\n+__m256i inline Read8(const unsigned char* chunk, int offset) {\n+    __m256i ret = _mm256_set_epi32(\n+        ReadLE32(chunk + 0 + offset),\n+        ReadLE32(chunk + 64 + offset),\n+        ReadLE32(chunk + 128 + offset),\n+        ReadLE32(chunk + 192 + offset),\n+        ReadLE32(chunk + 256 + offset),\n+        ReadLE32(chunk + 320 + offset),\n+        ReadLE32(chunk + 384 + offset),\n+        ReadLE32(chunk + 448 + offset)\n+    );\n+    return _mm256_shuffle_epi8(ret, _mm256_set_epi32(0x0C0D0E0FUL, 0x08090A0BUL, 0x04050607UL, 0x00010203UL, 0x0C0D0E0FUL, 0x08090A0BUL, 0x04050607UL, 0x00010203UL));\n+}\n+\n+void inline Write8(unsigned char* out, int offset, __m256i v) {\n+    v = _mm256_shuffle_epi8(v, _mm256_set_epi32(0x0C0D0E0FUL, 0x08090A0BUL, 0x04050607UL, 0x00010203UL, 0x0C0D0E0FUL, 0x08090A0BUL, 0x04050607UL, 0x00010203UL));\n+    WriteLE32(out + 0 + offset, _mm256_extract_epi32(v, 7));\n+    WriteLE32(out + 32 + offset, _mm256_extract_epi32(v, 6));\n+    WriteLE32(out + 64 + offset, _mm256_extract_epi32(v, 5));\n+    WriteLE32(out + 96 + offset, _mm256_extract_epi32(v, 4));\n+    WriteLE32(out + 128 + offset, _mm256_extract_epi32(v, 3));\n+    WriteLE32(out + 160 + offset, _mm256_extract_epi32(v, 2));\n+    WriteLE32(out + 192 + offset, _mm256_extract_epi32(v, 1));\n+    WriteLE32(out + 224 + offset, _mm256_extract_epi32(v, 0));\n+}\n+\n+}\n+\n+void Transform_8way(unsigned char* out, const unsigned char* in)\n+{\n+    // Transform 1\n+    __m256i a = K(0x6a09e667ul);\n+    __m256i b = K(0xbb67ae85ul);\n+    __m256i c = K(0x3c6ef372ul);\n+    __m256i d = K(0xa54ff53aul);\n+    __m256i e = K(0x510e527ful);\n+    __m256i f = K(0x9b05688cul);\n+    __m256i g = K(0x1f83d9abul);\n+    __m256i h = K(0x5be0cd19ul);\n+\n+    __m256i w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x428a2f98ul), w0 = Read8(in, 0)));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x71374491ul), w1 = Read8(in, 4)));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xb5c0fbcful), w2 = Read8(in, 8)));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xe9b5dba5ul), w3 = Read8(in, 12)));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x3956c25bul), w4 = Read8(in, 16)));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x59f111f1ul), w5 = Read8(in, 20)));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x923f82a4ul), w6 = Read8(in, 24)));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0xab1c5ed5ul), w7 = Read8(in, 28)));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0xd807aa98ul), w8 = Read8(in, 32)));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x12835b01ul), w9 = Read8(in, 36)));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x243185beul), w10 = Read8(in, 40)));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x550c7dc3ul), w11 = Read8(in, 44)));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x72be5d74ul), w12 = Read8(in, 48)));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x80deb1feul), w13 = Read8(in, 52)));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x9bdc06a7ul), w14 = Read8(in, 56)));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0xc19bf174ul), w15 = Read8(in, 60)));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0xe49b69c1ul), Inc(w0, sigma1(w14), w9, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xefbe4786ul), Inc(w1, sigma1(w15), w10, sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x0fc19dc6ul), Inc(w2, sigma1(w0), w11, sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x240ca1ccul), Inc(w3, sigma1(w1), w12, sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x2de92c6ful), Inc(w4, sigma1(w2), w13, sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x4a7484aaul), Inc(w5, sigma1(w3), w14, sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x5cb0a9dcul), Inc(w6, sigma1(w4), w15, sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x76f988daul), Inc(w7, sigma1(w5), w0, sigma0(w8))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x983e5152ul), Inc(w8, sigma1(w6), w1, sigma0(w9))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xa831c66dul), Inc(w9, sigma1(w7), w2, sigma0(w10))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xb00327c8ul), Inc(w10, sigma1(w8), w3, sigma0(w11))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xbf597fc7ul), Inc(w11, sigma1(w9), w4, sigma0(w12))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0xc6e00bf3ul), Inc(w12, sigma1(w10), w5, sigma0(w13))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xd5a79147ul), Inc(w13, sigma1(w11), w6, sigma0(w14))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x06ca6351ul), Inc(w14, sigma1(w12), w7, sigma0(w15))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x14292967ul), Inc(w15, sigma1(w13), w8, sigma0(w0))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x27b70a85ul), Inc(w0, sigma1(w14), w9, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x2e1b2138ul), Inc(w1, sigma1(w15), w10, sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x4d2c6dfcul), Inc(w2, sigma1(w0), w11, sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x53380d13ul), Inc(w3, sigma1(w1), w12, sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x650a7354ul), Inc(w4, sigma1(w2), w13, sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x766a0abbul), Inc(w5, sigma1(w3), w14, sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x81c2c92eul), Inc(w6, sigma1(w4), w15, sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x92722c85ul), Inc(w7, sigma1(w5), w0, sigma0(w8))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0xa2bfe8a1ul), Inc(w8, sigma1(w6), w1, sigma0(w9))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xa81a664bul), Inc(w9, sigma1(w7), w2, sigma0(w10))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xc24b8b70ul), Inc(w10, sigma1(w8), w3, sigma0(w11))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xc76c51a3ul), Inc(w11, sigma1(w9), w4, sigma0(w12))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0xd192e819ul), Inc(w12, sigma1(w10), w5, sigma0(w13))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xd6990624ul), Inc(w13, sigma1(w11), w6, sigma0(w14))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0xf40e3585ul), Inc(w14, sigma1(w12), w7, sigma0(w15))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x106aa070ul), Inc(w15, sigma1(w13), w8, sigma0(w0))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x19a4c116ul), Inc(w0, sigma1(w14), w9, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x1e376c08ul), Inc(w1, sigma1(w15), w10, sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x2748774cul), Inc(w2, sigma1(w0), w11, sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x34b0bcb5ul), Inc(w3, sigma1(w1), w12, sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x391c0cb3ul), Inc(w4, sigma1(w2), w13, sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x4ed8aa4aul), Inc(w5, sigma1(w3), w14, sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x5b9cca4ful), Inc(w6, sigma1(w4), w15, sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x682e6ff3ul), Inc(w7, sigma1(w5), w0, sigma0(w8))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x748f82eeul), Inc(w8, sigma1(w6), w1, sigma0(w9))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x78a5636ful), Inc(w9, sigma1(w7), w2, sigma0(w10))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x84c87814ul), Inc(w10, sigma1(w8), w3, sigma0(w11))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x8cc70208ul), Inc(w11, sigma1(w9), w4, sigma0(w12))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x90befffaul), Inc(w12, sigma1(w10), w5, sigma0(w13))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xa4506cebul), Inc(w13, sigma1(w11), w6, sigma0(w14))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0xbef9a3f7ul), Inc(w14, sigma1(w12), w7, sigma0(w15))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0xc67178f2ul), Inc(w15, sigma1(w13), w8, sigma0(w0))));\n+\n+    a = Add(a, K(0x6a09e667ul));\n+    b = Add(b, K(0xbb67ae85ul));\n+    c = Add(c, K(0x3c6ef372ul));\n+    d = Add(d, K(0xa54ff53aul));\n+    e = Add(e, K(0x510e527ful));\n+    f = Add(f, K(0x9b05688cul));\n+    g = Add(g, K(0x1f83d9abul));\n+    h = Add(h, K(0x5be0cd19ul));\n+\n+    __m256i t0 = a, t1 = b, t2 = c, t3 = d, t4 = e, t5 = f, t6 = g, t7 = h;\n+\n+    // Transform 2\n+    Round(a, b, c, d, e, f, g, h, K(0xc28a2f98ul));\n+    Round(h, a, b, c, d, e, f, g, K(0x71374491ul));\n+    Round(g, h, a, b, c, d, e, f, K(0xb5c0fbcful));\n+    Round(f, g, h, a, b, c, d, e, K(0xe9b5dba5ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x3956c25bul));\n+    Round(d, e, f, g, h, a, b, c, K(0x59f111f1ul));\n+    Round(c, d, e, f, g, h, a, b, K(0x923f82a4ul));\n+    Round(b, c, d, e, f, g, h, a, K(0xab1c5ed5ul));\n+    Round(a, b, c, d, e, f, g, h, K(0xd807aa98ul));\n+    Round(h, a, b, c, d, e, f, g, K(0x12835b01ul));\n+    Round(g, h, a, b, c, d, e, f, K(0x243185beul));\n+    Round(f, g, h, a, b, c, d, e, K(0x550c7dc3ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x72be5d74ul));\n+    Round(d, e, f, g, h, a, b, c, K(0x80deb1feul));\n+    Round(c, d, e, f, g, h, a, b, K(0x9bdc06a7ul));\n+    Round(b, c, d, e, f, g, h, a, K(0xc19bf374ul));\n+    Round(a, b, c, d, e, f, g, h, K(0x649b69c1ul));\n+    Round(h, a, b, c, d, e, f, g, K(0xf0fe4786ul));\n+    Round(g, h, a, b, c, d, e, f, K(0x0fe1edc6ul));\n+    Round(f, g, h, a, b, c, d, e, K(0x240cf254ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x4fe9346ful));\n+    Round(d, e, f, g, h, a, b, c, K(0x6cc984beul));\n+    Round(c, d, e, f, g, h, a, b, K(0x61b9411eul));\n+    Round(b, c, d, e, f, g, h, a, K(0x16f988faul));\n+    Round(a, b, c, d, e, f, g, h, K(0xf2c65152ul));\n+    Round(h, a, b, c, d, e, f, g, K(0xa88e5a6dul));\n+    Round(g, h, a, b, c, d, e, f, K(0xb019fc65ul));\n+    Round(f, g, h, a, b, c, d, e, K(0xb9d99ec7ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x9a1231c3ul));\n+    Round(d, e, f, g, h, a, b, c, K(0xe70eeaa0ul));\n+    Round(c, d, e, f, g, h, a, b, K(0xfdb1232bul));\n+    Round(b, c, d, e, f, g, h, a, K(0xc7353eb0ul));\n+    Round(a, b, c, d, e, f, g, h, K(0x3069bad5ul));\n+    Round(h, a, b, c, d, e, f, g, K(0xcb976d5ful));\n+    Round(g, h, a, b, c, d, e, f, K(0x5a0f118ful));\n+    Round(f, g, h, a, b, c, d, e, K(0xdc1eeefdul));\n+    Round(e, f, g, h, a, b, c, d, K(0x0a35b689ul));\n+    Round(d, e, f, g, h, a, b, c, K(0xde0b7a04ul));\n+    Round(c, d, e, f, g, h, a, b, K(0x58f4ca9dul));\n+    Round(b, c, d, e, f, g, h, a, K(0xe15d5b16ul));\n+    Round(a, b, c, d, e, f, g, h, K(0x007f3e86ul));\n+    Round(h, a, b, c, d, e, f, g, K(0x37088980ul));\n+    Round(g, h, a, b, c, d, e, f, K(0xa507ea32ul));\n+    Round(f, g, h, a, b, c, d, e, K(0x6fab9537ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x17406110ul));\n+    Round(d, e, f, g, h, a, b, c, K(0x0d8cd6f1ul));\n+    Round(c, d, e, f, g, h, a, b, K(0xcdaa3b6dul));\n+    Round(b, c, d, e, f, g, h, a, K(0xc0bbbe37ul));\n+    Round(a, b, c, d, e, f, g, h, K(0x83613bdaul));\n+    Round(h, a, b, c, d, e, f, g, K(0xdb48a363ul));\n+    Round(g, h, a, b, c, d, e, f, K(0x0b02e931ul));\n+    Round(f, g, h, a, b, c, d, e, K(0x6fd15ca7ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x521afacaul));\n+    Round(d, e, f, g, h, a, b, c, K(0x31338431ul));\n+    Round(c, d, e, f, g, h, a, b, K(0x6ed41a95ul));\n+    Round(b, c, d, e, f, g, h, a, K(0x6d437890ul));\n+    Round(a, b, c, d, e, f, g, h, K(0xc39c91f2ul));\n+    Round(h, a, b, c, d, e, f, g, K(0x9eccabbdul));\n+    Round(g, h, a, b, c, d, e, f, K(0xb5c9a0e6ul));\n+    Round(f, g, h, a, b, c, d, e, K(0x532fb63cul));\n+    Round(e, f, g, h, a, b, c, d, K(0xd2c741c6ul));\n+    Round(d, e, f, g, h, a, b, c, K(0x07237ea3ul));\n+    Round(c, d, e, f, g, h, a, b, K(0xa4954b68ul));\n+    Round(b, c, d, e, f, g, h, a, K(0x4c191d76ul));\n+\n+    w0 = Add(t0, a);\n+    w1 = Add(t1, b);\n+    w2 = Add(t2, c);\n+    w3 = Add(t3, d);\n+    w4 = Add(t4, e);\n+    w5 = Add(t5, f);\n+    w6 = Add(t6, g);\n+    w7 = Add(t7, h);\n+\n+    // Transform 3\n+    a = K(0x6a09e667ul);\n+    b = K(0xbb67ae85ul);\n+    c = K(0x3c6ef372ul);\n+    d = K(0xa54ff53aul);\n+    e = K(0x510e527ful);\n+    f = K(0x9b05688cul);\n+    g = K(0x1f83d9abul);\n+    h = K(0x5be0cd19ul);\n+\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x428a2f98ul), w0));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x71374491ul), w1));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xb5c0fbcful), w2));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xe9b5dba5ul), w3));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x3956c25bul), w4));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x59f111f1ul), w5));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x923f82a4ul), w6));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0xab1c5ed5ul), w7));\n+    Round(a, b, c, d, e, f, g, h, K(0x5807aa98ul));\n+    Round(h, a, b, c, d, e, f, g, K(0x12835b01ul));\n+    Round(g, h, a, b, c, d, e, f, K(0x243185beul));\n+    Round(f, g, h, a, b, c, d, e, K(0x550c7dc3ul));\n+    Round(e, f, g, h, a, b, c, d, K(0x72be5d74ul));\n+    Round(d, e, f, g, h, a, b, c, K(0x80deb1feul));\n+    Round(c, d, e, f, g, h, a, b, K(0x9bdc06a7ul));\n+    Round(b, c, d, e, f, g, h, a, K(0xc19bf274ul));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0xe49b69c1ul), Inc(w0, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xefbe4786ul), Inc(w1, K(0xa00000ul), sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x0fc19dc6ul), Inc(w2, sigma1(w0), sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x240ca1ccul), Inc(w3, sigma1(w1), sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x2de92c6ful), Inc(w4, sigma1(w2), sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x4a7484aaul), Inc(w5, sigma1(w3), sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x5cb0a9dcul), Inc(w6, sigma1(w4), K(0x100ul), sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x76f988daul), Inc(w7, sigma1(w5), w0, K(0x11002000ul))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x983e5152ul), w8 = Add(K(0x80000000ul), sigma1(w6), w1)));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xa831c66dul), w9 = Add(sigma1(w7), w2)));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xb00327c8ul), w10 = Add(sigma1(w8), w3)));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xbf597fc7ul), w11 = Add(sigma1(w9), w4)));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0xc6e00bf3ul), w12 = Add(sigma1(w10), w5)));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xd5a79147ul), w13 = Add(sigma1(w11), w6)));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x06ca6351ul), w14 = Add(sigma1(w12), w7, K(0x400022ul))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x14292967ul), w15 = Add(K(0x100ul), sigma1(w13), w8, sigma0(w0))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x27b70a85ul), Inc(w0, sigma1(w14), w9, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x2e1b2138ul), Inc(w1, sigma1(w15), w10, sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x4d2c6dfcul), Inc(w2, sigma1(w0), w11, sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x53380d13ul), Inc(w3, sigma1(w1), w12, sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x650a7354ul), Inc(w4, sigma1(w2), w13, sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x766a0abbul), Inc(w5, sigma1(w3), w14, sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x81c2c92eul), Inc(w6, sigma1(w4), w15, sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x92722c85ul), Inc(w7, sigma1(w5), w0, sigma0(w8))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0xa2bfe8a1ul), Inc(w8, sigma1(w6), w1, sigma0(w9))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0xa81a664bul), Inc(w9, sigma1(w7), w2, sigma0(w10))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0xc24b8b70ul), Inc(w10, sigma1(w8), w3, sigma0(w11))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0xc76c51a3ul), Inc(w11, sigma1(w9), w4, sigma0(w12))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0xd192e819ul), Inc(w12, sigma1(w10), w5, sigma0(w13))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xd6990624ul), Inc(w13, sigma1(w11), w6, sigma0(w14))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0xf40e3585ul), Inc(w14, sigma1(w12), w7, sigma0(w15))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x106aa070ul), Inc(w15, sigma1(w13), w8, sigma0(w0))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x19a4c116ul), Inc(w0, sigma1(w14), w9, sigma0(w1))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x1e376c08ul), Inc(w1, sigma1(w15), w10, sigma0(w2))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x2748774cul), Inc(w2, sigma1(w0), w11, sigma0(w3))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x34b0bcb5ul), Inc(w3, sigma1(w1), w12, sigma0(w4))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x391c0cb3ul), Inc(w4, sigma1(w2), w13, sigma0(w5))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0x4ed8aa4aul), Inc(w5, sigma1(w3), w14, sigma0(w6))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0x5b9cca4ful), Inc(w6, sigma1(w4), w15, sigma0(w7))));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0x682e6ff3ul), Inc(w7, sigma1(w5), w0, sigma0(w8))));\n+    Round(a, b, c, d, e, f, g, h, Add(K(0x748f82eeul), Inc(w8, sigma1(w6), w1, sigma0(w9))));\n+    Round(h, a, b, c, d, e, f, g, Add(K(0x78a5636ful), Inc(w9, sigma1(w7), w2, sigma0(w10))));\n+    Round(g, h, a, b, c, d, e, f, Add(K(0x84c87814ul), Inc(w10, sigma1(w8), w3, sigma0(w11))));\n+    Round(f, g, h, a, b, c, d, e, Add(K(0x8cc70208ul), Inc(w11, sigma1(w9), w4, sigma0(w12))));\n+    Round(e, f, g, h, a, b, c, d, Add(K(0x90befffaul), Inc(w12, sigma1(w10), w5, sigma0(w13))));\n+    Round(d, e, f, g, h, a, b, c, Add(K(0xa4506cebul), Inc(w13, sigma1(w11), w6, sigma0(w14))));\n+    Round(c, d, e, f, g, h, a, b, Add(K(0xbef9a3f7ul), w14, sigma1(w12), w7, sigma0(w15)));\n+    Round(b, c, d, e, f, g, h, a, Add(K(0xc67178f2ul), w15, sigma1(w13), w8, sigma0(w0)));\n+\n+    // Output\n+    Write8(out, 0, Add(a, K(0x6a09e667ul)));\n+    Write8(out, 4, Add(b, K(0xbb67ae85ul)));\n+    Write8(out, 8, Add(c, K(0x3c6ef372ul)));\n+    Write8(out, 12, Add(d, K(0xa54ff53aul)));\n+    Write8(out, 16, Add(e, K(0x510e527ful)));\n+    Write8(out, 20, Add(f, K(0x9b05688cul)));\n+    Write8(out, 24, Add(g, K(0x1f83d9abul)));\n+    Write8(out, 28, Add(h, K(0x5be0cd19ul)));\n+}\n+\n+}\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "4defdfab94504018f822dc34a313ad26cedc8255",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGVmZGZhYjk0NTA0MDE4ZjgyMmRjMzRhMzEzYWQyNmNlZGM4MjU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-12T18:48:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-29T21:20:12Z"
      },
      "message": "[MOVEONLY] Move unused Merkle branch code to tests",
      "tree": {
        "sha": "01ef5f955125b86070531fcb53c25791fdbde479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01ef5f955125b86070531fcb53c25791fdbde479"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4defdfab94504018f822dc34a313ad26cedc8255",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4defdfab94504018f822dc34a313ad26cedc8255",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4defdfab94504018f822dc34a313ad26cedc8255",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4defdfab94504018f822dc34a313ad26cedc8255/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4437d6e1f3107a20a8c7b66be8b4b972a82e3b28"
      }
    ],
    "stats": {
      "total": 242,
      "additions": 118,
      "deletions": 124
    },
    "files": [
      {
        "sha": "07cd109cc18bf95d1a4f20b253a14f116d520baf",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 114,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4defdfab94504018f822dc34a313ad26cedc8255/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4defdfab94504018f822dc34a313ad26cedc8255/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=4defdfab94504018f822dc34a313ad26cedc8255",
        "patch": "@@ -42,93 +42,6 @@\n        root.\n */\n \n-/* This implements a constant-space merkle root/path calculator, limited to 2^32 leaves. */\n-static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot, bool* pmutated, uint32_t branchpos, std::vector<uint256>* pbranch) {\n-    if (pbranch) pbranch->clear();\n-    if (leaves.size() == 0) {\n-        if (pmutated) *pmutated = false;\n-        if (proot) *proot = uint256();\n-        return;\n-    }\n-    bool mutated = false;\n-    // count is the number of leaves processed so far.\n-    uint32_t count = 0;\n-    // inner is an array of eagerly computed subtree hashes, indexed by tree\n-    // level (0 being the leaves).\n-    // For example, when count is 25 (11001 in binary), inner[4] is the hash of\n-    // the first 16 leaves, inner[3] of the next 8 leaves, and inner[0] equal to\n-    // the last leaf. The other inner entries are undefined.\n-    uint256 inner[32];\n-    // Which position in inner is a hash that depends on the matching leaf.\n-    int matchlevel = -1;\n-    // First process all leaves into 'inner' values.\n-    while (count < leaves.size()) {\n-        uint256 h = leaves[count];\n-        bool matchh = count == branchpos;\n-        count++;\n-        int level;\n-        // For each of the lower bits in count that are 0, do 1 step. Each\n-        // corresponds to an inner value that existed before processing the\n-        // current leaf, and each needs a hash to combine it.\n-        for (level = 0; !(count & (((uint32_t)1) << level)); level++) {\n-            if (pbranch) {\n-                if (matchh) {\n-                    pbranch->push_back(inner[level]);\n-                } else if (matchlevel == level) {\n-                    pbranch->push_back(h);\n-                    matchh = true;\n-                }\n-            }\n-            mutated |= (inner[level] == h);\n-            CHash256().Write(inner[level].begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n-        }\n-        // Store the resulting hash at inner position level.\n-        inner[level] = h;\n-        if (matchh) {\n-            matchlevel = level;\n-        }\n-    }\n-    // Do a final 'sweep' over the rightmost branch of the tree to process\n-    // odd levels, and reduce everything to a single top value.\n-    // Level is the level (counted from the bottom) up to which we've sweeped.\n-    int level = 0;\n-    // As long as bit number level in count is zero, skip it. It means there\n-    // is nothing left at this level.\n-    while (!(count & (((uint32_t)1) << level))) {\n-        level++;\n-    }\n-    uint256 h = inner[level];\n-    bool matchh = matchlevel == level;\n-    while (count != (((uint32_t)1) << level)) {\n-        // If we reach this point, h is an inner value that is not the top.\n-        // We combine it with itself (Bitcoin's special rule for odd levels in\n-        // the tree) to produce a higher level one.\n-        if (pbranch && matchh) {\n-            pbranch->push_back(h);\n-        }\n-        CHash256().Write(h.begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n-        // Increment count to the value it would have if two entries at this\n-        // level had existed.\n-        count += (((uint32_t)1) << level);\n-        level++;\n-        // And propagate the result upwards accordingly.\n-        while (!(count & (((uint32_t)1) << level))) {\n-            if (pbranch) {\n-                if (matchh) {\n-                    pbranch->push_back(inner[level]);\n-                } else if (matchlevel == level) {\n-                    pbranch->push_back(h);\n-                    matchh = true;\n-                }\n-            }\n-            CHash256().Write(inner[level].begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n-            level++;\n-        }\n-    }\n-    // Return result.\n-    if (pmutated) *pmutated = mutated;\n-    if (proot) *proot = h;\n-}\n \n uint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) {\n     bool mutation = false;\n@@ -149,24 +62,6 @@ uint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) {\n     return hashes[0];\n }\n \n-std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position) {\n-    std::vector<uint256> ret;\n-    MerkleComputation(leaves, nullptr, nullptr, position, &ret);\n-    return ret;\n-}\n-\n-uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& vMerkleBranch, uint32_t nIndex) {\n-    uint256 hash = leaf;\n-    for (std::vector<uint256>::const_iterator it = vMerkleBranch.begin(); it != vMerkleBranch.end(); ++it) {\n-        if (nIndex & 1) {\n-            hash = Hash(BEGIN(*it), END(*it), BEGIN(hash), END(hash));\n-        } else {\n-            hash = Hash(BEGIN(hash), END(hash), BEGIN(*it), END(*it));\n-        }\n-        nIndex >>= 1;\n-    }\n-    return hash;\n-}\n \n uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)\n {\n@@ -189,12 +84,3 @@ uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)\n     return ComputeMerkleRoot(std::move(leaves), mutated);\n }\n \n-std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)\n-{\n-    std::vector<uint256> leaves;\n-    leaves.resize(block.vtx.size());\n-    for (size_t s = 0; s < block.vtx.size(); s++) {\n-        leaves[s] = block.vtx[s]->GetHash();\n-    }\n-    return ComputeMerkleBranch(leaves, position);\n-}"
      },
      {
        "sha": "01d75b132977428d94d36b1f87b074e3fc46b670",
        "filename": "src/consensus/merkle.h",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4defdfab94504018f822dc34a313ad26cedc8255/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4defdfab94504018f822dc34a313ad26cedc8255/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=4defdfab94504018f822dc34a313ad26cedc8255",
        "patch": "@@ -12,9 +12,7 @@\n #include <primitives/block.h>\n #include <uint256.h>\n \n-uint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated);\n-std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position);\n-uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& branch, uint32_t position);\n+uint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated = nullptr);\n \n /*\n  * Compute the Merkle root of the transactions in a block.\n@@ -28,11 +26,4 @@ uint256 BlockMerkleRoot(const CBlock& block, bool* mutated = nullptr);\n  */\n uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated = nullptr);\n \n-/*\n- * Compute the Merkle branch for the tree of transactions in a block, for a\n- * given position.\n- * This can be verified using ComputeMerkleRootFromBranch.\n- */\n-std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position);\n-\n #endif // BITCOIN_CONSENSUS_MERKLE_H"
      },
      {
        "sha": "259e45dacfcff6a7418c84567f9824b6523c2d4d",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 117,
        "deletions": 0,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4defdfab94504018f822dc34a313ad26cedc8255/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4defdfab94504018f822dc34a313ad26cedc8255/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=4defdfab94504018f822dc34a313ad26cedc8255",
        "patch": "@@ -9,6 +9,123 @@\n \n BOOST_FIXTURE_TEST_SUITE(merkle_tests, TestingSetup)\n \n+static uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& vMerkleBranch, uint32_t nIndex) {\n+    uint256 hash = leaf;\n+    for (std::vector<uint256>::const_iterator it = vMerkleBranch.begin(); it != vMerkleBranch.end(); ++it) {\n+        if (nIndex & 1) {\n+            hash = Hash(BEGIN(*it), END(*it), BEGIN(hash), END(hash));\n+        } else {\n+            hash = Hash(BEGIN(hash), END(hash), BEGIN(*it), END(*it));\n+        }\n+        nIndex >>= 1;\n+    }\n+    return hash;\n+}\n+\n+/* This implements a constant-space merkle root/path calculator, limited to 2^32 leaves. */\n+static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot, bool* pmutated, uint32_t branchpos, std::vector<uint256>* pbranch) {\n+    if (pbranch) pbranch->clear();\n+    if (leaves.size() == 0) {\n+        if (pmutated) *pmutated = false;\n+        if (proot) *proot = uint256();\n+        return;\n+    }\n+    bool mutated = false;\n+    // count is the number of leaves processed so far.\n+    uint32_t count = 0;\n+    // inner is an array of eagerly computed subtree hashes, indexed by tree\n+    // level (0 being the leaves).\n+    // For example, when count is 25 (11001 in binary), inner[4] is the hash of\n+    // the first 16 leaves, inner[3] of the next 8 leaves, and inner[0] equal to\n+    // the last leaf. The other inner entries are undefined.\n+    uint256 inner[32];\n+    // Which position in inner is a hash that depends on the matching leaf.\n+    int matchlevel = -1;\n+    // First process all leaves into 'inner' values.\n+    while (count < leaves.size()) {\n+        uint256 h = leaves[count];\n+        bool matchh = count == branchpos;\n+        count++;\n+        int level;\n+        // For each of the lower bits in count that are 0, do 1 step. Each\n+        // corresponds to an inner value that existed before processing the\n+        // current leaf, and each needs a hash to combine it.\n+        for (level = 0; !(count & (((uint32_t)1) << level)); level++) {\n+            if (pbranch) {\n+                if (matchh) {\n+                    pbranch->push_back(inner[level]);\n+                } else if (matchlevel == level) {\n+                    pbranch->push_back(h);\n+                    matchh = true;\n+                }\n+            }\n+            mutated |= (inner[level] == h);\n+            CHash256().Write(inner[level].begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+        }\n+        // Store the resulting hash at inner position level.\n+        inner[level] = h;\n+        if (matchh) {\n+            matchlevel = level;\n+        }\n+    }\n+    // Do a final 'sweep' over the rightmost branch of the tree to process\n+    // odd levels, and reduce everything to a single top value.\n+    // Level is the level (counted from the bottom) up to which we've sweeped.\n+    int level = 0;\n+    // As long as bit number level in count is zero, skip it. It means there\n+    // is nothing left at this level.\n+    while (!(count & (((uint32_t)1) << level))) {\n+        level++;\n+    }\n+    uint256 h = inner[level];\n+    bool matchh = matchlevel == level;\n+    while (count != (((uint32_t)1) << level)) {\n+        // If we reach this point, h is an inner value that is not the top.\n+        // We combine it with itself (Bitcoin's special rule for odd levels in\n+        // the tree) to produce a higher level one.\n+        if (pbranch && matchh) {\n+            pbranch->push_back(h);\n+        }\n+        CHash256().Write(h.begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+        // Increment count to the value it would have if two entries at this\n+        // level had existed.\n+        count += (((uint32_t)1) << level);\n+        level++;\n+        // And propagate the result upwards accordingly.\n+        while (!(count & (((uint32_t)1) << level))) {\n+            if (pbranch) {\n+                if (matchh) {\n+                    pbranch->push_back(inner[level]);\n+                } else if (matchlevel == level) {\n+                    pbranch->push_back(h);\n+                    matchh = true;\n+                }\n+            }\n+            CHash256().Write(inner[level].begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+            level++;\n+        }\n+    }\n+    // Return result.\n+    if (pmutated) *pmutated = mutated;\n+    if (proot) *proot = h;\n+}\n+\n+static std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position) {\n+    std::vector<uint256> ret;\n+    MerkleComputation(leaves, nullptr, nullptr, position, &ret);\n+    return ret;\n+}\n+\n+static std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)\n+{\n+    std::vector<uint256> leaves;\n+    leaves.resize(block.vtx.size());\n+    for (size_t s = 0; s < block.vtx.size(); s++) {\n+        leaves[s] = block.vtx[s]->GetHash();\n+    }\n+    return ComputeMerkleBranch(leaves, position);\n+}\n+\n // Older version of the merkle root computation code, for comparison.\n static uint256 BlockBuildMerkleTree(const CBlock& block, bool* fMutated, std::vector<uint256>& vMerkleTree)\n {"
      }
    ]
  }
]