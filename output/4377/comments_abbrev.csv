jtimon,2014-06-25T10:10:10Z,"Maybe I should have just put #4393 into this one... \nEdit: or even inside the ""Decouple UpdateTime from pow"" commit.\n",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-47082933,47082933,
laanwj,2014-06-25T10:21:36Z,"@drak As it changes how verifying POW works, this looks kind of risky and needs extensive testing and review. It's not an easy merge like the code move.\n",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-47083852,47083852,
jtimon,2014-06-25T10:36:05Z,"I think both commits are straight-forward to merge, specially the first one.\nFor the second one you may need to grep UpdateTime and see that nBits are always set after it's called to believe it.\nOn the other hand #4393 seems more risky, so any advice for modifying or writing new tests you think are useful for this, I guess in miner_test.cpp.\n",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-47085053,47085053,
jtimon,2014-06-26T15:26:05Z,I've closed #4393 with @jgarzik 's input and turned it into a simpler commit 24410f9 here.\nI'm having second thoughts about UpdateTime again so I won't include that commit for now.\n,https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-47240232,47240232,
jtimon,2014-07-07T08:26:52Z,I'm including more commits. All commits are refactors that don't change functionality but if there's some of them that are more controversial I can separate them in different PRs.\n,https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-48152254,48152254,
jtimon,2014-07-07T08:42:50Z,"Also, to understand the motivation of this PR you may want to take a look to this unfinished branch that completely encapsulates the Proof of Work, making it easier to experiment with other Proofs:\n\nhttps://github.com/jtimon/bitcoin/tree/proof\n\nProbably Params().AllowMinDifficultyBlocks() can be removed with an specialized Proof. Well, not probably, for sure, what remains to be seen if it that",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-48153548,48153548,
laanwj,2014-07-07T08:48:12Z,"Agree on overall changes, haven't checked the code moves or tested yet.\n",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-48154039,48154039,
jaromil,2014-07-11T12:40:24Z,"Ping @sipa - This looks good to me, was wondering around this part of code and now happy to find this PR. It is not invasive and makes the whole POW more readable and maintainable.\n\nBut I advise against going forward into #4506 mainly because class polymorphism will affect runtime performance signicantly and can introduce problems using templates.\n\n#4508 looks like a very good move to follow u",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-48725329,48725329,
jtimon,2014-07-16T19:19:51Z,I simplified the last two commits and unified them into one after completing #4506 \n,https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-49213489,49213489,
jtimon,2014-07-17T19:56:35Z,Changed GetLengthIncrement to GetProofIncrement as suggested by @sipa   \n,https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-49356342,49356342,
laanwj,2014-07-20T05:52:17Z,Tested ACK\n,https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-49537995,49537995,
laanwj,2014-07-28T10:29:33Z,"I'm not entirely happy that part of the internal miner is moved to pow.cpp (the ugly loop GenerateProof , as well as global variable dHashesPerSec and nHPSTimerStart). Most of this clearly belongs in miner.cpp. \n\nI understand why, but I would prefer if pow.cpp only contained the consensus-critical code that verifies proof of work.\n\nI'd suggest to keep the outer loop in miner.cpp but move an in",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-50322774,50322774,
jtimon,2014-07-28T13:08:00Z,"I'm not entirely happy with the GenerateProof function either. My initial approach was to simply remove the optimizations, but #4423 was rejected. Maybe we could just remove the hashrate counter to simplify things...\nI'll explore your proposal in more detail. Perhaps I could leave the ""Encapsulate proof of work generation in pow"" commit (and the previous one) for #4506 so that this can be merged ",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-50335369,50335369,
jtimon,2014-07-28T14:01:59Z,"Thank you for the feedback. I thought it was good to rebase on top of the latest head often, but yes, that kind of invalidates earlier testing.\nI'll update this PR with the most basic commits that have been here for longer and leave the rest for later PRs. And I won't rebase it until it is required.\n",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-50341753,50341753,
jtimon,2014-07-28T14:38:50Z,Added the additional conversion to CheckMinWork as suggested by @laanwj \nJust kept the more tested and/or less controversial commits.\n,https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-50346905,50346905,
jtimon,2014-08-11T02:28:39Z,"Ping.\nAs far as I know I solved all the issues raised on the 3 commits that remain in the PR, right?\nIf there's anything I missed, please, tell me.\n",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-51736750,51736750,
laanwj,2014-08-11T07:08:05Z,Tested ACK\n,https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-51748066,51748066,
sipa,2014-08-23T11:07:04Z,I don't like keeping TODO's like the one you mentioned in master code. A comment about why it's there (if you don't delete it) or where it used to be (if you do) is fine of course.\n\nI'd keep the conversion.\n,https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-53149875,53149875,
sipa,2014-08-23T11:09:35Z,Mildly-tested ACK.\n,https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-53149923,53149923,
jtimon,2014-08-23T11:24:46Z,Additional conversion and TODO removed.\n,https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-53150184,53150184,
BitcoinPullTester,2014-08-23T11:38:33Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4377_654871d43677947d124673c9e0dd2984f0d3ca61/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-53150450,53150450,
jtimon,2014-08-24T11:46:34Z,"Sorry, in the comment to the commit you said it would be safe to remove the redundant conversion but later you say you would keep the conversion. I missed that and I removed it again.\nSo I'm confused, should I remove the conversion or only the TODO?\n",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-53189581,53189581,
sipa,2014-08-27T20:02:29Z,"@jtimon It's fine.\n\nBoth are safe; the extra conversion makes the test up to 0.000036% stronger (3 / 2^23). Then again, it's easy to do too.\n",https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-53631951,53631951,
jgarzik,2014-08-27T20:16:37Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/4377#issuecomment-53633942,53633942,
sipa,2014-07-17T16:05:43Z,That's a confusing name. How about GetProofIncrement()?\n,https://github.com/bitcoin/bitcoin/pull/4377#discussion_r15066629,15066629,src/pow.h
sipa,2014-08-23T11:02:32Z,"Deleting this conversion won't hurt. GetCompact + SetCompact will only round the (absolute value of a) uint256 down, so the check becomes stricter. As it's only a heuristic, loosening it is never a problem. Given that all it does is divide by a power of 4, I expect it to be no-op apart from the last 2 bits anyway.\n\nIn short: the test is probably immeasurably stronger by having the conversion.\n",https://github.com/bitcoin/bitcoin/pull/4377#discussion_r16630136,16630136,src/pow.cpp
