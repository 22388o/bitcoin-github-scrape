[
  {
    "sha": "1ac3c983bfe06f75542e4f4e30142952802a46d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWMzYzk4M2JmZTA2Zjc1NTQyZTRmNGUzMDE0Mjk1MjgwMmE0NmQ4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-07-26T15:15:32Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-07-26T15:15:32Z"
      },
      "message": "Mark single-argument constructors \"explicit\"",
      "tree": {
        "sha": "c468d61002a392a694c7e2f1eed14a62a77cc63e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c468d61002a392a694c7e2f1eed14a62a77cc63e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ac3c983bfe06f75542e4f4e30142952802a46d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac3c983bfe06f75542e4f4e30142952802a46d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ac3c983bfe06f75542e4f4e30142952802a46d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac3c983bfe06f75542e4f4e30142952802a46d8/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "415f2bff69985a9238d75f380db4c26dda47ca53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/415f2bff69985a9238d75f380db4c26dda47ca53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/415f2bff69985a9238d75f380db4c26dda47ca53"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ddf9b342d8eac1643877f0a6d42a22b38d17ca5f",
        "filename": "src/interfaces/handler.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/interfaces/handler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/interfaces/handler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/handler.cpp?ref=1ac3c983bfe06f75542e4f4e30142952802a46d8",
        "patch": "@@ -15,7 +15,7 @@ namespace {\n class HandlerImpl : public Handler\n {\n public:\n-    HandlerImpl(boost::signals2::connection connection) : m_connection(std::move(connection)) {}\n+    explicit HandlerImpl(boost::signals2::connection connection) : m_connection(std::move(connection)) {}\n \n     void disconnect() override { m_connection.disconnect(); }\n "
      },
      {
        "sha": "ea6f5740ac42179c211d67265e4689baaf2b5710",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=1ac3c983bfe06f75542e4f4e30142952802a46d8",
        "patch": "@@ -31,7 +31,7 @@ namespace {\n class PendingWalletTxImpl : public PendingWalletTx\n {\n public:\n-    PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}\n+    explicit PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}\n \n     const CTransaction& get() override { return *m_tx; }\n \n@@ -117,7 +117,7 @@ WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int de\n class WalletImpl : public Wallet\n {\n public:\n-    WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_shared_wallet(wallet), m_wallet(*wallet.get()) {}\n+    explicit WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_shared_wallet(wallet), m_wallet(*wallet.get()) {}\n \n     bool encryptWallet(const SecureString& wallet_passphrase) override\n     {"
      },
      {
        "sha": "99a65830cd678bcbc3098209b77dc7f312a6da9f",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=1ac3c983bfe06f75542e4f4e30142952802a46d8",
        "patch": "@@ -24,7 +24,7 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n     const CChainParams& m_params;\n \n public:\n-    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n+    explicit DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n     std::string operator()(const CKeyID& id) const\n     {"
      },
      {
        "sha": "eb5cbd8890e04dbe4d6645d3ad65a982d3cee686",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=1ac3c983bfe06f75542e4f4e30142952802a46d8",
        "patch": "@@ -71,7 +71,7 @@ class AddressTablePriv\n     QList<AddressTableEntry> cachedAddressTable;\n     AddressTableModel *parent;\n \n-    AddressTablePriv(AddressTableModel *_parent):\n+    explicit AddressTablePriv(AddressTableModel *_parent):\n         parent(_parent) {}\n \n     void refreshAddressTable(interfaces::Wallet& wallet)"
      },
      {
        "sha": "4411bfaa33e83d18e8992f5bec1f14417d8cb4a6",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=1ac3c983bfe06f75542e4f4e30142952802a46d8",
        "patch": "@@ -82,7 +82,7 @@ class RPCExecutor : public QObject\n {\n     Q_OBJECT\n public:\n-    RPCExecutor(interfaces::Node& node) : m_node(node) {}\n+    explicit RPCExecutor(interfaces::Node& node) : m_node(node) {}\n \n public Q_SLOTS:\n     void request(const QString &command, const QString &walletID);"
      },
      {
        "sha": "dddae46c45457b255d882791585fc58e090521b4",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=1ac3c983bfe06f75542e4f4e30142952802a46d8",
        "patch": "@@ -58,7 +58,7 @@ struct TxLessThan\n class TransactionTablePriv\n {\n public:\n-    TransactionTablePriv(TransactionTableModel *_parent) :\n+    explicit TransactionTablePriv(TransactionTableModel *_parent) :\n         parent(_parent)\n     {\n     }"
      },
      {
        "sha": "c98320d1a696acf8d5eb631a6a13dd479a8c27be",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=1ac3c983bfe06f75542e4f4e30142952802a46d8",
        "patch": "@@ -29,7 +29,7 @@ BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n // BOOST_CHECK_EXCEPTION predicates to check the specific validation error\n class HasReason {\n public:\n-    HasReason(const std::string& reason) : m_reason(reason) {}\n+    explicit HasReason(const std::string& reason) : m_reason(reason) {}\n     bool operator() (const std::runtime_error& e) const {\n         return std::string(e.what()).find(m_reason) != std::string::npos;\n     };"
      },
      {
        "sha": "4316f379990b775e223957498329596684109622",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac3c983bfe06f75542e4f4e30142952802a46d8/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=1ac3c983bfe06f75542e4f4e30142952802a46d8",
        "patch": "@@ -23,7 +23,7 @@ BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n struct TestSubscriber : public CValidationInterface {\n     uint256 m_expected_tip;\n \n-    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+    explicit TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n \n     void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override\n     {"
      }
    ]
  }
]